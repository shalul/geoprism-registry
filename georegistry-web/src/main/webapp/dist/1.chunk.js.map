{"version":3,"sources":["webpack:///./src/app/registry/registry.module.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.html","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.html","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","AddRemoveChildDetailComponent","SetParentDetailComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","ManageVersionsModalComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","ManageParentVersionsModalComponent","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","http","eventService","init","this","get","acp","toPromise","getGeoObjectTypes","types","hierarchies","params","HttpParams","set","JSON","stringify","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","date","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","typeCode","headers","HttpHeaders","start","post","pipe","finalize","complete","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","code","addAttributeType","geoObjTypeId","attribute","updateAttributeType","deleteAttributeType","attributeName","addAttributeTermTypeOption","parentTermCode","term","updateAttributeTermTypeOption","termJSON","deleteAttributeTermTypeOption","termCode","getGeoObject","id","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestions","text","type","parent","hierarchy","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","pageSize","pageNumber","sortAttr","isAscending","toString","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","getExportDetails","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","oid","versionType","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","createMasterList","list","createMasterListVersion","forDate","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","parentTreeNode","geoObject","isNew","masterListId","notes","data","filter","sort","length","values","value","valueAttribute","publishShapefile","progress","getMasterListsByOrg","getPublishMasterListJobs","getOrganizations","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeLeafTypes","getTypeAncestors","hierarchyCode","getHierarchiesForType","includeTypes","createGeoObjectSynonym","entityId","label","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","removeTerm","PRESENT","TreeEntity","description","children","addChild","push","Term","GeoObject","attributes","GeoObjectType","Task","geoObjectType","getVotAtDate","attrCode","lService","retVot","startDate","endDate","time","getTime","i","attr","create","isChangeOverTime","forEach","vot","Date","parse","Array","isArray","GeoObjectOverTime","ValueOverTime","isDefault","required","unique","Attribute","isChange","rootTerm","termOptions","setRootTerm","AttributeTerm","precision","scale","AttributeDecimal","GeoObjectTypeModalStates","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","PaginationPage","AbstractScheduledJob","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","MasterList","MasterListVersion","HierarchyOverTime","ImportStrategy","MasterListByOrg","SynchronizationConfig","OrgSyncInfo","ExportScheduledJob","getHierarchyTypes","addChildToHierarchy","parentGeoObjectTypeCode","childGeoObjectTypeCode","removeFromHierarchy","createHierarchyType","htJSON","updateHierarchyType","deleteHierarchyType","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","getAllActions","requestId","applyAction","action","applyActionStatusProperties","lockAction","actionId","unlockAction","getAllRequests","getRequestDetails","confirmChangeRequest","execute","rejectAllActions","actions","approveAllActions","submitChangeRequest","transform","getPage","apply","edit","remove","unlock","run","getJobs","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","EventEmitter","message","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","animate","onAnimationDone","event","isValid","indexOf","localeValues","console","log","trigger","style","transition","ImportSheet","Location","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","service","iService","bsModalRef","authService","readonly","onMasterListChange","master","then","myOrgTypes","isGeoObjectTypeRM","orgCode","catch","err","error","displayLabel","representativityDate","publishDate","listAbstract","process","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","leaf","frequency","isMaster","visibility","org","getIsDisabled","elClasses","target","classList","onChange","onSubmit","response","hide","onCancel","localizedMessage","key","disabled","valueChange","modalService","changeDetectorRef","registryService","elRef","changeRequestService","datePipe","toEpochDateTimePipe","preGeoObject","calculatedPreObject","postGeoObject","calculatedPostObject","attributeExcludes","readOnly","isEditingGeometries","isGeometryInlined","valid","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","geomAttr","geometry","LocalizedValue","calculate","attributeForm","statusChanges","subscribe","result","emit","changes","calculateCurrent","geometryEditor","reload","goot","object","formatDate","localize","handleChangeCode","e","onManageAttributeVersions","show","animated","backdrop","ignoreBackdropClick","content","geoObjectOverTime","isNewGeoObject","onAttributeVersionChange","versionObj","tfInit","onManageGeometryVersions","isDifferentText","trim","isDifferentValue","onSelectPropertyOption","option","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attrOpts","removeStatuses","isStatusChanged","pre","preCompare","postCompare","getTypeDefinition","getIsValid","validator","c","geoObjectAttributeCode","validate","provide","NG_VALIDATORS","useExisting","multi","configurationChange","stateChange","onNext","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","name","exclusion","termProblems","attributeCode","geometryChange","onClickEdit","setTimeout","mapboxgl","accessToken","mapDiv","nativeElement","Math","floor","random","map","Map","container","zoom","center","on","initMap","onValidChange","removeLayers","addLayers","editingControl","getAll","features","saveDraw","preGeometry","zoomToBbox","addControl","NavigationControl","addEditButton","enableEditing","simpleEditControl","editEmitter","geometryType","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","postGeometry","add","removeSource","prefix","sourceName","removeLayer","getSource","renderGeometryAsLayer","color","addSource","addLayer","setData","bboxCode","bboxType","bboxDate","boundArr","bounds","LngLatBounds","fitBounds","padding","featureCollection","polygons","feature","j","coordinates","points","lines","cHierarchies","parentMap","day","getUTCDate","dateStr","getUTCFullYear","getUTCMonth","entries","pot","parents","getHierarchies","onManageVersions","find","h","onVersionChange","ErrorModalComponent","localizeService","geoObjectTypes","geoObjectId","reason","dataSource","Observable","observer","results","isGeoObjectTypeRC","organizationCode","a","b","localizedValue","toLowerCase","pos","getGeoObjectTypePosition","splice","newValid","attributeEditor","changeTypeaheadLoading","typeaheadLoading","typeaheadOnSelect","item","submit","goSubmit","cancel","SuccessModalComponent","decode","tabIndex","submitFunction","arePropertiesValid","areParentsValid","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","handleDateChange","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","goPropertiesPost","configureFromImportError","importError","importErrorId","resolution","configureAsExisting","fetchGeoObject","fetchHierarchies","locales","setLocales","typeTypeCode","getTypeAheadObservable","ptn","properties","parentSelector","changePage","nextPage","force","persistModelChanges","_stepConfig","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","status","contextMenuService","instance","Instance","nodes","currentHierarchy","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","isRA","isOrganizationRA","desiredHierarchy","setHierarchies","setNodesOnInit","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","index","findIndex","rootGeoObjectTypes","treeModel","expandAll","setNodesForHierarchy","hierarchyType","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","updateHierarchy","getHierarchyLabel","child","gOT","childType","nodeMenuComponent","leafMenuComponent","preventDefault","stopPropagation","setFocusedNode","isExpanded","collapse","hierarchyOnClick","update","createHierarchy","onHierarchytTypeCreate","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","manageGeoObjectType","onGeoObjectTypeSubmitted","position","addChildAndRootToHierarchy","that","allGeoObjectTypes","toRoot","onNodeChange","current","deleteTreeNode","removeTreeNode","n","hasChildren","isActive","onDrop","element","allowDrop","TreeComponent","auth","organizations","orgs","onSelect","gObj","selectedGeoObjectType","toggleIsLeaf","isLeaf","toggleIsGeometryEditable","confirmBsModalRef","geoObjectTypeManagementService","modalStateSubscription","unsubscribe","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","localizationService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","manageAttributes","onDeleteAttribute","defineAttributeModal","defineAttribute","editAttribute","removeAttributeType","attributeType","newAttribute","setAttribute","attributeInputComponent","isFormValid","isAttrValid","Object","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","termOption","replace","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","sysService","showImportConfig","importStrategies","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","getExternalSystems","paginatedSystems","externalSystems","resultSet","getUrl","format","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","append","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","externalSystem","sys","externalSystemId","onErrorItem","onClick","queue","uploadAll","setImportSource","onCreate","createDate","lastUpdateDate","admin","lists","onView","onEdit","pair","ret","onDelete","arr","onFormat","confirm","objectKeys","keys","requests","columns","filterCriteria","prop","sortable","width","refresh","selected","onExecute","changeRequest","request","onApproveAll","onRejectAll","requestTrackBy","toggle","parentElement","className","includes","toggleId","criteria","setActionStatus","approvalStatus","getActiveDetailComponent","actionType","endsWith","showActionDetail","curAction","cuDetail","endEdit","arDetail","spDetail","editingGeometry","hasDuplicateDate","vAttribute","onDateChange","vAttributes","snapDates","votArr","prev","formatDateString","onAddNewVersion","terms","editGeometry","getVersionData","versions","val","getDefaultLocaleVal","locale","defVal","locVal","setDateAttribute","version","opacity","newArray","dateObj","month","visible","onAdd","onRemove","items","entry","pType","uid","ancestors","ancestor","pService","route","p","page","count","order","isPublished","isRefreshing","searchPlaceholder","snapshot","paramMap","isCollapsed","onPageChange","onSort","clearFilters","search","toggleFilter","getValues","base","unshift","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","editModal","onGoto","window","open","onPublish","subscription","interval","onNewGeoObject","onExport","location","href","encodeURIComponent","pollingData","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onDownloadShapefile","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","allSelected","timeCounter","isPolling","hasRowValidationProblem","stopPolling","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","startPolling","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onResolveScheduledJob","onProblemResolvedListener","onEditGeoObject","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","toUpperCase","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onViewAllCompletedTasks","onSuccess","system","cOrg","cSystem","oIndex","sIndex","systems","onOrganizationSelected","addLevel","removeLevel","onRun","exportErrors","geoObjectJson","canDeactivate","afterDeactivate","isDeactivating","unlockActionSync","startEdit","$","ajax","method","success","async","original","ChangeRequest","AbstractAction","UpdateGeoObjectAction","CreateGeoObjectAction","AddChildAction","RemoveChildAction","GovernanceStatus","PageEvent","SetParentAction","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","getNewLocaleInfo","installLocale","language","country","variant","routes","path","component","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"2IAAA,SACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UAGA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,O,kTAGA,4B,wCAuIaA,I,8DAAAA,IAAc,UA7Cf,CACV,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,8BACA,SAtGQ,CACR,EAAAC,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBAEA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,0B,EAjBF,GAuIa,EAAA3B,mB,iEAAAA,GAAc,eAnHzB,EAAA4B,mBACA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,8BACA,EAAAC,yBACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BACA,GAAAC,kBACA,GAAAC,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,E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","file":"1.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedInputComponent } from './component/form-fields/localized-input/localized-input.component';\nimport { LocalizedTextComponent } from './component/form-fields/localized-text/localized-text.component';\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { CreateHierarchyTypeModalComponent } from './component/hierarchy/modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './component/hierarchy/modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './component/hierarchy/modals/create-geoobjtype-modal.component';\nimport { ManageAttributesModalComponent } from './component/hierarchy/geoobjecttype-management/manage-attributes-modal.component';\nimport { DefineAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component';\nimport { EditAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component';\nimport { ShapefileModalComponent } from './component/importer/modals/shapefile-modal.component';\nimport { AttributesPageComponent } from './component/importer/modals/attributes-page.component';\nimport { LocationPageComponent } from './component/importer/modals/location-page.component';\nimport { LocationProblemPageComponent } from './component/importer/modals/location-problem-page.component';\nimport { LocationProblemComponent } from './component/importer/modals/location-problem.component';\nimport { TermProblemPageComponent } from './component/importer/modals/term-problem-page.component';\nimport { TermProblemComponent } from './component/importer/modals/term-problem.component';\nimport { SpreadsheetModalComponent } from './component/importer/modals/spreadsheet-modal.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { TermOptionWidgetComponent } from './component/hierarchy/geoobjecttype-management/term-option-widget.component';\nimport { AttributeInputComponent } from './component/hierarchy/geoobjecttype-management/attribute-input.component';\nimport { EditTermOptionInputComponent } from './component/hierarchy/geoobjecttype-management/edit-term-option-input.component';\nimport { ManageTermOptionsComponent } from './component/hierarchy/geoobjecttype-management/manage-term-options.component';\nimport { GeoObjectTypeInputComponent } from './component/hierarchy/geoobjecttype-management/geoobjecttype-input.component';\nimport { ManageGeoObjectTypeModalComponent } from './component/hierarchy/modals/manage-geoobjecttype-modal.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { PublishModalComponent } from './component/master-list/publish-modal.component';\nimport { ExportFormatModalComponent } from './component/master-list/export-format-modal.component';\nimport { RequestTableComponent } from './component/crtable/request-table.component';\nimport { CreateUpdateGeoObjectDetailComponent } from './component/crtable/action-detail/create-update-geo-object/detail.component';\nimport { AddRemoveChildDetailComponent } from './component/crtable/action-detail/add-remove-child/detail.component';\nimport { SetParentDetailComponent } from './component/crtable/action-detail/set-parent/set-parent-detail.component';\nimport { GeoObjectSharedAttributeEditorComponent } from './component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component';\nimport { ManageVersionsModalComponent } from './component/geoobject-shared-attribute-editor/manage-versions-modal.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { GeoObjectEditorComponent } from './component/geoobject-editor/geoobject-editor.component';\nimport { GeoObjectEditorMapComponent } from './component/geoobject-editor-map/geoobject-editor-map.component';\nimport { SimpleEditControl } from './component/geoobject-editor-map/simple-edit-control/simple-edit-control.component';\nimport { CascadingGeoSelector } from './component/cascading-geo-selector/cascading-geo-selector';\nimport { ManageParentVersionsModalComponent } from './component/cascading-geo-selector/manage-parent-versions-modal.component';\nimport { ActionDetailModalComponent } from './component/crtable/action-detail/action-detail-modal.component';\nimport { DataImporterComponent } from './component/importer/dataimporter.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { PublishedMasterListHistoryComponent } from './component/master-list/published-master-list-history.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { JobConflictModalComponent } from './component/scheduled-jobs/conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './component/scheduled-jobs/conflict-widgets/reupload-modal.component';\nimport { ParentReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component';\nimport { TermReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component';\nimport { RowValidationProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component';\nimport { StepIndicatorComponent } from './component/scheduled-jobs/step-indicator.component';\nimport { ImportProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/import-problem-widget.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigModalComponent } from './component/synchronization-config/synchronization-config-modal.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\n\n\nimport { GeoObjectAttributeCodeValidator } from './factory/form-validation.factory';\n\nimport { GeoObjectTypePipe } from './pipe/geoobjecttype.pipe';\nimport { GeoObjectAttributeExcludesPipe } from './pipe/geoobject-attribute-excludes.pipe';\nimport { ToEpochDateTimePipe } from './pipe/to-epoch-date-time.pipe';\nimport { RegistryService } from './service/registry.service';\nimport { TaskService } from './service/task.service';\nimport { HierarchyService } from './service/hierarchy.service';\nimport { SynchronizationConfigService } from './service/synchronization-config.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\nimport { ChangeRequestService } from './service/change-request.service';\nimport { IOService } from './service/io.service';\nimport { MapService } from './service/map.service';\nimport { GeoObjectTypeManagementService } from './service/geoobjecttype-management.service'\n\nimport { RegistryRoutingModule } from './registry-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\t//        ModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule,\n\t\tSharedModule,\n\t\tRegistryRoutingModule\n\t],\n\tdeclarations: [\n\t\tHierarchyComponent,\n\t\tRequestTableComponent,\n\t\tCreateUpdateGeoObjectDetailComponent,\n\t\tAddRemoveChildDetailComponent,\n\t\tSetParentDetailComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tShapefileModalComponent,\n\t\tAttributesPageComponent,\n\t\tLocationPageComponent,\n\t\tLocationProblemPageComponent,\n\t\tLocationProblemComponent,\n\t\tTermProblemPageComponent,\n\t\tTermProblemComponent,\n\t\tSpreadsheetModalComponent,\n\t\tGeoObjectTypePipe,\n\t\tGeoObjectAttributeCodeValidator,\n\t\tEditAttributeModalContentComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tLocalizedInputComponent,\n\t\tLocalizedTextComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tGeoObjectAttributeExcludesPipe,\n\t\tToEpochDateTimePipe,\n\t\tGeoObjectEditorMapComponent,\n\t\tSimpleEditControl,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tCascadingGeoSelector,\n\t\tManageParentVersionsModalComponent,\n\t\tActionDetailModalComponent,\n\t\tHierarchyComponent,\n\t\tDataImporterComponent,\n\t\tDataExportComponent,\n\t\t// Master List screens\n\t\tMasterListManagerComponent,\n\t\tMasterListComponent,\n\t\tMasterListHistoryComponent,\n\t\tPublishedMasterListHistoryComponent,\n\t\tPublishModalComponent,\n\t\tMasterListViewComponent,\n\t\t// Scheduled jobs\n\t\tExportFormatModalComponent,\n\t\tScheduledJobsComponent,\n\t\tJobComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tParentReferenceProblemWidgetComponent,\n\t\tTermReferenceProblemWidgetComponent,\n\t\tRowValidationProblemWidgetComponent,\n\t\tStepIndicatorComponent,\n\t\tImportProblemWidgetComponent,\n\t\tTaskViewerComponent,\n\t\t// Synchronization Config\n\t\tSynchronizationConfigManagerComponent,\n\t\tSynchronizationConfigModalComponent,\n\t\tSynchronizationConfigComponent,\n\t\tSyncDetailsComponent\n\t],\n\tproviders: [\n\t\tMapService,\n\t\tHierarchyService,\n\t\tLocalizationManagerService,\n\t\tChangeRequestService,\n\t\tIOService,\n\t\tGeoObjectTypeManagementService,\n\t\tRegistryService,\n\t\tTaskService,\n\t\tDatePipe,\n\t\tToEpochDateTimePipe,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigService\n\t],\n\tentryComponents: [\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tEditAttributeModalContentComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tShapefileModalComponent,\n\t\tSpreadsheetModalComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tManageParentVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tPublishModalComponent,\n\t\tExportFormatModalComponent,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tActionDetailModalComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigModalComponent\n\t]\n})\nexport class RegistryModule { }\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { GeoObject, GeoObjectType, Attribute, Term, MasterList, MasterListVersion, ParentTreeNode, \r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage, MasterListByOrg } from '../model/registry';\r\nimport { HierarchyType } from '../model/hierarchy';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\nimport { Organization } from '../../shared/model/core';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }>( acp + '/cgr/init' )\r\n            .toPromise();\r\n    }\r\n    \r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes( types: string[], hierarchies:string[] ): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n\r\n        if(types != null) {\r\n          params = params.set( 'types', JSON.stringify( types ) );\t\r\n        }\r\n\r\n        if(hierarchies != null) {\r\n          params = params.set( 'hierarchies', JSON.stringify( hierarchies ) );\t\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>( acp + '/cgr/geoobjecttype/get-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects( childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string ): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'childId', childId )\r\n        params = params.set( 'childTypeCode', childTypeCode )\r\n        params = params.set( 'parentTypes', JSON.stringify( parentTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        if ( date != null ) {\r\n            params = params.set( 'date', date );\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>( acp + '/cgr/geoobject/get-parent-geoobjects', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    getChildGeoObjects( parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean ): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'parentId', parentId )\r\n        params = params.set( 'parentTypeCode', parentTypeCode )\r\n        params = params.set( 'childrenTypes', JSON.stringify( childrenTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>( acp + '/cgr/geoobject/getchildren', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType( gtJSON: string ): Promise<GeoObjectType> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/create', JSON.stringify( { 'gtJSON': gtJSON } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType( gtJSON: GeoObjectType ): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/update', JSON.stringify( { \"gtJSON\": gtJSON } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType( code: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/delete', JSON.stringify( { code: code } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    addAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/addattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/updateattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType( geoObjTypeId: string, attributeName: string ): Promise<boolean> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<boolean>( acp + '/cgr/geoobjecttype/deleteattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeName': attributeName } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption( parentTermCode: string, term: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( { 'parentTermCode': parentTermCode, 'termJSON': term } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption( termJSON: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/updateterm', JSON.stringify( { 'termJSON': termJSON } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption( termCode: string ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { 'termCode': termCode } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject( id: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'id', id )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds( code: string, typeCode: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n    \r\n    getGeoObjectBoundsAtDate( code: string, typeCode: string, date: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n        params = params.set( 'date', date );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject-time/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode( code: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get-code', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject( code: string, typeCode: string ): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>( acp + '/cgr/geoobject/get-hierarchies-over-time', { params: params } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string, date: string ): Promise<GeoObject> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if ( date != null ) {\r\n            params.date = date;\r\n        }\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead( text: string, type: string ): Promise<GeoObject> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/etl/get-active', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/etl/get-completed', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString())\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>( acp + '/etl/get-import-details', { params: params } )\r\n            .toPromise();\r\n    }\r\n    \r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString())\r\n\r\n        return this.http\r\n            .get<ScheduledJob>( acp + '/etl/get-export-details', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/import-resolve', JSON.stringify( { historyId: historyId } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n    \r\n    submitValidationResolve( config: any ): Promise<any> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n  \r\n      this.eventService.start();\r\n  \r\n      return this.http\r\n        .post<MasterList>( acp + '/etl/validation-resolve', JSON.stringify( { config: config } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n    \r\n    submitErrorResolve( config: any ): Promise<any> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<MasterList>( acp + '/etl/error-resolve', JSON.stringify( { config: config } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n\r\n    getMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>( acp + '/master-list/list-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListHistory( oid: string, versionType: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n        params = params.set( 'versionType', versionType );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/versions', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListVersion( oid: string ): Promise<MasterListVersion> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterListVersion>( acp + '/master-list/version', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<string[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<string[]>( acp + '/localization/get-locales', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime( geoObjectCode: string, geoObjectTypeCode: string ): Promise<GeoObjectOverTime> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        // let params: HttpParams = new HttpParams();\r\n        // params = params.set( 'geoObjectCode', geoObjectCode );\r\n        // params = params.set( 'geoObjectTypeCode', geoObjectTypeCode );\r\n        // params = params.set( 'attributeName', attributeName );\r\n\r\n        // return this.http\r\n        //     .get<ValueOverTime[]>( acp + '/cgr/geoobject/getAttributeVersions', { params: params } )\r\n        //     .toPromise();\r\n\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', geoObjectCode );\r\n        params = params.set( 'typeCode', geoObjectTypeCode );\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>( acp + '/cgr/geoobject-time/get-code', { params: params } )\r\n            .toPromise();\r\n\r\n    }\r\n\r\n    newGeoObjectOverTime( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject-time/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n\r\n\r\n\r\n    // getAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string ): any[] {\r\n    //     let test =[\r\n    //         {\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":{\"localeValues\":[\r\n    //             {\"locale\":\"defaultLocale\",\"value\":\"Anlong Veaeng\"}]}}\r\n    //     ]\r\n\r\n    //     // let test = [{\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":\"test\"}];\r\n\r\n    //     return test;\r\n    // }\r\n\r\n\r\n    setAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[] ): Promise<Response> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>( acp + '/cgr/geoobject/setAttributeVersions', JSON.stringify( params ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterList( list: MasterList ): Promise<MasterList> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>( acp + '/master-list/create', JSON.stringify( { list: list } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterListVersion( oid: string, forDate: string ): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterListVersion>( acp + '/master-list/create-version', JSON.stringify( { oid: oid, forDate: forDate } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterListVersions( oid: string ): Promise<{ job: string }> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<{ job: string }>( acp + '/master-list/publish-versions', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterList( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    deleteMasterListVersion( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove-version', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    publishMasterList( oid: string ): Observable<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http.post<MasterListVersion>( acp + '/master-list/publish', JSON.stringify( { oid: oid } ), { headers: headers } );\r\n    }\r\n\r\n    getMasterList( oid: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit( parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTreeNode: parentTreeNode, geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if ( notes != null ) {\r\n            params['notes'] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geoobject-editor/apply', JSON.stringify( params ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    data( oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string } ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            sort: sort\r\n        } as any;\r\n\r\n        if ( pageNumber != null ) {\r\n            params.pageNumber = pageNumber;\r\n        }\r\n\r\n        if ( pageSize != null ) {\r\n            params.pageSize = pageSize;\r\n        }\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/master-list/data', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    values( oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[] ): Promise<{ label: string, value: string }[]> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            attributeName: attributeName,\r\n            valueAttribute: valueAttribute\r\n        } as any;\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        if ( value != null && value.length > 0 ) {\r\n            params.value = value;\r\n        }\r\n\r\n\r\n        return this.http\r\n            .post<{ label: string, value: string }[]>( acp + '/master-list/values', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    publishShapefile( oid:string  ): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<MasterListVersion>( acp + '/master-list/generate-shapefile', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    progress( oid: string ): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<Progress>( acp + '/master-list/progress', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\tgetMasterListsByOrg(): Promise<{ locales: string[], orgs: MasterListByOrg[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + '/master-list/list-org', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n    getPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('oid', oid);\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/master-list/get-publish-jobs', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n    getOrganizations(): Promise<Organization[]> {\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(acp + '/cgr/organizations/get-all')\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from '../model/io';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    importSpreadsheet( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport( configuration: ImportConfiguration ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/cancel-import', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    importShapefile( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    listGeoObjectTypes( includeLeafTypes: boolean ): Promise<{ label: string, code: string, orgCode: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'includeLeafTypes', includeLeafTypes.toString() );\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>( acp + '/cgr/geoobjecttype/list-types', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors( code: string, hierarchyCode: string ): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'hierarchyCode', hierarchyCode );\r\n\r\n        return this.http\r\n            .get<Location[]>( acp + '/cgr/geoobjecttype/get-ancestors', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType( code: string, includeTypes: boolean ): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'includeTypes', includeTypes.toString() );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>( acp + '/cgr/geoobjecttype/get-hierarchies', { params: params } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string ): Promise<any> {\r\n        \r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym( entityId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/geo-synonym/createGeoEntitySynonym', JSON.stringify( { entityId: entityId, label: label } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym( synonymId: string, vOid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geo-synonym/deleteGeoEntitySynonym', JSON.stringify( { synonymId: synonymId, vOid: vOid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    getTermSuggestions( mdAttributeId: string, text: string, limit: string ): Promise<{ text: string, data: any }[]> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'mdAttributeId', mdAttributeId );\r\n        params = params.set( 'text', text );\r\n        params = params.set( 'limit', limit );\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>( acp + '/uploader/getClassifierSuggestions', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTermSynonym( classifierId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { classifierId: classifierId, label: label } );\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/uploader/createClassifierSynonym', data, { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym( synonymId: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { synonymId: synonymId } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/uploader/deleteClassifierSynonym', data, { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTerm( label: string, code: string, parentTermCode: string ): Promise<Term> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm( termCode: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { termCode: termCode } ), { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import { LocalizedValue, Organization } from '../../shared/model/core';\nimport { LocalizationService } from '../../shared/service/localization.service';\nimport { ImportConfiguration } from './io';\n\nexport const PRESENT: string = '5000-12-31'\n\nexport class TreeEntity {\n\tid: string;\n\tname: string;\n\thasChildren: boolean;\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\n\tconstructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n\t\tthis.code = code;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t}\n\tchildren: Term[] = [];\n\n\taddChild(term: Term) {\n\t\tthis.children.push(term);\n\t}\n}\n\nexport class GeoObject {\n\ttype: string;\n\tgeometry: any;\n\tproperties: {\n\t\tuid: string,\n\t\tcode: string,\n\t\tdisplayLabel: LocalizedValue,\n\t\ttype: string,\n\t\tstatus: string[],\n\t\tsequence: string\n\t\tcreateDate: string,\n\t\tlastUpdateDate: string,\n\t};\n}\n\nexport class GeoObjectType {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tgeometryType: string;\n\tisLeaf: boolean;\n\tisGeometryEditable: boolean;\n\torganizationCode: string;\n\tattributes: Array<Attribute | AttributeTerm | AttributeDecimal> = [];\n}\n\nexport class Task {\n\tid: string;\n\ttemplateKey: string;\n\tmsg: string;\n\ttitle: string;\n\tstatus: string;\n\tcreateDate: number;\n\tcompletedDate: number;\n}\n\n// export class Attribute {\n\n//   name: string;\n//   type: string;\n//   label: string;\n//   description: string;\n//   isDefault: boolean;\n// }\n\n// export class AttributeTerm extends Attribute {\n//     descendants: Attribute[];\n//     rootTerm: string;\n// }\n\nexport class GeoObjectOverTime {\n\n\tgeoObjectType: GeoObjectType;\n\n\tattributes: any;\n\n\tpublic constructor(geoObjectType: GeoObjectType, attributes: any) {\n\t\tthis.geoObjectType = geoObjectType;\n\t\tthis.attributes = attributes;\n\t}\n\n\tpublic getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n\t\tlet retVot = { startDate: date, endDate: null, value: null };\n\n\t\tconst time = date.getTime();\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.code === attrCode) {\n\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\tretVot.value = lService.create();\n\t\t\t\t}\n\n\t\t\t\tif (attr.isChangeOverTime) {\n\t\t\t\t\tlet values = this.attributes[attr.code].values;\n\n\t\t\t\t\tvalues.forEach(vot => {\n\n\t\t\t\t\t\tconst startDate = Date.parse(vot.startDate);\n\t\t\t\t\t\tconst endDate = Date.parse(vot.endDate);\n\n\t\t\t\t\t\tif (time >= startDate && time <= endDate) {\n\n\t\t\t\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\t\t\t\tretVot.value = JSON.parse(JSON.stringify(vot.value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (attr.type === 'term' && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n\t\t\t\t\t\t\t\tretVot.value = vot.value[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tretVot.value = vot.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tretVot.value = this.attributes[attr.code];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn retVot;\n\t}\n}\n\nexport class ValueOverTime {\n\tstartDate: string;\n\tendDate: string;\n\tvalue: any;\n\tremovable?: boolean;\n}\n\nexport class Attribute {\n\tcode: string;\n\ttype: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tisDefault: boolean;\n\trequired: boolean;\n\tunique: boolean;\n\tisChangeOverTime?: boolean;\n\tprecision?: number;\n\tscale?: number;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n\t\tthis.code = code;\n\t\tthis.type = type;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t\tthis.isDefault = isDefault;\n\t\tthis.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n\t\tthis.unique = unique;\n\t\tthis.isChangeOverTime = isChangeOverTime;\n\t}\n\n}\n\nexport class AttributeTerm extends Attribute {\n\t//descendants: Attribute[];\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n\n\trootTerm: Term = new Term(null, null, null);\n\n\ttermOptions: Term[] = [];\n\n\tsetRootTerm(term: Term) {\n\t\tthis.rootTerm = term;\n\t}\n}\n\nexport class AttributeDecimal extends Attribute {\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\n\t\tthis.precision = 32;\n\t\tthis.scale = 8;\n\t}\n}\n\nexport enum GeoObjectTypeModalStates {\n\t\"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n\t\"editAttribute\" = \"EDIT-ATTRIBUTE\",\n\t\"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n\t\"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n\t\"editTermOption\" = \"EDIT-TERM-OPTION\",\n\t\"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport class TreeNode {\n\tgeoObject: GeoObject;\n\thierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n\tchildren: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n\tparents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n\tstate: string;\n\tattribute: any;\n\ttermOption: any;\n}\n\nexport class PaginationPage {\n\tpageNumber: number;\n\tcount: number;\n\tpageSize: number;\n\tresults: any[];\n}\n\nexport class AbstractScheduledJob {\n\tjobId: string;\n\thistoryId: string;\n\tstage: string;\n\tstatus: string;\n\tauthor: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tworkProgress: number;\n\tworkTotal: number;\n\tstartDate: string;\n\tendDate: string;\n}\n\nexport class ScheduledJob extends AbstractScheduledJob {\n\timportedRecords: number;\n\tconfiguration: ImportConfiguration;\n\timportErrors: PaginationPage;\n\texportErrors: PaginationPage;\n\tproblems: PaginationPage;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n\tstepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n\texception: ServerException;\n\tobject: ImportErrorObject;\n\tobjectType: string;\n\tid: string;\n\tresolution: string;\n\tselected?: boolean;\n}\n\nexport class ServerException {\n\tattributes: ServerExceptionAttribute[];\n\ttype: string;\n\tmessage: string;\n}\n\nexport class ServerExceptionAttribute {\n\tvalue: string;\n\tkey: string;\n}\n\nexport class ImportErrorObject {\n\tgeoObject: GeoObjectOverTime;\n\tparents: HierarchyOverTime[];\n\tisNew: boolean;\n}\n\nexport class StepConfig {\n\tsteps: Step[];\n}\n\nexport class Step {\n\tlabel: string;\n\tcomplete?: boolean;\n\tenabled?: boolean;\n\tstatus?: string;\n}\n\nexport class MasterList {\n\toid: string;\n\ttypeCode: string;\n\tdisplayLabel: LocalizedValue;\n\tcode: string;\n\trepresentativityDate: Date;\n\tpublishDate: Date;\n\tlistAbstract: string;\n\tprocess: string;\n\tprogress: string;\n\taccessConstraints: string;\n\tuseConstraints: string;\n\tacknowledgements: string;\n\tdisclaimer: string;\n\tcontactName: string;\n\torganization: string;\n\ttelephoneNumber: string;\n\temail: string;\n\thierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n\tleaf: boolean;\n\tfrequency: string;\n\tisMaster: boolean;\n\tvisibility: string;\n\tadmin: boolean;\n\tversions?: MasterListVersion[]\n}\n\nexport class MasterListVersion {\n\tdisplayLabel: string;\n\toid: string;\n\ttypeCode: string;\n\tleaf: boolean;\n\tmasterlist: string;\n\tforDate: string;\n\tcreateDate: string;\n\tpublishDate: string;\n\tattributes: any[];\n\tisGeometryEditable: boolean;\n\tlocales?: string[];\n\tshapefile?: boolean;\n}\n\nexport class HierarchyOverTime {\n\tcode: string;\n\tlabel: string;\n\ttypes: {\n\t\tcode: string;\n\t\tlabel: string;\n\t}[];\n\tentries: {\n\t\tstartDate: string;\n\t\tendDate: string;\n\t\tparents: { [k: string]: { text: string; geoObject: GeoObject } };\n\t}[];\n}\n\nexport enum ImportStrategy {\n\t\"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n\t\"NEW_ONLY\" = \"NEW_ONLY\",\n\t\"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport class MasterListByOrg {\n\toid: string;\n\tlabel: string;\n\tlists: { label: string, oid: string, createDate: string, lastUpdateDate: string, admin: boolean, isMaster: boolean }[];\n}\n\nexport class SynchronizationConfig {\n\toid?: string;\n\ttype?: string;\n\tsystemLabel?: string;\n\torganization: string;\n\tsystem: string;\n\thierarchy: string;\n\tlabel: LocalizedValue;\n\tconfiguration: any;\n}\n\nexport class OrgSyncInfo {\n\tlabel: string;\n\tcode: string;\n\thierarchies: { label: string, code: string }[];\n\tsystems: { label: string, oid: string, type: string }[];\n};\n\nexport class ExportScheduledJob extends AbstractScheduledJob {\n\tstepConfig?: StepConfig;\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { HierarchyType } from '../model/hierarchy';\nimport { TreeEntity } from '../model/registry';\nimport { EventService } from '../../shared/service/event.service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    getHierarchyTypes( types: any ): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'types', JSON.stringify(types) );\n        \n        return this.http\n            .get<HierarchyType[]>( acp + '/cgr/hierarchytype/get-all', {params: params})\n            .toPromise();\n    }\n    \n    addChildToHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n\t   let headers = new HttpHeaders( {\n           'Content-Type': 'application/json'\n       } );\n\n       this.eventService.start();\n\n       return this.http\n           .post<HierarchyType>( acp + '/cgr/hierarchytype/add', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n           .toPromise();\n    }\n    \n    removeFromHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n \t   let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/remove', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n     }\n    \n    createHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/create', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    updateHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/update', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    deleteHierarchyType( code: string ): Promise<TreeEntity> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n        \n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>( acp + '/cgr/hierarchytype/delete', { 'code': code }, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {  ManageGeoObjectTypeModalState } from '../model/registry';\r\n\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    constructor(  ) { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n        \r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { ChangeRequest, AbstractAction } from '../model/crtable';\nimport { EventService } from '../../shared/service/event.service';\nimport { GeoObject } from '../model/registry';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\t  getAllActions( requestId: string ): Promise<AbstractAction[]> {\n        let params: HttpParams = new HttpParams();\n\n        if ( requestId != null ) {\n            params = params.set( 'requestId', requestId );\n\t\t}\n\t\t\n        this.eventService.start();\n\n        return this.http\n            .get<AbstractAction[]>( acp + '/changerequest/getAllActions', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\n//    fetchData( cb: any, requestId: string ): Promise<HttpResponse> {\n//        let params: HttpParams = new HttpParams();\n//\n//        if ( requestId != null ) {\n//            params = params.set( 'requestId', requestId );\n//        }\n//\n//        this.eventService.start();\n//\n//        return this.http\n//            .get( acp + '/changerequest/getAllActions', { params: params } )\n//            .finally(() => {\n//                this.eventService.complete();\n//            } )\n//            .toPromise()\n//            .then( response => {\n//                cb( response.json() );\n//\n//                return response;\n//            } )\n//    }\n\n    applyAction( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyAction', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\tapplyActionStatusProperties( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyActionStatusProperties', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\t\n    lockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/lockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/unlockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    getAllRequests(filter: string): Promise<ChangeRequest[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tparams = params.set('filter', filter );\n\n        return this.http.get<ChangeRequest[]>( acp + '/changerequest/get-all-requests', { params: params } )\n            .toPromise();\n    }\n\n    getRequestDetails( requestId: string ): Promise<ChangeRequest> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'requestId', requestId );\n\n        this.eventService.start();\n\n        return this.http.get<ChangeRequest>( acp + '/changerequest/get-request-details', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n\tconfirmChangeRequest( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/confirm-change-request', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n    execute( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/execute-actions', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    rejectAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/reject-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    approveAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/approve-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    submitChangeRequest( actions: string ): Promise<GeoObject> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'actions', actions )\n\n        this.eventService.start();\n\n        return this.http.post<GeoObject>( acp + '/cgr/submitChangeRequest', {actions: actions}, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'toEpochDateTime',\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n    transform(date: string): any {\n        if (!date ) {\n            return date;\n        }\n       \n        return new Date(date).getTime();\n    }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service'\n\nimport { PageResult } from '../../shared/model/core'\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from '../model/registry'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<SynchronizationConfig>>(acp + '/synchronization-config/get-all', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tget(oid: string): Promise<SynchronizationConfig> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<SynchronizationConfig>(acp + '/synchronization-config/get', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tapply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<SynchronizationConfig>(acp + '/synchronization-config/apply', JSON.stringify({ config: config }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tedit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tlet params = {};\n\n\t\tif (oid != null) {\n\t\t\tparams = { oid: oid };\n\t\t}\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(acp + '/synchronization-config/edit', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tunlock(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/unlock', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\trun(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/run', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tgetJobs(oid:string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n//\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<ExportScheduledJob>>(acp + '/synchronization-config/get-jobs', { params: params })\n//\t\t\t.pipe(finalize(() => {\n//\t\t\t\tthis.eventService.complete();\n//\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n\ttrigger,\n\tstate,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\n\nimport { GeoObjectType, Attribute } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component({\n\tselector: 'attribute-input',\n\ttemplateUrl: './attribute-input.component.html',\n\tstyleUrls: ['./attribute-input.css'],\n\tanimations: [\n\t\ttrigger('toggleInputs', [\n\t\t\tstate('none, void',\n\t\t\t\tstyle({ 'opacity': 0 })\n\t\t\t),\n\t\t\tstate('show',\n\t\t\t\tstyle({ 'opacity': 1 })\n\t\t\t),\n\t\t\ttransition('none => show', animate('300ms'))\n\t\t\t//   transition('show => none', animate('100ms'))\n\t\t])\n\t]\n})\nexport class AttributeInputComponent implements OnInit {\n\n\t@Input() disableCodeField: boolean = false;\n\t@Input() excludeDescription: boolean = false;\n\t@Input() isDecimal: boolean = false;\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\t@Output() attributeChange = new EventEmitter<Attribute>();\n\tmessage: string = null;\n\n\tstate: string = 'none';\n\n\tconstructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) {\n\t}\n\n\tngOnInit(): void {\n\n\t}\n\n\tngAfterViewInit() {\n\t\tthis.state = 'show';\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tngOnChanges() {\n\n\t}\n\n\tngOnDestroy() {\n\n\t}\n\n\thandleOnSubmit(): void {\n\n\t}\n\n\ttoggleIsUnique(): void {\n\t\tthis.attribute.unique = !this.attribute.unique;\n\t}\n\n\tanimate(): void {\n\t\tthis.state = \"none\";\n\t}\n\n\tonAnimationDone(event: AnimationEvent): void {\n\t\tthis.state = \"show\";\n\t}\n\n\tisValid(): boolean {\n\t\tif (this.attribute.code) {\n\n\t\t\t// if code has a space\n\t\t\tif (this.attribute.code.indexOf(\" \") !== -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.attribute.label.localeValues[0].value.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal) {\n\t\t\t\tconsole.log(this.attribute);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { GeoObjectType } from './registry';\n\nexport class ImportSheet {\n\tname: string;\n\tattributes: {\n\t\tboolean: string[];\n\t\tdate: string[];\n\t\tnumeric: string[];\n\t\ttext: string[];\n\t}\n}\n\nexport class Location {\n\tlabel: string;\n\tcode: string;\n\ttarget: string;\n\tmatchStrategy: string;\r\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: string;\n}\n\nexport class TermProblem {\n\tlabel: string;\n\tparentCode: string;\n\tmdAttributeId: string;\n\tattributeCode: string;\n\tattributeLabel: string;\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class LocationProblem {\n\tlabel: string;\n\ttype: string;\n\ttypeLabel: string;\n\tparent: string;\n\tcontext: { label: string, type: string }[];\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class Exclusion {\n\tcode: string;\n\tvalue: string;\n}\n\nexport class Synonym {\n\tlabel: string;\n\tsynonymId: string;\n\tvOid?: string;\n}\n\nexport class ImportConfiguration {\n\ttype: GeoObjectType;\n\tsheet: ImportSheet;\n\tdirectory: string;\n\tfilename: string;\n\thierarchy: string;\n\tpostalCode: boolean;\n\thasPostalCode: boolean;\n\tlocations: Location[];\n\tformatType: string;\n\tobjectType: string;\n\tlocationProblems: LocationProblem[];\n\ttermProblems: TermProblem[];\n\texclusions: Exclusion[];\n\thierarchies: { code: string, label: string }[];\n\tstartDate: string;\n\tendDate: string;\n\tisExternal: string;\n\texternalSystemId: string;\n\texternalIdAttributeTarget: string;\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListByOrg } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n@Component({\n\tselector: 'publish-modal',\n\ttemplateUrl: './publish-modal.component.html',\n\tstyleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\tmessage: string = null;\n\tmaster: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonMasterListChange: Subject<MasterList>;\n\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n\treadonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\tedit: boolean = false;\n\n  isNew: boolean = false;\n\n\tconstructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n\tngOnInit(): void {\n\n\t\tthis.onMasterListChange = new Subject();\n\n\t\tif (this.master == null || !this.readonly) {\n\t\t\tthis.iService.listGeoObjectTypes(true).then(types => {\n\t\t\t\n\t\t\t  var myOrgTypes = [];\n        for (var i = 0; i < types.length; ++i)\n        {\n          if (this.authService.isGeoObjectTypeRM(types[i].orgCode, types[i].code))\n          {\n            myOrgTypes.push(types[i]);\n          }\n        }\n        this.types = myOrgTypes;\n\t\t\t\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.master = {\n\t\t\t\toid: null,\n\t\t\t\ttypeCode: '',\n\t\t\t\tdisplayLabel: this.lService.create(),\n\t\t\t\tcode: '',\n\t\t\t\trepresentativityDate: null,\n\t\t\t\tpublishDate: null,\n\t\t\t\tlistAbstract: '',\n\t\t\t\tprocess: '',\n\t\t\t\tprogress: '',\n\t\t\t\taccessConstraints: '',\n\t\t\t\tuseConstraints: '',\n\t\t\t\tacknowledgements: '',\n\t\t\t\tdisclaimer: '',\n\t\t\t\tcontactName: '',\n\t\t\t\torganization: '',\n\t\t\t\ttelephoneNumber: '',\n\t\t\t\temail: '',\n\t\t\t\thierarchies: [],\n\t\t\t\tleaf: false,\n\t\t\t\tfrequency: 'ANNUAL',\n\t\t\t\tisMaster: null,\n\t\t\t\tvisibility: null\n\t\t\t};\n\t\t}\n\t}\n\n\tinit(org: MasterListByOrg): void {\n\t\tthis.master.organization = org.oid;\n\t}\n\n\tgetIsDisabled(event): boolean {\n\t\tlet elClasses = event.target.classList;\n\t\tfor (let i = 0; i < elClasses.length; i++) {\n\t\t\tlet c = elClasses[i];\n\t\t\tif (c === 'disabled') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tonChange(): void {\n\n\t\tif (this.master.typeCode != null && this.master.typeCode.length > 0) {\n\t\t\tthis.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n\t\t\t\tthis.master.hierarchies = hierarchies;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.master.hierarchies = [];\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.createMasterList(this.master).then(response => {\n\n\t\t\tthis.onMasterListChange.next(response);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCancel(): void {\n\t\tthis.bsModalRef.hide()\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h2>\n        <h2 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> ({{localeValue.locale}})\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange($event)\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-input',\n    templateUrl: './localized-input.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedInputComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { ManageVersionsModalComponent } from './manage-versions-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, PRESENT } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport Utils from '../../utility/Utils';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-shared-attribute-editor',\n    templateUrl: './geoobject-shared-attribute-editor.component.html',\n    styleUrls: ['./geoobject-shared-attribute-editor.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is shared between:\n * - crtable (create-update-geo-object action detail)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget\n * \n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    private bsModalRef: BsModalRef;\n\n    /*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    @Input() preGeoObject: GeoObjectOverTime = null;\n\n    calculatedPreObject: any = {};\n\n    /*\n\t * The state of the GeoObject being modified\n\t */\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    calculatedPostObject: any = {};\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isEditingGeometries = false;\n\n    @Input() isGeometryInlined = false;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n    isValid: boolean = true;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n    @ViewChild( \"attributeForm\" ) attributeForm;\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private datePipe: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private lService: LocalizationService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.preGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\n        if ( this.postGeoObject == null ) {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // Object.assign is a shallow copy. We want a deep copy.\n        }\n        else {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.postGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n        }\n\n        // this.attributeForm.statusChanges.subscribe( result => {\n        //     this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n        //     this.valid.emit( this.isValid );\n        // } );\n\n        if ( this.attributeExcludes != null ) {\n            this.geoObjectAttributeExcludes.push.apply( this.geoObjectAttributeExcludes, this.attributeExcludes );\n\n            if ( !this.isGeometryInlined ) {\n                this.geoObjectAttributeExcludes.push( \"geometry\" );\n            }\n        }\n\n        let geomAttr = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geomAttr = this.geoObjectType.attributes[i];\n            }\n        }\n        if ( geomAttr == null ) {\n            let geometry: Attribute = new Attribute( \"geometry\", \"geometry\", new LocalizedValue( \"Geometry\", null ), new LocalizedValue( \"Geometry\", null ), true, false, false, true );\n            this.geoObjectType.attributes.push( geometry );\n        }\n\n        this.calculate();\n    }\n\n    ngAfterViewInit() {\n         this.attributeForm.statusChanges.subscribe( result => {\n            this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n            this.valid.emit( this.isValid );\n        } );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): void {\n        this.calculatedPreObject = this.calculateCurrent( this.preGeoObject );\n        this.calculatedPostObject = this.calculateCurrent( this.postGeoObject );\n\n        if ( this.geometryEditor != null ) {\n            this.geometryEditor.reload();\n        }\n    }\n\n    calculateCurrent( goot: GeoObjectOverTime ): any {\n      const object = {};\n\n      const time = this.forDate.getTime();\n\n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n          let attr = this.geoObjectType.attributes[i];\n          object[attr.code] = null;\n\n          if ( attr.type === 'local' ) {\n              object[attr.code] = this.lService.create();\n          }\n\n          if ( attr.isChangeOverTime ) {\n            let values = goot.attributes[attr.code].values;\n\n            values.forEach( vot => {\n\n                const startDate = Date.parse( vot.startDate );\n                const endDate = Date.parse( vot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n\n                    if ( attr.type === 'local' ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: JSON.parse( JSON.stringify( vot.value ) )\n                        };\n                    }\n                    else if ( attr.type === 'term' && vot.value != null && Array.isArray( vot.value ) && vot.value.length > 0 ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value[0]\n                        };\n                    }\n                    else {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value\n                        };\n                    }\n                }\n            } );\n          }\n          else {\n              object[attr.code] = goot.attributes[attr.code];\n          }\n      }\n      \n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        let attr = this.geoObjectType.attributes[i];\n        \n        if ( attr.isChangeOverTime && object[attr.code] == null ) {\n          object[attr.code] = {\n            startDate: null,\n            endDate: null,\n            value: \"\"\n          }\n        }\n      }\n\n      return object;\n    }\n\n    formatDate( date: string ): string {\n        if ( date === PRESENT ) {\n            return this.lService.localize(\"changeovertime\", \"present\");\n        }\n\n        return date;\n    }\n\n    handleChangeCode( e: any ): void {\n        this.postGeoObject.attributes.code = this.calculatedPostObject['code'];\n        //        \n        //        console.log(this.calculatedPostObject['code'])\n        //        console.log(e)\n    }\n\n    onManageAttributeVersions( attribute: Attribute ): void {\n        this.bsModalRef = this.modalService.show( ManageVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        // TODO: sending the properties like this is wrong\n        this.bsModalRef.content.geoObjectOverTime = this.postGeoObject;\n        this.bsModalRef.content.geoObjectType = this.geoObjectType;\n        this.bsModalRef.content.isNewGeoObject = this.isNew;\n        this.bsModalRef.content.attribute = attribute;\n        this.bsModalRef.content.onAttributeVersionChange.subscribe( versionObj => {\n            this.calculate();\n        } );\n        this.bsModalRef.content.tfInit();\n    }\n\n    onManageGeometryVersions(): void {\n        let geometry = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geometry = this.geoObjectType.attributes[i];\n            }\n        }\n\n        this.onManageAttributeVersions( geometry );\n    }\n\n    isDifferentText( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null ) {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value.trim() !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    isDifferentValue( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null )\n        {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    onSelectPropertyOption( event: any, option: any ): void {\n        this.currentTermOption = JSON.parse( JSON.stringify( this.modifiedTermOption ) );\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                if ( attr.code === \"status\" ) {\n                    return Utils.removeStatuses(attrOpts);\n                }\n                else {\n                    return attrOpts;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isStatusChanged( post, pre ) {\n\n        if ( pre != null && post == null ) {\n            return true;\n        }\n\n        if ( pre == null || post == null || pre.length == 0 || post.length == 0 ) {\n            return false;\n        }\n\n        var preCompare = pre;\n        if ( Array.isArray( pre ) ) {\n            preCompare = pre[0];\n        }\n\n        var postCompare = post;\n        if ( Array.isArray( post ) ) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    getTypeDefinition( key: string ): string {\n        // let attrs = this.geoObjectType.attributes;\n\n\n        // attrs.attributes.forEach(attr => {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if ( attr.code === key ) {\n                return attr.type;\n            }\n        }\n\n        return null;\n    }\n\n    public getIsValid(): boolean {\n        return this.isValid;\n    }\n\n    public getGeoObject(): any {\n        return this.postGeoObject;\n\n        //        // The front-end uses the 'yyyy-mm-dd' date format. Our backend expects dates in epoch format.\n        //        var submitGO = JSON.parse( JSON.stringify( this.postGeoObject ) );\n        //        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        //            var attr = this.geoObjectType.attributes[i];\n        //\n        //            if ( attr.type === \"date\" && this.postGeoObject.properties[attr.code] != null ) {\n        //                var parts = this.postGeoObject.properties[attr.code].split( '-' );\n        //                var date = new Date( parts[0], parts[1] - 1, parts[2] );\n        //\n        //                submitGO.properties[attr.code] = date.getTime();\n        //            }\n        //        }\n        //\n        //        return submitGO;\n    }\n}\n","<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <!-- <div class=\"col-md-12\"> -->\n            <div *ngIf=\"preGeoObject\">\n                <div *ngIf=\"!this.isEditingGeometries\" class=\"row\"> \n                    <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    <div class=\"col-md-12\">\n                        <span class=\"text\"></span>\n                            <div class=\"panel\" style=\"box-shadow: none;\">\n                                <div class=\"panel-body\">\n                                    <ul class=\"list-group\">\n                                        <li class=\"list-group-item\" style=\"text-align:left; border: 1px solid #ddd;\" *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes\">\n                                            <h5 *ngIf=\"attr.code !== 'geometry'\">\n\n                                              <span *ngIf=\"attr.code === 'code'\">\n                                                <localize key=\"geoobject.code.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code === 'displayLabel'\">\n                                                <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\">\n                                                {{attr.label.localizedValue}}\n                                              </span>\n                                              \n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>\n                                            </h5>\n                                            \n                                            <h5 *ngIf=\"attr.code === 'geometry'\">\n                                              <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>                                              \n                                            </h5>\n                                            \n\n                                            <div *ngIf=\"attr.code === 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"calculatedPostObject[attr.code]\" (change)=\"handleChangeCode($event)\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew\" required> \n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'character' && attr.code !== 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [ngModel]=\"calculatedPostObject[attr.code].value\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n\n                                              <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentText(attr)\">\n                                                <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                              </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'local'\">\n                                              <ul class=\"list-group\" *ngIf=\"calculatedPostObject[attr.code].value != null\">\n                                                <li class=\"list-group-item\" *ngFor=\"let localeValue of calculatedPostObject[attr.code].value.localeValues; let i = index\">\n                                                  <h5>{{localeValue.locale}}</h5>\n                                                  <input disabled [required]=\"localeValue.locale === 'defaultLocale'\" type=\"text\" [ngModel]=\"localeValue.value\" [name]=\"'mod-' + attr.code + '-' + localeValue.locale\"> \n\n                                                  <p class=\"warning-text\" *ngIf=\"!isNew && calculatedPreObject[attr.code].value != null && localeValue.value != null && localeValue.value.trim() !== calculatedPreObject[attr.code].value.localeValues[i].value\">\n                                                    <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value.localeValues[i].value}}\n                                                  </p>\n                                                </li>\n                                              </ul>                                            \n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'date'\">\n                                                <input type=\"date\" [ngModel]=\"calculatedPostObject[attr.code].value | date:'yyyy-MM-dd'\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n                                                    \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value | date}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'boolean'\">\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"calculatedPostObject[attr.code].value\" disabled [value]=\"true\" id=\"mod-{{attr.code}}-true\" name=\"mod-{{attr.code}}-true\">\n                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                </label>\n\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"!calculatedPostObject[attr.code].value\" disabled [value]=\"false\" id=\"mod-{{attr.code}}-false\" name=\"mod-{{attr.code}}-false\">\n                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                </label>\n                                                \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'float'\">\n                                                <input disabled type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\"\n                                                    id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'integer'\">\n                                                <input type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\" disabled id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'term'\">\n                                                <select id=\"mod-{{attr.code}}\" name=\"mod-term-{{attr.code}}\" class=\"select-area\" style=\"float:none;\" disabled [(ngModel)]=\"calculatedPostObject[attr.code].value\">\n                                                    <option value=\"\" ></option>\n                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attr.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                </select>\n\n                                                <!-- \n                                                <p class=\"warning-text\" *ngIf=\"calculatedPreObject[attr.code].value && calculatedPostObject[attr.code].value !== calculatedPreObject[attr.code].value\">\n                                                -->\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isStatusChanged(calculatedPostObject[attr.code].value, calculatedPreObject[attr.code].value)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'geometry' && this.isGeometryInlined\">\n                                              <geoobject-editor-map #geometryEditor\n                                                [geometryType]=\"this.geoObjectType.geometryType\"\n                                                [readOnly]=\"true\"\n                                                [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                                                [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                                                [bboxCode]=\"this.preGeoObject.attributes.code\"\n                                                [bboxType]=\"this.geoObjectType.code\"\n                                                (onClickEdit)=\"this.onManageGeometryVersions()\"\n                                                [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                                              </geoobject-editor-map>\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.isChangeOverTime\" class=\"button-holder\" style=\"text-align:left;\" >\n                                              <button type=\"submit\" style=\"\" (click)=\"onManageAttributeVersions(attr)\" class=\"btn btn-primary\" role=\"button\">\n                                                <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                                              </button>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                    </div>\n                 </div>\n                 <div *ngIf=\"this.isEditingGeometries && !this.isGeometryInlined\">\n                   <!-- <div class=\"label-holder\">\n                     <label>\n                      <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                     </label>\n                   </div> -->\n                   <div class=\"\">\n                     <geoobject-editor-map #geometryEditor \n                       [geometryType]=\"this.geoObjectType.geometryType\"\n                       [readOnly]=\"true\"\n                       [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                       [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                       [bboxCode]=\"this.preGeoObject.attributes.code\"\n                       [bboxType]=\"this.geoObjectType.code\"\n                       (onClickEdit)=\"this.onManageGeometryVersions()\"\n                       [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                     </geoobject-editor-map>\n                   </div>\n                 </div>\n           </div>\n        <!-- </div> -->\n    </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-text',\n    templateUrl: './localized-text.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedTextComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n    </span>\n  </div>\n</div>\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from '@angular/forms';\n\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator() : ValidatorFn {\n  return (c: AbstractControl) => {\n    if(c.value){\n        let isValid = c.value.indexOf(\" \") === -1;\n        \n        if(isValid) {\n            return null;\n        } else {\n            return {\n                geoObjectAttributeCode: {\n                     valid: false\n                }\n            };\n        }\n    }\n\n  }\n}\n\n\n@Directive({\n  selector: '[geoObjectAttributeCode][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n  ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n  validator: ValidatorFn;\n  \n  constructor() {\n    this.validator = validateGeoObjectAttributeCodeValidator();\n  }\n  \n  validate(c: FormControl) {\n    return this.validator(c);\n  }\n  \n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '../../../model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n      \n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.hierarchy\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"configuration.hierarchy\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of configuration.hierarchies\" value={{hierarchy.code}}>{{hierarchy.label}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild, SimpleChanges, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { Map, LngLatBounds, NavigationControl } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport * as mapboxgl from 'mapbox-gl';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor-map[geometryType]',\n    templateUrl: './geoobject-editor-map.component.html',\n    styleUrls: ['./geoobject-editor-map.component.css']\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. We will invoke this event with GeoJSON when the user makes an edit to the geometry.\n     */\n    @Output() geometryChange = new EventEmitter<any>();\n\n    /*\n     * Optional. If specified, we will diff based on this GeoJSON geometry.\n     */\n    @Input() preGeometry: any;\n\n    /*\n     * Optional. If we are read-only, this will be displayed as a layer. If we are not, it will be editable.\n     */\n    @Input() postGeometry: any;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    /*\n     * Optional. If specified, we will display an edit button on the map, and when it is clicked we will emit this event.\n     */\n    @Output() onClickEdit = new EventEmitter<void>();\n\n    @ViewChild( \"simpleEditControl\" ) simpleEditControl;\n\n    @ViewChild( \"mapDiv\" ) mapDiv;\n\n    map: Map;\n\n    editingControl: any;\n\n    constructor( private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            //this.registryService.getGeoObjectOverTime( \"22\", \"Province\" )\n            //.then( geoObject => {\n\n            ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\n\n            this.mapDiv.nativeElement.id = Math.floor( Math.random() * ( 899999 ) ) + 100000;\n\n            this.map = new Map( {\n                container: this.mapDiv.nativeElement.id,\n                style: 'mapbox://styles/mapbox/satellite-v9',\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            } );\n\n            this.map.on( 'load', () => {\n                this.initMap();\n            } );\n\n            this.map.on( 'draw.create', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.delete', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.update', () => {\n                this.onValidChange();\n            } );\n\n            //} ).catch(( err: HttpErrorResponse ) => {\n            //    this.error( err );\n            //} );\n        }, 10 );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['preGeometry'] || changes['postGeometry'] ) {\n            this.reload();\n        }\n    }\n\n    public reload(): void {\n        if ( this.map != null ) {\n            this.removeLayers();\n            this.addLayers();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    getIsValid(): boolean {\n        if ( !this.readOnly ) {\n            let isValid: boolean = false;\n\n            if ( this.editingControl != null ) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if ( featureCollection.features.length > 0 ) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    private onValidChange(): void {\n        this.geometryChange.emit( this.saveDraw() );\n    }\n\n    initMap(): void {\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            this.onValidChange();\n        } );\n\n\n        this.addLayers();\n\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.zoomToBbox();\n        }\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        if ( !this.readOnly ) {\n            this.enableEditing();\n        }\n        else {\n            this.addEditButton();\n        }\n\n        this.onValidChange();\n    }\n\n    addEditButton(): void {\n        this.simpleEditControl.editEmitter.subscribe( versionObj => {\n            this.onClickEdit.emit();\n        } );\n\n        this.map.addControl( this.simpleEditControl );\n    }\n\n    enableEditing(): void {\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: false,\n                    polygon: true,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: true,\n                    line_string: false,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: true,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        this.map.addControl( this.editingControl );\n\n        if ( this.postGeometry != null ) {\n            this.editingControl.add( this.postGeometry );\n        }\n    }\n\n    removeSource( prefix: string ): void {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.map.removeLayer( sourceName + \"-polygon\" );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.map.removeLayer( sourceName + \"-point\" );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\" ) {\n            this.map.removeLayer( sourceName + \"-line\" );\n        }\n\n        this.map.removeSource( sourceName );\n    }\n\n    removeLayers(): void {\n        if ( this.map.getSource( \"pre-geoobject\" ) ) {\n            this.removeSource( \"pre\" );\n        }\n        if ( this.map.getSource( \"post-geoobject\" ) ) {\n            this.removeSource( \"post\" );\n        }\n    }\n\n    addLayers(): void {\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.renderGeometryAsLayer( this.preGeometry, \"pre\", \"#EFA22E\" )\n        }\n        if ( this.readOnly && this.postGeometry != null && this.postGeometry !== \"\") {\n            this.renderGeometryAsLayer( this.postGeometry, \"post\", \"#3368EF\" );\n        }\n    }\n\n    renderGeometryAsLayer( geometry: any, prefix: string, color: string ) {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        this.map.addSource( sourceName, {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            // Polygon Layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-polygon\",\n                \"type\": \"fill\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7,\n                },\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            // Point layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-point\",\n                \"type\": \"circle\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": '#FFFFFF'\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.map.addLayer( {\n                \"id\": sourceName + \"-line\",\n                \"source\": sourceName,\n                \"type\": \"line\",\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            } );\n        }\n\n        ( <any>this.map.getSource( sourceName ) ).setData( geometry );\n    }\n\n    zoomToBbox(): void {\n        if ( this.bboxCode != null && this.bboxType != null ) {\n            if ( this.bboxDate == null ) {\n                this.registryService.getGeoObjectBounds( this.bboxCode, this.bboxType ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n            else {\n                this.registryService.getGeoObjectBoundsAtDate( this.bboxCode, this.bboxType, this.bboxDate ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n        }\n    }\n\n    saveDraw(): any {\n        if ( this.editingControl != null ) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if ( featureCollection.features.length > 0 ) {\n\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if ( this.geometryType === \"MULTIPOLYGON\" ) {\n                    let polygons = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPolygon' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                polygons.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            polygons.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: 'MultiPolygon'\n                    };\n                }\n                else if ( this.geometryType === \"MULTIPOINT\" ) {\n                    let points = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPoint' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                points.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            points.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: 'MultiPoint'\n                    };\n                }\n                else if ( this.geometryType === \"MULTILINE\" ) {\n                    let lines = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiLineString' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                lines.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            lines.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: 'MultiLineString'\n                    };\n                }\n                else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n\n            return this.postGeometry;\n        }\n\n        return this.postGeometry;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n        console.log( \"ERROR\", err );\n\n        // Handle error\n        //if (err !== null) {\n        //    this.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n        //    this.bsModalRef.content.message = (err.localizedMessage || err.message);\n        //}\n    }\n\n\n}\n","<div #mapDiv class=\"map-view-port text-left\" style=\"height:400px;\"></div>\n\n<simple-edit-control #simpleEditControl></simple-edit-control>","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ParentTreeNode, GeoObject, HierarchyOverTime } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\n\nimport { ManageParentVersionsModalComponent } from './manage-parent-versions-modal.component';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\n@Component( {\n\n    selector: 'cascading-geo-selector',\n    templateUrl: './cascading-geo-selector.html',\n} )\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n\n    @ViewChild( \"mainForm\" ) mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    constructor( private modalService: BsModalService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach( hierarchy => {\n            const object = {};\n            object['label'] = hierarchy.label;\n            object['code'] = hierarchy.code;\n\n            this.isValid = this.isValid && ( this.hierarchies.length > 0 );\n\n            hierarchy.entries.forEach( pot => {\n                const startDate = Date.parse( pot.startDate );\n                const endDate = Date.parse( pot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n                    let parents = [];\n\n                    hierarchy.types.forEach( type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if ( pot.parents[type.code] != null ) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push( parent );\n                    } );\n\n                    object['parents'] = parents;\n                }\n            } );\n\n            this.cHierarchies.push( object );\n\n        } );\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions( code: string ): void {\n\n        const hierarchy = this.hierarchies.find( h => h.code === code );\n\n        this.bsModalRef = this.modalService.show( ManageParentVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.init( hierarchy );\n        this.bsModalRef.content.onVersionChange.subscribe( hierarchy => {\n            this.calculate();\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [(ngModel)]=\"parent.geoObject.properties.displayLabel.localizedValue\" name=\"{{hierarchy.code}}-{{parent.code}}-input\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\n\nimport { DatePipe } from '@angular/common';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'submit-change-request',\n    templateUrl: './submit-change-request.component.html',\n    styleUrls: []\n} )\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    typeaheadLoading: boolean;\n\n    typeaheadNoResults: boolean;\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n\t/*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    preGeoObject: GeoObjectOverTime = null;\n\n\t/*\n\t * The state of the GeoObject after our Change Request has been approved \n\t */\n    postGeoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private localizeService: LocalizationService,\n        private authService: AuthService ) {\n\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( this.geoObjectId, this.geoObjectType.code ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes( [], null ).then( types => {\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isGeoObjectTypeRC(types[i].organizationCode, types[i].code))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n\n\n    private onValidChange( newValid: boolean ) {\n        if ( this.preGeoObject == null ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.geometryEditor != null && !this.geometryEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.attributeEditor != null && !this.attributeEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading( e: boolean ): void {\n        this.typeaheadLoading = e;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.registryService.getGeoObjectOverTime( e.item.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n                this.postGeoObject = JSON.parse( JSON.stringify( this.preGeoObject ) ); // Object.assign is a shallow copy. We want a deep copy.\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    submit(): void {\n\n        let goSubmit: GeoObjectOverTime = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            let goGeometries: GeoObjectOverTime = this.geometryEditor.saveDraw();\n//            goSubmit.geometry = goGeometries.geometry;\n        }\n\n        let actions = [{\n            \"actionType\": \"geoobject/update\", // TODO: account for create\n            \"apiVersion\": \"1.0-SNAPSHOT\", // TODO: make dynamic\n            \"createActionDate\": new Date().getTime(),\n            \"geoObject\": goSubmit,\n            \"contributorNotes\": this.reason\n        }]\n\n        this.changeRequestService.submitChangeRequest( JSON.stringify( actions ) )\n            .then( geoObject => {\n                this.cancel();\n\n                this.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"change.request.success.message\" );\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.isValid = false;\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.preGeoObject = null;\n        this.postGeoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = (err.error.localizedMessage || err.error.message || err.message);\n        }\n    }\n}","<!-- <div class=\"new-admin-design-main\" style=\"height: 100vh;\">\n    <cgr-header></cgr-header> -->\n<loading-bar></loading-bar>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <div style=\"min-height:50vh;\">\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobjecttype.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\"\n                            [(ngModel)]=\"geoObjectType\" required>\n                            <!-- <option> <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize> </option> -->\n                            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}\n                            </option>\n                        </select>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\" style=\"overflow: visible;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobject.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <input type=\"text\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\"\n                            [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\"\n                            typeaheadOptionField=\"name\" class=\"form-control\" autocomplete=\"off\" required>\n\n                    </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"preGeoObject\">\n                <geoobject-shared-attribute-editor #attributeEditor (valid)=\"this.onValidChange($event)\"\n                    [geoObjectType]=\"this.geoObjectType\" [preGeoObject]=\"this.preGeoObject\"\n                    [(postGeoObject)]=\"this.postGeoObject\" [isGeometryInlined]=\"true\">\n                </geoobject-shared-attribute-editor>\n            </div>\n\n            <div class=\"row-holder\" style=\"z-index: 0;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"change.request.reason.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" name=\"reason-input\" required></textarea>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!attributeForm.valid\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError } from '../../model/registry';\n\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n\n@Component( {\n    selector: 'geoobject-editor',\n    templateUrl: './geoobject-editor.component.html',\n    styleUrls: ['./geoobject-editor.component.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n    \n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n//    /*\n//     * GeoObject Geometry Editor\n//     */\n//    @ViewChild( \"geometryEditor\" ) geometryEditor;\n//\n//    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild( \"parentSelector\" ) parentSelector;\n\n    areParentsValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n    \n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor( private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService, \n        authService: AuthService ) {\n        \n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate( votArray, startDate ): any {\n      for (let i: number = 0; i < votArray.length; ++i)\n      {\n        if (votArray[i].startDate === startDate)\n        {\n          return votArray[i];\n        }\n      }\n      \n      return null;\n    }\n\n    setMasterListId( id: string ) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    setOnSuccessCallback( func: Function ) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew( typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        } );\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError( importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean ) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n        \n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0)\n        {\n          this.hierarchies = importError.object.parents;\n          this.areParentsValid = true;\n        }\n        else\n        {\n          this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.hierarchies = retJson.hierarchies;\n          } );\n          this.areParentsValid = false;\n        }\n        \n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        \n        this.submitFunction = () => {\n          let config = {\n            historyId : historyId,\n            importErrorId: importError.id,\n            resolution: 'APPLY_GEO_OBJECT',\n            parentTreeNode: this.hierarchies,\n            geoObject: this.goSubmit,\n            isNew: importError.object.isNew\n          }\n        \n          this.registryService.submitErrorResolve( config )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting( code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject( code, typeCode );\n        this.fetchGeoObjectType( typeCode );\n        this.fetchHierarchies( code, typeCode );\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject( code: string, typeCode: string ) {\n        this.registryService.getGeoObjectOverTime( code, typeCode ).then( geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( geoObject ) ).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n            //this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n            \n            this.goSubmit = this.goPropertiesPost;\n\n//            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then( locales => {\n            this.localizeService.setLocales( locales );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchGeoObjectType( code: string ) {\n        this.registryService.getGeoObjectTypes( [code], null )\n            .then( geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n                \n                if (this.goPropertiesPre != null)\n                {\n                  this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null)\n                {\n                  this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if ( !this.geoObjectType.isGeometryEditable ) {\n//                    this.areGeometriesValid = true;\n                }\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( err );\n                //                this.error( err );\n            } );\n    }\n\n    private fetchHierarchies( code: string, typeTypeCode: string ) {\n        this.registryService.getHierarchiesForGeoObject( code, typeTypeCode )\n            .then(( hierarchies: any ) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    getTypeAheadObservable( text, typeCode ) {\n        return Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( text, typeCode ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, ptn: ParentTreeNode ): void {\n        this.registryService.getGeoObjectByCode( e.item.code, ptn.geoObject.properties.type )\n            .then( geoObject => {\n\n                ptn.geoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    private onValidChange() {\n        if ( this.attributeEditor != null ) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n//        if ( this.geometryEditor != null ) {\n//            this.areGeometriesValid = this.geometryEditor.getIsValid();\n//        }\n        if ( this.parentSelector != null ) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n        \n//        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage( nextPage: number, force: boolean = false ): void {\n        if ( nextPage === this.tabIndex && !force ) {\n            return;\n        }\n\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n        \n        if (nextPage === 2)\n        {\n          this.isEditingGeometries = true;\n        }\n        else\n        {\n          this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if ( this.attributeEditor != null ) {\n          this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if ( this.parentSelector != null ) {\n          this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n      // TODO\n  \n      // Handle error\n      if ( err !== null ) {\n          this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n          this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n      }\n    }\n\n    public cancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n      if ( this.isValid ) {\n        this.bsModalRef.hide();\n    \n        this.persistModelChanges();\n        \n        if (this.submitFunction == null)\n        {\n          this.registryService.applyGeoObjectEdit( this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n        else\n        {\n          this.submitFunction();\n        }\n      }\n    }\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <error-message *ngIf=\"!areParentsValid\" [message]=\"'geoobject.editor.modal.parents.must.be.assigned.message' | localize\"></error-message>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { Step, StepConfig } from '../../model/registry';\n\n\n@Component( { \n    selector: 'step-indicator',\n    templateUrl: './step-indicator.component.html',\n    styleUrls: ['./step-indicator.css']\n} )\nexport class StepIndicatorComponent {\n\n    @Input('steps')\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n\n    constructor( private localizeService: LocalizationService ) {\n\n        this._stepConfig = {\"steps\": []};\n    }\n\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n       \n    }\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { Task } from '../model/registry';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    getMyTasks( pageNum: number, pageSize: number, whereStatus: string ): Promise<any> {\r\n      let params: HttpParams = new HttpParams();\r\n      \r\n      params = params.set( 'orderBy', 'createDate' );\r\n      params = params.set( 'pageNum', pageNum.toString() );\r\n      params = params.set( 'pageSize', pageSize.toString() );\r\n      params = params.set( 'whereStatus', whereStatus );\r\n    \r\n      return this.http\r\n          .get<any>( acp + '/tasks/get', { params: params } )\r\n          .toPromise();\r\n    }\r\n    \r\n    completeTask( taskId: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/complete', JSON.stringify( { 'id': taskId } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n    \r\n    setTaskStatus( taskId: string, status: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/setTaskStatus', JSON.stringify( { 'id': taskId, 'status': status } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TreeNode, TreeComponent, TreeDropDirective } from 'angular-tree-component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { HierarchyType, HierarchyNode } from '../../model/hierarchy';\nimport { GeoObjectType } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal'\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\n\nclass Instance {\n    active: boolean;\n    label: string;\n}\n\n@Component( {\n\n    selector: 'hierarchies',\n    templateUrl: './hierarchy.component.html',\n    styleUrls: ['./hierarchy.css']\n} )\n\nexport class HierarchyComponent implements OnInit {\n\n    // isAdmin: boolean;\n    // isMaintainer: boolean;\n    // isContributor: boolean;\n\n    instance: Instance = new Instance();\n    hierarchies: HierarchyType[];\n    geoObjectTypes: GeoObjectType[] = [];\n    nodes = [] as HierarchyNode[];\n    currentHierarchy: HierarchyType = null;\n\n    hierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n    geoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild( TreeComponent )\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild( 'nodeMenu' ) public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n    @ViewChild( 'leafMenu' ) public leafMenuComponent: ContextMenuComponent;\n\n    /* \n     * Currently clicked on id for delete confirmation modal \n     */\n    current: TreeNode;\n\n\n    constructor( private hierarchyService: HierarchyService, private modalService: BsModalService,\n        private contextMenuService: ContextMenuService, private changeDetectorRef: ChangeDetectorRef,\n        private localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService ) {\n\n        // this.admin = authService.isAdmin();\n        // this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\t// this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n    }\n\n    ngOnInit(): void {\n        this.refreshAll( null );\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    isRA(): boolean {\n        return this.authService.isRA();\n    }\n\n    isOrganizationRA(orgCode: string): boolean {\n        return this.authService.isOrganizationRA(orgCode);\n    }\n\n    public refreshAll( desiredHierarchy ) {\n        this.registryService.init().then( response => {\n            this.localizeService.setLocales( response.locales );\n\n            this.geoObjectTypes = response.types;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            this.setHierarchies( response.hierarchies );\n\n            this.setNodesOnInit( desiredHierarchy );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public excludeHierarchyTypeDeletes( hierarchy: HierarchyType ) {\n        return ( this.hierarchyTypeDeleteExclusions.indexOf( hierarchy.code ) !== -1 );\n    }\n\n    public excludeGeoObjectTypeDeletes( geoObjectType: GeoObjectType ) {\n        return ( this.geoObjectTypeDeleteExclusions.indexOf( geoObjectType.code ) !== -1 );\n    }\n\n    private setNodesOnInit( desiredHierarchy ): void {\n\n        let index = -1;\n\n        if ( desiredHierarchy != null ) {\n            index = this.hierarchies.findIndex( h => h.code === desiredHierarchy.code );\n        }\n        else if ( this.hierarchies.length > 0 ) {\n            index = 0;\n        }\n\n        if ( index > -1 ) {\n            let hierarchy = this.hierarchies[index];\n\n            this.nodes = hierarchy.rootGeoObjectTypes;\n\n            this.currentHierarchy = hierarchy;\n\n            setTimeout(() => {\n                if ( this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n    }\n\n    private setNodesForHierarchy( hierarchyType: HierarchyType ): void {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let hierarchy = this.hierarchies[i];\n            if ( hierarchy.code === hierarchyType.code ) {\n                this.nodes = hierarchyType.rootGeoObjectTypes;\n                this.currentHierarchy = hierarchy;\n                break;\n            }\n        }\n\n        setTimeout(() => {\n            this.tree.treeModel.expandAll();\n        }, 1 )\n    }\n\n    private getHierarchy( hierarchyId: string ): HierarchyType {\n        let target: HierarchyType = null;\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchyId === hierarchy.code ) {\n                target = hierarchy;\n            }\n        } );\n\n        return target;\n    }\n\n    private setHierarchies( data: HierarchyType[] ): void {\n        let hierarchies: HierarchyType[] = [];\n        data.forEach(( hierarchyType, index ) => {\n\n            if ( hierarchyType.rootGeoObjectTypes.length > 0 ) {\n                hierarchyType.rootGeoObjectTypes.forEach( rootGeoObjectType => {\n                    this.processHierarchyNodes( rootGeoObjectType );\n                } )\n            }\n\n            hierarchies.push( hierarchyType );\n\n        } );\n\n        this.hierarchies = hierarchies\n\n        this.hierarchies.sort(( a, b ) => {\n            if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n            else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n            else return 0;\n        } );\n    }\n\n    private updateHierarchy( code: string, rootGeoObjectTypes: HierarchyNode[] ): void {\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchy.code === code ) {\n                hierarchy.rootGeoObjectTypes = rootGeoObjectTypes;\n            }\n        } )\n    }\n\n    /**\n     * Set properties required by angular-tree-component using recursion.\n     */\n    private processHierarchyNodes( node: HierarchyNode ) {\n        node.label = this.getHierarchyLabel( node.geoObjectType );\n\n        node.children.forEach( child => {\n            this.processHierarchyNodes( child );\n        } )\n    }\n\n    private getHierarchyLabel( geoObjectTypeCode: string ): string {\n        let label: string = null;\n        this.geoObjectTypes.forEach( function( gOT ) {\n            if ( gOT.code === geoObjectTypeCode ) {\n                label = gOT.label.localizedValue;\n            }\n        } );\n\n        return label;\n    }\n\n    public handleOnMenu( node: any, $event: any ): void {\n        if (this.isOrganizationRA(this.currentHierarchy.organizationCode))\n        {\n          this.contextMenuService.show.next( {\n              contextMenu: ( node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent ),\n              event: $event,\n              item: node,\n          } );\n          $event.preventDefault();\n          $event.stopPropagation();\n        }\n        else\n        {\n          $event.preventDefault();\n          $event.stopPropagation();\n        }\n    }\n\n    public treeNodeOnClick( node: TreeNode, $event: any ): void {\n\n        node.treeModel.setFocusedNode( node );\n\n        if ( node.treeModel.isExpanded( node ) ) {\n            node.collapse();\n        }\n        else {\n            node.treeModel.expandAll();\n        }\n    }\n\n    options = {\n        //\t\t  allowDrag: (node:TreeNode) => node.isLeaf,\n        //\t\t  allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n        // return true / false based on element, to.parent, to.index. e.g.\n        //\t\t\t    return parent.hasChildren;\n        //\t\t\t  },\n        displayField: \"label\",\n        actionMapping: {\n            mouse: {\n                click: ( tree: TreeComponent, node: TreeNode, $event: any ) => {\n                    this.treeNodeOnClick( node, $event );\n                },\n                contextMenu: ( tree: any, node: any, $event: any ) => {\n                    this.handleOnMenu( node, $event );\n                }\n            }\n        },\n        mouse: {\n            //\t            drop: (tree: TreeComponent, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n            //\t              console.log('drag', from, to); // from === {name: 'first'}\n            //\t              // Add a node to `to.parent` at `to.index` based on the data in `from`\n            //\t              // Then call tree.update()\n            //\t            }\n        }\n    };\n\n    public hierarchyOnClick( event: any, item: any ) {\n        let hierarchyId = item.code;\n\n        this.currentHierarchy = item;\n\n        this.nodes = [];\n\n        if ( this.getHierarchy( hierarchyId ).rootGeoObjectTypes.length > 0 ) {\n            // TODO: should rootGeoObjectTypes be hardcoded to only one entry in the array?\n            this.nodes.push( this.getHierarchy( hierarchyId ).rootGeoObjectTypes[0] );\n\n            setTimeout(() => {\n                if ( this && this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n\n        if ( this.tree ) {\n            this.tree.treeModel.update();\n        }\n    }\n\n    public createHierarchy(): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n\n        ( <CreateHierarchyTypeModalComponent>this.bsModalRef.content ).onHierarchytTypeCreate.subscribe( data => {\n\n            this.hierarchies.push( data );\n        } );\n    }\n\n    public deleteHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeHierarchyType( data );\n        } );\n    }\n\n    public editHierarchyType( obj: HierarchyType, readOnly: boolean ): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.edit = true;\n        this.bsModalRef.content.readOnly = readOnly;\n        this.bsModalRef.content.hierarchyType = obj;\n        this.bsModalRef.content.onHierarchytTypeCreate.subscribe( data => {\n            let pos = this.getHierarchyTypePosition( data.code );\n\n            this.hierarchies[pos].label = data.label;\n            this.hierarchies[pos].description = data.description;\n        } );\n    }\n\n    public removeHierarchyType( code: string ): void {\n        this.hierarchyService.deleteHierarchyType( code ).then( response => {\n\n            let pos = this.getHierarchyTypePosition( code );\n            this.hierarchies.splice( pos, 1 );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public createGeoObjectType(): void {\n        this.bsModalRef = this.modalService.show( CreateGeoObjTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\n        ( <CreateGeoObjTypeModalComponent>this.bsModalRef.content ).onGeoObjTypeCreate.subscribe( data => {\n            this.geoObjectTypes.push( data );\n        } );\n    }\n\n    public deleteGeoObjectType( obj: GeoObjectType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeGeoObjectType( data );\n        } );\n    }\n\n    public removeGeoObjectType( code: string ): void {\n        this.registryService.deleteGeoObjectType( code ).then( response => {\n\n            let pos = this.getGeoObjectTypePosition( code );\n            this.geoObjectTypes.splice( pos, 1 );\n\n            //          const parent = node.parent;\n            //          let children = parent.data.children;\n            //\n            //          parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            //\n            //          if ( parent.data.children.length === 0 ) {\n            //              parent.data.hasChildren = false;\n            //          }\n            //\n            //        this.tree.treeModel.update();\n            //this.setNodesOnInit();\n\n            this.refreshAll( this.currentHierarchy );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public manageGeoObjectType( geoObjectType: GeoObjectType, readOnly: boolean ): void {\n\n        this.bsModalRef = this.modalService.show( ManageGeoObjectTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'manage-geoobjecttype-modal'\n        } );\n\n        geoObjectType.attributes.sort(( a, b ) => {\n            if ( a.label.localizedValue < b.label.localizedValue ) return -1;\n            else if ( a.label.localizedValue > b.label.localizedValue ) return 1;\n            else return 0;\n        } );\n        this.bsModalRef.content.geoObjectType = geoObjectType;\n        this.bsModalRef.content.readOnly = readOnly;\n\n        ( <ManageGeoObjectTypeModalComponent>this.bsModalRef.content ).onGeoObjectTypeSubmitted.subscribe( data => {\n\n            let position = this.getGeoObjectTypePosition( data.code );\n            if ( position ) {\n                this.geoObjectTypes[position] = data;\n            }\n        } );\n    }\n\n    private getHierarchyTypePosition( code: string ): number {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let obj = this.hierarchies[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    public addChildAndRootToHierarchy(): void {\n        const that = this;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = \"ROOT\";\n        this.bsModalRef.content.toRoot = true;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public addChildToHierarchy( parent: TreeNode ): void {\n        const that = this;\n        that.current = parent;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = parent;\n        this.bsModalRef.content.toRoot = false;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n            const d = that.current.data;\n\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public deleteTreeNode( node: TreeNode ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + node.data.label + ']';\n        this.bsModalRef.content.data = node;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeTreeNode( data );\n        } );\n    }\n\n    public removeTreeNode( node: TreeNode ): void {\n        this.hierarchyService.removeFromHierarchy( this.currentHierarchy.code, node.parent.data.geoObjectType, node.data.geoObjectType ).then( data => {\n\n            if ( node.parent.data.geoObjectType == null ) {\n                this.nodes = [];\n                // this.refreshAll(null);\n                //return;\n            }\n\n            const parent = node.parent;\n            let children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            if ( parent.data.children.length === 0 ) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n\n            // Update the available GeoObjectTypes\n            this.changeDetectorRef.detectChanges()\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public isActive( item: any ) {\n        return this.currentHierarchy === item;\n    };\n\n    public onDrop( $event: any ) {\n        // Dropped $event.element\n        this.removeTreeNode( $event.element )\n    }\n\n    public allowDrop( element: Element ) {\n        // Return true/false based on element\n        return true;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <loading-bar></loading-bar>\n  \n  <div id=\"app-container\" class=\"container-fluid\">\n  \n  <!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n    \n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.types.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <!-- to filter out already assigned types use this pipe > geoobjecttype:nodes -->\n          <li class=\"list-group-item\" *ngFor=\"let type of geoObjectTypes\">\n            {{type.label.localizedValue}} <i *ngIf=\"type.isLeaf === 'true'\" class=\"fa fa-leaf\" style=\"font-size:15px;cursor:auto;margin-left:5px;\" aria-hidden=\"true\"></i> \n            \n            <span *ngIf=\"isOrganizationRA(type.organizationCode)\">\n              <i class=\"fa fa-times delete-btn clickable pull-right\" *ngIf=\"!excludeGeoObjectTypeDeletes(type)\" (click)=\"deleteGeoObjectType(type)\" [title]=\"'button.delete.helptext' | localize\"></i> \n              <i class=\"fa fa-pencil clickable pull-right\" (click)=\"manageGeoObjectType(type, false)\" [title]=\"'button.edit.helptext' | localize\"></i> \n            </span>\n            \n            <span *ngIf=\"!isOrganizationRA(type.organizationCode)\">\n              <i class=\"fa fa-eye clickable pull-right\" (click)=\"manageGeoObjectType(type, true)\" [title]=\"'button.view.helptext' | localize\"> </i> \n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createGeoObjectType()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n        \n      </div>\n    \n    \n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <li *ngFor=\"let hierarchy of hierarchies;\" class=\"list-group-item clickable\" [ngClass]=\"{active: isActive(hierarchy)}\" (click)=\"hierarchyOnClick($event,hierarchy)\">\n            <i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}} \n\n            <span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\">\n              <i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\" class=\"fa fa-times delete-btn clickable pull-right\" (click)=\"deleteHierarchyType(hierarchy)\" [title]=\"'button.delete.helptext' | localize\"></i> \n              <i class=\"fa fa-pencil pull-right clickable\" (click)=\"editHierarchyType(hierarchy, false)\" [title]=\"'button.edit.helptext' | localize\"> </i>            \n            </span>\n            \n            <span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\">\n              <i class=\"fa fa-eye pull-right clickable\" (click)=\"editHierarchyType(hierarchy, true)\" [title]=\"'button.view.helptext' | localize\"> </i>\n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createHierarchy()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <h3> \n            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n        </h3>\n        <hr>\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n          <div>\n            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n          </div>\n        </div>\n      </div>\n            \n    </div>\n    \n  </div>\n  \n  <context-menu #nodeMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"addChildToHierarchy($event.item)\">\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>\n    </ng-template>\n  </context-menu>\n  \n  <context-menu #leafMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>  {{item?.data.label.localizedValue}}\n    </ng-template>\n  </context-menu>\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType } from '../../../model/hierarchy';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { AuthService } from '../../../../shared/service/auth.service';\n\n\n@Component( {\n    selector: 'create-hierarchy-type-modal',\n    templateUrl: './create-hierarchy-type-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n    \n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n    \n    readOnly: boolean = false;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    constructor( private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"rootGeoObjectTypes\": [],\n            \"organizationCode\": \"\"\n        };\n        \n        this.registryService.getOrganizations().then(orgs => {\n        \n          if (!this.edit && orgs.length === 1)\n          {\n            this.hierarchyType.organizationCode = orgs[0].code;\n          }\n          \n          // Filter out organizations they're not RA's of, unless we're readOnly.\n          if (!this.readOnly)\n          {\n            this.organizations = [];\n            \n            for (var i = 0; i < orgs.length; ++i)\n            {\n              if (this.auth.isOrganizationRA(orgs[i].code))\n              {\n                this.organizations.push(orgs[i]);\n              }\n            }\n          }\n          else\n          {\n            this.organizations = orgs;\n          }\n          \n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n        \n        if (this.readOnly)\n        {\n          this.bsModalRef.hide();\n          return;\n        }\n\n        if ( this.edit ) {\n            this.hierarchyService.updateHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchyService.createHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form class=\"modal-form\">\n\n      <error-message [message]=\"message\"></error-message>\n\n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.description.localeValues\">\n        <label for=\"descriptionInput\">\n          <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n          class=\"form-control\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType, HierarchyNode } from '../../../model/hierarchy';\nimport { GeoObjectType } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\n\n@Component( {\n    selector: 'add-child-to-hierarchy-modal',\n    templateUrl: './add-child-to-hierarchy-modal.component.html',\n    styleUrls: []\n} )\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n\t /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n\n    public hierarchyType: HierarchyType;\n\n    public nodes: HierarchyNode[];\n\n    public allGeoObjectTypes: GeoObjectType[];\n\n    public selectedGeoObjectType: GeoObjectType;\n\n    private selectUndefinedOptionValue: any;\n\n\tprivate toRoot: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) {\n    }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n    \n    onSelect(value: string): void {\n    \tthis.allGeoObjectTypes.forEach(gObj => {\n    \t\tif(gObj.code === value){\n    \t\t\tthis.selectedGeoObjectType = gObj;\n    \t\t}\n    \t})\n    }\n    \n    handleOnSubmit(): void {\n        this.message = null;\n        \n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy( this.hierarchyType.code, parent, this.selectedGeoObjectType.code ).then( data => {\n            this.onNodeChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n        \n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <error-message [message]=\"message\"></error-message>\n\n    <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { Organization } from '../../../../shared/model/core';\nimport { AuthService } from '../../../../shared/service/auth.service';\n\n\n@Component( {\n    selector: 'create-geoobjtype-modal',\n    templateUrl: './create-geoobjtype-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organizations: any = [];\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    constructor( private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"geometryType\": \"POINT\",\n            \"isLeaf\": false,\n            \"isGeometryEditable\": true,\n            \"organizationCode\": \"\",\n            \"attributes\": []\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n        \n          if (orgs.length === 1)\n          {\n            this.geoObjectType.organizationCode = orgs[0].code;\n          }\n          \n          // Filter out organizations they're not RA's of\n          this.organizations = [];\n          \n          for (var i = 0; i < orgs.length; ++i)\n          {\n            if (this.auth.isOrganizationRA(orgs[i].code))\n            {\n              this.organizations.push(orgs[i]);\n            }\n          }\n          \n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType( JSON.stringify( this.geoObjectType ) ).then( data => {\n            this.onGeoObjTypeCreate.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n\n    <!-- <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}\n      </h1>\n    </div> -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.description.localeValues\">\n          <div>\n            <label>\n              <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n            </label>\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n              class=\"form-control\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required>\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"organization\" [(ngModel)]=\"geoObjectType.organizationCode\" required>\n            <option></option>\n            <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport {  GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, GeoObjectType } from '../../../model/registry';\n\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'manage-geoobjecttype-modal',\n    templateUrl: './manage-geoobjecttype-modal.component.html',\n    styleUrls: ['./manage-geoobjecttype-modal.css']\n} )\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor( public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n      this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe( modalState => {\n            this.modalState = modalState;\n      });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy(){\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the \n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next( data );\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","\n<form >\n     \n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n  \n  <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\"></manage-attributes-modal>\n  \n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" ></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" ></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n \n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\" ></edit-term-option-input>\n \n</form>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'geoobjecttype-input',\n    templateUrl: './geoobjecttype-input.component.html',\n    styleUrls: ['./geoobjecttype-input.css']\n} )\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange:  EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n    \n    @Input('setGeoObjectType') \n    set in(geoObjectType: GeoObjectType){\n        if(geoObjectType){\n          this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        //   this.geoObjectType = geoObjectType;\n        }\n    }\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizationService: LocalizationService, private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n    }\n\n    ngAfterViewInit() {\n    }\n\n    ngOnDestroy(){\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType( this.editGeoObjectType ).then( geoObjectType => {\n\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n        \n        // return false;\n\n        return true;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.editGeoObjectType.title\"></localize>\n                {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.organizationCode\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group list-group-flush\">\n                                <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li>\n                            </ul>\n\n                            <button [disabled]=\"readOnly\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\">\n                                <localize key=\"modal.button.manageAttributes\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n\n@Component( {\n    selector: 'manage-attributes-modal',\n    templateUrl: './manage-attributes-modal.component.html',\n    styleUrls: ['./manage-attributes-modal.css']\n} )\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy(){\n      this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    editAttribute(attr: Attribute, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":attr, \"termOption\":\"\"})\n    }\n\n    removeAttributeType(attr: Attribute, e: any): void {\n\n      this.confirmBsModalRef = this.modalService.show( ConfirmModalComponent, {\n\t\t  animated: true,\n\t\t  backdrop: true,\n\t\t  ignoreBackdropClick: true,\n\t  } );\n\t  this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + attr.label.localizedValue + ']';\n      this.confirmBsModalRef.content.data = {'attributeType': attr, 'geoObjectType': this.geoObjectType};\n      this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n\t  ( <ConfirmModalComponent>this.confirmBsModalRef.content ).onConfirm.subscribe( data => {\n          this.deleteAttributeType( data.geoObjectType.code, data.attributeType );\n\t  } );\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: Attribute): void {\n\n          this.registryService.deleteAttributeType( geoObjectTypeCode, attr.code ).then( data => {\n            this.onDeleteAttribute.next( data );\n\n            if(data){\n              this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            title=\"<localize key='modal.button.edit'></localize>\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            title=\"<localize key='modal.button.remove'></localize>\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, AttributeTerm, AttributeDecimal, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\n \n\n@Component( {\n    selector: 'define-attribute-modal-content',\n    templateUrl: './define-attribute-modal-content.component.html',\n    styleUrls: ['./define-attribute-modal-content.css']\n} )\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    message: string = null;\n    newAttribute: Attribute = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.create.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n\n    constructor( \n\t    public bsModalRef: BsModalRef, \n        private modalStepIndicatorService: ModalStepIndicatorService, \n        private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizeService: LocalizationService,\n        private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n        if(this.attributeInputComponent){\n            this.attributeInputComponent.animate();\n        }\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.addAttributeType( this.geoObjectType.code, this.newAttribute ).then( data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    setAttribute(type:string): void {\n        if(type === 'term'){\n            this.newAttribute = new AttributeTerm(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else if(type === 'float') {\n            this.newAttribute = new AttributeDecimal(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else{\n            this.newAttribute = new Attribute(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        \n        let isAttrValid: boolean = false;\n        \n        if(this.attributeInputComponent){\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n        \n        if(isAttrValid){\n            return true;\n        }\n\n        return false;\n    }\n    \n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message\" class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                        <error-message [message]=\"message\"></error-message>\n                    </div>\n                </div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport {\n\ttrigger,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\n\nimport { AttributeInputComponent } from '../geoobjecttype-management/attribute-input.component';\n\n\n\n@Component({\n\tselector: 'edit-attribute-modal-content',\n\ttemplateUrl: './edit-attribute-modal-content.component.html',\n\tstyleUrls: ['./edit-attribute-modal-content.css']\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\tmessage: string = null;\n\tmodalState: ManageGeoObjectTypeModalState = { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" };\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": true }\n\t\t]\n\t};\n\n\t@ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n\tconstructor(public bsModalRef: BsModalRef,\n\t\tprivate modalStepIndicatorService: ModalStepIndicatorService,\n\t\tprivate geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate localizeService: LocalizationService,\n\t\tprivate registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\thandleOnSubmit(): void {\n\n\t\tthis.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n\n\t\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n\t\t\t\tlet attr = this.geoObjectType.attributes[i];\n\t\t\t\tif (attr.code === data.code) {\n\t\t\t\t\tObject.assign(attr, data);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tisFormValid(): boolean {\n\n\t\t// let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n\t\t// if(isAttrValid){\n\t\t//     return true;\n\t\t// }\n\n\t\t// return false;\n\t\treturn true\n\t}\n\n\tcancel(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\tback(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\n\t\t\tconsole.log(this.message);\n\t\t}\n\t}\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message\" class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                        <error-message [message]=\"message\"></error-message>\n                    </div>\n                </div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { GeoObjectType, AttributeTerm, GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, Term} from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component( {\n    selector: 'term-option-widget',\n    templateUrl: './term-option-widget.component.html',\n    styleUrls: ['./term-option-widget.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms')),\n              transition('show => none', animate('100ms'))\n        ]),\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    state: string = 'none';\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy(){\n    \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n            \n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n            \n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\": \"\"})\n\n    }    \n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from '../../../../shared/component/message/error-message.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectType, AttributeTerm, Term, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n@Component( {\n    selector: 'manage-term-options',\n    templateUrl: './manage-term-options.component.html',\n    styleUrls: ['./manage-term-options.css'],\n    animations: [\n        trigger( 'toggleInputs', [\n            state( 'none, void',\n                style( { 'opacity': 0 } )\n            ),\n            state( 'show',\n                style( { 'opacity': 1 } )\n            ),\n            transition( 'none => show', animate( '300ms' ) ),\n            transition( 'show => none', animate( '100ms' ) )\n        ] ),\n        trigger( 'openClose',\n            [\n                transition(\n                    ':enter', [\n                        style( { 'opacity': 0 } ),\n                        animate( '500ms', style( { 'opacity': 1 } ) )\n                    ]\n                ),\n                transition(\n                    ':leave', [\n                        style( { 'opacity': 1 } ),\n                        animate( '0ms', style( { 'opacity': 0 } ) ),\n\n                    ]\n                )]\n        )\n    ]\n} )\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    termOption: Term;\n    state: string = 'none';\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        \"steps\": [\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.geoobjecttype\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.attributes\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.edit.attribute\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.term.options\" ), \"active\": true, \"enabled\": true }\n        ]\r\n    };\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig( this.modalStepConfig );\n        this.termOption = new Term( \"\", this.localizeService.create(), this.localizeService.create() );\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone( event: AnimationEvent ): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if ( this.termOption.code && this.termOption.code.length > 0 ) {\n\n            // If code has a space\n            if ( this.termOption.code.indexOf( \" \" ) !== -1 ) {\n                return false;\n            }\n\n            // If label is only spaces\n            for(let i = 0; i < this.termOption.label.localeValues.length; i++) {\n              if ( this.termOption.label.localeValues[i].value.replace( /\\s/g, '' ).length === 0 ) {\n                return false\n              }                \n            }\n            \n\n            return true;\n        }\n        else if ( this.termOption.code && this.termOption.code.indexOf( \" \" ) !== -1 ) {\n            return false;\n        }\n\n        return false\n    }\n\n    addTermOption(): void {\n\n        this.registryService.addAttributeTermTypeOption( this.attribute.rootTerm.code, this.termOption ).then( data => {\n\n            this.attribute.rootTerm.children.push( data );\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n    deleteTermOption( termOption: Term ): void {\n\n        this.registryService.deleteAttributeTermTypeOption( termOption.code ).then( data => {\n\n            if ( this.attribute.rootTerm.children.indexOf( termOption ) !== -1 ) {\n                this.attribute.rootTerm.children.splice( this.attribute.rootTerm.children.indexOf( termOption ), 1 );\n            }\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    removeTermOption( termOption: Term ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + '[' + termOption.label + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.deleteTermOption( termOption );\n        } );\n    }\n\n    editTermOption( termOption: Term ): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editTermOption, \"attribute\": this.attribute, \"termOption\": termOption } )\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" } )\n    }\n\n    error( err: HttpErrorResponse ): void {\n        if ( err !== null ) {\n            // TODO: add error modal\n            //   this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            //   this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message\" class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                    <error-message [message]=\"message\"></error-message>\n                </div>\n            </div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option, $event)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option, $event)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n\nimport { Step, StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, Term, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n \n@Component( {\n    selector: 'edit-term-option-input',\n    templateUrl: './edit-term-option-input.component.html',\n    styleUrls: [],\n    animations: [\n        trigger('openClose', \n            [\n                transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    @Input() termOption: Term;\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":this.attribute, \"termOption\":\"\"};\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), \"active\":true, \"enabled\":true}\n\n    ]};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.updateAttributeTermTypeOption( this.termOption ).then( data => {\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    isFormValid(): boolean {\n        \n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n   <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input autofocus type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\" required geoObjectAttributeCode>\n                            </span>\n                        </div>\n                    </div>\n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a (click)=\"toggle()\"> <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span *ngIf=\"show\">\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm( action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-page',\n    templateUrl: './data-page.component.html',\n    styleUrls: ['./data-page.css']\n} )\nexport class DataPageComponent implements OnInit {\n\n\tcontent: string = \"SPREADSHEET\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SPREADSHEET\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n\t\t}\n\t\telse if(content === \"SHAPEFILE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"shapefile.title\");\n\t\t}\n\t\telse if(content === \"EXPORT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"io.export.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">Import spreadsheet</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">Import shapefile</a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { SpreadsheetModalComponent } from './modals/spreadsheet-modal.component';\nimport { ShapefileModalComponent } from './modals/shapefile-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { ExternalSystemService } from '../../../shared/service/external-system.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ImportStrategy } from '../../model/registry';\nimport { ExternalSystem } from '../../../shared/model/core';\n\ndeclare var acp: string;\n\n@Component({\n\n\tselector: 'dataimporter',\n\ttemplateUrl: './dataimporter.component.html',\n\tstyleUrls: ['./dataimporter.css']\n})\nexport class DataImporterComponent implements OnInit {\n\n\tshowImportConfig: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n\timportStrategy: ImportStrategy;\n\timportStrategies: any[] = [\n\t\t{ \"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n\t\t{ \"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n\t\t{ \"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n\t]\n\n    /*\n     * Currently selected code\n     */\n\tcode: string = null;\n\n    /*\n     * Currently start date\n     */\n\tstartDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n\tuploader: FileUploader;\n\n\t@ViewChild('myFile')\n\tfileRef: ElementRef;\n\n\t@Input()\n\tformat: string; // Can be SHAPEFILE or EXCEL\n\n\tisExternal: boolean = false;\n\n\t/*\n\t * List of available external systems (filtered based on user's org)\n\t */\n\texternalSystems: ExternalSystem[];\n\n\t/*\n\t * currently selected external system.\n\t */\n\texternalSystemId: string;\n\n\tisLoading: boolean = true;\n\n\tconstructor(private service: IOService,\n\t\tprivate eventService: EventService,\n\t\tprivate modalService: BsModalService,\n\t\tprivate localizationService: LocalizationService,\n\t\tprivate authService: AuthService,\n\t\tprivate sysService: ExternalSystemService\n\t) { }\n\n\tngOnInit(): void {\n\t\tthis.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n\n\t\t\tthis.externalSystems = paginatedSystems.resultSet;\n\n\t\t\tif (this.externalSystems.length === 0) {\n\t\t\t\tthis.isExternal = false;\n\t\t\t\tthis.showImportConfig = true; // Show the upload widget if there are no external systems registered\n\t\t\t}\n\n\t\t\tthis.isLoading = false;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.service.listGeoObjectTypes(true).then(types => {\n\n\t\t\tvar myOrgTypes = [];\n\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\tlet type = types[i];\n\t\t\t\t\n\t\t\t\tif (this.authService.isOrganizationRA(type.orgCode) || this.authService.isGeoObjectTypeRM(type.orgCode, type.code)) {\n\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.types = myOrgTypes;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tvar getUrl = acp + '/excel/get-configuration';\n\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\tgetUrl = acp + '/shapefile/get-shapefile-configuration';\n\n\t\t\tthis.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n\t\t}\n\n\t\tlet options: FileUploaderOptions = {\n\t\t\tqueueLimit: 1,\n\t\t\tremoveAfterUpload: true,\n\t\t\turl: getUrl\n\t\t};\n\n\t\tthis.uploader = new FileUploader(options);\n\n\t\tthis.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n\t\t\tform.append('type', this.code);\n\n\t\t\tif (this.startDate != null) {\n\t\t\t\tform.append('startDate', this.startDate);\n\t\t\t}\n\t\t\tif (this.importStrategy) {\n\t\t\t\tform.append('strategy', this.importStrategy)\n\t\t\t}\n\t\t};\n\t\tthis.uploader.onBeforeUploadItem = (fileItem: any) => {\n\t\t\tthis.eventService.start();\n\t\t};\n\t\tthis.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n\t\t\tthis.fileRef.nativeElement.value = \"\";\n\t\t\tthis.eventService.complete();\n\t\t};\n\t\tthis.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst configuration = JSON.parse(response);\n\n\t\t\tconfiguration.isExternal = this.isExternal;\n\n\t\t\tlet externalSystem: ExternalSystem = null;\n\t\t\tfor (let i = 0; i < this.externalSystems.length; ++i) {\n\t\t\t\tlet sys: ExternalSystem = this.externalSystems[i];\n\n\t\t\t\tif (sys.oid === this.externalSystemId) {\n\t\t\t\t\texternalSystem = sys;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconfiguration.externalSystemId = this.externalSystemId;\n\t\t\tconfiguration.externalSystem = externalSystem;\n\n\t\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\t\tthis.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.configuration = configuration;\n\t\t};\n\t\tthis.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst error = JSON.parse(response)\n\n\t\t\tthis.error({ error: error });\n\t\t}\n\t}\n\n\tonClick(): void {\n\n\t\tif (this.uploader.queue != null && this.uploader.queue.length > 0) {\n\t\t\tthis.uploader.uploadAll();\n\t\t}\n\t\telse {\n\t\t\tthis.error({\n\t\t\t\tmessage: this.localizationService.decode('io.missing.file'),\n\t\t\t\terror: {},\n\t\t\t});\n\t\t}\n\t}\n\n\tsetImportSource(event, type): void {\n\t\tif (type === \"EXTERNAL\") {\n\t\t\tthis.isExternal = true;\n\t\t}\n\t\telse {\n\t\t\tthis.isExternal = false;\n\t\t}\n\t}\n\n\tonNext(): void {\n\t\tthis.showImportConfig = true;\n\t}\n\n\tonBack(): void {\n\t\tthis.showImportConfig = false;\n\t}\n\n\n\tpublic error(err: any): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0 && format === 'EXCEL'\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"types\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                    <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n                    <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\">\n                        <localize key=\"io.back\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListByOrg } from '../../model/registry';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-manager',\n\ttemplateUrl: './master-list-manager.component.html',\n\tstyleUrls: ['./master-list-manager.css']\n})\nexport class MasterListManagerComponent implements OnInit {\n\tmessage: string = null;\n\torgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.service.getMasterListsByOrg().then(response => {\n\t\t\tthis.orgs = response.orgs;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonCreate(org: MasterListByOrg): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.init(org);\n\t\tthis.bsModalRef.content.isNew = true;\n\t\tthis.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n\t\t\tconst obj = {\n\t\t\t\tlabel: list.displayLabel.localizedValue,\n\t\t\t\toid: list.oid,\n\t\t\t\tcreateDate: list.createDate,\n\t\t\t\tlastUpdateDate: list.lastUpdateDate,\n\t\t\t\tadmin: list.admin,\n\t\t\t\tisMaster: list.isMaster\n\t\t\t};\n\n\t\t\torg.lists.push(obj);\n\t\t});\n\t}\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-view/', code])\n\t}\n\n\tonEdit(pair: { label: string, oid: string }): void {\n\t\tthis.service.getMasterList(pair.oid).then(list => {\n\n\t\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tthis.bsModalRef.content.edit = true;\n\t\t\tthis.bsModalRef.content.master = list;\n\t\t\tthis.bsModalRef.content.isNew = false;\n\t\t\tthis.bsModalRef.content.onMasterListChange.subscribe(ret => {\n\t\t\t\tpair.label = ret.displayLabel.localizedValue;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + list.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = \"danger\";\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterList(list.oid).then(response => {\n\t\t\t\torg.lists = org.lists.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== list.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.admin\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\n\n@Component( {\n    selector: 'export-format-modal',\n    templateUrl: './export-format-modal.component.html',\n    styleUrls: []\n} )\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next( this.format );\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ChangeRequest, PageEvent, AbstractAction, AddChildAction, SetParentAction, CreateGeoObjectAction, RemoveChildAction, UpdateGeoObjectAction } from '../../model/crtable';\n\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ActionDetailModalComponent } from './action-detail/action-detail-modal.component'\n\n@Component( {\n\n    selector: 'request-table',\n    templateUrl: './request-table.component.html',\n    styleUrls: ['./request-table.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class RequestTableComponent {\n\n\tobjectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n\trequests: ChangeRequest[] = [];\n\n\tactions: AbstractAction[] | SetParentAction[] | AddChildAction[] | CreateGeoObjectAction[] | RemoveChildAction[] | UpdateGeoObjectAction[];\n\n\tcolumns: any[] = [];\n\t\n\ttoggleId: string;\n\n\tfilterCriteria: string = 'ALL';\n\n    constructor( private service: ChangeRequestService, private modalService: BsModalService, private localizationService: LocalizationService ) {\n        this.columns = [\n            { name: localizationService.decode( 'change.request.user' ), prop: 'createdBy', sortable: false },\n            { name: localizationService.decode( 'change.request.createDate' ), prop: 'createDate', sortable: false, width: 195 },\n            { name: localizationService.decode( 'change.request.status' ), prop: 'approvalStatus', sortable: false }\n        ];\n\n        this.refresh();\n    }\n\n    refresh(): void {\n\n            this.service.getAllRequests(\"ALL\").then( requests => {\n\n\t\t\t\tthis.requests = requests;\n\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } )\n\n    }\n\n\n    onSelect( selected: any ): void {\n\n\t\t// this.request = selected.selected;\n\n        this.service.getAllActions( selected.selected[0].oid ).then(actions => {\n\t\t\t\n\t\t\tthis.actions = actions;\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.execute( changeRequest.oid ).then( request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n\t}\n\t\n\t// onConfirmChangeRequest(request: any): void {\n\n    //     if ( request != null ) {\n    //         this.service.confirmChangeRequest( request.oid ).then( request => {\n    //             this.request = request;\n\n    //             // TODO: Determine if there is a way to update an individual record\n    //             this.refresh();\n    //         } ).catch(( response: HttpErrorResponse ) => {\n    //             this.error( response );\n    //         } );\n    //     }\n\t// }\n\t\n\tapplyActionStatusProperties(action: any ): void {\n\t\t// var action = JSON.parse(JSON.stringify(this.action));\n\t\t// action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n\t\tthis.service.applyActionStatusProperties(action).then( response => {\n\t\t\t// this.crtable.refresh()\n\t\t} ).catch(( err: HttpErrorResponse ) => {\n\t\t\tthis.error( err );\n\t\t} );\n\t}\n\n    onApproveAll(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.approveAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    onRejectAll(changeRequest: ChangeRequest): void {\n        if ( changeRequest != null ) {\n            this.service.rejectAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n\n                // TODO: Determine if there is a way to update an individual record\n                // this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\t}\n\t\n\trequestTrackBy(index: number, request: ChangeRequest) {\n    \treturn request.oid;\n\t}\n\t\n\ttoggle(event: any, oid: string): void {\n\n\t\tif(!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")){\n\t\t\tif(this.toggleId === oid){\n\t\t\t\tthis.toggleId = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggleId = oid;\n\t\t\t\tthis.onSelect({selected:[{oid:oid}]});\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(criteria: string): void {\n\n\t\t   this.service.getAllRequests(criteria).then( requests => {\n\t\t\t\tthis.requests = requests;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n\t\t\t} )\n\t\t\t\n\t\tthis.filterCriteria = criteria;\n\t}\n\n\tsetActionStatus(action: AbstractAction, status:string): void {\n\t\taction.approvalStatus = status;\n\n\t\tthis.applyActionStatusProperties(action);\n\t}\n\n\tgetActiveDetailComponent(action: AbstractAction) : any {\n      // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n      if (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\n      {\n        // return this.cuDetail;\n      }\n    //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n    //   {\n    //     return this.arDetail;\n\t//   }\n\t\n\t  return action;\n\t}\n\t\n    showActionDetail( action: any ) {\n\n\t\tthis.bsModalRef = this.modalService.show( ActionDetailModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\t\tthis.bsModalRef.content.curAction = action;\n      \n    //   var detail = this.getActiveDetailComponent();\n    //   if (detail != null)\n    //   {\n        // action.onSelect(action);\n    //   }\n    }\n\n}\n","<!-- <div class=\"row text-center\">\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"change.request.title\"></localize>\n        </h2>\n    </div>\n</div> -->\n\n<!-- <div class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            <localize key=\"change.request.table.title\"></localize>\n        </h3>\n    </div>\n</div> -->\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\t\t<div class=\"form-group button-row\">\n\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" >\n\t\t\t\t<localize key=\"change.request.all.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.pending.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.accepted.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;\" >\n\t\t\t\t<localize key=\"change.request.rejected.filter.link\"></localize>\n\t\t\t</a>\n\n\t\t</div>\n\n\t\t<hr style=\"border-top:solid 3px #6BA542\" />\n\n\t</div>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\n\t<table class=\"table\">\n\t\t<thead>\n\t\t\t<tr style=\"height: 50px;color: grey;\">\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n\t\t\t\t<!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n        <tbody>\n\t\t\t<ng-template ngFor let-req [ngForOf]=\"requests\" [ngForTrackBy]=\"requestTrackBy\">\n\t\t\t\t<tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n                \t<td class=\"col-md-4\">\n\t\t\t\t\t\t<h5><strong>{{req.createdBy}}</strong></h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n\t\t\t\t\t\t {{req.createDate}}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\">\n\t\t\t\t\t\t<h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n\t\t\t\t\t\t\t <strong>{{req.approvalStatus}}</strong>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!-- <td class=\"col-md-3\">\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onConfirmChangeRequest(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t</button>\t\n\t\t\t\t\t</td> -->\n\t\t\t\t\t<td class=\"col-md-1\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\">\n            \t\t<td colspan=\"5\" >\n\n\t\t\t\t\t\t<div class=\"row\" style=\"margin:0;\">\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\n\t\t\t\t\t\t\t\t<div *ngFor=\"let action of actions\" class=\"action-card\" [ngClass]=\"{'status-pending-container':action.approvalStatus === 'PENDING', 'status-accepted-container':action.approvalStatus === 'ACCEPTED', 'status-rejected-container':action.approvalStatus === 'REJECTED'}\" style=\"margin-bottom:10px; background-color:white;\"> \n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"margin:0; padding-top:5px; padding-bottom:5px;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-3\" style=\"border-right:2px grey solid; height:50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-circle\" style=\"float:left; line-height: 50px;\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"vertical-center\" style=\"margin:0; float:left; padding-left:20px;\">{{req.createdBy}}</h4>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" style=\"height: 50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"fa fa-refresh vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"fa fa-plus vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"fa fa-link vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"fa fa-chain-broken vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Update <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ]</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Create <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ] </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.SetParentAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set parents of <b>{{action.childCode}}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set <b>{{action.childTypeCode}}</b> as a child of <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Remove <b>{{action.childTypeCode}}</b> from <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-4\" style=\"height: 50px;text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t\t<h4 *ngIf=\"req.approvalStatus !== 'PENDING'\" class=\"vertical-center\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" style=\"margin: 0;\">{{action.approvalStatus}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'ACCEPTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'ACCEPTED')\" class=\"btn btn-primary vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.accept.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'ACCEPTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'REJECTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'REJECTED')\" class=\"btn btn-danger vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.reject.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'REJECTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'PENDING'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'PENDING')\" class=\"btn btn-warning vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.pending.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'PENDING'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"height: 150px;border-top: 1px grey solid;margin:0;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.contributorNotes\" readonly=\"true\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.maintainerNotes\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-2\" style=\"height:100%;\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" (click)=\"showActionDetail(action)\" class=\"btn btn-default vertical-center\" style=\"width:100%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.action.details.label\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> <!-- END action-card -->\n\n\t\t\t\t\t\t\t\t<!-- <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\">Change Request Notes</label>\n\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" value=\"\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t</div>\t -->\n\n\t\t\t\t\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onApproveAll(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll(req)\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\t\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.changes.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</td>\n        \t\t</tr>\n\t\t\t</ng-template>\n        </tbody>\n\t</table>\n\t</div>\t \n</div>\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component( {\n    selector: 'action-detail-modal',\n    templateUrl: './action-detail-modal.component.html',\n    styleUrls: []\n} )\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    @ViewChild( \"cuDetail\" ) cuDetail: ActionDetailComponent;\n    @ViewChild( \"arDetail\" ) arDetail: ActionDetailComponent;\n    @ViewChild( \"spDetail\" ) spDetail: ActionDetailComponent;\n\n    @Input()\n    set curAction( action: any ) {\n        this.action = action;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if ( this.cuDetail != null ) {\n            this.cuDetail.endEdit();\n        }\n\n        if ( this.arDetail != null ) {\n            this.arDetail.endEdit();\n        }\n\n        if ( this.spDetail != null ) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit, Input, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\n\nimport { GeoObjectType, Attribute, ValueOverTime, GeoObjectOverTime, AttributeTerm, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component( {\n    selector: 'manage-versions-modal',\n    templateUrl: './manage-versions-modal.component.html',\n    styleUrls: ['./manage-versions-modal.css'],\n    host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger( 'fadeInOut', [\n                transition( 'void => *', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] ),\n                transition( '* => void', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] )\n            ] )\n        ]]\n} )\nexport class ManageVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    readonly: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onAttributeVersionChange: Subject<GeoObjectOverTime>;\n\n    @Input() attribute: Attribute;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObjectOverTime: GeoObjectOverTime;\n\n    goGeometries: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    newVersion: ValueOverTime;\n\n    editingGeometry: number = -1;\n\n    hasDuplicateDate: boolean = false;\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService,\n        public bsModalRef: BsModalRef, public changeDetectorRef: ChangeDetectorRef ) { }\n\n    ngOnInit(): void {\n\n        this.onAttributeVersionChange = new Subject();        \n    }\n\n    tfInit(): void {\n      if ( this.attribute.code === 'geometry' && this.geoObjectOverTime.attributes[this.attribute.code].values.length === 1 ) {\n        this.editingGeometry = 0;\n      }\n    }\n    \n    geometryChange(vAttribute, event): void {\n      vAttribute.value = event;\n    }\n\n    onDateChange( event: any, vAttribute: ValueOverTime ): any {\n\n        //        console.log( event.currentTarget.value );\n        //\n        //        let dt = new Date( event.currentTarget.value );\n        //let dt = new Date(event);\n\n        let vAttributes = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        //        vAttribute.startDate = Utils.formatDateString( dt );\n\n        this.snapDates( vAttributes );\n\n        //        this.changeDetectorRef.detectChanges();\n    }\n\n    snapDates( votArr: ValueOverTime[] ): void {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data by start date \n        votArr.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n        for ( let i = 1; i < votArr.length; i++ ) {\n            let prev = votArr[i - 1];\n            let current = votArr[i];\n\n            if ( current.startDate ) {\n                prev.endDate = Utils.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n            }\n            else {\n                prev.endDate = PRESENT;\n            }\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( votArr.length > 0 ) {\n            votArr[votArr.length - 1].endDate = PRESENT;\n        }\n    }\n\n    onAddNewVersion(): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null;  // Utils.formatDateString(new Date());\n        vot.endDate = null;  // Utils.formatDateString(new Date());\n\n        if ( this.attribute.type === \"local\" ) {\n            //   vot.value = {\"localizedValue\":null,\"localeValues\":[{\"locale\":\"defaultLocale\",\"value\":null},{\"locale\":\"km_KH\",\"value\":null}]};\n            vot.value = this.lService.create();\n        }\n        else if ( this.attribute.type === 'geometry' ) {\n\n            if ( votArr.length > 0 ) {\n                if ( this.editingGeometry != -1 && this.editingGeometry != null ) {\n                    vot.value = votArr[this.editingGeometry].value;\n                }\n                else {\n                    vot.value = votArr[0].value;\n                }\n            }\n            else {\n                vot.value = { \"type\": this.geoObjectType.geometryType, \"coordinates\": [] };\n\n                if ( this.geoObjectType.geometryType === \"MULTIPOLYGON\" ) {\n                    vot.value.type = \"MultiPolygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POLYGON\" ) {\n                    vot.value.type = \"Polygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POINT\" ) {\n                    vot.value.type = \"Point\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTIPOINT\" ) {\n                    vot.value.type = \"MultiPoint\";\n                }\n                else if ( this.geoObjectType.geometryType === \"LINE\" ) {\n                    vot.value.type = \"Line\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTILINE\" ) {\n                    vot.value.type = \"MultiLine\";\n                }\n            }\n        }\n        else if ( this.attribute.type === 'term' ) {\n            var terms = this.getGeoObjectTypeTermAttributeOptions( this.attribute.code );\n\n            if ( terms.length > 0 ) {\n                vot.value = terms[0].code;\n            }\n        }\n\n        votArr.push( vot );\n\n        if ( this.attribute.code === 'geometry' ) {\n            this.editingGeometry = votArr.length - 1;\n        }\n\n        this.snapDates( votArr );\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    editGeometry( index: number ) {\n        this.editingGeometry = index;\n    }\n\n    getVersionData( attribute: Attribute ) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach( vAttribute => {\n            vAttribute.value.localeValues.forEach( val => {\n                versions.push( val );\n            } )\n        } )\n        return versions;\n    }\n\n    getDefaultLocaleVal( locale: any ): string {\n        let defVal = null;\n\n        locale.localeValues.forEach( locVal => {\n            if ( locVal.locale === 'defaultLocale' ) {\n                defVal = locVal.value;\n            }\n\n        } )\n\n        return defVal;\n    }\n\n    setDateAttribute( vot: ValueOverTime, val: string ): void {\n        vot.value = new Date( val ).getTime().toString()\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if ( attrOpts.length > 0 ) {\n                    if ( attr.code === \"status\" ) {\n                        return Utils.removeStatuses(attrOpts);\n                    }\n                    else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    remove( version: any ): void {\n\n        let val = this.geoObjectOverTime.attributes[this.attribute.code];\n\n        for ( let i = 0; i < val.values.length; i++ ) {\n            let vals = val.values[i];\n\n            if ( vals.startDate === version.startDate ) {\n                val.values.splice( i, 1 );\n            }\n        }\n\n        this.snapDates( val.values );\n    }\n\n    isChangeOverTime( attr: Attribute ): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach( attribute => {\n            if ( this.attribute.code === attr.code ) {\n                isChangeOverTime = attr.isChangeOverTime\n            }\n        } )\n\n        return isChangeOverTime;\n    }\n\n    onSubmit(): void {\n\n        this.onAttributeVersionChange.next( this.geoObjectOverTime );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #versionsform=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\">\n\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"width: 100%;border: none;\">\n                    <div *ngIf=\"geoObjectOverTime\" >\n\n                        <div class=\"panel\" style=\"box-shadow: none;\">\n                            <div class=\"panel-body\">\n                                <ul class=\"list-group\">\n                                    <!-- <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> -->\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        \n                                        <div *ngIf=\"attribute.type !== 'geometry'\">\n                                                <table class=\"table table-striped\"> \n                                                    <thead style=\"font-size: 14px;\"> \n                                                        <tr> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                            <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                            <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                                        </tr> \n                                                    </thead> \n\n                                                    <tbody *ngIf=\"attribute.type === 'local'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\" >\n                                                            <td >\n                                                                <table style=\"width: 100%;\">\n                                                                    <tr *ngFor=\"let loc of vAttribute.value.localeValues; let idx = index;\" > \n                                                                        <td style=\"vertical-align: bottom; width: 35%;padding: 0; padding-top:5px;\">\n                                                                            <h5>{{loc.locale}}</h5>\n                                                                            <input type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"loc.value = $event\" [required]=\"loc.locale === 'defaultLocale'\">\n                                                                            <div class=\"form-input-validation-error-message-wrapper\">\n                                                                                <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">Value is required.</p>\n                                                                            </div>\n                                                                        </td> \n                                                                    </tr>\n                                                                </table>\n                                                            </td>\n\n                                                            <td style=\"width: 35%;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate_' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                                <div class=\"form-input-validation-error-message-wrapper\">\n                                                                    <p *ngIf=\"!vAttribute.startDate\" class=\"error-message\">Start date is required.</p>\n                                                                </div>\n                                                            </td> \n                                                            <td style=\"width: 20%;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle; width: 10%;padding: 5px; text-align: center;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n\n                                                    <!-- TODO: This isn't getting the options on load -->\n                                                    <tbody *ngIf=\"attribute.type === 'term'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                <!-- <h5>{{loc.locale}}</h5> -->\n                                                                <!-- <input type=\"text\" class=\"form-control\" id=\"loc-val-{{i}}\" name=\"loc-val-{{i}}\" [(ngModel)]=\"version.value\" (ngModelChange)=\"version.value = $event\"> -->\n                                                                <select id=\"mod-{{attribute.code}}\" [name]=\"'mod-term-' + i + '-' + attribute.code\" class=\"select-area\" style=\"float:none;\" [(ngModel)]=\"vAttribute.value\">\n                                                                    <option value=\"\" ></option>\n                                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attribute.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                                </select>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'character'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'date'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"date\" class=\"form-control\" [name]=\"'char-val-' + i\" [ngModel]=\"vAttribute.value | date:'yyyy-MM-dd'\" (ngModelChange)=\"setDateAttribute(vAttribute, $event)\" required> \n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'boolean'\">\n\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === true\" [value]=\"true\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\">\n                                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                                </label>\n\n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === false\"  [value]=\"false\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\">\n                                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                                </label>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n\n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'float'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'integer'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n                                            </table>\n                                        </div> \n\n                                        <div *ngIf=\"attribute.type === 'geometry'\">\n                                           <table class=\"table table-striped\">\n                                             <thead style=\"font-size: 14px;\">\n                                               <th style=\"width:60%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                               <th style=\"width:20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                               <th style=\"width:10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                               <th style=\"width: 10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                             </thead>\n                                             <tbody style=\"text-align: center;\">\n                                               <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\">\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <button *ngIf=\"this.editingGeometry != i\" class=\"btn\" (click)=\"editGeometry(i)\" role=\"button\"><localize key=\"changeovertime.manageVersions.geometry.edit\"></localize></button>\n                                                   <geoobject-editor-map *ngIf=\"this.editingGeometry === i\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" (geometryChange)=\"this.geometryChange(vAttribute, $event);\" [readOnly]=\"!geoObjectType.isGeometryEditable\" [postGeometry]=\"vAttribute.value\" [bboxCode]=\"this.geoObjectOverTime.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"vAttribute.startDate\"></geoobject-editor-map>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <input type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                 </td>\n                                               </tr>\n                                              </tbody>\n                                          </table>\n                                        </div>\n\n                                    </li>\n\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\">\n                                            <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                                        </i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none;width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button> -->\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!versionsform.valid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n\t      var newArray = [];\n\t      \n\t      for ( var i = 0; i < arr.length; ++i ) {\n\t        if (! (arr[i].code === \"CGR:Status-New\"\n\t             || arr[i].code === \"CGR:Status-Pending\"))\n\t        {\n\t          newArray.push(arr[i]);\n\t        }\n\t      }\n\t      \n\t      return newArray;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n    \n}","\nimport { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-edit-control',\n  templateUrl: './simple-edit-control.component.html',\n})\nexport class SimpleEditControl {\n  elRef: ElementRef\n  \n  @Input() visible = false;\n  \n  @Output() editEmitter = new EventEmitter<void>();\n  \n  constructor(elRef: ElementRef) {\n    this.elRef = elRef;\n  }\n\n  onAdd(map): any {\n    this.visible = true;\n    return this.elRef.nativeElement;\n  }\n  \n  onRemove(map): void {\n    this.elRef.nativeElement.remove();\n  }\n  \n  onClick(): void {\n    this.editEmitter.emit();\n  }\n}\n","<div *ngIf=\"this.visible\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button class=\"fa fa-pencil-square-o\" style=\"color: black; font-size: 18px;\" title=\"location.management.editing | localize\" (click)=\"this.onClick();\"></button>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'geoObjectAttributeExcludesFilter',\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n       \n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { HierarchyOverTime, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'manage-parent-versions-modal',\n    templateUrl: './manage-parent-versions-modal.component.html',\n    styleUrls: []\n} )\nexport class ManageParentVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onVersionChange: Subject<HierarchyOverTime>;\n\n    hierarchy: HierarchyOverTime = null;\n\n    hasDuplicateDate: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onVersionChange = new Subject();\n\n    }\n\n    init( hierarchy: HierarchyOverTime ): void {\n        this.hierarchy = hierarchy;\n    }\n\n    onAddNewVersion(): void {\n\n        let parents = {};\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parents[current.code] = {};\n        }\n\n        const entry = {\n            startDate: null,\n            endDate: null,\n            parents: parents\n        }\n\n        this.hierarchy.entries.push( entry );\n    }\n\n    remove( entry: any ): void {\n\n        for ( let i = 0; i < this.hierarchy.entries.length; i++ ) {\n            let vals = this.hierarchy.entries[i];\n\n            if ( vals.startDate === entry.startDate ) {\n                this.hierarchy.entries.splice( i, 1 );\n            }\n        }\n\n        this.snapDates();\n    }\n\n    getTypeAheadObservable( date: string, type: any, entry: any, index: number ): Observable<any> {\n\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let hierarchyCode = null;\n\n        if ( index > 0 ) {\n            let pType = this.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if ( parent.geoObject != null && parent.geoObject.properties.code != null ) {\n                hierarchyCode = this.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n            }\n        }\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( entry.parents[type.code].text, geoObjectTypeCode, parentCode, hierarchyCode, date ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, type: any, entry: any, date: string ): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        let parentTypes = [];\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parentTypes.push( current.code );\n\n            if ( current.code === type.code ) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects( e.item.uid, type.code, parentTypes, true, date ).then( ancestors => {\n\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n            for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n                let current = this.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while ( ancestor != null && ancestor.geoObject.properties.type != current.code ) {\n                    if ( ancestor.parents.length > 0 ) {\n                        ancestor = ancestor.parents[0];\n                    }\n                    else {\n                        ancestor = null;\n                    }\n                }\n\n                if ( ancestor != null ) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue;\n                }\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSubmit(): void {\n\n        this.onVersionChange.next( this.hierarchy );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    onDateChange( event: any ): any {\n        this.snapDates();\n    }\n\n    snapDates() {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data\n        this.hierarchy.entries.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n\n        for ( let i = 1; i < this.hierarchy.entries.length; i++ ) {\n            let prev = this.hierarchy.entries[i - 1];\n            let current = this.hierarchy.entries[i];\n\n            prev.endDate = this.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( this.hierarchy.entries.length > 0 ) {\n            this.hierarchy.entries[this.hierarchy.entries.length - 1].endDate = PRESENT;\n        }\n    }\n\n    formatDateString( dateObj: Date ): string {\n        const day = dateObj.getUTCDate();\n\n        return dateObj.getUTCFullYear() + \"-\" + ( dateObj.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"holder\" style=\"width: 100%; border: none;\">\n                    <div class=\"panel\" style=\"box-shadow: none;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\" *ngIf=\"hierarchy != null\">\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                    <table class=\"table table-striped\">\n                                        <thead style=\"font-size: 14px;\">\n                                            <tr>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let entry of hierarchy.entries; let i = index;\">\n                                                <td>\n                                                \n                                                  <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let type of hierarchy.types; let j = index\">\n                                                    {{type.label}}\n                                                    \n                                                    <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                                      name=\"{{type.code}}-{{i}}\"\n                                                      [disabled]=\"entry.startDate == null || entry.startDate === ''\"\n                                                      [(ngModel)]=\"entry.parents[type.code].text\" \n                                                      [typeaheadAsync]=\"true\"\n                                                      [typeahead]=\"getTypeAheadObservable(entry.startDate, type, entry, j)\"\n                                                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, type, entry, entry.startDate)\" \n                                                      [typeaheadOptionsLimit]=\"7\"\n                                                      typeaheadOptionField=\"name\" \n                                                      [typeaheadMinLength]=\"0\"\n                                                      [typeaheadWaitMs]=\"300\"\n                                                      required>\n                                                  </div>\n                                                \n                                                </td>\n                                                <td style=\"vertical-align: bottom;\">\n                                                  <input style=\"width: 100%;\" type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"entry.startDate\" (blur)=\"snapDates()\" required />\n                                                </td> \n                                                <td style=\"vertical-align: bottom;\">\n                                                  <p *ngIf=\"entry.startDate != null && entry.startDate !== ''\" style=\"font-size: 14px;\"> {{entry.endDate | date:'MM-dd-yyyy'}} </p>\n                                                </td>\n                                                <td style=\"vertical-align: middle; width: 10%; padding: 5px; text-align: center;\">\n                                                  <i class=\"fa fa-times delete-btn\" (click)=\"remove(entry)\"></i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </li>\n\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                  <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"><localize key=\"changeovertime.manageVersions.newVersion\"></localize></i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none; width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\" >\n                            <localize key=\"io.cancel\"></localize>\n                        </button> -->\n                        <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid || hasDuplicateDate\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'change-request-page',\n    templateUrl: './change-request-page.component.html',\n    styleUrls: ['./change-request-page.css']\n} )\nexport class ChangeRequestPageComponent implements OnInit {\n\n\tcontent: string = \"SUBMIT\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"MANAGE\") : this.renderContent(\"SUBMIT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SUBMIT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.page.title\");\n\t\t}\n\t\telse if(content === \"MANAGE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.table.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'MANAGE'}\" (click)=\"renderContent('MANAGE')\">Manage</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isContributor\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SUBMIT'}\" (click)=\"renderContent('SUBMIT')\">Submit</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<submit-change-request *ngIf=\"content === 'SUBMIT'\"></submit-change-request>\n\t\t\t\t\t<request-table *ngIf=\"content === 'MANAGE'\"></request-table>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { interval, Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListVersion } from '../../model/registry';\n\nimport { ExportFormatModalComponent } from './export-format-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ProgressService } from '../../../shared/service/progress.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { GeoObjectEditorComponent } from '../geoobject-editor/geoobject-editor.component';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'master-list',\n\ttemplateUrl: './master-list.component.html',\n\tstyleUrls: []\n})\nexport class MasterListComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterListVersion = null;\n\tp: number = 1;\n\tcurrent: string = '';\n\tfilter: { attribute: string, value: string, label: string }[] = [];\n\tselected: string[] = [];\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 100,\n\t\tresults: []\n\t};\n\tsort = { attribute: 'code', order: 'ASC' };\n\tisPublished: boolean = true;\n\t\n\tisRefreshing: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpublic searchPlaceholder = \"\";\n\n\tprivate isAdmin: boolean;\n\tprivate isMaintainer: boolean;\n\tprivate isContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService) {\n\n\t\tthis.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\t\tthis.isPublished = (this.route.snapshot.paramMap.get('published') == \"true\");\n\n\t\tthis.service.getMasterListVersion(oid).then( version => {\n\t\t\tthis.list = version;\n\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\tattribute.isCollapsed = true;\n\t\t\t});\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.data(this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\t//    onSearch(): void {\n\t//        this.filter = this.current;\n\t//\n\t//        this.onPageChange( 1 );\n\t//    }\n\n\tonSort(attribute: { name: string, label: string }): void {\n\t\tif (this.sort.attribute === attribute.name) {\n\t\t\tthis.sort.order = (this.sort.order === 'ASC' ? 'DESC' : 'ASC');\n\t\t}\n\t\telse {\n\t\t\tthis.sort = { attribute: attribute.name, order: 'ASC' };\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tattr.search = null;\n\t\t});\n\n\t\tthis.filter = [];\n\t\tthis.selected = [];\n\n\t\tthis.onPageChange(1);\n\t}\n\n\ttoggleFilter(attribute: any): void {\n\t\tattribute.isCollapsed = !attribute.isCollapsed;\n\t}\n\n\tgetValues(attribute: any): void {\n\t\treturn Observable.create((observer: any) => {\n\t\t\tthis.message = null;\n\n\t\t\t// Get the valid values\n\t\t\tthis.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.filter).then(options => {\n\t\t\t\toptions.unshift({ label: '[' + this.localizeService.decode(\"masterlist.nofilter\") + ']', value: null });\n\n\t\t\t\tobserver.next(options);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\thandleDateChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && (attribute.value.start !== '' || attribute.value.end !== '')) {\n\n\t\t\tlet label = '[' + attribute.label + '] : [';\n\n\t\t\tif (attribute.value.start != null) {\n\t\t\t\tlabel += attribute.value.start;\n\t\t\t}\n\n\t\t\tif (attribute.value.start != null && attribute.value.end != null) {\n\t\t\t\tlabel += ' - ';\n\t\t\t}\n\n\t\t\tif (attribute.value.end != null) {\n\t\t\t\tlabel += attribute.value.end;\n\t\t\t}\n\n\t\t\tlabel += ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleInputChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && attribute.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleListChange(e: TypeaheadMatch, attribute: any): void {\n\t\tattribute.value = e.item;\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tif (attr.base === attribute.base) {\n\t\t\t\tattr.search = '';\n\t\t\t}\n\t\t});\n\n\t\tif (attribute.value.value != null && attribute.value.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value.label + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t\tattribute.search = e.item.label;\n\t\t}\n\t\telse {\n\t\t\tattribute.search = '';\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tisFilterable(attribute: any): boolean {\n\t\treturn attribute.type !== 'none' && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n\t}\n\n\tonEdit(data): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\teditModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonGoto(data): void {\n\t\tconst oid = data.code;\n\n\t\tif (oid != null && oid.length > 0) {\n\t\t\twindow.open(acp + \"/nav/management#/locations/\" + oid, '_blank');\n\t\t}\n\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\t\t\n\t\tthis.isRefreshing = true;\n\n\t\tlet subscription = interval(1000).subscribe(() => {\n\t\t\tthis.service.progress(this.list.oid).then(progress => {\n\t\t\t\tthis.pService.progress(progress);\n\t\t\t});\n\t\t});\n\n\t\tthis.service.publishMasterList(this.list.oid)\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tsubscription.unsubscribe();\n\n\t\t\t\tthis.pService.complete();\n\t\t\t})).toPromise()\n\t\t\t.then(list => {\n\t\t\t  this.isRefreshing = false;\n\t\t\t\tthis.list = list;\n\t\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\t\tattribute.isCollapsed = true;\n\t\t\t\t});\n\n\t\t\t\t// Refresh the resultSet\n\t\t\t\tthis.onPageChange(1);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\tthis.pService.start();\n\t}\n\n\tonNewGeoObject(): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t//editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n\t\teditModal.content.configureAsNew(this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonExport(): void {\n\t\tthis.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.onFormat.subscribe(format => {\n\t\t\tif (format == 'SHAPEFILE') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-shapefile?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t\telse if (format == 'EXCEL') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-spreadsheet?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <!-- <progress-bar></progress-bar> -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.publishDate\"></localize>\n                    : {{list.publishDate}}\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : {{list.forDate}}\n                </h4>\n            </div>\n        </div>\n\n\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            \n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true, 'fa-spin':isRefreshing}\" style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n\n                        <button type=\"submit\" (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                        </button>\n                        <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th *ngIf=\"!list.leaf\" style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.edit.column\"></localize></th>\n                            <th *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\" [title]=\"'button.filter.helptext' | localize\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\" [typeaheadAsync]=\"true\" [typeahead]=\"getValues(attribute)\" (typeaheadOnSelect)=\"handleListChange($event, attribute)\" [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td *ngIf=\"!list.leaf\" style=\"width: 3%; text-align: center;\" class=\"label-column\"><a class=\"fa fa-map-marker\" (click)=\"onGoto(result)\"></a></td>\n                            <td style=\"width: 3%\" class=\"label-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(result)\" [title]=\"'button.edit.helptext' | localize\"></a></td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subscription, interval } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'published-master-list-history',\n\ttemplateUrl: './published-master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tpage: any = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresults: []\n\t};\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpollingData: Subscription;\n\n\tisAdmin: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tthis.pollingData = interval(5000).subscribe(() => {\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\t//isGeoObjectTypeRM(type: string): boolean {\n\t//\treturn this.authService.isGeoObjectTypeRM(type);\n\t//}\n\n\tonDeleteMasterListVersion(oid: string): void {\n\t\tthis.service.deleteMasterListVersion(oid).then(data => {\n\t\t\tthis.updateList();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tupdateList(): void {\n\t\t// update the list of versions. \n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\t\tif (this.list != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.updateList();\n\t\t}\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, true])\n\t}\n\n\tonPublishShapefile(version: MasterListVersion): void {\n\n\t\tthis.service.publishShapefile(version.oid).then(() => {\n\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDownloadShapefile(version: MasterListVersion): void {\n\t\twindow.location.href = acp + '/master-list/download-shapefile?oid=' + version.oid;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n     <div *ngIf=\"list && ((list.admin))\" style=\"margin-bottom: 10px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" \n                    [title]=\"'masterList.publish.help.text' | localize\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.publishDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version.oid )\" class=\"btn btn-danger\" role=\"button\">\n                                    Delete\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <div class=\"row\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span> <span style=\"display: block;\"> {{job.author}} </span> <span style=\"display: block;\"> {{job.type}} </span> <span style=\"display: block;\"> {{job.status}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-history',\n\ttemplateUrl: './master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tforDate: string = '';\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n\t\t\tthis.list.versions.push(version);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, false])\n\t}\n\n\tonDelete(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.list.versions = this.list.versions.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== version.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && ((list.admin) || isMaintainer)\" style=\"margin-bottom: 10px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\" style=\"margin-left: 10px;\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> <input id=\"forDate\" type=\"date\" name=\"forDate\" [(ngModel)]=\"forDate\" required>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.generatedDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"isMaintainer || isAdmin\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MasterList } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\nimport { PublishModalComponent } from './publish-modal.component';\n\n@Component({\n\n\tselector: 'master-list-view',\n\ttemplateUrl: './master-list-view.component.html',\n\tstyleUrls: ['./master-list-view.component.css']\n})\nexport class MasterListViewComponent implements OnInit {\n\n\tcontent: string = \"\";\n\tlist: MasterList = null;\n\n\t/*\n\t * Reference to the modal current showing\n     */\n\tprivate bsModalRef: BsModalRef;\n\n\n\tconstructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) {\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tif (oid != null) {\n\t\t\tthis.content = \"PUB\";\n\t\t}\n\n\t\tthis.service.getMasterList(oid).then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\n\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\t}\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\">Published</a>\n                    <a *ngIf=\"list && list.admin\" style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\">Exploratory</a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { IOService } from '../../service/io.service';\n\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\n\nimport { interval } from 'rxjs';\n\n@Component({\n\tselector: 'scheduled-jobs',\n\ttemplateUrl: './scheduled-jobs.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class ScheduledJobsComponent implements OnInit {\n\tmessage: string = null;\n\n\tactiveJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tcompleteJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tactiveTimeCounter: number = 0;\n\tcompleteTimeCounter: number = 0;\n\n\tpollingData: any;\n\n\tisViewAllOpen: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.onActiveJobsPageChange(1);\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.activeTimeCounter++\n\t\t\tthis.completeTimeCounter++\n\n\t\t\tif (this.isViewAllOpen) {\n\t\t\t\tif (this.activeTimeCounter >= 4) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t\tif (this.completeTimeCounter >= 7) {\n\t\t\t\t\tthis.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.completeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.activeTimeCounter >= 2) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tformatJobStatus(job: ScheduledJobOverview) {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PaginationPage): void {\n\n\t\tpage.results.forEach(job => {\n\n\t\t\tlet stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{ \"label\": \"File Import\", \"status\": \"COMPLETE\" },\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Staging\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Validation\",\n\t\t\t\t\t\t\"status\": job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Import\",\n\t\t\t\t\t\t\"status\": job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\n\t\t\tjob = job as ScheduledJobOverview;\n\t\t\tjob.stepConfig = stepConfig;\n\t\t});\n\n\t}\n\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\tonViewAllCompleteJobs(): void {\n\t\tthis.onCompleteJobsPageChange(1);\n\n\t\tthis.isViewAllOpen = true;\n\t}\n\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-history/', code])\n\t}\n\n\tonActiveJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.activeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.activeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCompleteJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.completeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.completeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\n\tonCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(job.configuration).then(response => {\n\t\t\t\tthis.bsModalRef.hide()\n\n\t\t\t\tfor (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n\t\t\t\t\tlet activeJob = this.activeJobsPage.results[i];\n\n\t\t\t\t\tif (activeJob.jobId === job.jobId) {\n\t\t\t\t\t\tthis.activeJobsPage.results.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.onViewAllCompleteJobs();\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tconsole.log(\"ERROR\", err);\n\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{job.createDate}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.createDate}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.lastUpdateDate}}</p>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { JobConflictModalComponent } from './conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './conflict-widgets/reupload-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { ScheduledJob } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\nimport { IOService } from '../../service/io.service';\n\nimport { interval } from 'rxjs';\n\n@Component({\n\tselector: 'job',\n\ttemplateUrl: './job.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class JobComponent implements OnInit {\n\tmessage: string = null;\n\tjob: ScheduledJob;\n\tallSelected: boolean = false;\n\thistoryId: string = \"\";\n\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\ttimeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tpollingData: any;\n\tisPolling: boolean = false;\n\thasRowValidationProblem: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService,\n\t\tprivate router: Router, private route: ActivatedRoute,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.historyId = this.route.snapshot.params[\"oid\"];\n\n\t\tthis.onPageChange(1);\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.stopPolling();\n\t}\n\n\tformatAffectedRows(rows: string) {\n\t\treturn rows.replace(/,/g, \", \");\n\t}\n\n\tformatValidationResolve(obj: any) {\n\t\treturn JSON.stringify(obj);\n\t}\n\n\tonProblemResolved(problem: any): void {\n\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\tlet pageConflict = this.page.results[i];\n\n\t\t\tif (pageConflict.id === problem.id) {\n\t\t\t\tthis.page.results.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetFriendlyProblemType(probType: string): string {\n\n\t\tif (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.DataNotFoundException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.required.value.lookup\");\n\t\t}\n\n\t\tif (\n\t\t\tprobType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n\t\t}\n\n\t\t// if(probType === \"net.geoprism.registry.io.TermValueException\"){\n\t\t//   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n\t\t// }\n\n\t\tif (\n\t\t\tprobType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n\t\t}\n\n\t\treturn probType;\n\t}\n\n\n\tonEdit(problem: any): void {\n\t\t// this.router.navigate( ['/registry/master-list-history/', code] )\n\n\t\tthis.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.problem = problem;\n\t\tthis.bsModalRef.content.job = this.job;\n\t\tthis.bsModalRef.content.onConflictAction.subscribe(data => {\n\t\t\tif (data.action === 'RESOLVED') {\n\t\t\t\tthis.onProblemResolved(data.data);\n\t\t\t}\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n\n\t\t\tthis.job = response;\n\n\t\t\tif (this.job.stage === 'IMPORT_RESOLVE') {\n\t\t\t\tthis.page = this.job.importErrors;\n\t\t\t}\n\t\t\telse if (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.page = this.job.problems;\n\n\t\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\t\tlet problem = this.page.results[i];\n\n\t\t\t\t\tif (problem.type === 'RowValidationProblem') {\n\t\t\t\t\t\tthis.hasRowValidationProblem = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.isPolling && this.job.status === 'RUNNING') {\n\t\t\t\tthis.startPolling();\n\t\t\t}\n\t\t\telse if (this.isPolling && this.job.status != 'RUNNING') {\n\t\t\t\tthis.stopPolling();\n\t\t\t}\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tstopPolling(): void {\n\t\tif (this.isPolling && this.pollingData != null) {\n\t\t\tthis.pollingData.unsubscribe();\n\t\t}\n\t}\n\n\tstartPolling(): void {\n\t\tthis.timeCounter = 0;\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.timeCounter++\n\n\t\t\tif (this.timeCounter >= 2) {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t\t\tthis.timeCounter = 0;\n\t\t\t}\n\t\t});\n\n\t\tthis.isPolling = true;\n\t}\n\n\tonViewAllActiveJobs(): void {\n\n\t}\n\n\tonViewAllCompleteJobs(): void {\n\n\t}\n\n\ttoggleAll(): void {\n\t\tthis.allSelected = !this.allSelected;\n\n\t\tthis.job.importErrors.results.forEach(row => {\n\t\t\trow.selected = this.allSelected;\n\t\t})\n\t}\n\n\tonReuploadAndResume(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.job = this.job;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t});\n\t}\n\n\tonResolveScheduledJob(historyId: string): void {\n\t\tif (this.page.results.length == 0) {\n\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs']);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\n\t\t\tif (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\n\t\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\t}\n\n\tonCancelScheduledJob(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(this.job.configuration).then(response => {\n\t\t\t\t//this.bsModalRef.hide()\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tconsole.log(\"Encountered error\", err);\n\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ParentReferenceProblemWidgetComponent } from './parent-reference-problem-widget.component'\nimport { TermReferenceProblemWidgetComponent } from './term-reference-problem-widget.component'\nimport { RowValidationProblemWidgetComponent } from './row-validation-problem-widget.component'\n\nimport { GeoObjectType, MasterList, ScheduledJob, ScheduledJobOverview } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\n\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'job-conflict-modal',\n    templateUrl: './job-conflict-modal.component.html',\n    styleUrls: []\n} )\nexport class JobConflictModalComponent implements OnInit {\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n    \n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) {\n      this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n      \n    }\n    \n    onProblemResolvedListener(problem: any): void {\n      this.onConflictAction.next({action:\"RESOLVED\", data: problem});\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GeoObjectType, MasterList, ScheduledJob, ImportError } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'import-problem-widget',\n    templateUrl: './import-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ImportProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        } );\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId( null );\n        editModal.content.setOnSuccessCallback(() => {\n\n          this.onProblemResolved.emit(this.problem);\n          this.bsModalRef.hide()\n            \n        } );\n    }\n\n    getFriendlyProblemType(probType: string): string {\n\n        if(probType === \"net.geoprism.registry.io.ParentCodeException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.PostalCodeLocationException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.AmbiguousParentException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.multi.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.InvalidGeometryException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.invalid.geom.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.DataNotFoundException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.required.value.lookup\" );\n        }\n        \n        if(\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.permission\" );\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if(\n          probType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.duplicate.data.lookup\" );\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'parent-reference-problem-widget',\n    templateUrl: './parent-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'term-reference-problem-widget',\n    templateUrl: './term-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( conflict: any ): Observable<any> {\n        return Observable.create(( observer: any ) => {\n            this.iService.getTermSuggestions( conflict.mdAttributeId, this.searchLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n    \n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        classifierId: this.termId,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'row-validation-problem-widget',\n    templateUrl: './row-validation-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class RowValidationProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    formatAffectedRows(rows: string)\n    {\n      return rows.replace(/,/g, \", \");\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { ModalTypes } from '../../../../shared/model/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService } from '../../../../shared/service/event.service'\nimport { ScheduledJob } from '../../../model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: ['../../../../shared/component/modals/modal.css']\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    console.log(\"ERROR\", err);\n  \n    // Handle error\n    if ( err !== null ) {\n      this.error = ( err.error.localizedMessage || err.error.message || err.message );\n    }\n  }\n}\n","<div class=\"modal-body\">\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <span *ngIf=\"errorMessage\">{{errorMessage}}</span>\n\n  <span>{{message}}</span>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input, Output } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { TaskService } from '../../service/task.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { GeoObjectType, GeoObjectOverTime, Task, PaginationPage } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'task-viewer',\n    templateUrl: './task-viewer.component.html',\n    styleUrls: ['./task-viewer.component.css'],\n    providers: [DatePipe]\n} )\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    completedTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    message: string;\n    \n    isViewAllOpen: boolean = false;\n    \n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n    \n    pollingData: any;\n\n    constructor( private registryService: RegistryService,\n                 private taskService: TaskService,\n                 private localizeService: LocalizationService,\n                 private date: DatePipe,\n                 private toEpochDateTimePipe: ToEpochDateTimePipe,\n                 private authService: AuthService\n      ) {\n      //const day = this.forDate.getUTCDate();\n      //this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n      this.onInProgressTasksPageChange( 1 );\n      \n      ////\n      //\n      // We don't need polling on this page. It's better to save bandwidth for low resource environments.\n      //\n      ////\n\n      // this.pollingData = Observable.interval(1000).subscribe(() => {\n      //   this.activeTimeCounter++\n      //   this.completeTimeCounter++\n      \n      //   if (this.isViewAllOpen)\n      //   {\n      //     if (this.activeTimeCounter >= 4)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //     if (this.completeTimeCounter >= 7)\n      //     {\n      //       this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            \n      //       this.completeTimeCounter = 0;\n      //     }\n      //   }\n      //   else\n      //   {\n      //     if (this.activeTimeCounter >= 2)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //   }\n      // });\n    }\n    \n    upper(str: string): string {\n      if (str != null)\n      {\n        return str.toUpperCase();\n      }\n      else\n      {\n        return \"\";\n      }\n    }\n    \n    onInProgressTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.inProgressTasks.pageSize, 'UNRESOLVED').then( page => {\n        this.inProgressTasks = page;\n      } );\n    }\n    \n    onCompletedTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.completedTasks.pageSize, 'RESOLVED').then( page => {\n        this.completedTasks = page;\n      } );\n    }\n    \n    onCompleteTask(task: any): void {\n      // this.isViewAllOpen = true;\n    \n      this.taskService.completeTask(task.id).then( () => {\n        this.inProgressTasks.results.splice(this.inProgressTasks.results.indexOf(task), 1);\n        this.completedTasks.results.push(task);\n        // this.onCompletedTasksPageChange(1);\n      } );\n    }\n    \n    onMoveTaskToInProgress(task: any): void {\n      this.isViewAllOpen = true;\n    \n      this.taskService.setTaskStatus(task.id, 'UNRESOLVED').then( () => {\n        this.completedTasks.results.splice(this.completedTasks.results.indexOf(task), 1);\n        this.inProgressTasks.results.push(task);\n        this.onInProgressTasksPageChange(1);\n      } );\n    }\n    \n    onViewAllCompletedTasks(): void {\n      this.isViewAllOpen = true;\n      \n      this.onCompletedTasksPageChange(1);\n    }\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n  \n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span>{{task.createDate}}</span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span style=\"margin-right:30px;\">{{task.createDate}}</span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label><span>{{task.completedDate}}</span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { PageResult } from '../../../shared/model/core'\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ModalTypes } from '../../../shared/model/modal';\n\nimport { SynchronizationConfig } from '../../model/registry';\nimport { SynchronizationConfigModalComponent } from './synchronization-config-modal.component';\nimport { SynchronizationConfigService } from '../../service/synchronization-config.service';\n\n@Component({\n\tselector: 'synchronization-config-manager',\n\ttemplateUrl: './synchronization-config-manager.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\tmessage: string = null;\n\n\tpage: PageResult<SynchronizationConfig> = {\n\t\tresultSet: [],\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 20\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.onPageChange(1);\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.service.getPage(pageNumber, this.page.pageSize).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcreate(): void {\n\t\tthis.service.edit(null).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(null, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonEdit(config: SynchronizationConfig): void {\n\n\t\tthis.service.edit(config.oid).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(response.config, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonRemove(config: SynchronizationConfig): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + ' [' + config.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(() => {\n\t\t\tthis.service.remove(config.oid).then(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tonView(config: SynchronizationConfig): void {\n\t\tthis.router.navigate(['/registry/synchronization-config/', config.oid])\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from '../../model/registry';\nimport { SynchronizationConfigService } from '../../service/synchronization-config.service';\nimport { RegistryService } from '../../service/registry.service';\n\n@Component({\n\tselector: 'synchronization-config-modal',\n\ttemplateUrl: './synchronization-config-modal.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit {\n\tmessage: string = null;\n\n\tconfig: SynchronizationConfig = {\n\t\torganization: null,\n\t\tsystem: null,\n\t\thierarchy: null,\n\t\tlabel: this.lService.create(),\n\t\tconfiguration: {}\n\t};\n\n\torganizations: OrgSyncInfo[] = [];\n\n\tcOrg: OrgSyncInfo = null;\n\tcSystem: { label: string, oid: string, type: string } = null;\n\n\ttypes: GeoObjectType[] = [];\n\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonSuccess: Subject<SynchronizationConfig>;\n\n\n\tconstructor(private service: SynchronizationConfigService, private registryService: RegistryService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tinit(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n\n\t\tthis.organizations = organizations;\n\n\t\tif (config != null) {\n\t\t\tthis.config = config;\n\n\t\t\tlet oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\t\tif (oIndex !== -1) {\n\t\t\t\tthis.cOrg = this.organizations[oIndex];\n\t\t\t}\n\n\t\t\tlet sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\t\tif (sIndex !== -1) {\n\t\t\t\tthis.cSystem = this.cOrg.systems[sIndex];\n\t\t\t}\n\n\t\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t\t// Get the types\t\n\t\t\t\tthis.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t\t\tthis.types = types;\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t}\n\n\tonOrganizationSelected(): void {\n\t\tlet index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cOrg = this.organizations[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cOrg = null;\n\t\t\tthis.cSystem = null;\n\t\t}\n\t}\n\n\tonChange(): void {\n\t\tlet index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cSystem = this.cOrg.systems[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cSystem = null;\n\t\t}\n\n\n\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t// Get the types\t\n\t\t\tthis.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t\tthis.types = types;\n\t\t\t});\n\n\t\t\tif (this.config.configuration['levels'] == null) {\n\t\t\t\tthis.config.configuration['levels'] = [{\n\t\t\t\t\ttype: null,\n\t\t\t\t\tgeoObjectType: null\n\t\t\t\t}];\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tthis.types = [];\n\t\t}\n\t}\n\n\taddLevel(): void {\n\t\tthis.config.configuration['levels'].push({\n\t\t\ttype: null,\n\t\t\tgeoObjectType: null\n\t\t});\n\t}\n\n\tremoveLevel(index: number): void {\n\t\tif (index < this.config.configuration['levels'].length) {\n\t\t\tthis.config.configuration['levels'].splice(index, 1);\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.apply(this.config).then(cfg => {\n\n\t\t\tthis.onSuccess.next(cfg);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcancel(): void {\n\n\t\tif (this.config.oid != null) {\n\t\t\tthis.service.unlock(this.config.oid).then(() => {\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef.hide();\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> ({{localeValue.locale}})\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.hierarchy\" name=\"hierarchy\" [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"config.hierarchy != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChange()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"row-holder\" *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.units\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n              <thead>\n                <tr>\n                  <th>Label</th>\n                  <th>\n                    <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                  </th>\n                  <th>\n                    <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                  </th>\n                  <th style=\"text-align: center;\">\n                    <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                  <td>\n                    <label style=\"padding: 10px 0; margin: 0;\">Level {{i + 1}}</label>\n                  </td>\n                  <td>\n                    <select type=\"text\" [(ngModel)]=\"level.geoObjectType\" [name]=\"'geoObjectType' + i\" required>\n                      <option></option>\n                      <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                    </select>\n                  </td>\n                  <td>\n                    <select type=\"text\" [(ngModel)]=\"level.type\" [name]=\"'type' + i\" required>\n                      <option></option>\n                      <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                      <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                      <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                    </select>\n                  </td>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-trash-o ico-remove\" style=\"padding: 10px\" (click)=\"removeLevel(i)\" [title]=\"'button.delete.helptext' | localize\"></a>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          \n          </div>\n      </div>\n\n\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription, interval } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PageResult } from '../../../shared/model/core'\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { SynchronizationConfig, ExportScheduledJob } from '../../model/registry';\nimport { SynchronizationConfigService } from '../../service/synchronization-config.service';\n\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'synchronization-config',\n\ttemplateUrl: './synchronization-config.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\tmessage: string = null;\n\n\tconfig: SynchronizationConfig = null;\n\n\tpage: PageResult<ExportScheduledJob> = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresultSet: []\n\t};\n\n\tpollingData: Subscription;\n\n\tconstructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tthis.service.get(oid).then(config => {\n\t\t\tthis.config = config;\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tthis.pollingData = interval(10000).subscribe(() => {\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tonRun(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.run(this.config.oid).then(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tif (this.config != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n\n\t\t\t\tthis.formatStepConfig(response);\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tformatJobStatus(job: ExportScheduledJob) {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PageResult<ExportScheduledJob>): void {\n\n\t\tpage.resultSet.forEach((job: ExportScheduledJob) => {\n\n\t\t\tjob.stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Queued\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Connecting\",\n\t\t\t\t\t\t\"status\": job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Export\",\n\t\t\t\t\t\t\"status\": job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ExportScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label> \n              <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i> \n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <form #myForm=\"ngForm\">\n                <div class=\"form-group text-right\" style=\"margin: 0;\">\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n                <h4>\n                    <localize key=\"synchronization.config.units\"></localize>\n                </h4>\n                <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>\n                          <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th>\n                          <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                        </th>\n                        <th style=\"text-align: right;\">\n                          <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\" >\n                        <td style=\"vertical-align: middle;\">\n                          <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                        </td>\n                        <td style=\"\">\n                          {{level.geoObjectType}}\n                        </td>\n                        <td style=\"text-align: right;\">\n                          <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                          <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                          <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                        </td>\n                      </tr>\n                    </tbody>\n                </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\" style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\" [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\" [routerLink]=\"'/registry/sync/details/' + job.historyId\" routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                           </div>\n                         </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { ScheduledJob } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\nimport { IOService } from '../../service/io.service';\n\nimport { interval } from 'rxjs';\n\n@Component({\n  selector: 'job',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.css']\n})\nexport class SyncDetailsComponent implements OnInit {\n  message: string = null;\n  job: ScheduledJob;\n  historyId: string = \"\";\n\n  page: any = {\n    count: 0,\n    pageNumber: 1,\n    pageSize: 10,\n    results: []\n  };\n\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n\n  constructor(public service: RegistryService,\n    private router: Router, private route: ActivatedRoute,\n    private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n    this.isAdmin = authService.isAdmin();\n    this.isMaintainer = this.isAdmin || authService.isMaintainer();\n    this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n  }\n\n  ngOnInit(): void {\n\n    this.historyId = this.route.snapshot.params[\"oid\"];\n\n    this.onPageChange(1);\n\n  }\n\n  ngOnDestroy() {\n  }\n\n  formatAffectedRows(rows: string) {\n    return rows.replace(/,/g, \", \");\n  }\n\n  formatValidationResolve(obj: any) {\n    return JSON.stringify(obj);\n  }\n\n  onPageChange(pageNumber: any): void {\n\n    this.message = null;\n\n    this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n\n      this.job = response;\n      \n      this.page = this.job.exportErrors;\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n\n  }\n\n  error(err: HttpErrorResponse): void {\n    console.log(\"Encountered error\", err);\n\n    // Handle error\n    if (err !== null) {\n      this.message = (err.error.localizedMessage || err.error.message || err.message);\n    }\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { GeoObjectOverTime, GeoObjectType } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-create-geo-object',\n    templateUrl: './detail.component.html',\n    styleUrls: ['./crtable-detail-create-geo-object.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    readOnly: boolean = true;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if ( this.isNew() ) {\n            this.preGeoObject = this.postGeoObject;\n        }\n\n        this.onSelect( this.action );\n    }\n\n    isNew(): boolean {\n        return ( this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\" );\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n        }\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSelect( action: AbstractAction ) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n            this.registryService.getGeoObjectOverTime( this.postGeoObject.attributes.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( \"Error\", err );\n                this.error( err );\n            } );\n        }\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( true );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( false );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading\">\n        <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <div>\n        <label class=\"detail-label\">GeoObjectType : </label>\n        <label class=\"detail-value\">{{action.geoObjectType.code}}</label>\n      </div>\n    \n      <div>\n        <localize key=\"changeOverTime.forDate\"></localize>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n        <!-- \n\t  <label class=\"detail-label\">Label : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.displayLabel\">\n\t  \n\t  <label class=\"detail-label\">Code : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.code\">\n\t  -->\n\n        <geoobject-shared-attribute-editor \n          #attributeEditor\n          *ngIf=\"preGeoObject\"\n          [readOnly]=\"readOnly\"\n          [geoObjectType]=\"geoObjectType\"\n          [postGeoObject]=\"postGeoObject\"\n          [preGeoObject]=\"preGeoObject\"\n          [forDate]=\"forDate\"\n          [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n<!-- \n\t      <geoobject-editor-map #geometryEditor *ngIf=\"this.preGeoObject != null && this.postGeoObject != null && this.geoObjectType.isGeometryEditable\" [readOnly]=\"readOnly || !geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [isNew]=\"isNew()\"></geoobject-editor-map>\n -->\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\n\nimport { AddChildAction } from '../../../../model/crtable';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-add-remove-child',\n    templateUrl: './detail.component.html',\n    styleUrls: []\n} )\nexport class AddRemoveChildDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: AddChildAction;\n\n    original: AddChildAction;\n\n    readOnly: boolean = true;\n\n\n    private bsModalRef: BsModalRef;\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.original = Object.assign( {}, this.action );\n    }\n\n    applyAction() {\n        this.changeRequestService.applyAction( this.action ).then( response => {\n            this.original = Object.assign( {}, this.action );\n\n            this.unlockAction();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n\n            this.action = this.original;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n\n    onSelect( action: AddChildAction ) {\n        this.action = action;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    <div class=\"detail-content\">\n\n        <label class=\"detail-label\">Child UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childId\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Child TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childTypeCode\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentId\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Hierarchy Code : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.hierarchyTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">\n            <localize key=\"change.request.status\"></localize> :\n        </label>\n        <select style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=action.approvalStatus   [disabled]=\"readOnly\">\n            <option value=\"REJECTED\">\n                <localize key=\"change.request.status.rejected\"></localize>\n            </option>\n            <option value=\"ACCEPTED\">\n                <localize key=\"change.request.status.accepted\"></localize>\n            </option>\n            <option value=\"PENDING\">\n                <localize key=\"change.request.status.pending\"></localize>\n            </option>\n        </select>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n        \n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n        \n    </div>\n</div>","import { GeoObjectOverTime, HierarchyOverTime } from './registry';\n\nexport class ChangeRequest {\n  oid: string;\n  createdBy: string;\n  createDate: Date;\n  approvalStatus: string;\n  statusCode: string;\n  total: number;\n  pending: number;\n}\n\nexport class AbstractAction {\n  approvalStatus: string;\n  createActionDate: Date;\n  label: string;\n  oid: string;\n  actionType: string;\n  actionLabel: string;\n}\n\nexport class UpdateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class AddChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyTypeCode: string;\n  contributorNotes: string;\n  maintainerNotes: string;\n}\n\nexport class RemoveChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyCode: string;\n}\n\nexport class GovernanceStatus {\n  key: string;\n  label: string;\n}\n\nexport class PageEvent {\n  type:string;\n  data:any;\n}\n\nexport class SetParentAction extends AbstractAction {\n  childCode: string;\n  childTypeCode: string;\n  json: HierarchyOverTime[];\n}\n\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { HierarchyOverTime } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'set-parent-detail',\n    templateUrl: './set-parent-detail.component.html',\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class SetParentDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    hierarchies: HierarchyOverTime[] = [];\n    readOnly: boolean = true;\n\n    bsModalRef: BsModalRef;\n    \n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;    \n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.hierarchies = this.action.json;\n\n        this.onSelect( this.action );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }    \n\n    onSelect( action: AbstractAction ) {\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n        <div>\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n        </div>    \n    \n        <cascading-geo-selector #parentSelector \n          [hierarchies]=\"this.hierarchies\"\n          [forDate]=\"this.forDate\">\n        </cascading-geo-selector>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.status\"></localize> :\n            </label>\n            <select [disabled]=\"readOnly\" style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=\"action.approvalStatus\">\n                <option value=\"REJECTED\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </option>\n                <option value=\"ACCEPTED\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </option>\n                <option value=\"PENDING\">\n                    <localize key=\"change.request.status.pending\"></localize>\n                </option>\n            </select>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-export',\n    templateUrl: './data-export.component.html',\n    styleUrls: []\n} )\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n\n    constructor( private service: IOService, private modalService: BsModalService, private authService: AuthService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( false ).then( types => {\n        \n            //this.types = types;\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isOrganizationRA(types[i].orgCode))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.types = myOrgTypes;\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onChange( code: string ): void {\n\n        if ( code != null && code.length > 0 ) {\n            this.service.getHierarchiesForType( code, false ).then( hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n\n    }\n\n    onExport(): void {\n\n        if ( this.format == 'SHAPEFILE' ) {\n            window.location.href = acp + '/shapefile/export-shapefile?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n        else if ( this.format == 'EXCEL' ) {\n            window.location.href = acp + '/excel/export-spreadsheet?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { HierarchyNode } from '../model/hierarchy';\nimport { GeoObjectType } from '../model/registry';\n\n@Pipe({\n  name: 'geoobjecttype',\n  pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n  transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n\t  if (!items || !filter) {\n          return items;\n      }\n\t  \n\t  let unassignedGeoObjTypes:string[] = [];\n      this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n      \n      // filter items array, items which match and return true will be\n      // kept, false will be filtered out\n      return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n  }\n  \n  buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void{\n\t  filter.forEach(f => {\n\t\t  this.processHierarchyNodes(f, unassignedGeoObjTypes);\n\t  })\n  }\n  \n  processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]){\n\t  unassignedGeoObjTypes.push(node.geoObjectType)\n\t  \n\t  node.children.forEach(child => {\n\t\t  this.processHierarchyNodes(child, unassignedGeoObjTypes);\n\t  })\n  }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '../../shared/service/event.service';\n\nimport { AllLocaleInfo } from '../model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor( private http: HttpClient ) {\r\n        ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n    }\r\n\r\n    features(): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>( acp + '/project/features', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'hierarchies',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'data',\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'change-requests',\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-lists',\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'scheduled-jobs',\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'job/:oid',\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'master-list/:oid/:published',\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'master-list-view/:oid',\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'change-request',\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'tasks',\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'synchronization-configs',\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'synchronization-config/:oid',\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'sync/details/:oid',\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class RegistryRoutingModule { }"],"sourceRoot":""}