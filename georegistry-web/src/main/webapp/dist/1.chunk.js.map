{"version":3,"sources":["webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/service/list-type.service.ts","webpack:///./src/app/registry/service/registry-cache.service.ts","webpack:///./src/app/registry/service/geometry.service.ts","webpack:///./src/app/registry/service/business-type.service.ts","webpack:///./src/app/registry/service/layer-data-source.ts","webpack:///./src/app/registry/service/classification.service.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/relationship-visualization.service.ts","webpack:///./src/app/registry/service/classification-type.service.ts","webpack:///./src/app/shared/component/web-sockets/web-sockets.ts","webpack:///./src/app/registry/service/transition-event.service.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/service/location-manager.service.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field.component.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-editor.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/model/list-type.ts","webpack:///./src/app/registry/component/list-type/export-format-modal.component.ts","webpack:///./src/app/registry/component/list-type/export-format-modal.component.html","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/model/location-manager.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/service/business-object.service.ts","webpack:///./src/app/registry/component/list-type/publish-modal.component.ts","webpack:///./src/app/registry/component/list-type/publish-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/location-manager/layer-group.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field-modal.component.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-visualizer.component.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-visualizer.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-change-over-time-attribute-editor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.ts","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.html","webpack:///./src/app/registry/component/location-manager/feature-panel.component.ts","webpack:///./src/app/registry/component/location-manager/feature-panel.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.html","webpack:///./src/app/registry/component/business-type/business-type-manager.component.ts","webpack:///./src/app/registry/component/business-type/business-type-manager.component.html","webpack:///./src/app/registry/component/business-type/modals/create-business-type-modal.component.ts","webpack:///./src/app/registry/component/business-type/modals/create-business-type-modal.component.html","webpack:///./src/app/registry/component/business-type/modals/manage-business-type-modal.component.ts","webpack:///./src/app/registry/component/business-type/modals/manage-business-type-modal.component.html","webpack:///./src/app/registry/component/business-table/business-table.component.ts","webpack:///./src/app/registry/component/business-table/business-table.component.html","webpack:///./src/app/registry/component/business-importer/business-importer.component.ts","webpack:///./src/app/registry/component/business-importer/business-importer.component.html","webpack:///./src/app/registry/component/historical-report/historical-report.component.ts","webpack:///./src/app/registry/component/historical-report/historical-report.component.html","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.ts","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.html","webpack:///./src/app/registry/component/list-type/list-type-manager.component.ts","webpack:///./src/app/registry/component/list-type/list-type-manager.component.html","webpack:///./src/app/registry/component/list-type/lists-for-type.component.ts","webpack:///./src/app/registry/component/list-type/lists-for-type.component.html","webpack:///./src/app/registry/component/list-type/list-type.component.ts","webpack:///./src/app/registry/component/list-type/list-type.component.html","webpack:///./src/app/registry/component/list-type/publish-version.component.ts","webpack:///./src/app/registry/component/list-type/publish-version.component.html","webpack:///./src/app/registry/component/list-type/list.component.ts","webpack:///./src/app/registry/component/list-type/list.component.html","webpack:///./src/app/registry/component/curation/curation-job.component.ts","webpack:///./src/app/registry/component/curation/curation-job.component.html","webpack:///./src/app/registry/component/classification-type/classification-type-manager.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type-manager.component.html","webpack:///./src/app/registry/component/classification-type/classification-type-publish-modal.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type-publish-modal.component.html","webpack:///./src/app/registry/component/classification-type/classification-type.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type.component.html","webpack:///./src/app/registry/component/classification-type/classification-publish-modal.component.ts","webpack:///./src/app/registry/component/classification-type/classification-publish-modal.component.html","webpack:///./src/app/registry/service/layer-diffing-strategy.ts","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-viz-layout.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/HierarchyCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/StandardAttributeCRModel.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-model.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.ts","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/location-manager/layer-panel.component.ts","webpack:///./src/app/registry/component/location-manager/layer-panel.component.html","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.ts","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts","webpack:///./src/app/registry/model/classification-type.ts","webpack:///./src/app/registry/component/location-manager/record-panel.component.ts","webpack:///./src/app/registry/component/location-manager/record-panel.component.html","webpack:///./src/app/registry/component/location-manager/record-popup.component.ts","webpack:///./src/app/registry/component/location-manager/record-popup.component.html","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.ts","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.html","webpack:///./src/app/registry/component/location-manager/business-object-panel.component.ts","webpack:///./src/app/registry/component/location-manager/business-object-panel.component.html","webpack:///./src/app/registry/model/business-type.ts","webpack:///./src/app/registry/component/location-manager/list-modal.component.ts","webpack:///./src/app/registry/component/location-manager/list-modal.component.html","webpack:///./src/app/registry/component/location-manager/list-panel.component.ts","webpack:///./src/app/registry/component/location-manager/list-panel.component.html","webpack:///./src/app/registry/component/location-manager/list-row.component.ts","webpack:///./src/app/registry/component/location-manager/list-row.component.html","webpack:///./src/app/registry/registry.module.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","services","ChangeRequestService","HierarchyService","IOService","LocalizationManagerService","MapService","RegistryService","SynchronizationConfigService","TaskService","GeometryService","http","eventService","listForType","typeCode","params","HttpParams","set","this","start","get","registry","contextPath","pipe","finalize","complete","toPromise","entries","oid","versions","getVersion","fetchVersionsAsListVersion","oids","join","apply","list","headers","HttpHeaders","post","JSON","stringify","createEntries","remove","createVersion","entry","metadata","applyVersion","removeVersion","page","criteria","pageConfig","showInvalid","record","uid","showOverlay","values","value","attributeName","filters","length","publishList","getAllLists","getPublicVersions","append","getGeospatialVersions","startDate","endDate","getBounds","getCurationInfo","version","onlyUnresolved","pageNumber","pageSize","curation","curationId","toString","getCurationPage","createCurationJob","listTypeVersionId","submitErrorResolve","config","setResolution","problem","resolution","problemId","getJob","historyOid","ListTypeService","Injectable","service","subscription","typeCache","GeoObjectTypeCache","baseUrl","WebSockets","buildBaseUrl","notifier","webSocket","subscribe","message","type","refresh","getTypeCache","RegistryCacheService","OLD_LAYER_COLOR","NEW_LAYER_COLOR","SELECTED_COLOR","route","router","registryService","relVizService","mapService","listService","localService","layers","currentMapState","editingControl","simpleEditControl","_zoomOnReady","isZooming","geometryChange","EventEmitter","layersChange","syncWithUrlParams","state","attrPanelOpen","dataSourceFactory","DataSourceFactory","layerSorter","LayerGroupSorter","syncMapState","debounce","_syncMapState","stateChange$","setState","_setState","initialize","geometryType","urlSub","queryParams","urlParams","newState","parse","graphPanelOpen","undefined","stateChange","err","console","log","on","saveEdits","window","onbeforeunload","destroy","ngOnDestroy","unsubscribe","serializeLayers","newLayers","sorted","sortLayers","serialized","deserializeLayers","layerState","getState","pushBackHistory","assign","navigate","relativeTo","queryParamsHandling","replaceUrl","deserializedLayers","oldLayers","deserialized","LayerDiffingStrategy","getDiffs","emit","getLayers","diffs","fullRebuild","filter","diff","prevLayer","newLayerIndex","i","mapboxMapLayer","mapboxUnmapLayer","oldLayer","layer","getLayer","getId","moveLayer","newLayerDiff","removeLayerDiff","newLayer","oldLayerIndex","rendered","mapboxShowLayer","mapboxHideLayer","unmapAllLayers","mapAllLayers","layerId","layerIndex","findIndex","l","zoomToLayer","splice","indexOf","dumpLayers","isMapZooming","refreshDatasets","otherLayer","forEach","dataSource","getDataSourceType","setLayers","zoomOnReady","push","then","bounds","zoomConfig","calculateZoomConfig","fitBounds","setTimeout","padding","top","bottom","left","right","animate","maxDuration","maxZoom","Math","round","innerWidth","text","layersPanelSize","Number","parseInt","PANEL_SIZE_STATE","WINDOWED","FULLSCREEN","setGeometryType","getLayerFromMapboxLayer","mapboxLayer","endsWith","substring","destroyMap","removeControl","GeoJsonLayer","editing","editingLayer","getMap","getDataSourceFactory","setDataSourceFactory","fac","registerDataSource","unregisterDataSource","dataSourceType","startEditing","isEditing","stopEditing","readOnly","enableEditing","addEditingLayers","rerender","deleteAll","setPointCoordinates","lat","long","features","properties","geometry","coordinates","changeMode","featureIds","isValid","getAll","geoJson","getDrawGeometry","setLayerData","reload","setEditing","addOrUpdateLayer","orderingIndex","existingIndex","findLayer","removeLayer","removeLayers","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","userProperties","styles","paint","getSource","addControl","getLayerData","data","add","getMapboxLayerIdsForLayer","removeSource","len","setLayoutProperty","mapboxSource","buildMapboxSource","addSource","GeoJsonLayerDataSource","geojson","setData","getGeometryType","mapboxMapLayerAsType","labelConfig","source","layout","visibility","configureMapboxLayer","addLayer","layerConfig","getLayerIdGeomTypePostfix","color","featureCollection","polygons","feature","j","points","lines","createEmptyGeometryValue","upperType","toUpperCase","zoomToLayersExtent","geoJsonLayer","coords","LngLatBounds","coord","extend","center","getCenter","pt","LngLat","lng","flyTo","zoom","essential","polys","subpoly","subline","Output","getByOrganization","edit","unlock","addAttributeType","attribute","attributeType","updateAttributeType","deleteAttributeType","BusinessTypeService","createLayer","legendLabel","Layer","fromJSON","obj","toJSON","LayerDataSource","pinned","getKey","getPinned","setPinned","layerType","GEO_OBJECT_DATA_SOURCE_TYPE","date","getCode","setCode","getTypeCode","setTypeCode","getDate","setDate","getGeoObjectBoundsAtDate","Array","isArray","GeoObjectLayerDataSource","LIST_VECTOR_SOURCE_TYPE","versionId","getVersionId","ListVectorLayer","tiles","location","protocol","host","encodeURIComponent","promoteId","objectFilter","getObjectFilter","ListVectorLayerDataSource","navigator","language","toLowerCase","setObjectFilter","CHANGE_REQUEST_SOURCE_TYPE_NEW","CHANGE_REQUEST_SOURCE_TYPE_OLD","newOrOld","votEditor","Promise","reject","oldValue","changeRequestAttributeEditor","changeRequestEditor","geoObjectType","ValueOverTimeDataSource","SEARCH_DATASOURCE_TYPE","getText","search","SearchLayerDataSource","RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE","vizService","geomService","relationshipType","relationshipCode","sourceObject","RelationshipVisualizionLayer","getRelationshipType","getRelationshipCode","getSourceObject","hasSameSourceObject","sourceObj","objectType","dataPromise","treeAsGeoJson","getBoundsAsWKT","wktBounds","mapBounds","convertBoundsToWKT","se","getSouthEast","sw","getSouthWest","nw","getNorthWest","ne","getNorthEast","getRelatedTypeFilter","RelationshipVisualizionDataSource","relatedTypeFilter","setRelatedTypeFilter","dataSources","getRegisteredDataSource","dataSourceId","newDataSourceFromType","deserializeDataSource","serializeDataSource","deserializeLayer","sl","ds","serializeLayer","sds","ret","serializedLayer","classificationCode","parentCode","classification","isNew","move","getChildren","getAncestorTree","rootCode","ClassificationService","SummaryKey","Document","Geometry","ValueOverTimeDiff","AbstractAction","actionType","ActionTypes","CREATEGEOOBJECTACTION","CreateGeoObjectAction","UPDATEATTRIBUTETACTION","attributeDiff","valuesOverTime","UpdateAttributeOverTimeAction","UpdateAttributeAction","ChangeRequestCurrentObject","UpdateChangeRequestCurrentObject","getActionsForAttribute","cr","hierarchyCode","actions","newActions","action","updateAttrAction","ChangeRequest","GovernanceStatus","PageEvent","implementDecisions","request","update","setActionStatus","actionOid","status","getAllRequests","sort","rejectChangeRequest","delete","requestId","deleteFile","crOid","fileId","vfOid","init","getGeoObjectTypes","types","hierarchies","getParentGeoObjects","childCode","childTypeCode","parentTypes","recursive","getChildGeoObjects","parentTypeCode","childrenTypes","doesGeoObjectExistAtRange","newGeoObjectInstance","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","geoObjTypeId","addAttributeTermTypeOption","parentTermCode","term","termJSON","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","termCode","getGeoObject","getGeoObjectBounds","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestions","parent","hierarchy","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","historyId","getExportDetails","resolveScheduledJob","submitValidationResolve","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","applyGeoObjectEdit","masterListId","notes","applyGeoObjectCreate","parentTreeNode","geoObject","prop","attributes","attr","val","Date","getTime","progress","getDatasetBounds","getOrganizations","tree","graphTypeCode","sourceVertex","boundsWKT","relationships","RelationshipVisualizationService","classificationType","ClassificationTypeService","hostname","port","getPage","attrConditions","getDetails","event","eventId","getHistoricalReport","TransitionEventService","key","disabled","inlinelayout","valueChange","LocalizedTextComponent","Component","selector","templateUrl","styleUrls","Input","ImportSheet","Location","Term","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","LocalizedInputComponent","mapboxgl","accessToken","mapboxAccessToken","roots","cdr","excludeDescription","attributeChange","classifications","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","changes","resultSet","handleOnSubmit","toggleIsUnique","unique","onAnimationDone","label","localeValues","precision","scale","AttributeInputComponent","trigger","style","opacity","transition","animations","cacheService","dateService","listTypeService","selectListRecord","recordType","geo","geoObjectFromRecord","addLayerForGeoObject","zoomLayer","displayLabel","localizedValue","displayLabelDefaultLocale","addLayerForList","forDate","clearListRecord","ColorGen","hexString","getTypeByCode","typeLabel","formatDateForDisplay","LocationManagerStateService","TREE_SCALE_FACTOR_X","TREE_SCALE_FACTOR_Y","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","hierarchyService","modalService","contextMenuService","localizeService","authService","userOrganization","currentHierarchy","instance","geoObjectTypes","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","isSRA","options","displayField","actionMapping","mouse","click","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","nativeElement","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","localize","decode","renderTree","rootGeoObjectTypes","d3","select","isOrganizationRA","organizationCode","got","canDrag","overflowDiv","scrollLeft","scrollRight","svg","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","calculateCanDrag","getBBox","x","y","width","height","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","superTypeCode","calculateRelatedHierarchies","relatedHiers","hierarchyType","descendants","find","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","addChild","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","isPointWithin","dropZoneBbox","activeDropZones","gotRectW","gotRectH","clearGhostNodes","isDragGroup","classed","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","dropElY","childW","childH","dzg","dropTargetHasChildren","children","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","insertBetweenTypes","ghostNode","drag","rect","getBoundingClientRect","selThis","target","document","elementFromPoint","selectAll","each","sidebarDragHandler","registerSvgHandlers","startPoint","svgGot","getPos","setPos","split","svgDragHandler","findHierarchyByCode","ht","findOrganizationByCode","organizations","org","parentGeoObjectTypeCode","childGeoObjectTypeCode","addChildToHierarchy","index","relatedHierarchies","refreshPrimaryHierarchy","catch","error","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","isRA","orgCode","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","response","setLocales","locales","setGeoObjectTypes","getMyOrganizations","arrayMove","pos","getGeoObjectTypePosition","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","a","b","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","h","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","gOT","show","next","childType","nodeMenuComponent","leafMenuComponent","item","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","bsModalRef","CreateHierarchyTypeModalComponent","animated","backdrop","ignoreBackdropClick","class","content","onHierarchytTypeCreate","nameA","nameB","deleteHierarchyType","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","description","acknowledgement","disclaimer","useConstraints","accessConstraints","contact","phoneNumber","email","isPrimaryHierarchy","groupSuperType","CreateGeoObjTypeModalComponent","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","ManageGeoObjectTypeModalComponent","onGeoObjectTypeSubmitted","position","removeFromHierarchy","parentGotCode","gotCode","isActive","filtered","handleInheritHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","setInheritedHierarchy","handleUninheritHierarchy","removeInheritedHierarchy","importTypes","ImportTypesModalComponent","onNodeChange","ErrorHandler","showErrorAsDialog","HierarchyComponent","ViewChild","static","customStyles","classNames","container","loading","typeahead","Observable","observer","results","typeaheadOnSelect","match","setValue","onViewTree","ClassificationFieldModalComponent","onTextChange","ClassificationFieldComponent","name","bbox","fontSize","svgSelector","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","lService","postGeoObject","showAllInstances","tabIndex","attributeExcludes","isGeometryInlined","modifiedTermOption","currentTermOption","requestedDate","datasetId","geoObjectAttributeExcludes","showStabilityPeriods","handleStateChange","geometryAttributeType","getAttribute","AttributeType","LocalizedValue","parentAttributeType","changeRequest","createNewChangeRequest","ChangeRequestEditor","shouldForceSetExist","changePage","current","isGeoObjectTypeOrSuperRM","isGeoObjectTypeOrSuperRC","getChangeRequestEditor","approvalStatus","createAction","geoObjectJson","parentJson","nextPage","hasChanges","hasErrors","attributeEditors","getEditors","filteredEditors","editor","getEditorForAttribute","invalid","existsAttribute","GeoObjectType","existsEditor","prototype","hasOwnProperty","call","allValid","att","validate","getActions","GeoObjectSharedAttributeEditorComponent","ManageVersionsComponent","DatePipe","providers","attributeForm","manageVersions","ViewChildren","localizationService","onChangeSubject","Subject","generateAttributeEditors","editors","attrs","slice","isChangeOverTime","ChangeRequestChangeOverTimeAttributeEditor","StandardAttributeCRModel","attributeEditor","_isValid","skipExists","findExistingValueOverTimeByOid","attributeCode","vot","findEditorForValueOverTime","getEditor","onChange","existsAtDate","existEditors","valLen","isDelete","between","isNewGeoObject","submitFunction","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","dateStr","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","GeoObjectOverTime","configureFromImportError","importError","object","parents","importErrorId","configureAsExisting","fetchGeoObject","fetchHierarchies","typeTypeCode","getTypeAheadObservable","create","ptn","canSubmit","cancel","hide","submit","GeoObjectEditorComponent","VersionMetadata","ListVersionMetadata","ListColumn","ListTypeVersion","ListTypeEntry","ListMetadata","ListType","ListTypeByType","versionNumber","ContextLayer","ListVersion","ContextList","ListTypeGroup","ListOrgGroup","LayerRecord","CurationProblem","CurationJob","ListData","onFormat","confirm","format","actualGeometryType","ExportFormatModalComponent","getHierarchyTypes","getHierarchyGroupedTypes","createHierarchyType","htJSON","updateHierarchyType","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","includeChild","getHierarchiesForType","includeTypes","getHierarchiesForSubtypes","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","removeTerm","getNewLocaleInfo","installLocale","country","variant","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","run","getJobs","getFhirExportImplementations","getFhirImportImplementations","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","LocationInformation","ModalState","MINIMIZED","modalStepIndicatorService","geoObjectTypeChange","newAttribute","modalStepConfig","steps","active","enabled","modalState","GeoObjectTypeModalStates","defineAttribute","termOption","setAttribute","setStepConfig","attributeInputComponent","AttributeTermType","AttributeDecimalType","isFormValid","isAttrValid","getMessageFromError","DefineAttributeModalContentComponent","editAttribute","onModalStateChange","back","EditAttributeModalContentComponent","enableTermOptionForm","replace","addTermOption","rootTerm","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","openAddTermOptionForm","close","ManageTermOptionsComponent","t","manageTermOption","EditTermOptionInputComponent","configurationChange","onNext","onCancel","AttributesPageComponent","property","locations","onBack","LocationPageComponent","hasProblems","locationProblems","resolved","handleError","exclusions","exclusion","LocationProblemPageComponent","termProblems","TermProblemPageComponent","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","SpreadsheetModalComponent","changeDetectorRef","requestService","elementRef","currentDate","isValidChange","readonly","filterDate","viewModels","isRootOfHierarchy","isInitialized","calculateViewModels","layerChangeSub","view","syncLayerReferences","stateSub","onAddNewVersion","previousValue","currentValue","vm","objectLayer","checkDateFieldValidity","dateFields","dateFieldComponentsArray","toArray","valid","hasLocalizationChanged","viewModel","locale","getValueAtLocale","onDateChange","summaryKey","NEW","v","original","createNewVersion","VersionDiffView","lv","getValue","getGeoObjectTypeTermAttributeOptions","termAttributeCode","indexOL","keyEL","indexEL","keyOLD","indexOLD","onApprove","editAction","ACCEPTED","onReject","REJECTED","onPending","PENDING","pType","loopI","goCode","ancestors","p","ancestor","setParentValue","toggleGeometryEditing","coordinate","toggleGeometryView","mapRowHeight","getElementsByClassName","offsetHeight","toggleOldGeometryView","manualCoordinateChange","newCoordinateX","newCoordinateY","newX","newY","num","latValid","isFinite","abs","longValid","isLongitude","provide","ControlContainer","useExisting","NgForm","viewProviders","changeRequestService","geoObjectId","reason","waitOnTypes","myOrgTypes","isGeoObjectTypeRC","handleDateChange","onValidChange","newValid","geometryEditor","getIsValid","changeTypeaheadLoading","onNewChangeRequest","SubmitChangeRequestComponent","_stepConfig","StepIndicatorComponent","businessTypeCode","getTypeAndObject","BusinessObjectService","iService","onListTypeChange","tab","gap","listByType","write","cache","listType","organization","floor","random","subtypeHierarchies","listMetadata","originator","collectionDate","process","acknowledgements","contactName","telephoneNumber","geospatialMetadata","topicCategories","placeKeywords","updateFrequency","lineage","languages","scaleResolution","spatialRepresentation","referenceSystem","reportSpecification","distributionFormat","includeLatLong","intervalJson","interval","PRESENT","getIsDisabled","elClasses","classList","onSubmit","getAttributeForFilter","onNewFilter","operation","removeFilter","onNewInterval","removeInterval","validOn","publishingStartDate","after","reduce","element","future","s1","e1","s2","e2","dateRangeOverlaps","hasGap","handleTab","ListTypePublishModalComponent","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","onErrorItem","onSelect","onClick","queue","uploadAll","auth","orgs","organizationLabel","getOrganizationLabelFromCode","getGroupName","groupName","setGroupName","getLabel","setLabel","LayerGroup","getLayerGroups","groups","g","group","isLeaf","isPrivate","toggleIsLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","onGeoObjectTypeChange","editGeoObjectType","fetchOrganizationLabel","defineAttributeModal","manageAttributes","removeAttributeType","GeoObjectTypeInputComponent","in","validator","c","geoObjectAttributeCode","GeoObjectAttributeCodeValidator","NG_VALIDATORS","multi","Directive","NodeType","nodes","idField","allowDrag","allowDrop","animateExpand","scrollOnActivate","animateSpeed","animateAcceleration","build","timeout","getNodeById","setActiveAndVisible","CLASSIFICATION","hasChildren","treeNode","createNodes","concat","ex","cNode","count","LINK","expand","TreeComponent","TermOptionWidgetComponent","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","hierarchyLabelW","hierarchyLabelH","headerFontSize","hierarchyLabelY","lineWidth","textWidth","html","d","headerGBbox","getRelatedHierarchies","nodeMouseover","nodeMousemove","nodeTooltipBbox","documentElement","scrollHeight","scrollWidth","nodeMouseleave","descends","insert","gtree","links","gHeader","gotHeaderW","MOUSE_HOVER_EVENT_ENTER","MOUSE_HOVER_EVENT_MOVE","MOUSE_HOVER_EVENT_EXIT","gotHeaderFontSize","arrowRectD","gArrow","gotBodyFontSize","gotOptionsButtonFontSize","renderRelatedHierarchiesMenu","DRAW_SCALE_MULTIPLIER","SELECTED_NODE_COLOR","GRAPH_GO_LABEL_COLOR","GRAPH_CIRCLE_FILL","GRAPH_LINE_COLOR","COLLAPSE_ANIMATION_TIME","DIMENSIONS","NODE","WIDTH","HEIGHT","LABEL","FONTSIZE","PADDING","BETWEEN_NODES","NODE_LABEL","NODE_EDGE","spinner","CONSTANTS","OVERLAY","OverlayerIdentifier","VISUALIZER_PANEL","ORIENTATION","Orientation","nodeSelect","svgHeight","svgWidth","panToNode$","update$","DagreNodesOnlyLayout","curve","shape","curveLinear","typeLegend","relationship","panelOpen","restrictToMapBounds","oldState","graphOid","rel","fetchRelationships","fetchData","resizeDimensions","graphContainer","getElementById","clientHeight","clientWidth","getHexagonPoints","relation","radius","n","angleDeg","angleRad","PI","cos","sin","onSelectRelationship","finally","calculateTypeLegend","relatedTypes","addLayers","relatedType","existingRelatedTypes","existingRelatedType","oldTypeLegend","collapseAnimation","activeEl","all","querySelectorAll","el","animateTransform","createElementNS","appendChild","beginElement","includeTransform","cloned","cloneNode","newParent","querySelector","onClickNode","selectAnimation","getLabelWidth","min","RelationshipVisualizerComponent","cancelText","ShapefileModalComponent","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","LocationProblemComponent","termLabel","termId","createOption","ignoreValue","TermProblemComponent","renderContent","pageTitle","DataPageComponent","sysService","showImportConfig","importStrategies","strategy","ImportStrategy","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","copyBlank","getExternalSystems","paginatedSystems","externalSystems","views","allHierarchyViews","allTypeViews","len0","len2","len9","view2","findType","findHier","filteredHierarchyViews","filteredTypeViews","getUrl","importStrategy","externalSystem","sys","onSelectHierarchy","onSelectType","checkDates","setImportSource","startDateField","field","inputName","setInvalid","DataImporterComponent","today","todayString","getDateString","objectKeys","requests","columns","filterCriteria","ascending","hasBaseDropZoneOver","sortable","snapshot","paramMap","toggleId","uploadRequest","doc","documents","isSorting","onSort","getGOTLabel","setValid","onUpload","onDownloadFile","fileOid","href","onDeleteFile","fileOverBase","pageChange","selected","onExecute","getFirstGeoObjectInActions","pageContext","onDelete","deletedRequestId","onUpdate","applyActionStatusProperties","decisionMaker","getUsername","requestTrackBy","toggle","replaceState","parentElement","className","includes","getActiveDetailComponent","isRequestTooOld","firstAction","UPDATEGEOOBJECTACTION","onEditAttributes","canEdit","permissions","RequestTableComponent","encapsulation","ViewEncapsulation","None","getEditAction","hierarchyEntry","generateEditors","validEditors","validateEditors","hasTimeConflict","checkRanges","hasExistConflict","checkExistRanges","matches","includeUnmodified","HierarchyCREditor","ValueOverTimeCREditor","valueOverTime","votDiff","createEmptyHierarchyEntry","hierarchyOverTime","ValueOverTime","constructNewDiff","terms","ChangeType","ADD","getGeoObjectTimeRangeStorage","getValueFromGeoObjectForDiff","conflictMessages","Set","validateDate","getDateFromDateString","end","validateUpdateReference","missingReference","getStartDate","setStartDate","newStartDate","oldStartDate","goRange","oldEndDate","getEndDate","newEndDate","removeEmptyDiff","END_DATE","START_DATE","newValue","parseFloat","toFixed","areValuesEqual","VALUE","setLocalizedValue","val1","val2","localeValue","lv2","lv1","updateAction","REMOVE","votc","buildDataSource","getDataSourceId","getDataSourceProviderId","_mapHeight","mapDiv","Map","initMap","NavigationControl","zoomToBbox","GeoObjectEditorMapComponent","mapHeight","bboxCode","bboxType","bboxDate","latestPeriodIsActive","periods","activeEntry","forDateEntry","infinityDayPadding","dataTimeSpan","_showHint","showHint","generate","calculateActiveTimelineEntry","timelines","timeline","period","setActiveTimelineEntry","forDateIndex","navigateRelative","amount","nextIndex","generatePeriods","generateTimelines","calculateDataTimeSpan","endDay","startDay","displayStartDate","displayEndDate","span","currentTimeline","timelineEntry","boundaries","startIndex","boundary","isStart","isEnd","endIndex","dlen","addDay","formatDate","StabilityPeriodComponent","context","calculateView","newVal","VALUE_CHANGE","summaryKeyLocalized","UNMODIFIED","onValueChange","StandardAttributeEditorComponent","transform","items","GeoObjectAttributeExcludesPipe","Pipe","pure","isContributorOnly","isContributerOnly","urlSubscriber","highlightOid","ChangeRequestPageComponent","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","order","jobPos","onViewAllCompleteJobs","onView","onCancelScheduledJob","jobId","onResolveScheduledJob","ScheduledJobsComponent","allSelected","timeCounter","isPolling","hasRowValidationProblem","onPageChange","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onEdit","JobConflictModalComponent","onConflictAction","importErrors","problems","exception","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","ReuploadModalComponent","JobComponent","onProblemResolvedListener","onEditGeoObject","editModal","ImportProblemWidgetComponent","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","title","warning","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onToggleCompletedTasks","TaskViewerComponent","rService","implementations","lists","reset","fieldChange","levels","level","onSelectMasterList","addLevel","removeLevel","FhirExportSynchronizationConfigComponent","DEFAULT_MAPPING_STRATEGY","cOrg","levelRows","orgUnitGroups","syncNonExistent","preferredLocale","levelRow","levelNum","isAttributeEditor","system","esConfig","clearMappingData","onChangeHierarchy","buildDefaultMappings","attributeMappingStrategy","cgrAttrName","dhis2Id","dhis2AttrName","lvl","mappings","orgUnitGroupId","onSelectLevelType","attrCfg","editorIndex","getEditorIndex","mapping","attrConfigInfos","info","cgrAttr","deleteMapping","addNewMapping","levelRowIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","attributeMappingStrategies","dhis2Attrs","dhis2Attr","onChangeDHIS2Attr","getMappingStrategy","isDifferentGot","infos","levelMapping","strategyHasTerms","mapCgrAttr","onChangeMappingStrategy","Dhis2SynchronizationConfigComponent","SynchronizationConfigModalComponent","onSuccess","onRemove","SynchronizationConfigManagerComponent","isImport","cSystem","oIndex","sIndex","systems","handleFieldChange","onOrganizationSelected","onChangeExternalSystem","implementation","FhirImportSynchronizationConfigComponent","onRun","onGenerateFile","open","stepLabel","SynchronizationConfigComponent","configService","configOid","exportErrors","SyncDetailsComponent","locationManagerService","businessObjectService","componentFactoryResolver","appRef","injector","pageMode","longitude","latitude","MODE","SEARCH","VIEW","SEARCH_OVERLAY","SEARCH_PANEL","isEdit","mode","showPanel","baseLayers","sprite","preventSingleClick","ready","searchEnabled","graphVisualizerEnabled","recordContext","windowWidth","windowHeight","innerHeight","isRC","isRM","initializeMap","resizeWindow","mapConfig","sources","mapbox","tileSize","glyphs","attributionControl","defaultMapBounds","logoPosition","updateState","onGraphNodeSelect","closeEditSessionSafeguard","mockGeo","selectGeoObject","dateFieldValue","searchFieldText","loadSearchFromState","loadGeoObjectFromState","businessObject","businessType","loadBusinessObjectFromState","recordUid","loadListRecordFromState","setPanel","convertMapBounds","resp","FEATURE_PANEL","resize","togglePanel","onModeChange","AttributionControl","compact","visualizePitch","handleMapClickEvent","array","onCreate","SelectTypeModalComponent","result","subsription","cancelEditingSession","resolver","rejecter","queryRenderedFeatures","onPanelCancel","clearRecord","onPanelSubmit","applyInfo","isChangeRequest","backReference","SuccessModalComponent","changeRequestId","handleBasemapStyle","baseLayer","setStyle","getGeoObjectTypeLabel","featurePanel","setEditMode","featurePanelForDateChange","onFeatureSelect","llb","toggleGraphPanel","convert","onViewList","onRowSelect","onListPanelClose","isAttributePanelOpen","LocationManagerComponent","HostListener","geometryService","VERSIONS","ATTRIBUTES","HIERARCHY","GEOMETRY","forDateChange","featureChange","modeChange","panelCancel","panelSubmit","updateCode","preGeoObject","editorForDateChange","onCancelInternal","trim","onManageAttributeVersion","onManageHiearchyVersion","FeaturePanelComponent","dateCondition","beforeTypeCondition","filterTypesBasedOnMyOrg","myOrgs","filterChange","TransitionEventModalComponent","onEventChange","deleteEvent","jsEvent","transitionEvent","TransitionEventTableComponent","VIEWPORT_SCALE_FACTOR_X","VIEWPORT_SCALE_FACTOR_Y","GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR","changeDetector","activeTransition","afterTypes","beforeTypes","draggable","effectAllowed","disable","handle","isGeoObjectTypeRM","beforeTypeCode","afterTypeCode","eventDate","transitions","setActiveTransition","highlight","trans","sourceCode","targetCode","uuid","v4","sourceType","targetType","transitionType","impact","calculateDerivedAttributes","renderVisual","mouseEvent","transitionOid","validChange","isSource","pair","targetText","sourceText","clear","localizeTransitionImpact","localizeTransitionType","stats","sourceStats","targetStats","updown","typeUpdown","typePart","onChangeTypeUpdown","onDragStart","onDragEnd","onDragged","onDraggableCopied","onDraggableLinked","onDraggableMoved","onDragCanceled","onDragover","newIndex","root","appData","generateAppData","renderingData","generateRenderingData","depth","linkDataMappings","multipleParentLinks","link","d3Data","dx","dy","d3RenderingData","parentNode","childNode","grandChild","isChildOfOtherNode","typeaheadParent","CreateBusinessTypeModalComponent","onBusinessTypeChange","ManageBusinessTypeModalComponent","tt","BusinessTypeManagerComponent","labelAttribute","createAttribute","onTypeChange","setup","cols","header","rowspan","colspan","headerType","BusinessTableComponent","businessService","businessTypes","BusinessImporterComponent","exportToExcel","HistoricalReportComponent","HistoricalEventModuleComponent","noQueryParams","listId","orgTypesNoGroupMembers","groupTypes","gType","groupType","members","grpT","grp","typesByOrgIterEls","els","firstChild","ListTypeManagerComponent","single","incremental","createGroups","ListsForTypeComponent","collapsed","toggleVersions","showAll","PublishVersionComponent","onCreateEntries","onViewConfiguration","layerFromVersion","onGotoMap","ListTypeComponent","working","master","unshift","pService","isRefreshing","isWritable","tableState","progressSubscription","jobSubscription","userOrgCodes","localStorage","getItem","refreshColumns","refreshProgress","handleProgressChange","progressNotifier","jobNotifier","handleJobChange","createColumns","column","handleShowInvalidChange","total","setListId","onPublish","jobOid","onNewGeoObject","onExport","matchMode","onWheel","onRunCuration","onLoadEvent","setItem","isListInOrg","ListComponent","goUid","toggleResolution","CurationJobComponent","querySubscription","ClassificationTypePublishModalComponent","ClassificationTypeManagerComponent","onClassificationTypeChange","drop","onMoveNode","getFirstRoot","ClassificationPublishModalComponent","classificationNode","removeTreeNode","from","TREE_ACTIONS","MOVE_NODE","ClassificationTypeComponent","onClassificationChange","equals","LayerDiff","calculateDiffs","iterations","max","diffLayers","addDiff","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","hideRelatedHierarchy","existingSecondary","existingMenu","contextMenuGroup","hasActionsPermissions","titleLabel","actionsTitle","removeFromHierarchyLabel","noRelatedHierLabel","hideRelatedHierarchyLabel","uninheritLabel","inheritLabel","isSecondaryHierarchyRendered","numActions","removeWidth","hideRelatedWidth","uninheritWidth","existingSecondaryCode","secondaryHierarchy","relatedGotHasParents","inheritWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","onClickUninheritHierarchy","onClickInheritHierarchy","myBbox","primaryHierBbox","gSecondary","paddingLeft","secondaryGot","secondaryGotBbox","gConnector","Alignment","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","curveDistance","multigraph","compound","settings","graph","createDagreGraph","dagre","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","_nodes","dimension","edges","edge","updateEdge","sourceNode","targetNode","rankAxis","orderAxis","rankDimension","dir","startingPoint","endingPoint","edgeLabelId","matchingEdgeLabel","graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","dagreEdges","linkId","newLink","setNode","setEdge","toRoot","allGeoObjectTypes","gObj","selectedGeoObjectType","AddChildToHierarchyModalComponent","onDeleteAttribute","ManageAttributesModalComponent","existRangeStale","immediateParent","invalidParent","parentDoesNotExist","exists","directParent","currentDirectParent","getLowestLevelFromHierarchyEntry","oldParents","newValueStrConcat","removeType","newParents","parentType","HierarchyOverTimeEntry","currentImmediateParent","findAction","component","populate","_value","convertValueForDisplay","calculateSummaryKey","convertDateForDisplay","convertOldValueForDisplay","attrOpts","hasTime","hasValue","UPDATE","TIME_CHANGE","DELETE","summaryKeyData","newKey","localizeSummaryKey","conflictMessagesHasSeverity","severity","has","msg","hasError","size","hasWarning","day","getUTCDate","getUTCFullYear","getUTCMonth","applyAction","saveDraw","startEdit","endEdit","CreateUpdateGeoObjectDetailComponent","elRef","editEmitter","visible","editSessionEnabled","save","onAdd","SimpleEditControl","customEvent","onManageVersion","cHierarchies","parentMap","calculate","time","pot","getHierarchies","onManageVersions","CascadingGeoSelector","mainForm","isExpandedField","expanded","TreeGeoSelector","curAction","cuDetail","arDetail","spDetail","ActionDetailModalComponent","DataExportComponent","LAYER_PANEL","includeSearchLayer","viewList","baseLayerChange","panelSize","panelSizeChange","listOrgGroups","layerGroups","versionMap","graphList","currentStartDate","currentEndDate","setPanelSize","togglePanelOpen","layersWithoutVersions","refreshListLayerReferences","handleSearch","listOrgGroup","listTypeGroup","ver","clickToggleVersionRendered","versionIsRendered","toggleLayerRendered","onGotoBounds","togglePinned","toggleVersionLayer","toggleBaseLayer","bl","moveItemInArray","previousIndex","currentIndex","LayerPanelComponent","visualizeMode","hasConflict","onCloneGeometry","hasDuplicateDate","originalGeoObjectOverTime","geoObjectOverTime","vAttributes","isVersionForHighlight","votArr","getVersionData","vAttribute","getDefaultLocaleVal","defVal","locVal","setDateAttribute","moment","localeData","longDateFormat","setInfinity","onCloneGeometryToNewVersion","GeometryPanelComponent","geoObjectOverTimeInput","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","f","GeoObjectTypePipe","ToEpochDateTimePipe","routes","path","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","RegistryRoutingModule","LocationStrategy","useClass","HashLocationStrategy","RouterModule","forChild","NgModule","imports","ClassificationType","Classification","ClassificationNode","onClose","RecordPanelComponent","RecordPopupComponent","callback","CurationProblemModalComponent","BusinessObjectPanelComponent","BusinessType","BusinessTypeByOrg","BusinessObject","LIST_MODAL","baseZIndex","modal","percent","ListModalComponent","onToggleSize","ListPanelComponent","refreshVersion","ListRowComponent","RegistryModule","CommonModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","DndModule","NgxGraphModule","DragDropModule","AccordionModule","forRoot","NgxSpinnerModule","declarations","entryComponents"],"mappings":"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","file":"1.chunk.js","sourcesContent":["var map = {\n\t\"./af\": 866,\n\t\"./af.js\": 866,\n\t\"./ar\": 867,\n\t\"./ar-dz\": 868,\n\t\"./ar-dz.js\": 868,\n\t\"./ar-kw\": 869,\n\t\"./ar-kw.js\": 869,\n\t\"./ar-ly\": 870,\n\t\"./ar-ly.js\": 870,\n\t\"./ar-ma\": 871,\n\t\"./ar-ma.js\": 871,\n\t\"./ar-sa\": 872,\n\t\"./ar-sa.js\": 872,\n\t\"./ar-tn\": 873,\n\t\"./ar-tn.js\": 873,\n\t\"./ar.js\": 867,\n\t\"./az\": 874,\n\t\"./az.js\": 874,\n\t\"./be\": 875,\n\t\"./be.js\": 875,\n\t\"./bg\": 876,\n\t\"./bg.js\": 876,\n\t\"./bm\": 877,\n\t\"./bm.js\": 877,\n\t\"./bn\": 878,\n\t\"./bn-bd\": 879,\n\t\"./bn-bd.js\": 879,\n\t\"./bn.js\": 878,\n\t\"./bo\": 880,\n\t\"./bo.js\": 880,\n\t\"./br\": 881,\n\t\"./br.js\": 881,\n\t\"./bs\": 882,\n\t\"./bs.js\": 882,\n\t\"./ca\": 883,\n\t\"./ca.js\": 883,\n\t\"./cs\": 884,\n\t\"./cs.js\": 884,\n\t\"./cv\": 885,\n\t\"./cv.js\": 885,\n\t\"./cy\": 886,\n\t\"./cy.js\": 886,\n\t\"./da\": 887,\n\t\"./da.js\": 887,\n\t\"./de\": 888,\n\t\"./de-at\": 889,\n\t\"./de-at.js\": 889,\n\t\"./de-ch\": 890,\n\t\"./de-ch.js\": 890,\n\t\"./de.js\": 888,\n\t\"./dv\": 891,\n\t\"./dv.js\": 891,\n\t\"./el\": 892,\n\t\"./el.js\": 892,\n\t\"./en-au\": 893,\n\t\"./en-au.js\": 893,\n\t\"./en-ca\": 894,\n\t\"./en-ca.js\": 894,\n\t\"./en-gb\": 895,\n\t\"./en-gb.js\": 895,\n\t\"./en-ie\": 896,\n\t\"./en-ie.js\": 896,\n\t\"./en-il\": 897,\n\t\"./en-il.js\": 897,\n\t\"./en-in\": 898,\n\t\"./en-in.js\": 898,\n\t\"./en-nz\": 899,\n\t\"./en-nz.js\": 899,\n\t\"./en-sg\": 900,\n\t\"./en-sg.js\": 900,\n\t\"./eo\": 901,\n\t\"./eo.js\": 901,\n\t\"./es\": 902,\n\t\"./es-do\": 903,\n\t\"./es-do.js\": 903,\n\t\"./es-mx\": 904,\n\t\"./es-mx.js\": 904,\n\t\"./es-us\": 905,\n\t\"./es-us.js\": 905,\n\t\"./es.js\": 902,\n\t\"./et\": 906,\n\t\"./et.js\": 906,\n\t\"./eu\": 907,\n\t\"./eu.js\": 907,\n\t\"./fa\": 908,\n\t\"./fa.js\": 908,\n\t\"./fi\": 909,\n\t\"./fi.js\": 909,\n\t\"./fil\": 910,\n\t\"./fil.js\": 910,\n\t\"./fo\": 911,\n\t\"./fo.js\": 911,\n\t\"./fr\": 912,\n\t\"./fr-ca\": 913,\n\t\"./fr-ca.js\": 913,\n\t\"./fr-ch\": 914,\n\t\"./fr-ch.js\": 914,\n\t\"./fr.js\": 912,\n\t\"./fy\": 915,\n\t\"./fy.js\": 915,\n\t\"./ga\": 916,\n\t\"./ga.js\": 916,\n\t\"./gd\": 917,\n\t\"./gd.js\": 917,\n\t\"./gl\": 918,\n\t\"./gl.js\": 918,\n\t\"./gom-deva\": 919,\n\t\"./gom-deva.js\": 919,\n\t\"./gom-latn\": 920,\n\t\"./gom-latn.js\": 920,\n\t\"./gu\": 921,\n\t\"./gu.js\": 921,\n\t\"./he\": 922,\n\t\"./he.js\": 922,\n\t\"./hi\": 923,\n\t\"./hi.js\": 923,\n\t\"./hr\": 924,\n\t\"./hr.js\": 924,\n\t\"./hu\": 925,\n\t\"./hu.js\": 925,\n\t\"./hy-am\": 926,\n\t\"./hy-am.js\": 926,\n\t\"./id\": 927,\n\t\"./id.js\": 927,\n\t\"./is\": 928,\n\t\"./is.js\": 928,\n\t\"./it\": 929,\n\t\"./it-ch\": 930,\n\t\"./it-ch.js\": 930,\n\t\"./it.js\": 929,\n\t\"./ja\": 931,\n\t\"./ja.js\": 931,\n\t\"./jv\": 932,\n\t\"./jv.js\": 932,\n\t\"./ka\": 933,\n\t\"./ka.js\": 933,\n\t\"./kk\": 934,\n\t\"./kk.js\": 934,\n\t\"./km\": 935,\n\t\"./km.js\": 935,\n\t\"./kn\": 936,\n\t\"./kn.js\": 936,\n\t\"./ko\": 937,\n\t\"./ko.js\": 937,\n\t\"./ku\": 938,\n\t\"./ku.js\": 938,\n\t\"./ky\": 939,\n\t\"./ky.js\": 939,\n\t\"./lb\": 940,\n\t\"./lb.js\": 940,\n\t\"./lo\": 941,\n\t\"./lo.js\": 941,\n\t\"./lt\": 942,\n\t\"./lt.js\": 942,\n\t\"./lv\": 943,\n\t\"./lv.js\": 943,\n\t\"./me\": 944,\n\t\"./me.js\": 944,\n\t\"./mi\": 945,\n\t\"./mi.js\": 945,\n\t\"./mk\": 946,\n\t\"./mk.js\": 946,\n\t\"./ml\": 947,\n\t\"./ml.js\": 947,\n\t\"./mn\": 948,\n\t\"./mn.js\": 948,\n\t\"./mr\": 949,\n\t\"./mr.js\": 949,\n\t\"./ms\": 950,\n\t\"./ms-my\": 951,\n\t\"./ms-my.js\": 951,\n\t\"./ms.js\": 950,\n\t\"./mt\": 952,\n\t\"./mt.js\": 952,\n\t\"./my\": 953,\n\t\"./my.js\": 953,\n\t\"./nb\": 954,\n\t\"./nb.js\": 954,\n\t\"./ne\": 955,\n\t\"./ne.js\": 955,\n\t\"./nl\": 956,\n\t\"./nl-be\": 957,\n\t\"./nl-be.js\": 957,\n\t\"./nl.js\": 956,\n\t\"./nn\": 958,\n\t\"./nn.js\": 958,\n\t\"./oc-lnc\": 959,\n\t\"./oc-lnc.js\": 959,\n\t\"./pa-in\": 960,\n\t\"./pa-in.js\": 960,\n\t\"./pl\": 961,\n\t\"./pl.js\": 961,\n\t\"./pt\": 962,\n\t\"./pt-br\": 963,\n\t\"./pt-br.js\": 963,\n\t\"./pt.js\": 962,\n\t\"./ro\": 964,\n\t\"./ro.js\": 964,\n\t\"./ru\": 965,\n\t\"./ru.js\": 965,\n\t\"./sd\": 966,\n\t\"./sd.js\": 966,\n\t\"./se\": 967,\n\t\"./se.js\": 967,\n\t\"./si\": 968,\n\t\"./si.js\": 968,\n\t\"./sk\": 969,\n\t\"./sk.js\": 969,\n\t\"./sl\": 970,\n\t\"./sl.js\": 970,\n\t\"./sq\": 971,\n\t\"./sq.js\": 971,\n\t\"./sr\": 972,\n\t\"./sr-cyrl\": 973,\n\t\"./sr-cyrl.js\": 973,\n\t\"./sr.js\": 972,\n\t\"./ss\": 974,\n\t\"./ss.js\": 974,\n\t\"./sv\": 975,\n\t\"./sv.js\": 975,\n\t\"./sw\": 976,\n\t\"./sw.js\": 976,\n\t\"./ta\": 977,\n\t\"./ta.js\": 977,\n\t\"./te\": 978,\n\t\"./te.js\": 978,\n\t\"./tet\": 979,\n\t\"./tet.js\": 979,\n\t\"./tg\": 980,\n\t\"./tg.js\": 980,\n\t\"./th\": 981,\n\t\"./th.js\": 981,\n\t\"./tk\": 982,\n\t\"./tk.js\": 982,\n\t\"./tl-ph\": 983,\n\t\"./tl-ph.js\": 983,\n\t\"./tlh\": 984,\n\t\"./tlh.js\": 984,\n\t\"./tr\": 985,\n\t\"./tr.js\": 985,\n\t\"./tzl\": 986,\n\t\"./tzl.js\": 986,\n\t\"./tzm\": 987,\n\t\"./tzm-latn\": 988,\n\t\"./tzm-latn.js\": 988,\n\t\"./tzm.js\": 987,\n\t\"./ug-cn\": 989,\n\t\"./ug-cn.js\": 989,\n\t\"./uk\": 990,\n\t\"./uk.js\": 990,\n\t\"./ur\": 991,\n\t\"./ur.js\": 991,\n\t\"./uz\": 992,\n\t\"./uz-latn\": 993,\n\t\"./uz-latn.js\": 993,\n\t\"./uz.js\": 992,\n\t\"./vi\": 994,\n\t\"./vi.js\": 994,\n\t\"./x-pseudo\": 995,\n\t\"./x-pseudo.js\": 995,\n\t\"./yo\": 996,\n\t\"./yo.js\": 996,\n\t\"./zh-cn\": 997,\n\t\"./zh-cn.js\": 997,\n\t\"./zh-hk\": 998,\n\t\"./zh-hk.js\": 998,\n\t\"./zh-mo\": 999,\n\t\"./zh-mo.js\": 999,\n\t\"./zh-tw\": 1000,\n\t\"./zh-tw.js\": 1000\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1004;","import { ChangeRequestService } from './change-request.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\nimport { GeometryService} from './geometry.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService,\n\tGeometryService\n];\n\nexport * from './change-request.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';\nexport * from './geometry.service';","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\nimport { FilterMetadata } from \"primeng/api\";\n\nimport { EventService } from \"@shared/service\";\nimport { CurationJob, CurationProblem, LayerRecord, ListOrgGroup, ListType, ListTypeByType, ListTypeEntry, ListTypeVersion, ListVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { Observable } from \"rxjs\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { ScheduledJob } from \"@registry/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ListTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    listForType(typeCode: string): Promise<ListTypeByType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeByType>(registry.contextPath + \"/list-type/list-for-type\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    entries(oid: string): Promise<ListType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListType>(registry.contextPath + \"/list-type/entries\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    versions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion[]>(registry.contextPath + \"/list-type/versions\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getVersion(oid: string): Promise<ListTypeVersion> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion>(registry.contextPath + \"/list-type/version\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    fetchVersionsAsListVersion(oids: string[]): Promise<ListVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oids\", oids.join(\",\"));\n\n        // this.eventService.start();\n\n        return this.http.get<ListVersion[]>(registry.contextPath + \"/list-type/fetchVersionsAsListVersion\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/apply\", JSON.stringify({ list: list }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createEntries(oid: string): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/create-entries\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createVersion(entry: ListTypeEntry, metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/create-version\", JSON.stringify({ oid: entry.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    applyVersion(metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/apply-version\", JSON.stringify({ oid: metadata.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeVersion(list: ListTypeVersion): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove-version\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object, pageConfig: any): Promise<PageResult<Object>> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: pageConfig.oid,\n            showInvalid: pageConfig.showInvalid,\n            criteria: criteria\n        } as any;\n\n        return this.http.post<PageResult<Object>>(registry.contextPath + \"/list-type/data\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    // data(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\n    //     let headers = new HttpHeaders({\n    //         \"Content-Type\": \"application/json\"\n    //     });\n\n    //     let params = {\n    //         oid: oid,\n    //         sort: sort\n    //     } as any;\n\n    //     if (pageNumber != null) {\n    //         params.pageNumber = pageNumber;\n    //     }\n\n    //     if (pageSize != null) {\n    //         params.pageSize = pageSize;\n    //     }\n\n    //     if (filter.length > 0) {\n    //         params.filter = filter;\n    //     }\n\n    //     return this.http\n    //         .post<any>(registry.contextPath + \"/list-type/data\", JSON.stringify(params), { headers: headers })\n    //         .toPromise();\n    // }\n\n    record(oid: string, uid: string, showOverlay: boolean = true): Promise<LayerRecord> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            uid: uid\n        };\n\n        if (showOverlay) {\n            this.eventService.start();\n        }\n\n        return this.http\n            .post<LayerRecord>(registry.contextPath + \"/list-type/record\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                if (showOverlay) {\n                    this.eventService.complete();\n                }\n            }))\n            .toPromise();\n    }\n\n    values(oid: string, value: string, attributeName: string, filters: { [s: string]: FilterMetadata }): Promise<string[]> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            attributeName: attributeName\n        } as any;\n\n        if (filters != null) {\n            params.criteria = { filters: filters };\n        }\n\n        if (value != null && value.length > 0) {\n            params.value = value;\n        }\n\n        return this.http\n            .post<string[]>(registry.contextPath + \"/list-type/values\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    publishList(oid: string): Observable<{ jobOid: string }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http.post<{ jobOid: string }>(registry.contextPath + \"/list-type/publish\", JSON.stringify({ oid: oid }), { headers: headers });\n    }\n\n    getAllLists(): Promise<{ label: string, oid: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<{ label: string, oid: string }[]>(registry.contextPath + \"/list-type/list-all\", { params: params })\n            .toPromise();\n    }\n\n    getPublicVersions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        return this.http\n            .get<ListTypeVersion[]>(registry.contextPath + \"/list-type/get-public-versions\", { params: params })\n            .toPromise();\n    }\n\n    getGeospatialVersions(startDate: string, endDate: string): Promise<ListOrgGroup[]> {\n        let params: HttpParams = new HttpParams();\n\n        if (startDate != null && startDate.length > 0) {\n            params = params.append(\"startDate\", startDate);\n        }\n\n        if (endDate != null && endDate.length > 0) {\n            params = params.append(\"endDate\", endDate);\n        }\n\n        return this.http\n            .get<ListOrgGroup[]>(registry.contextPath + \"/list-type/get-geospatial-versions\", { params: params })\n            .toPromise();\n    }\n\n    getBounds(oid: string, uid?: string): Promise<number[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        if (uid != null) {\n            params = params.append(\"uid\", uid);\n        }\n\n        return this.http\n            .get<number[]>(registry.contextPath + \"/list-type/bounds\", { params: params })\n            .toPromise();\n    }\n\n    getCurationInfo(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<CurationJob> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        return this.http.get<CurationJob>(registry.contextPath + \"/curation/details\", { params: params })\n            .toPromise();\n    }\n\n    getCurationPage(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<PageResult<any>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<any>>(registry.contextPath + \"/curation/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createCurationJob(version: ListTypeVersion): Promise<CurationJob> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<CurationJob>(registry.contextPath + \"/curation/curate\", JSON.stringify({ listTypeVersionId: version.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    submitErrorResolve(config: any): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/problem-resolve\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setResolution(problem: CurationProblem, resolution: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params: any = { problemId: problem.id };\n\n        if (resolution != null) {\n            params.resolution = resolution;\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/set-resolution\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJob(historyOid: string): Promise<ScheduledJob> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"historyOid\", historyOid);\n\n        return this.http\n            .get<ScheduledJob>(registry.contextPath + \"/list-type/get-publish-job\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\nimport { RegistryService } from \".\";\n\n@Injectable()\nexport class RegistryCacheService {\n\n    typeCache: GeoObjectTypeCache;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n\n    subscription: Subscription = null;\n\n    constructor(private service: RegistryService) {\n        this.typeCache = new GeoObjectTypeCache(this.service);\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"TYPE_CACHE_CHANGE\") {\n                this.typeCache.refresh();\n            }\n        });\n    }\n\n/*\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n    */\n\n    public getTypeCache(): GeoObjectTypeCache {\n        return this.typeCache;\n    }\n\n}\n","\nimport { Injectable, Output, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\n\nimport * as MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { Map, LngLat, LngLatBounds, AnySourceData, LngLatBoundsLike } from \"mapbox-gl\";\nimport { Subscription } from \"rxjs\";\n\nimport { RelationshipVisualizationService } from \"./relationship-visualization.service\";\nimport { DataSourceFactory, GeoJsonLayer, GeoJsonLayerDataSource, Layer, LayerDataSource } from \"./layer-data-source\";\nimport { RegistryService } from \"./registry.service\";\nimport { MapService } from \"./map.service\";\nimport { ListTypeService } from \"./list-type.service\";\nimport { LayerGroupSorter, LayerSorter } from \"@registry/component/location-manager/layer-group\";\nimport { LocalizationService } from \"@shared/service/localization.service\";\nimport { LayerDiffingStrategy } from \"./layer-diffing-strategy\";\nimport { LocationManagerState } from \"@registry/component/location-manager/location-manager.component\";\nimport { PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\nimport { debounce } from \"ts-debounce\";\n\nexport const OLD_LAYER_COLOR = \"#A4A4A4\";\n\nexport const NEW_LAYER_COLOR = \"#0062AA\";\n\nexport const SELECTED_COLOR = \"#800000\";\n\n/**\n * This service provides a global abstraction for mapping and editing layers across many different components (simultaneously) and\n * serializing / deserializing these layers to / from the url parameters to facilitate saving + loading of layer state.\n *\n * Layers contain references to data sources, which are invoked when deserializing from the url param to facilitate\n * population of layer data.\n */\n@Injectable()\nexport class GeometryService implements OnDestroy {\n\n    map: Map;\n\n    layers: Layer[] = [];\n\n    currentMapState: Layer[] = [];\n\n    geometryType: String;\n\n    readOnly: boolean;\n\n    editingControl: any = null;\n\n    simpleEditControl: any = null;\n\n    editingLayer: GeoJsonLayer;\n\n    // Id of a datasource that we want to zoom to when it becomes ready\n    _zoomOnReady: string[] = [];\n\n    isZooming: boolean = false;\n\n    @Output() geometryChange = new EventEmitter<any>();\n\n    @Output() layersChange: EventEmitter<Layer[]> = new EventEmitter();\n\n    /*\n    * Subscription for changes to the url parameters\n    */\n    private urlSub: Subscription;\n\n    /*\n     * URL pamaters\n     */\n    syncWithUrlParams: boolean = false;\n\n    state: LocationManagerState = { attrPanelOpen: true };\n\n    dataSourceFactory: DataSourceFactory;\n\n    layerSorter: LayerSorter;\n\n    public syncMapState: () => void;\n\n    public stateChange$: EventEmitter<LocationManagerState>;\n\n    setState: (state: any, pushBackHistory: boolean) => void;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private registryService: RegistryService,\n        private relVizService: RelationshipVisualizationService,\n        private mapService: MapService,\n        private listService: ListTypeService,\n        private localService: LocalizationService\n    ) {\n        this.dataSourceFactory = new DataSourceFactory(this, this.registryService, this.relVizService, this.mapService, this.listService);\n        this.layerSorter = new LayerGroupSorter(this.localService);\n        this.syncMapState = debounce(this._syncMapState, 50);\n\n        this.stateChange$ = new EventEmitter();\n        this.setState = debounce(this._setState, 50);\n    }\n\n    public initialize(map: Map, geometryType: String, syncWithUrlParams: boolean) {\n        this.syncWithUrlParams = syncWithUrlParams;\n        this.map = map;\n        this.geometryType = geometryType;\n        // this.editingControl = null;\n\n        if (syncWithUrlParams) {\n            this.urlSub = this.route.queryParams.subscribe(urlParams => {\n                try {\n                    let newState = JSON.parse(JSON.stringify(urlParams));\n\n                    newState.graphPanelOpen = (newState.graphPanelOpen === \"true\");\n                    newState.attrPanelOpen = (newState.attrPanelOpen === \"true\" || newState.attrPanelOpen === undefined);\n\n                    this.stateChange(newState);\n                } catch (err) {\n                    // eslint-disable-next-line no-console\n                    console.log(err); // We will be unsubscribed if we throw an unhandled error and we don't want that to happen\n                }\n            });\n        }\n\n        // this.mapAllLayers();\n\n        this.map.on(\"style.load\", () => {\n            // this.mapAllLayers();\n        });\n\n        this.map.on(\"draw.create\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.delete\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.update\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"zoomstart\", () => {\n            this.isZooming = true;\n        });\n        this.map.on(\"zoomend\", () => {\n            this.isZooming = false;\n        });\n\n        window.onbeforeunload = () => this.destroy();\n\n        this.syncMapState();\n    }\n\n    ngOnDestroy(): void {\n        if (this.urlSub) {\n            this.urlSub.unsubscribe();\n        }\n    }\n\n    public serializeLayers(newLayers: Layer[]) {\n        let sorted;\n\n        if (this.layerSorter != null) {\n            sorted = this.layerSorter.sortLayers(newLayers);\n        } else {\n            sorted = newLayers;\n        }\n\n        let serialized = this.dataSourceFactory.serializeLayers(sorted);\n\n        return JSON.stringify(serialized);\n    }\n\n    public deserializeLayers(layerState: string): Layer[] {\n        return this.dataSourceFactory.deserializeLayers(JSON.parse(layerState));\n    }\n\n    public getState(): LocationManagerState {\n        return this.state;\n    }\n\n    public _setState(state: LocationManagerState, pushBackHistory: boolean): void {\n        Object.assign(this.state, state);\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: JSON.parse(JSON.stringify(this.state)),\n            queryParamsHandling: \"merge\",\n            replaceUrl: !pushBackHistory\n        });\n    }\n\n    stateChange(state: LocationManagerState): void {\n        this.state = state;\n\n        if (this.state != null) {\n            if (this.state.layers != null) {\n                let deserializedLayers: any = JSON.parse(this.state.layers);\n\n                let oldLayers = this.layers;\n\n                let deserialized = this.dataSourceFactory.deserializeLayers(deserializedLayers);\n\n                if (this.layerSorter != null) {\n                    this.layers = this.layerSorter.sortLayers(deserialized);\n                } else {\n                    this.layers = deserialized;\n                }\n\n                if (new LayerDiffingStrategy(this.layers, oldLayers).getDiffs().length > 0) {\n                    this.layersChange.emit(this.getLayers());\n                }\n\n                this.syncMapState();\n            }\n\n            this.stateChange$.emit(JSON.parse(JSON.stringify(this.state)));\n        }\n    }\n\n    private _syncMapState() {\n        if (this.map) {\n            let strategy = new LayerDiffingStrategy(this.layers, this.currentMapState);\n\n            let diffs = strategy.getDiffs();\n\n            let fullRebuild = diffs.length > 0 || this.layers.length !== this.currentMapState.length;\n\n            if (diffs.length === 1 && (diffs[0].type === \"RENDERED_CHANGE\" || diffs[0].type === \"COLOR_CHANGE\")) {\n                // They just toggled whether a layer was rendered or changed a layer color\n\n                const diff = diffs[0];\n\n                let prevLayer = null;\n                if (diff.oldLayerIndex > 0) {\n                    for (let i = 0; i < diff.oldLayerIndex; ++i) {\n                        prevLayer = this.currentMapState[i];\n                    }\n                }\n\n                if (diff.type === \"RENDERED_CHANGE\") {\n                    if (diff.newLayer.rendered) {\n                        this.mapboxShowLayer(diff.newLayer);\n                    } else {\n                        this.mapboxHideLayer(diff.oldLayer);\n                    }\n                } else if (diff.type === \"COLOR_CHANGE\") {\n                    this.mapboxUnmapLayer(diff.oldLayer);\n                    this.mapboxMapLayer(diff.newLayer, prevLayer);\n                }\n\n                fullRebuild = false;\n            } else if (diffs.filter(diff => diff.type === \"NEW_LAYER\").length === 1 && diffs.filter(diff => diff.type !== \"NEW_LAYER\" && diff.type !== \"LAYER_REORDER\").length === 0 && this.layers.length === this.currentMapState.length + 1) {\n                // Added a layer\n                const diff = diffs.filter(diff => diff.type === \"NEW_LAYER\")[0];\n\n                let prevLayer = null;\n                if (diff.newLayerIndex > 0) {\n                    for (let i = 0; i < diff.newLayerIndex; ++i) {\n                        prevLayer = this.currentMapState[i];\n                    }\n                }\n\n                this.mapboxMapLayer(this.layers[diff.newLayerIndex], prevLayer);\n                fullRebuild = false;\n            } else if (diffs.filter(diff => diff.type === \"REMOVE_LAYER\").length === 1 && diffs.filter(diff => diff.type !== \"REMOVE_LAYER\" && diff.type !== \"LAYER_REORDER\").length === 0 && this.layers.length === this.currentMapState.length - 1) {\n                // Removed a layer\n                const diff = diffs.filter(diff => diff.type === \"REMOVE_LAYER\")[0];\n\n                this.mapboxUnmapLayer(diff.oldLayer);\n                fullRebuild = false;\n            } else if (diffs.length > 0 && this.layers.length === this.currentMapState.length && diffs.filter(diff => diff.type !== \"LAYER_REORDER\").length === 0) {\n                // Layers changed order but are otherwise the same.\n\n                this.currentMapState = this.layers;\n                for (let i = this.currentMapState.length - 1; i > -1; i--) {\n                    const layer = this.currentMapState[i];\n\n                    if (this.map.getLayer(layer.getId() + \"-POLYGON\")) {\n                        this.map.moveLayer(layer.getId() + \"-POLYGON\");\n                    }\n                    if (this.map.getLayer(layer.getId() + \"-POINT\")) {\n                        this.map.moveLayer(layer.getId() + \"-POINT\");\n                    }\n                    if (this.map.getLayer(layer.getId() + \"-LINE\")) {\n                        this.map.moveLayer(layer.getId() + \"-LINE\");\n                    }\n                    if (this.map.getLayer(layer.getId() + \"-LABEL\")) {\n                        this.map.moveLayer(layer.getId() + \"-LABEL\");\n                    }\n                }\n                fullRebuild = false;\n            } else if (diffs.length === 2 && diffs.filter(diff => diff.type === \"REMOVE_LAYER\").length === 1 && diffs.filter(diff => diff.type === \"NEW_LAYER\").length === 1 && this.layers.length === this.currentMapState.length && diffs.filter(diff => diff.type !== \"REMOVE_LAYER\" && diff.type !== \"NEW_LAYER\").length === 0) {\n                // Added a layer and removed a layer\n                const newLayerDiff = diffs.filter(diff => diff.type === \"NEW_LAYER\")[0];\n                const removeLayerDiff = diffs.filter(diff => diff.type === \"REMOVE_LAYER\")[0];\n\n                if (removeLayerDiff.oldLayer != null && newLayerDiff.newLayer != null) {\n                    this.mapboxUnmapLayer(removeLayerDiff.oldLayer);\n\n                    let prevLayer = null;\n                    if (newLayerDiff.newLayerIndex > 0) {\n                        for (let i = 0; i < newLayerDiff.newLayerIndex; ++i) {\n                            prevLayer = this.currentMapState[i];\n                        }\n                    }\n\n                    this.mapboxMapLayer(newLayerDiff.newLayer, prevLayer);\n\n                    fullRebuild = false;\n                }\n            }\n\n            if (fullRebuild) {\n                this.unmapAllLayers();\n\n                this.currentMapState = this.layers;\n                this.mapAllLayers();\n            } else {\n                // Make sure attribute changes are reflected\n                this.currentMapState = this.layers;\n            }\n\n            // Zoom to layers\n            if (this._zoomOnReady != null && this._zoomOnReady.length > 0 && !this.isZooming) {\n                for (let i = 0; i < this._zoomOnReady.length; ++i) {\n                    let layerId = this._zoomOnReady[i];\n\n                    let layerIndex = this.layers.findIndex(l => l.getId() === layerId);\n\n                    if (layerIndex !== -1) {\n                        let layer = this.layers[layerIndex];\n\n                        this.zoomToLayer(layer);\n                        this._zoomOnReady.splice(this._zoomOnReady.indexOf(layer.getId()), 1);\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    public dumpLayers(): void {\n        this.layers = [];\n        this.currentMapState = [];\n    }\n\n    public isMapZooming(): boolean {\n        return this.isZooming;\n    }\n\n    /*\n     * Notify the map that the datasets of a particular type have changed and that the data sources must be rebuilt.\n     */\n    public refreshDatasets(type: string) {\n        let otherLayer = null;\n        this.getLayers().forEach(layer => {\n            if (layer.dataSource.getDataSourceType() === type) {\n                this.mapboxUnmapLayer(layer);\n                this.mapboxMapLayer(layer, otherLayer);\n            }\n            otherLayer = layer;\n        });\n    }\n\n    public setLayers(newLayers: Layer[]) {\n        if (this.layerSorter != null) {\n            this.layers = this.layerSorter.sortLayers(newLayers);\n        } else {\n            this.layers = newLayers;\n        }\n\n        if (this.syncWithUrlParams) {\n            let serialized = this.dataSourceFactory.serializeLayers(newLayers);\n\n            this.setState({ layers: JSON.stringify(serialized) }, false);\n        } else {\n            this.syncMapState();\n        }\n\n        this.layersChange.emit(this.getLayers());\n    }\n\n    public zoomOnReady(layerId: string) {\n        if (this._zoomOnReady.indexOf(layerId) === -1) {\n            this._zoomOnReady.push(layerId);\n        }\n    }\n\n    public zoomToLayer(layer: Layer): Promise<void> {\n        return layer.dataSource.getBounds(layer).then((bounds: LngLatBoundsLike) => {\n            if (bounds != null) {\n                let zoomConfig = this.calculateZoomConfig(null);\n\n                this.isZooming = true;\n                this.map.fitBounds(bounds, zoomConfig);\n\n                // If they switch pages before the zoom finishes isZooming can remain set. So set a max timeout\n                window.setTimeout(() => {\n                    this.isZooming = false;\n                }, 6000);\n            }\n        });\n    }\n\n    private calculateZoomConfig(geometryType: string): any {\n        let config: any = { padding: { top: 10, bottom: 10, left: 10, right: 10 }, animate: true, maxDuration: 5000, maxZoom: 20 };\n\n        // Zoom level was requested to be reduced when displaying point types as per #420\n        if (geometryType === \"Point\" || geometryType === \"MultiPoint\") {\n            config.padding = { top: 50, bottom: 50, left: 50, right: 50 };\n            config.maxZoom = 12;\n        }\n\n        if (this.state.graphPanelOpen && !this.state.attrPanelOpen) {\n            // If graph panel is open, but not attribute panel (takes up half of the left screen)\n            config.padding.left += Math.round(window.innerWidth / 2);\n        } else if (this.state.attrPanelOpen && (this.state.text != null) && !this.state.graphPanelOpen) {\n            // If attribute panel is open, but not the graph panel (takes up half of the left screen)\n            config.padding.left += Math.round(window.innerWidth / 3);\n        }\n\n        if (this.state.layersPanelSize != null) {\n            let layerPanelSize = Number.parseInt(this.state.layersPanelSize);\n\n            if (layerPanelSize === PANEL_SIZE_STATE.WINDOWED || PANEL_SIZE_STATE.FULLSCREEN) {\n                config.padding.right += 50;\n\n                /*\n                config.padding.top += 37 * this.layers.length;\n                config.padding.top += layerPanelSize === PANEL_SIZE_STATE.FULLSCREEN ? 50 : 10;\n                */\n            }\n        }\n\n        return config;\n    }\n\n    public setGeometryType(geometryType: string) {\n        this.geometryType = geometryType;\n    }\n\n    public getLayerFromMapboxLayer(mapboxLayer: any) {\n        let id = mapboxLayer.id;\n\n        if (id.endsWith(\"-POINT\")) {\n            id = id.substring(0, id.length - \"-POINT\".length);\n        } else if (id.endsWith(\"-POLYGON\")) {\n            id = id.substring(0, id.length - \"-POLYGON\".length);\n        } else if (id.endsWith(\"-LINE\")) {\n            id = id.substring(0, id.length - \"-LINE\".length);\n        } else if (id.endsWith(\"-LABEL\")) {\n            id = id.substring(0, id.length - \"-LABEL\".length);\n        }\n\n        let layers = this.getLayers().filter(l => l.getId() === id);\n\n        if (layers.length > 0) {\n            let layer: Layer = layers[0];\n\n            return layer;\n        }\n    }\n\n    public destroy(destroyMap: boolean = true): void {\n        if (this.editingControl != null) {\n            this.map.removeControl(this.editingControl);\n            this.editingControl = null;\n        }\n\n        if (this.map != null && destroyMap) {\n            this.map.remove();\n            this.map = null;\n        } else if (this.map != null) {\n            this.unmapAllLayers();\n        }\n\n        if (this.layers != null) {\n            this.layers.forEach(layer => {\n                if (layer instanceof GeoJsonLayer) {\n                    layer.editing = false;\n                }\n            });\n        }\n\n        this.editingLayer = null;\n        this.layers = [];\n        this.currentMapState = [];\n        this.dataSourceFactory = new DataSourceFactory(this, this.registryService, this.relVizService, this.mapService, this.listService);\n    }\n\n    public getMap() {\n        return this.map;\n    }\n\n    public getDataSourceFactory() {\n        return this.dataSourceFactory;\n    }\n\n    public setDataSourceFactory(fac) {\n        this.dataSourceFactory = fac;\n    }\n\n    public registerDataSource(dataSource: LayerDataSource) {\n        this.dataSourceFactory.registerDataSource(dataSource);\n    }\n\n    public unregisterDataSource(dataSourceType: string) {\n        this.dataSourceFactory.unregisterDataSource(dataSourceType);\n    }\n\n    public startEditing(layer: GeoJsonLayer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        this.editingLayer = layer;\n        this.editingLayer.editing = true;\n\n        if (!this.readOnly) {\n            this.enableEditing();\n        }\n\n        this.addEditingLayers();\n    }\n\n    public stopEditing(rerender: boolean = true) {\n        if (this.isEditing()) {\n            this.saveEdits(rerender);\n\n            this.editingLayer.editing = false;\n            this.editingLayer = null;\n\n            this.editingControl.deleteAll();\n            this.map.removeControl(this.editingControl);\n\n            this.editingControl = null;\n        }\n    }\n\n    isEditing(): boolean {\n        return this.editingLayer != null;\n    }\n\n    setPointCoordinates(lat: any, long: any) {\n        if (this.editingLayer != null) {\n            this.editingControl.set({\n                type: \"FeatureCollection\",\n                features: [{\n                    id: this.editingLayer.getId(),\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: { type: \"Point\", coordinates: [long, lat] }\n                }]\n            });\n\n            this.editingControl.changeMode(\"simple_select\", { featureIds: this.editingLayer.getId() });\n\n            this.saveEdits();\n\n            /*\n            this.editingLayer.value = {\n              type: 'FeatureCollection',\n              features: [{\n              id: this.editingLayer.getId(),\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ long, lat ] }\n              }]\n            };\n            */\n\n            /*\n            this.editingLayer.value.coordinates = [ -97.4870830718814, 41.84836050415993 ];\n\n            this.editingControl.set(this.editingLayer.value);\n\n            this.unmapAllLayers();\n            this.mapAllLayers();\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.editingLayer.getId() } );\n            */\n        }\n    }\n\n    isValid(): boolean {\n        if (!this.readOnly) {\n            let isValid: boolean = false;\n\n            if (this.editingControl != null) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if (featureCollection.features.length > 0) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    public saveEdits(rerender: boolean = true): void {\n        if (this.editingLayer != null) {\n            let geoJson = this.getDrawGeometry();\n\n            (this.editingLayer.dataSource as unknown as GeoJsonLayerDataSource).setLayerData(geoJson);\n\n            if (rerender) {\n                this.unmapAllLayers();\n                this.mapAllLayers();\n            }\n        }\n    }\n\n    public reload(): void {\n        if (this.map != null) {\n            this.unmapAllLayers();\n            this.mapAllLayers();\n\n            if (this.editingControl != null) {\n                this.editingControl.deleteAll();\n            }\n\n            this.addEditingLayers();\n        }\n    }\n\n    setEditing(isEditing: boolean, layer: GeoJsonLayer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        layer.editing = isEditing;\n\n        if (isEditing) {\n            this.startEditing(layer);\n        }\n    }\n\n    public addOrUpdateLayer(newLayer: Layer, orderingIndex?: number) {\n        let newLayers = this.getLayers();\n\n        let existingIndex = newLayers.findIndex((findLayer: Layer) => { return findLayer.getId() === newLayer.getId(); });\n\n        if (existingIndex !== -1) {\n            newLayers[existingIndex] = newLayer;\n        } else {\n            if (orderingIndex != null) {\n                newLayers.splice(orderingIndex, 0, newLayer);\n            } else {\n                newLayers.push(newLayer);\n            }\n        }\n\n        if (newLayer instanceof GeoJsonLayer && newLayer.editing) {\n            this.startEditing(newLayer);\n        }\n\n        this.setLayers(newLayers);\n    }\n\n    public removeLayer(oid: string) {\n        let newLayers = this.getLayers();\n\n        let existingIndex = newLayers.findIndex((findLayer: Layer) => { return findLayer.getId() === oid; });\n\n        if (existingIndex !== -1) {\n            newLayers.splice(existingIndex, 1);\n\n            this.setLayers(newLayers);\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(\"Could not remove layer with id \" + oid + \" because one does not exist.\");\n        }\n    }\n\n    public removeLayers(oids: string[]) {\n        let newLayers = this.getLayers();\n\n        newLayers = newLayers.filter(layer => oids.indexOf(layer.getId()) === -1);\n\n        this.setLayers(newLayers);\n    }\n\n    public getLayers(): Layer[] {\n        return this.dataSourceFactory.deserializeLayers(this.dataSourceFactory.serializeLayers(this.layers));\n    }\n\n    enableEditing(): void {\n        if (this.editingControl == null) {\n            if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: false,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n                this.editingControl = new MapboxDraw({\n                    userProperties: true,\n                    controls: {\n                        point: true,\n                        line_string: false,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    },\n                    styles: [\n                        {\n                            id: \"highlight-active-points\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"true\"]],\n                            paint: {\n                                \"circle-radius\": 13,\n                                \"circle-color\": \"#33FFF9\",\n                                \"circle-stroke-width\": 4,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        },\n                        {\n                            id: \"points-are-blue\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"false\"]],\n                            paint: {\n                                \"circle-radius\": 10,\n                                \"circle-color\": \"#800000\",\n                                \"circle-stroke-width\": 2,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        }\n                    ]\n                });\n            } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: true,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"MIXED\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: true,\n                        line_string: true,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            }\n\n            if (this.map.getSource(\"mapbox-gl-draw-cold\") == null) {\n                this.map.addControl(this.editingControl, \"bottom-right\");\n            }\n        }\n    }\n\n    addEditingLayers(): void {\n        if (this.editingLayer != null && this.editingControl != null) {\n            (this.editingLayer.dataSource as unknown as GeoJsonLayerDataSource).getLayerData().then(data => {\n                if (data) {\n                    this.editingControl.add(data);\n                }\n            });\n        }\n    }\n\n    private mapboxUnmapLayer(layer: Layer): void {\n        if (this.map) {\n            this.getMapboxLayerIdsForLayer(layer).forEach(id => {\n                if (this.map.getLayer(id) != null) {\n                    this.map.removeLayer(id);\n                } else {\n                    // eslint-disable-next-line no-console\n                    console.log(\"Attempted to remove a layer [\" + id + \"] which does not exist.\");\n                }\n            });\n\n            // If this source is used by other layers we don't want to remove the source\n            let sourceHasOtherMappedLayers = this.currentMapState.filter(l => layer.getId() !== l.getId() && l.dataSource.getId() === layer.dataSource.getId()).length > 0;\n\n            if (!sourceHasOtherMappedLayers && this.map.getSource(layer.dataSource.getId()) != null) {\n                this.map.removeSource(layer.dataSource.getId());\n            }\n        }\n    }\n\n    private unmapAllLayers(): void {\n        if (this.currentMapState != null && this.currentMapState.length > 0) {\n            let len = this.currentMapState.length;\n\n            for (let i = 0; i < len; ++i) {\n                let layer = this.currentMapState[i];\n                this.mapboxUnmapLayer(layer);\n            }\n        }\n    }\n\n    private mapAllLayers(): void {\n        if (this.currentMapState != null && this.currentMapState.length > 0) {\n            let prevLayer = null;\n            let len = this.currentMapState.length;\n            for (let i = 0; i < len; ++i) {\n                let layer = this.currentMapState[i];\n\n                this.mapboxMapLayer(layer, prevLayer);\n                prevLayer = layer;\n            }\n        }\n    }\n\n    private mapboxHideLayer(layer: Layer): void {\n        if (!this.map) { return; }\n\n        this.getMapboxLayerIdsForLayer(layer).forEach(id => {\n            if (this.map.getLayer(id) != null) {\n                this.map.setLayoutProperty(id, \"visibility\", \"none\");\n            } else {\n                // eslint-disable-next-line no-console\n                console.log(\"Attempted to hide a layer [\" + id + \"] which does not exist.\");\n            }\n        });\n    }\n\n    private mapboxShowLayer(layer: Layer): void {\n        if (!this.map) { return; }\n\n        this.getMapboxLayerIdsForLayer(layer).forEach(id => {\n            if (this.map.getLayer(id) != null) {\n                this.map.setLayoutProperty(id, \"visibility\", \"visible\");\n            } else {\n                // eslint-disable-next-line no-console\n                console.log(\"Attempted to show a layer [\" + id + \"] which does not exist.\");\n            }\n        });\n    }\n\n    private mapboxMapLayer(layer: Layer, otherLayer?: Layer): void {\n        if (!this.map) { return; }\n\n        let mapboxSource: AnySourceData = layer.dataSource.buildMapboxSource();\n\n        if (this.map.getSource(layer.dataSource.getId()) == null) {\n            this.map.addSource(layer.dataSource.getId(), mapboxSource);\n        }\n\n        // If the layer wants to load some data asynchronously\n        if (layer.dataSource instanceof GeoJsonLayerDataSource) {\n            layer.dataSource.getLayerData().then(geojson => {\n                if (this.map.getSource(layer.dataSource.getId()) != null) {\n                    (this.map.getSource(layer.dataSource.getId()) as any).setData(geojson);\n                }\n            });\n        }\n\n        if (layer.dataSource.getGeometryType() === \"MIXED\") {\n            this.mapboxMapLayerAsType(\"POLYGON\", layer, otherLayer);\n            this.mapboxMapLayerAsType(\"POINT\", layer, otherLayer);\n            this.mapboxMapLayerAsType(\"LINE\", layer, otherLayer);\n        } else {\n            this.mapboxMapLayerAsType(layer.dataSource.getGeometryType(), layer, otherLayer);\n        }\n\n        // Label layer\n        let labelConfig: any = {\n            id: layer.getId() + \"-LABEL\",\n            source: layer.dataSource.getId(),\n            type: \"symbol\",\n            paint: {\n                \"text-color\": \"black\",\n                \"text-halo-color\": \"#fff\",\n                \"text-halo-width\": 2\n            },\n            layout: {\n                \"text-field\": [\"get\", \"localizedValue\", [\"get\", \"displayLabel\"]],\n                \"text-font\": [\"NotoSansRegular\"],\n                \"text-offset\": [0, 0.6],\n                \"text-anchor\": \"top\",\n                \"text-size\": 12\n            }\n        };\n\n        if (!layer.rendered) {\n            labelConfig.layout.visibility = \"none\";\n        }\n\n        layer.configureMapboxLayer(\"LABEL\", labelConfig);\n\n        this.map.addLayer(labelConfig, otherLayer ? otherLayer.getId() + \"-LABEL\" : null);\n    }\n\n    private mapboxMapLayerAsType(geometryType: string, layer: Layer, otherLayer?: Layer): void {\n        let layerConfig: any;\n\n        if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\") {\n            // Polygon Layer\n            layerConfig = {\n                id: layer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(geometryType),\n                type: \"fill\",\n                source: layer.dataSource.getId(),\n                paint: {\n                    \"fill-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"selected\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            };\n        } else if (geometryType === \"POINT\" || geometryType === \"MULTIPOINT\") {\n            // Point layer\n            layerConfig = {\n                id: layer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(geometryType),\n                type: \"circle\",\n                source: layer.dataSource.getId(),\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"selected\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            };\n        } else if (geometryType === \"LINE\" || geometryType === \"MULTILINE\") {\n            layerConfig = {\n                id: layer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(geometryType),\n                source: layer.dataSource.getId(),\n                type: \"line\",\n                layout: {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                paint: {\n                    \"line-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"selected\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"line-width\": 3\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"LineString\", \"MultiLineString\"], true, false]\n                ]\n            };\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(\"Unexpected geometry type [\" + geometryType + \"]\");\n            return;\n        }\n\n        layer.configureMapboxLayer(geometryType, layerConfig);\n\n        if (!layer.rendered) {\n            layerConfig.layout = (layerConfig.layout == null) ? {} : layerConfig.layout;\n            layerConfig.layout.visibility = \"none\";\n        }\n\n        this.map.addLayer(layerConfig, otherLayer ? otherLayer.getId() + \"-\" + this.getLayerIdGeomTypePostfix(otherLayer.dataSource.getGeometryType()) : null);\n    }\n\n    private getLayerIdGeomTypePostfix(geometryType: string) {\n        if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\") {\n            return \"POLYGON\";\n        } else if (geometryType === \"POINT\" || geometryType === \"MULTIPOINT\") {\n            return \"POINT\";\n        } else if (geometryType === \"LINE\" || geometryType === \"MULTILINE\") {\n            return \"LINE\";\n        } else {\n            return \"POLYGON\";\n        }\n    }\n\n    private getMapboxLayerIdsForLayer(layer: Layer): string[] {\n        let ids = [];\n\n        if (layer.dataSource.getGeometryType() === \"MIXED\") {\n            ids = [\"POLYGON\", \"POINT\", \"LINE\", \"LABEL\"];\n        } else {\n            ids = [this.getLayerIdGeomTypePostfix(layer.dataSource.getGeometryType()), \"LABEL\"];\n        }\n\n        return ids.map(id => layer.getId() + \"-\" + id);\n    }\n\n    public getDrawGeometry(): any {\n        if (this.editingControl != null) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if (featureCollection.features.length > 0) {\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if (this.geometryType === \"MULTIPOLYGON\") {\n                    let polygons = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPolygon\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                polygons.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            polygons.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: \"MultiPolygon\"\n                    };\n                } else if (this.geometryType === \"MULTIPOINT\") {\n                    let points = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPoint\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                points.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            points.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: \"MultiPoint\"\n                    };\n                } else if (this.geometryType === \"MULTILINE\") {\n                    let lines = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiLineString\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                lines.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            lines.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: \"MultiLineString\"\n                    };\n                } else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static createEmptyGeometryValue(geometryType: String): any {\n        let value = { type: geometryType, coordinates: [] };\n\n        let upperType = geometryType.toUpperCase();\n\n        if (upperType === \"MULTIPOLYGON\" || upperType === \"MIXED\") {\n            value.type = \"MultiPolygon\";\n        } else if (upperType === \"POLYGON\") {\n            value.type = \"Polygon\";\n        } else if (upperType === \"POINT\") {\n            value.type = \"Point\";\n        } else if (upperType === \"MULTIPOINT\") {\n            value.type = \"MultiPoint\";\n        } else if (upperType === \"LINE\") {\n            value.type = \"Line\";\n        } else if (upperType === \"MULTILINE\") {\n            value.type = \"MultiLine\";\n        }\n\n        return value;\n    }\n\n    public zoomToLayersExtent(): void {\n        let layers = this.getLayers();\n        let geoJsonLayer: GeoJsonLayer = null;\n\n        layers.forEach(layer => {\n            if (layer instanceof GeoJsonLayer && layer.rendered) {\n                geoJsonLayer = layer as GeoJsonLayer;\n            }\n        });\n\n        if (geoJsonLayer != null) {\n            (geoJsonLayer.dataSource as unknown as GeoJsonLayerDataSource).getLayerData().then((geojson: any) => {\n                if (geojson != null) {\n                    const geometryType = geojson.type != null ? geojson.type.toUpperCase() : this.geometryType;\n\n                    if (geometryType === \"MULTIPOINT\" || geometryType === \"POINT\") {\n                        let coords = geojson.coordinates;\n\n                        if (coords) {\n                            let bounds = new LngLatBounds();\n                            coords.forEach(coord => {\n                                bounds.extend(coord);\n                            });\n\n                            let center = bounds.getCenter();\n                            let pt = new LngLat(center.lng, center.lat);\n\n                            this.map.flyTo({\n                                center: pt,\n                                zoom: 9,\n                                essential: true\n                            });\n                        }\n                    } else if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\" || geometryType === \"MIXED\") {\n                        let coords = geojson.coordinates;\n\n                        if (coords) {\n                            let bounds = new LngLatBounds();\n                            coords.forEach(polys => {\n                                polys.forEach(subpoly => {\n                                    subpoly.forEach(coord => {\n                                        bounds.extend(coord);\n                                    });\n                                });\n                            });\n\n                            this.map.fitBounds(bounds, {\n                                padding: 20\n                            });\n                        }\n                    } else if (geometryType === \"LINE\" || geometryType === \"MULTILINE\") {\n                        let coords = geojson.coordinates;\n\n                        if (coords) {\n                            let bounds = new LngLatBounds();\n                            coords.forEach(lines => {\n                                lines.forEach(subline => {\n                                    subline.forEach(coord => {\n                                        bounds.extend(coord);\n                                    });\n                                });\n                            });\n\n                            this.map.fitBounds(bounds, {\n                                padding: 20\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { BusinessType, BusinessTypeByOrg } from \"@registry/model/business-type\";\nimport { AttributeType } from \"@registry/model/registry\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { PageResult } from \"@shared/model/core\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class BusinessTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getByOrganization(): Promise<BusinessTypeByOrg[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http.get<BusinessTypeByOrg[]>(registry.contextPath + \"/business-type/get-by-org\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAll(): Promise<BusinessType[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http.get<BusinessType[]>(registry.contextPath + \"/business-type/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<BusinessType> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<BusinessType>(registry.contextPath + \"/business-type/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(type: BusinessType): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/apply\", JSON.stringify({ type: type }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(type: BusinessType): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/remove\", JSON.stringify({ oid: type.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/edit\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    addAttributeType(typeCode: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<AttributeType>(registry.contextPath + \"/business-type/add-attribute\", JSON.stringify({ typeCode: typeCode, attributeType: attribute }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateAttributeType(typeCode: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<AttributeType>(registry.contextPath + \"/business-type/update-attribute\", JSON.stringify({ typeCode: typeCode, attributeType: attribute }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteAttributeType(typeCode: string, attributeName: string): Promise<boolean> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<boolean>(registry.contextPath + \"/business-type/remove-attribute\", JSON.stringify({ typeCode: typeCode, attributeName: attributeName }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object, pageConfig: any): Promise<PageResult<Object>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"criteria\", JSON.stringify(criteria));\n        params = params.set(\"typeCode\", pageConfig.typeCode);\n\n        return this.http\n            .get<PageResult<Object>>(registry.contextPath + \"/business-type/data\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { AnySourceData, LngLatBounds, LngLatBoundsLike } from \"mapbox-gl\";\nimport { ListTypeService } from \"./list-type.service\";\nimport { RegistryService } from \"./registry.service\";\n\nimport { HttpParams } from \"@angular/common/http\";\nimport { v4 as uuid } from \"uuid\";\nimport bbox from \"@turf/bbox\";\nimport { GeoJSON } from \"geojson\";\nimport { RelationshipVisualizationService } from \"./relationship-visualization.service\";\nimport { GeometryService } from \"./geometry.service\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\nimport { MapService } from \"./map.service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { ObjectReference } from \"@registry/model/graph\";\ndeclare let registry: GeoRegistryConfiguration;\n\nexport abstract class LayerDataSource {\n\n    private dataSourceType: string;\n\n    private id: string;\n\n    constructor(dataSourceType: string) {\n        this.dataSourceType = dataSourceType;\n        this.id = uuid();\n    }\n\n    public getDataSourceType(): string {\n        return this.dataSourceType;\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new Layer(this, legendLabel, rendered, color);\n    }\n\n    public fromJSON(obj: any) {\n        Object.assign(this, obj);\n    }\n\n    public toJSON(): any {\n        return {\n            dataSourceType: this.dataSourceType,\n            id: this.id\n        };\n    }\n\n    public getId(): string {\n        return this.id;\n    }\n\n    public abstract getKey(): string;\n\n    public abstract buildMapboxSource(): AnySourceData;\n\n    public abstract getGeometryType(): string;\n\n    public abstract getBounds(layer: Layer): Promise<LngLatBoundsLike>;\n\n}\n\nexport abstract class GeoJsonLayerDataSource extends LayerDataSource {\n\n    public abstract getLayerData(): Promise<GeoJSON.GeoJSON>;\n    public abstract setLayerData(data: GeoJSON.GeoJSON): void;\n\n    public buildMapboxSource(): AnySourceData {\n        return {\n            type: \"geojson\",\n            data: GeometryService.createEmptyGeometryValue(this.getGeometryType())\n        };\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.getLayerData().then(data => {\n            try {\n                return bbox(data as any) as LngLatBoundsLike;\n            // eslint-disable-next-line no-console\n            } catch (e) { console.log(e); }\n\n            return null;\n        });\n    }\n\n}\n\nexport class Layer {\n\n    legendLabel: string;\n    dataSource: LayerDataSource;\n    rendered: boolean;\n    color: string;\n    pinned: boolean;\n\n    constructor(dataSource?: LayerDataSource, legendLabel?: string, rendered?: boolean, color?: string) {\n        this.dataSource = dataSource;\n        this.legendLabel = legendLabel;\n        this.rendered = rendered;\n        this.color = color;\n        this.pinned = false;\n    }\n\n    public fromJSON(obj: any) {\n        Object.assign(this, obj);\n    }\n\n    public toJSON(): any {\n        return {\n            legendLabel: this.legendLabel,\n            rendered: this.rendered,\n            color: this.color,\n            pinned: this.pinned\n        };\n    }\n\n    public getId(): string {\n        return this.dataSource.getId();\n    }\n\n    public getKey(): string {\n        return this.dataSource.getKey();\n    }\n\n    public getPinned(): boolean {\n        return this.pinned;\n    }\n\n    public setPinned(pinned: boolean) {\n        this.pinned = pinned;\n    }\n\n    public configureMapboxLayer(layerType: string, layerConfig: any): void {\n\n    }\n\n}\n\nexport class GeoJsonLayer extends Layer {\n\n    constructor(dataSource?: LayerDataSource, legendLabel?: string, rendered?: boolean, color?: string) {\n        super(dataSource, legendLabel, rendered, color);\n        this.editing = false;\n    }\n\n    editing: boolean;\n\n}\n\nexport const GEO_OBJECT_DATA_SOURCE_TYPE: string = \"GEOOBJ\";\n\nexport class GeoObjectLayerDataSource extends LayerDataSource {\n\n    private registryService: RegistryService;\n\n    private code: string;\n\n    private typeCode: string;\n\n    private date: string;\n\n    constructor(registryService: RegistryService, code?: string, typeCode?: string, date?: string) {\n        super(GEO_OBJECT_DATA_SOURCE_TYPE);\n        this.registryService = registryService;\n        this.code = code;\n        this.typeCode = typeCode;\n        this.date = date;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            code: this.code,\n            typeCode: this.typeCode,\n            date: this.date\n        });\n    }\n\n    getCode(): string {\n        return this.code;\n    }\n\n    setCode(code: string): void {\n        this.code = code;\n    }\n\n    getTypeCode(): string {\n        return this.typeCode;\n    }\n\n    setTypeCode(typeCode: string): void {\n        this.typeCode = typeCode;\n    }\n\n    getDate(): string {\n        return this.date;\n    }\n\n    setDate(date: string): void {\n        this.date = date;\n    }\n\n    getDataSourceType(): string {\n        return GEO_OBJECT_DATA_SOURCE_TYPE;\n    }\n\n    getKey(): string {\n        return this.getDataSourceType() + this.getCode() + this.getTypeCode() + (this.getDate() == null ? \"\" : this.getDate());\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    buildMapboxSource(): AnySourceData {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"code\", this.code);\n        params = params.set(\"typeCode\", this.typeCode);\n\n        if (this.date != null) {\n            params = params.set(\"date\", this.date);\n        }\n\n        let url = registry.contextPath + \"/cgr/geoobject/get-code\" + \"?\" + params.toString();\n\n        return {\n            type: \"geojson\",\n            data: url\n        };\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.registryService.getGeoObjectBoundsAtDate(this.code, this.typeCode, this.date).then((bounds: number[]) => {\n            if (bounds && Array.isArray(bounds)) {\n                return new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n            } else {\n                return null;\n            }\n        });\n    }\n\n}\n\nexport const LIST_VECTOR_SOURCE_TYPE = \"LISTVECT\";\n\nexport class ListVectorLayerDataSource extends LayerDataSource {\n\n    private listService: ListTypeService;\n\n    private versionId: string;\n\n    constructor(listService: ListTypeService, versionId?: string) {\n        super(LIST_VECTOR_SOURCE_TYPE);\n        this.versionId = versionId;\n        this.listService = listService;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            versionId: this.versionId\n        });\n    }\n\n    getVersionId(): string {\n        return this.versionId;\n    }\n\n    getKey(): string {\n        return this.getDataSourceType() + this.getVersionId();\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new ListVectorLayer(this, legendLabel, rendered, color);\n    }\n\n    buildMapboxSource(): AnySourceData {\n        let protocol = window.location.protocol;\n        let host = window.location.host;\n\n        return {\n            type: \"vector\",\n            tiles: [protocol + \"//\" + host + registry.contextPath + \"/list-type/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: this.versionId }))],\n            promoteId: \"uid\"\n        };\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBounds> {\n        let objectFilter = null;\n        if (layer instanceof ListVectorLayer) {\n            objectFilter = (layer as ListVectorLayer).getObjectFilter();\n        }\n\n        return this.listService.getBounds(this.versionId, objectFilter).then((bounds: number[]) => {\n            if (bounds && Array.isArray(bounds)) {\n                return new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n            } else {\n                return null;\n            }\n        });\n    }\n\n}\n\nexport class ListVectorLayer extends Layer {\n\n    objectFilter: string;\n\n    configureMapboxLayer(layerType: string, layerConfig: any): void {\n        layerConfig[\"source-layer\"] = \"context\";\n\n        if (this.objectFilter != null) {\n            let filter = [\"match\", [\"get\", \"uid\"], this.objectFilter, true, false];\n\n            if (layerConfig[\"filter\"] != null) {\n                layerConfig[\"filter\"].push(filter);\n            } else {\n                layerConfig[\"filter\"] = filter;\n            }\n        }\n\n        if (layerType === \"LABEL\") {\n            layerConfig.layout[\"text-field\"] = [\"case\",\n                [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                [\"coalesce\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()], [\"get\", \"displayLabel\"], [\"get\", \"code\"]],\n                [\"coalesce\", [\"get\", \"displayLabel\"], [\"string\", [\"get\", \"code\"]]\n                ]];\n        }\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            objectFilter: this.objectFilter\n        });\n    }\n\n    getId(): string {\n        return (this.objectFilter == null) ? this.dataSource.getId() : this.objectFilter + this.dataSource.getId();\n    }\n\n    public getKey(): string {\n        return (this.objectFilter == null) ? this.dataSource.getKey() : this.objectFilter + this.dataSource.getKey();\n    }\n\n    setObjectFilter(objectFilter: string) {\n        this.objectFilter = objectFilter;\n    }\n\n    getObjectFilter(): string {\n        return this.objectFilter;\n    }\n\n}\n\nexport const CHANGE_REQUEST_SOURCE_TYPE_NEW = \"CRNEW\";\n\nexport const CHANGE_REQUEST_SOURCE_TYPE_OLD = \"CROLD\";\n\nexport class ValueOverTimeDataSource extends GeoJsonLayerDataSource {\n\n    votEditor: ValueOverTimeCREditor;\n\n    constructor(newOrOld: \"NEW\" | \"OLD\", votEditor: ValueOverTimeCREditor) {\n        super(newOrOld === \"NEW\" ? CHANGE_REQUEST_SOURCE_TYPE_NEW : CHANGE_REQUEST_SOURCE_TYPE_OLD);\n        this.votEditor = votEditor;\n    }\n\n    setLayerData(data: any): void {\n        if (this.getDataSourceType() === CHANGE_REQUEST_SOURCE_TYPE_NEW) {\n            this.votEditor.value = data;\n        } else {\n            // eslint-disable-next-line no-console\n            console.log(\"ERROR. Cannot edit old geometry\");\n        }\n    }\n\n    getLayerData(): Promise<GeoJSON.GeoJSON> {\n        return new Promise((resolve, reject) => {\n            if (this.getDataSourceType() === CHANGE_REQUEST_SOURCE_TYPE_NEW) {\n                resolve(this.votEditor.value);\n            } else {\n                resolve(this.votEditor.oldValue);\n            }\n        });\n    }\n\n    getGeometryType(): string {\n        return this.votEditor.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType;\n    }\n\n    getKey(): string {\n        return this.getDataSourceType() + this.votEditor.oid;\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new GeoJsonLayer(this, legendLabel, rendered, color);\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.getLayerData().then(data => {\n            return bbox(data as any) as LngLatBoundsLike;\n        });\n    }\n\n}\n\nexport const SEARCH_DATASOURCE_TYPE = \"SEARCH\";\n\nexport class SearchLayerDataSource extends GeoJsonLayerDataSource {\n\n    private mapService: MapService;\n\n    private text: string;\n\n    private date: string;\n\n    private geojson: GeoJSON.GeoJSON;\n\n    constructor(mapService: MapService, text?: string, date?: string) {\n        super(SEARCH_DATASOURCE_TYPE);\n        this.mapService = mapService;\n        this.text = text;\n        this.date = date;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            text: this.text,\n            date: this.date\n        });\n    }\n\n    public getText(): string {\n        return this.text;\n    }\n\n    public getDate(): string {\n        return this.date;\n    }\n\n    public setLayerData(data: GeoJSON.GeoJSON): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public getLayerData(): Promise<GeoJSON.GeoJSON> {\n        if (this.geojson != null) {\n            return new Promise((resolve, reject) => {\n                resolve(this.geojson);\n            });\n        } else {\n            return this.mapService.search(this.text, this.date, false).then(data => {\n                this.geojson = data as any;\n                return data as GeoJSON.GeoJSON;\n            });\n        }\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    getKey(): string {\n        return SEARCH_DATASOURCE_TYPE + this.text + (this.date == null ? \"\" : this.date);\n    }\n\n}\n\nexport const RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE = \"RELVIZ\";\n\nexport class RelationshipVisualizionDataSource extends GeoJsonLayerDataSource {\n\n    relationshipType: string;\n    relationshipCode: string;\n    sourceObject: ObjectReference;\n    bounds: string;\n    date: string;\n\n    data: any;\n    dataPromise: any;\n\n    // eslint-disable-next-line no-use-before-define\n    vizService: RelationshipVisualizationService;\n    geomService: GeometryService;\n\n    constructor(vizService: RelationshipVisualizationService, geomService: GeometryService, relationshipType?: string, relationshipCode?: string, sourceObject?: ObjectReference, bounds?: string, date?: string) {\n        super(RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE);\n        this.vizService = vizService;\n        this.geomService = geomService;\n        this.relationshipType = relationshipType;\n        this.relationshipCode = relationshipCode;\n        this.sourceObject = sourceObject;\n        this.bounds = bounds;\n        this.date = date;\n    }\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            relationshipType: this.relationshipType,\n            relationshipCode: this.relationshipCode,\n            sourceObject: this.sourceObject,\n            bounds: this.bounds,\n            date: this.date\n        });\n    }\n\n    getKey(): string {\n        return RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE + this.relationshipCode + this.sourceObject.code + this.sourceObject.typeCode + this.bounds + ((this.date == null) ? \"\" : this.date);\n    }\n\n    createLayer(legendLabel: string, rendered: boolean, color: string): Layer {\n        return new RelationshipVisualizionLayer(this, legendLabel, rendered, color);\n    }\n\n    getRelationshipType(): string {\n        return this.relationshipType;\n    }\n\n    getRelationshipCode(): string {\n        return this.relationshipCode;\n    }\n\n    getSourceObject(): ObjectReference {\n        return this.sourceObject;\n    }\n\n    hasSameSourceObject(sourceObj: ObjectReference): boolean {\n        return this.sourceObject.code === sourceObj.code && this.sourceObject.objectType === sourceObj.objectType && this.sourceObject.typeCode === sourceObj.typeCode;\n    }\n\n    getDate() {\n        return this.date;\n    }\n\n    public setLayerData(data: GeoJSON): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    public getLayerData(): Promise<GeoJSON> {\n        if (this.data) {\n            return new Promise((resolve, reject) => {\n                resolve(this.data);\n            });\n        } else if (this.dataPromise != null) {\n            return this.dataPromise;\n        } else {\n            this.dataPromise = this.vizService.treeAsGeoJson(this.relationshipType, this.relationshipCode, this.sourceObject, this.date, this.getBoundsAsWKT()).then((data: any) => {\n                this.data = data;\n\n                this.dataPromise = null;\n                return this.data;\n            });\n            return this.dataPromise;\n        }\n    }\n\n    private getBoundsAsWKT(): string {\n        let wktBounds: string = null;\n\n        if (this.bounds != null) {\n            const mapBounds = new LngLatBounds(JSON.parse(this.bounds));\n            wktBounds = this.convertBoundsToWKT(mapBounds);\n        }\n\n        return wktBounds;\n    }\n\n    private convertBoundsToWKT(bounds: LngLatBounds): string {\n        let se = bounds.getSouthEast();\n        let sw = bounds.getSouthWest();\n        let nw = bounds.getNorthWest();\n        let ne = bounds.getNorthEast();\n\n        return \"POLYGON ((\" +\n          se.lng + \" \" + se.lat + \",\" +\n          sw.lng + \" \" + sw.lat + \",\" +\n          nw.lng + \" \" + nw.lat + \",\" +\n          ne.lng + \" \" + ne.lat + \",\" +\n          se.lng + \" \" + se.lat +\n        \"))\";\n    }\n\n    getGeometryType(): string {\n        return \"MIXED\";\n    }\n\n    getBounds(layer: Layer): Promise<LngLatBoundsLike> {\n        return this.getLayerData().then((geojson: any) => {\n            if (geojson == null) { return null; }\n\n            if ((layer as RelationshipVisualizionLayer).getRelatedTypeFilter() != null) {\n                geojson.features = geojson.features.filter(feature => feature.properties.type === (layer as RelationshipVisualizionLayer).getRelatedTypeFilter());\n            }\n\n            return bbox(geojson) as LngLatBoundsLike;\n        });\n    }\n\n}\n\nexport class RelationshipVisualizionLayer extends Layer {\n\n    relatedTypeFilter: string;\n\n    public toJSON(): any {\n        return Object.assign(super.toJSON(), {\n            relatedTypeFilter: this.relatedTypeFilter\n        });\n    }\n\n    getId(): string {\n        return (this.relatedTypeFilter == null) ? \"\" : this.relatedTypeFilter + this.dataSource.getId();\n    }\n\n    public getKey(): string {\n        return (this.relatedTypeFilter == null) ? \"\" : this.relatedTypeFilter + this.dataSource.getKey();\n    }\n\n    setRelatedTypeFilter(relatedTypeFilter: string) {\n        this.relatedTypeFilter = relatedTypeFilter;\n    }\n\n    getRelatedTypeFilter(): string {\n        return this.relatedTypeFilter;\n    }\n\n    configureMapboxLayer(layerType: string, layerConfig: any): void {\n        if (this.relatedTypeFilter != null) {\n            let filter = [\"match\", [\"get\", \"type\"], this.relatedTypeFilter, true, false];\n\n            if (layerConfig[\"filter\"] != null) {\n                layerConfig[\"filter\"].push(filter);\n            } else {\n                layerConfig[\"filter\"] = filter;\n            }\n        }\n    }\n\n}\n\nexport class DataSourceFactory {\n\n    private geomService: GeometryService;\n\n    private registryService: RegistryService;\n\n    private vizService: RelationshipVisualizationService;\n\n    private mapService: MapService;\n\n    private listService: ListTypeService;\n\n    private dataSources: { [key: string] : LayerDataSource } = {};\n\n    constructor(geomService: GeometryService, registryService: RegistryService, vizService: RelationshipVisualizationService, mapService: MapService, listService: ListTypeService) {\n        this.geomService = geomService;\n        this.registryService = registryService;\n        this.vizService = vizService;\n        this.mapService = mapService;\n        this.listService = listService;\n    }\n\n    public getRegisteredDataSource(dataSourceId: string) {\n        return this.dataSources[dataSourceId];\n    }\n\n    public registerDataSource(dataSource: LayerDataSource) {\n        this.dataSources[dataSource.getId()] = dataSource;\n    }\n\n    public unregisterDataSource(dataSourceType: string) {\n        delete this.dataSources[dataSourceType];\n    }\n\n    public newDataSourceFromType(dataSourceType: string): LayerDataSource {\n        if (dataSourceType === GEO_OBJECT_DATA_SOURCE_TYPE) {\n            return new GeoObjectLayerDataSource(this.registryService);\n        } else if (dataSourceType === RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE) {\n            return new RelationshipVisualizionDataSource(this.vizService, this.geomService);\n        } else if (dataSourceType === LIST_VECTOR_SOURCE_TYPE) {\n            return new ListVectorLayerDataSource(this.listService);\n        } else if (dataSourceType === SEARCH_DATASOURCE_TYPE) {\n            return new SearchLayerDataSource(this.mapService);\n        } else {\n            // This can happen if they were editing and refreshed the map with editing layers\n\n            // eslint-disable-next-line no-console\n            console.log(\"Cannot find data source of type '\" + dataSourceType + \"'\");\n            return null;\n        }\n    }\n\n    public deserializeDataSource(obj: any): LayerDataSource {\n        let dataSource = this.newDataSourceFromType(obj.dataSourceType);\n\n        if (dataSource == null && this.dataSources[obj.id] != null) {\n            return this.dataSources[obj.id];\n        } else if (dataSource == null) {\n            return null;\n        }\n\n        dataSource.fromJSON(obj);\n\n        return dataSource;\n    }\n\n    public serializeDataSource(dataSource: LayerDataSource): any {\n        let sds = dataSource.toJSON();\n\n        return sds;\n    }\n\n    public deserializeLayer(sl: any, ds: LayerDataSource): Layer {\n        let layer: Layer;\n\n        layer = ds.createLayer(sl.legendLabel, sl.rendered, sl.color);\n\n        Object.assign(layer, sl); // This will set the dataSource on the layer to an id\n        layer.dataSource = ds; // So we need to reset the dataSource\n\n        return layer;\n    }\n\n    public serializeLayer(layer: Layer): any {\n        let sl: any = layer.toJSON();\n\n        sl.dataSource = layer.dataSource.getId();\n\n        return sl;\n    }\n\n    public deserializeLayers(serialized: { layers: any[], dataSources: any[] }): Layer[] {\n        let layers: Layer[] = [];\n        let dataSources: LayerDataSource[] = [];\n\n        serialized.dataSources.forEach(sds => {\n            let ds = this.deserializeDataSource(sds);\n\n            if (ds != null) {\n                dataSources.push(ds);\n            }\n        });\n\n        serialized.layers.forEach(sl => {\n            let i = dataSources.findIndex(ds => ds.getId() === sl.dataSource);\n\n            if (i !== -1) {\n                layers.push(this.deserializeLayer(sl, dataSources[i]));\n            }\n        });\n\n        return layers;\n    }\n\n    public serializeLayers(layers: Layer[]): { layers: any[], dataSources: any[] } {\n        let ret = { layers: [], dataSources: [] };\n\n        layers.forEach(layer => {\n            if (ret.dataSources.findIndex(sds => sds.id === layer.dataSource.getId()) === -1) {\n                let sds = this.serializeDataSource(layer.dataSource);\n\n                ret.dataSources.push(sds);\n            }\n        });\n\n        layers.forEach(layer => {\n            let serializedLayer = this.serializeLayer(layer);\n\n            ret.layers.push(serializedLayer);\n        });\n\n        return ret;\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { Classification, ClassificationNode } from \"@registry/model/classification-type\";\nimport { PageResult } from \"@shared/model/core\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ClassificationService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    apply(classificationCode: string, parentCode: string, classification: Classification, isNew: boolean): Promise<Classification> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            classification: classification,\n            isNew: isNew\n        };\n\n        if (parentCode != null) {\n            params[\"parentCode\"] = parentCode;\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<Classification>(registry.contextPath + \"/classification/apply\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(classificationCode: string, code: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            code: code\n        };\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/classification/remove\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    move(classificationCode: string, code: string, parentCode: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            code: code,\n            parentCode: parentCode\n        };\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/classification/move\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getChildren(classificationCode: string, code: string, pageNumber: number, pageSize: number): Promise<PageResult<Classification>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        if (code != null) {\n            params = params.set(\"code\", code);\n        }\n\n        return this.http.get<PageResult<Classification>>(registry.contextPath + \"/classification/get-children\", { params: params })\n            .toPromise();\n    }\n\n    getAncestorTree(classificationCode: string, rootCode: string, code: string, pageSize: number): Promise<ClassificationNode> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"code\", code);\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        if (rootCode != null) {\n            params = params.set(\"rootCode\", rootCode);\n        }\n\n        return this.http.get<ClassificationNode>(registry.contextPath + \"/classification/get-ancestor-tree\", { params: params })\n            .toPromise();\n    }\n\n    search(classificationCode: string, rootCode: string, text: string): Promise<Classification[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n\n        if (rootCode != null) {\n            params = params.set(\"rootCode\", rootCode);\n        }\n\n        if (text != null) {\n            params = params.set(\"text\", text);\n        }\n\n        return this.http.get<Classification[]>(registry.contextPath + \"/classification/search\", { params: params })\n            .toPromise();\n    }\n\n    get(classificationCode: string, code: string): Promise<Classification> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"code\", code);\n\n        return this.http.get<Classification>(registry.contextPath + \"/classification/get\", { params: params })\n            .toPromise();\n    }\n\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable padded-blocks */\nimport { GeoObjectOverTime, HierarchyOverTime, GeoObjectType, AttributeType } from \"./registry\";\nimport { ActionTypes } from \"./constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\nexport enum SummaryKey {\n    NEW = \"NEW\",\n    UNMODIFIED = \"UNMODIFIED\",\n    DELETE = \"DELETE\",\n    UPDATE = \"UPDATE\",\n    TIME_CHANGE = \"TIME_CHANGE\",\n    VALUE_CHANGE = \"VALUE_CHANGE\",\n}\n\nexport class Document {\n    fileName: string;\n    oid: string;\n}\n\nexport class Geometry {\n    type: string;\n    coordinates: number[][] | number[];\n}\n\nexport class ValueOverTimeDiff {\n    oid: string;\n    action: string; // Can be one of DELETE, UPDATE, CREATE\n    oldValue: any;\n    newValue: any;\n    newStartDate: string;\n    newEndDate: string;\n    oldStartDate: string;\n    oldEndDate: string;\n    parents?: any;\n    oldParents?: any;\n}\n\n// export class AbstractAction {\n//    approvalStatus: string;\n//    createActionDate: Date;\n//    label: string;\n//    oid: string;\n//    actionType: string;\n//    actionLabel: string;\n//    decisionMaker?: string;\n//    documents: Document[];\n// }\n\nexport class AbstractAction {\n    oid: string;\n    actionType: ActionTypes;\n    actionLabel: string;\n    createActionDate: string;\n    contributorNotes?: string;\n    maintainerNotes?: string;\n    additionalNotes?: string;\n    approvalStatus: string;\n    statusLabel: string;\n    createdBy: string;\n    documents: any[];\n    permissions: string[];\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n    geoObjectJson: GeoObjectOverTime;\n    parentJson: HierarchyOverTime[];\n\n    constructor() {\n        super();\n        this.actionType = ActionTypes.CREATEGEOOBJECTACTION;\n    }\n}\n\nexport class UpdateAttributeOverTimeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { \"valuesOverTime\": ValueOverTimeDiff[], hierarchyCode?: string };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = { valuesOverTime: [] };\n    }\n}\n\nexport class UpdateAttributeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { oldValue?: any, newValue?: any };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = {};\n    }\n}\n\nexport class ChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n}\n\nexport class UpdateChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n    geoObject: GeoObjectOverTime;\n}\n\nexport class ChangeRequest {\n    oid: string;\n    createdBy: string;\n    createDate: Date;\n    approvalStatus: string;\n    total: number;\n    pending: number;\n    documents: Document[];\n    actions: AbstractAction[];\n    current?: ChangeRequestCurrentObject & UpdateChangeRequestCurrentObject;\n    type: string; // Can be one of [\"CreateGeoObject\", \"UpdateGeoObject\"]\n    statusLabel?: string;\n    phoneNumber?: string;\n    email?: string;\n    permissions?: string[];\n    isNew?: boolean;\n\n    constructor() {\n        this.isNew = true;\n    }\n\n    public static getActionsForAttribute(cr: ChangeRequest, attributeName: string, hierarchyCode: string): AbstractAction[] {\n        if (cr.type === \"CreateGeoObject\") {\n            return cr.actions;\n        } else {\n            let newActions = [];\n\n            for (let i = 0; i < cr.actions.length; ++i) {\n                let action = cr.actions[i];\n\n                if (action.actionType === \"UpdateAttributeAction\") {\n                    let updateAttrAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === attributeName &&\n                      (attributeName !== \"_PARENT_\" || updateAttrAction.attributeDiff.hierarchyCode === hierarchyCode)) {\n                        newActions.push(cr.actions[i]);\n                    }\n                }\n            }\n\n            return newActions;\n        }\n    }\n}\n\n// export class UpdateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class CreateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class AddChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyTypeCode: string;\n//    contributorNotes: string;\n//    maintainerNotes: string;\n//    createdBy: string;\n// }\n\n// export class RemoveChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyCode: string;\n// }\n\n// export class SetParentAction extends AbstractAction {\n//    childCode: string;\n//    childTypeCode: string;\n//    json: HierarchyOverTime[];\n// }\n\nexport class GovernanceStatus {\n    key: string;\n    label: string;\n}\n\nexport class PageEvent {\n    type: string;\n    data: any;\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { ImportConfiguration } from \"@registry/model/io\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    implementDecisions(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/implement-decisions\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    update(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/update\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setActionStatus(actionOid: String, status: String): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/changerequest/set-action-status\", JSON.stringify({ actionOid: actionOid, status: status }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAllRequests(pageSize: number, pageNumber: number, filter: string, sort: any[], oid:string): Promise<PageResult<ChangeRequest>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"filter\", filter);\n        params = params.set(\"sort\", JSON.stringify(sort));\n\n        if (oid != null) {\n            params = params.set(\"oid\", oid);\n        }\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<ChangeRequest>>(registry.contextPath + \"/changerequest/get-all-requests\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    rejectChangeRequest(request: ChangeRequest): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<void>(registry.contextPath + \"/changerequest/reject\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(requestId: string): Promise<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<string>(registry.contextPath + \"/changerequest/delete\", JSON.stringify({ requestId: requestId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteFile(crOid: string, fileId: string): Promise<ImportConfiguration> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ImportConfiguration>(registry.contextPath + \"/changerequest/delete-file-cr\", JSON.stringify({ crOid: crOid, vfOid: fileId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport {\r\n    GeoObject, GeoObjectType, AttributeType, Term, ParentTreeNode,\r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob\r\n} from \"@registry/model/registry\";\r\n\r\nimport { HierarchyType } from \"@registry/model/hierarchy\";\r\nimport { Progress } from \"@shared/model/progress\";\r\n\r\nimport { Organization, LocaleView, PageResult } from \"@shared/model/core\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\nexport interface AttributeTypeService {\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType>;\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType>;\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean>;\r\n}\r\n\r\n@Injectable()\r\nexport class RegistryService implements AttributeTypeService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }>(registry.contextPath + \"/cgr/init\")\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (types != null) {\r\n            params = params.set(\"types\", JSON.stringify(types));\r\n        }\r\n\r\n        if (hierarchies != null) {\r\n            params = params.set(\"hierarchies\", JSON.stringify(hierarchies));\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>(registry.contextPath + \"/cgr/geoobjecttype/get-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects(childCode: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"childCode\", childCode);\r\n        params = params.set(\"childTypeCode\", childTypeCode);\r\n        params = params.set(\"parentTypes\", JSON.stringify(parentTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>(registry.contextPath + \"/cgr/geoobject/get-parent-geoobjects\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getChildGeoObjects(parentCode: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"parentCode\", parentCode);\r\n        params = params.set(\"parentTypeCode\", parentTypeCode);\r\n        params = params.set(\"childrenTypes\", JSON.stringify(childrenTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>(registry.contextPath + \"/cgr/geoobject/getchildren\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    doesGeoObjectExistAtRange(startDate: string, endDate: string, typeCode: string, code: string): Promise<{ exists: boolean, invalid: boolean }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"startDate\", startDate);\r\n        params = params.set(\"endDate\", endDate);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"code\", code);\r\n\r\n        return this.http\r\n            .get<{ exists: boolean, invalid: boolean }>(registry.contextPath + \"/geoobject/exists-at-range\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/create\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/update\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType(code: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/delete\", JSON.stringify({ code: code }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/addattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/updateattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<boolean>(registry.contextPath + \"/cgr/geoobjecttype/deleteattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeName: attributeName }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: term }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/updateterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: termJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject(id: string, typeCode: string, showOverlay: boolean = true): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"id\", id);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject-time/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject(code: string, typeCode: string, showOverlay: boolean = true): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>(registry.contextPath + \"/cgr/geoobject/get-hierarchies-over-time\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, parentTypeCode: string, hierarchy: string, startDate: string, endDate: string): Promise<{ id: string, code: string, name: string, typeCode: string, uid: string }[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if (parentTypeCode != null) {\r\n            params.parentTypeCode = parentTypeCode;\r\n        }\r\n\r\n        if (startDate != null && endDate != null) {\r\n            params.startDate = startDate;\r\n            params.endDate = endDate;\r\n        }\r\n\r\n        return this.http\r\n            .post<{ id: string, code: string, name: string, typeCode: string, uid: string }[]>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-active\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-completed\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-import-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-export-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/import-resolve\", JSON.stringify({ historyId: historyId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitValidationResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/validation-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitErrorResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/error-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<LocaleView[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<LocaleView[]>(registry.contextPath + \"/localization/get-locales\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", geoObjectCode);\r\n        params = params.set(\"typeCode\", geoObjectTypeCode);\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>(registry.contextPath + \"/cgr/geoobject-time/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectOverTime(typeCode: string, showOverlay: boolean = true): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject-time/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>(registry.contextPath + \"/cgr/geoobject/setAttributeVersions\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit(geoObjectCode: string, geoObjectTypeCode: string, actions: string, masterListId: string, notes: string, showOverlay: boolean = true): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        // TODO\r\n        // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n        // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        // for(const prop in geoObject.attributes) {\r\n        //\tlet attr = geoObject.attributes[prop];\r\n        //\tif(attr.type === \"date\"){\r\n        //\t\tattr.values.forEach( val => {\r\n        //\t\t\tval.value = new Date(val.value).getTime().toString();\r\n        //\t\t})\r\n        //\t}\r\n        // }\r\n\r\n        let params = { geoObjectCode: geoObjectCode, geoObjectTypeCode: geoObjectTypeCode, actions: actions };\r\n\r\n        if (masterListId != null) {\r\n            params[\"masterListId\"] = masterListId;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/updateGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n    * Not really part of the RegistryService\r\n    */\r\n    applyGeoObjectCreate(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string, showOverlay: boolean = true): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n        // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        for (const prop in geoObject.attributes) {\r\n            let attr = geoObject.attributes[prop];\r\n            if (attr.type === \"date\") {\r\n                attr.values.forEach(val => {\r\n                    val.value = new Date(val.value).getTime().toString();\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = { geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if (parentTreeNode != null) {\r\n            params[\"parentTreeNode\"] = parentTreeNode;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/createGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    progress(oid: string): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<Progress>(registry.contextPath + \"/master-list/progress\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getDatasetBounds(oid: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/master-list/bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getOrganizations(): Promise<Organization[]> {\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(registry.contextPath + \"/cgr/organizations/get-all\")\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\nimport { ActivatedRoute } from \"@angular/router\";\nimport { ObjectReference, Relationship, TreeData } from \"@registry/model/graph\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class RelationshipVisualizationService {\n\n    constructor(private http: HttpClient, private eventService: EventService, private route: ActivatedRoute) {\n    }\n\n    tree(relationshipType: string, graphTypeCode: string, sourceVertex: ObjectReference, date: string, boundsWKT: string): Promise<TreeData> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"sourceVertex\", JSON.stringify(sourceVertex));\n\n        if (relationshipType != null) {\n            params = params.set(\"relationshipType\", relationshipType);\n        }\n\n        if (graphTypeCode != null) {\n            params = params.set(\"graphTypeCode\", graphTypeCode);\n        }\n\n        if (date) {\n            params = params.set(\"date\", date);\n        }\n\n        if (boundsWKT) {\n            params = params.set(\"boundsWKT\", boundsWKT);\n        }\n\n        // this.eventService.start();\n\n        return this.http\n            .get<TreeData>(registry.contextPath + \"/relationship-visualization/tree\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    treeAsGeoJson(relationshipType: string, graphTypeCode: string, sourceObject: ObjectReference, date: string, boundsWKT: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"sourceVertex\", JSON.stringify(sourceObject));\n        params = params.set(\"graphTypeCode\", graphTypeCode);\n\n        if (relationshipType != null) {\n            params = params.set(\"relationshipType\", relationshipType);\n        }\n\n        if (date) {\n            params = params.set(\"date\", date);\n        }\n\n        if (boundsWKT) {\n            params = params.set(\"boundsWKT\", boundsWKT);\n        }\n\n        // this.eventService.start();\n\n        return this.http\n            .get<any>(registry.contextPath + \"/relationship-visualization/treeAsGeoJson\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    relationships(objectType: \"BUSINESS\" | \"GEOOBJECT\", typeCode: string): Promise<Relationship[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"objectType\", objectType);\n        params = params.set(\"typeCode\", typeCode);\n\n        // this.eventService.start();\n\n        return this.http\n            .get<any>(registry.contextPath + \"/relationship-visualization/relationships\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ClassificationTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    apply(classificationType: ClassificationType): Promise<ClassificationType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ClassificationType>(registry.contextPath + \"/classification-type/apply\", JSON.stringify({ classificationType: classificationType }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(type: ClassificationType): Promise<ClassificationType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ClassificationType>(registry.contextPath + \"/classification-type/remove\", JSON.stringify({ oid: type.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object): Promise<PageResult<ClassificationType>> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            criteria: criteria\n        } as any;\n\n        return this.http.post<PageResult<ClassificationType>>(registry.contextPath + \"/classification-type/page\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    get(classificationCode: string): Promise<ClassificationType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n\n        return this.http.get<ClassificationType>(registry.contextPath + \"/classification-type/get\", { params: params })\n            .toPromise();\n    }\n\n}\n","\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\nexport class WebSockets {\n\n    static buildBaseUrl(): string {\n        let protocol = \"wss\";\n\n        if (window.location.protocol.indexOf(\"https\") !== -1) {\n            protocol = \"wss\"; // Web Socket Secure\n        } else {\n            protocol = \"ws\";\n        }\n\n        let baseUrl = protocol + \"://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + registry.contextPath;\n\n        return baseUrl;\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { HistoricalRow, TransitionEvent } from \"@registry/model/transition-event\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class TransitionEventService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageSize: number, pageNumber: number, attrConditions: any): Promise<PageResult<TransitionEvent>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"attrConditions\", JSON.stringify(attrConditions));\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<TransitionEvent>>(registry.contextPath + \"/transition-event/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getDetails(oid: string): Promise<TransitionEvent> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<TransitionEvent>(registry.contextPath + \"/transition-event/get-details\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/apply\", JSON.stringify({ event: event }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/delete\", JSON.stringify({ eventId: event.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getHistoricalReport(typeCode: string, startDate: string, endDate: string, pageSize: number, pageNumber: number): Promise<PageResult<HistoricalRow>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode.toString());\n        params = params.set(\"startDate\", startDate.toString());\n        params = params.set(\"endDate\", endDate.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<HistoricalRow>>(registry.contextPath + \"/transition-event/historical-report\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-text\",\n    templateUrl: \"./localized-text.component.html\",\n    styleUrls: [\"./localized-text.css\"],\n})\nexport class LocalizedTextComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Input() public inlinelayout: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","\n<div *ngFor=\"let localeValue of value.localeValues\">\n  <div [ngClass]=\"{'row' : inlinelayout, 'row-holder' : !inlinelayout}\" >\n    <div [ngClass]=\"{'col-md-12' : inlinelayout}\">\n      <div class=\"form-group\">\n        <div [ngClass]=\"{'label-holder' : !inlinelayout}\" >\n          <label>\n            <localize [key]=\"key\"></localize>\n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n        </div>\n        <div [ngClass]=\"{'holder' : !inlinelayout}\">\n          <span class=\"text\">\n            <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType } from \"./registry\";\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\n    matchStrategy: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    formatType: string;\n    objectType: string;\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n    isExternal: string;\n    externalSystemId: string;\n    externalSystem?: any;\n    revealGeometryColumn?: any;\n    onValidChange: any;\n    externalIdAttributeTarget: string;\n}\n\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-input\",\n    templateUrl: \"./localized-input.component.html\",\n    styleUrls: []\n})\nexport class LocalizedInputComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\nimport * as mapboxgl from \"mapbox-gl\";\r\n\r\nimport { LocationInformation } from \"@registry/model/location-manager\";\r\nimport { EventService } from \"@shared/service\";\r\nimport { GeoObject } from \"@registry/model/registry\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\r\ndeclare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) {\r\n        (mapboxgl as any).accessToken = registry.mapboxAccessToken;\r\n    }\r\n\r\n    roots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (typeCode != null) {\r\n            params = params.set(\"typeCode\", typeCode);\r\n        }\r\n\r\n        if (hierarchyCode != null) {\r\n            params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        }\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<LocationInformation>(registry.contextPath + \"/registrylocation/roots\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    search(text: string, date: string, showOverlay: boolean = true): Promise<{ type: string, features: GeoObject[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"text\", text);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<{ type: string, features: GeoObject[] }>(registry.contextPath + \"/registrylocation/search\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { GeoObjectType, AttributeType } from \"@registry/model/registry\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\n\n@Component({\n    selector: \"attribute-input\",\n    templateUrl: \"./attribute-input.component.html\",\n    styleUrls: [\"./attribute-input.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\"))\n            // transition('show => none', animate('100ms'))\n        ])\n    ]\n})\nexport class AttributeInputComponent implements OnChanges {\n\n    @Input() isNew: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() type: string = null;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType;\n    @Output() attributeChange = new EventEmitter<AttributeType>();\n    message: string = null;\n\n    state: string = \"none\";\n    classifications: ClassificationType[] = [];\n\n    constructor(private service: ClassificationTypeService, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.type != null && this.attribute.type === \"classification\") {\n            this.service.page({}).then((page) => {\n                this.classifications = page.resultSet;\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    toggleIsUnique(): void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.attribute.code) {\n            // if code has a space\n            if (this.attribute.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            if (this.attribute.label.localeValues[0].value.length === 0) {\n                return false;\n            }\n\n            if (this.type === \"float\" && (this.attribute.precision == null || this.attribute.precision.toString() === \"\")) {\n                return false;\n            }\n\n            if (this.type === \"float\" && (this.attribute.scale == null || this.attribute.scale.toString() === \"\")) {\n                return false;\n            }\n\n            if (this.type === \"classification\" && (this.attribute.classificationType == null || this.attribute.classificationType.length === 0)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","<div>\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"!isNew\" [(ngModel)]=\"attribute.code\" name=\"code\" required\n          geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\">\n  </localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"type === 'float'\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"type === 'float'\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"type === 'classification'\">\n    <div class=\"row-holder\">\n      <div class=\"label-holder\">\n        <label>\n          <localize key=\"data.type.label.classification\"></localize>\n        </label>\n      </div>\n      <div class=\"holder\">\n        <select class=\"select-area\" name=\"classificationType\" [(ngModel)]=\"attribute.classificationType\" required\n          [disabled]=\"!isNew\">\n          <option></option>\n          <option *ngFor=\"let classification of classifications\" [value]=\"classification.code\">\n            {{classification.displayLabel.localizedValue}}\n          </option>\n        </select>\n      </div>\n    </div>\n\n    <div class=\"row-holder\" style=\"overflow: initial;\" *ngIf=\"attribute.classificationType != null && attribute.classificationType.length > 0\">\n      <div class=\"label-holder\">\n        <label>\n          Root Term\n        </label>\n      </div>\n      <div class=\"holder\">\n        <classification-field\n        [classificationType]=\"attribute.classificationType\"\n        name=\"classification-root\"\n        container=\"body\"\n        [(value)]=\"attribute.rootTerm\" \n        [disabled]=\"!isNew\">\n       </classification-field>\n      </div>\n    </div>\n\n  </ng-container>\n</div>","\nimport { Injectable } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { LocationManagerState } from \"@registry/component/location-manager/location-manager.component\";\nimport { LayerRecord, ListTypeVersion } from \"@registry/model/list-type\";\nimport { GeoObject, GeoObjectType } from \"@registry/model/registry\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\nimport { GeoObjectLayerDataSource, Layer, ListVectorLayer, ListVectorLayerDataSource, RelationshipVisualizionDataSource, SearchLayerDataSource } from \"./layer-data-source\";\nimport { DateService } from \"@shared/service\";\nimport { GeometryService, RegistryService } from \".\";\nimport * as ColorGen from \"color-generator\";\nimport { ListTypeService } from \"./list-type.service\";\nimport { SELECTED_COLOR } from \"./geometry.service\";\n\n@Injectable()\nexport class LocationManagerStateService {\n\n    constructor(private route: ActivatedRoute, private router: Router, private cacheService: RegistryCacheService, private geomService: GeometryService, private dateService: DateService, private registryService: RegistryService, private listTypeService: ListTypeService) {\n        this.cacheService.getTypeCache(); // Force type fetch\n    }\n\n    public selectListRecord(version: ListTypeVersion, uid: string, record: LayerRecord, state: LocationManagerState = {}): LocationManagerState {\n        state.version = version.oid;\n        state.uid = uid;\n        state.text = null;\n\n        // Layer for the selected record (if applicable)\n        if (record != null && record.recordType === \"GEO_OBJECT\") {\n            let geo = this.geoObjectFromRecord(record);\n\n            let layer: Layer = this.addLayerForGeoObject(geo, null, state);\n\n            this.geomService.zoomOnReady(layer.getId());\n\n            state.type = geo.properties.type;\n            state.code = geo.properties.code;\n            state.objectType = \"GEOOBJECT\";\n        } else {\n            let zoomLayer;\n\n            if (record != null) {\n                // TODO : This LayerRecord interface is horrifically overloaded\n                let label;\n\n                if (record.displayLabel != null && record.displayLabel.localizedValue != null) {\n                    label = record.displayLabel.localizedValue;\n                } else if (record.data != null && record.data.displayLabelDefaultLocale != null) {\n                    label = record.data.displayLabelDefaultLocale;\n                } else {\n                    throw new Error(\"Unexpected 'record' object.\");\n                }\n\n                this.addLayerForList(version, null, state);\n                zoomLayer = this.addLayerForList(version, { label: label, uid: uid }, state);\n\n                state.date = record.forDate;\n            } else {\n                zoomLayer = this.addLayerForList(version, null, state);\n            }\n\n            this.geomService.zoomOnReady(zoomLayer.getId());\n        }\n\n        return state;\n    }\n\n    public clearListRecord(state: LocationManagerState = {}): LocationManagerState {\n        state.version = null;\n        state.uid = null;\n        state.text = null;\n\n        return state;\n    }\n\n    geoObjectFromRecord(record: LayerRecord): GeoObject {\n        return {\n            properties: {\n                type: record.typeCode,\n                uid: record.uid,\n                code: record.code,\n                displayLabel: record.displayLabel\n                // displayLabel: new LocalizedValue(record.displayLabel, [])\n            }\n        } as GeoObject;\n    }\n\n    addLayerForList(version: ListTypeVersion, objectFilter: { label: string, uid: string } = null, state: LocationManagerState = {}): Layer {\n        let layers: Layer[] = state.layers == null ? [] : this.geomService.deserializeLayers(state.layers);\n        let dataSource = new ListVectorLayerDataSource(this.listTypeService, version.oid);\n\n        let label = version.displayLabel;\n        if (objectFilter != null) {\n            label = objectFilter.label + \" (\" + label + \")\";\n        }\n\n        let color;\n        if (objectFilter == null) {\n            color = ColorGen().hexString();\n        } else {\n            color = SELECTED_COLOR;\n        }\n\n        let layer: ListVectorLayer = dataSource.createLayer(label, true, color) as ListVectorLayer;\n\n        if (objectFilter != null) {\n            layer.setObjectFilter(objectFilter.uid);\n        }\n\n        // Remove any existing List layer(s)\n        layers = layers.filter(l =>\n            !(l.dataSource instanceof ListVectorLayerDataSource) ||\n            l.getKey() === layer.getKey() ||\n            ((l as ListVectorLayer).getObjectFilter() == null && (l.dataSource as ListVectorLayerDataSource).getVersionId() === version.oid) ||\n            l.getPinned()\n        );\n\n        // Remove search layer\n        layers = layers.filter(layer => layer.getPinned() || (!(layer.dataSource instanceof SearchLayerDataSource) && !(layer.dataSource instanceof RelationshipVisualizionDataSource)));\n\n        if (layers.findIndex(l => l.getKey() === layer.getKey()) === -1) {\n            layers.splice(0, 0, layer);\n        }\n\n        state.layers = this.geomService.serializeLayers(layers);\n\n        return layer;\n    }\n\n    addLayerForGeoObject(geoObject: GeoObject, date: string = null, state: LocationManagerState = {}): Layer {\n        let layers: Layer[] = state.layers == null ? [] : this.geomService.deserializeLayers(state.layers);\n        const type: GeoObjectType = this.cacheService.getTypeCache().getTypeByCode(geoObject.properties.type);\n\n        let dataSource = new GeoObjectLayerDataSource(this.registryService, geoObject.properties.code, geoObject.properties.type, date);\n\n        let displayLabel = geoObject.properties.displayLabel.localizedValue;\n        let typeLabel = type.label.localizedValue;\n        let sDate = date == null ? \"\" : \" \" + this.dateService.formatDateForDisplay(date);\n        let label = displayLabel + \" \" + sDate + \"(\" + typeLabel + \")\";\n\n        let layer = dataSource.createLayer(label, true, ColorGen().hexString());\n\n        // Remove any existing Geo-Object layer(s)\n        layers = layers.filter(l =>\n            !(l.dataSource instanceof GeoObjectLayerDataSource) ||\n            l.getKey() === layer.getKey() ||\n            l.getPinned()\n        );\n\n        // Remove search layer\n        layers = layers.filter(layer => layer.getPinned() || (!(layer.dataSource instanceof SearchLayerDataSource) && !(layer.dataSource instanceof RelationshipVisualizionDataSource)));\n\n        if (layers.findIndex(l => l.getKey() === layer.getKey()) === -1) {\n            layers.splice(0, 0, layer);\n        }\n\n        state.layers = this.geomService.serializeLayers(layers);\n\n        return layer;\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from \"rxjs\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ContextMenuService, ContextMenuComponent } from \"ngx-contextmenu\";\nimport * as d3 from \"d3\";\n\nimport { CreateHierarchyTypeModalComponent } from \"./modals/create-hierarchy-type-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./modals/create-geoobjtype-modal.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./modals/manage-geoobjecttype-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { Organization } from \"@shared/model/core\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { SvgHierarchyType } from \"./d3/svg-hierarchy-type\";\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection } from \"./d3/svg-util\";\nimport { SvgHierarchyNode } from \"./d3/svg-hierarchy-node\";\nimport { ImportTypesModalComponent } from \"./modals/import-types-modal.component\";\nimport Utils from \"@registry/utility/Utils\";\n\nexport const TREE_SCALE_FACTOR_X: number = 1.8;\nexport const TREE_SCALE_FACTOR_Y: number = 1.8;\n\nexport const DEFAULT_NODE_FILL = \"#e6e6e6\";\nexport const DEFAULT_NODE_BANNER_COLOR = \"#A29BAB\";\nexport const INHERITED_NODE_FILL = \"#d4d4d4\";\nexport const INHERITED_NODE_BANNER_COLOR = \"#a0a0a0\";\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n\n  active: boolean;\n  label: string;\n\n}\n\nexport interface DropTarget {\n  dropSelector: string;\n  onDrag(dragEl: Element, dropEl: Element, event: any): void;\n  onDrop(dragEl: Element, event: any): void;\n  [others: string]: any;\n}\n\n@Component({\n\n    selector: \"hierarchies\",\n    templateUrl: \"./hierarchy.component.html\",\n    styleUrls: [\"./hierarchy.css\"]\n})\nexport class HierarchyComponent implements OnInit {\n\n  userOrganization: string = null;\n\n  primarySvgHierarchy: SvgHierarchyType;\n  currentHierarchy: HierarchyType = null;\n\n  instance: Instance = new Instance();\n  hierarchies: HierarchyType[];\n  organizations: Organization[];\n  geoObjectTypes: GeoObjectType[] = [];\n\n  hierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n  filter: string = \"\";\n  filteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  filteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n  @ViewChild(\"searchInput\", { static: true }) searchInput: ElementRef;\n\n  hierarchyTypeDeleteExclusions: string[] = [\"AllowedIn\", \"IsARelationship\"];\n  geoObjectTypeDeleteExclusions: string[] = [\"ROOT\"];\n\n  _opened: boolean = false;\n\n  /*\n   * Reference to the modal current showing\n  */\n  private bsModalRef: BsModalRef;\n\n  /*\n   * Template for tree node menu\n   */\n  @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n  /*\n   * Template for leaf menu\n   */\n  @ViewChild(\"leafMenu\") public leafMenuComponent: ContextMenuComponent;\n\n  /*\n   * Currently clicked on id for delete confirmation modal\n   */\n  current: any;\n\n  isSRA: boolean = false;\n\n  hierarchyService: HierarchyService;\n\n  localizeService: LocalizationService;\n\n  options = {\n    //      allowDrag: (any) => node.isLeaf,\n    //      allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n    // return true / false based on element, to.parent, to.index. e.g.\n    //          return parent.hasChildren;\n    //        },\n      displayField: \"label\",\n      actionMapping: {\n          mouse: {\n              click: (tree: any, node: any, $event: any) => {\n                  this.treeNodeOnClick(node, $event);\n              },\n              contextMenu: (tree: any, node: any, $event: any) => {\n                  this.handleOnMenu(node, $event);\n              }\n          }\n      },\n      mouse: {\n      //              drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n      //                console.log('drag', from, to); // from === {name: 'first'}\n      //                // Add a node to `to.parent` at `to.index` based on the data in `from`\n      //                // Then call tree.update()\n      //              }\n      }\n  };\n\n  constructor(hierarchyService: HierarchyService, private modalService: BsModalService,\n    private contextMenuService: ContextMenuService,\n    localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n      this.isSRA = authService.isSRA();\n\n      this.hierarchyService = hierarchyService;\n      this.localizeService = localizeService;\n  }\n\n  ngOnInit(): void {\n      this.refreshAll(null);\n\n      fromEvent(this.searchInput.nativeElement, \"keyup\").pipe(\n\n      // get value\n          filter(Boolean),\n          debounceTime(500),\n          distinctUntilChanged(),\n          tap(() => {\n              this.onFilterChange();\n          })\n      // subscription for response\n      ).subscribe();\n  }\n\n  localize(key: string): string {\n      return this.localizeService.decode(key);\n  }\n\n  private renderTree(): void {\n      if (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length == 0) {\n          d3.select(\"#svg\").remove();\n\n          let canDrag = false;\n          if (this.currentHierarchy != null) {\n              canDrag = (this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode));\n          }\n\n          this.geoObjectTypes.forEach((got: GeoObjectType) => {\n              got.canDrag = canDrag;\n          });\n          return;\n      }\n\n      d3.select(\".g-context-menu\").remove();\n      d3.select(\".hierarchy-inherit-button\").remove();\n      d3.select(\".g-hierarchy-got-connector\").remove();\n\n      let overflowDiv: any = d3.select(\"#overflow-div\").node();\n      let scrollLeft = overflowDiv.scrollLeft;\n      let scrollRight = overflowDiv.scrollRight;\n\n      let svg = d3.select(\"#svg\");\n\n      if (svg.node() == null) {\n          svg = d3.select(\"#svgHolder\").append(\"svg\");\n          svg.attr(\"id\", \"svg\");\n      }\n\n      this.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService, this.authService);\n      this.primarySvgHierarchy.render();\n\n      this.calculateSvgViewBox();\n\n      let overflowDiv2: any = d3.select(\"#overflow-div\").node();\n      overflowDiv2.scrollLeft = scrollLeft;\n      overflowDiv2.scrollRight = scrollRight;\n\n    // this.registerSvgHandlers();\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n          got.canDrag = this.calculateCanDrag(got);\n      });\n  }\n\n  calculateSvgViewBox(): void {\n      let svg: any = d3.select(\"#svg\");\n      let svgNode: any = svg.node();\n\n      let { x, y, width, height } = svgNode.getBBox();\n\n      const xPadding = 30;\n      const yPadding = 40;\n      svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n      width = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n      height = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n      d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n    // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n  }\n\n  calculateCanDrag(got: GeoObjectType): boolean {\n      let hierarchyComponent = this;\n\n      if (this.primarySvgHierarchy != null) {\n      // Check permissions against GOT and Hierarchy org\n          if (!(this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode))) {\n              return false;\n          }\n\n      // If the child is already on the graph, they cannot drag.\n          if (this.primarySvgHierarchy.getNodeByCode(got.code) != null) {\n              return false;\n          }\n\n      // If we are abstract, and one of our children is on the graph, they cannot drag.\n          if (got.isAbstract) {\n              let isChildOnGraph = false;\n\n              this.geoObjectTypes.forEach((child: GeoObjectType) => {\n                  if (child.superTypeCode === got.code) {\n                      if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null) {\n                          isChildOnGraph = true;\n                      }\n                  }\n              });\n\n              if (isChildOnGraph) {\n                  return false;\n              }\n          }\n      // If we are a child of an abstract type, and our abstract type is on the graph, we cannot drag.\n          else if (got.superTypeCode != null) {\n              if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null) {\n                  return false;\n              }\n          }\n      } else {\n      // If there is no selected hierarchy, they cannot drag.\n          return false;\n      }\n\n      return true;\n  }\n\n  calculateRelatedHierarchies(got: GeoObjectType): string[] {\n      let relatedHiers = [];\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchyType = this.hierarchies[i];\n\n          if (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n              let d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n              let found = d3Hierarchy.find((node) => {\n                  return node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n              });\n\n              if (found) {\n                  relatedHiers.push(hierarchyType.code);\n              }\n          }\n      }\n\n      return relatedHiers;\n  }\n\n  private registerDragHandlers(): any {\n      let that = this;\n\n      let dropTargets: DropTarget[] = [];\n\n    // Empty Hierarchy Drop Zone\n      dropTargets.push({\n          dropSelector: \".drop-box-container\",\n          onDrag: function(dragEl: Element, dropEl: Element) {\n              if (this.dropEl != null) {\n                  this.dropEl.style(\"border-color\", null);\n                  this.dropEl = null;\n              }\n\n              if (dropEl != null) {\n                  let emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n                  if (emptyHierarchyDropZone != null) {\n                      this.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n                  }\n              }\n          },\n          onDrop: function(dragEl: Element) {\n              if (this.dropEl != null) {\n                  this.dropEl.style(\"border-color\", null);\n                  that.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n                  this.dropEl = null;\n              }\n          }\n      });\n\n    // SVG GeoObjectType Drop Zone\n      dropTargets.push({\n          dropSelector: \".svg-got-body-rect\",\n          onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n              this.clearDropZones();\n\n              let lastDropEl = this.dropEl;\n\n        // translate page to SVG co-ordinate\n              let svg: any = d3.select(\"#svg\").node();\n\n              if (svg == null) {\n                  return;\n              }\n              let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        // Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n        // we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones.\n              that.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n                  if (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n                      this.dropEl = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + node.data.geoObjectType + \"\\\"]\");\n                      node.data.activeDropZones = true;\n\n                      if (node.parent == null) {\n                          node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n                      }\n                  } else {\n                      node.data.activeDropZones = false;\n\n                      if (node.parent == null) {\n                          node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                      }\n                  }\n              });\n\n              if (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") != this.dropEl.attr(\"data-gotCode\"))) {\n                  this.clearGhostNodes(true);\n              }\n\n              if (this.dropEl != null) {\n                  let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n                  const gotCode = this.dropEl.attr(\"data-gotCode\");\n                  let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n                  let isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n                  this.dropEl.attr(\"stroke\", \"blue\");\n\n                  const dropElX = parseInt(this.dropEl.attr(\"x\"));\n                  const dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n          // Add drop zones\n                  const childW: number = SvgHierarchyType.gotRectW;\n                  const childH: number = SvgHierarchyType.gotRectH;\n\n                  let dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n          // Render Child Drop Zone\n                  let dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length == 0);\n                  let isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n                  if (isChildDZActive) {\n                      this.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"white\");\n\n                      this.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"none\")\n                          .attr(\"stroke\", \"black\")\n                          .attr(\"stroke-width\", \"1\")\n                          .attr(\"stroke-dasharray\", \"5,5\");\n\n                      let addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n                      this.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n                          .attr(\"font-family\", \"sans-serif\")\n                          .attr(\"font-size\", 10)\n                          .attr(\"fill\", \"black\")\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n                          .text(addChildLabel);\n                  }\n\n          // Render Parent Drop Zone\n                  if (!isDragGroup) // Don't render it if we're a group\n                  {\n                      this.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"white\");\n\n                      this.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"none\")\n                          .attr(\"stroke\", \"black\")\n                          .attr(\"stroke-width\", \"1\")\n                          .attr(\"stroke-dasharray\", \"5,5\");\n\n                      d3.select(\".svg-got-parent-dz-text\").remove();\n                      let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n                      this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n                          .attr(\"font-family\", \"sans-serif\")\n                          .attr(\"font-size\", 10)\n                          .attr(\"fill\", \"black\")\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n                          .text(addParentLabel);\n                  }\n\n          // Render Sibling Drop Zone\n                  if (this.ghostCode != gotCode) {\n                      if (this.ghostCode != null) {\n                          this.clearGhostNodes(dropNode.parent == null);\n                      }\n\n                      if (dropNode.parent != null) {\n                          let parentIndex = null;\n                          for (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n                              let hn: any = dropNode.parent.data.children[i];\n\n                              if (hn.geoObjectType === gotCode) {\n                                  parentIndex = i + 1;\n                              }\n                          }\n\n                          let addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n                          dropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n                          that.renderTree();\n                          this.ghostCode = gotCode;\n                      }\n                  }\n\n                  let siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n                  if (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n                      this.parentDz.attr(\"stroke\", \"blue\");\n                      this.parentDzText.attr(\"fill\", \"blue\");\n                      isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                      isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                      siblingGhostBody.attr(\"stroke\", \"black\");\n                      this.activeDz = this.parentDz;\n                  } else if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n                      !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                      !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                      this.childDz.attr(\"stroke\", \"blue\");\n                      this.childDzText.attr(\"fill\", \"blue\");\n                      siblingGhostBody.attr(\"stroke\", \"black\");\n                      this.activeDz = this.childDz;\n                  } else if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n                      !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                      !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                      isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                      isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                      siblingGhostBody.attr(\"stroke\", \"blue\");\n                      this.activeDz = \"sibling\";\n                  }\n              }\n          },\n          onDrop: function(dragEl: Element) {\n              if (this.dropEl != null && this.activeDz != null) {\n                  let dropGot = this.dropEl.attr(\"data-gotCode\");\n                  let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n                  let dragGot = d3.select(dragEl).attr(\"id\");\n\n                  if (this.activeDz === this.childDz) {\n                      if (dropNode.data.children.length == 0) {\n                          that.addChild(that.currentHierarchy.code, dropGot, dragGot);\n                      } else {\n                          let youngest = \"\";\n\n                          for (let i = 0; i < dropNode.data.children.length; ++i) {\n                              youngest = youngest + dropNode.data.children[i].geoObjectType;\n\n                              if (i < dropNode.data.children.length - 1) {\n                                  youngest = youngest + \",\";\n                              }\n                          }\n\n                          that.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n                      }\n                  } else if (this.activeDz === this.parentDz) {\n                      if (dropNode.parent == null) {\n                          that.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n                      } else {\n                          that.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n                      }\n                  } else if (this.activeDz === \"sibling\") {\n                      that.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n                  }\n              }\n              this.clearDropZones();\n              this.clearGhostNodes(true);\n          },\n          clearDropZones: function() {\n              if (this.dropEl != null) {\n                  this.dropEl.attr(\"stroke\", null);\n              }\n\n              this.dropEl = null;\n              this.activeDz = null;\n\n              this.childDz = null;\n              this.parentDz = null;\n\n              d3.select(\".svg-dropZone-g\").remove();\n          },\n          clearGhostNodes: function(renderTree: boolean) {\n              if (this.ghostCode != null) {\n                  let ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n                  if (ghostNode != null) {\n                      let parentIndex = null;\n                      for (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n                          let hn: any = ghostNode.parent.data.children[i];\n\n                          if (hn.ghostingCode === this.ghostCode) {\n                              parentIndex = i;\n                          }\n                      }\n\n                      if (parentIndex != null) {\n                          ghostNode.parent.data.children.splice(parentIndex, 1);\n                          if (renderTree) {\n                              that.renderTree();\n                          }\n                      }\n                  }\n\n                  this.ghostCode = null;\n              }\n          }\n      });\n\n    // GeoObjectTypes and Hierarchies\n      let deltaX: number, deltaY: number, width: number;\n      let sidebarDragHandler = d3.drag()\n          .on(\"start\", function(event: any) {\n              let canDrag = d3.select(this).attr(\"data-candrag\");\n              if (canDrag === \"false\") {\n                  return;\n              }\n\n              let rect = this.getBoundingClientRect();\n              deltaX = rect.left - event.sourceEvent.pageX;\n              deltaY = rect.top - event.sourceEvent.pageY;\n              width = rect.width;\n          })\n          .on(\"drag\", function(event: any) {\n              let canDrag = d3.select(this).attr(\"data-candrag\");\n              if (canDrag === \"false\") {\n                  return;\n              }\n\n              d3.select(\".g-context-menu\").remove();\n\n              let selThis = d3.select(this);\n\n        // Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n              selThis.style(\"display\", \"none\");\n\n              let target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n              selThis.style(\"display\", null);\n\n              for (let i = 0; i < dropTargets.length; ++i) {\n                  dropTargets[i].onDrag(this, target, event);\n              }\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n              selThis\n                  .classed(\"dragging\", true)\n                  .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                  .style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n                  .style(\"width\", width + \"px\");\n\n        // If they are moving a GOT group then we have to move the children as well\n              if (selThis.classed(\"got-group-parent\")) {\n                  let index = 1;\n                  d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                      let li: any = this;\n                      let child = d3.select(li);\n\n                      child\n                          .classed(\"dragging\", true)\n                          .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                          .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2) * index) + \"px\")\n                          .style(\"width\", width + \"px\");\n\n                      index++;\n                  });\n              }\n          }).on(\"end\", function(event: any) {\n              let selThis = d3.select(this)\n                  .classed(\"dragging\", false)\n                  .style(\"left\", null)\n                  .style(\"top\", null)\n                  .style(\"width\", null);\n\n        // If they are moving a GOT group then we have to reset the children as well\n              if (selThis.classed(\"got-group-parent\")) {\n                  d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                      let child = d3.select(this);\n\n                      child\n                          .classed(\"dragging\", false)\n                          .style(\"left\", null)\n                          .style(\"top\", null)\n                          .style(\"width\", null);\n                  });\n              }\n\n              for (let i = 0; i < dropTargets.length; ++i) {\n                  dropTargets[i].onDrop(this, event);\n              }\n          });\n\n      sidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n  }\n\n  private registerSvgHandlers(): void {\n      let hierarchyComponent = this;\n\n    // SVG Drag Handler\n      let deltaX: number, deltaY: number, width: number;\n      let startPoint: any;\n      let svgGot: SvgHierarchyNode;\n      let svgDragHandler = d3.drag()\n          .on(\"start\", function(event: any) {\n              let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n        // let select = d3.select(this);\n\n              svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n        // d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        //   d3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        // d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     console.log(\"no --> \",a.data.geoObjectType)\n        //     return -1\n        //   }\n        //   else {\n        //     console.log(\"yes --> \",a.data.geoObjectType)\n        //     return 1\n        //   }\n        // });\n\n              startPoint = svgGot.getPos();\n\n              deltaX = startPoint.x - svgMousePoint.x;\n              deltaY = startPoint.y - svgMousePoint.y;\n          })\n          .on(\"drag\", function(event: any) {\n              d3.select(\".g-context-menu\").remove();\n\n              let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n              svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n              svgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n          }).on(\"end\", function(event: any) {\n              let bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n\n              svgGot.setPos(startPoint.x, startPoint.y, false);\n\n        // if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n        //   if (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n        //     let obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        //     hierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n        //       animated: true,\n        //       backdrop: true,\n        //       ignoreBackdropClick: true,\n        //     });\n\n        //     let message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        //     message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        //     hierarchyComponent.bsModalRef.content.message = message;\n        //     hierarchyComponent.bsModalRef.content.data = obj.code;\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n        //       let treeNode = svgGot.getTreeNode();\n        //       let parent = null;\n        //       if (treeNode.parent == null) {\n        //         parent = \"ROOT\";\n        //       }\n        //       else {\n        //         if (treeNode.parent.data.inheritedHierarchyCode != null) {\n        //           parent = \"ROOT\";\n        //         }\n        //         else {\n        //           parent = treeNode.parent.data.geoObjectType;\n        //         }\n        //       }\n\n        //       hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n        //     });\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n        //       svgGot.setPos(startPoint.x, startPoint.y, false);\n        //     });\n        //   }\n        //   else {\n        //     svgGot.setPos(startPoint.x, startPoint.y, false);\n        //   }\n\n        // }\n        // else {\n        //   svgGot.setPos(startPoint.x, startPoint.y, false);\n        // }\n          });\n\n      svgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n  }\n\n  public findGeoObjectTypeByCode(code: string): GeoObjectType {\n      for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n          let got: GeoObjectType = this.geoObjectTypes[i];\n\n          if (got.code === code) {\n              return got;\n          }\n      }\n  }\n\n  public findHierarchyByCode(code: string): HierarchyType {\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let ht: HierarchyType = this.hierarchies[i];\n\n          if (ht.code === code) {\n              return ht;\n          }\n      }\n  }\n\n  public findOrganizationByCode(code: string): Organization {\n      for (let i = 0; i < this.organizations.length; ++i) {\n          let org: Organization = this.organizations[i];\n\n          if (org.code === code) {\n              return org;\n          }\n      }\n  }\n\n  private addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n      this.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n          let got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n          let index = null;\n          for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n              if (got.relatedHierarchies[i] === hierarchyCode) {\n                  index = i;\n                  break;\n              }\n          }\n\n          if (index == null) {\n              got.relatedHierarchies.push(hierarchyCode);\n          }\n\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  private insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n      this.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  isRA(): boolean {\n      return this.authService.isRA();\n  }\n\n  isOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n      return this.isSRA || this.authService.isOrganizationRA(orgCode);\n  }\n\n  getTypesByOrg(org: Organization): GeoObjectType[] {\n      let orgTypes: GeoObjectType[] = [];\n\n      for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n          let geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n          if (geoObjectType.organizationCode === org.code) {\n              orgTypes.push(geoObjectType);\n          }\n      }\n\n      return orgTypes;\n  }\n\n  getHierarchiesByOrg(org: Organization): HierarchyType[] {\n      let orgHierarchies: HierarchyType[] = [];\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchy: HierarchyType = this.hierarchies[i];\n\n          if (hierarchy.organizationCode === org.code) {\n              orgHierarchies.push(hierarchy);\n          }\n      }\n\n      return orgHierarchies;\n  }\n\n  public refreshAll(desiredHierarchy: HierarchyType) {\n    // Clear the types to then refresh\n      this.geoObjectTypes = [];\n\n      this.registryService.init().then(response => {\n          this.localizeService.setLocales(response.locales);\n\n          this.setGeoObjectTypes(response.types);\n\n          this.organizations = response.organizations;\n\n          this.organizations.forEach(org => {\n              if (this.isOrganizationRA(org.code)) {\n                  this.userOrganization = org.code;\n              }\n          });\n\n          if (!this.authService.isSRA()) {\n              let myorg = this.authService.getMyOrganizations();\n\n              let pos = response.organizations.findIndex(org => {\n                  return org.code === myorg[0];\n              });\n\n              if (pos >= 0) {\n                  Utils.arrayMove(response.organizations, pos, 0);\n              }\n          }\n\n          let pos = this.getGeoObjectTypePosition(\"ROOT\");\n          if (pos) {\n              this.geoObjectTypes.splice(pos, 1);\n          }\n\n          this.setHierarchies(response.hierarchies);\n\n          this.setNodesOnInit(desiredHierarchy);\n\n          this.updateViewDatastructures();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public setGeoObjectTypes(types: GeoObjectType[]): void {\n    // Set group parent types\n      this.setAbstractTypes(types);\n\n    // Set GeoObjectTypes that aren't part of a group.\n      types.forEach(type => {\n          if (!type.isAbstract) {\n              if (!type.superTypeCode) {\n                  this.geoObjectTypes.push(type);\n              }\n          }\n      });\n\n    // Sort aphabetically because all other types to add will be children in a group.\n      this.geoObjectTypes.sort((a, b) => {\n          if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n          else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n          else return 0;\n      });\n\n    // Add group children\n      types.forEach(type => {\n          if (!type.isAbstract) {\n              if (type.superTypeCode && type.superTypeCode.length > 0) {\n                  for (let i = 0; i < this.geoObjectTypes.length; i++) {\n                      let setType = this.geoObjectTypes[i];\n                      if (type.superTypeCode === setType.code) {\n                          this.geoObjectTypes.splice(i + 1, 0, type);\n                      }\n                  }\n              }\n          }\n      });\n  }\n\n  private setAbstractTypes(types: GeoObjectType[]): void {\n      types.forEach(type => {\n          if (type.isAbstract) {\n              this.geoObjectTypes.push(type);\n          }\n      });\n  }\n\n  public updateViewDatastructures(): void {\n      this.hierarchiesByOrg = [];\n      this.typesByOrg = [];\n\n      for (let i = 0; i < this.organizations.length; ++i) {\n          let org: Organization = this.organizations[i];\n\n          this.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n          this.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n      }\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n          got.canDrag = this.calculateCanDrag(got);\n          got.relatedHierarchies = this.calculateRelatedHierarchies(got);\n      });\n\n      this.onFilterChange();\n  }\n\n  public excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n      return (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n  }\n\n  public excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n      return (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n  }\n\n  private setNodesOnInit(desiredHierarchy: HierarchyType): void {\n      let index = -1;\n\n      if (desiredHierarchy != null) {\n          index = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n      } else if (this.hierarchies.length > 0) {\n          index = 0;\n      }\n\n      if (index > -1) {\n          const hierarchy = this.hierarchies[index];\n\n          this.setCurrentHierarchy(hierarchy);\n\n          this.renderTree();\n      }\n  }\n\n  private getHierarchy(hierarchyId: string): HierarchyType {\n      let target: HierarchyType = null;\n      this.hierarchies.forEach(hierarchy => {\n          if (hierarchyId === hierarchy.code) {\n              target = hierarchy;\n          }\n      });\n\n      return target;\n  }\n\n  private setHierarchies(data: HierarchyType[]): void {\n      let hierarchies: HierarchyType[] = [];\n      data.forEach((hierarchyType, index) => {\n          if (hierarchyType.rootGeoObjectTypes.length > 0) {\n              hierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n                  this.processHierarchyNodes(rootGeoObjectType);\n              });\n          }\n\n          hierarchies.push(hierarchyType);\n      });\n\n      this.hierarchies = hierarchies;\n\n      this.hierarchies.sort((a, b) => {\n          if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n          else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n          else return 0;\n      });\n  }\n\n  private processHierarchyNodes(node: HierarchyNode) {\n      if (node != null) {\n          node.label = this.getHierarchyLabel(node.geoObjectType);\n\n          node.children.forEach(child => {\n              this.processHierarchyNodes(child);\n          });\n      }\n  }\n\n  private getHierarchyLabel(geoObjectTypeCode: string): string {\n      let label: string = null;\n      this.geoObjectTypes.forEach(function(gOT) {\n          if (gOT.code === geoObjectTypeCode) {\n              label = gOT.label.localizedValue;\n          }\n      });\n\n      return label;\n  }\n\n  public handleOnMenu(node: any, $event: any): void {\n      if (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n          this.contextMenuService.show.next({\n              contextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n              event: $event,\n              item: node\n          });\n          $event.preventDefault();\n          $event.stopPropagation();\n      } else {\n          $event.preventDefault();\n          $event.stopPropagation();\n      }\n  }\n\n  public treeNodeOnClick(node: any, $event: any): void {\n      node.treeModel.setFocusedNode(node);\n\n      if (node.treeModel.isExpanded(node)) {\n          node.collapse();\n      } else {\n          node.treeModel.expandAll();\n      }\n  }\n\n  public hierarchyOnClick(event: any, item: HierarchyType) {\n      this.setCurrentHierarchy(item);\n      this.renderTree();\n  }\n\n  public createHierarchy(): void {\n      this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n\n      (<CreateHierarchyTypeModalComponent> this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n          this.hierarchies.push(data);\n\n          this.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n              let nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n              let nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n              if (nameA < nameB) {\n                  return -1; // nameA comes first\n              }\n\n              if (nameA > nameB) {\n                  return 1; // nameB comes first\n              }\n\n              return 0; // names must be equal\n          });\n\n          this.updateViewDatastructures();\n      });\n  }\n\n  public deleteHierarchyType(obj: HierarchyType): void {\n      this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true\n      });\n      this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n      this.bsModalRef.content.data = obj.code;\n      this.bsModalRef.content.type = \"DANGER\";\n      this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n      (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n          this.removeHierarchyType(data);\n      });\n  }\n\n  public editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n      this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n      this.bsModalRef.content.edit = true;\n      this.bsModalRef.content.readOnly = readOnly;\n      this.bsModalRef.content.hierarchyType = obj;\n      this.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n          let pos = this.getHierarchyTypePosition(data.code);\n\n          this.hierarchies[pos].label = data.label;\n          this.hierarchies[pos].description = data.description;\n          this.hierarchies[pos].progress = data.progress;\n          this.hierarchies[pos].acknowledgement = data.acknowledgement;\n          this.hierarchies[pos].disclaimer = data.disclaimer;\n          this.hierarchies[pos].useConstraints = data.useConstraints;\n          this.hierarchies[pos].accessConstraints = data.accessConstraints;\n          this.hierarchies[pos].contact = data.contact;\n          this.hierarchies[pos].phoneNumber = data.phoneNumber;\n          this.hierarchies[pos].email = data.email;\n\n          this.updateViewDatastructures();\n\n          if (this.currentHierarchy.code === data.code) {\n              this.setCurrentHierarchy(this.hierarchies[pos]);\n\n              this.renderTree();\n          }\n      });\n  }\n\n  setCurrentHierarchy(hierarchyType: HierarchyType): void {\n      this.currentHierarchy = hierarchyType;\n  }\n\n  isPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n    // return hierarchy.isPrimary;\n      return hierarchy.code === this.currentHierarchy.code;\n  }\n\n  public removeHierarchyType(code: string): void {\n      this.hierarchyService.deleteHierarchyType(code).then(response => {\n          let pos = this.getHierarchyTypePosition(code);\n          this.hierarchies.splice(pos, 1);\n          this.updateViewDatastructures();\n\n          if (this.hierarchies.length > 0) {\n              this.setCurrentHierarchy(this.hierarchies[0]);\n          } else {\n              this.currentHierarchy = null;\n          }\n\n          this.renderTree();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean, org: Organization): void {\n      this.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n      this.bsModalRef.content.init(org, this.geoObjectTypes, groupSuperType, isAbstract);\n\n      this.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n          data.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n          this.refreshAll(this.currentHierarchy);\n      });\n  }\n\n  public deleteGeoObjectType(obj: GeoObjectType): void {\n      this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true\n      });\n      this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n      this.bsModalRef.content.data = obj.code;\n      this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.bsModalRef.content.type = ModalTypes.danger;\n\n      (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n          this.removeGeoObjectType(data);\n      });\n  }\n\n  public removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n      this.registryService.deleteGeoObjectType(code).then(response => {\n          let pos = this.getGeoObjectTypePosition(code);\n          this.geoObjectTypes.splice(pos, 1);\n\n          this.refreshAll(this.currentHierarchy);\n      }).catch((err: HttpErrorResponse) => {\n          if (errCallback != null) {\n              errCallback(err);\n          }\n          this.error(err);\n      });\n  }\n\n  public manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n      this.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"manage-geoobjecttype-modal\"\n      });\n\n      geoObjectType.attributes.sort((a, b) => {\n          if (a.label.localizedValue < b.label.localizedValue) return -1;\n          else if (a.label.localizedValue > b.label.localizedValue) return 1;\n          else return 0;\n      });\n      this.bsModalRef.content.geoObjectType = geoObjectType;\n      this.bsModalRef.content.readOnly = readOnly;\n\n      (<ManageGeoObjectTypeModalComponent> this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n          if (data.isAbstract) {\n              this.refreshAll(this.currentHierarchy);\n          } else {\n              const position = this.getGeoObjectTypePosition(data.code);\n\n              if (position !== -1) {\n                  this.geoObjectTypes[position] = data;\n              }\n\n        // Update all of the hierarchies for the new geo object type\n              this.updateViewDatastructures();\n\n              this.hierarchies.forEach((hierarchyType: HierarchyType) => {\n                  this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n              });\n\n        // Update the current hierarchy view\n              if (this.currentHierarchy != null) {\n                  this.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n              }\n\n              this.renderTree();\n          }\n      });\n  }\n\n  private getHierarchyTypePosition(code: string): number {\n      for (let i = 0; i < this.hierarchies.length; i++) {\n          let obj = this.hierarchies[i];\n          if (obj.code === code) {\n              return i;\n          }\n      }\n  }\n\n  private getGeoObjectTypePosition(code: string): number {\n      for (let i = 0; i < this.geoObjectTypes.length; i++) {\n          let obj = this.geoObjectTypes[i];\n          if (obj.code === code) {\n              return i;\n          }\n      }\n\n      return null;\n  }\n\n  public refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n      this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchy = this.hierarchies[i];\n\n          if (hierarchy.code === hierarchyType.code) {\n              this.hierarchies[i] = hierarchyType;\n\n              this.setCurrentHierarchy(hierarchyType);\n          }\n      }\n\n      this.updateViewDatastructures();\n\n      this.renderTree();\n  }\n\n  public removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n      const that = this;\n\n      this.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n          let got = that.findGeoObjectTypeByCode(gotCode);\n\n          let index = null;\n          for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n              if (got.relatedHierarchies[i] === hierarchyType.code) {\n                  index = i;\n                  break;\n              }\n          }\n\n          if (index != null) {\n              got.relatedHierarchies.splice(index, 1);\n          }\n\n          that.refreshPrimaryHierarchy(hierarchyType);\n      }).catch((err: HttpErrorResponse) => {\n          if (errCallback != null) {\n              errCallback(err);\n          }\n\n          this.error(err);\n      });\n  }\n\n  public isActive(item: HierarchyType) {\n      return this.currentHierarchy === item;\n  }\n\n  onFilterChange(): void {\n      const label = this.filter.toLowerCase();\n\n      this.filteredHierarchiesByOrg = [];\n      this.filteredTypesByOrg = [];\n\n      this.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n          const filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n              const index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n              return (index !== -1);\n          });\n\n          this.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n      });\n\n      this.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n          const filtered = item.types.filter((type: GeoObjectType) => {\n              const index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n              return (index !== -1);\n          });\n\n          this.filteredTypesByOrg.push({ org: item.org, types: filtered });\n      });\n\n      setTimeout(() => { this.registerDragHandlers(); }, 500);\n  }\n\n  handleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n      this.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  handleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n      this.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public importTypes(): void {\n      this.bsModalRef = this.modalService.show(ImportTypesModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n\n      this.bsModalRef.content.init(this.organizations);\n\n      this.bsModalRef.content.onNodeChange.subscribe(data => {\n      // Reload the page\n          this.refreshAll(null);\n      });\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"type.permissions.includes('WRITE')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false, typeByOrg.org)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!type.permissions.includes('WRITE') && type.permissions.includes('READ')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': (currentHierarchy != null && hierarchy.code === currentHierarchy.code), 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n        <div *ngIf=\"isSRA\" style=\"text-align: center;padding: 10px 0;\">\n          <button (click)=\"importTypes()\" type=\"button\" class=\"btn btn-primary\" style=\"margin-bottom:20px;min-width:45%;\">\n            <localize key=\"hierarchy.sidebar.importTypes\"></localize>\n          </button>                \n        </div>                \n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\">\n                      <div *ngIf=\"isOrganizationRA(currentHierarchy.organizationCode, true)\" id=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n                      </div>\n                      <div *ngIf=\"!isOrganizationRA(currentHierarchy.organizationCode, true)\">\n                          <p class=\"upload-text\">\n                              <localize key=\"hierarchy.content.emptyHierarchy\"></localize>\n                          </p>\n                      </div>\n                    </div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"NodeTooltip\" class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-form\">\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                      <label>\n                        <localize key=\"hierarchy.nodeTooltip.hierarchy\"></localize>\n                      </label>\n                    </div>\n                    <div class=\"holder\">\n                      <label id=\"hierarchyLabel\"></label>\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from \"@angular/core\";\nimport { Classification } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { ClassificationFieldModalComponent } from \"./classification-field-modal.component\";\n\n@Component({\n    selector: \"classification-field\",\n    templateUrl: \"./classification-field.component.html\",\n    styleUrls: []\n})\nexport class ClassificationFieldComponent implements OnInit, OnDestroy {\n\n    @Input() classificationType: string;\n    @Input() rootCode: string;\n\n    @Input() name: string;\n    @Input() disabled: boolean = false;\n    @Input() customStyles: string = \"\";\n    @Input() classNames: string = \"\";\n    @Input() container: string = null;\n\n    @Input() value: { code: string, label: LocalizedValue } = null;\n\n    @Output() valueChange = new EventEmitter<{ code: string, label: LocalizedValue }>();\n\n    loading: boolean = false;\n    text: string = \"\";\n\n    typeahead: Observable<Object> = null;\n    subscription: Subscription = null;\n\n    constructor(\n        private modalService: BsModalService,\n        private service: ClassificationService) { }\n\n    ngOnInit(): void {\n        this.typeahead = new Observable((observer: Observer<Object>) => {\n            this.service.search(this.classificationType, this.rootCode, this.text).then(results => {\n                observer.next(results);\n            });\n        });\n\n        if (this.value != null) {\n            this.text = this.value.label.localizedValue;\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    typeaheadOnSelect(match: TypeaheadMatch): void {\n        if (match != null) {\n            const item: Classification = match.item;\n            this.text = item.displayLabel.localizedValue;\n\n            if (this.value == null || this.value.code !== item.code) {\n                this.setValue({ code: item.code, label: item.displayLabel });\n            }\n        } else if (this.value != null) {\n            this.setValue(null);\n        }\n    }\n\n    setValue(value: { code: string, label: LocalizedValue }): void {\n        this.value = value;\n        this.valueChange.emit(this.value);\n    }\n\n    onViewTree(): void {\n        const bsModalRef = this.modalService.show(ClassificationFieldModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = bsModalRef.content.init(this.classificationType, this.rootCode, this.disabled, this.value, classification => {\n            this.text = classification.displayLabel.localizedValue;\n            this.setValue({ code: classification.code, label: classification.displayLabel });\n        });\n    }\n\n    onTextChange(): void {\n        if (this.value != null && (this.text == null || this.text.length === 0)) {\n            this.setValue(null);\n        }\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.displayLabel.localizedValue }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"input-group\">\n\n  <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n    [style]=\"customStyles\" [name]=\"name\" [disabled]=\"disabled\" [(ngModel)]=\"text\"\n    [class]=\"classNames\"    \n    [typeaheadAsync]=\"true\"\n    [typeahead]=\"typeahead\"\n    (change)=\"onTextChange()\"\n    (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" (typeaheadLoading)=\"loading = $event\"\n    [ngClass]=\"{'inline-loading':loading}\" [typeaheadOptionsLimit]=\"7\"\n    [typeaheadItemTemplate]=\"customItemTemplate\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\"\n    [container]=\"container\"\n    >\n\n  <span class=\"input-group-addon clickable addon-alert\" (click)=\"onViewTree()\">\n    <i class=\"fa fa-ellipsis-v\" aria-hidden=\"true\"></i>\n  </span>\n</div>","import { select } from \"d3\";\n\nexport function calculateTextWidth(text: string, fontSize: number, svgSelector: string = \"#svg\"): number {\n    let svg = select(svgSelector);\n\n    let textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n    let textEl = textCalcGroup.append(\"text\")\n        .attr(\"x\", -5000)\n        .attr(\"y\", -5000)\n        .attr(\"font-size\", fontSize)\n        .text(text);\n\n    let bbox = textEl.node().getBBox();\n\n    select(\".g-text-calc\").remove();\n\n    return bbox.width + 2; // +2 is for padding. I caught this truncating just ever so slightly\n}\n\nexport function svgPoint(x: number, y: number) {\n    let svg: any = select(\"#svg\").node();\n    let pt = svg.createSVGPoint();\n\n    pt.x = x;\n    pt.y = y;\n\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n    return point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) ||\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) &&\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n    return { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","import { Component, OnInit, ViewChild, Input, ViewChildren, QueryList, Output, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, Term, HierarchyOverTime } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, CreateGeoObjectAction, ChangeRequest } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { v4 as uuid } from \"uuid\";\nimport { Subscription } from \"rxjs\";\nimport { LocationManagerState } from \"../location-manager/location-manager.component\";\n\n@Component({\n    selector: \"geoobject-shared-attribute-editor\",\n    templateUrl: \"./geoobject-shared-attribute-editor.component.html\",\n    styleUrls: [\"./geoobject-shared-attribute-editor.css\"],\n    providers: [DatePipe],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"slide\", [\n                state(\"left\", style({ left: 0 })),\n                state(\"right\", style({ left: \"100%\" })),\n                transition(\"* => *\", animate(200))\n            ])\n        ]]\n})\n\n/**\n * IMPORTANT\n * This component is shared between:\n * - crtable (request-table.component.ts)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget (feature-panel.component.ts)\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit, OnDestroy {\n\n    // The changed state of the GeoObject in the GeoRegistry\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    showAllInstances: boolean = false;\n\n    tabIndex: number = 0;\n\n    // The current state of the GeoObject in the GeoRegistry\n    //    @Input() action: Action = null;\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isGeometryInlined = false;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n\n    @Input() requestedDate: string = null;\n\n    forDate: string = null;\n\n    @Input() datasetId: string = null;\n\n    // TODO : This was copy / pasted into manage-versions.component::onDateChange and ChangeRequestEditor::generateAttributeEditors\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"invalid\", \"exists\"];\n\n    @ViewChild(\"attributeForm\") attributeForm;\n\n    @ViewChildren(ManageVersionsComponent) manageVersions: QueryList<any>;\n\n    public parentAttributeType: AttributeType;\n\n    public geometryAttributeType: AttributeType;\n\n    showStabilityPeriods = false;\n\n    private subscription: Subscription;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private geomService: GeometryService, private authService: AuthService, private dateService: DateService, private registryService: RegistryService) {\n\n    }\n\n    ngOnInit(): void {\n        this.subscription = this.geomService.stateChange$.subscribe(state => this.handleStateChange(state));\n\n        if (this.attributeExcludes != null) {\n            this.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n            if (!this.isGeometryInlined) {\n                this.geoObjectAttributeExcludes.push(\"geometry\");\n            }\n        }\n\n        this.geometryAttributeType = this.getAttribute(\"geometry\");\n        if (this.geometryAttributeType == null) {\n            this.geometryAttributeType = new AttributeType(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n        }\n\n        this.parentAttributeType = new AttributeType(\"_PARENT_\", \"_PARENT_\", new LocalizedValue(\"Parents\", null), new LocalizedValue(\"Parents\", null), true, false, false, true);\n\n        if (this.changeRequest == null) {\n            this.changeRequest = this.createNewChangeRequest();\n        } else {\n            if (!this.changeRequest.actions) {\n                this.changeRequest.actions = [];\n            }\n\n            if (this.changeRequest.actions.length === 0 && this.isNew) {\n                this.changeRequest.actions = this.createNewChangeRequest().actions;\n            }\n        }\n\n        this.changeRequestEditor = new ChangeRequestEditor(this.changeRequest, this.postGeoObject, this.geoObjectType, this.hierarchies, this.geometryAttributeType, this.parentAttributeType, this.lService, this.dateService, this.registryService, this.geomService);\n\n        if (this.shouldForceSetExist()) {\n            this.changePage(3);\n        }\n\n        if (this.isNew) {\n            this.forDate = null;\n        }\n\n        let got = this.changeRequest.current ? this.changeRequest.current.geoObjectType : this.postGeoObject.geoObjectType;\n        let orgCode = got.organizationCode;\n\n        // Don't show the stability bar on the Change Requests page.\n        if (this.changeRequest.isNew) {\n            this.showStabilityPeriods = (this.authService.isSRA() || this.authService.isOrganizationRA(orgCode) || this.authService.isGeoObjectTypeOrSuperRM(got) || this.authService.isGeoObjectTypeOrSuperRC(got));\n        }\n\n        this.showAllInstances = (this.changeRequestEditor.changeRequest.isNew || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\");\n    }\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    handleStateChange(state: LocationManagerState) {\n        this.forDate = state.date;\n    }\n\n    getChangeRequestEditor(): ChangeRequestEditor {\n        return this.changeRequestEditor;\n    }\n\n    createNewChangeRequest(): ChangeRequest {\n        let cr = new ChangeRequest();\n        cr.oid = uuid();\n        cr.approvalStatus = \"PENDING\";\n        cr.actions = [];\n\n        if (this.isNew) {\n            cr.type = \"CreateGeoObject\";\n\n            let createAction: CreateGeoObjectAction = new CreateGeoObjectAction();\n            createAction.geoObjectJson = this.postGeoObject;\n            createAction.parentJson = this.hierarchies;\n            cr.actions[0] = createAction;\n        } else {\n            cr.type = \"UpdateGeoObject\";\n        }\n\n        return cr;\n    }\n\n    shouldForceSetExist() {\n        if (!this.readOnly) {\n            if (this.isNew) {\n                const action: CreateGeoObjectAction = this.changeRequestEditor.changeRequest.actions[0] as CreateGeoObjectAction;\n\n                let values = action.geoObjectJson.attributes[\"exists\"].values;\n\n                if (values && values.length > 0) {\n                    let value = values[0];\n\n                    return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                }\n            } else {\n                let isNew = this.changeRequestEditor.changeRequest.isNew;\n\n                if (isNew && !this.readOnly && this.postGeoObject.attributes[\"exists\"]) {\n                    let values = this.postGeoObject.attributes[\"exists\"].values;\n\n                    if (values && values.length > 0) {\n                        let value = values[0];\n\n                        return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                    }\n                }\n\n                return isNew && !this.readOnly;\n            }\n        }\n\n        return !this.readOnly;\n    }\n\n    getAttribute(name: string): AttributeType {\n        if (name === \"_PARENT_\") {\n            return this.parentAttributeType;\n        } else if (name === \"geometry\") {\n            return this.geometryAttributeType;\n        }\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            if (this.geoObjectType.attributes[i].code === name) {\n                return this.geoObjectType.attributes[i];\n            }\n        }\n\n        return null;\n    }\n\n    changePage(nextPage: number): void {\n        if (this.shouldForceSetExist() && nextPage !== 3) {\n            return;\n        }\n\n        this.geomService.stopEditing();\n\n        this.tabIndex = nextPage;\n    }\n\n    hasChanges(tabIndex: number) {\n        let len = this.changeRequest.actions.length;\n\n        if (len > 0) {\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.changeRequest.actions[i];\n\n                if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                    return true;\n                } else if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeOverTimeAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === \"_PARENT_\" && tabIndex === 1) {\n                        return true;\n                    } else if (updateAttrAction.attributeName === \"geometry\" && tabIndex === 2) {\n                        return true;\n                    } else if ((updateAttrAction.attributeName === \"invalid\" || updateAttrAction.attributeName === \"exists\") && tabIndex === 3) {\n                        return true;\n                    } else if (tabIndex === 0 && updateAttrAction.attributeName !== \"_PARENT_\" && updateAttrAction.attributeName !== \"geometry\" && updateAttrAction.attributeName !== \"exists\" && updateAttrAction.attributeName !== \"invalid\") {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    hasErrors(tabIndex: number) {\n        let attributeEditors = this.changeRequestEditor.getEditors();\n\n        if (tabIndex === 0) {\n            let filter = [\"invalid\", \"exists\", \"_PARENT_\", \"geometry\"];\n            let filteredEditors = attributeEditors.filter(editor => filter.indexOf(editor.attribute.code) === -1);\n\n            for (let i = 0; i < filteredEditors.length; ++i) {\n                let editor = filteredEditors[i];\n\n                if (!editor.isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 1) {\n            for (let i = 0; i < this.hierarchies.length; ++i) {\n                let hierarchy = this.hierarchies[i];\n\n                if (!this.changeRequestEditor.getEditorForAttribute(this.parentAttributeType, hierarchy).isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 2) {\n            return !this.changeRequestEditor.getEditorForAttribute(this.geometryAttributeType).isValid();\n        } else if (tabIndex === 3) {\n            let invalid = this.getAttribute(\"invalid\");\n\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existsEditor = this.changeRequestEditor.getEditorForAttribute(existsAttribute);\n\n            return (Object.prototype.hasOwnProperty.call(invalid, \"isValid\") && !invalid.isValid) ||\n                !existsEditor.isValid();\n        }\n\n        return false;\n    }\n\n    public isValid(): boolean {\n        let allValid: boolean = true;\n\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.isValid != null && !att.isValid) {\n                allValid = false;\n            }\n        });\n\n        if (this.parentAttributeType.isValid != null && !this.parentAttributeType.isValid) {\n            allValid = false;\n        }\n\n        if (this.geometryAttributeType.isValid != null && !this.geometryAttributeType.isValid) {\n            allValid = false;\n        }\n\n        return allValid && this.changeRequestEditor.validate();\n    }\n\n    public getActions(): AbstractAction[] {\n        return this.changeRequestEditor.changeRequest.actions;\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <stability-period *ngIf=\"showStabilityPeriods\" [showHint]=\"!readOnly\" [changeRequestEditor]=\"changeRequestEditor\" [context]=\"datasetId == null ? 'EXPLORER' : 'LIST'\" [latestPeriodIsActive]=\"requestedDate == null && changeRequestEditor.changeRequest.isNew\"></stability-period>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <boolean-field *ngIf=\"changeRequestEditor && !changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject'\" [(value)]=\"showAllInstances\" label=\"Show all instances\" [disable]=\"false\"></boolean-field>\n  </div>\n</div>\n\n<div class=\"row\">\n  <!-- <div class=\"label-holder\"></div> -->\n  <div class=\"col-md-12\">\n    <div class=\"btn-group geobject-editor-tab-holder\">\n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 0, disabled: shouldForceSetExist()}\" (click)=\"changePage(0);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabZero\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(0)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(0)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 1, disabled: shouldForceSetExist()}\" (click)=\"changePage(1);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabOne\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(1)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(1)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 2, disabled: shouldForceSetExist()}\" (click)=\"changePage(2);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabTwo\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(2)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(2)\" class=\"tabHasChanges\"></span></span>\n      </label>\n      <label class=\"btn full-width-radio-button settings\" [ngClass]=\"{active: tabIndex === 3}\" (click)=\"changePage(3);\"> \n        <span style=\"display:inline-block; width:90%;\"><i class=\"fa fa-cog\"></i></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(3)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(3)\" class=\"tabHasChanges\"></span></span>\n      </label>\n    </div>\n  </div>\n</div>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n  <fieldset>\n    <!-- <div class=\"col-md-12\"> -->\n    <div *ngIf=\"changeRequestEditor && changeRequestEditor.geoObject\">\n      <div *ngIf=\"tabIndex === 0\" class=\"row\">\n        <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    \n        <div class=\"col-md-12\">\n\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes; let i = index\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n              <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(attr).hasChanges()\" class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span *ngIf=\"attr.code === 'code'\"> \n                      <localize key=\"geoobject.code.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code === 'displayLabel'\"> \n                      <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                    </span>\n                    <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\"> {{attr.label.localizedValue}} </span> \n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <div *ngIf=\"attr.code !== 'code' && attr.isChangeOverTime\">\n                    <manage-versions\n                        [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"attr\"\n                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [showAllInstances]=\"showAllInstances\" >\n                    </manage-versions>\n                  </div>\n\n                  <div *ngIf=\"!attr.isChangeOverTime\">\n                    <input *ngIf=\"changeRequestEditor.geoObject && attr.code === 'code'\" type=\"text\" [(ngModel)]=\"changeRequestEditor.getEditorForAttribute(attr).value\" id=\"mod-{{attr.code}}\" \n                        name=\"mod-{{attr.code}}\" [disabled]=\"readOnly || (attr.code === 'code' && !isNew)\" [style]=\"(readOnly || (attr.code === 'code' && !isNew)) ? '' : 'color:#333'\" required>\n\n                    <div *ngIf=\"attr.code !== 'code'\">\n                        <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"attr\" [geoObject]=\"changeRequestEditor.geoObject\"\n                          [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div *ngIf=\"tabIndex === 1\" class=\"row\">\n        <div class=\"col-md-12\">\n\t        <ul class=\"list-group\">\n\t\t        <li *ngFor=\"let hierarchy of hierarchies\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n\t\t          <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(parentAttributeType, hierarchy).hasChanges()\" class=\"panel panel-default\">\n\t              <div class=\"panel-heading\">\n\t                <h4 style=\"margin:0;\">\n\t                  <span> {{hierarchy.label}} </span> \n\t                </h4>\n\t              </div>\n\t\t\t\t      \n\t\t\t\t        <div class=\"panel-body\">\n\t\t\t\t          <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"parentAttributeType\"\n\t                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [hierarchy]=\"hierarchy\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n\t\t\t\t        </div>\n\t\t\t        </div>\n\t\t        </li>\n\t        </ul>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 2\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(geometryAttributeType).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span> <localize key=\"shared.attributes.attribute.geometry.label\"></localize> </span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"geometryAttributeType\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 3\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('exists')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span>{{getAttribute('exists').label.localizedValue}}</span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"getAttribute('exists')\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('invalid')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <!-- <span>{{getAttribute('invalid').label.localizedValue}}</span>  -->\n                <localize key=\"geoobject.invalid.alternate.label\"></localize>\n              \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"getAttribute('invalid')\" [geoObject]=\"changeRequestEditor.geoObject\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- </div> -->\n  </fieldset>\n</form>\n","import { ChangeType } from \"@registry/model/constants\";\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime, GeoObjectType, HierarchyOverTime, ValueOverTime } from \"@registry/model/registry\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { DateService, LocalizationService } from \"@shared/service\";\nimport { Subject } from \"rxjs\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\n\nexport class ChangeRequestEditor {\n\n    changeRequest: ChangeRequest;\n\n    // eslint-disable-next-line no-undef\n    attributeEditors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[];\n\n    geometryAttributeType: AttributeType;\n\n    parentAttributeType: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    geoObjectType: GeoObjectType;\n\n    hierarchies: HierarchyOverTime[];\n\n    private _isValid: boolean;\n\n    onChangeSubject : Subject<ChangeType> = new Subject<ChangeType>();\n\n    localizationService: LocalizationService;\n\n    dateService: DateService;\n\n    registryService: RegistryService;\n\n    geomService: GeometryService;\n\n    constructor(changeRequest: ChangeRequest, geoObject: GeoObjectOverTime, geoObjectType: GeoObjectType, hierarchies: HierarchyOverTime[], geometryAttributeType: AttributeType, parentAttributeType: AttributeType, localizationService: LocalizationService, dateService: DateService, registryService: RegistryService, geomService: GeometryService) {\n        this.changeRequest = changeRequest;\n        this.geoObject = geoObject;\n        this.geoObjectType = geoObjectType;\n        this.geometryAttributeType = geometryAttributeType;\n        this.parentAttributeType = parentAttributeType;\n        this.hierarchies = hierarchies;\n        this.localizationService = localizationService;\n        this.dateService = dateService;\n        this.registryService = registryService;\n        this.geomService = geomService;\n\n        this.attributeEditors = this.generateAttributeEditors();\n        this.validate();\n    }\n\n    private generateAttributeEditors() {\n        let geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n        let editors = [];\n\n        let attrs = this.geoObjectType.attributes.slice(); // intentionally a shallow copy\n        attrs = attrs.filter(attr => geoObjectAttributeExcludes.indexOf(attr.code) === -1);\n        attrs.push(this.geometryAttributeType);\n        attrs.push(this.parentAttributeType);\n\n        attrs.forEach(attr => {\n            if (attr.code !== \"_PARENT_\") {\n                if (attr.isChangeOverTime) {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, null);\n\n                    editors.push(editor);\n                } else {\n                    let editor = new StandardAttributeCRModel(attr, this.geoObject, this.changeRequest);\n\n                    editors.push(editor);\n                }\n            } else {\n                this.hierarchies.forEach(hierarchy => {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, hierarchy);\n\n                    editors.push(editor);\n                });\n            }\n        });\n\n        return editors;\n    }\n\n    public hasChanges(): boolean {\n        let hasChanges = false;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (attributeEditor.hasChanges()) {\n                hasChanges = true;\n            }\n        });\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    public validate(skipExists: boolean = false): boolean {\n        this._isValid = true;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (!skipExists || attributeEditor.attribute.code !== \"exists\") {\n                attributeEditor.validate(true);\n\n                if (!attributeEditor.isValid()) {\n                    this._isValid = false;\n                }\n            }\n        });\n\n        return this._isValid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.geoObject.attributes[attributeCode]) {\n            let index = this.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    findEditorForValueOverTime(oid: string): ChangeRequestChangeOverTimeAttributeEditor {\n        for (let i = 0; i < this.attributeEditors.length; ++i) {\n            let editor = this.attributeEditors[i];\n\n            if (editor instanceof ChangeRequestChangeOverTimeAttributeEditor && editor.getEditor(oid) != null) {\n                return editor;\n            }\n        }\n    }\n\n    public getEditorForAttribute(attribute: AttributeType, hierarchy: HierarchyOverTime = null): ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel {\n        let indexOf = this.attributeEditors.findIndex(editor => (!editor.attribute.isChangeOverTime || (hierarchy == null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy == null) || ((editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy != null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy.code === hierarchy.code)) && editor.attribute.code === attribute.code);\n\n        if (indexOf === -1) {\n            return null;\n        } else {\n            return this.attributeEditors[indexOf];\n        }\n    }\n\n    public getEditors(): (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] {\n        return this.attributeEditors;\n    }\n\n    public onChange(type: ChangeType) {\n        this.onChangeSubject.next(type);\n    }\n\n    public existsAtDate(date: string) {\n        let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.geoObjectType, \"exists\");\n        let existEditors = (this.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n\n        let valLen = existEditors.length;\n        for (let j = 0; j < valLen; ++j) {\n            let editor: ValueOverTimeCREditor = existEditors[j];\n\n            if (editor.startDate != null && editor.endDate != null && !editor.isDelete() && editor.value === true && this.dateService.between(date, editor.startDate, editor.endDate)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { DatePipe } from \"@angular/common\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError, ValueOverTime } from \"@registry/model/registry\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\n@Component({\n    selector: \"geoobject-editor\",\n    templateUrl: \"./geoobject-editor.component.html\",\n    styleUrls: [\"./geoobject-editor.component.css\"],\n    providers: [DatePipe]\n})\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    geoObject: GeoObjectOverTime;\n\n    //    /*\n    //     * GeoObject Geometry Editor\n    //     */\n    //    @ViewChild( \"geometryEditor\" ) geometryEditor;\n    //\n    //    areGeometriesValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    constructor(private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate(votArray: ValueOverTime[], startDate: string): any {\n        for (let i: number = 0; i < votArray.length; ++i) {\n            if (votArray[i].startDate === startDate) {\n                return votArray[i];\n            }\n        }\n\n        return null;\n    }\n\n    setMasterListId(id: string) {\n        this.masterListId = id;\n    }\n\n    setOnSuccessCallback(func: Function) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew(typeCode: string, dateStr: string, isGeometryEditable: boolean) {\n        this.isNewGeoObject = true;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.hierarchies = retJson.hierarchies;\n        });\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError(importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0) {\n            this.hierarchies = importError.object.parents;\n        } else {\n            this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n                this.hierarchies = retJson.hierarchies;\n            });\n        }\n\n        this.geoObject = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n\n        this.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n            let config = {\n                historyId: historyId,\n                importErrorId: importError.id,\n                resolution: \"APPLY_GEO_OBJECT\",\n                parentTreeNode: hierarchies,\n                geoObject: geoObject,\n                isNew: importError.object.isNew\n            };\n\n            this.registryService.submitErrorResolve(config)\n                .then(() => {\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n        };\n    }\n\n\n\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting(code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean): void {\n        this.isNewGeoObject = false;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject(code, typeCode);\n        this.fetchGeoObjectType(typeCode);\n        this.fetchHierarchies(code, typeCode);\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject(code: string, typeCode: string) {\n        this.registryService.getGeoObjectOverTime(code, typeCode).then(geoObject => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(geoObject)).attributes);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then(locales => {\n            this.localizeService.setLocales(locales);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchGeoObjectType(code: string) {\n        this.registryService.getGeoObjectTypes([code], null)\n            .then(geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n\n                if (this.geoObject != null) {\n                    this.geoObject.geoObjectType = this.geoObjectType;\n                }\n\n                if (!this.geoObjectType.isGeometryEditable) {\n                    //                    this.areGeometriesValid = true;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                // eslint-disable-next-line no-console\n                console.log(err);\n            });\n    }\n\n    private fetchHierarchies(code: string, typeTypeCode: string) {\n        this.registryService.getHierarchiesForGeoObject(code, typeTypeCode)\n            .then((hierarchies: any) => {\n                this.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    getTypeAheadObservable(text, typeCode) {\n        return Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(text, typeCode).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, ptn: ParentTreeNode): void {\n        this.registryService.getGeoObjectByCode(e.item.code, ptn.geoObject.properties.type)\n            .then(geoObject => {\n                ptn.geoObject = geoObject;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    canSubmit(): boolean {\n        return this.attributeEditor && this.attributeEditor.isValid() &&\n            (this.isNewGeoObject || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        this.bsModalRef.hide();\n\n        if (this.submitFunction == null) {\n            /*\n                this.registryService.applyGeoObjectEdit(this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes)\n                    .then(() => {\n    \n                        if (this.onSuccessCallback != null) {\n                            this.onSuccessCallback();\n                        }\n    \n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                    */\n        } else {\n            this.submitFunction(this.geoObject, this.hierarchies, this.attributeEditor);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\">\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"this.geoObjectType && geoObject && hierarchies\"\n            #attributeEditor \n            [geoObjectType]=\"this.geoObjectType\"\n            [postGeoObject]=\"this.geoObject\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isGeometryInlined]=\"true\"\n            [hierarchies]=\"hierarchies\"\n            [readOnly]=\"false\">\n        </geoobject-shared-attribute-editor>\n\n        <!--\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n        -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!canSubmit()\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Layer } from \"@registry/service/layer-data-source\";\nimport { LocalizedValue, PageResult } from \"@shared/model/core\";\nimport { LazyLoadEvent } from \"primeng/api\";\nimport { GeoObject, GeoObjectType } from \"./registry\";\n\nexport class VersionMetadata {\n\n    master: boolean;\n    visibility: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n\n    geometryType?: string;\n\n}\n\nexport class ListVersionMetadata {\n\n    oid?: string;\n    listMetadata?: VersionMetadata;\n    geospatialMetadata?: VersionMetadata;\n\n}\n\nexport class ListColumn {\n\n    name?: string;\n    label: string;\n    type?: string;\n    value?: any\n    colspan: number;\n    rowspan: number;\n    columns: ListColumn[];\n\n}\n\nexport class ListTypeVersion extends ListVersionMetadata {\n\n    displayLabel: string;\n    typeCode: string;\n    orgCode: string;\n    listEntry: string;\n    listType: string;\n    forDate: string;\n    createDate: string;\n    publishDate: string;\n    attributes: ListColumn[];\n\n    isGeometryEditable: boolean;\n    geometryType?: string;\n    locales?: string[];\n    shapefile?: boolean;\n    isAbstract?: boolean;\n    superTypeCode?: string;\n    refreshProgress?: any;\n    working: boolean;\n    isMember?: boolean;\n    versionNumber: number;\n    subtypes?: { label: string, code: string }[];\n    collapsed?: boolean;\n    curation?: any;\n    period?: {\n        type: string,\n        value: any\n    };\n\n}\n\nexport class ListTypeEntry {\n\n    displayLabel: string;\n    oid: string;\n    typeCode: string;\n    orgCode: string;\n    listType: string;\n    forDate: string;\n    period?: {\n        type: string,\n        value: any\n    };\n\n    working: ListTypeVersion;\n    versions?: ListTypeVersion[];\n    showAll?: boolean;\n\n}\n\nexport class ListMetadata {\n\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n\n}\n\nexport class ListType {\n\n    oid?: string;\n    code: string;\n    organization: string;\n    listType: string;\n    write?: boolean;\n    read?: boolean;\n    exploratory?: boolean;\n    typeCode: string;\n    superTypeCode?: string;\n    typeLabel?: string;\n    typePrivate?: boolean;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n    subtypes?: { label: string, code: string }[];\n    subtypeHierarchies?: any[];\n    hierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n    includeLatLong?: boolean;\n\n    listMetadata: ListMetadata;\n    geospatialMetadata: ListMetadata;\n\n    // Attributes for the subtypes\n    validOn?: string;\n    publishingStartDate?: string;\n    frequency?: string;\n    intervalJson?: { startDate: string, endDate: string, readonly?: string, oid?: string }[]\n\n    entries?: ListTypeEntry[];\n    filter?: {\n        attribute: string,\n        operation: string,\n        value: any,\n        id: string\n    }[];\n\n}\n\nexport class ListTypeByType {\n\n    orgCode: string;\n    orgLabel: string;\n    typeCode: string;\n    typeLabel: string;\n    geometryType: string;\n    write: boolean;\n    private: boolean;\n    lists: ListType[];\n\n}\n\nexport class ContextLayer {\n\n    constructor(oid: string, dataSourceType: string, legendLabel: string, rendered: boolean, color: string, forDate?: string, versionNumber?: number) {\n        this.oid = oid;\n        this.dataSourceType = dataSourceType;\n        this.legendLabel = legendLabel;\n        this.rendered = rendered;\n        this.color = color;\n        this.forDate = forDate;\n        this.versionNumber = versionNumber;\n    }\n\n    oid: string;\n    dataSourceType: string;\n    legendLabel: string;\n    rendered: boolean;\n    color: string;\n    forDate?: string;\n    versionNumber?: number;\n\n}\n\nexport class ListVersion {\n\n    oid: string;\n    forDate: string;\n    versionNumber: number;\n    layers?: Layer[];\n\n}\n\nexport class ContextList {\n\n    oid: string;\n    label: string;\n    versions: ListVersion[];\n    open?: boolean;\n\n}\n\nexport class ListTypeGroup {\n\n    typeCode: string;\n    typeLabel: LocalizedValue;\n    lists: ContextList[];\n\n}\n\nexport class ListOrgGroup {\n\n    orgCode: string;\n    orgLabel: LocalizedValue;\n    types: ListTypeGroup[];\n\n}\n\nexport class LayerRecord {\n\n    recordType: string;\n    edit: boolean;\n\n    // Attributes required for the geo object properties panel\n    type?: GeoObjectType;\n    typeCode?: string;\n    code?: string;\n    forDate?: string;\n    uid?: string;\n\n    // Attributes required for the list row properties panel\n    displayLabel?: LocalizedValue;\n    typeLabel?: LocalizedValue;\n    version?: string;\n    attributes?: any[];\n    data?: any;\n\n    geoObject?: GeoObject;\n    bbox?: any;\n\n}\n\nexport class CurationProblem {\n\n    resolution: string;\n    historyId: string;\n    type: string;\n    id: string;\n    typeCode?: string;\n    goCode?: string;\n    goUid?: string;\n    selected?: boolean;\n\n}\n\nexport class CurationJob {\n\n    status: string;\n    lastRun: string;\n    lastRunBy: string;\n    historyId: string;\n    jobId: string;\n    workTotal: number;\n    workProgress: number;\n    exception?: {\n        type: string,\n        message: string\n    };\n\n    page?: PageResult<CurationProblem>\n\n}\n\nexport class ListData {\n\n    event: LazyLoadEvent;\n    oid: string;\n\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"export-format-modal\",\n    templateUrl: \"./export-format-modal.component.html\",\n    styleUrls: []\n})\nexport class ExportFormatModalComponent implements OnInit, OnDestroy {\n\n    format: string;\n\n    actualGeometryType: string;\n\n    list: ListTypeVersion = null;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<{ format: string, actualGeometryType: string }>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        this.onFormat.unsubscribe();\n    }\n\n    init(list: ListTypeVersion): void {\n        this.list = list;\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next({\n            format: this.format,\n            actualGeometryType: this.actualGeometryType\n        });\n    }\n\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            Export\n        </h1>\n    </div>\n\n    <form *ngIf=\"list != null\" #ngForm=\"ngForm\" class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"export.option.spreadsheet\"></localize>\n                        </option>\n                        <option *ngIf=\"list.isMember || list.geospatialMetadata.visibility === 'PUBLIC'\" value=\"SHAPEFILE\">\n                            <localize key=\"export.option.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\" *ngIf=\"format === 'SHAPEFILE' && list.geometryType === 'MIXED'\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"data.property.label.geometryType\"></localize>\n                    </label>\n                    <select name=\"actualGeometryType\" [(ngModel)]=\"actualGeometryType\" required>\n                        <option></option>\n                        <option value=\"MULTIPOINT\">\n                            <localize key=\"georegistry.geometry.point\"></localize>\n                        </option>\n                        <option value=\"MULTILINESTRING\">\n                            <localize key=\"georegistry.geometry.line\"></localize>\n                        </option>\n                        <option value=\"MULTIPOLYGON\">\n                            <localize key=\"georegistry.geometry.polygon\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"!ngForm.valid\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { HierarchyType, HierarchyGroupedTypeView } from \"@registry/model/hierarchy\";\nimport { TreeEntity } from \"@registry/model/registry\";\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class HierarchyService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getHierarchyTypes(types: any): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"types\", JSON.stringify(types));\n\n        return this.http\n            .get<HierarchyType[]>(registry.contextPath + \"/cgr/hierarchytype/get-all\", { params: params })\n            .toPromise();\n    }\n\n    getHierarchyGroupedTypes(): Promise<HierarchyGroupedTypeView[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<HierarchyGroupedTypeView[]>(registry.contextPath + \"/hierarchy/groupedTypes\", { params: params })\n            .toPromise();\n    }\n\n    addChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/add\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/insertBetweenTypes\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/remove\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/create\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/update\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteHierarchyType(code: string): Promise<TreeEntity> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>(registry.contextPath + \"/cgr/hierarchytype/delete\", { code: code }, { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/setInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, inheritedHierarchyTypeCode: inheritedHierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/removeInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from \"@registry/model/io\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    importSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport(configuration: ImportConfiguration): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/cancel-import\", JSON.stringify({ configuration: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    importShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    listGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"includeAbstractTypes\", includeAbstractTypes.toString());\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>(registry.contextPath + \"/cgr/geoobjecttype/list-types\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean, includeChild: boolean = false): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        params = params.set(\"includeInheritedTypes\", includeInheritedTypes.toString());\r\n        params = params.set(\"includeChild\", includeChild.toString());\r\n\r\n        return this.http\r\n            .get<Location[]>(registry.contextPath + \"/cgr/geoobjecttype/get-ancestors\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-subtype-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/geo-synonym/createGeoEntitySynonym\", JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geo-synonym/deleteGeoEntitySynonym\", JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"mdAttributeId\", mdAttributeId);\r\n        params = params.set(\"text\", text);\r\n        params = params.set(\"limit\", limit);\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>(registry.contextPath + \"/uploader/getClassifierSuggestions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    createTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/uploader/createClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym(synonymId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ synonymId: synonymId });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/uploader/deleteClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from \"@shared/service\";\n\nimport { AllLocaleInfo } from \"@registry/model/localization-manager\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>(registry.contextPath + \"/localization/getNewLocaleInformation\")\n            .toPromise();\n    }\n\n    installLocale(language: string, country: string, variant: string): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if (language != null) {\n            params = params.set(\"language\", language);\n        }\n\n        if (country != null) {\n            params = params.set(\"country\", country);\n        }\n\n        if (variant != null) {\n            params = params.set(\"variant\", variant);\n        }\n\n        return this.http\n            .get<void>(registry.contextPath + \"/localization/installLocale\", { params: params })\n            .toPromise();\n    }\n\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from \"@registry/model/registry\";\nimport { AttributeConfigInfo } from \"@registry/model/sync\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<SynchronizationConfig>>(registry.contextPath + \"/synchronization-config/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<SynchronizationConfig> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<AttributeConfigInfo[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalId\", externalId);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<AttributeConfigInfo[]>(registry.contextPath + \"/synchronization-config/get-custom-attr\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalSystemId\", externalSystemId);\n        params = params.set(\"hierarchyTypeCode\", hierarchyTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-config-for-es\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/apply\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {};\n\n        if (oid != null) {\n            params = { oid: oid };\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(registry.contextPath + \"/synchronization-config/edit\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    run(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/run\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJobs(oid: string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        //        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExportScheduledJob>>(registry.contextPath + \"/synchronization-config/get-jobs\", { params: params })\n            //            .pipe(finalize(() => {\n            //                this.eventService.complete();\n            //            }))\n            .toPromise();\n    }\n\n    getFhirExportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-export-implementations\", { params: params })\n            .toPromise();\n    }\n\n    getFhirImportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-import-implementations\", { params: params })\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";import { PageResult } from \"@shared/model/core\";\r\n declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    getMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"orderBy\", \"createDate\");\r\n        params = params.set(\"pageNum\", pageNum.toString());\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"whereStatus\", whereStatus);\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/tasks/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    completeTask(taskId: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/complete\", JSON.stringify({ id: taskId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setTaskStatus(taskId: string, status: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/setTaskStatus\", JSON.stringify({ id: taskId, status: status }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType, GeoObject } from \"./registry\";\nimport { HierarchyType } from \"./hierarchy\";\n\nexport class LocationInformation {\n    types: GeoObjectType[];\n    hierarchies: HierarchyType[];\n    hierarchy?: string;\n    entity?: GeoObject;\n    childType?: string;\n    geojson: {\n        type: string;\n        features: GeoObject[]\n    }\n}\n\nexport class ModalState {\n    SEARCH: number;\n    VIEW: number;\n}\n\nexport const PANEL_SIZE_STATE = {\n    MINIMIZED: 0,\n    WINDOWED: 1,\n    FULLSCREEN: 2\n};\n","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { AttributeType, AttributeTermType, AttributeDecimalType, ManageGeoObjectTypeModalState, AttributedType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { AttributeTypeService } from \"@registry/service\";\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"define-attribute-modal-content\",\n    templateUrl: \"./define-attribute-modal-content.component.html\",\n    styleUrls: [\"./define-attribute-modal-content.css\"]\n})\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: AttributedType;\n    @Input() service: AttributeTypeService;\n\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n    @Output() geoObjectTypeChange: EventEmitter<AttributedType> = new EventEmitter<AttributedType>();\n\n    message: string = null;\n    newAttribute: AttributeType = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.create.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.attributeInputComponent) {\n            this.attributeInputComponent.animate();\n        }\n    }\n\n    handleOnSubmit(): void {\n        this.service.addAttributeType(this.geoObjectType.code, this.newAttribute).then(data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setAttribute(type: string): void {\n        if (type === \"term\") {\n            this.newAttribute = new AttributeTermType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else if (type === \"float\") {\n            this.newAttribute = new AttributeDecimalType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else {\n            this.newAttribute = new AttributeType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        let isAttrValid: boolean = false;\n\n        if (this.attributeInputComponent) {\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n\n        if (isAttrValid) {\n            return true;\n        }\n\n        return false;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'local'}\" (click)=\"setAttribute('local')\">\n                                <localize key=\"data.type.label.localtext\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'classification'}\" (click)=\"setAttribute('classification')\">\n                                <localize key=\"data.type.label.classification\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [isNew]=\"true\" [excludeDescription]=\"false\" [type]=\"newAttribute.type\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState, AttributedType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { AttributeTypeService, RegistryService } from \"@registry/service\";\n\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"edit-attribute-modal-content\",\n    templateUrl: \"./edit-attribute-modal-content.component.html\",\n    styleUrls: [\"./edit-attribute-modal-content.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]]\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: AttributedType;\n    @Input() attribute: AttributeType = null;\n    @Input() service: AttributeTypeService;\n\n    @Output() geoObjectTypeChange: EventEmitter<AttributedType> = new EventEmitter<AttributedType>();\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.service.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n            for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n                let attr = this.geoObjectType.attributes[i];\n                if (attr.code === data.code) {\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.stateChange.emit(state);\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    back(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>:\n                        {{attribute.label.localizedValue}}\n                    </h1>\n\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.text\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.integer\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.float\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.boolean\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.date\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.term\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'classification'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.classification\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'local'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.localtext\"></localize>\n                    </h4>\n\n                </div>\n\n\n\n                <fieldset>\n\n                    <attribute-input [isNew]=\"false\"\n                        [excludeDescription]=\"attribute.type === 'term' ? true : false\" [type]=\"attribute.type\"\n                        [(attribute)]=\"attribute\">\n                    </attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\"\n                        [geoObjectType]=\"geoObjectType\" (stateChange)=\"onModalStateChange($event)\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <!-- <div class=\"label-holder\"> \n                        </div> -->\n                            <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"manage-term-options\",\n    templateUrl: \"./manage-term-options.component.html\",\n    styleUrls: [\"./manage-term-options.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                    style({ opacity: 0 }),\n                    animate(\"500ms\", style({ opacity: 1 }))\n                ]\n                ),\n                transition(\n                    \":leave\", [\n                    style({ opacity: 1 }),\n                    animate(\"0ms\", style({ opacity: 0 }))\n\n                ]\n                )]\n        )\n    ]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType;\n\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    termOption: Term;\n    state: string = \"none\";\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.termOption.code && this.termOption.code.length > 0) {\n            // If code has a space\n            if (this.termOption.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            // If label is only spaces\n            for (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n                if (this.termOption.label.localeValues[i].value.replace(/\\s/g, \"\").length === 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n            return false;\n        }\n\n        return false;\n    }\n\n    addTermOption(): void {\n        this.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            this.attribute.rootTerm.children.push(data);\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    deleteTermOption(termOption: Term): void {\n        this.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n            if (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n                this.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n            }\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    removeTermOption(termOption: Term): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + termOption.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteTermOption(termOption);\n        });\n    }\n\n    editTermOption(termOption: Term): void {\n        const state = {\n            state: GeoObjectTypeModalStates.editTermOption,\n            attribute: this.attribute,\n            termOption: JSON.parse(JSON.stringify(termOption))\n        };\n\n        this.stateChange.emit(state);\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from \"@shared/model/modal\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"edit-term-option-input\",\n    templateUrl: \"./edit-term-option-input.component.html\",\n    styleUrls: [],\n    animations: [\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                    style({ opacity: 0 }),\n                    animate(\"500ms\", style({ opacity: 1 }))\n                ]\n                ),\n                transition(\n                    \":leave\", [\n                    style({ opacity: 1 }),\n                    animate(\"0ms\", style({ opacity: 0 }))\n                ]\n                )]\n        )\n    ]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType = null;\n    @Input() termOption: Term;\n\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), active: true, enabled: true }\n\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService,\n                private localizeService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            // Update the term definition on the attribute\n            const index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n            if (index !== -1) {\n                this.attribute.rootTerm.children[index] = data;\n            }\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.code === 'invalid' ? false : attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component({\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n})\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() property: string = 'type';\n    @Input() includeChild: boolean = false;\n\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor(private service: IOService) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors(this.configuration[this.property].code, this.configuration.hierarchy, true, this.includeChild).then(locations => {\n            this.configuration.locations = locations;\n        });\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit(this.configuration);\n        this.stateChange.emit('NEXT');\n    }\n\n    onBack(): void {\n        this.stateChange.emit('BACK');\n    }\n\n    onCancel(): void {\n        this.stateChange.emit('CANCEL');\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component({\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n})\nexport class SpreadsheetModalComponent {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n    property: string;\n    includeChild: boolean;\n\n    constructor(private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router) {\n    }\n\n    init(configuration: ImportConfiguration, property: string = 'type', includeChild: boolean = false): void {\n        this.configuration = configuration;\n        this.property = property;\n        this.includeChild = includeChild;\n    }\n\n    onStateChange(event: string): void {\n        if (event === 'BACK') {\n            this.handleBack();\n        }\n        else if (event === 'NEXT') {\n            this.handleNext();\n        }\n        else if (event === 'CANCEL') {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if (this.state === 'LOCATION') {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if (this.state === 'MAP') {\n            if (!this.configuration.postalCode) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if (this.state === 'LOCATION') {\n            this.handleSubmit();\n        }\n        else if (this.state === 'LOCATION-PROBLEM') {\n\n            if (this.configuration.termProblems != null) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if (this.state === 'TERM-PROBLEM') {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet(this.configuration).then(config => {\n\n            if (config.locationProblems != null) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if (config.termProblems != null) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                });\n                this.bsModalRef.content.message = this.localizeService.decode(\"data.import.go.to.scheduled.jobs.confirm.message\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"data.import.go.to.scheduled.jobs.button\");\n\n                (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                });\n\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport(this.configuration).then(response => {\n            this.bsModalRef.hide()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" [property]=\"property\" [includeChild]=\"includeChild\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    SimpleChanges,\n    OnDestroy\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService, GeometryService, OLD_LAYER_COLOR } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { VersionDiffView } from \"./manage-versions-model\";\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport * as ColorGen from \"color-generator\";\nimport { CHANGE_REQUEST_SOURCE_TYPE_NEW, CHANGE_REQUEST_SOURCE_TYPE_OLD, GeoJsonLayer, GeoObjectLayerDataSource, Layer, ValueOverTimeDataSource } from \"@registry/service/layer-data-source\";\nimport { LocationManagerState } from \"../location-manager/location-manager.component\";\n\n@Component({\n    selector: \"manage-versions\",\n    templateUrl: \"./manage-versions.component.html\",\n    styleUrls: [\"./manage-versions.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class ManageVersionsComponent implements OnInit, OnDestroy {\n\n    // height (as number) in pixels\n    mapRowHeight: number;\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    message: string = null;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() isGeometryInlined: boolean = false;\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() hierarchy: HierarchyOverTime = null;\n\n    filterDate: string = null;\n\n    @Input() showAllInstances: boolean = true;\n\n    viewModels: VersionDiffView[] = [];\n\n    isRootOfHierarchy: boolean = false;\n\n    isInitialized: boolean = false;\n\n    layerChangeSub: Subscription;\n\n    stateSub: Subscription;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public geomService: GeometryService, public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, this.hierarchy) as ChangeRequestChangeOverTimeAttributeEditor;\n\n        this.calculateViewModels();\n        this.isRootOfHierarchy = this.attributeType.type === \"_PARENT_\" && (this.hierarchy == null || this.hierarchy.types == null || this.hierarchy.types.length === 0);\n        this.isInitialized = true;\n\n        this.layerChangeSub = this.geomService.layersChange.subscribe(layers => {\n            if (this.viewModels) {\n                this.viewModels.forEach(view => {\n                    this.syncLayerReferences(layers, view);\n                });\n            }\n        });\n        this.stateSub = this.geomService.stateChange$.subscribe(state => this.stateChange(state));\n        this.stateChange(this.geomService.getState());\n    }\n\n    ngAfterViewInit() {\n        if (this.isNew && this.attributeType.code === \"exists\" && this.viewModels.length === 0) {\n            this.onAddNewVersion();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isInitialized && changes.showAllInstances && changes.showAllInstances.previousValue !== changes.showAllInstances.currentValue) {\n            this.calculateViewModels();\n        }\n        if (changes.readonly && changes.readonly.previousValue !== changes.readonly.currentValue) {\n            this.viewModels.forEach(vm => {\n                vm.destroy(this);\n                if (vm.objectLayer != null) {\n                    this.geomService.removeLayer(vm.objectLayer.getId());\n                    vm.objectLayer = null;\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.viewModels.forEach(vm => vm.destroy(this));\n        this.layerChangeSub.unsubscribe();\n        this.stateSub.unsubscribe();\n    }\n\n    stateChange(state: LocationManagerState): void {\n        if (this.filterDate !== state.date) {\n            this.filterDate = state.date;\n            this.calculateViewModels();\n        }\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasLocalizationChanged(viewModel: VersionDiffView, locale: string): boolean {\n        return viewModel.editor.oldValue != null && this.getValueAtLocale(viewModel.editor.oldValue, locale) !== this.getValueAtLocale(viewModel.editor.value, locale);\n    }\n\n    onDateChange(): any {\n        setTimeout(() => {\n            this.isValid = this.changeRequestAttributeEditor.validate() && this.checkDateFieldValidity();\n\n            this.isValidChange.emit(this.isValid);\n        }, 0);\n    }\n\n    remove(view: VersionDiffView): void {\n        if (this.geomService.isEditing()) {\n            this.geomService.stopEditing();\n        }\n\n        this.changeRequestAttributeEditor.remove(view.editor);\n\n        if (view.summaryKey === SummaryKey.NEW || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            const index = this.viewModels.findIndex(v => v.editor.oid === view.editor.oid);\n\n            if (index > -1) {\n                this.viewModels.splice(index, 1);\n            }\n        }\n\n        if (this.attributeType.type === \"geometry\") {\n            this.geomService.reload();\n        }\n    }\n\n    onAddNewVersion(original?: ValueOverTimeCREditor): void {\n        let editor = this.changeRequestAttributeEditor.createNewVersion(original);\n\n        if (this.isNew && this.changeRequestEditor.geoObject.attributes[\"exists\"]) {\n            let values = this.changeRequestEditor.geoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                editor.startDate = value.startDate;\n                editor.endDate = value.endDate;\n            }\n        }\n\n        this.viewModels.push(new VersionDiffView(this, editor));\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return lv == null ? null : new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    calculateViewModels(): void {\n        let viewModels: VersionDiffView[] = [];\n\n        this.viewModels.forEach(viewModel => viewModel.destroy(this));\n\n        let editors = this.changeRequestAttributeEditor.getEditors(this.showAllInstances);\n\n        let layers: Layer[];\n        if (this.attributeType.code === \"geometry\") {\n            layers = this.geomService.getLayers();\n        }\n\n        editors.forEach((editor: ValueOverTimeCREditor) => {\n            if (this.filterDate == null || this.dateService.between(this.filterDate, editor.startDate, editor.endDate)) {\n                let view = new VersionDiffView(this, editor);\n                viewModels.push(view);\n\n                if (this.attributeType.code === \"geometry\") {\n                    this.syncLayerReferences(layers, view);\n                }\n            }\n        });\n\n        this.viewModels = viewModels;\n    }\n\n    /*\n     * It is possible that somebody else may have already created a particular layer for this view. We want to find it, and make the view\n     *   aware that a layer already exists.\n     */\n    syncLayerReferences(layers: Layer[], view: VersionDiffView) {\n        // Object layer\n        let indexOL = layers.findIndex(layer => layer.dataSource instanceof GeoObjectLayerDataSource && (layer.dataSource as GeoObjectLayerDataSource).getCode() === this.changeRequestEditor.geoObject.attributes[\"code\"] && (layer.dataSource as GeoObjectLayerDataSource).getTypeCode() === this.changeRequestEditor.geoObjectType.code && this.dateService.between((layer.dataSource as GeoObjectLayerDataSource).getDate(), view.editor.startDate, view.editor.endDate));\n        if (indexOL !== -1) {\n            view.objectLayer = layers[indexOL];\n        } else {\n            delete view.objectLayer;\n        }\n\n        // Editing Layer\n        let keyEL = new ValueOverTimeDataSource(\"NEW\", view.editor).getKey();\n        let indexEL = layers.findIndex(l => l.dataSource.getKey() === keyEL);\n        if (indexEL !== -1) {\n            view.editingLayer = layers[indexEL] as GeoJsonLayer;\n        } else {\n            delete view.editingLayer;\n        }\n\n        // Old Layer\n        let keyOLD = new ValueOverTimeDataSource(\"OLD\", view.editor).getKey();\n        let indexOLD = layers.findIndex(l => l.dataSource.getKey() === keyOLD);\n        if (indexOLD !== -1) {\n            view.oldLayer = layers[indexOLD] as GeoJsonLayer;\n        } else {\n            delete view.oldLayer;\n        }\n    }\n\n    onApprove(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.PENDING).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    /**\n     * Hierarchy Editing\n     */\n\n    getTypeAheadObservable(editor: HierarchyCREditor, startDate: string, endDate: string, type: any, entry: any, index: number): Observable<any> {\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let parentTypeCode = null;\n        let hierarchyCode = null;\n\n        if (index > 0) {\n            let pType = editor.changeRequestAttributeEditor.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n                parentTypeCode = parent.geoObject.properties.type;\n            }\n        }\n\n        return new Observable((observer: Observer<Object>) => {\n            if (parentCode == null) {\n                let loopI = index;\n\n                while (parentCode == null && loopI > 0) {\n                    loopI = loopI - 1;\n\n                    let parent = entry.parents[editor.changeRequestAttributeEditor.hierarchy.types[loopI].code];\n\n                    if (parent != null) {\n                        if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                            parentCode = parent.geoObject.properties.code;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        } else if (parent.goCode != null) {\n                            parentCode = parent.goCode;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        }\n                    }\n                }\n            }\n\n            this.service.getGeoObjectSuggestions(entry.parents[type.code].text, geoObjectTypeCode, parentCode, parentTypeCode, hierarchyCode, startDate, endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(editor: HierarchyCREditor, e: TypeaheadMatch, type: any, entry: any, date: string): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        entry.parents[type.code].text = e.item.name + \" : \" + e.item.code;\n        entry.parents[type.code].goCode = e.item.code;\n\n        let parentTypes = [];\n\n        for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n            let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n\n            parentTypes.push(current.code);\n\n            if (current.code === type.code) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects(e.item.code, type.code, parentTypes, true, date).then(ancestors => {\n            // First filter the response for ancestors of only the correct hierarchy\n            ancestors.parents = ancestors.parents.filter(p => p.hierarchyType === editor.changeRequestAttributeEditor.hierarchy.code);\n\n            delete entry.parents[type.code].goCode;\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestors.geoObject.properties.code;\n\n            for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n                let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while (ancestor != null && ancestor.geoObject.properties.type !== current.code) {\n                    if (ancestor.parents.length > 0) {\n                        ancestor = ancestor.parents[0];\n                    } else {\n                        ancestor = null;\n                    }\n                }\n\n                if (ancestor != null) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestor.geoObject.properties.code;\n                }\n            }\n\n            editor.setParentValue(type, entry.parents);\n        });\n    }\n\n    /**\n     * GEOMETRY EDITING\n     */\n\n    toggleGeometryEditing(view: VersionDiffView) {\n        this.geomService.setEditing(!view.editingLayer.editing, view.editingLayer);\n\n        if (this.geoObjectType.geometryType === \"POINT\" || this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            view.coordinate = {};\n        }\n    }\n\n    toggleGeometryView(view: VersionDiffView) {\n        // Using setTimeout() to pull the calc out of the animation stack so the dom can finish mutating before getting final height.\n        setTimeout(() => {\n            this.mapRowHeight = this.elementRef.nativeElement.children[0].getElementsByClassName(\"attribute-element-wrapper\")[0].offsetHeight;\n        }, 0);\n\n        if (this.readonly && !this.isGeometryInlined) {\n            if (view.objectLayer) {\n                this.geomService.removeLayer(view.objectLayer.getId());\n                delete view.objectLayer;\n            } else {\n                let geoObject = this.changeRequestEditor.geoObject;\n                let displayLabel = (geoObject.attributes[\"displayLabel\"].values && geoObject.attributes[\"displayLabel\"].values.length > 0) ? geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : geoObject.attributes.code;\n                let typeLabel = this.changeRequestEditor.geoObjectType.label.localizedValue;\n                let label = displayLabel + \" \" + this.dateService.formatDateForDisplay(view.editor.startDate) + \" (\" + typeLabel + \")\";\n\n                let dataSource = new GeoObjectLayerDataSource(this.service, geoObject.attributes[\"code\"], this.changeRequestEditor.geoObjectType.code, view.editor.startDate);\n                view.objectLayer = dataSource.createLayer(label, true, ColorGen().hexString());\n\n                this.geomService.addOrUpdateLayer(view.objectLayer, 0);\n            }\n        } else {\n            if (view.editingLayer) {\n                if (view.editingLayer.editing) {\n                    this.geomService.stopEditing();\n                }\n                this.geomService.removeLayer(view.editingLayer.getId());\n                this.geomService.unregisterDataSource(CHANGE_REQUEST_SOURCE_TYPE_NEW);\n                delete view.editingLayer;\n            } else {\n                let geoObject = this.changeRequestEditor.geoObject;\n                let displayLabel = (geoObject.attributes[\"displayLabel\"].values && geoObject.attributes[\"displayLabel\"].values.length > 0) ? geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : geoObject.attributes.code;\n                let typeLabel = this.changeRequestEditor.geoObjectType.label.localizedValue;\n                let label = displayLabel + \"* \" + this.dateService.formatDateForDisplay(view.editor.startDate) + \" (\" + typeLabel + \")\";\n\n                let dataSource = new ValueOverTimeDataSource(\"NEW\", view.editor);\n                view.editingLayer = dataSource.createLayer(label, true, ColorGen().hexString()) as GeoJsonLayer;\n                this.geomService.registerDataSource(dataSource);\n\n                this.geomService.addOrUpdateLayer(view.editingLayer, 0);\n            }\n        }\n    }\n\n    toggleOldGeometryView(view: VersionDiffView) {\n        if (view.oldLayer != null) {\n            this.geomService.removeLayer(view.oldLayer.getId());\n            this.geomService.unregisterDataSource(CHANGE_REQUEST_SOURCE_TYPE_OLD);\n            delete view.oldLayer;\n        } else {\n            let geoObject = this.changeRequestEditor.geoObject;\n            let displayLabel = (geoObject.attributes[\"displayLabel\"].values && geoObject.attributes[\"displayLabel\"].values.length > 0) ? geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : geoObject.attributes.code;\n            let typeLabel = this.changeRequestEditor.geoObjectType.label.localizedValue;\n            let label = displayLabel + \" \" + this.dateService.formatDateForDisplay(view.editor.startDate) + \" (\" + typeLabel + \")\";\n\n            let dataSource = new ValueOverTimeDataSource(\"OLD\", view.editor);\n            view.oldLayer = dataSource.createLayer(label, true, OLD_LAYER_COLOR) as GeoJsonLayer;\n            this.geomService.registerDataSource(dataSource);\n\n            this.geomService.addOrUpdateLayer(view.oldLayer, 1);\n        }\n    }\n\n    manualCoordinateChange(view: VersionDiffView): void {\n        if (view.newCoordinateX || view.newCoordinateY) {\n            let newX = view.newCoordinateX;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newX = view.value.coordinates[0];\n            }\n            let newY = view.newCoordinateY;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newY = view.value.coordinates[1];\n            }\n            view.value.coordinates = [[newX || 0, newY || 0]];\n            delete view.newCoordinateX;\n            delete view.newCoordinateY;\n            return;\n        }\n\n        const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n        const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n        view.coordinate.latValid = isLatitude(view.value.coordinates[0][1]);\n        view.coordinate.longValid = isLongitude(view.value.coordinates[0][0]);\n\n        if (!view.coordinate.latValid || !view.coordinate.longValid) {\n            // outside EPSG bounds\n            this.isValid = false;\n            this.isValidChange.emit(this.isValid);\n            return;\n        }\n\n        this.geomService.setPointCoordinates(view.value.coordinates[0][1], view.value.coordinates[0][0]);\n    }\n\n}\n","<div>\n  <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n  </ng-template>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form name=\"manage-versions-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div [ngStyle]=\"{'width' : (isGeometryInlined && geomService.getLayers().length > 0) ? '45%' : '100%'}\" style=\"display:inline-block;\" class=\"col\">\n          <div *ngIf=\"changeRequestEditor.geoObject\" class=\"attribute-version-wrapper\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                <div *ngIf=\"attributeType\">\n                  <table class=\"table table-striped\">\n                    <tbody class=\"attribute-element-wrapper\" >\n                      <p class=\"message\" *ngIf=\"!isRootOfHierarchy && viewModels.length === 0\">\n                        <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize> \n                      </p>\n                      <div *ngIf=\"isRootOfHierarchy\">\n                        <localize key=\"changeovertime.manageVersions.rootOfHierarchy.message\"></localize>\n                      </div>\n                      \n                      <ng-container *ngIf=\"!isRootOfHierarchy\">\n                        <!-- TODO : Fade in out disabled because it doesn't work all that well with stability periods   @fadeInOut -->\n                        <tr  *ngFor=\"let viewModel of viewModels; let i = index;\" class=\"version-row\"\n                            [ngClass]=\"{ 'geometry-edit-active' : (viewModel.editingLayer && viewModel.editingLayer.editing) }\">\n                            <td class=\"version-column-wrapper\" [ngClass]=\"{'error-border': viewModel.hasError(),\n                            'warning-border': viewModel.hasWarning(),\n                            'warning' : viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'}\" >\n                            <div *ngIf=\"viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'\" class=\"version-column-indicator\">\n                                {{viewModel.summaryKeyLocalized}}\n                              </div>\n                            \n                            <table>\n                            \n                              <!-- \n                                Local Type \n                              -->\n                              <ng-container *ngIf=\"attributeType.type === 'local' && viewModel.value\">\n                               <tr *ngFor=\"let loc of viewModel.value.localeValues; let idx = index;\" class=\"attribute-value-row\">\n                                 <td colspan=\"2\">\n                                   <h5><convert-key-label [key]=\"loc.locale\"></convert-key-label></h5>\n                                   \n                                   <input [ngClass]=\"{'has-changed': (hasLocalizationChanged(viewModel, loc.locale) && !isNew)}\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"viewModel.editor.setLocalizedValue(viewModel.value)\" [required]=\"loc.locale === 'defaultLocale'\">\n                                   \n                                   <div class=\"form-input-validation-error-message-wrapper\">\n                                     <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">\n                                       <localize key=\"manage.versions.value.required.message\"></localize>\n                                     </p>\n                                   </div>\n                                   \n                                   <div *ngIf=\"hasLocalizationChanged(viewModel, loc.locale) && !isNew\">\n                                     <p class=\"warning-text display-current-value\" style=\"padding: 5px 0;margin-bottom:0;\">\n                                       <localize key=\"change.request.changed.value.prefix\"></localize>\n                                       {{ getValueAtLocale(viewModel.oldValue, loc.locale) }}\n                                     </p>\n                                   </div>\n                                 </td>\n                               </tr>\n                              </ng-container>\n\n                              <tr *ngIf=\"attributeType.type === 'geometry' || attributeType.type === '_PARENT_' || attributeType.type === 'term' || attributeType.type === 'classification' || attributeType.type === 'character' || attributeType.type === 'date' || attributeType.type === 'integer' || attributeType.type === 'float' || attributeType.type === 'boolean'\" class=\"attribute-value-row\">\n                               <td colspan=\"2\">\n                               \n                                 <div *ngIf=\"attributeType.type === 'term'\">\n                                   <select [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" id=\"mod-{{attributeType.code}}\" [name]=\"'mod-term-' + i + '-' + attributeType.code\" class=\"select-area\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                       <option value=\"\"></option>\n                                       <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\" [value]=\"option.code\">{{option.label.localizedValue}}</option>\n                                   </select>\n                                 </div>\n\n                                 <div *ngIf=\"attributeType.type === 'classification'\">\n                                   <classification-field\n                                    [classificationType]=\"attributeType.classificationType\"\n                                    [rootCode]=\"attributeType.rootTerm != null ? attributeType.rootTerm.code : null\"\n                                    [classNames]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"\n                                    [name]=\"'mod-term-' + i + '-' + attributeType.code\"\n                                    [(value)]=\"viewModel.value\" \n                                    [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                   </classification-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'character'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'date'\">\n                                   <date-field [customStyles]=\"(viewModel.oldValue && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.value\" label=\"\" [inputName]=\"'date-val-' + i\" [allowInfinity]=\"false\" [allowFutureDates]=\"true\" \n                                       [required]=\"true\" [placement]=\"'right'\" [(valid)]=\"isValid\" [disable]=\"readonly\" ></date-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'integer' || attributeType.type === 'float'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"number\" class=\"form-control\" [name]=\"'int-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'boolean'\">\n\t                                 <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t                                   <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === true\" [value]=\"true\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t                                 </label> \n\t                                 <label class=\"radio radio-inline\"> \n\t                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === false\" [value]=\"false\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t                                 </label>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === '_PARENT_'\">\n                                   <ng-container *ngIf=\"hierarchy != null && hierarchy.types != null && hierarchy.types.length > 0\">\n                                     <div style=\"float:left;width:100%;\" *ngFor=\"let type of hierarchy.types; let j = index\"> \n                                       {{type.label}}\n                                       <div class=\"input-group\">\n                                          <input style=\"width:100%;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"type.code + '-' + i\"\n                                            [disabled]=\"readonly || viewModel.summaryKey === 'DELETE' || viewModel.startDate == null || viewModel.startDate === ''\"\n                                            [(ngModel)]=\"viewModel.value.parents[type.code].text\" \n                                            [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(viewModel.editor, viewModel.startDate, viewModel.endDate, type, viewModel.value, j)\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect(viewModel.editor, $event, type, viewModel.value, viewModel.startDate)\" \n                                            (typeaheadLoading)=\"viewModel.value.loading[type.code] = $event\"\n                                            [ngClass]=\"{'inline-loading':viewModel.value.loading[type.code], 'has-changed': (viewModel.oldValue && !isNew)}\"                                                                \n                                            [typeaheadOptionsLimit]=\"7\"\n                                            [typeaheadItemTemplate]=\"customItemTemplate\" \n                                            [typeaheadMinLength]=\"0\"\n                                            [typeaheadWaitMs]=\"300\">\n                                          \n                                            <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\" (click)=\"viewModel.editor.removeType(type)\"> \n                                              <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                            </span>\n                                                  \n                                            <!-- Hack: This is needed for formatting  -->\n                                            <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\"> \n                                            </span>\n                                        </div>\n                                     </div>\n                                   </ng-container>\n                                 </div> \n                                 <div *ngIf=\"viewModel.oldValue && !isNew && attributeType.type !== 'geometry'\">\n                                   <p class=\"warning-text display-current-value\">\n                                     <localize key=\"change.request.changed.value.prefix\"></localize>\n                                     \n                                     <ng-container ng-switch=\"attributeType.type\">\n                                      <ng-container ng-switch-when=\"'boolean'\">\n                                        <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === false) : (viewModel.oldValue === true)\" style=\"padding-left:3px;\">\n                                          <localize key=\"change.request.boolean.option.true\"></localize>\n                                        </span>\n                                        <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === true) : (viewModel.oldValue === false)\" style=\"padding-left:3px;\">\n                                          <localize key=\"change.request.boolean.option.false\"></localize>\n                                        </span>\n                                      </ng-container> \n<!--\n\n  <ng-container ng-switch-when=\"'classification'\">\n    {{viewModel.oldValue}}\n  </ng-container> \n-->                                      \n                                      <ng-container ng-switch-default>\n                                        {{ viewModel.oldValue }}\n                                      </ng-container> \n                                     </ng-container>\n                                   </p>\n                                 </div>\n                                 \n                                 <table *ngIf=\"attributeType.type === 'geometry'\" style=\"padding:0;\">\n                                 <!-- \n                                    Geometry \n                                 -->\n<!--                                   <div *ngIf=\"attributeType.type === 'geometry'\"> -->\n  \n<!--                                     <td style=\"vertical-align: middle;padding-left:0;\"> -->\n                                      <tr>\n                                        <td colspan=\"2\" style=\"padding-left:0;\">\n                                        \n                                          <!-- Old Layer -->\n                                          <button *ngIf=\"viewModel.oldValue && viewModel.editingLayer\" class=\"btn btn-primary\" (click)=\"toggleOldGeometryView(viewModel)\" role=\"button\" [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                           <localize *ngIf=\"!viewModel.oldLayer || !viewModel.oldLayer.rendered\" key=\"changeovertime.manageVersions.geometry.viewOld\"></localize>\n                                           <localize *ngIf=\"viewModel.oldLayer && viewModel.oldLayer.rendered\" key=\"changeovertime.manageVersions.geometry.hideOld\"></localize>\n                                          </button>\n                                          <!-- Object Layer -->\n                                          <button class=\"btn btn-primary\" style=\"margin-left:0;\" (click)=\"toggleGeometryView(viewModel)\" role=\"button\"\n                                            [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"!((viewModel.objectLayer && viewModel.objectLayer.rendered) || (viewModel.editingLayer && viewModel.editingLayer.rendered))\" key=\"changeovertime.manageVersions.geometry.view\"></localize>\n                                            <localize *ngIf=\"((viewModel.objectLayer && viewModel.objectLayer.rendered) || (viewModel.editingLayer && viewModel.editingLayer.rendered))\" key=\"changeovertime.manageVersions.geometry.hide\"></localize>\n                                          </button>\n                                          <!-- Editing Layer -->\n                                          <button *ngIf=\"viewModel.editingLayer && viewModel.editingLayer.rendered && geoObjectType.isGeometryEditable\" class=\"btn btn-primary\" (click)=\"toggleGeometryEditing(viewModel)\" role=\"button\"\n                                            [disabled]=\"readonly || viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"viewModel.editingLayer && !viewModel.editingLayer.editing\" key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                            <localize *ngIf=\"viewModel.editingLayer && viewModel.editingLayer.editing\" key=\"changeovertime.manageVersions.geometry.save\"></localize>\n                                          </button>\n\n                                          <i *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"fa fa-copy clickable\" (click)=\"onAddNewVersion(viewModel.editor)\"></i>                                          \n                                        </td>\n                                      </tr>\n  \n                                      <tr *ngIf=\"(viewModel.editingLayer && viewModel.editingLayer.rendered) && (geoObjectType.geometryType === 'POINT' || geoObjectType.geometryType === 'MULTIPOINT') && viewModel.value && viewModel.value.coordinates && (viewModel.value.coordinates.length == 1 || viewModel.value.coordinates.length == 0)\">\n                                        \n                                        <td style=\"width:50%;padding-left:0;padding-right:5px;\" >\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.latitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][1]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateY\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLatitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n                                        <td style=\"width:50%;\">\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.longitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][0]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.editingLayer && viewModel.editingLayer.editing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateX\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLongitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n  \n                                      </tr>\n<!--                                     </td> -->\n<!--                                   </div> -->\n                                  </table>\n                              </td>\n\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5>\n                              \n                                  <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldStartDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"true\" [required]=\"true\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate && !readonly ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                                  \n                                  <div *ngIf=\"viewModel.oldStartDate && !isNew\">\n                                    <p class=\"warning-text display-current-value\">\n                                      <localize key=\"change.request.changed.value.prefix\"></localize>\n                                      {{ viewModel.oldStartDate }}\n                                    </p>\n                                  </div>\n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                    <h5>\n                                      <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                    </h5>\n                                    <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldEndDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"viewModel.summaryKey !== 'DELETE' && !readonly\" [allowFutureDates]=\"true\" \n                                        [required]=\"true\" [placement]=\"'bottom'\" [oldDate]=\"(viewModel.oldEndDate && !isNew) ? viewModel.oldEndDate : null\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate != null ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                      \n                                    <!--\n                                    <div *ngIf=\"viewModel.oldEndDate && !isNew\">\n                                      <p class=\"warning-text\">\n                                        <localize key=\"change.request.changed.value.prefix\"></localize>\n                                        {{ viewModel.oldEndDate }}\n                                      </p>\n                                    </div>\n                                    -->\n                                  </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"viewModel.editor.conflictMessages && viewModel.editor.conflictMessages.size > 0\">\n                                <p *ngFor=\"let msg of viewModel.editor.conflictMessages\" [ngClass]=\"{'error-message': msg.severity === 'ERROR', 'warning-message': msg.severity === 'WARNING'}\" >\n                                  {{msg.message}}\n                                </p>\n                              </tr>\n                            </table>\n                            \n                          </td>\n                          \n                          \n<!--                             <td *ngIf=\"!readonly && (!this.isNew || attributeType.code !== 'exists') && (filterDate == null || (viewModel.summaryKey !== 'UNMODIFIED' && viewModel.summaryKey !== 'NEW'))\" (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" [title]=\"(viewModel.summaryKey === 'UNMODIFIED' ? 'changeovertime.manageVersions.remove.version' : 'changeovertime.manageVersions.revert.version') | localize\"> -->\n\n              \n                            <!-- Remove button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && (viewModel.summaryKey === 'UNMODIFIED' && viewModel.summaryKey !== 'NEW')\"\n                                [attr.disabled]=\"attributeType.code === 'exists' || filterDate != null\" \n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"(filterDate ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : 'changeovertime.manageVersions.remove.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-times\" ></i> \n                            </td>\n                            <!-- Revert button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && viewModel.summaryKey !== 'UNMODIFIED'\"\n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"('changeovertime.manageVersions.revert.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-undo\" ></i> \n                            </td>\n                        </tr>\n                      </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </li>\n              \n              <li *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"list-group-item\" style=\"text-align: left;\">\n                <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"> \n                  <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                </i>\n              </li>\n              \n            </ul>\n            \n            <!-- TODO : This code copy/pasted into standard-attribute-editor.component.html -->\n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject' && changeRequestEditor.changeRequest.approvalStatus === 'PENDING' && changeRequestEditor.changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.hasChanges()\" style=\"margin-left: 15px;\">\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'}\"\n                    type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n                <localize key=\"change.request.accept.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'}\" \n                    type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n                <localize key=\"change.request.reject.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'}\" \n                    type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n                <localize key=\"change.request.pending.btn\"></localize>\n              </button>\n            </div>              \n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.approvalStatus !== 'PENDING'\" style=\"margin-left:15px;\">\n              <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n                  <localize key=\"change.request.status.accepted\"></localize>\n              </strong>\n              <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n                  <localize key=\"change.request.status.rejected\"></localize>\n              </strong>\n            </div>\n            \n          </div>\n        </div>\n        <geoobject-editor-map style=\"width:55%;display:inline-block;vertical-align:top;margin-top:15px;\" *ngIf=\"isGeometryInlined && geomService.getLayers().length > 0\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" \n          [mapHeight]=\"mapRowHeight\" [readOnly]=\"!geoObjectType.isGeometryEditable && readonly\"\n          [bboxCode]=\"this.changeRequestEditor.geoObject.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"geomService.getLayers()[0].startDate\">\n        </geoobject-editor-map>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, DateService } from \"@shared/service\";\n\nimport * as ColorGen from \"color-generator\";\nimport { RegistryService, ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { GeoObjectType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { GeoObjectLayerDataSource } from \"@registry/service/layer-data-source\";\nimport { Router } from \"@angular/router\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\n\n@Component({\n    selector: \"submit-change-request\",\n    templateUrl: \"./submit-change-request.component.html\",\n    styleUrls: [\"./submit-change-request.css\"]\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    geoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    loading: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor(private modalService: BsModalService, private registryService: RegistryService, private geomService: GeometryService,\n        private changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService,\n        private router: Router, private dateService: DateService, private cacheService: RegistryCacheService) {\n        this.dataSource = Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    ngOnInit(): void {\n        this.cacheService.getTypeCache().waitOnTypes().then((types: GeoObjectType[]) => {\n        // this.registryService.getGeoObjectTypes([], null).then(types => {\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                const type = types[i];\n                const orgCode = type.organizationCode;\n                const typeCode = type.superTypeCode != null && type.superTypeCode !== \"\" ? type.superTypeCode : type.code;\n\n                if (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort((a, b) => {\n                if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n                else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n                else return 0;\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public handleDateChange() {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n        } else {\n            this.forDate = null;\n        }\n    }\n\n    public onValidChange(newValid: boolean) {\n        if (this.geoObject == null) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading(e: boolean): void {\n        this.loading = e;\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n            this.geoObject = geoObject;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onNewChangeRequest() {\n        let dataSource = new GeoObjectLayerDataSource(this.registryService, this.geoObject.attributes.code, this.geoObject.attributes.type, this.dateStr);\n\n        let displayLabel = (this.geoObject.attributes[\"displayLabel\"].values && this.geoObject.attributes[\"displayLabel\"].values.length > 0) ? this.geoObject.attributes[\"displayLabel\"].values[0].value.localizedValue : this.geoObject.attributes.code;\n        let typeLabel = this.geoObjectType.label.localizedValue;\n        let sDate = this.dateStr == null ? \"\" : \" \" + this.dateService.formatDateForDisplay(this.dateStr);\n        let label = displayLabel + \" \" + sDate + \"(\" + typeLabel + \")\";\n\n        let layer = dataSource.createLayer(label, true, ColorGen().hexString());\n\n        this.geomService.zoomOnReady(layer.getId());\n        let layers = this.geomService.getDataSourceFactory().serializeLayers([layer]);\n\n        const params: any = { layers: JSON.stringify(layers) };\n\n        params.attrPanelOpen = true;\n        params.objectType = \"GEOOBJECT\";\n        params.type = this.geoObjectType.code;\n        params.code = this.geoObject.attributes.code;\n        params.date = this.dateStr;\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.geoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div style=\"margin-top:50px;margin-bottom:50px;background:#f7f7f7;width:100%;padding:10px;\">\n      <h3 style=\"margin-bottom: 20px;\"><localize key=\"change.request.search.for.geoobject.header\"></localize></h3>\n      <div class=\"row\">\n\n        <div class=\"col-md-3\">\n          <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>\n          <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\" [(ngModel)]=\"geoObjectType\" required>\n            <option>  </option>\n            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n          </select>\n        </div>\n        \n        <div class=\"col-md-3\">\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"!geoObjectType\" \n            [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" customStyles=\"width:100%\"></date-field>\n        </div>\n        \n        <div class=\"col-md-4\">\n          <localize key=\"change.request.search.for.geoobject.search.label\"></localize>\n          <input type=\"text\" [ngClass]=\"{'inline-loading':loading}\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" (typeaheadLoading)=\"changeTypeaheadLoading($event)\" [placeholder]=\"('masterlist.search' | localize) + '...'\" class=\"form-control\" autocomplete=\"off\">\n        </div>\n        \n        <div class=\"col-md-2\">\n          <label></label>\n           <!-- We cannot use the dataset-location-manager here because it pulls the tiles from the dataset (list) and we don't have a dataset. -->\n           <!-- <a *ngIf=\"preGeoObject && forDate\" [routerLink]=\"['/registry/dataset-location-manager', '123', preGeoObject.attributes.type, 'false', dateStr, preGeoObject.attributes.code, 'true']\" -->\n          \n           <a *ngIf=\"geoObject\" (click)=\"onNewChangeRequest()\" [routerLink]=\"['/registry/location-manager']\" [queryParams]=\"{type:geoObject.attributes.type, code:geoObject.attributes.code, pageContext:'DATA'}\">\n            <button class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n          </a>\n          <button *ngIf=\"!(geoObject)\" disabled=\"true\" class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n        </div>\n\n      </div>\n      \n    </div>\n  </div>\n</div>","import { Component, Input } from \"@angular/core\";\n\nimport { Step, StepConfig } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"step-indicator\",\n    templateUrl: \"./step-indicator.component.html\",\n    styleUrls: [\"./step-indicator.css\"]\n})\nexport class StepIndicatorComponent {\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"steps\")\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n    constructor() {\n        this._stepConfig = { steps: [] };\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { BusinessObject, BusinessType } from \"@registry/model/business-type\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class BusinessObjectService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    get(businessTypeCode: string, code: string): Promise<BusinessObject> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"businessTypeCode\", businessTypeCode);\n        params = params.append(\"code\", code);\n\n        this.eventService.start();\n\n        return this.http.get<BusinessObject>(registry.contextPath + \"/business-object/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getTypeAndObject(businessTypeCode: string, code: string): Promise<{type:BusinessType, object: BusinessObject}> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"businessTypeCode\", businessTypeCode);\n        params = params.append(\"code\", code);\n\n        this.eventService.start();\n\n        return this.http.get<{type:BusinessType, object: BusinessObject}>(registry.contextPath + \"/business-object/get-type-and-object\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { AttributeType, GeoObjectType, PRESENT } from \"@registry/model/registry\";\nimport Utils from \"@registry/utility/Utils\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\n\n@Component({\n    selector: \"list-type-publish-modal\",\n    templateUrl: \"./publish-modal.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypePublishModalComponent implements OnInit {\n\n    currentDate: Date = new Date();\n    message: string = null;\n    onListTypeChange: Subject<ListType> = null;\n\n    list: ListType = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    tab: string = \"LIST\";\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    gap: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private iService: IOService,\n        private lService: LocalizationService,\n        private cacheService: RegistryCacheService,\n        private bsModalRef: BsModalRef,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    init(listByType: ListTypeByType, onListTypeChange: Subject<ListType>, list?: ListType): void {\n        this.onListTypeChange = onListTypeChange;\n        this.readonly = !listByType.write;\n\n        const cache = this.cacheService.getTypeCache();\n\n        cache.waitOnTypes().then(types => {\n            this.geoObjectType = cache.getTypeByCode(listByType.typeCode);\n        });\n\n        if (list == null) {\n            this.isNew = true;\n            this.list = {\n                oid: null,\n                listType: \"single\",\n                organization: \"\",\n                typeCode: \"\",\n                typeLabel: \"\",\n                displayLabel: this.lService.create(),\n                description: this.lService.create(),\n                code: listByType.typeCode + \"_\" + Math.floor(Math.random() * 999999),\n                hierarchies: [],\n                subtypeHierarchies: [],\n                listMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: \"\",\n                    collectionDate: \"\",\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: \"\",\n                    organization: \"\",\n                    telephoneNumber: \"\",\n                    email: \"\"\n                },\n                geospatialMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: \"\",\n                    collectionDate: \"\",\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: \"\",\n                    organization: \"\",\n                    telephoneNumber: \"\",\n                    email: \"\",\n                    topicCategories: \"\",\n                    placeKeywords: \"\",\n                    updateFrequency: \"\",\n                    lineage: \"\",\n                    languages: \"\",\n                    scaleResolution: \"\",\n                    spatialRepresentation: \"vector\",\n                    referenceSystem: \"EPSG4326\",\n                    reportSpecification: \"\",\n                    distributionFormat: \"SHAPEFILE\"\n                }\n\n            };\n\n            this.list.typeCode = listByType.typeCode;\n            this.list.typeLabel = listByType.typeLabel;\n            this.list.organization = listByType.orgCode;\n\n            if (listByType.geometryType === \"MULTIPOINT\" || listByType.geometryType === \"POINT\") {\n                this.list.includeLatLong = true;\n            }\n\n            this.iService.getHierarchiesForType(this.list.typeCode, true).then(hierarchies => {\n                this.list.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.iService.getHierarchiesForSubtypes(this.list.typeCode, false).then(hierarchies => {\n                this.list.subtypeHierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.list = list;\n            this.isNew = false;\n\n            if (this.list.listType === \"interval\") {\n                this.list.intervalJson.forEach(interval => {\n                    interval.readonly = interval.endDate !== PRESENT ? \"BOTH\" : \"START\";\n                    interval.oid = uuid();\n                });\n            }\n        }\n    }\n\n    getIsDisabled(event): boolean {\n        let elClasses = event.target.classList;\n        for (let i = 0; i < elClasses.length; i++) {\n            let c = elClasses[i];\n            if (c === \"disabled\") {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.list).then(response => {\n            this.onListTypeChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getAttributeForFilter(filter: { attribute: string, comparator: string, value: any }): AttributeType {\n        if (filter.attribute != null && filter.attribute !== \"\") {\n            const attributeType = this.geoObjectType.attributes.find(attributeType => attributeType.code === filter.attribute);\n\n            return attributeType;\n        }\n\n        return null;\n    }\n\n    onNewFilter(): void {\n        if (this.list.filter == null) {\n            this.list.filter = [];\n        }\n\n        this.list.filter.push({\n            attribute: \"\",\n            operation: \"EQ\",\n            value: null,\n            id: uuid()\n        });\n    }\n\n    removeFilter(index: number): void {\n        this.list.filter.splice(index, 1);\n    }\n\n    onNewInterval(): void {\n        if (this.list.intervalJson == null) {\n            this.list.intervalJson = [];\n        }\n\n        this.list.intervalJson.push({\n            startDate: \"\",\n            endDate: \"\",\n            oid: uuid()\n        });\n    }\n\n    removeInterval(index: number): void {\n        this.list.intervalJson.splice(index, 1);\n\n        this.handleDateChange();\n    }\n\n    handleDateChange(): void {\n        if (this.list.listType === \"single\") {\n            this.valid = (this.list.validOn != null && this.list.validOn.length > 0);\n        } else if (this.list.listType === \"incremental\") {\n            this.valid = (this.list.publishingStartDate != null && this.list.publishingStartDate.length > 0);\n        } else if (this.list.listType === \"interval\") {\n            this.valid = this.list.intervalJson.map(interval => {\n                return ((interval.startDate != null && interval.startDate.length > 0) &&\n                    (interval.endDate != null && interval.endDate.length > 0) &&\n                    !this.dateService.after(interval.startDate, interval.endDate));\n            }).reduce((a, b) => a && b);\n\n            // Sort the entries\n            this.list.intervalJson = this.list.intervalJson.sort((a, b) => {\n                const d1: Date = new Date(a.startDate);\n                const d2: Date = new Date(b.startDate);\n\n                return d1 < d2 ? 1 : -1;\n            });\n\n            // Check for overlaps\n            this.list.intervalJson.forEach((element, index) => {\n                if (index > 0) {\n                    const future = this.list.intervalJson[index - 1];\n\n                    if (future.startDate && future.endDate && element.startDate && element.endDate) {\n                        let s1: any = new Date(future.startDate);\n                        let e1: any = new Date(future.endDate);\n                        let s2: any = new Date(element.startDate);\n                        let e2: any = new Date(element.endDate);\n\n                        if (Utils.dateRangeOverlaps(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                            this.valid = false;\n                        }\n                    }\n                }\n            });\n\n            if (this.valid) {\n                // Check for gap\n                this.gap = false;\n\n                this.list.intervalJson.forEach((element, index) => {\n                    if (index > 0) {\n                        const future = this.list.intervalJson[index - 1];\n\n                        if (future.startDate && element.endDate) {\n                            let e1: any = new Date(element.endDate);\n                            let s2: any = new Date(future.startDate);\n\n                            if (Utils.hasGap(e1.getTime(), s2.getTime())) {\n                                this.gap = true;\n                            }\n                        }\n                    }\n                });\n            }\n        } else {\n            this.valid = true;\n        }\n    }\n\n    getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-type=\"type\">\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.metadata.title\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n<!--\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.collection.date\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <date-field [(value)]=\"metadata.collectionDate\" [classNames]=\"['form-control']\" label=\"\"\n                [inputName]=\"'collectionDate'\" [allowFutureDates]=\"false\" name=\"collectionDate\" [disable]=\"readonly\">\n            </date-field>\n        </div>\n    </div>\n-->    \n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"true\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"list != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <!--         <div class=\"heading text-center\"> -->\n        <!--             <h1 *ngIf=\"isNew\"> -->\n        <!--                 <localize key=\"type.publish.title\"></localize> -->\n        <!--             </h1> -->\n        <!--             <h1 *ngIf=\"!isNew\"> -->\n        <!--                 {{list.displayLabel.localizedValue}} -->\n        <!--                 <localize key=\"type.publish.view.title\"></localize> -->\n        <!--             </h1> -->\n        <!--         </div> -->\n\n        <div class=\"text-center\">\n            <h2>\n                <localize key=\"type.publish.configuration.header\"></localize>\n            </h2>\n            <hr>\n        </div>\n\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\" style=\"text-align: center;\">\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'single'\"\n                            [value]=\"'single'\" [(ngModel)]=\"list.listType\" name=\"single\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.single.date\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'incremental'\"\n                            [value]=\"'incremental'\" [(ngModel)]=\"list.listType\" name=\"incremental\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.incremental.series\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'interval'\"\n                            [value]=\"'interval'\" [(ngModel)]=\"list.listType\" name=\"interval\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.interval.series\"></localize>\n                        </span>\n                    </label>\n\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.metadata.title\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.listAbstract\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeLabel\" name=\"typeLabel\" type=\"text\" class=\"form-control\"\n                            disabled />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeCode\" name=\"typeCode\" type=\"text\" class=\"form-control\" disabled />\n                    </div>\n                </div>\n\n                <div *ngIf=\"list.includeLatLong !== undefined\" class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"list.type.includeLatLong\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <boolean-field [(value)]=\"list.includeLatLong\" label=\"\" [disable]=\"false\"></boolean-field>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.hierarchies.length > 0\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\">\n                        <localize key=\"masterlist.parents\"></localize>\n                    </div>\n                </div>\n\n                <div *ngFor=\"let hierarchy of list.hierarchies\">\n                    <ng-container *ngIf=\"hierarchy.parents.length > 0\">\n                        <div class=\"row-holder\">\n                            <div class=\"label-holder\">\n                                <label> {{hierarchy.label}} </label>\n                            </div>\n                            <div class=\"holder\">\n                                <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                                    <!-- <div class=\"holder\"> -->\n\n                                    <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                        <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                        <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\"\n                                            [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly}\"\n                                            style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                            <span></span>\n                                        </div>\n\n                                        <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                        <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                                    </div>\n                                    <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                                    <!-- </div> -->\n                                </div>\n                            </div>\n                        </div>\n                    </ng-container>\n                </div>\n\n                <div *ngIf=\"list.subtypeHierarchies.length > 0\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"masterlist.subtypeHierarchies\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"row\" *ngFor=\"let hierarchy of list.subtypeHierarchies\">\n                                <!-- <div class=\"holder\"> -->\n\n                                <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                    <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                    <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\"\n                                        [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly}\"\n                                        style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                        <span></span>\n                                    </div>\n\n                                    <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.listType === 'single'\">\n                    <div class=\"label-holder\">\n                        <label for=\"validOn\">\n                            <localize key=\"list.type.valid.on\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <date-field [(value)]=\"list.validOn\" [classNames]=\"['form-control']\" label=\"\"\n                            [inputName]=\"'validOn'\" [allowFutureDates]=\"false\" name=\"listValidOn\" [required]=\"true\"\n                            [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n                    </div>\n                </div>\n\n                <ng-container *ngIf=\"list.listType === 'incremental'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.frequency\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"list.frequency\"\n                                [disabled]=\"readonly || !isNew\" required #frequency=\"ngModel\">\n                                <option></option>\n                                <option value=\"ANNUAL\">\n                                    <localize key=\"georegistry.frequency.annual\"></localize>\n                                </option>\n                                <option value=\"BIANNUAL\">\n                                    <localize key=\"georegistry.frequency.biannual\"></localize>\n                                </option>\n                                <option value=\"QUARTER\">\n                                    <localize key=\"georegistry.frequency.quarter\"></localize>\n                                </option>\n                                <option value=\"MONTHLY\">\n                                    <localize key=\"georegistry.frequency.monthly\"></localize>\n                                </option>\n                            </select>\n                            <div *ngIf=\"!list.frequency && (frequency.dirty)\" class=\"form-input-validation-error-message-wrapper\">\n                            \t<p class=\"error-message\">\n                                \t<localize key=\"list.change.frequency\"></localize>\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.publishingStartDate\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                                <date-text [date]=\"list.publishingStartDate\"></date-text>\n                            </span>\n                            <date-field *ngIf=\"!readonly\" [(value)]=\"list.publishingStartDate\"\n                                [classNames]=\"['form-control']\" label=\"\" [inputName]=\"'publishingStartDate'\"\n                                [allowFutureDates]=\"false\" name=\"listPublishingStartDate\" [required]=\"true\"\n                                [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container *ngIf=\"list.listType === 'interval'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"list.type.intervals\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div *ngFor=\"let interval of list.intervalJson; let i = index;\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-5\">\n                                        <label>\n                                            <localize key=\"io.startDate\"></localize>\n                                        </label>\n                                    </div>\n                                    <div class=\"col-md-5\">\n                                        <label>\n                                            <localize key=\"io.endDate\"></localize>\n                                        </label>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-5\">\n                                        <date-field [(value)]=\"interval.startDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'startDate-' + interval.oid\"\n                                            [allowFutureDates]=\"false\" [required]=\"true\"\n                                            [disable]=\"readonly || (!isNew && interval.readonly != null)\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                    <div class=\"col-md-5\">\n                                        <date-field [(value)]=\"interval.endDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'endDate-' + interval.oid\" [allowInfinity]=\"true\"\n                                            [required]=\"true\"\n                                            [disable]=\"readonly || (!isNew && interval.readonly == 'BOTH')\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                    <div class=\"col-md-2\">\n                                        <i class=\"fa fa-times delete-btn clickable\"\n                                            *ngIf=\"(isNew || interval.readonly == null)\" (click)=\"removeInterval(i)\"\n                                            [title]=\"'button.delete.helptext' | localize\">\n                                        </i>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\" *ngIf=\"!readonly\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\" (click)=\"onNewInterval()\" class=\"btn btn-primary\"\n                                        role=\"button\" style=\"margin:15px 0;\">\n                                        <localize key=\"changeovertime.manageVersions.summaryKey.NEW\"></localize>\n                                    </button>\n                                    <div *ngIf=\"!valid\" style=\"float:none;\" class=\"error-message\">\n                                        <localize key=\"list.type.bad.interval.dates\"></localize>\n                                    </div>\n                                    <div *ngIf=\"gap\" style=\"float:none;\" class=\"warning-text\">\n                                        <localize key=\"manage.versions.gap.message\"></localize>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container\n                    *ngIf=\"geoObjectType != null && (isNew || (list.filter != null  && list.filter.length > 0))\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"button.filter.helptext\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div *ngFor=\"let filter of list.filter; let j = index;\">\n\n                                <div class=\"row\">\n                                    <div class=\"col-md-3\">\n                                        <select class=\"select-area\" [name]=\"'filter' + filter.id\"\n                                            [(ngModel)]=\"filter.attribute\" [disabled]=\"readonly || !isNew\" required>\n                                            <option></option>\n                                            <ng-container *ngFor=\"let attribute of geoObjectType.attributes;\">\n                                                <option *ngIf=\"attribute.isChangeOverTime && attribute.type !== 'local'\"\n                                                    [value]=\"attribute.code\">\n                                                    {{attribute.label.localizedValue}}\n                                                </option>\n                                            </ng-container>\n                                        </select>\n                                    </div>\n                                    <ng-container *ngIf=\"getAttributeForFilter(filter) as attributeType\">\n                                        <div class=\"col-md-3\">\n                                            <select class=\"select-area\" [name]=\"'filter-operation' + filter.id\"\n                                                [(ngModel)]=\"filter.operation\" [disabled]=\"readonly || !isNew\" required>\n                                                <option value=\"EQ\">\n                                                    <localize key=\"list.type.equals\"></localize>\n                                                </option>\n                                                <option *ngIf=\"attributeType.type === 'classification'\" value=\"EXACT\">\n                                                    <localize key=\"list.type.exact\"></localize>\n                                                </option>\n                                            </select>\n                                        </div>\n\n                                        <div class=\"col-md-4\">\n                                            <ng-container [ngSwitch]=\"attributeType.type\">\n                                                <ng-container *ngSwitchCase=\"'classification'\">\n                                                    <classification-field\n                                                        [classificationType]=\"attributeType.classificationType\"\n                                                        [name]=\"'filter-value' + filter.id\" container=\"body\"\n                                                        [(value)]=\"filter.value\" [disabled]=\"!isNew\">\n                                                    </classification-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'term'\">\n                                                    <select [name]=\"'filter-value' + filter.id\" class=\"select-area\"\n                                                        [(ngModel)]=\"filter.value\" [disabled]=\"!isNew\">\n                                                        <option value=\"\"></option>\n                                                        <option\n                                                            *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\"\n                                                            [value]=\"option.code\">{{option.label.localizedValue}}\n                                                        </option>\n                                                    </select>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'boolean'\">\n                                                    <boolean-field [disable]=\"!isNew\" [(value)]=\"filter.value\"\n                                                        localizeLabelKey=\"change.request.boolean.option.true\">\n                                                    </boolean-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'date'\">\n                                                    <date-field [(value)]=\"filter.value\" [classNames]=\"['form-control']\"\n                                                        label=\"\" [inputName]=\"'filter-value' + filter.id\"\n                                                        [disable]=\"!isNew\">\n                                                    </date-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'float'\">\n                                                    <input [(ngModel)]=\"filter.value\"\n                                                        [name]=\"'filter-value' + filter.id\" type=\"number\"\n                                                        class=\"form-control\" [disabled]=\"!isNew\" [required]=\"false\" />\n                                                </ng-container>\n                                                <ng-container *ngSwitchDefault>\n                                                    <input [(ngModel)]=\"filter.value\"\n                                                        [name]=\"'filter-value' + filter.id\" type=\"text\"\n                                                        class=\"form-control\" [disabled]=\"!isNew\" [required]=\"false\" />\n                                                </ng-container>\n\n                                            </ng-container>\n                                        </div>\n                                    </ng-container>\n                                    <div class=\"col-md-2\">\n                                        <i class=\"fa fa-times delete-btn clickable\" *ngIf=\"isNew\"\n                                            (click)=\"removeFilter(i)\" [title]=\"'button.delete.helptext' | localize\">\n                                        </i>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\" *ngIf=\"isNew && !readonly\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\" (click)=\"onNewFilter()\" class=\"btn btn-primary\" role=\"button\"\n                                        style=\"margin:15px 0;\">\n                                        <localize key=\"changeovertime.manageVersions.summaryKey.NEW\"></localize>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n\n                <div class=\"inner-col-content-wrapper\" *ngIf=\"isNew\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n\n                            <div class=\"text-center\">\n                                <h2>\n                                    <localize key=\"type.publish.metadata.header\"></localize>\n                                </h2>\n                                <hr>\n                            </div>\n\n                            <div class=\"label-holder\"></div>\n\n                            <div class=\"holder\">\n                                <div class=\"form-group\" style=\"text-align: center;\">\n\n                                    <div class=\"btn-group geobject-editor-tab-holder\">\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.list\"></localize>\n                                            </span>\n                                        </label>\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\"\n                                            (click)=\"handleTab('GEOSPATIAL')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.geospatial\"></localize>\n                                            </span>\n                                        </label>\n                                    </div>\n\n                                </div>\n                            </div>\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.listMetadata, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.geospatialMetadata, type:'geospatial'}\">\n                            </ng-container>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ErrorHandler } from '@shared/component';\nimport { Organization } from '@shared/model/core';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService, LocalizationService } from '@shared/service';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n  selector: 'import-types-modal',\n  templateUrl: './import-types-modal.component.html',\n  styleUrls: []\n})\nexport class ImportTypesModalComponent implements OnInit {\n\n  public organizations: Organization[] = [];\n  public orgCode: string;\n\n\n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n\n  @ViewChild('myFile')\n  fileRef: ElementRef;\n\n  message: string = null;\n\n  public onNodeChange: Subject<boolean>;\n\n  constructor(private eventService: EventService, private localizationService: LocalizationService, public bsModalRef: BsModalRef) {\n  }\n\n  ngOnInit(): void {\n    this.onNodeChange = new Subject();\n  }\n\n  init(organizations: Organization[]): void {\n    this.organizations = organizations;\n\n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/cgr/import-types'\n    };\n\n    this.uploader = new FileUploader(options);\n\n    this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n      form.append('orgCode', this.orgCode);\n    };\n    this.uploader.onBeforeUploadItem = (fileItem: any) => {\n      this.eventService.start();\n    };\n    this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n      this.fileRef.nativeElement.value = \"\";\n      this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n      this.onNodeChange.next(true);\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n      const error = JSON.parse(response)\n\n      this.error({ error: error });\n    }\n\n  }\n\n  onSelect(orgCode: string): void {\n    this.orgCode = orgCode;\n  }\n\n  onClick(): void {\n\n    if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error({\n        message: this.localizationService.decode('io.missing.file'),\n        error: {},\n      });\n    }\n  }\n\n\n  public error(err: any): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1> <localize key=\"hierarchy.sidebar.importTypes\"></localize> </h1>\n    </div> \n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"attribute.organization.label\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <select (change)=\"onSelect($event.target.value)\">\n              <option></option>\n              <option *ngFor=\"let organization of organizations\" value={{organization.code}}>{{organization.label.localizedValue}}</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"hierarchy.sidebar.xmlFile\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xml\" required /> \n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\"></div>\n          <div class=\"holder\">\n            <div class=\"button-holder\">\n              <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.cancel\"></localize>\n                </span>\n              </button>\n              <button type=\"submit\" (click)=\"onClick()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.ok\"></localize>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"create-hierarchy-type-modal\",\n    templateUrl: \"./create-hierarchy-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n\n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n    readOnly: boolean = false;\n\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            rootGeoObjectTypes: [],\n            organizationCode: \"\"\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n            // Filter out organizations they're not RA's of, unless we're readOnly.\n            if (!this.readOnly) {\n                this.organizations = [];\n\n                for (var i = 0; i < orgs.length; ++i) {\n                    if (this.auth.isOrganizationRA(orgs[i].code)) {\n                        this.organizations.push(orgs[i]);\n                    }\n                }\n            } else {\n                this.organizations = orgs;\n            }\n\n            if (!this.edit && this.organizations.length === 1) {\n                this.hierarchyType.organizationCode = this.organizations[0].code;\n                this.organizationLabel = this.organizations[0].label.localizedValue;\n            } else if (this.edit || this.readOnly) {\n                this.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getOrganizationLabelFromCode(orgCode: string) {\n        for (var i = 0; i < this.organizations.length; ++i) {\n            if (this.organizations[i].code === orgCode) {\n                return this.organizations[i].label.localizedValue;\n            }\n        }\n\n        console.log(\"Did not find org with code [\" + orgCode + \"]\");\n        return orgCode;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if (this.readOnly) {\n            this.bsModalRef.hide();\n            return;\n        }\n\n        if (this.edit) {\n            this.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize *ngIf=\"!edit\" key=\"hierarchy.management.create.hierarchy.title\"></localize>\n            <localize *ngIf=\"edit\" key=\"hierarchy.management.update.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> \n          <span  style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      \n      <localized-text [(value)]=\"hierarchyType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\" [disabled]=\"readOnly\"></localized-text>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.disclaimer\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.disclaimer\" name=\"disclaimer\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.accessConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.useConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      \n      <hr/>\n      \n      <div class=\"form-group\">\n        <h4>\n          <localize key=\"masterlist.contact\"></localize>\n        </h4>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.phoneNumber\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.phoneNumber\" name=\"phoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.email\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1 || form.invalid\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { GeoObjectLayerDataSource, GEO_OBJECT_DATA_SOURCE_TYPE, Layer, ListVectorLayerDataSource, LIST_VECTOR_SOURCE_TYPE, RelationshipVisualizionDataSource, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE, SearchLayerDataSource, SEARCH_DATASOURCE_TYPE, ValueOverTimeDataSource } from \"@registry/service/layer-data-source\";\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nexport class LayerGroup {\n\n    private groupName: string;\n\n    private label: string;\n\n    private layers: Layer[];\n\n    constructor(layers: Layer[], label: string) {\n        this.layers = layers;\n        this.label = label;\n    }\n\n    public getGroupName(): string {\n        return this.groupName;\n    }\n\n    public setGroupName(groupName: string) {\n        this.groupName = groupName;\n    }\n\n    public getLayers(): Layer[] {\n        return this.layers;\n    }\n\n    public setLayers(layers: Layer[]): void {\n        this.layers = layers;\n    }\n\n    public getLabel(): string {\n        return this.label;\n    }\n\n    public setLabel(label: string) {\n        this.label = label;\n    }\n\n}\n\nexport interface LayerSorter {\n\n    sortLayers(layers: Layer[]): Layer[];\n\n}\n\nexport class LayerGroupSorter implements LayerSorter {\n\n    private localService: LocalizationService;\n\n    public constructor(localService: LocalizationService) {\n        this.localService = localService;\n    }\n\n    public getLayerGroups(layers: Layer[]): LayerGroup[] {\n        let groups: LayerGroup[] = [];\n\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof SearchLayerDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.search\")));\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof GeoObjectLayerDataSource || l.dataSource instanceof ValueOverTimeDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.geoObject\")));\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof RelationshipVisualizionDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.relationship\")));\n        groups.push(new LayerGroup(layers.filter(l => l.dataSource instanceof ListVectorLayerDataSource), this.localService.decode(\"explorer.layerPanel.layerGroup.list\")));\n\n        return groups.filter(g => g.getLayers().length > 0);\n    }\n\n    public sortLayers(layers: Layer[]): Layer[] {\n        let sorted = [];\n        let groups = this.getLayerGroups(layers);\n\n        groups.forEach(group => group.getLayers().forEach(l => sorted.push(l)));\n\n        return sorted;\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\n@Component({\n    selector: \"create-geoobjtype-modal\",\n    templateUrl: \"./create-geoobjtype-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organization: Organization = null;\n    message: string = null;\n    parents: GeoObjectType[];\n    hierarchyType: HierarchyType;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            geometryType: \"MULTIPOINT\",\n            isLeaf: false,\n            isGeometryEditable: true,\n            organizationCode: \"\",\n            attributes: []\n        };\n    }\n\n    init(organization: Organization, parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n        this.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\n        if (groupSuperType) {\n            this.geoObjectType.superTypeCode = groupSuperType.code;\n            this.geoObjectType.geometryType = groupSuperType.geometryType;\n            this.geoObjectType.isPrivate = groupSuperType.isPrivate;\n        }\n\n        // Filter out parents that are not abstract\n        this.parents = parents.filter(parent => parent.isAbstract);\n\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n        this.geoObjectType.organizationCode = this.organization.code;\n        this.organizationLabel = this.organization.label.localizedValue;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n            this.onGeoObjTypeCreate.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    toggleIsAbstract(): void {\n        this.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"geoObjectType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <label style=\"display: block;\">\n            <localize key=\"attribute.group.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n        \n          <label style=\"display: block;\">\n            <localize key=\"geoObjectType.attr.visibility.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"geoObjectType.superTypeCode != null\" [(value)]=\"geoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [disabled]=\"geoObjectType.superTypeCode != null && geoObjectType.superTypeCode != ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MIXED\">\n              <localize key=\"georegistry.geometry.mixed\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { ManageGeoObjectTypeModalState, GeoObjectType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-geoobjecttype-modal\",\n    templateUrl: \"./manage-geoobjecttype-modal.component.html\",\n    styleUrls: [\"./manage-geoobjecttype-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    message: string = null;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor(private service: RegistryService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the\n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next(data);\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\"\n    [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></geoobjecttype-input>\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\"\n    [service]=\"service\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\"\n    [attribute]=\"modalState.attribute\" [service]=\"service\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\">\n  </edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    (stateChange)=\"onModalStateChange($event)\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    [termOption]=\"modalState.termOption\" (stateChange)=\"onModalStateChange($event)\">\n  </edit-term-option-input>\n\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, AttributeType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"geoobjecttype-input\",\n    templateUrl: \"./geoobjecttype-input.component.html\",\n    styleUrls: [\"./geoobjecttype-input.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    \n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    editGeoObjectType: GeoObjectType;\n\n    organizationLabel: string;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"setGeoObjectType\")\n    set in(geoObjectType: GeoObjectType) {\n        if (geoObjectType) {\n            this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        }\n    }\n\n    message: string = null;\n\n    // modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizationService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\n        // this.geoObjectTypeManagementService.setModalState(this.modalState);\n\n        this.fetchOrganizationLabel();\n    }\n\n    defineAttributeModal(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    fetchOrganizationLabel(): void {\n        this.registryService.getOrganizations().then(orgs => {\n            for (let i = 0; i < orgs.length; ++i) {\n                if (orgs[i].code === this.editGeoObjectType.organizationCode) {\n                    this.organizationLabel = orgs[i].label.localizedValue;\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    manageAttributes(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageAttributes, attribute: \"\", termOption: \"\" });\n    }\n\n    // onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n    //     this.modalState = state;\n    // }\n\n    update(): void {\n        this.registryService.updateGeoObjectType(this.editGeoObjectType).then(geoObjectType => {\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n\n        // return false;\n\n        return true;\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"geoObjectType.attr.visibility.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"readOnly || geoObjectType.superTypeCode\" [(value)]=\"editGeoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MIXED\"><localize key=\"georegistry.geometry.mixed\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n<!--                             <ul class=\"list-group list-group-flush\"> -->\n<!--                                 <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li> -->\n<!--                             </ul> -->\n\n<!--                             <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\"> -->\n<!--                                 <localize key=\"modal.button.manageAttributes\"></localize> -->\n<!--                             </button> -->\n\n                        <div class=\"table-responsive\">\n                              <table class=\"table\">\n<!--                                   <thead> -->\n<!--                                       <tr> -->\n<!--                                           <th> -->\n<!--                                               <localize key=\"data.property.label.label\"></localize> -->\n<!--                                           </th> -->\n<!--                                           <th class=\"button-column-header\"> -->\n<!--                                               <localize key=\"data.property.label.actions\"></localize> -->\n<!--                                           </th> -->\n<!--                                       </tr> -->\n<!--                                   </thead> -->\n                                  <tbody>\n                                      <tr *ngFor=\"let attr of geoObjectType.attributes\" >\n                                          <td>{{attr.label.localizedValue}}</td>\n                                          <td class=\"button-column\" style=\"width: 60px;\">\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                                  [title]=\"'modal.button.edit' | localize\"></a>\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                                  [title]=\"'modal.button.remove' | localize\"></a>\n                                          </td>\n                                      </tr>\n                                  </tbody>\n                              </table>\n                          </div>\n                          \n                          <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                              <localize key=\"modal.button.add\"></localize>\n                          </i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Directive } from \"@angular/core\";\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from \"@angular/forms\";\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator(): ValidatorFn {\n    return (c: AbstractControl) => {\n        if (c.value) {\n            let isValid = c.value.indexOf(\" \") === -1;\n\n            if (isValid) {\n                return null;\n            } else {\n                return {\n                    geoObjectAttributeCode: {\n                        valid: false\n                    }\n                };\n            }\n        }\n    };\n}\n\n@Directive({\n    selector: \"[geoObjectAttributeCode][ngModel]\",\n    providers: [\n        // eslint-disable-next-line no-use-before-define\n        { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n    ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n\n    validator: ValidatorFn;\n\n    constructor() {\n        this.validator = validateGeoObjectAttributeCodeValidator();\n    }\n\n    validate(c: FormControl) {\n        return this.validator(c);\n    }\n\n}\n","import { Component, OnDestroy, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { TreeComponent, TreeNode } from \"@circlon/angular-tree-component\";\nimport { ContextMenuComponent, ContextMenuService } from \"ngx-contextmenu\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { Classification, ClassificationNode } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { PageResult } from \"@shared/model/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { timeout } from \"d3\";\n\nconst PAGE_SIZE: number = 100;\n\n// eslint-disable-next-line no-unused-vars\nenum NodeType {\n    // eslint-disable-next-line no-unused-vars\n    CLASSIFICATION = 0, LINK = 1\n}\n\nclass ClassificationTreeNode {\n\n    name: string;\n    code: string;\n    type: NodeType;\n    classification?: Classification;\n    hasChildren: boolean;\n    children?: ClassificationTreeNode[];\n    parent?: ClassificationTreeNode;\n    pageNumber?: number;\n\n}\n\n@Component({\n    selector: \"classification-field-modal\",\n    templateUrl: \"./classification-field-modal.component.html\",\n    styleUrls: []\n})\nexport class ClassificationFieldModalComponent implements OnDestroy {\n\n    message: string = null;\n\n    classificationType: string = null;\n    rootCode: string = null;\n\n    disabled: boolean = false;\n\n    select: Subject<Classification> = new Subject<Classification>();\n\n    nodes: ClassificationTreeNode[] = [];\n\n    /*\n     * Tree component\n     */\n    @ViewChild(TreeComponent)\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    options = {\n        idField: \"code\",\n        getChildren: (node: TreeNode) => {\n            return this.getChildren(node);\n        },\n        actionMapping: {\n            mouse: {\n                click: (tree: TreeComponent, node: TreeNode, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: TreeNode, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                }\n            }\n        },\n        allowDrag: false,\n        allowDrop: false,\n        animateExpand: true,\n        scrollOnActivate: true,\n        animateSpeed: 2,\n        animateAcceleration: 1.01\n    }\n\n    constructor(\n        private bsModalRef: BsModalRef,\n        private contextMenuService: ContextMenuService,\n        private service: ClassificationService\n    ) { }\n\n    init(classificationType: string, rootCode: string, disabled: boolean, value: { code: string }, observer: Observer<Classification>): Subscription {\n        this.classificationType = classificationType;\n        this.rootCode = rootCode;\n        this.disabled = disabled;\n\n        if (value != null) {\n            this.service.getAncestorTree(this.classificationType, this.rootCode, value.code, PAGE_SIZE).then(ancestor => {\n                this.nodes = [this.build(null, ancestor)];\n\n                timeout(() => {\n                    const node: TreeNode = this.tree.treeModel.getNodeById(value.code);\n\n                    if (node != null) {\n                        node.setActiveAndVisible();\n                    }\n                }, 100);\n            });\n        } else if (this.rootCode != null) {\n            this.service.get(this.classificationType, this.rootCode).then(classification => {\n                this.nodes = [{\n                    code: classification.code,\n                    name: classification.displayLabel.localizedValue,\n                    type: NodeType.CLASSIFICATION,\n                    classification: classification,\n                    hasChildren: true\n                }];\n            });\n        } else {\n            this.getChildren(null).then(nodes => {\n                this.nodes = nodes;\n            });\n        }\n\n        return this.select.subscribe(observer);\n    }\n\n    ngOnDestroy(): void {\n        this.select.unsubscribe();\n    }\n\n    getChildren(treeNode: TreeNode): Promise<ClassificationTreeNode[]> {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        const code = node != null ? node.classification.code : null;\n\n        return this.service.getChildren(this.classificationType, code, 1, PAGE_SIZE).then(page => {\n            const nodes = this.createNodes(node, page);\n\n            if (node != null) {\n                if (node.children == null) {\n                    node.children = [];\n                }\n\n                node.children.concat(nodes);\n            }\n\n            return nodes;\n        }).catch(ex => {\n            return [];\n        });\n    }\n\n    build(parent: ClassificationTreeNode, cNode: ClassificationNode): ClassificationTreeNode {\n        const node: ClassificationTreeNode = {\n            code: cNode.classification.code,\n            name: cNode.classification.displayLabel.localizedValue,\n            type: NodeType.CLASSIFICATION,\n            classification: cNode.classification,\n            hasChildren: true\n        };\n\n        if (cNode.children != null) {\n            const nodes: ClassificationTreeNode[] = cNode.children.resultSet.map(child => this.build(parent, child));\n\n            const page = cNode.children;\n\n            // Add page node if needed\n            if (page.count > page.pageNumber * page.pageSize) {\n                nodes.push({\n                    code: \"...\",\n                    name: \"...\",\n                    type: NodeType.LINK,\n                    hasChildren: false,\n                    pageNumber: page.pageNumber + 1,\n                    parent: parent\n                } as ClassificationTreeNode);\n            }\n\n            node.children = nodes;\n        }\n\n        return node;\n    }\n\n    createNodes(parent: ClassificationTreeNode, page: PageResult<Classification>): ClassificationTreeNode[] {\n        const nodes = page.resultSet.map(child => {\n            return {\n                code: child.code,\n                name: child.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: child,\n                hasChildren: true\n            } as ClassificationTreeNode;\n        });\n\n        // Add page node if needed\n        if (page.count > page.pageNumber * page.pageSize) {\n            nodes.push({\n                code: \"...\",\n                name: \"...\",\n                type: NodeType.LINK,\n                hasChildren: false,\n                pageNumber: page.pageNumber + 1,\n                parent: parent\n            } as ClassificationTreeNode);\n        }\n\n        return nodes;\n    }\n\n    handleOnMenu(node: TreeNode, $event: any): void {\n        if (!this.disabled) {\n            this.contextMenuService.show.next({\n                contextMenu: this.nodeMenuComponent,\n                event: $event,\n                item: node\n            });\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n    }\n\n    treeNodeOnClick(treeNode: TreeNode, $event: any): void {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        if (node != null && node.type === NodeType.LINK) {\n            if (treeNode.parent != null) {\n                const parentNode: ClassificationTreeNode = treeNode.parent.data;\n                const code = parentNode.classification.code;\n                const pageNumber = node.pageNumber;\n\n                this.service.getChildren(this.classificationType, code, pageNumber, PAGE_SIZE).then(page => {\n                    const nodes = this.createNodes(parentNode, page);\n\n                    parentNode.children = parentNode.children.filter(node => node.code !== \"...\");\n                    parentNode.children = parentNode.children.concat(nodes);\n\n                    this.tree.treeModel.update();\n                }).catch(ex => {\n                });\n            }\n        } else {\n            if (treeNode.isExpanded) {\n                treeNode.collapse();\n            } else {\n                treeNode.expand();\n            }\n\n            treeNode.setActiveAndVisible();\n        }\n    }\n\n    onSelect(treeNode: TreeNode): void {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        if (node.type === NodeType.CLASSIFICATION) {\n            this.select.next(node.classification);\n\n            this.bsModalRef.hide();\n        }\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<context-menu #nodeMenu menuClass=\"top-level\">\n    <ng-template contextMenuItem let-item (execute)=\"onSelect($event.item)\">\n        Select\n    </ng-template>\n</context-menu>\n\n<div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <tree-root #tree [options]=\"options\" [nodes]=\"nodes\"></tree-root>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"button-holder\">\n                    <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                        <localize key=\"io.back\"></localize>\n                    </button>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { AttributeTermType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"term-option-widget\",\n    templateUrl: \"./term-option-widget.component.html\",\n    styleUrls: [\"./term-option-widget.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType = null;\n\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    state: string = \"none\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n\n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n\n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" });\n    }\n\n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\n\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { SvgHierarchyNode } from \"./svg-hierarchy-node\";\nimport { calculateTextWidth } from \"./svg-util\";\nimport { INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL, HierarchyComponent, TREE_SCALE_FACTOR_X, TREE_SCALE_FACTOR_Y } from \"../hierarchy.component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nexport class SvgHierarchyType {\n\n    public static gotRectW: number = 150;\n    public static gotRectH: number = 25;\n    public static gotBodyFontSize: number = 8;\n    public static gotOptionsButtonFontSize: number = 12;\n\n    public static gotHeaderW: number = 150;\n    public static gotHeaderH: number = 14;\n    public static gotHeaderFontSize: number = 8;\n\n    public static MOUSE_HOVER_EVENT_ENTER = \"mouseenter\";\n\n    public static MOUSE_HOVER_EVENT_MOVE = \"mousemove\";\n\n    public static MOUSE_HOVER_EVENT_EXIT = \"mouseleave\";\n\n    hierarchyComponent: HierarchyComponent;\n\n    hierarchyType: HierarchyType;\n\n    svgEl: any;\n\n    d3Hierarchy: any;\n\n    d3Tree: any;\n\n    isPrimary: boolean;\n\n    tooltip: any;\n\n    public constructor(hierarchyComponent: HierarchyComponent, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        const hierarchyType = ht;\n\n        this.hierarchyComponent = hierarchyComponent;\n        this.hierarchyType = hierarchyType;\n        this.svgEl = svgEl;\n\n        this.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n        this.isPrimary = isPrimary;\n\n        this.d3Tree = d3.tree().nodeSize([SvgHierarchyType.gotRectW * TREE_SCALE_FACTOR_X, (SvgHierarchyType.gotRectH + SvgHierarchyType.gotHeaderH) * TREE_SCALE_FACTOR_Y]).separation((a, b) => 0.8)(this.d3Hierarchy);\n    }\n\n    public getD3Tree() {\n        return this.d3Tree;\n    }\n\n    public getCode(): string {\n        return this.hierarchyType.code;\n    }\n\n    public getNodeByCode(gotCode: string): SvgHierarchyNode {\n        let treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\n        if (treeNode == null) {\n            return null;\n        }\n\n        return new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService, this.authService);\n    }\n\n    public renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n        let bbox = hg.node().getBBox();\n\n        let colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        let headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        const headerFontSize: number = 10;\n        const iconWidth: number = 20;\n        const maxHierarchyLabelLength = 200;\n\n        let hierarchyLabelW: number = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize);\n        let hierarchyLabelH:number = headerFontSize * 2;\n        let hierarchyLabelY:number = bbox.y + headerFontSize * 1.6;\n        if (hierarchyLabelW > maxHierarchyLabelLength) {\n            hierarchyLabelW = maxHierarchyLabelLength;\n            hierarchyLabelH = headerFontSize * 3;\n            hierarchyLabelY = bbox.y + headerFontSize;\n        }\n\n        let lineWidth = bbox.width;\n        let textWidth = hierarchyLabelW + iconWidth;\n\n        if (textWidth > lineWidth) {\n            lineWidth = textWidth;\n        }\n\n        // Hierarchy icon (font awesome)\n        headerg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .style(\"font-family\", \"FontAwesome\")\n            .attr(\"fill\", \"grey\")\n            .attr(\"font-size\", 12)\n            .text(\"\\uf0e8\");\n\n        // Hierarchy display label\n        colHeader.append(\"foreignObject\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"x\", bbox.x + iconWidth)\n            .attr(\"y\", hierarchyLabelY)\n            .attr(\"width\", hierarchyLabelW)\n            .attr(\"height\", hierarchyLabelH)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"gray\")\n            // .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => this.hierarchyType.label.localizedValue);\n\n        // Line underneath the header\n        headerg.append(\"line\").classed(\"hierarchy-header-line\", true)\n            .attr(\"x1\", bbox.x)\n            .attr(\"y1\", bbox.y + headerFontSize)\n            .attr(\"x2\", bbox.x + lineWidth)\n            .attr(\"y2\", bbox.y + headerFontSize)\n            .attr(\"stroke\", \"grey\")\n            .attr(\"stroke-width\", .5);\n\n        let headerGBbox = headerg.node().getBBox();\n        headerg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n        // Col header label\n        colHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize + 2)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"grey\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .text(colHeaderLabel);\n\n        colHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n        return headerg;\n    }\n\n    getRelatedHierarchies(gotCode: string): string[] {\n        let got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n        if (got.relatedHierarchies == null) {\n            got.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n        }\n\n        let relatedHiers: string[] = got.relatedHierarchies;\n\n        let index = null;\n        for (let i = 0; i < relatedHiers.length; ++i) {\n            if (relatedHiers[i] === this.getCode()) {\n                index = i;\n            }\n        }\n\n        if (index != null) {\n            relatedHiers.splice(index, 1);\n        }\n\n        return relatedHiers;\n    }\n\n    private nodeMouseover(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 1);\n    }\n\n    private nodeMousemove(event: any, element: any, data:any) {\n        d3.select(\"#hierarchyLabel\").html(this.hierarchyType.label.localizedValue);\n        d3.select(\"#hierarchyCodeLabel\").html(this.hierarchyType.code);\n\n        d3.select(\"#geoObjectTypeLabel\").html(data.data.label);\n        d3.select(\"#geoObjectTypeCodeLabel\").html(data.data.geoObjectType);\n\n        d3.select(\"#hierarchyOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyType.organizationCode).label.localizedValue);\n        d3.select(\"#geoObjectTypeOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyComponent.findGeoObjectTypeByCode(data.data.geoObjectType).organizationCode).label.localizedValue);\n\n        let nodeTooltip: any = d3.select(\"#NodeTooltip\").node();\n        let nodeTooltipBbox: DOMRect = nodeTooltip.getBoundingClientRect();\n\n        let pos = { x: event.pageX, y: event.pageY };\n        const yPointerOffset: number = 50;\n        const xPointerOffset: number = 0;\n\n    // If overflow off bottom of page\n        if ((event.pageY + nodeTooltipBbox.height + yPointerOffset) > document.documentElement.scrollHeight) {\n      // render above mouse pointer\n            pos.y = event.pageY - nodeTooltipBbox.height - yPointerOffset;\n        }\n\n    // If overflow off right side of page\n        if ((event.pageX + nodeTooltipBbox.width + xPointerOffset) > document.documentElement.scrollWidth) {\n      // render to the left of the mouse pointer\n            pos.x = event.pageX - nodeTooltipBbox.width - xPointerOffset;\n        }\n\n        d3.select(\"#NodeTooltip\")\n            .style(\"left\", pos.x + \"px\")\n            .style(\"top\", pos.y + \"px\");\n    }\n\n    private nodeMouseleave(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 0)\n            .style(\"left\", \"-10000px\")\n            .style(\"top\", \"-10000px\");\n    }\n\n    public render() {\n        let that = this;\n        let descends: any = this.d3Tree.descendants();\n\n        d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").remove();\n        if (this.isPrimary) {\n            d3.select(\".g-hierarchy[data-primary=\\\"true\\\"]\").remove();\n        }\n\n        let hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n        hg.attr(\"font-family\", \"sans-serif\");\n\n        let gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n        // Edge\n        gtree.append(\"g\").classed(\"g-got-edge\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(this.d3Tree.links())\n            .join(\"path\")\n            // .attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n            .attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n                return \"M\" + d.source.x + \",\" + (d.source.y) +\n                    \"V\" + ((d.source.y + d.target.y) / 2) +\n                    \"H\" + d.target.x +\n                    \"V\" + (d.target.y);\n            });\n\n        // Header on square which denotes which hierarchy it's a part of\n        let gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n        gHeader.selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"rx\", 3)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) =>\n                d.data.inheritedHierarchyCode != null\n            )\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Write the name of the hierarchy on the header\n        gHeader.selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) =>\n                d.x - (SvgHierarchyType.gotHeaderW / 2)\n            )\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .style(\"text-align\", \"center\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"white\")\n            .style(\"height\", (SvgHierarchyType.gotHeaderH - 4) + \"px\")\n            .style(\"width\", SvgHierarchyType.gotHeaderW + \"px\")\n            .html(function(d: any) {\n                let name = d.data.inheritedHierarchyCode != null ? that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue : that.hierarchyType.label.localizedValue;\n                // eslint-disable-next-line no-unused-expressions\n                calculateTextWidth(name, SvgHierarchyType.gotHeaderFontSize) > (SvgHierarchyType.gotHeaderW - 5) ? name = name.substring(0, 34) + \"...\" : true;\n                return name;\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // GeoObjectType Body Square\n        gtree.append(\"g\").classed(\"g-got\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-body-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"rx\", 3)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .each(function(d: any) {\n                if (d.data.geoObjectType !== \"GhostNode\") {\n                    if (d.data.activeDropZones) {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n                    } else {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                    }\n                }\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Arrows on Edges\n        const arrowRectD = { height: 7, width: 10 };\n        let gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n        gArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-rect\", true)\n            .attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n            .attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n        gArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3)) +\n                \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n            );\n\n        // Ghost Drop Zone (Sibling) Backer\n        gtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-backer-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"white\");\n\n        // Ghost Drop Zone (Sibling) Body Rectangle\n        gtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-body-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#6BA542\")\n            .attr(\"stroke-width\", \"1\")\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType);\n\n        // GeoObjectType label\n        gtree.append(\"g\").classed(\"g-got-codelabel\", true)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", SvgHierarchyType.gotBodyFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .classed(\"svg-got-label-text\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n            .attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n            .attr(\"height\", SvgHierarchyType.gotRectH - 4)\n            // .filter(function(d: any) {\n            //     return calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n            // })\n            // .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => d.data.label)\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        let headerg;\n        if (this.isPrimary) {\n            gtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n                .selectAll(\"text\")\n                .data(descends)\n                .join(\"text\")\n                .filter(function(d: any) {\n                    return (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n                })\n                .classed(\"svg-got-relatedhiers-button\", true)\n                .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n                .attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - (SvgHierarchyType.gotOptionsButtonFontSize) - 3)\n                .attr(\"y\", (d: any) => d.y + (SvgHierarchyType.gotOptionsButtonFontSize * 0.8) - SvgHierarchyType.gotOptionsButtonFontSize / 2)\n                .style(\"font-family\", \"FontAwesome\")\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", \"#767676\")\n                .style(\"font-size\", SvgHierarchyType.gotOptionsButtonFontSize + \"px\")\n                .text(\"\\uf013\")\n                .on(\"click\", function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n            headerg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n        } else {\n            headerg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n        }\n\n\n        // let paddingTop = (headerg.node().getBBox().height + 20);\n        // gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n    }\n}\n","/* eslint-disable indent */\nimport { Component, OnInit, Output, EventEmitter, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { RelationshipVisualizationService } from \"@registry/service/relationship-visualization.service\";\nimport { Layout, Orientation } from \"@swimlane/ngx-graph\";\n\nimport { DagreNodesOnlyLayout } from \"./relationship-viz-layout\";\n\nimport * as shape from \"d3-shape\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport * as ColorGen from \"color-generator\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\nimport { GeometryService } from \"@registry/service\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { LngLatBounds } from \"mapbox-gl\";\nimport { ObjectReference, RelatedType, Relationship, TreeData, Vertex } from \"@registry/model/graph\";\nimport { LocationManagerState } from \"../location-manager/location-manager.component\";\nimport { Layer, RelationshipVisualizionDataSource, RelationshipVisualizionLayer, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE } from \"@registry/service/layer-data-source\";\n\nimport { calculateTextWidth } from \"@registry/component/hierarchy/d3/svg-util\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const SELECTED_NODE_COLOR: string = \"#4287f5\";\n\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\nexport const COLLAPSE_ANIMATION_TIME: number = 500; // in ms\n\nexport const DIMENSIONS = {\n    NODE: { WIDTH: 30, HEIGHT: 30 },\n    LABEL: { WIDTH: 170, HEIGHT: 60, FONTSIZE: 14 },\n    PADDING: {\n        BETWEEN_NODES: 0,\n        NODE_LABEL: 5,\n        NODE_EDGE: 5\n    }\n};\n\n@Component({\n\n    selector: \"relationship-visualizer\",\n    templateUrl: \"./relationship-visualizer.component.html\",\n    styleUrls: [\"./relationship-visualizer.css\"]\n})\nexport class RelationshipVisualizerComponent implements OnInit, OnDestroy {\n\n    // Hack to allow the constant to be used in the html\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.VISUALIZER_PANEL,\n        ORIENTATION: Orientation\n    }\n\n    state: LocationManagerState = {};\n\n    @Output() nodeSelect = new EventEmitter<Vertex>();\n\n    public DIMENSIONS = DIMENSIONS;\n\n    public SELECTED_NODE_COLOR = SELECTED_NODE_COLOR;\n\n    public svgHeight: number = null;\n    public svgWidth: number = null;\n\n    panToNode$: Subject<string> = new Subject();\n\n    update$: Subject<boolean> = new Subject();\n\n    public layout: Layout = new DagreNodesOnlyLayout();\n\n    public curve = shape.curveLinear;\n\n    public typeLegend: { [key: string]: { label: string, color: string } } = {};\n\n    public typeCache: GeoObjectTypeCache;\n\n    relationship: Relationship = null;\n    relationships: Relationship[];\n\n    graphOid: string;\n\n    data: TreeData = null;\n\n    onFetchErrorSub: Subscription;\n\n    stateSub: Subscription;\n\n    panelOpen: boolean = true;\n\n    loading: boolean = true;\n\n    restrictToMapBounds: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService,\n        private spinner: NgxSpinnerService,\n        private vizService: RelationshipVisualizationService,\n        private cacheService: RegistryCacheService,\n        private geomService: GeometryService,\n        private router: Router,\n        private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        this.typeCache = this.cacheService.getTypeCache();\n\n        this.stateSub = this.geomService.stateChange$.subscribe(state => this.stateChange(state));\n\n        // Angular keeps invoking our listener in the early stages of component loading. We don't want to make expensive\n        // data requests unless we're certain that all the state are loaded.\n        window.setTimeout(() => {\n            this.loading = false;\n\n            this.stateChange(this.geomService.getState());\n        }, 10);\n    }\n\n    ngOnDestroy(): void {\n        this.stateSub.unsubscribe();\n    }\n\n    stateChange(state) {\n        if (state.type == null || state.code == null) {\n            return;\n        }\n\n        let newState = JSON.parse(JSON.stringify(state));\n        let oldState = JSON.parse(JSON.stringify(this.state));\n        this.state = newState;\n\n        this.panelOpen = newState.graphPanelOpen === \"true\";\n\n        if (newState.graphOid && newState.graphOid !== oldState.graphOid && this.relationships != null) {\n            this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.graphOid)];\n        }\n\n        if (!this.loading) {\n            if (this.relationships == null || this.relationship == null || newState.objectType !== oldState.objectType || newState.type !== oldState.type) {\n                this.relationships = null;\n                this.graphOid = null;\n                this.data = null;\n                this.fetchRelationships();\n            } else if (this.relationships != null && this.relationship && ((this.restrictToMapBounds && newState.bounds !== oldState.bounds) || newState.code !== oldState.code || newState.date !== oldState.date || newState.uid !== oldState.uid || newState.graphOid !== oldState.graphOid)) {\n                this.fetchData();\n            }\n        }\n\n        if (this.panelOpen) {\n            window.setTimeout(() => {\n                this.resizeDimensions();\n            }, 1);\n        }\n    }\n\n    resizeDimensions(): void {\n        let graphContainer = document.getElementById(\"graph-container\");\n\n        if (graphContainer) {\n            this.svgHeight = graphContainer.clientHeight - 50;\n            this.svgWidth = graphContainer.clientWidth;\n        }\n    }\n\n    // Thanks to https://stackoverflow.com/questions/52172067/create-svg-hexagon-points-with-only-only-a-length\n    public getHexagonPoints(node: { dimension: { width: number, height: number }, relation: string }): string {\n        let y = (this.DIMENSIONS.LABEL.HEIGHT / 2) - this.DIMENSIONS.NODE.HEIGHT / 2;\n        let x = (this.relationship.layout === \"VERTICAL\")\n            ? (node.relation === \"CHILD\" ? (this.DIMENSIONS.LABEL.WIDTH / 2) - this.DIMENSIONS.NODE.WIDTH / 2 : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 - this.DIMENSIONS.NODE.WIDTH / 2)\n            : node.relation === \"PARENT\" ? (this.DIMENSIONS.LABEL.WIDTH + this.DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.PADDING.NODE_EDGE) : 0;\n\n        let radius = this.DIMENSIONS.NODE.WIDTH / 2;\n        let height = this.DIMENSIONS.NODE.HEIGHT;\n        let width = this.DIMENSIONS.NODE.WIDTH;\n\n        let points = [0, 1, 2, 3, 4, 5, 6].map((n, i) => {\n            let angleDeg = 60 * i - 30;\n            let angleRad = Math.PI / 180 * angleDeg;\n            return [(width / 2 + radius * Math.cos(angleRad)) + x, (height / 2 + radius * Math.sin(angleRad)) + y];\n        }).map((p) => p.join(\",\"))\n            .join(\" \");\n\n        return points;\n    }\n\n    private fetchRelationships(): void {\n        if (this.state.type != null) {\n            this.relationships = [];\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.vizService.relationships(this.state.objectType, this.state.type).then(relationships => {\n                this.relationships = relationships;\n\n                if (this.relationships && this.relationships.length > 0) {\n                    if (!this.state.graphOid || this.relationships.findIndex(rel => rel.oid === this.state.graphOid) === -1) {\n                        // If we got here by selecting a business object from a GeoObject\n                        if (this.relationship != null && this.relationship.code === \"BUSINESS\" && this.state.objectType === \"BUSINESS\" && this.relationships.findIndex(rel => rel.code === \"GEOOBJECT\") !== -1) {\n                            // Then we can default to the \"Associated GeoObjects\" relationship\n                            this.relationship = this.relationships[this.relationships.findIndex(rel => rel.code === \"GEOOBJECT\")];\n                        } else if (this.relationship != null && this.relationship.code === \"GEOOBJECT\" && this.state.objectType === \"GEOOBJECT\" && this.relationships.findIndex(rel => rel.code === \"BUSINESS\") !== -1) {\n                            // Then we can default to the \"Associated Business Objects\" relationship\n                            this.relationship = this.relationships[this.relationships.findIndex(rel => rel.code === \"BUSINESS\")];\n                        } else {\n                            // We have no idea which relationship makes the most sense. Just pick the first one\n                            this.relationship = this.relationships[0];\n                        }\n\n                        this.graphOid = this.relationship.oid;\n                        this.onSelectRelationship();\n                    } else {\n                        this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.state.graphOid)];\n                        this.graphOid = this.state.graphOid;\n                        this.fetchData();\n                    }\n                } else {\n                    this.relationship = null;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n    }\n\n    private onSelectRelationship() {\n        this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.graphOid)];\n\n        //   this.fetchData();\n\n        let newState = { graphOid: this.graphOid };\n\n        this.geomService.setState(newState, false);\n    }\n\n    private fetchData(): void {\n        if (this.relationship != null) {\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            let source = { code: this.state.code, typeCode: this.state.type, objectType: this.state.objectType } as Vertex;\n\n            this.vizService.tree(this.relationship.type, this.relationship.code, source, this.state.date, this.getBoundsAsWKT()).then(data => {\n                this.data = null;\n\n                window.setTimeout(() => {\n                    this.data = data;\n                    this.resizeDimensions();\n                    this.calculateTypeLegend(this.data.relatedTypes);\n                    this.addLayers(this.data.relatedTypes);\n                }, 0);\n\n                this.resizeDimensions();\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n    }\n\n    private addLayers(relatedTypes: RelatedType[]) {\n        if (this.relationship.type === \"BUSINESS\" || (this.state.objectType === \"BUSINESS\" && this.relationship.type !== \"GEOOBJECT\")) {\n            let layers: Layer[] = this.geomService.getLayers().filter(layer => layer.getPinned() || layer.dataSource.getDataSourceType() !== RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE);\n            this.geomService.setLayers(layers);\n            return;\n        }\n\n        let layers: Layer[] = this.geomService.getLayers();\n\n        let sourceObject = { code: this.state.code, typeCode: this.state.type, objectType: this.state.objectType } as ObjectReference;\n        let bounds = this.restrictToMapBounds ? this.state.bounds : null;\n        let dataSource = new RelationshipVisualizionDataSource(this.vizService, this.geomService, this.relationship.type, this.relationship.code, sourceObject, bounds, this.state.date);\n\n        // Remove any existing layer from map that is graph related that isn't part of this new data\n        layers = layers.filter(layer => layer.getPinned() ||\n            layer.dataSource.getDataSourceType() !== RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE ||\n            ((layer.dataSource as RelationshipVisualizionDataSource).getRelationshipCode() === this.relationship.code && (layer.dataSource as RelationshipVisualizionDataSource).getRelationshipType() === this.relationship.type &&\n              (relatedTypes.map(relatedType => relatedType.code).indexOf((layer as RelationshipVisualizionLayer).getRelatedTypeFilter()) !== -1)));\n\n        // If the type is already rendered at a specific position in the layer stack, we want to preserve that positioning and overwrite any layer currently in that position\n        let existingRelatedTypes: { [key: string]: { index: number, layer: Layer } } = {};\n        for (let i = 0; i < layers.length; ++i) {\n            if (layers[i].dataSource.getDataSourceType() === RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE) {\n                let layer: RelationshipVisualizionLayer = layers[i] as RelationshipVisualizionLayer;\n\n                existingRelatedTypes[layer.getRelatedTypeFilter()] = { index: i, layer: layer };\n            }\n        }\n\n        relatedTypes.forEach(relatedType => {\n            if (relatedType.objectType === \"GEOOBJECT\") {\n                let layer: RelationshipVisualizionLayer = dataSource.createLayer(this.relationship.label.localizedValue + \" \" + relatedType.label, true, this.typeLegend[relatedType.code].color) as RelationshipVisualizionLayer;\n                layer.setRelatedTypeFilter(relatedType.code);\n\n                 if (layers.findIndex(l => l.getKey() === layer.getKey()) === -1) {\n                //if (layers.findIndex(l => l.legendLabel === layer.legendLabel) === -1) {\n                    let existingRelatedType = existingRelatedTypes[relatedType.code];\n\n                    if (existingRelatedType == null || existingRelatedType.layer.getPinned()) {\n                        layers.push(layer);\n                    } else {\n                        layer.rendered = existingRelatedType.layer.rendered;\n                        layers.splice(existingRelatedType.index, 1, layer);\n                    }\n                    /*\n                } else {\n                    // TODO : This is definitely a hack. But I can't get zooming to work up and down rivers with the 'flows through'\n                    //        relationship without doing it this way since this way doesn't interrupt zooming behaviour\n                    window.setTimeout(() => {\n                        let existingLayer = layers[layers.findIndex(l => l.legendLabel === layer.legendLabel)] as RelationshipVisualizionLayer;\n\n                        dataSource.getLayerData().then((data) => {\n                            let map = this.geomService.getMap();\n\n                            if (map) {\n                                let source = map.getSource(existingLayer.dataSource.getId());\n\n                                if (source) {\n                                    (<any> source).setData(data);\n                                }\n                            }\n                        });\n                    }, 10);\n                    */\n                }\n            }\n        });\n\n        this.geomService.setLayers(layers);\n    }\n\n    private getBoundsAsWKT(): string {\n        let wktBounds: string = null;\n\n        if (this.state.bounds != null && this.restrictToMapBounds) {\n            const mapBounds = new LngLatBounds(JSON.parse(this.state.bounds));\n            wktBounds = this.convertBoundsToWKT(mapBounds);\n        }\n\n        return wktBounds;\n    }\n\n    private convertBoundsToWKT(bounds: LngLatBounds): string {\n        let se = bounds.getSouthEast();\n        let sw = bounds.getSouthWest();\n        let nw = bounds.getNorthWest();\n        let ne = bounds.getNorthEast();\n\n        return \"POLYGON ((\" +\n            se.lng + \" \" + se.lat + \",\" +\n            sw.lng + \" \" + sw.lat + \",\" +\n            nw.lng + \" \" + nw.lat + \",\" +\n            ne.lng + \" \" + ne.lat + \",\" +\n            se.lng + \" \" + se.lat +\n            \"))\";\n    }\n\n    calculateTypeLegend(relatedTypes: RelatedType[]) {\n        let oldTypeLegend = this.typeLegend;\n        this.typeLegend = {};\n\n        // If we already have layers which are using specific colors then we want to use those same colors\n        const layers = this.geomService.getLayers();\n\n        relatedTypes.forEach(relatedType => {\n            if (!this.typeLegend[relatedType.code]) {\n                let color: string;\n\n                let existingIndex = layers.findIndex(layer => layer instanceof RelationshipVisualizionLayer && (layer as RelationshipVisualizionLayer).getRelatedTypeFilter() === relatedType.code);\n\n                if (existingIndex !== -1) {\n                    color = layers[existingIndex].color;\n                } else if (oldTypeLegend != null && oldTypeLegend[relatedType.code] != null) {\n                    color = oldTypeLegend[relatedType.code].color;\n                } else {\n                    color = ColorGen().hexString();\n                }\n\n                this.typeLegend[relatedType.code] = { color: color, label: relatedType.label };\n            }\n        });\n\n        if (!this.typeLegend[this.state.type]) {\n            this.typeLegend[this.state.type] = { color: SELECTED_NODE_COLOR, label: this.state.type };\n        }\n    }\n\n    collapseAnimation(id: string): Promise<void> {\n        if (!this.state.type) { return new Promise<void>((resolve, reject) => { resolve(); }); }\n\n        let activeEl = document.getElementById(id) as unknown as SVGGraphicsElement;\n        if (!activeEl) { return new Promise<void>((resolve, reject) => { resolve(); }); }\n\n        let bbox = this.getBBox(activeEl, true);\n\n        let all = document.querySelectorAll(\"g.nodes > g\");\n\n        all.forEach((el: SVGGraphicsElement) => {\n            if (el.id !== activeEl.id) {\n                let bbox2 = this.getBBox(el, false);\n\n                // let translate = \"translate(\" + (bbox.x - bbox2.x) + \",\" + (bbox.y - bbox2.y) + \")\";\n                // el.setAttribute(\"transform\", translate);\n\n                let animateTransform = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animateTransform\") as unknown as SVGAnimateTransformElement;\n\n                animateTransform.setAttribute(\"attributeName\", \"transform\");\n                animateTransform.setAttribute(\"attributeType\", \"XML\");\n                animateTransform.setAttribute(\"type\", \"translate\");\n                animateTransform.setAttribute(\"fill\", \"freeze\");\n                // animateTransform.setAttribute(\"from\", 0 + \" \" + 0);\n                animateTransform.setAttribute(\"to\", (bbox.x - bbox2.x) + \" \" + (bbox.y - bbox2.y));\n                animateTransform.setAttribute(\"begin\", \"indefinite\");\n                animateTransform.setAttribute(\"additive\", \"replace\");\n                animateTransform.setAttribute(\"dur\", COLLAPSE_ANIMATION_TIME + \"ms\");\n                animateTransform.setAttribute(\"repeatCount\", \"0\");\n\n                el.appendChild(animateTransform);\n\n                (animateTransform as any).beginElement(); // Tells the element to animate now\n            }\n        });\n\n        document.querySelectorAll(\"g.links > g\").forEach(el => {\n            el.remove();\n        });\n\n        let promise = new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                all.forEach((el: SVGGraphicsElement) => {\n                    if (el.id !== activeEl.id) {\n                        el.remove();\n                    }\n                });\n\n                resolve();\n            }, COLLAPSE_ANIMATION_TIME);\n        });\n\n        return promise;\n    }\n\n    private getBBox(el: SVGGraphicsElement, includeTransform: boolean = true): DOMRect {\n        if (!includeTransform) {\n            return el.getBBox();\n        }\n\n        let cloned = el.cloneNode(true) as unknown as SVGGraphicsElement;\n\n        let newParent = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\") as unknown as SVGGraphicsElement;\n        document.querySelector(\"svg\").appendChild(newParent);\n\n        newParent.appendChild(cloned);\n        let bbox = newParent.getBBox();\n        cloned.remove();\n        newParent.remove();\n\n        return bbox;\n    }\n\n    /*\n     * We can't predict when the graph will be finished loading and it will be ready to pan. So we're just telling it to\n     * pan over and over again just in case it takes a little while to load. To my knowledge there is no way to fix this,\n     * because:\n     *  1. ngx graph does not provide any sort of \"on ready\" event we can listen to\n     *  2. Checking if the element exists first in the dom before we call pan to node does not work. The graph might still\n     *     not be ready, even if the element exists.\n     */\n    /*\n    private panToNode(uid: string, retryNum: number = 10) {\n        window.setTimeout(() => {\n            if (document.getElementById(\"g-\" + uid) != null) {\n                this.panToNode$.next(\"g-\" + uid);\n                this.update$.next(); // https://github.com/swimlane/ngx-graph/issues/319\n\n                if (retryNum > 0) {\n                    this.panToNode(uid, retryNum - 1);\n                }\n            }\n        }, 50);\n    }\n    */\n\n    public onClickNode(node: any): void {\n        if (node.code !== this.state.code ||\n            node.typeCode !== this.state.type) {\n            let doIt = (resolve) => {\n                this.collapseAnimation(node.id).then(() => {\n                    resolve();\n                });\n            };\n\n            this.nodeSelect.emit({ objectType: node.objectType, id: node.id.substring(2), code: node.code, typeCode: node.typeCode, label: node.label, selectAnimation: doIt } as any);\n        }\n    }\n\n    public getLabelWidth(node: any) {\n        if (this.relationship.layout === \"HORIZONTAL\" && node.relation === \"SELECTED\") {\n            return Math.min(DIMENSIONS.LABEL.WIDTH, calculateTextWidth(node.label, DIMENSIONS.LABEL.FONTSIZE, \"svg.ngx-charts\")) + DIMENSIONS.PADDING.NODE_LABEL;\n        } else {\n            return DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div id=\"relationship-visualizer-root-node\" *ngIf=\"state.code\" style=\"height:100%; overflow:hidden;\">\n\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\">\n  </ngx-spinner>\n\n  <div>\n\n    <select *ngIf=\"relationships\" id=\"relationshipId\" name=\"relationshipId\" class=\"select-area\" [(ngModel)]=\"graphOid\"\n      (change)=\"onSelectRelationship()\" required style=\"margin:10px;width:auto;min-width:200px;\">\n      <option *ngIf=\"relationships.length === 0\"></option>\n      <option *ngFor=\"let loopRel of relationships\" [value]=\"loopRel.oid\">{{loopRel.label.localizedValue}}</option>\n    </select>\n\n    <div style=\"padding-top: 20px;\">\n      <boolean-field [(value)]=\"restrictToMapBounds\" (change)=\"fetchData()\" localizeLabelKey=\"graph.visualizer.restrictToMapBounds\"></boolean-field>\n    </div>\n\n    \n    <div class=\"legend\">\n      <div class=\"legend-item\" *ngFor=\"let item of typeLegend | keyvalue\">\n        <div class=\"square\" [ngStyle]=\"{ background: item.value.color }\"></div>\n        \n        <label>{{ item.value.label }}</label>\n      </div>\n    </div>\n\n    <div *ngIf=\"relationships\">\n      <div class=\"hierarchy-content\">\n        <div id=\"graph-container\">\n          <ngx-graph *ngIf=\"data\" class=\"chart-container\" [view]=\"[svgWidth, svgHeight]\" [links]=\"data.edges\"\n            [nodes]=\"data.verticies\" [animate]=\"false\" [autoZoom]=\"true\" [autoCenter]=\"true\" [layout]=\"layout\"\n            [layoutSettings]=\"{orientation: (relationship.layout === 'VERTICAL') ? CONSTANTS.ORIENTATION.TOP_TO_BOTTOM : CONSTANTS.ORIENTATION.LEFT_TO_RIGHT}\"\n            [curve]=\"curve\" [draggingEnabled]=\"false\" [panToNode$]=\"panToNode$\" [update$]=\"update$\"\n          >\n            <!-- Draw an arrow on relationships for directed graph types -->\n            <ng-template #defsTemplate>\n              <ng-container *ngIf=\"relationship.type !== 'UndirectedGraphType'\">\n                <svg:marker id=\"arrow\" viewBox=\"0 -5 10 10\" refX=\"8\" refY=\"0\" markerWidth=\"4\" markerHeight=\"4\" orient=\"auto\">\n                  <svg:path d=\"M0,-5L10,0L0,5\" class=\"arrow-head\" />\n                </svg:marker>\n              </ng-container>\n            </ng-template>\n\n            <!-- Node Template -->\n            <ng-template #nodeTemplate let-node>\n              <svg:g (click)=\"onClickNode(node)\" class=\"node\" [style.cursor]=\"node.relation === 'SELECTED' ? 'default' : 'pointer'\" >\n                <svg:polygon *ngIf=\"node.objectType === 'GEOOBJECT'\" [attr.points]=\"getHexagonPoints(node)\"\n                  [attr.fill]=\"state.code == null ? node.data.color : this.typeLegend[node.typeCode].color\"\n                  ></polygon>\n                <svg:rect *ngIf=\"node.objectType === 'BUSINESS'\" [attr.width]=\"DIMENSIONS.NODE.WIDTH\" [attr.height]=\"DIMENSIONS.NODE.HEIGHT\"\n                          [attr.y]=\"DIMENSIONS.NODE.HEIGHT/2\"\n                          [attr.x]=\"(this.relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? (this.DIMENSIONS.LABEL.WIDTH / 2 - this.DIMENSIONS.NODE.WIDTH / 2) : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 - this.DIMENSIONS.NODE.WIDTH / 2) : node.relation === 'PARENT' ? (this.DIMENSIONS.LABEL.WIDTH + this.DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.PADDING.NODE_EDGE) : this.DIMENSIONS.PADDING.NODE_EDGE\"\n                          [attr.fill]=\"state.code == null ? node.data.color : this.typeLegend[node.typeCode].color\"\n                ></svg:rect>\n\n                <foreignObject\n                  [attr.x]=\"(relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? 0 : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 + this.DIMENSIONS.NODE.WIDTH / 2 + this.DIMENSIONS.PADDING.NODE_LABEL) : (node.relation === 'PARENT' ? DIMENSIONS.PADDING.NODE_LABEL : (node.relation === 'SELECTED' ? (DIMENSIONS.NODE.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + DIMENSIONS.PADDING.NODE_EDGE) : (DIMENSIONS.NODE.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.PADDING.NODE_EDGE)))\"\n                  [attr.y]=\"(relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? DIMENSIONS.NODE.HEIGHT + DIMENSIONS.PADDING.NODE_LABEL: 0) : node.relation === 'SELECTED' ? 0 : 0\"\n                  [attr.width]=\"getLabelWidth(node)\" [attr.height]=\"DIMENSIONS.LABEL.HEIGHT\">\n                  <span [style]=\"'width:' + DIMENSIONS.LABEL.WIDTH + 'px; height:' + DIMENSIONS.LABEL.HEIGHT + 'px; overflow:hidden; display: inline-block;'\">\n                    <p xmlns=\"http://www.w3.org/1999/xhtml\" text-anchor=\"start\"\n                      [ngStyle]=\"{'text-align': (relationship.layout === 'VERTICAL') ? (node.relation === 'CHILD' ? 'center' : 'left') : node.relation === 'SELECTED' ? 'left' : (node.relation === 'PARENT' ? 'right' : 'left'), 'color': node.relation === 'SELECTED' ? SELECTED_NODE_COLOR : 'unset', 'font-weight': ('g-' + state.uid) === node.id ? 'bold' : 'unset'}\"\n                      [style]=\"'font-size: ' + DIMENSIONS.LABEL.FONTSIZE + 'px; display: table-cell; vertical-align: middle; height:' + DIMENSIONS.LABEL.HEIGHT + 'px; width:' + DIMENSIONS.LABEL.WIDTH + 'px; line-height:' + DIMENSIONS.LABEL.FONTSIZE + 'px;'\">\n                      {{node.label}}</p>\n                  </span>\n                </foreignObject>\n              </svg:g>\n            </ng-template>\n\n            <!-- Link Template -->\n            <ng-template #linkTemplate let-link>\n              <svg:g class=\"edge\">\n                <svg:path class=\"line\" stroke-width=\"2\" marker-end=\"url(#arrow)\"></svg:path>\n              </svg:g>\n            </ng-template>\n          </ngx-graph>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" property=\"type\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a> \n          <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> \n          <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> \n          <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span>\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"data-page\",\n    templateUrl: \"./data-page.component.html\",\n    styleUrls: [\"./data-page.css\"]\n})\nexport class DataPageComponent implements OnInit {\n\n    content: string = \"SPREADSHEET\";\n    pageTitle: string;\n    bsModalRef: BsModalRef;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n    }\n\n    ngOnInit(): void {\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n\n        if (content === \"SPREADSHEET\") {\n            this.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n        } else if (content === \"SHAPEFILE\") {\n            this.pageTitle = this.localizationService.decode(\"shapefile.title\");\n        } else if (content === \"EXPORT\") {\n            this.pageTitle = this.localizationService.decode(\"io.export.title\");\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">\n                      <localize key=\"import-spreadsheet-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">\n                      <localize key=\"import-shapefile-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ViewChildren, ElementRef, QueryList, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from \"@shared/service\";\nimport { HierarchyService, IOService } from \"@registry/service\";\nimport { ExternalSystem } from \"@shared/model/core\";\n\nimport { SpreadsheetModalComponent } from \"./modals/spreadsheet-modal.component\";\nimport { ShapefileModalComponent } from \"./modals/shapefile-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"dataimporter\",\n    templateUrl: \"./dataimporter.component.html\",\n    styleUrls: [\"./dataimporter.css\"]\n})\nexport class DataImporterComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray:QueryList<DateFieldComponent>;\n\n    currentDate : Date = new Date();\n\n    showImportConfig: boolean = false;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Start date\n     */\n    startDate: Date = null;\n\n    /*\n     * End date\n     */\n    endDate: Date | string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string; // Can be SHAPEFILE or EXCEL\n\n    isExternal: boolean = false;\n\n    /*\n     * List of available external systems (filtered based on user's org)\n     */\n    externalSystems: ExternalSystem[];\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    isLoading: boolean = true;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService,\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private authService: AuthService,\n        private sysService: ExternalSystemService,\n        private hierarchyService: HierarchyService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) { }\n\n    ngOnInit(): void {\n        this.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n            this.externalSystems = paginatedSystems.resultSet;\n\n            if (this.externalSystems.length === 0) {\n                this.isExternal = false;\n                this.showImportConfig = true; // Show the upload widget if there are no external systems registered\n            }\n\n            this.isLoading = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = registry.contextPath + \"/excel/get-configuration\";\n        if (this.format === \"SHAPEFILE\") {\n            getUrl = registry.contextPath + \"/shapefile/get-shapefile-configuration\";\n\n            // this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n        }\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.typeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.startDate != null) {\n                form.append(\"startDate\", this.startDate);\n            }\n            if (this.endDate != null) {\n                form.append(\"endDate\", this.endDate);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.isExternal = this.isExternal;\n            configuration.hierarchy = this.hierarchyCode;\n\n            let externalSystem: ExternalSystem = null;\n            for (let i = 0; i < this.externalSystems.length; ++i) {\n                let sys: ExternalSystem = this.externalSystems[i];\n\n                if (sys.oid === this.externalSystemId) {\n                    externalSystem = sys;\n                }\n            }\n\n            configuration.externalSystemId = this.externalSystemId;\n            configuration.externalSystem = externalSystem;\n\n            if (this.format === \"SHAPEFILE\") {\n                this.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true, ignoreBackdropClick: true });\n                this.bsModalRef.content.configuration = configuration;\n            } else {\n                this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n                this.bsModalRef.content.init(configuration);\n            }\n\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n\n        this.checkDates();\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    setImportSource(event, type): void {\n        if (type === \"EXTERNAL\") {\n            this.isExternal = true;\n        } else {\n            this.isExternal = false;\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n//    setInfinity(endDate: any): void {\n//\n//        if(endDate === PRESENT){\n//            this.endDate = null;\n//        }\n//        else{\n//            this.endDate = PRESENT;\n//        }\n//    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = this.checkDateFieldValidity();\n        }, 0);\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        let startDateField: DateFieldComponent;\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n\n            if (field.inputName === \"startDate\") {\n                // set startDateField so we can use it in the next check\n                startDateField = field;\n            }\n\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        if (this.startDate > this.endDate) {\n            startDateField.setInvalid(this.localizationService.decode(\"date.input.startdate.after.enddate.error.message\"));\n\n            this.changeDetectorRef.detectChanges();\n        }\n\n        return true;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\" autocomplete=\"off\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                <label class=\"col-md-2 text-right\" for=\"hierarchyCode\"> <localize key=\"io.modal.hierarchy\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\" [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                        <option></option>\n                        <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>{{view.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\" (change)=\"onSelectType()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>{{type.super ? type.super.label + \" : \" + type.label : type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" (change)=\"checkDates()\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"startDate\" label=\"\" [inputName]=\"'startDate'\" (change)=\"checkDates()\" [allowFutureDates]=\"true\"></date-field>\n                </div>\n                \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"endDate\"><localize key=\"io.endDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"endDate\" label=\"\" [inputName]=\"'endDate'\" (change)=\"checkDates()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" ></date-field>\n                </div>\n                                      \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                \n                <label class=\"col-md-2 text-right\" for=\"copyBlank\"><localize key=\"dataimporter.importblankcells\"></localize></label>\n                <div class=\"col-md-8\">\n                   <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n<!--                     <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\"> -->\n<!--                         <localize key=\"io.back\"></localize> -->\n<!--                     </button> -->\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, ViewEncapsulation, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Location } from \"@angular/common\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\n\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { GeoObjectOverTime } from \"@registry/model/registry\";\n\nimport { ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { LocalizationService, AuthService, EventService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"request-table\",\n    templateUrl: \"./request-table.component.html\",\n    styleUrls: [\"./request-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class RequestTableComponent {\n\n    today: Date = new Date();\n    todayString: string = this.dateService.getDateString(new Date());\n\n    objectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    requests: ChangeRequest[] = [];\n\n    actions: AbstractAction[];\n\n    columns: any[] = [];\n\n    @Input() toggleId: string;\n\n    uploadRequest: ChangeRequest;\n\n    filterCriteria: string = \"ALL\";\n\n    sort: any[] = [{ attribute: \"createDate\", ascending: false }];\n\n    hasBaseDropZoneOver: boolean = false;\n\n    // Restrict page to the specified oid\n    oid: string = null;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    isValid: boolean = true;\n\n    isEditing: boolean = false;\n\n    constructor(private service: ChangeRequestService, private geomService: GeometryService, private modalService: BsModalService, private authService: AuthService, private localizationService: LocalizationService,\n        private eventService: EventService, private route: ActivatedRoute, private router: Router, private dateService: DateService, private location: Location) {\n        this.columns = [\n            { name: localizationService.decode(\"change.request.user\"), prop: \"createdBy\", sortable: false },\n            { name: localizationService.decode(\"change.request.createDate\"), prop: \"createDate\", sortable: false, width: 195 },\n            { name: localizationService.decode(\"change.request.status\"), prop: \"approvalStatus\", sortable: false }\n        ];\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.route.paramMap.subscribe(params => {\n            this.oid = params.get(\"oid\");\n            this.refresh();\n        });\n\n        if (this.oid != null) {\n            this.toggleId = this.oid;\n        }\n\n        let getUrl = registry.contextPath + \"/changerequest/upload-file-cr\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"crOid\", this.uploadRequest.oid);\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: any, status: number, headers: any) => {\n            const doc = JSON.parse(response);\n\n            const index = this.requests.findIndex(request => request.oid === doc.requestId);\n\n            if (index !== -1) {\n                this.requests[index].documents.push(doc);\n            }\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n\n        this.refresh();\n    }\n\n    isSorting(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].attribute === attribute;\n    }\n\n    isAscending(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].ascending;\n    }\n\n    onSort(attribute: string) {\n        let index = this.sort.findIndex(item => item.attribute === attribute);\n\n        if (index !== -1) {\n            let item = this.sort[index];\n\n            item.ascending = !item.ascending;\n        } else {\n            this.sort = [{\n                attribute: attribute,\n                ascending: true\n            }];\n        }\n\n        this.refresh();\n    }\n\n    getGOTLabel(action: any): string {\n        if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.displayLabel && action.geoObjectJson.attributes.displayLabel.values &&\n            action.geoObjectJson.attributes.displayLabel.values[0] && action.geoObjectJson.attributes.displayLabel.values[0].value && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues &&\n            action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0] && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value) {\n            return action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value;\n        } else if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.code) {\n            return action.geoObjectJson.attributes.code;\n        } else {\n            return this.localizationService.decode(\"geoObject.label\");\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    onUpload(request: ChangeRequest): void {\n        this.uploadRequest = request;\n\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onDownloadFile(request: ChangeRequest, fileOid: string): void {\n        window.location.href = registry.contextPath + \"/changerequest/download-file-cr?crOid=\" + request.oid + \"&\" + \"vfOid=\" + fileOid;\n    }\n\n    onDeleteFile(request: ChangeRequest, fileOid: string): void {\n        this.service.deleteFile(request.oid, fileOid).then(() => {\n            const index = request.documents.findIndex(doc => doc.oid === fileOid);\n\n            if (index !== -1) {\n                request.documents.splice(index, 1);\n            }\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    public fileOverBase(e: any): void {\n        this.hasBaseDropZoneOver = e;\n    }\n\n    pageChange(pageNumber: number = 1): void {\n        this.oid = null;\n        this.refresh(pageNumber);\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, pageNumber, this.filterCriteria, this.sort, this.oid).then(requests => {\n            this.page = requests;\n            this.requests = requests.resultSet;\n\n            // Copying the Geo-Object to add consistency for template processing\n            this.requests.forEach((req) => {\n                if (!req.current.geoObject) {\n                    for (let i = 0; i < req.actions.length; i++) {\n                        if (req.actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                            // This is the state of the Geo-Object as the Registry Contributor configured it.\n                            req.current.geoObject = JSON.parse(JSON.stringify((req.actions[0] as CreateGeoObjectAction).geoObjectJson));\n                        }\n                    }\n                }\n            });\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    onSelect(selected: any): void {\n        // this.request = selected.selected;\n\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, 1, \"ALL\", this.sort, this.oid).then(requests => {\n            this.requests = requests.resultSet;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.implementDecisions(changeRequest).then(request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n\n                const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true\n                });\n\n                bsModalRef.content.submitText = this.localizationService.decode(\"change.requests.more.geoobject.updates.submit.btn\");\n                bsModalRef.content.cancelText = this.localizationService.decode(\"change.requests.more.geoobject.updates.cancel.btn\");\n                bsModalRef.content.message = this.localizationService.decode(\"change.requests.more.geoobject.updates.message\");\n\n                bsModalRef.content.onConfirm.subscribe(() => {\n                    const object = this.getFirstGeoObjectInActions(request);\n\n                    if (object != null) {\n                        this.router.navigate([\"/registry/location-manager\"], {\n                            queryParams: { text: object.attributes.code, date: this.todayString, type: object.geoObjectType.code, code: object.attributes.code, uid: object.attributes.uid, pageContext: 'DATA' }\n                        });\n                        // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, object.geoObjectType.code, this.todayString, true]);\n                    } else {\n                        let object = request.current.geoObject;\n                        let type = request.current.geoObjectType;\n\n                        if (object != null && type != null) {\n                            this.router.navigate([\"/registry/location-manager\"], {\n                                queryParams: { text: object.attributes.code, date: this.todayString, type: type.code, code: object.attributes.code, uid: object.attributes.uid, pageContext: 'DATA' }\n                            });\n\n                            // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, type.code, this.todayString, true]);\n                        }\n                    }\n                });\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    onReject(cr: ChangeRequest): void {\n        this.service.rejectChangeRequest(cr).then(() => {\n            // TODO: Determine if there is a way to update an individual record\n            // TODO : cr.statusLabel needs to be updated...\n            /*\n            cr.approvalStatus = \"REJECTED\";\n\n            let len = this.actions.length;\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n\n                action.approvalStatus = \"REJECTED\";\n            }\n            */\n\n            this.refresh();\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    getFirstGeoObjectInActions(request: ChangeRequest): GeoObjectOverTime {\n        for (let i = 0; i < request.actions.length; i++) {\n            let action = request.actions[i];\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (action.hasOwnProperty(\"geoObjectJson\")) {\n                return action[\"geoObjectJson\"];\n            }\n        }\n\n        return null;\n    }\n\n    onDelete(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            bsModalRef.content.type = \"danger\";\n            bsModalRef.content.submitText = this.localizationService.decode(\"change.request.delete.request.confirm.btn\");\n            bsModalRef.content.message = this.localizationService.decode(\"change.request.delete.request.message\");\n\n            bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.delete(changeRequest.oid).then(deletedRequestId => {\n                    let pos = -1;\n                    for (let i = 0; i < this.requests.length; i++) {\n                        let req = this.requests[i];\n                        if (req.oid === deletedRequestId) {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > -1) {\n                        this.requests.splice(pos, 1);\n                    }\n\n                    this.refresh();\n                }).catch((response: HttpErrorResponse) => {\n                    this.error(response);\n                });\n            });\n        }\n    }\n\n    onUpdate(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.update(changeRequest).then(request => {\n                this.refresh();\n\n                this.isEditing = false;\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    applyActionStatusProperties(action: any): void {\n        // var action = JSON.parse(JSON.stringify(this.action));\n        // action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        this.service.setActionStatus(action.oid, action.approvalStatus).then(response => {\n            action.decisionMaker = (action.approvalStatus !== \"PENDING\") ? this.authService.getUsername() : \"\";\n\n            // this.crtable.refresh()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    requestTrackBy(index: number, request: ChangeRequest) {\n        return request.oid;\n    }\n\n    toggle(event: any, oid: string): void {\n        this.location.replaceState(\"/registry/change-requests/\" + oid);\n\n        if (!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")) {\n            if (this.toggleId === oid) {\n                this.toggleId = null;\n            } else {\n                this.toggleId = oid;\n                //                this.onSelect({ selected: [{ oid: oid }] });\n                this.requests.forEach(req => {\n                    if (req.oid === oid) {\n                        this.actions = req.actions;\n                    }\n                });\n            }\n        }\n    }\n\n    filter(criteria: string): void {\n        this.filterCriteria = criteria;\n\n        this.refresh(1);\n    }\n\n    setActionStatus(action: CreateGeoObjectAction | UpdateAttributeAction, status: string): void {\n        const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        bsModalRef.content.onConfirm.subscribe(data => {\n            action.approvalStatus = status;\n\n            this.applyActionStatusProperties(action);\n        });\n    }\n\n    getActiveDetailComponent(action: CreateGeoObjectAction | UpdateAttributeAction): any {\n        // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n        if (action.actionType.endsWith(\"CreateGeoObjectAction\") || action.actionType.endsWith(\"UpdateGeoObjectAction\")) {\n            // return this.cuDetail;\n        }\n        //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n        //   {\n        //     return this.arDetail;\n        //   }\n\n        return action;\n    }\n\n    getUsername(): string {\n        return this.authService.getUsername();\n    }\n\n    isRequestTooOld(request: ChangeRequest): boolean {\n        if (request.actions && request.actions.length > 0) {\n            let firstAction = request.actions[0];\n\n            if (firstAction.actionType === ActionTypes.UPDATEGEOOBJECTACTION) {\n                return true;\n            } else if (firstAction.actionType === ActionTypes.CREATEGEOOBJECTACTION && !(firstAction as CreateGeoObjectAction).geoObjectJson.attributes[\"exists\"]) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    onEditAttributes(): void {\n        this.isEditing = !this.isEditing;\n    }\n\n    canEdit(request: ChangeRequest): boolean {\n        return (request.permissions.includes(\"WRITE_DETAILS\") && this.isEditing);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"form-group button-row\">\n\n      <a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" style=\"border-bottom: 1px solid;\" >\n        <localize key=\"change.request.all.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.pending.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.accepted.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PARTIAL')\" [ngClass]=\"filterCriteria === 'PARTIAL' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.partial.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.rejected.filter.link\"></localize>\n      </a>\n\n    </div>\n    <hr style=\"border-top:solid 3px #6BA542\" />\n\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <table class=\"table\">\n      <thead>\n        <tr style=\"height: 50px;color: grey;\">\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createdBy')\"><localize key=\"change.request.contributor.label\"></localize></a><i *ngIf=\"isSorting('createdBy')\" [ngClass]=\"isAscending('createdBy') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectTypeLabel')\"><localize key=\"geoObjectType.label\"></localize></a><i *ngIf=\"isSorting('geoObjectTypeLabel')\" [ngClass]=\"isAscending('geoObjectTypeLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectLabel')\"><localize key=\"geoObject.label\"></localize></a><i *ngIf=\"isSorting('geoObjectLabel')\" [ngClass]=\"isAscending('geoObjectLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createDate')\"><localize key=\"change.request.date.contributed.label\"></localize></a><i *ngIf=\"isSorting('createDate')\" [ngClass]=\"isAscending('createDate') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('approvalStatus')\"><localize key=\"change.request.status.label\"></localize></a><i *ngIf=\"isSorting('approvalStatus')\" [ngClass]=\"isAscending('approvalStatus') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('oid')\"><localize key=\"change.request.id.label\"></localize></a><i *ngIf=\"isSorting('oid')\" [ngClass]=\"isAscending('oid') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-template ngFor let-req [ngForOf]=\"requests | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" [ngForTrackBy]=\"requestTrackBy\">\n        \n          <tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n            <td class=\"col-md-1\">\n              <h5><strong>{{req.createdBy}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObjectType.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObject.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align: middle; color:grey;\">\n               <span class=\"date-string-display\">\n                 <date-text [date]=\"req.createDate\"></date-text>\n               </span>\n            </td>\n            <td class=\"col-md-1\">\n              <h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-partial':req.approvalStatus === 'PARTIAL', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n                 <strong>{{req.statusLabel}}</strong>\n              </h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.oid}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:right;padding-right:25px;\">\n              <i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n            </td>\n          </tr>\n          \n          <!-- Action panel only shows when activated with click -->\n          <tr [@fadeInOut] *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\" [ngClass]=\"{'status-pending-container':req.approvalStatus === 'PENDING', 'status-accepted-container':req.approvalStatus === 'ACCEPTED', 'status-partial-container':req.approvalStatus === 'PARTIAL', 'status-rejected-container':req.approvalStatus === 'REJECTED'}\">\n            \n            <td colspan=\"7\">\n              <div class=\"geoobject-panel-header\">\n              \n                    <div>\n                        <h3 style=\"margin-top: 10px;\">{{req.geoObject.label}}</h3>\n                        <h4 style=\"font-style: italic;\">{{req.geoObject.code}}</h4>\n                        \n                        <h4 *ngIf=\"req.type === 'UpdateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.update.geoobject.label\"></localize></h4>\n                        <h4 *ngIf=\"req.type === 'CreateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.create.geoobject.label\"></localize></h4>\n                    </div>\n              </div>\n                  \n              <div class=\"row\" style=\"margin:0;background: white;\">\n                <!-- <div class=\"col-md-1\"></div> -->\n                <div class=\"col-md-12\">\n                \n                  <div *ngIf=\"!isRequestTooOld(req) && req.approvalStatus === 'INVALID'\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.invalid\"></localize>\n                  </div>\n                  <div *ngIf=\"isRequestTooOld(req)\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.tooOld\"></localize>\n                  </div>\n                \n                  <div *ngIf=\"req.permissions.includes('READ_CONTRIBUTOR_NOTES')\" class=\"form-group\" style=\"margin-top:20px;\">\n                     <label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n                     <textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;\" [(ngModel)]=\"req.contributorNotes\" [disabled]=\"!req.permissions.includes('WRITE_DETAILS')\"></textarea>\n                  </div>  \n                  \n                  <div>\n                    <p><localize key=\"change.request.contributor.prefix.label\"></localize>&nbsp;<strong>{{req.createdBy}}</strong></p>\n                    <p><localize key=\"change.request.contributor.email.prefix.label\"></localize>&nbsp;<strong>{{req.email}}</strong></p>\n                    <p><localize key=\"change.request.contributor.phone.prefix.label\"></localize>&nbsp;<strong>{{req.phoneNumber}}</strong></p>\n                  </div>\n  \n                  <div *ngIf=\"req.approvalStatus !== 'INVALID' && !isRequestTooOld(req)\" class=\"cr-details\">\n\t                  <div class=\"action-card\" style=\"margin-bottom:10px; background-color:white;\"> \n\t                    <div class=\"row\" style=\"background: white;\">\n\t                      <div class=\"col-md-12\">\n\t                      \n\t                         <geoobject-shared-attribute-editor *ngIf=\"req\"\n\t                              #attributeEditor\n\t                              [readOnly]=\"!canEdit(req)\"  \n\t                              [geoObjectType]=\"req.current.geoObjectType\"\n                                [postGeoObject]=\"req.type == 'UpdateGeoObject' ? req.current.geoObject : req.actions[0].geoObjectJson\" \n\t                              [changeRequest]=\"req\"\n\t                              [hierarchies]=\"req.type == 'UpdateGeoObject' ? req.current.hierarchies : req.actions[0].parentJson\"\n\t                              [isGeometryInlined]=\"true\"\n                                [isNew]=\"req.type === 'CreateGeoObject'\"\n                                (valid)=\"setValid($event)\">\n\t                         </geoobject-shared-attribute-editor>\n\t                         \n\t                       </div>\n\t                    </div>\n\t  \n\t                    <div class=\"row\" style=\"border-top: 1px grey solid;margin:0;padding: 10px 0;\">\n\t                      <div class=\"col-md-6\" >\n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                          <label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t                          <textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;margin:0\" [(ngModel)]=\"req.maintainerNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\"></textarea>\n\t                        </div>  \n\t                        \n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                              <label for=\"additionalNotes-{{req.oid}}\"> <localize key=\"change.request.action.detail.additionalNotes\"></localize> </label>\n\t                              <input type=\"text\" id=\"additionalNotes-{{req.oid}}\" class=\"form-control\" style=\"width:100%;\" [(ngModel)]=\"req.additionalNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\">\n\t                        </div>  \n\t                      </div>\n\t                      \n\t                      <div class=\"col-md-6\" >\n\t                        <div>\n\t                          <label><localize key=\"change.request.reference.documents.label\"></localize></label>\n\t                          <div *ngIf=\"req.documents.length > 0\" style=\"border:1px solid #ccc;border-radius: 4px;\">\n\t                            <ul style=\"padding:10px;margin:0;\">\n\t                                <li *ngFor=\"let doc of req.documents\" class=\"list-group-item\" style=\"padding:0;font-size:inherit;\">\n\t                                  <a (click)=\"onDownloadFile(req, doc.oid)\" >{{doc.fileName}}</a>\n\t                                  <i (click)=\"onDeleteFile(req, doc.oid)\" class=\"fa fa-times ico-remove\" style=\"margin-left:10px;\" aria-hidden=\"true\"></i>\n\t                                </li>\n\t                            </ul>\n\t                          </div>\n\t                          <p *ngIf=\"req.documents.length === 0\" style=\"color:grey;font-style:italic;\">\n\t                            <localize key=\"change.request.no.documents.label\"></localize>\n\t                          </p>\n\t                        \n\t                          <div *ngIf=\"req.permissions.includes('WRITE_DOCUMENTS') && isEditing\" style=\"padding:10px 0;\">\n\t                              <!-- Limit file types with: accept=\".xls, .xlsx, .pdf, .doc\" -->\n\t                              <input class=\"ghost-input\" style=\"display:inline-block;padding:0;height:auto;border-radius:0;margin-top:10px;\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" required />\n\t                              \n\t                              <button class=\"btn btn-primary pull-right\" style=\"margin:0;\" (click)=\"onUpload(req)\" [title]=\"'change.request.upload.document.btn.hover' | localize\">\n\t                                <localize key=\"change.request.reference.document.upload\"></localize>\n\t                              </button>\n\t                          </div>\n\t                        </div>\n\t  \n\t                      </div>\n\t                    </div>\n\t                  </div> \n\t  \n\t  \n\t                  <div *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS') || req.permissions.includes('DELETE')\" class=\"button-holder\" style=\"margin-bottom:20px;min-height:40px;\">\n\t                    <span *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS')\">\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\" [title]=\"'change.request.implement.decisions.btn.hover' | localize\">\n\t                        <localize [key]=\"req.type === 'UpdateGeoObject' ? 'change.request.accept.changes.btn' : 'change.request.accept.newGeoObject.btn'\"></localize>\n\t                      </button>\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" *ngIf=\"req.type === 'CreateGeoObject'\" type=\"submit\" (click)=\"onReject(req)\" class=\"btn btn-danger\" style=\"margin:0 10px;\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\">\n                            <localize key=\"change.request.reject.all.btn\"></localize>\n                          </button>\n\t                    </span>\n\n                        <span *ngIf=\"isValid && req.permissions.includes('WRITE_DETAILS') && req.createdBy === getUsername()\">\n                          <button type=\"submit\" *ngIf=\"!isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                          </button>\n                          <button type=\"submit\" *ngIf=\"isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                          </button>\n                          <button type=\"submit\" role=\"button\" class=\"btn btn-primary\" *ngIf=\"isEditing\" (click)=\"onUpdate(req)\" [title]=\"'modal.button.update' | localize\" >\n                            <localize key=\"modal.button.update\"></localize>\n                          </button>\n                          \n                          <button type=\"submit\" role=\"button\" class=\"btn btn-danger pull-right\" [disabled]=\"!isEditing\" *ngIf=\"req.permissions.includes('DELETE') && req.createdBy === getUsername()\" (click)=\"onDelete(req)\" [title]=\"'change.request.delete.request.hover' | localize\" >\n                            <localize key=\"change.request.delete.request.btn\"></localize>\n                          </button>\n                        </span>\n\t                  </div>\n                  </div>\n                </div>\n                <!-- <div class=\"col-md-1\"></div> -->\n              </div>\n  \n            </td>\n          </tr> <!-- END Action panel -->\n          \n        </ng-template>\n      </tbody>\n    </table>\n    <div class=\"solid-table-footer\">\n\t    <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n        <pagination-controls (pageChange)=\"pageChange($event)\"></pagination-controls>\n\t    </div>\n    </div>\n  </div>   \n</div>\n","import { ActionTypes, ChangeType } from \"@registry/model/constants\";\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeOverTimeAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectType, HierarchyOverTime, HierarchyOverTimeEntry, ValueOverTime } from \"@registry/model/registry\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { v4 as uuid } from \"uuid\";\nimport { GeometryService } from \"@registry/service\";\nimport { Subject } from \"rxjs\";\n\nexport class ChangeRequestChangeOverTimeAttributeEditor {\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    attribute: AttributeType;\n\n    editAction: AbstractAction;\n\n    hierarchy: HierarchyOverTime;\n\n    editors: ValueOverTimeCREditor[];\n\n    private _isValid: boolean;\n\n    onChangeSubject: Subject<any> = new Subject<any>();\n\n    constructor(changeRequestEditor: ChangeRequestEditor, attribute: AttributeType, hierarchy: HierarchyOverTime) {\n        this.changeRequestEditor = changeRequestEditor;\n        this.attribute = attribute;\n        this.hierarchy = hierarchy;\n\n        this.getEditAction();\n\n        if (hierarchy != null) {\n            for (let j = 0; j < this.hierarchy.entries.length; j++) {\n                let hierarchyEntry = this.hierarchy.entries[j];\n\n                if (hierarchyEntry.parents == null) {\n                    hierarchyEntry.parents = {};\n                }\n                if (hierarchyEntry.loading == null) {\n                    hierarchyEntry.loading = {};\n                }\n\n                for (let i = 0; i < this.hierarchy.types.length; i++) {\n                    let current = this.hierarchy.types[i];\n\n                    if (hierarchyEntry.parents[current.code] == null) {\n                        hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n                    }\n                }\n            }\n        }\n\n        this.editors = this.generateEditors();\n    }\n\n    getEditAction() {\n        if (this.editAction == null) {\n            let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n            if (actions.length === 0) {\n                this.editAction = new UpdateAttributeOverTimeAction(this.attribute.code);\n\n                if (this.attribute.code === \"_PARENT_\") {\n                    (this.editAction as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchy.code;\n                }\n            } else {\n                this.editAction = actions[actions.length - 1];\n            }\n        }\n\n        return this.editAction;\n    }\n\n    onChange(type: ChangeType) {\n        // If our attribute action has changes it needs to be added to the ChangeRequest actions. Otherwise we can remove it.\n        let hasChanges: boolean = this.hasChanges();\n\n        let index = this.changeRequestEditor.changeRequest.actions.findIndex(action => this.editAction === action);\n\n        if (index !== -1 && !hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.splice(index, 1);\n        } else if (index === -1 && hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.push(this.editAction);\n        }\n\n        this.validate();\n\n        this.onChangeSubject.next(type);\n        this.changeRequestEditor.onChange(type);\n    }\n\n    hasChanges(): boolean {\n        let hasChanges: boolean = true;\n\n        if (this.editAction.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n            let updateAction: UpdateAttributeOverTimeAction = this.editAction as UpdateAttributeOverTimeAction;\n\n            if (updateAction.attributeDiff.valuesOverTime.length === 0) {\n                hasChanges = false;\n            }\n        }\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(skipExists: boolean = false): boolean {\n        let validEditors = this.validateEditors();\n        let hasTimeConflict = this.changeRequestEditor.dateService.checkRanges(this.attribute, this.editors);\n\n        let hasExistConflict = false;\n        if (this.attribute.code !== \"exists\") {\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existEditors = (this.changeRequestEditor.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n            hasExistConflict = this.changeRequestEditor.dateService.checkExistRanges(this.editors, existEditors);\n        } else if (!skipExists) {\n            this.changeRequestEditor.validate(true); // If the exists attribute has changed we must revalidate all other attributes\n        }\n\n        this._isValid = validEditors && !hasTimeConflict && !hasExistConflict;\n\n        return this._isValid;\n    }\n\n    private validateEditors(): boolean {\n        let valid: boolean = true;\n\n        this.editors.forEach(editor => {\n            if (!editor.validate()) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string) {\n        if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n            let index = this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestEditor.geoObject.attributes[this.attribute.code].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditor(oid: string) {\n        let matches = this.editors.filter(editor => editor.oid === oid);\n        return matches.length > 0 ? matches[0] : null;\n    }\n\n    public getEditors(includeUnmodified: boolean = true): ValueOverTimeCREditor[] {\n        return this.editors.filter(editor => includeUnmodified || editor.diff != null);\n    }\n\n    generateEditors(): ValueOverTimeCREditor[] {\n        let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n        let editors: ValueOverTimeCREditor[] = [];\n\n        // First, we have to create a view for every ValueOverTime object. This is done to simply display what's currently\n        // on the GeoObject\n        if (this.attribute.code === \"_PARENT_\") {\n            this.hierarchy.entries.forEach((entry: HierarchyOverTimeEntry) => {\n                let editor = new HierarchyCREditor(this, this.attribute, this.editAction, entry, this.hierarchy);\n\n                editors.push(editor);\n            });\n        } else {\n            if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n                this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.forEach((vot: ValueOverTime) => {\n                    let editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n\n                    editor.valueOverTime = vot;\n\n                    editors.push(editor);\n                });\n            }\n        }\n\n        // Next, we must apply all changes which may exist in the actions.\n        if (this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            let len = actions.length;\n            for (let i = 0; i < len; ++i) {\n                let updateAttrAction: UpdateAttributeOverTimeAction = actions[i] as UpdateAttributeOverTimeAction;\n\n                updateAttrAction.attributeDiff.valuesOverTime.forEach((votDiff: ValueOverTimeDiff) => {\n                    let index = editors.findIndex(editor => editor.oid === votDiff.oid);\n                    let editor = (index === -1) ? null : editors[index];\n\n                    if (editor == null) {\n                        if (this.attribute.code === \"_PARENT_\") {\n                            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n                        } else {\n                            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n                        }\n\n                        editor.diff = votDiff;\n\n                        editors.push(editor);\n                    } else {\n                        editor.diff = votDiff;\n\n                        if (this.attribute.code === \"_PARENT_\") {\n                            (editor as HierarchyCREditor).hierarchyEntry.parents = votDiff.parents;\n                        }\n                    }\n                });\n            }\n        }\n\n        return editors;\n    }\n\n    public createNewVersion(original?: ValueOverTimeCREditor): ValueOverTimeCREditor {\n        let editor: ValueOverTimeCREditor;\n\n        // Create an instance of the appropriate editor object\n        if (this.attribute.code === \"_PARENT_\") {\n            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n        } else {\n            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n        }\n\n        // If we're creating a new GeoObject, add it to that GeoObject\n        if (this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            if (this.attribute.code === \"_PARENT_\") {\n                (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n                (editor as HierarchyCREditor).hierarchyOverTime.entries.push((editor as HierarchyCREditor).hierarchyEntry);\n            } else {\n                let vot = new ValueOverTime();\n                vot.oid = uuid();\n\n                (this.editAction as CreateGeoObjectAction).geoObjectJson.attributes[this.attribute.code].values.push(vot);\n\n                editor.valueOverTime = vot;\n            }\n        } else {\n            editor.constructNewDiff(\"CREATE\");\n        }\n\n        // Set any default values\n        if (this.attribute.type === \"local\") {\n            editor.value = this.changeRequestEditor.localizationService.create();\n        } else if (this.attribute.type === \"geometry\") {\n            let editors = this.getEditors(true);\n\n            if (editors.length > 0) {\n                if (original != null) {\n                    editor.value = JSON.parse(JSON.stringify(original.value));\n                } else {\n                    editor.value = JSON.parse(JSON.stringify(editors[editors.length - 1].value));\n                }\n            } else {\n                editor.value = GeometryService.createEmptyGeometryValue(this.changeRequestEditor.geoObjectType.geometryType);\n            }\n        } else if (this.attribute.type === \"term\") {\n            let terms = GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.changeRequestEditor.geoObjectType, this.attribute.code);\n\n            if (terms && terms.length > 0) {\n                editor.value = terms[0].code;\n            }\n        } else if (this.attribute.code === \"_PARENT_\" && this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n        } else if (this.attribute.code !== \"_PARENT_\") {\n            editor.value = null;\n        }\n\n        this.editors.push(editor);\n\n        this.onChange(ChangeType.ADD);\n\n        return editor;\n    }\n\n    public remove(editor: ValueOverTimeCREditor) {\n        if ((editor.diff != null && editor.diff.action === \"CREATE\") || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            let index = this.editors.findIndex(find => find.oid === editor.oid);\n\n            if (index !== -1) {\n                this.editors.splice(index, 1);\n            }\n        }\n\n        editor.remove();\n\n        this.validate();\n    }\n\n}\n","import { ValueOverTime, AttributeType, TimeRangeEntry, ConflictMessage } from \"@registry/model/registry\";\nimport { CreateGeoObjectAction, UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\nimport bbox from \"@turf/bbox\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { Subject } from \"rxjs\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { LngLatBoundsLike } from \"mapbox-gl\";\nimport { GeoJsonLayer, Layer } from \"@registry/service/layer-data-source\";\n\nexport class ValueOverTimeCREditor implements TimeRangeEntry {\n\n    diff?: ValueOverTimeDiff; // Any existing diff which may be associated with this object.\n    valueOverTime?: ValueOverTime; // Represents a vot on an existing GeoObject. If this is set and the action is UpdateAttribute, we must be doing an UPDATE, and valueOverTime represents the original value in the DB.\n    action: AbstractAction;\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n    attr: AttributeType;\n    conflictMessages: Set<ConflictMessage>;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    _isValid: boolean = true;\n\n    constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction) {\n        this.attr = attr;\n        this.changeRequestAttributeEditor = changeRequestAttributeEditor;\n        this.action = action;\n    }\n\n    onChange(type: ChangeType) {\n        this.changeRequestAttributeEditor.onChange(type);\n        this.onChangeSubject.next(type);\n    }\n\n    getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n        return this.valueOverTime;\n    }\n\n    getValueFromGeoObjectForDiff(): any {\n        return this.valueOverTime.value;\n    }\n\n    validate(): boolean {\n        if (!this.conflictMessages) {\n            this.conflictMessages = new Set();\n        }\n\n        let dateService = this.changeRequestAttributeEditor.changeRequestEditor.dateService;\n        let start = dateService.validateDate(this.startDate == null ? null : dateService.getDateFromDateString(this.startDate), true, true);\n        let end = dateService.validateDate(this.endDate == null ? null : dateService.getDateFromDateString(this.endDate), true, true);\n        this._isValid = true;\n\n        if (!start.valid || !end.valid) {\n            this._isValid = false;\n        }\n\n        this.validateUpdateReference();\n\n        return this._isValid;\n    }\n\n    /**\n     * If we're referencing an existing value over time, that object should exist on our GeoObject (which represents the current state of the database)\n     */\n    validateUpdateReference() {\n        let missingReference = this.changeRequestAttributeEditor.changeRequestEditor.dateService.missingReference;\n\n        this.conflictMessages.delete(missingReference);\n\n        if (this.changeRequestAttributeEditor.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\" && this.diff != null && this.diff.action !== \"CREATE\") {\n            let existingVot = this.findExistingValueOverTimeByOid(this.diff.oid);\n\n            if (existingVot == null) {\n                this._isValid = false;\n\n                this.conflictMessages.add(missingReference);\n            }\n        }\n    }\n\n    findExistingValueOverTimeByOid(oid: string) {\n        if (this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[this.attr.code]) {\n            let index = this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[this.attr.code].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[this.attr.code].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    set oid(oid: string) {\n        if (this.diff != null) {\n            this.diff.oid = oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            this.getGeoObjectTimeRangeStorage().oid = oid;\n        }\n    }\n\n    get oid(): string {\n        if (this.diff != null) {\n            return this.diff.oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().oid;\n        }\n\n        return null;\n    }\n\n    get startDate(): string {\n        return this.getStartDate();\n    }\n\n    public getStartDate(): string {\n        if (this.diff != null && this.diff.newStartDate !== undefined) {\n            return this.diff.newStartDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldStartDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().startDate;\n        }\n\n        return null;\n    }\n\n    constructNewDiff(action: string): void {\n        this.diff = new ValueOverTimeDiff();\n        this.diff.action = action;\n        (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n\n        if (action === \"CREATE\") {\n            this.diff.oid = uuid();\n        } else {\n            let goRange = this.getGeoObjectTimeRangeStorage();\n\n            this.diff.oid = goRange.oid;\n            this.diff.oldStartDate = goRange.startDate;\n            this.diff.oldEndDate = goRange.endDate;\n        }\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        if (this.diff != null) {\n            this.diff.oldStartDate = oldStartDate;\n        }\n    }\n\n    get oldStartDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldStartDate;\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        return this.getEndDate();\n    }\n\n    public getEndDate(): string {\n        if (this.diff != null && this.diff.newEndDate !== undefined) {\n            return this.diff.newEndDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldEndDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().endDate;\n        }\n\n        return null;\n    }\n\n    set startDate(startDate: string) {\n        this.setStartDate(startDate);\n    }\n\n    public setStartDate(startDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.startDate === startDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (startDate === this.diff.oldStartDate) {\n                delete this.diff.newStartDate;\n            } else {\n                this.diff.newStartDate = startDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.startDate = startDate;\n        }\n\n        this.onChange(ChangeType.START_DATE);\n    }\n\n    set endDate(endDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (goRange == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.endDate === endDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (endDate === this.diff.oldEndDate) {\n                delete this.diff.newEndDate;\n            } else {\n                this.diff.newEndDate = endDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.endDate = endDate;\n        }\n\n        this.onChange(ChangeType.END_DATE);\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        if (this.diff != null) {\n            this.diff.oldEndDate = oldEndDate;\n        }\n    }\n\n    get oldEndDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldEndDate;\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        if (this.diff != null && this.diff.newValue !== undefined) {\n            return this.diff.newValue;\n        } else if (this.diff != null && this.diff.oldValue !== undefined) {\n            return this.diff.oldValue;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().value;\n        }\n\n        return null;\n    }\n\n    set value(value: any) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        if (value != null) {\n            if (this.attr.type === \"term\") {\n                value = [value];\n            } else if (this.attr.type === \"date\") {\n                value = new Date(value).getTime();\n            } else if (this.attr.type === \"geometry\") {\n                // Limit max precision for point geometries\n                let maxCoordinatePrecision = 6;\n\n                if (value.type === \"MultiPoint\") {\n                    for (let i = 0; i < value.coordinates.length; ++i) {\n                        let coordinate: number[] = value.coordinates[i];\n\n                        coordinate[0] = Number.parseFloat(coordinate[0].toFixed(maxCoordinatePrecision));\n                        coordinate[1] = Number.parseFloat(coordinate[1].toFixed(maxCoordinatePrecision));\n                    }\n                } else if (value.type === \"Point\") {\n                    value.coordinates = [Number.parseFloat(value.coordinates[0].toFixed(maxCoordinatePrecision)), Number.parseFloat(value.coordinates[1].toFixed(maxCoordinatePrecision))];\n                }\n            }\n        } else if (value == null) {\n            if (this.attr.type === \"geometry\") {\n                value = GeometryService.createEmptyGeometryValue(this.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType);\n            } else if (this.attr.type === \"character\") {\n                value = \"\";\n            }\n        }\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.oid = uuid();\n                    this.diff.action = \"CREATE\";\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                } else {\n                    if (this.areValuesEqual(this.valueOverTime.value, value)) {\n                        return;\n                    }\n\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.action = \"UPDATE\";\n                    this.diff.oid = this.getGeoObjectTimeRangeStorage().oid;\n                    this.diff.oldValue = this.valueOverTime.value;\n                    this.diff.oldStartDate = this.getGeoObjectTimeRangeStorage().startDate;\n                    this.diff.oldEndDate = this.getGeoObjectTimeRangeStorage().endDate;\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                }\n            }\n\n            if (this.diff.action !== \"CREATE\" && this.areValuesEqual(this.diff.oldValue, value)) {\n                delete this.diff.newValue;\n            } else {\n                this.diff.newValue = JSON.parse(JSON.stringify(value));\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            this.valueOverTime.value = value;\n        }\n\n        this.onChange(ChangeType.VALUE);\n    }\n\n    set oldValue(oldValue: any) {\n        if (this.diff != null) {\n            this.diff.oldValue = oldValue;\n        }\n    }\n\n    get oldValue(): any {\n        if (this.diff != null) {\n            return this.diff.oldValue;\n        }\n\n        return null;\n    }\n\n    public setLocalizedValue(localizedValue: LocalizedValue) {\n        this.value = JSON.parse(JSON.stringify(localizedValue));\n    }\n\n    removeEmptyDiff(): void {\n        if (this.diff != null && this.diff.newValue === undefined && this.diff.newStartDate === undefined && this.diff.newEndDate === undefined) {\n            const diffs = (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime;\n\n            const index = diffs.findIndex(d => d.oid === this.diff.oid);\n\n            if (index !== -1) {\n                diffs.splice(index, 1);\n            }\n\n            this.diff = null;\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attr.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (this.attr.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (this.attr.type === \"geometry\") {\n            if (((val1 != null && val1.coordinates != null && val1.coordinates.length != null) && (val2 != null && val2.coordinates != null && val2.coordinates.length != null)) && val1.coordinates.length !== val2.coordinates.length) {\n                return false;\n            }\n            return turf_booleanequal(val1, val2);\n        } else if (this.attr.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (this.attr.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return val1 === val2;\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public remove(): void {\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff != null && this.diff.action === \"CREATE\") {\n                // Its a new entry, just remove the diff from the diff array\n                let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n                const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n                if (index > -1) {\n                    updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n                }\n            } else if (this.diff != null) {\n                delete this.diff.newValue;\n                delete this.diff.newStartDate;\n                delete this.diff.newEndDate;\n                this.removeEmptyDiff();\n                this.onChange(ChangeType.REMOVE);\n                return;\n            } else if (this.valueOverTime != null && this.diff == null) {\n                this.diff = new ValueOverTimeDiff();\n                this.diff.action = \"DELETE\";\n                this.diff.oid = this.valueOverTime.oid;\n                this.diff.oldValue = this.valueOverTime.value;\n                this.diff.oldStartDate = this.valueOverTime.startDate;\n                this.diff.oldEndDate = this.valueOverTime.endDate;\n                (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n            }\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            let votc = (this.action as CreateGeoObjectAction).geoObjectJson.attributes[this.attr.code].values;\n\n            let index = votc.findIndex((vot) => { return vot.oid === this.valueOverTime.oid; });\n\n            if (index !== -1) {\n                votc.splice(index, 1);\n            }\n        }\n\n        this.onChange(ChangeType.REMOVE);\n    }\n\n    public isDelete() {\n        return this.diff != null && this.diff.action === \"DELETE\";\n    }\n\n    buildDataSource(type: string) {\n        let votEditor = this;\n        return {\n            setLayerData(data: any): void {\n                if (type === \"NEW\") {\n                    votEditor.value = data;\n                } else {\n                    // eslint-disable-next-line no-console\n                    console.log(\"ERROR. Cannot edit old geometry\");\n                }\n            },\n            getLayerData() {\n                if (type === \"NEW\") {\n                    return votEditor.value;\n                } else {\n                    return votEditor.oldValue;\n                }\n            },\n            buildMapboxSource() {\n                let geojson = this.getLayerData();\n\n                return {\n                    type: \"geojson\",\n                    data: geojson\n                };\n            },\n            getGeometryType(): string {\n                return votEditor.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType;\n            },\n            getDataSourceId(): string {\n                return type + \"_\" + votEditor.oid;\n            },\n            getDataSourceProviderId(): string {\n                return votEditor.changeRequestAttributeEditor.changeRequestEditor.changeRequest.oid;\n            },\n            createLayer(oid: string, legendLabel: string, rendered: boolean, color: string): Layer {\n                return new GeoJsonLayer(this, legendLabel, rendered, color);\n            },\n            getBounds(layer: Layer, registryService: RegistryService, listService: ListTypeService): Promise<LngLatBoundsLike> {\n                return new Promise((resolve, reject) => {\n                    resolve(bbox(this.getLayerData()) as LngLatBoundsLike);\n                });\n            }\n        };\n    }\n\n}\n","import { Component, OnInit, ViewChild, OnDestroy, Input } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService, MapService, GeometryService } from \"@registry/service\";\n\nimport { Map, NavigationControl } from \"mapbox-gl\";\n\n// eslint-disable-next-line no-unused-vars\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"geoobject-editor-map[geometryType]\",\n    templateUrl: \"./geoobject-editor-map.component.html\",\n    styleUrls: [\"./geoobject-editor-map.component.css\"]\n})\n\n/**\n * This component is used when viewing change requests\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    _mapHeight: number = 400;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set mapHeight(height: number) {\n        if (height > 400) {\n            this._mapHeight = height;\n        }\n    }\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mapDiv\") mapDiv;\n\n    map: Map;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private geomService: GeometryService, private registryService: RegistryService, private mapService: MapService) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.mapDiv.nativeElement.id = Math.floor(Math.random() * (899999)) + 100000;\n\n            this.map = new Map({\n                container: this.mapDiv.nativeElement.id,\n                style: \"mapbox://styles/mapbox/satellite-v9\",\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            });\n\n            this.map.on(\"load\", () => {\n                this.initMap();\n            });\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    getIsValid(): boolean {\n        return this.geomService.isValid();\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            // this.addLayers();\n            // this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n        });\n\n        this.geomService.initialize(this.map, this.geometryType, false);\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl());\n\n        this.zoomToBbox();\n    }\n\n    zoomToBbox(): void {\n        this.geomService.zoomToLayersExtent();\n    }\n\n    public error(err: HttpErrorResponse): void {\n        // TODO\n        console.log(\"ERROR\", err);\n    }\n\n}\n","<div class=\"geoobject-editor-map-wrapper\">\n  <div #mapDiv class=\"map-view-port-inline text-left\" [style.height.px]=\"_mapHeight\" style=\"width:calc(100% - 15px)\"></div>\n</div>","import { Component, OnInit, Input, OnDestroy } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { TimeRangeEntry } from \"@registry/model/registry\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { Subscription } from \"rxjs\";\nimport { LocationManagerState } from \"../location-manager/location-manager.component\";\nimport { GeometryService } from \"@registry/service\";\n\nexport interface DateBoundary { date: string; isStart: boolean; isEnd: boolean }\n\nexport interface TimelineEntry { width: number, x: number, period: TimeRangeEntry }\n\nexport interface DataTimeSpan {startDay: number, startDate: string, displayStartDate: string, endDay: number, endDate: string, displayEndDate: string, span: number}\n\n/*\n * This component is shared between:\n * -\n *\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\n@Component({\n    selector: \"stability-period\",\n    templateUrl: \"./stability-period.component.html\",\n    styleUrls: [\"./stability-period.component.css\"],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"1000ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"1000ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class StabilityPeriodComponent implements OnInit, OnDestroy {\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    @Input() context: string;\n\n    @Input() latestPeriodIsActive: boolean = false;\n\n    periods: TimeRangeEntry[] = [];\n\n    timelines: [TimelineEntry[]];\n\n    activeEntry: TimelineEntry = null;\n\n    forDateEntry: TimelineEntry = null;\n\n    private infinityDayPadding: number = 15;\n\n    dataTimeSpan: DataTimeSpan = null;\n\n    private subscription: Subscription;\n\n    private forDate: string;\n\n    _showHint: boolean = false;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set showHint(val: boolean) {\n        this._showHint = val;\n\n        setTimeout(() => {\n            this.showHint = false;\n        }, 10000);\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public dateService: DateService, private geomService: GeometryService) {}\n\n    ngOnInit(): void {\n        this.generate();\n\n        this.changeRequestEditor.onChangeSubject.subscribe((type: ChangeType) => {\n            if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n                this.generate();\n            }\n        });\n\n        this.subscription = this.geomService.stateChange$.subscribe(state => this.handleStateChange(state));\n\n        this.calculateActiveTimelineEntry();\n    }\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    handleStateChange(newState: LocationManagerState) {\n        if (this.forDate !== newState.date) {\n            this.forDate = newState.date;\n            this.calculateActiveTimelineEntry();\n        }\n    }\n\n    calculateActiveTimelineEntry() {\n        if (this.timelines != null) {\n            let timeline = this.timelines[0];\n            if (timeline && timeline.length > 1) {\n                if (this.forDate != null) {\n                    let index = timeline.findIndex(entry => this.dateService.between(this.forDate, entry.period.startDate, entry.period.endDate));\n\n                    if (index !== -1) {\n                        this.activeEntry = timeline[index];\n                    }\n                } else if (this.latestPeriodIsActive) {\n                    this.setActiveTimelineEntry(timeline[timeline.length - 1]);\n                }\n\n                if (this.forDate != null) {\n                    let forDateIndex = timeline.findIndex(entry => this.dateService.between(this.forDate, entry.period.startDate, entry.period.endDate));\n\n                    if (forDateIndex !== -1) {\n                        this.forDateEntry = timeline[forDateIndex];\n                    }\n                }\n            }\n        }\n    }\n\n    navigateRelative(amount: number) {\n        let timeline: TimelineEntry[] = this.timelines[0];\n        if (timeline == null || timeline.length === 0) { return; }\n\n        if (this.activeEntry == null) {\n            this.setActiveTimelineEntry(timeline[0]);\n            return;\n        }\n\n        let index = timeline.findIndex(entry => entry.period.startDate === this.activeEntry.period.startDate);\n\n        if (index !== -1) {\n            let nextIndex = index + amount;\n\n            if (nextIndex < 0) {\n                nextIndex = timeline.length - 1;\n            } else if (nextIndex >= timeline.length) {\n                nextIndex = 0;\n            }\n\n            this.setActiveTimelineEntry(timeline[nextIndex]);\n        }\n    }\n\n    setActiveTimelineEntry(entry: TimelineEntry) {\n        if (this.periods.length <= 1) {\n            entry = null;\n        }\n\n        if (this.activeEntry && entry && entry.period.startDate === this.activeEntry.period.startDate) {\n            entry = null;\n        }\n\n        this.activeEntry = entry;\n        this.geomService.setState({ date: entry == null ? null : entry.period.startDate }, false);\n    }\n\n    generate() {\n        this.generatePeriods();\n        this.generateTimelines();\n    }\n\n    calculateDataTimeSpan(): void {\n        let startDate: string = null;\n        let endDate: string = null;\n        let endDay: number = null;\n        let startDay: number = null;\n\n        if (this.periods.length > 0) {\n            startDate = this.periods[0].startDate;\n            endDate = this.periods[this.periods.length - 1].endDate;\n\n            startDay = this.dateService.getDateFromDateString(startDate).getTime() / (1000 * 60 * 60 * 24);\n\n            if (endDate === \"5000-12-31\") {\n                if (this.periods.length > 1) {\n                    endDay = this.dateService.getDateFromDateString(this.periods[this.periods.length - 1].startDate).getTime() / (1000 * 60 * 60 * 24);\n                    this.infinityDayPadding = (endDay - startDay) * 0.05;\n                    endDay = this.infinityDayPadding + endDay;\n                } else {\n                    endDay = startDay + this.infinityDayPadding;\n                }\n            } else {\n                endDay = this.dateService.getDateFromDateString(endDate).getTime() / (1000 * 60 * 60 * 24);\n            }\n        }\n\n        this.dataTimeSpan = { startDay: startDay, startDate: startDate, displayStartDate: this.dateService.formatDateForDisplay(startDate), endDay: endDay, endDate: endDate, displayEndDate: this.dateService.formatDateForDisplay(endDate), span: (endDay - startDay) };\n    }\n\n    generateTimelines() {\n        this.timelines = [] as any;\n\n        if (this.periods.length === 0) {\n            return;\n        } else if (this.periods.length === 1) {\n            this.setActiveTimelineEntry(null);\n        }\n\n        this.calculateDataTimeSpan();\n\n        let currentTimeline: any = [];\n        this.timelines.push(currentTimeline);\n        // let daysLeft = this.dataTimeSpan.span;\n\n        let len = this.periods.length;\n        for (let i = 0; i < len; ++i) {\n            let period = this.periods[i];\n\n            let start: Date = this.dateService.getDateFromDateString(period.startDate);\n            let end: Date = this.dateService.getDateFromDateString(period.endDate);\n\n            let startDay = start.getTime() / (1000 * 60 * 60 * 24);\n            let endDay = end.getTime() / (1000 * 60 * 60 * 24);\n            if (period.endDate === \"5000-12-31\") {\n                endDay = startDay + this.infinityDayPadding;\n            }\n\n            let daysInPeriod: number = (endDay - startDay);\n            /*\n            if (daysLeft - daysInPeriod < 0) {\n                let daysInFirstEntry = daysLeft;\n                let timelineEntry1: TimelineEntry = { width: (daysInFirstEntry / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry1);\n\n                currentTimeline = [];\n                this.timelines.push(currentTimeline);\n                daysLeft = this.dataTimeSpan.span;\n\n                let timelineEntry2: TimelineEntry = { width: ((daysInPeriod - daysInFirstEntry) / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry2);\n            } else {\n              */\n                let timelineEntry: TimelineEntry = { width: (daysInPeriod / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry);\n               /*\n                 daysLeft = daysLeft - daysInPeriod;\n                if (daysLeft === 0) {\n                    currentTimeline = [];\n                    this.timelines.push(currentTimeline);\n                    daysLeft = this.dataTimeSpan.span;\n                }\n            }\n            */\n        }\n\n        // console.log(this.timelines);\n    }\n\n    generatePeriods() {\n        let boundaries: DateBoundary[] = [];\n\n        // Create an array which contains all the unique start and end dates\n        let editors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] = this.changeRequestEditor.getEditors();\n        let len = editors.length;\n\n        for (let i = 0; i < len; ++i) {\n            if (editors[i] instanceof ChangeRequestChangeOverTimeAttributeEditor) {\n                let editor: ChangeRequestChangeOverTimeAttributeEditor = editors[i] as ChangeRequestChangeOverTimeAttributeEditor;\n                let values = editor.getEditors();\n\n                let valLen = values.length;\n                for (let j = 0; j < valLen; ++j) {\n                    let period: ValueOverTimeCREditor = values[j];\n\n                    if (period.startDate != null && period.endDate != null && !period.isDelete()) {\n                        let startIndex = boundaries.findIndex(boundary => period.startDate === boundary.date);\n                        if (startIndex !== -1) {\n                            boundaries[startIndex].isStart = true;\n                        } else {\n                            boundaries.push({ date: period.startDate, isStart: true, isEnd: false });\n                        }\n\n                        let endIndex = boundaries.findIndex(boundary => period.endDate === boundary.date);\n                        if (endIndex !== -1) {\n                            boundaries[endIndex].isEnd = true;\n                        } else {\n                            boundaries.push({ date: period.endDate, isStart: false, isEnd: true });\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sort the date boundaries\n        boundaries.sort(function(a, b) {\n            if (a.date == null || a.date === \"\") {\n                return 1;\n            } else if (b.date == null || b.date === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.date);\n            let next: any = new Date(b.date);\n            return first - next;\n        });\n\n        // Loop over the boundaries and create versions between all the boundaries, but only if there is data between them\n        this.periods = [];\n        let dlen = boundaries.length;\n        for (let i = 0; i < dlen; ++i) {\n            let current: DateBoundary = boundaries[i];\n            let next: DateBoundary = i + 1 > dlen ? null : boundaries[i + 1];\n\n            if (current.isStart && current.isEnd) {\n                this.periods.push({ startDate: current.date, endDate: current.date });\n            }\n            if (current.isEnd && (next != null && next.isStart && this.dateService.addDay(1, current.date) === next.date)) {\n                continue;\n            }\n\n            let startDate = (current.isEnd ? this.dateService.addDay(1, current.date) : current.date);\n\n            if (next != null && this.changeRequestEditor.existsAtDate(startDate)) {\n                let endDate = (!next.isStart ? next.date : this.dateService.addDay(-1, next.date));\n\n                this.periods.push({ startDate: startDate, endDate: endDate });\n            }\n        }\n\n        this.dateService.sort(this.periods);\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div *ngIf=\"dataTimeSpan\" style=\"margin-bottom:10px;\">\n    <span style=\"margin-left:20px;\">\n      <localize key=\"manage.versions.historyTitle\"></localize>\n      \n      <span>\n        <a *ngIf=\"activeEntry\" (click)=\"setActiveTimelineEntry(null)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewAll\"></localize>)</a>\n        <div [@fadeInOut] *ngIf=\"_showHint\" id=\"time-hint\">\n            <localize key=\"changeovertime.manageVersions.time.hint.message\"></localize>\n        </div>\n        \n        <a *ngIf=\"!activeEntry && forDate && context === 'LIST'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewListPeriod\"></localize>)</a>\n        <a *ngIf=\"!activeEntry && forDate && context === 'EXPLORER'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewExplorerPeriod\"></localize>)</a>\n        <span *ngIf=\"!activeEntry && !forDate\" class=\"view-all\">\n          (<localize key=\"manage.versions.history.viewingAll\"></localize>)\n        </span>\n      </span>\n\n    </span>\n    <span style=\"float:right;color:#6ba542;margin-right:20px;\">\n      <ng-container *ngIf=\"activeEntry\">\n\t\t      {{activeEntry.period.startDate}}\n\t\t      -\n\t\t      {{dateService.formatDateForDisplay(activeEntry.period.endDate)}}\n      </ng-container>\n      <ng-container *ngIf=\"!activeEntry\">\n          {{dataTimeSpan.displayStartDate}}\n          -\n          {{dataTimeSpan.displayEndDate}}\n      </ng-container>\n    </span>\n\t  \n    <div style=\"padding: 0 20px;\">\n        <div *ngFor=\"let timeline of timelines\" class=\"timeline\">\n\t      <a *ngFor=\"let entry of timeline\" class=\"timeline-entry\" [ngClass]=\"{'active-timeline-entry': this.activeEntry == null || (this.activeEntry != null && entry.period.startDate === this.activeEntry.period.startDate), 'not-clickable': periods.length <= 1}\" (click)=\"setActiveTimelineEntry(entry)\" [ngStyle]=\"{'width': entry.width + '%', 'left': entry.x + '%'}\">\n\t      </a>\n\t    </div>\n        \n        <div class=\"timeline-nav-btn-wrapper\">\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(-1)\" style=\"\"><i class=\"fa fa-chevron-left \"></i></a>\n<!--           </div> -->\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(1)\" style=\"\"><i class=\"fa fa-chevron-right \"></i></a> \n<!--           </div> -->\n        </div>\n    </div>\n\n<!-- \t  <div *ngIf=\"periods.length > 1\" class=\"navigation-controls\" style=\"padding-top:5px;\"> -->\n<!-- \t    <a (click)=\"navigateRelative(-1)\" style=\"float:left;\"><i class=\"fa fa-chevron-left\"></i></a> -->\n<!-- \t    <a (click)=\"navigateRelative(1)\" style=\"float:right;\"><i class=\"fa fa-chevron-right\"></i></a> -->\n<!-- \t  </div> -->\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\n\n@Component({\n    selector: \"standard-attribute-editor\",\n    templateUrl: \"./standard-attribute-editor.component.html\",\n    styleUrls: [\"./standard-attribute-editor.component.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class StandardAttributeEditorComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    message: string = null;\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObject: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    view: {\n        summaryKey: SummaryKey;\n        summaryKeyLocalized: string;\n        oldValue?: any;\n        value: any;\n        attributeCode: string;\n    };\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: StandardAttributeCRModel;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, null) as StandardAttributeCRModel;\n        this.calculateView();\n    }\n\n    ngAfterViewInit() {\n    }\n\n    calculateView(): void {\n        let diff = this.changeRequestAttributeEditor.diff;\n\n        if (diff != null) {\n            let newVal = diff.newValue == null ? null : JSON.parse(JSON.stringify(diff.newValue));\n            this.view = {\n                value: newVal,\n                summaryKey: SummaryKey.VALUE_CHANGE,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.VALUE_CHANGE),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n\n            if (diff.oldValue !== null && diff.oldValue !== undefined) {\n                this.view.oldValue = JSON.parse(JSON.stringify(diff.oldValue));\n            }\n        } else {\n            this.view = {\n                value: this.changeRequestAttributeEditor.value,\n                summaryKey: SummaryKey.UNMODIFIED,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.UNMODIFIED),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n        }\n    }\n\n    onValueChange(): void {\n        this.calculateView();\n    }\n\n    onApprove(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.PENDING).then(results => {\n            editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div @fadeInOut class=\"value-box\">\n    <div *ngIf=\"view\" class=\"value-box-wrapper\" [ngClass]=\"{'warning' : view.summaryKey && view.summaryKey !== 'UNMODIFIED'}\" >\n      <div *ngIf=\"view.summaryKey && view.summaryKey !== 'UNMODIFIED'\" class=\"value-box-indicator\">\n        {{view.summaryKeyLocalized}}\n      </div>\n      \n      <div class=\"inner-value\">\n        <div *ngIf=\"attributeType.type === 'boolean'\">\n          <div>\n\t          <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? view.value === false : (view.value === true)\" [value]=\"view.attributeCode === 'invalid' ? false : true\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-true\" name=\"mod-{{geoObjectType.code}}-true\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize></span>\n\t          </label> \n\t          <label class=\"radio radio-inline\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? changeRequestAttributeEditor.value === true : changeRequestAttributeEditor.value === false\" [value]=\"view.attributeCode === 'invalid' ? true : false\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-false\" name=\"mod-{{geoObjectType.code}}-false\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize></span>\n\t          </label>\n\t        </div>\n        </div>\n        \n        <div *ngIf=\"(view.oldValue !== null && view.oldValue !== undefined) && !isNew\">\n          <p style=\"color: var(--theme-text-dark);\" class=\"warning-text display-current-value\">\n            <localize key=\"change.request.changed.value.prefix\"></localize>&nbsp;\n            \n            <span *ngIf=\"attributeType.type === 'boolean'\">\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === false) : (view.oldValue === true)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize>\n\t            </span>\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === true) : (view.oldValue === false)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize>\n\t            </span>\n            </span>\n            \n            <span *ngIf=\"attributeType.type !== 'boolean'\">\n                {{ view.oldValue }}\n            </span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  <!-- TODO : This code copy/pasted from manage-versions.component.html -->\n  <div *ngIf=\"changeRequest && !changeRequest.isNew\" class=\"cr-maintainer-options\">\n    <div *ngIf=\"changeRequest.approvalStatus === 'PENDING' && changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.editAction && changeRequestAttributeEditor.diff\">\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n        <localize key=\"change.request.accept.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n        <localize key=\"change.request.reject.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n        <localize key=\"change.request.pending.btn\"></localize>\n      </button>\n    </div>              \n    <div *ngIf=\"changeRequest.approvalStatus !== 'PENDING'\">\n      <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n          <localize key=\"change.request.status.accepted\"></localize>\n      </strong>\n      <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n          <localize key=\"change.request.status.rejected\"></localize>\n      </strong>\n    </div>\n  </div>\n</div>\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"geoObjectAttributeExcludesFilter\",\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"change-request-page\",\n    templateUrl: \"./change-request-page.component.html\",\n    styleUrls: [\"./change-request-page.css\"]\n})\nexport class ChangeRequestPageComponent implements OnInit {\n\n  pageTitle: string;\n  bsModalRef: BsModalRef;\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n  isContributorOnly: boolean;\n\n  urlSubscriber: any;\n\n  highlightOid: string;\n\n  constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService, private route: ActivatedRoute) {\n      this.isAdmin = service.isAdmin();\n      this.isMaintainer = this.isAdmin || service.isMaintainer();\n      this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n      this.isContributorOnly = service.isContributerOnly();\n  }\n\n  ngOnInit(): void {\n      this.urlSubscriber = this.route.params.subscribe(params => {\n          this.highlightOid = params[\"oid\"];\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.urlSubscriber.unsubscribe();\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>{{pageTitle}}</h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <request-table [toggleId]=\"highlightOid\"></request-table>\n            \n            <submit-change-request *ngIf=\"isContributorOnly\"></submit-change-request>\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { interval } from \"rxjs\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob, ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"scheduled-jobs\",\n    templateUrl: \"./scheduled-jobs.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class ScheduledJobsComponent implements OnInit {\n\n    message: string = null;\n\n    activeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    isViewAllOpen: boolean = false;\n\n    constructor(public service: RegistryService,\n        private modalService: BsModalService,\n        private router: Router,\n        private localizeService: LocalizationService,\n        private ioService: IOService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.onActiveJobsPageChange(1);\n\n        this.pollingData = interval(1000).subscribe(() => {\n            this.activeTimeCounter++;\n            this.completeTimeCounter++;\n\n            if (this.isViewAllOpen) {\n                if (this.activeTimeCounter >= 4) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n                if (this.completeTimeCounter >= 7) {\n                    this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n                    this.completeTimeCounter = 0;\n                }\n            } else {\n                if (this.activeTimeCounter >= 2) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n        if (job.status === \"FEEDBACK\") {\n            return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PageResult<any>): void {\n        page.resultSet.forEach(job => {\n            let stepConfig = {\n                steps: [\n                    { label: this.localizeService.decode(\"scheduler.step.fileImport\"), status: \"COMPLETE\" },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.staging\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.validation\"),\n                        status: job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.databaseImport\"),\n                        status: job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n\n            job = job as ScheduledJobOverview;\n            job.stepConfig = stepConfig;\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    onViewAllCompleteJobs(): void {\n        this.onCompleteJobsPageChange(1);\n\n        this.isViewAllOpen = true;\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-history/\", code]);\n    }\n\n    onActiveJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCompleteJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(job.configuration).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.resultSet | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    <span class=\"date-string-display\">\n                                                      <date-text [date]=\"job.createDate\"></date-text>\n                                                    </span>\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.resultSet | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                              <span class=\"date-string-display\">\n                                <date-text [date]=\"job.createDate\"></date-text>\n                              </span>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <span class=\"date-string-display\">\n                              <date-text [date]=\"job.lastUpdateDate\"></date-text>\n                            </span>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from \"./conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./conflict-widgets/reupload-modal.component\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { Subscription } from \"rxjs\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./job.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class JobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n\n    page: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"IMPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n        for (let i = 0; i < this.page.resultSet.length; ++i) {\n            let pageConflict = this.page.resultSet[i];\n\n            if (pageConflict.id === problem.id) {\n                this.page.resultSet.splice(i, 1);\n            }\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (probType === \"net.geoprism.registry.geoobject.ImportOutOfRangeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.importOutOfRange\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: any): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n        this.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe(data => {\n            if (data.action === \"RESOLVED\") {\n                this.onProblemResolved(data.data);\n            }\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n            this.job = response;\n\n            if (this.job.stage === \"IMPORT_RESOLVE\") {\n                this.page = this.job.importErrors;\n            } else if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.page = this.job.problems;\n\n                for (let i = 0; i < this.page.resultSet.length; ++i) {\n                    let problem = this.page.resultSet[i];\n\n                    if (problem.type === \"RowValidationProblem\") {\n                        this.hasRowValidationProblem = true;\n                    }\n                }\n            }\n\n            if (response.exception) {\n                this.error(response.exception);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.resultSet.forEach(row => {\n            row.selected = this.allSelected;\n        });\n    }\n\n    onReuploadAndResume(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.job = this.job;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.router.navigate([\"/registry/scheduled-jobs\"]);\n        });\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n        if (this.page.resultSet.length === 0) {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n            } else {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n            }\n\n            this.bsModalRef.content.type = ModalTypes.danger;\n\n            this.bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.resolveScheduledJob(historyId).then(response => {\n                    this.router.navigate([\"/registry/scheduled-jobs\"]);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            });\n        }\n    }\n\n    onCancelScheduledJob(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(this.job.configuration).then(response => {\n                // this.bsModalRef.hide()\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              <span class=\"date-string-display\">\n                                <date-text [date]=\"job.createDate\"></date-text>\n                              </span>\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"job-conflict-modal\",\n    templateUrl: \"./job-conflict-modal.component.html\",\n    styleUrls: []\n})\nexport class JobConflictModalComponent implements OnInit {\n\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef) {\n        this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onProblemResolvedListener(problem: any): void {\n        this.onConflictAction.next({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJob, ImportError } from \"@registry/model/registry\";\n\nimport { GeoObjectEditorComponent } from \"../../geoobject-editor/geoobject-editor.component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"import-problem-widget\",\n    templateUrl: \"./import-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ImportProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId(null);\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolved.emit(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>:\n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div *ngIf=\"problem.object != null && problem.object.geoObject != null\" style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"parent-reference-problem-widget\",\n    templateUrl: \"./parent-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return new Observable((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.code, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"term-reference-problem-widget\",\n    templateUrl: \"./term-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(conflict: any): Observable<any> {\n        return Observable.create((observer: any) => {\n            this.iService.getTermSuggestions(conflict.mdAttributeId, this.searchLabel, \"20\").then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.termId = e.item.value;\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            classifierId: this.termId,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"row-validation-problem-widget\",\n    templateUrl: \"./row-validation-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class RowValidationProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return new Observable((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.code, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">{{errorMessage}}</div>\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <div>{{message}}</div>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\n\nimport { TaskService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"task-viewer\",\n    templateUrl: \"./task-viewer.component.html\",\n    styleUrls: [\"./task-viewer.component.css\"],\n    providers: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completedTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    isViewAllOpen: boolean = false;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private taskService: TaskService, private localizeService: LocalizationService, private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onInProgressTasksPageChange(1);\n    }\n\n    onInProgressTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, \"UNRESOLVED\").then(page => {\n            this.inProgressTasks = page;\n        });\n    }\n\n    onCompletedTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, \"RESOLVED\").then(page => {\n            this.completedTasks = page;\n        });\n    }\n\n    onCompleteTask(task: any): void {\n        // this.isViewAllOpen = true;\n\n        this.taskService.completeTask(task.id).then(() => {\n            const index = this.inProgressTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.inProgressTasks.resultSet.splice(index, 1);\n            }\n\n            if(this.isViewAllOpen) {\n                this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            }\n        });\n    }\n\n    onMoveTaskToInProgress(task: any): void {\n        this.isViewAllOpen = true;\n\n        this.taskService.setTaskStatus(task.id, \"UNRESOLVED\").then(() => {\n            const index = this.completedTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.completedTasks.resultSet.splice(index, 1);\n            }\n\n            this.completedTasks.resultSet.splice(index, 1);\n            this.inProgressTasks.resultSet.push(task);\n        });\n    }\n\n    onToggleCompletedTasks(): void {\n        this.isViewAllOpen = !this.isViewAllOpen;\n\n        if (this.isViewAllOpen) {\n            this.onCompletedTasksPageChange(1);\n        }\n    }\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n\n    <div class=\"row\" *ngIf=\"inProgressTasks.resultSet.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n          <div\n            *ngFor=\"let task of inProgressTasks.resultSet | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    <date-text [date]=\"task.createDate\"></date-text>\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked\n                      id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\"\n                      (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\"\n                      name=\"{{task.id}}-completed\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"inProgressTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <h2 class=\"col-md-9\">\n        <localize key=\"tasks.completedTasksTitle\"></localize>\n      </h2>\n      <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onToggleCompletedTasks()\"\n        class=\"btn btn-default pull-right\" role=\"button\">\n        <localize *ngIf=\"!isViewAllOpen\" key=\"tasks.viewCompletedTasksButton\"></localize>\n        <localize *ngIf=\"isViewAllOpen\" key=\"tasks.hideCompletedTasksButton\"></localize>\n      </button>\n    </div>\n    <hr>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.resultSet.length > 0\">\n          <div\n            *ngFor=\"let task of completedTasks.resultSet | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\" style=\"margin-right:30px;\">\n                    <date-text [date]=\"task.createDate\"></date-text>\n                  </span>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.completeDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    <date-text [date]=\"task.completedDate\"></date-text>\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\"\n                      (click)=\"onMoveTaskToInProgress(task)\" [id]=\"task.id+ '-inProgress'\" [name]=\"task.id+ '-inProgress'\"\n                      value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\"\n                    [id]=\"task.id+ '-completed'\" [name]=\"task.id+ '-completed'\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.resultSet.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\">\n            <localize key=\"tasks.no.completed.tasks.message\"></localize>\n          </p>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from \"@angular/core\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n    selector: \"fhir-export-synchronization-config\",\n    templateUrl: \"./fhir-export-synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class FhirExportSynchronizationConfigComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  subscription: Subscription = null;\n  versions: { [key: string]: ListTypeVersion[] } = {};\n  implementations: { className: string, label: string }[] = [];\n  lists: { label: string, oid: string }[] = [];\n\n  constructor(private service: SynchronizationConfigService, private rService: ListTypeService) { }\n\n  ngOnInit(): void {\n      this.reset();\n\n      this.subscription = this.fieldChange.subscribe((field: string) => {\n          if (field === \"organization\" || field === \"system\") {\n              this.reset();\n          }\n      });\n\n      this.service.getFhirExportImplementations().then(implementations => {\n          this.implementations = implementations;\n      });\n  }\n\n  ngOnDestroy(): void {\n      if (this.subscription != null) {\n          this.subscription.unsubscribe();\n      }\n  }\n\n  reset(): void {\n      if (this.config.configuration == null) {\n          this.config.configuration = {\n              levels: [],\n              hierarchy: null\n          };\n      }\n\n      if (this.config.configuration.levels != null) {\n          for (let i = 0; i < this.config.configuration.levels.length; ++i) {\n              let level = this.config.configuration.levels[i];\n\n        // Get version options\n              this.onSelectMasterList(level);\n          }\n      } else {\n          this.config.configuration.levels = [];\n      }\n\n    // Get\n      this.rService.getAllLists().then(response => {\n          this.lists = response;\n      });\n  }\n\n  onSelectMasterList(level: FhirSyncLevel): void {\n      if (level.masterListId != null && level.masterListId.length > 0) {\n          this.rService.getPublicVersions(level.masterListId).then(list => {\n              this.versions[level.masterListId] = list;\n          });\n      } else {\n          this.versions[level.masterListId] = null;\n      }\n  }\n\n  addLevel(): void {\n      let level = {\n          masterListId: null,\n          versionId: null,\n          level: this.config.configuration.levels.length\n      };\n\n      this.config.configuration.levels.push(level);\n  }\n\n  removeLevel(i: number): void {\n      this.config.configuration.levels.splice(i, 1);\n\n    // Reorder the level\n      if (this.config.configuration != null && this.config.configuration.levels != null) {\n          for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n              this.config.configuration.levels[i].level = i;\n          }\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.units\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 3%\">\n                            <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.field\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.forDate\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"synchronization.config.implementation\"></localize>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let level of config.configuration.levels; let i = index;\"\n                        [style.background-color]=\"'#F7F7F7'\">\n                        <td style=\"width: 3%\">\n                            <label style=\"padding: 10px 0; margin: 0;\">\n                                <localize key=\"sync.level.label\"></localize> {{level.level + 1}}\n                            </label>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.masterListId\" (change)=\"onSelectMasterList(level)\"\n                                [name]=\"'masterList' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let list of lists\" [value]=\"list.oid\">{{list.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select *ngIf=\"versions[level.masterListId] != null\" [(ngModel)]=\"level.versionId\"\n                                [name]=\"'version' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let version of versions[level.masterListId]\" [value]=\"version.oid\">\n                                    {{version.forDate}} (<localize key=\"list.type.version\"></localize> {{version.versionNumber}})\n                                </option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.implementation\" [name]=\"'implementation' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let implementation of implementations\"\n                                    [value]=\"implementation.className\">{{implementation.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <div>\n                                <a style=\"padding: 10px;\" (click)=\"removeLevel(i)\"\n                                    [title]=\"'button.delete.helptext' | localize\">\n                                    <i class=\"fa fa-trash-o ico-remove\"></i> <label\n                                        style=\"cursor: pointer; margin-left: 9px;\">\n                                        <localize key=\"sync.level.delete\"></localize>\n                                    </label>\n                                </a>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"button-column\"><a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\"\n                                (click)=\"addLevel()\"></a></td>\n                    </tr>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { AttributeConfigInfo, DHIS2AttributeMapping, SyncLevel } from \"@registry/model/sync\";\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nlet DEFAULT_MAPPING_STRATEGY = \"net.geoprism.registry.etl.DHIS2AttributeMapping\";\nlet END_DATE_MAPPING = \"net.geoprism.registry.etl.DHIS2EndDateAttributeMapping\";\nlet START_DATE_MAPPING = \"net.geoprism.registry.etl.DHIS2StartDateAttributeMapping\";\n\nexport interface GOTAttributeConfig {\n  geoObjectTypeCode?: string;\n  mappings: DHIS2AttributeMapping[];\n  attrConfigInfos: AttributeConfigInfo[];\n}\nexport interface LevelRow {\n  isAttributeEditor: boolean;\n\n  level?: SyncLevel;\n  levelNum?: number;\n\n  attrCfg?: GOTAttributeConfig;\n}\n\n@Component({\n\n    selector: \"dhis2-synchronization-config\",\n    templateUrl: \"./dhis2-synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class Dhis2SynchronizationConfigComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() cOrg: OrgSyncInfo = null;\n\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  organizations: OrgSyncInfo[] = [];\n\n  types: GeoObjectType[] = [];\n\n  levelRows: LevelRow[] = [];\n\n  orgUnitGroups: any[] = [];\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService, public localizationService: LocalizationService) { }\n\n  ngOnInit(): void {\n    // Get the types\n    // this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n    //   this.types = types;\n    // });\n\n      if (this.config.configuration == null) {\n          this.config.configuration = {\n              levels: [],\n              hierarchyCode: null,\n              syncNonExistent: false,\n              preferredLocale: \"defaultLocale\"\n          };\n      }\n\n      this.levelRows = [];\n\n      if (this.config.configuration.levels != null) {\n          for (let i = 0; i < this.config.configuration.levels.length; ++i) {\n              let level = this.config.configuration.levels[i];\n\n              let levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n              this.levelRows.push(levelRow);\n          }\n      } else {\n          this.config.configuration.levels = [];\n      }\n\n      if (this.config.configuration.preferredLocale == null) {\n          this.config.configuration.preferredLocale = \"defaultLocale\";\n      }\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      this.fieldChange.subscribe(() => {\n          this.clearMappingData();\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.fieldChange.unsubscribe();\n  }\n\n  onChangeHierarchy(): void {\n      this.clearMappingData();\n  }\n\n  stringify(obj: any): string {\n      return obj == null ? \"null\" : JSON.stringify(obj);\n  }\n\n  buildDefaultMappings(): DHIS2AttributeMapping[] {\n      return [\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"name\",\n              dhis2AttrName: \"name\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"shortName\",\n              dhis2AttrName: \"shortName\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              cgrAttrName: \"code\",\n              dhis2Id: \"code\",\n              externalId: null,\n              dhis2AttrName: \"code\"\n          },\n          {\n              attributeMappingStrategy: START_DATE_MAPPING,\n              cgrAttrName: \"exists\",\n              externalId: null,\n              dhis2Id: \"openingDate\",\n              dhis2AttrName: \"openingDate\"\n          },\n          {\n              attributeMappingStrategy: END_DATE_MAPPING,\n              cgrAttrName: \"exists\",\n              externalId: null,\n              dhis2Id: \"closedDate\",\n              dhis2AttrName: \"closedDate\"\n          }\n          /*\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"created\",\n              dhis2AttrName: \"created\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"lastUpdateDate\",\n              externalId: null,\n              dhis2Id: \"lastUpdated\",\n              dhis2AttrName: \"lastUpdated\"\n          },\n          */\n      ];\n  }\n\n  clearMappingData(): void {\n      this.types = [];\n      this.levelRows = [];\n      this.config.configuration[\"levels\"] = [];\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      let lvl = {\n          type: null,\n          geoObjectType: null,\n          level: 0,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      this.config.configuration[\"levels\"] = [lvl];\n      this.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n  }\n\n  onSelectLevelType(levelRow: LevelRow): void {\n      if (levelRow.level.type === \"RELATIONSHIPS\") {\n          if (levelRow.attrCfg) {\n              levelRow.attrCfg.mappings = [];\n          }\n          levelRow.level.mappings = [];\n\n          let editorIndex = this.getEditorIndex();\n          if (editorIndex !== -1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n      } else {\n          if (levelRow.attrCfg && levelRow.attrCfg.mappings.length === 0) {\n              levelRow.attrCfg.mappings = this.buildDefaultMappings();\n              levelRow.level.mappings = levelRow.attrCfg.mappings;\n\n              let len = levelRow.level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = levelRow.level.mappings[i];\n\n                  levelRow.attrCfg.attrConfigInfos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n          }\n      }\n  }\n\n  deleteMapping(levelRow: LevelRow, index: number): void {\n      levelRow.attrCfg.mappings.splice(index, 1);\n  }\n\n  addNewMapping(levelRow: LevelRow): void {\n      levelRow.attrCfg.mappings.push({\n          attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n          cgrAttrName: null,\n          dhis2AttrName: null,\n          externalId: null,\n          dhis2Id: null,\n          terms: []\n      });\n  }\n\n  addLevel(): void {\n      let lvl = {\n          type: null,\n          geoObjectType: null,\n          level: this.config.configuration.levels.length,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      let len = this.config.configuration[\"levels\"].push(lvl);\n      this.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n  }\n\n  removeLevel(levelNum: number, levelRowIndex: number): void {\n      if (levelNum < this.config.configuration[\"levels\"].length) {\n          let editorIndex = this.getEditorIndex();\n          if (editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          this.levelRows.splice(levelRowIndex, 1);\n\n          let newLevelNum = 0;\n          for (let i = 0; i < this.levelRows.length; ++i) {\n              let levelRow: LevelRow = this.levelRows[i];\n\n              levelRow.levelNum = newLevelNum;\n\n              if (!levelRow.isAttributeEditor) {\n                  newLevelNum = newLevelNum + 1;\n              }\n          }\n\n          this.config.configuration[\"levels\"].splice(levelNum, 1);\n      }\n  }\n\n  getEditorIndex(): number {\n      for (let i = 0; i < this.levelRows.length; ++i) {\n          let levelRow = this.levelRows[i];\n\n          if (levelRow.isAttributeEditor) {\n              return i;\n          }\n      }\n\n      return -1;\n  }\n\n  configureAttributes(levelRow: any): void {\n      let editorIndex = this.getEditorIndex();\n\n      if (editorIndex !== -1) {\n          this.levelRows.splice(editorIndex, 1);\n\n          if (editorIndex === levelRow.levelNum + 1) {\n              return;\n          }\n      }\n\n      this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n  }\n\n  getTermOptions(info: AttributeConfigInfo, dhis2Id: string) {\n      let strategy = info.attributeMappingStrategies[0];\n\n      for (let i = 0; i < strategy.dhis2Attrs.length; ++i) {\n          let dhis2Attr = strategy.dhis2Attrs[i];\n\n          if (dhis2Attr.dhis2Id === dhis2Id) {\n              return dhis2Attr.options;\n          }\n      }\n  }\n\n  onChangeDHIS2Attr(mapping: DHIS2AttributeMapping) {\n      if (mapping.dhis2Id == null || mapping.dhis2Id === \"\") {\n          if (mapping.terms != null) {\n              mapping.terms = {};\n          }\n\n          mapping.dhis2AttrName = null;\n\n          return;\n      }\n\n      mapping.terms = {};\n\n      let strategy = this.getMappingStrategy(mapping);\n\n      let len = strategy.dhis2Attrs.length;\n      for (let i = 0; i < len; ++i) {\n          if (strategy.dhis2Attrs[i].dhis2Id === mapping.dhis2Id) {\n              if (strategy.dhis2Attrs[i].dhis2Id !== strategy.dhis2Attrs[i].name) {\n                  mapping.externalId = strategy.dhis2Attrs[i].dhis2Id;\n              } else {\n                  mapping.externalId = null;\n              }\n              mapping.dhis2AttrName = strategy.dhis2Attrs[i].name;\n          }\n      }\n  }\n\n  onSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n      if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n          let levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n          levelRow.attrCfg = null;\n          levelRow.level.mappings = [];\n\n          let editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          return;\n      }\n\n      let attrCfg = this.levelRows[levelRowIndex].attrCfg;\n      if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n          // Resume an editing session on attributes that we fetched previously\n\n          let editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex !== levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n\n              if (editorIndex < levelRowIndex) {\n                  levelRowIndex = levelRowIndex - 1;\n              }\n          }\n\n          this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n      } else {\n          this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((infos: AttributeConfigInfo[]) => {\n              let editorIndex = this.getEditorIndex();\n              let levelRow: LevelRow = this.levelRows[levelRowIndex];\n              let level = levelRow.level;\n\n              if (level.mappings == null) {\n                  level.mappings = [];\n              }\n\n              if (level.mappings.length === 0 || isDifferentGot) {\n                  level.mappings = this.buildDefaultMappings();\n              }\n\n              let len = level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = level.mappings[i];\n\n                  infos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n\n                  // mapping.dhis2Id is a derived field which only exists on the front-end. This is necessary because of the way DHIS2 separates built-in attributes from custom attributes.\n                  // Only custom attributes actually have ids. Standard attributes are referenced via their name.\n                  level.mappings.forEach((levelMapping) => {\n                      if (levelMapping.dhis2AttrName && levelMapping.dhis2AttrName === mapping.dhis2AttrName) {\n                          if (levelMapping.externalId) {\n                              mapping.dhis2Id = levelMapping.externalId;\n                          } else if (levelMapping.dhis2AttrName) {\n                              mapping.dhis2Id = levelMapping.dhis2AttrName;\n                          }\n                      }\n                  });\n              }\n\n              levelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, mappings: level.mappings, attrConfigInfos: infos };\n\n              if (editorIndex !== -1 && (editorIndex === levelRowIndex + 1 || infos.length > 0)) {\n                  this.levelRows.splice(editorIndex, 1);\n\n                  if (editorIndex < levelRowIndex) {\n                      levelRowIndex = levelRowIndex - 1;\n                  }\n              }\n\n              if (!isDifferentGot) {\n                  this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: levelRow.attrCfg, level: levelRow.level, levelNum: levelRow.levelNum });\n              }\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  strategyHasTerms(mapping: DHIS2AttributeMapping) {\n      let strategy = this.getMappingStrategy(mapping);\n\n      if (strategy != null) {\n          return strategy.terms != null;\n      }\n  }\n\n  getMappingStrategy(mapping: DHIS2AttributeMapping) {\n      if (mapping.info == null) { return null; }\n      if (mapping.info.attributeMappingStrategies.length === 1) {\n          return mapping.info.attributeMappingStrategies[0];\n      }\n\n      for (let i = 0; i < mapping.info.attributeMappingStrategies.length; ++i) {\n          let strategy = mapping.info.attributeMappingStrategies[i];\n\n          if (strategy.type === mapping.attributeMappingStrategy) {\n              return strategy;\n          }\n      }\n\n      return null;\n  }\n\n  mapCgrAttr(info: AttributeConfigInfo, mapping: DHIS2AttributeMapping) {\n      if (info == null) {\n          mapping.cgrAttrName = null;\n          mapping.info = null;\n          mapping.dhis2AttrName = null;\n          mapping.externalId = null;\n          mapping.terms = null;\n          mapping.attributeMappingStrategy = null;\n          return;\n      }\n\n      mapping.cgrAttrName = info.cgrAttr.name;\n      mapping.info = info;\n      mapping.dhis2AttrName = null;\n      mapping.externalId = null;\n      mapping.dhis2Id = null;\n      mapping.terms = {};\n\n      if (mapping.info.attributeMappingStrategies.length > 0) {\n          mapping.attributeMappingStrategy = mapping.info.attributeMappingStrategies[0].type;\n      }\n  }\n\n  onChangeMappingStrategy(mapping: DHIS2AttributeMapping): void {\n      mapping.externalId = null;\n\n      for (const key in mapping.terms) {\n          if (Object.prototype.hasOwnProperty.call(mapping.terms, key)) {\n              mapping.terms[key] = null;\n          }\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.onError.emit(err);\n  }\n\n}\n","      <div>\n        <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"select\">\n              <select type=\"text\" [(ngModel)]=\"config.configuration.hierarchyCode\" name=\"hierarchy\" (change)='onChangeHierarchy()' [disabled]=\"config.oid != null\" required>\n                <option></option>\n                <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n              </select>\n            </span>\n          </div>\n        </div>\n        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n\t          <label><localize key=\"sync.nonExistent\"></localize></label>\n          </div>\n          <div class=\"holder\" style=\"margin-top:9px;\">\n            <boolean-field [(value)]=\"config.configuration.syncNonExistent\"></boolean-field>\n          </div>\n        </div>\n        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\" [title]=\"'sync.preferredLocale.tooltip' | localize\">\n            <label><localize key=\"sync.preferredLocale\"></localize></label>\n          </div>\n          <div class=\"holder\" style=\"margin-top:9px;\">\n            <select type=\"text\" [(ngModel)]=\"config.configuration.preferredLocale\" name=\"preferredLocale\" required>\n              <option *ngFor=\"let locale of localizationService.getLocales()\" [value]=\"locale.toString\">{{locale.label.localizedValue}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"config.configuration.hierarchyCode != null\" class=\"row-holder\" >\n      \n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.units\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"list-table-wrapper\">\n              <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                  <tr>\n                    <th style=\"width:3%\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                    <th style=\"width:17%\">\n                      <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                    </th>\n                    <th style=\"width:25%; text-align: center;\">\n                      <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                    <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" (change)=\"onSelectLevelType(levelRow)\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                        <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                        <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                         <option value=\"NONE\"><localize key=\"synchronization.config.none\"></localize></option>\n                      </select>\n                    </td>\n                    <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                        <option></option>\n                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <div>\n                        <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n                          <i class=\"fa fa-trash-o ico-remove\"></i>\n                          <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n                        </a> \n                      </div>\n                      <div>\n                        <a *ngIf=\"levelRow.level.geoObjectType && (levelRow.level.type === 'ORG_UNITS' || levelRow.level.type === 'ALL')\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                          <i class=\"fa fa-edit\"></i>\n                          <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.attributes.editButton\"></localize></label>\n                        </a> \n                      </div>\n                    </td>\n                    <td colspan=\"5\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                      <h4><localize key=\"sync.attr.attributes.title\"></localize></h4>\n                      <table class=\"table table-bordered table-striped\" style=\"margin-left:80px; width: calc(100% - 80px)\">\n\n                        <colgroup>\n                          <col width=\"5%\">\n                          <col width=\"95%\">\n                        </colgroup>\n                        <tbody>\n                          <tr *ngFor=\"let mapping of levelRow.attrCfg.mappings; let mappingIndex = index;\">\n                            <td colspan=\"2\" class=\"row-holder\">\n                              <table style=\"width:80%; margin-top:15px; margin-bottom: 10px;\">\n                                <thead>\n                                <tr>\n                                  <th style=\"width:5%\"></th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term' && mapping.info.attributeMappingStrategies.length > 1\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\">\n                                      <localize *ngIf=\"!strategyHasTerms(mapping)\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                <tr>\n                                  <td style=\"width:5%\">\n                                    <i (click)=\"deleteMapping(levelRow, mappingIndex)\" class=\"fa fa-times\"></i>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <select style=\"width:95%\" [(ngModel)]=\"mapping.cgrAttrName\" (change)=\"mapCgrAttr($event.target.selectedIndex == 0 ? null : levelRow.attrCfg.attrConfigInfos[$event.target.selectedIndex-1], mapping)\" [name]=\"'sourceAttrSelect' + i + '-' + mappingIndex + (mapping.cgrAttrName ? mapping.cgrAttrName : '')\">\n                                      <option [ngValue]=\"null\"></option>\n                                      <option *ngFor=\"let info of levelRow.attrCfg.attrConfigInfos\" [ngValue]=\"info.cgrAttr.name\">\n                                        <label style=\"color:#999;\">{{info.cgrAttr.label}}</label>\n                                      </option>\n                                    </select>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && (mapping.info.cgrAttr.type === 'term' || mapping.info.attributeMappingStrategies.length <= 1)\" style=\"color:#999;\">{{mapping.info.cgrAttr.typeLabel}}</label>\n                                    <select *ngIf=\"mapping.info && mapping.info.cgrAttr.type !== 'term' && mapping.info.attributeMappingStrategies.length > 1\" style=\"width:95%\" [(ngModel)]=\"mapping.attributeMappingStrategy\" (change)=\"onChangeMappingStrategy(mapping)\" [name]=\"'mappingStrategy' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"strategy.type\" *ngFor=\"let strategy of mapping.info.attributeMappingStrategies\">\n                                        {{strategy.label}}\n                                      </option>\n                                    </select>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term' && mapping.info.attributeMappingStrategies.length > 1\" style=\"margin-right:20px; width:23%\">\n                                    <select style=\"width:95%\" [(ngModel)]=\"mapping.attributeMappingStrategy\" (change)=\"onChangeMappingStrategy(mapping)\" [name]=\"'mappingStrategy' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"strategy.type\" *ngFor=\"let strategy of mapping.info.attributeMappingStrategies\">\n                                        {{strategy.label}}\n                                      </option>\n                                    </select>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && (mapping.info.attributeMappingStrategies.length <= 1 || mapping.info.cgrAttr.type !== 'term') && mapping.info.cgrAttr.name\" style=\"float:right; margin-right:20px; width:23%\">\n                                    <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n                                  </td>\n                                  <td style=\"width:23%\" *ngIf=\"getMappingStrategy(mapping)\">\n                                    <select *ngIf=\"getMappingStrategy(mapping).dhis2Attrs.length > 0 && !strategyHasTerms(mapping)\" [(ngModel)]=\"mapping.dhis2Id\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeDHIS2Attr(mapping)\">\n                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                      <option [ngValue]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of getMappingStrategy(mapping).dhis2Attrs\">\n                                        {{dhis2Attr.name}}\n                                      </option>\n                                    </select>\n                                    <label *ngIf=\"getMappingStrategy(mapping).dhis2Attrs.length == 0 && !strategyHasTerms(mapping)\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n                                  </td>\n                                </tr>\n                              </tbody>\n                            </table>\n                            <div *ngIf=\"strategyHasTerms(mapping)\">\n                              <table *ngFor=\"let term of getMappingStrategy(mapping).terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n                                <thead>\n                                  <tr>\n                                    <th style=\"width:25%\">\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <!-- To -->\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label>\n                                        <localize *ngIf=\"getMappingStrategy(mapping).type !== 'net.geoprism.registry.etl.DHIS2OrgUnitAttributeMapping'\" key=\"sync.attr.term.dhis2Option\"></localize>\n                                        <localize *ngIf=\"getMappingStrategy(mapping).type === 'net.geoprism.registry.etl.DHIS2OrgUnitAttributeMapping'\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n                                      </label>\n                                    </th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <tr>\n                                    <td></td>\n                                    <td><label style=\"color:#999;\">{{term.label}}</label></td>\n                                    <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n                                    <td>\n                                      <select *ngIf=\"getMappingStrategy(mapping).type !== 'net.geoprism.registry.etl.DHIS2OrgUnitAttributeMapping'\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let option of getTermOptions(mapping.info, mapping.externalId)\" [value]=\"option.code\">\n                                          {{option.name}}\n                                        </option>\n                                      </select>\n                                      <select *ngIf=\"getMappingStrategy(mapping).type === 'net.geoprism.registry.etl.DHIS2OrgUnitAttributeMapping'\" type=\"text\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                                      </select>\n                                    </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td class=\"button-column\">\n                            <a class=\"fa fa-plus\" (click)=\"addNewMapping(levelRow)\" [title]=\"'sync.attr.attributes.add.tooltip' | localize\"></a>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>         \n        </div>\n      </div>\n    </div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { SynchronizationConfigModalComponent } from \"./synchronization-config-modal.component\";\n\n@Component({\n    selector: \"synchronization-config-manager\",\n    templateUrl: \"./synchronization-config-manager.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\n    message: string = null;\n\n    page: PageResult<SynchronizationConfig> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 20\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.service.getPage(pageNumber, this.page.pageSize).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    create(): void {\n        this.service.edit(null).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(null, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onEdit(config: SynchronizationConfig): void {\n        this.service.edit(config.oid).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(response.config, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onRemove(config: SynchronizationConfig): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + config.label.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(config.oid).then(() => {\n                this.onPageChange(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(config: SynchronizationConfig): void {\n        this.router.navigate([\"/registry/synchronization-config/\", config.oid]);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { SynchronizationConfig, OrgSyncInfo } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\n\n@Component({\n    selector: \"synchronization-config-modal\",\n    templateUrl: \"./synchronization-config-modal.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  config: SynchronizationConfig = {\n      organization: null,\n      system: null,\n      hierarchy: null,\n      isImport: false,\n      label: this.lService.create(),\n      configuration: {}\n  };\n\n  organizations: OrgSyncInfo[] = [];\n\n  cOrg: OrgSyncInfo = null;\n  cSystem: { label: string, oid: string, type: string } = null;\n\n  fieldChange: Subject<string>;\n\n  /*\n   * Observable subject for MasterList changes.  Called when an update is successful\n   */\n  onSuccess: Subject<SynchronizationConfig>;\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n      this.onSuccess = new Subject();\n      this.fieldChange = new Subject();\n  }\n\n  ngOnDestroy(): void {\n      this.onSuccess.unsubscribe();\n      this.fieldChange.unsubscribe();\n  }\n\n  init(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n      this.organizations = organizations;\n\n      if (config != null) {\n          this.config = config;\n\n          let oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n          if (oIndex !== -1) {\n              this.cOrg = this.organizations[oIndex];\n          }\n\n          let sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n          if (sIndex !== -1) {\n              this.cSystem = this.cOrg.systems[sIndex];\n          }\n      }\n  }\n\n  handleFieldChange(field: string): void {\n      this.fieldChange.next(field);\n  }\n\n  onOrganizationSelected(): void {\n      let index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n      if (index !== -1) {\n          this.cOrg = this.organizations[index];\n      } else {\n          this.cOrg = null;\n      }\n\n      this.cSystem = null;\n\n      this.handleFieldChange(\"organization\");\n  }\n\n  onChangeExternalSystem(): void {\n      let index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n      if (index !== -1) {\n          this.cSystem = this.cOrg.systems[index];\n      } else {\n          this.cSystem = null;\n      }\n\n      this.handleFieldChange(\"system\");\n  }\n\n  onSubmit(): void {\n    /*\n    let levelIndex = 0;\n    let len = this.levelRows.length;\n    for (let i = 0; i < len; ++i)\n    {\n      let levelRow: LevelRow = this.levelRows[i];\n\n      if (levelRow.isAttributeEditor)\n      {\n        continue;\n      }\n      else if (levelRow.attrCfg == null)\n      {\n        levelIndex++;\n        continue;\n      }\n\n      let mappings = this.config.configuration.levels[levelIndex].mappings;\n      let mappingsLen = levelRow.attrCfg.mappings.length;\n      for (let j = 0; j < mappingsLen; ++j)\n      {\n        let mapping = JSON.parse(JSON.stringify(levelRow.attrCfg.mappings[j]));\n        delete mapping.info;\n        mappings.push(mapping);\n      }\n\n      levelIndex++;\n    }\n    */\n\n      this.service.apply(this.config).then(cfg => {\n          this.onSuccess.next(cfg);\n          this.bsModalRef.hide();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  cancel(): void {\n      /*\n      if (this.config.oid != null) {\n          this.service.unlock(this.config.oid).then(() => {\n              this.bsModalRef.hide();\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      } else {\n          this.bsModalRef.hide();\n      }\n      */\n\n      this.bsModalRef.hide();\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      \n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n        <dhis2-synchronization-config [(config)]=\"config\" [cOrg]=\"cOrg\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></dhis2-synchronization-config>\n      </div>\n      <div *ngIf=\"cSystem != null && cSystem.type === 'FhirExternalSystem'\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>Synchronization Type</label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"col-md-3\" style=\"display: flex; align-items: center;\">\n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"!config.isImport\" name=\"isImport\" [value]=\"false\">\n                <span>Export</span>\n              </label>                \n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"config.isImport\" name=\"isImport\" [value]=\"true\">\n                <span>Import</span>\n              </label>                \n            </div>          \n          </div>\n        </div>\n      \n        <fhir-export-synchronization-config *ngIf=\"config.isImport !== true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-export-synchronization-config>\n        <fhir-import-synchronization-config *ngIf=\"config.isImport === true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-import-synchronization-config>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from \"@angular/core\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n    selector: \"fhir-import-synchronization-config\",\n    templateUrl: \"./fhir-import-synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class FhirImportSynchronizationConfigComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n  subscription: Subscription = null;\n\n  implementations: { className: string, label: string }[] = [];\n\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n      this.reset();\n\n      this.subscription = this.fieldChange.subscribe((field: string) => {\n          if (field === \"organization\" || field === \"system\") {\n              this.reset();\n          }\n      });\n\n      this.service.getFhirImportImplementations().then(implementations => {\n          this.implementations = implementations;\n      });\n  }\n\n  ngOnDestroy(): void {\n      if (this.subscription != null) {\n          this.subscription.unsubscribe();\n      }\n  }\n\n  reset(): void {\n      if (this.config.configuration == null) {\n          this.config.configuration = {\n              implementation: null\n          };\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.implementation\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <select [(ngModel)]=\"config.configuration.implementation\" name=\"implementation\" required>\n            <option></option>\n            <option *ngFor=\"let implementation of implementations\" [value]=\"implementation.className\">\n                {{implementation.label}}\n            </option>\n        </select>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { SynchronizationConfig, ExportScheduledJob } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component/error-handler/error-handler\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { Subscription } from \"rxjs\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"synchronization-config\",\n    templateUrl: \"./synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\n  message: string = null;\n\n  config: SynchronizationConfig = null;\n\n  page: PageResult<ExportScheduledJob> = {\n      pageSize: 10,\n      pageNumber: 1,\n      count: 1,\n      resultSet: []\n  };\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n  subscription: Subscription = null;\n\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n      const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n      this.service.get(oid).then(config => {\n          this.config = config;\n          this.onPageChange(1);\n      });\n\n      let baseUrl = WebSockets.buildBaseUrl();\n\n      this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n      this.subscription = this.notifier.subscribe(message => {\n          if (message.type === \"DATA_EXPORT_JOB_CHANGE\") {\n              this.onPageChange(this.page.pageNumber);\n          }\n      });\n  }\n\n  ngOnDestroy() {\n      if (this.subscription != null) {\n          this.subscription.unsubscribe();\n      }\n\n      if (this.notifier != null) {\n          this.notifier.complete();\n      }\n  }\n\n  onRun(): void {\n      this.message = null;\n\n      this.service.run(this.config.oid).then(() => {\n      // Refresh the page\n          this.onPageChange(this.page.pageNumber);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  onGenerateFile(): void {\n      window.open(registry.contextPath + \"/synchronization-config/generate-file?oid=\" + encodeURIComponent(this.config.oid));\n  }\n\n  onPageChange(pageNumber: number): void {\n      if (this.config != null) {\n          this.message = null;\n\n          this.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n              this.formatStepConfig(response);\n              this.page = response;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  formatJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"FEEDBACK\") {\n          return this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n      } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      } else if (job.status === \"QUEUED\") {\n          return this.lService.decode(\"etl.JobStatus.QUEUED\");\n      } else if (job.status === \"SUCCESS\") {\n          return this.lService.decode(\"etl.JobStatus.SUCCESS\");\n      } else if (job.status === \"CANCELED\") {\n          return this.lService.decode(\"etl.JobStatus.CANCELED\");\n      } else if (job.status === \"FAILURE\") {\n          return this.lService.decode(\"etl.JobStatus.ERROR\");\n      } else if (job.status === \"WARNING\") {\n          return this.lService.decode(\"etl.JobStatus.WARNING\");\n      } else {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      }\n  }\n\n  formatStepConfig(page: PageResult<ExportScheduledJob>): void {\n      page.resultSet.forEach((job: ExportScheduledJob) => {\n          const steps = [\n              {\n                  label: this.lService.decode(\"synchronization.step.Queued\"),\n                  status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n              },\n\n              {\n                  label: this.lService.decode(\"synchronization.step.Connecting\"),\n                  status: job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n              }\n          ];\n\n          const stepLabel = this.config.isImport ? \"Importing\" : this.lService.decode(\"synchronization.step.DatabaseExport\");\n\n          steps.push({\n              label: stepLabel,\n              status: job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n          });\n\n          job.stepConfig = {\n              steps: steps\n          };\n      });\n  }\n\n  getCompletedStatus(jobStage: string, targetStage: string): string {\n      let order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n      let jobPos = order.indexOf(jobStage);\n      let targetPos = order.indexOf(targetStage);\n\n      if (targetPos < jobPos) {\n          return \"COMPLETE\";\n      } else {\n          return \"\";\n      }\n  }\n\n  getJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n          return \"WORKING\";\n      } else if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n          return \"STUCK\";\n      }\n\n      return \"\";\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label>\n              <i class=\"fa\"\n                [ngClass]=\"{'fa-long-arrow-right' : !config.isImport, 'fa-long-arrow-left' : config.isImport}\"\n                aria-hidden=\"true\"\n                style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i>\n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-group text-right\" style=\"margin: 0;\">\n                <form>\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                  <button *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\"\n                    type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onGenerateFile()\" class=\"btn btn-secondary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.generateBundle\"></localize>\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.geoObjectType}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                      <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                      <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                      <localize *ngIf=\"level.type === 'NONE'\" key=\"synchronization.config.none\"></localize>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"masterlist.field\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"masterlist.forDate\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.typeLabel}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      {{level.forDate}}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\">\n                          <localize key=\"masterlist.jobs\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr\n                        *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.message != '' && job.exception.type != 'java.lang.RuntimeException'\"\n                                style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                              <span *ngIf=\"job.exception == null || job.exception.message == ''\"\n                                style=\"display: block;\">\n                                <localize *ngIf=\"job.status === 'FAILURE'\" key=\"etl.JobStatus.ERROR.description\"></localize>\n                                <localize *ngIf=\"job.status === 'WARNING'\" key=\"etl.JobStatus.WARNING.description\"></localize>\n                              </span>\n                            </p>\n\n                            <step-indicator\n                              *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED' && job.status !== 'WARNING'\"\n                              [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a\n                              [routerLink]=\"'/registry/sync/details/' + config.oid + '/' + job.historyId\"\n                              routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                          </div>\n                        </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService, IOService, SynchronizationConfigService } from \"@registry/service\";\nimport { ScheduledJob, SynchronizationConfig } from \"@registry/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"sync-details\",\n    templateUrl: \"./details.component.html\",\n    styleUrls: [\"./details.css\"]\n})\nexport class SyncDetailsComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    historyId: string = \"\";\n\n    config: SynchronizationConfig = null;\n\n    page: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    constructor(private configService: SynchronizationConfigService, public service: RegistryService, private route: ActivatedRoute, public ioService: IOService) {\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        const configOid = this.route.snapshot.paramMap.get(\"config\");\n\n        this.configService.get(configOid).then(config => {\n            this.config = config;\n\n            this.onPageChange(1);\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n            this.job = response;\n\n            this.page = this.job.exportErrors;\n\n            if (response.exception && response.exception.type && response.exception.type.indexOf(\"ExportJobHasErrors\") === -1) {\n                this.error(response.exception);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n                                    <span *ngIf=\"config == null || !config.isImport\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n                                    </span>\n                                    <span *ngIf=\"config != null && config.isImport\">Resource</span>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th *ngIf=\"config == null || !config.isImport\" class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                  <th *ngIf=\"config == null || !config.isImport\" class=\"label-column\">\n                                    <localize key=\"etl.feedback.severity.title\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td  *ngIf=\"config == null || !config.isImport\" class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td  *ngIf=\"config == null || !config.isImport\" class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>\n                                        <localize *ngIf=\"row.type === 'ERROR'\" key=\"etl.feedback.severity.error\"></localize>\n                                        <localize *ngIf=\"row.type === 'WARNING'\" key=\"etl.feedback.severity.warning\"></localize>\n                                      </p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, HostListener, Injector, ApplicationRef, ComponentFactoryResolver } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Map, NavigationControl, AttributionControl, IControl, LngLatBounds } from \"mapbox-gl\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport * as ColorGen from \"color-generator\";\n\nimport { GeoObject, GeoObjectType, GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { ModalState, PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\n\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ConfirmModalComponent, SuccessModalComponent } from \"@shared/component\";\n\nimport { AuthService, DateService, LocalizationService } from \"@shared/service\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { timeout } from \"d3-timer\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { SelectTypeModalComponent } from \"./select-type-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { FeaturePanelComponent } from \"./feature-panel.component\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\nimport { GEO_OBJECT_DATA_SOURCE_TYPE, Layer, ListVectorLayerDataSource, SearchLayerDataSource, LIST_VECTOR_SOURCE_TYPE, SEARCH_DATASOURCE_TYPE, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE, GeoObjectLayerDataSource, ValueOverTimeDataSource, RelationshipVisualizionDataSource } from \"@registry/service/layer-data-source\";\nimport { BusinessObject, BusinessType } from \"@registry/model/business-type\";\nimport { BusinessObjectService } from \"@registry/service/business-object.service\";\nimport { Vertex } from \"@registry/model/graph\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocationManagerStateService } from \"@registry/service/location-manager.service\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\nclass SelectedObject {\n\n    objectType: string;\n\n    // If GO or BO\n    code?: string;\n\n    // If geo object\n    forDate?: string;\n\n    // If business object\n    businessObject?: BusinessObject;\n    businessType?: BusinessType;\n\n    // If list record\n    recordUid?: string;\n    versionId?: string;\n\n}\n\nclass SelectedList {\n\n    versionId: string;\n    uid?: string;\n\n}\n\nexport interface LocationManagerState {\n    layers?: string,\n    graphPanelOpen?: boolean,\n    graphOid?: string,\n    date?: string,\n    type?: string,\n    code?: string,\n    objectType?: \"BUSINESS\" | \"GEOOBJECT\",\n    bounds?: string,\n    text?: string,\n    layersPanelSize?: string,\n    pageContext?: string,\n    version?: string,\n    attrPanelOpen?: boolean,\n    uid?: string\n}\n\n@Component({\n    selector: \"location-manager\",\n    providers: [Location],\n    templateUrl: \"./location-manager.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    pageMode: string = \"\";\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE: ModalState = {\n        SEARCH: 0,\n        VIEW: 1\n    };\n\n    CONSTANTS = {\n        SEARCH_OVERLAY: OverlayerIdentifier.SEARCH_PANEL\n    };\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Search results from the server\n     */\n    data: GeoObject[] = [];\n\n    state: LocationManagerState = { attrPanelOpen: true };\n\n    /*\n     * Currently selected record\n     */\n    current: SelectedObject;\n\n    /*\n     * Flag denoting if an object is currently being editted\n     */\n    isEdit: boolean = false;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    /*\n     *  Mode used to determine what is being show on the left hand panel\n     */\n    mode: number = this.MODE.SEARCH;\n\n    /*\n    *  Flag to indicate if the left handle panel should be displayed or not\n     */\n    showPanel: boolean = true;\n\n    backReference: string;\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n    ];\n\n    preventSingleClick: boolean = false;\n\n    /*\n     * Timer for determining double click vs single click\n     */\n    timer: any;\n\n    /*\n    * Subscription for changes to the URL parameters\n    */\n    subscription: Subscription;\n\n    // Flag denoting if the map in loaded and initialized\n    ready: boolean = false;\n\n    // Flag denoting if the search and results panel is enabled at all\n    searchEnabled: boolean = true;\n\n    graphVisualizerEnabled: boolean = false;\n\n    typeahead: Observable<any> = null;\n\n    typeCache: GeoObjectTypeCache;\n\n    public layersPanelSize: number = PANEL_SIZE_STATE.MINIMIZED;\n\n    @ViewChild(\"simpleEditControl\") simpleEditControl: IControl;\n\n    @ViewChild(\"FeaturePanel\") featurePanel: FeaturePanelComponent;\n\n    windowWidth: number;\n    windowHeight: number;\n\n    private mapBounds: LngLatBounds;\n\n    searchFieldText: string;\n\n    dateFieldValue: string;\n\n    list: SelectedList = null;\n    recordContext: string = \"MAP\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private modalService: BsModalService,\n        private spinner: NgxSpinnerService,\n        private service: RegistryService,\n        private cacheService: RegistryCacheService,\n        private listService: ListTypeService,\n        private mapService: MapService,\n        private geomService: GeometryService,\n        private lService: LocalizationService,\n        private authService: AuthService,\n        private dateService: DateService,\n        private locationManagerService: LocationManagerStateService,\n        private businessObjectService: BusinessObjectService,\n        private location: Location,\n        private componentFactoryResolver: ComponentFactoryResolver,\n        private appRef: ApplicationRef,\n        private injector: Injector\n    ) {\n        this.location = location;\n    }\n\n    ngOnInit(): void {\n        this.windowWidth = window.innerWidth;\n        this.windowHeight = window.innerHeight;\n\n        // this.subscription = this.route.queryParams.subscribe(state => { this.handleStateChange(state); });\n        this.subscription = this.geomService.stateChange$.subscribe(state => this.handleStateChange(state));\n\n        this.searchEnabled = registry.searchEnabled && (this.authService.isRC(false) || this.authService.isRM() || this.authService.isRA());\n        this.graphVisualizerEnabled = registry.graphVisualizerEnabled || false;\n\n        this.typeCache = this.cacheService.getTypeCache();\n\n        this.geomService.dumpLayers();\n\n        // const version = this.route.snapshot.queryParamMap.get(\"version\");\n\n        // if (version != null) {\n        //     this.onViewList(version);\n        // }\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n        this.subscription.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n        this.initializeMap();\n    }\n\n    @HostListener(\"window:resize\", [\"$event\"])\n    resizeWindow() {\n        this.windowWidth = window.innerWidth;\n        this.windowHeight = window.innerHeight;\n    }\n\n    initializeMap() {\n        const layer = this.baseLayers[0];\n\n        const mapConfig: any = {\n            container: \"map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    mapbox: {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox\"\n                        // \"source-layer\": \"mapbox_satellite_full\"\n                    }\n                ]\n            },\n            attributionControl: false,\n            bounds: registry.defaultMapBounds\n        };\n\n        if (this.state.bounds != null && this.state.bounds.length > 0) {\n            mapConfig.bounds = new LngLatBounds(JSON.parse(this.state.bounds));\n        }\n\n        mapConfig.logoPosition = \"bottom-right\";\n\n        this.map = new Map(mapConfig);\n\n        this.map.on(\"load\", () => {\n            this.geomService.initialize(this.map, null, true);\n            this.ready = true;\n\n            this.initMap();\n        });\n\n        if (this.simpleEditControl) {\n            this.map.addControl(this.simpleEditControl);\n        }\n    }\n\n    updateState(newState: LocationManagerState, pushBackHistory: boolean = false): void {\n        this.geomService.setState(newState, pushBackHistory);\n    }\n\n    onGraphNodeSelect(node: Vertex): void {\n        this.closeEditSessionSafeguard().then(() => {\n            (node as any).selectAnimation(() => {\n                if (node.objectType === \"GEOOBJECT\") {\n                    let mockGeo = {\n                        properties: {\n                            type: node.typeCode,\n                            uid: node.id,\n                            code: node.code,\n                            displayLabel: new LocalizedValue(node.label, [])\n                        }\n                    } as GeoObject;\n\n                    this.selectGeoObject(mockGeo);\n                } else if (node.objectType === \"BUSINESS\") {\n                    this.updateState({ type: node.typeCode, code: node.code, objectType: node.objectType, uid: null, version: null, text: null }, true);\n                }\n            });\n        });\n    }\n\n    /**\n    *\n    * Method responsible for parsing the state from the URL parameters and determining if\n    * the model of the widget needs to be updated or not.\n    *\n    * */\n    handleStateChange(newState: LocationManagerState): void {\n        newState = JSON.parse(JSON.stringify(newState));\n        let oldState = JSON.parse(JSON.stringify(this.state));\n\n        if (this.ready) {\n            this.state = newState;\n\n            let mode = this.MODE.SEARCH;\n            let showPanel: boolean = (newState.attrPanelOpen || newState.attrPanelOpen === undefined);\n\n            if (newState != null) {\n                if (newState.date !== oldState.date) {\n                    this.dateFieldValue = newState.date;\n                }\n\n                // Handle parameters for searching for a geo object\n                if (newState.text != null) {\n                    if (newState.text !== oldState.text || newState.date !== oldState.date) {\n                        this.searchFieldText = newState.text;\n\n                        this.loadSearchFromState();\n                    }\n\n                    showPanel = true;\n                }\n\n                // Handle parameters for selecting a geo object\n                if ((newState.objectType == null || newState.objectType === \"GEOOBJECT\") && newState.type != null && newState.code != null) {\n                    if (oldState.type !== newState.type || oldState.code !== newState.code || oldState.date !== newState.date) {\n                        this.loadGeoObjectFromState();\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                // Handle parameters for selecting a business object\n                if (newState.objectType != null && newState.objectType === \"BUSINESS\" && newState.type && newState.code) {\n                    if (this.current == null || this.current.businessObject == null || this.current.businessObject.code !== newState.code || this.current.businessType.code !== newState.type) {\n                        this.loadBusinessObjectFromState();\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                // Handle parameters for select a record from a context layer\n                if (newState.version != null && newState.uid != null) {\n                    if (this.current == null || this.current.versionId !== newState.version || this.current.recordUid !== newState.uid) {\n                        this.loadListRecordFromState();\n                    }\n\n                    // showPanel = true;\n                    // mode = this.MODE.VIEW;\n                }\n\n                if (newState.pageContext) {\n                    this.pageMode = newState.pageContext;\n                }\n\n                if (newState.layersPanelSize) {\n                    this.layersPanelSize = Number.parseInt(newState.layersPanelSize);\n                } else {\n                    this.layersPanelSize = (this.pageMode === \"EXPLORER\") ? PANEL_SIZE_STATE.FULLSCREEN : this.layersPanelSize;\n                }\n\n                if (newState.attrPanelOpen != null) {\n                    showPanel = newState.attrPanelOpen;\n                }\n            }\n\n            this.changeMode(mode);\n            if (oldState.attrPanelOpen !== showPanel) {\n                this.setPanel(showPanel);\n            }\n\n            if (newState.bounds != null && newState.bounds.length > 0 && !this.geomService.isMapZooming()) {\n                const bounds = JSON.parse(newState.bounds);\n\n                this.mapBounds = this.convertMapBounds(new LngLatBounds(bounds));\n                const llb = this.convertMapBounds(this.map.getBounds());\n\n                if (llb.toString() !== this.mapBounds.toString()) {\n                    this.map.fitBounds(this.mapBounds, { animate: false });\n                }\n            }\n        }\n    }\n\n    loadBusinessObjectFromState() {\n        this.businessObjectService.getTypeAndObject(this.state.type, this.state.code).then(resp => {\n            this.current = {\n                objectType: \"BUSINESS\",\n                code: this.state.code,\n                businessObject: resp.object,\n                businessType: resp.type\n            };\n\n            this.mode = this.MODE.VIEW;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        }).finally(() => {\n            this.spinner.hide(OverlayerIdentifier.FEATURE_PANEL);\n        });\n    }\n\n    setPanel(showPanel: boolean): void {\n        if (this.state.attrPanelOpen !== showPanel) {\n            this.updateState({ attrPanelOpen: showPanel }, false);\n\n            timeout(() => {\n                this.map.resize();\n            }, 1);\n        }\n    }\n\n    togglePanel(): void {\n        this.setPanel(!(this.state.attrPanelOpen));\n    }\n\n    changeMode(mode: number): void {\n        if (mode !== this.mode) {\n            this.mode = mode;\n\n            if (this.isEdit) {\n                this.geomService.stopEditing();\n            }\n\n            if (this.mode === this.MODE.SEARCH) {\n                this.isEdit = false;\n\n                this.current = null;\n            } else if (this.mode === this.MODE.VIEW) {\n                // empty\n            }\n        }\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n    }\n\n    initMap(): void {\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n        this.map.addControl(new NavigationControl({ visualizePitch: true }), \"bottom-right\");\n\n        this.map.on(\"click\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"moveend\", (event: any) => {\n            const mapBounds = this.convertMapBounds(this.map.getBounds());\n\n            if (this.mapBounds == null || this.mapBounds.toString() !== mapBounds.toString()) {\n                const array = mapBounds.toArray();\n\n                this.updateState({ bounds: JSON.stringify(array) });\n            }\n        });\n\n        this.handleStateChange(this.geomService.getState());\n    }\n\n    onCreate(layer: any): void {\n        if (layer.dataSource.dataSourceType === \"LISTVECT\") {\n            this.closeEditSessionSafeguard().then(() => {\n                this.listService.getVersion(layer.dataSource.versionId).then(version => {\n                    if (!version.isAbstract) {\n                        this.select({\n                            properties: {\n                                type: version.typeCode,\n                                code: \"__NEW__\"\n                            }\n                        }, null);\n                    } else {\n                        this.bsModalRef = this.modalService.show(SelectTypeModalComponent, {\n                            animated: true,\n                            backdrop: true,\n                            ignoreBackdropClick: true\n                        });\n                        this.bsModalRef.content.init(version, typeCode => {\n                            this.select({\n                                properties: {\n                                    type: typeCode,\n                                    code: \"__NEW__\"\n                                }\n                            }, null);\n                        });\n                    }\n                });\n            });\n        }\n    }\n\n    closeEditSessionSafeguard(): Promise<void> {\n        if (!this.isEdit) {\n            return new Promise((resolve, reject) => { resolve(); });\n        }\n\n        let confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        confirmBsModalRef.content.message = this.lService.decode(\"explorer.edit.loseAllChanges\");\n        confirmBsModalRef.content.data = {};\n        confirmBsModalRef.content.submitText = this.lService.decode(\"modal.button.ok\");\n        confirmBsModalRef.content.type = ModalTypes.danger;\n\n        let resolver = (subsription: Subscription, resolve: Function, result: void) => { this.cancelEditingSession(); resolve(result); subsription.unsubscribe(); };\n        let rejecter = (subsription: Subscription, reject: Function, error: any) => { reject(error); subsription.unsubscribe(); };\n\n        return new Promise((resolve, reject) => {\n            let subscription = confirmBsModalRef.content.onConfirm.subscribe(\n                result => { resolver(subscription, resolve, result); },\n                error => { rejecter(subscription, reject, error); }\n            );\n        });\n    }\n\n    handleMapClickEvent(e: any): void {\n        const features = this.map.queryRenderedFeatures(e.point);\n\n        if (features != null && features.length > 0) {\n            const feature = features[0];\n\n            if (feature.properties.uid != null) {\n                this.closeEditSessionSafeguard().then(() => {\n                    if (feature.layer) {\n                        let layer: Layer = this.geomService.getLayerFromMapboxLayer(feature.layer);\n\n                        if (layer) {\n                            if (layer.dataSource.getDataSourceType() === SEARCH_DATASOURCE_TYPE) {\n                                if ((this.current == null || feature.properties == null || this.state.code !== feature.properties.code || this.state.type !== feature.properties.type)) {\n                                    let geoObject: GeoObject = JSON.parse(JSON.stringify(feature));\n                                    geoObject.properties.displayLabel = feature.properties.displayLabel != null ? JSON.parse(feature.properties.displayLabel) : null;\n\n                                    this.selectGeoObject(geoObject);\n                                }\n                            } else {\n                                if (layer.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE) {\n                                    this.recordContext = \"MAP\";\n\n                                    const versionId = (layer.dataSource as ListVectorLayerDataSource).getVersionId();\n\n                                    /*\n                                    if (this.state.version == null || this.state.uid == null ||\n                                        this.state.version !== versionId ||\n                                        this.state.uid !== feature.properties.uid) {\n                                        this.updateState({ version: versionId, uid: feature.properties.uid }, false);\n                                    } else {\n                                      */\n                                    this.listService.getVersion(versionId).then(version => {\n                                        this.selectListRecord(version, feature.properties.uid);\n                                    });\n                                    // }\n                                } else if (layer.dataSource.getDataSourceType() === GEO_OBJECT_DATA_SOURCE_TYPE) {\n                                    let geoObject: GeoObject = JSON.parse(JSON.stringify(feature));\n                                    geoObject.properties.displayLabel = feature.properties.displayLabel != null ? JSON.parse(feature.properties.displayLabel) : null;\n\n                                    this.selectGeoObject(geoObject);\n                                } else if (layer.dataSource.getDataSourceType() === RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE) {\n                                    let geoObject: GeoObject = JSON.parse(JSON.stringify(feature));\n                                    geoObject.properties.displayLabel = feature.properties.displayLabel != null ? JSON.parse(feature.properties.displayLabel) : null;\n\n                                    this.selectGeoObject(geoObject);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    onPanelCancel(): void {\n        this.clearRecord();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        if (applyInfo.isChangeRequest) {\n            if (this.backReference != null && this.backReference.length >= 2 && this.backReference.substring(0, 2) === \"CR\") {\n                this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n            } else {\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n                this.bsModalRef.content.cancelText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n                this.bsModalRef.content.onCancel.subscribe(() => {\n                    this.clearRecord();\n                });\n            }\n        } else {\n            this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n            this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n            this.bsModalRef.content.onConfirm.subscribe(() => {\n                this.onPanelCancel();\n            });\n        }\n    }\n\n    handleBasemapStyle(layer: any): void {\n        // this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n        this.baseLayers.forEach(baseLayer => {\n            baseLayer.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.map.setStyle({\n            version: 8,\n            name: layer.name,\n            metadata: {\n                \"mapbox:autocomposite\": true\n            },\n            sources: {\n                mapbox: {\n                    type: \"raster\",\n                    url: layer.url,\n                    tileSize: 256\n                }\n            },\n            sprite: layer.sprite,\n            glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n            layers: [\n                {\n                    id: layer.id,\n                    type: \"raster\",\n                    source: \"mapbox\"\n                    // \"source-layer\": \"mapbox_satellite_full\"\n                }\n            ]\n        });\n    }\n\n    getGeoObjectTypeLabel(geoObject: GeoObject) {\n        const type: GeoObjectType = this.typeCache.getTypeByCode(geoObject.properties.type);\n\n        return type == null ? \"\" : type.label.localizedValue;\n    }\n\n    search(): void {\n        if ((this.searchFieldText == null || this.searchFieldText === \"\") && (this.state.text === \"\" || this.state.text === null)) {\n            return;\n        }\n\n        let layers = this.geomService.getLayers();\n\n        // Check for an existing search layer with the same data\n        let index = layers.findIndex(layer => layer.dataSource instanceof SearchLayerDataSource);\n        if (index !== -1) {\n            let existingSearchLayer = layers[index];\n            let ds = existingSearchLayer.dataSource as SearchLayerDataSource;\n\n            if (ds.getText() === this.searchFieldText && ds.getDate() === this.dateFieldValue) {\n                return;\n            }\n        }\n\n        // Remove any existing search layer(s)\n        layers = layers.filter(layer => layer.getPinned() ||\n            (!(layer.dataSource instanceof SearchLayerDataSource) && !(layer.dataSource instanceof RelationshipVisualizionDataSource)) ||\n            ((layer.dataSource instanceof SearchLayerDataSource) && (layer.dataSource as SearchLayerDataSource).getText() === this.searchFieldText && (layer.dataSource as SearchLayerDataSource).getDate() === this.dateFieldValue)\n        );\n\n        // Add our search layer\n        if (this.searchFieldText != null && this.searchFieldText !== \"\") {\n            let dataSource = new SearchLayerDataSource(this.mapService, this.searchFieldText, this.dateFieldValue);\n            let layer = dataSource.createLayer(this.lService.decode(\"explorer.search.layer\") + \" (\" + this.searchFieldText + \")\", true, ColorGen().hexString());\n            layers.splice(0, 0, layer);\n            this.geomService.zoomOnReady(layer.getId());\n\n            layers = layers.filter(l =>\n                l.getPinned() || // Always keep pinned layers\n                (\n                    !(l.dataSource instanceof ValueOverTimeDataSource) && !(l.dataSource instanceof GeoObjectLayerDataSource) && // Remove All Geo-Object layers\n                    !(l.dataSource instanceof RelationshipVisualizionDataSource) // Remove all Relationship Visualization layers\n                )\n            );\n        } else {\n            this.data = [];\n        }\n\n        let newState: LocationManagerState = {\n            text: this.searchFieldText,\n            date: this.dateFieldValue,\n            type: null,\n            code: null,\n            version: null,\n            uid: null,\n            layers: this.geomService.serializeLayers(layers)\n        };\n\n        this.updateState(newState, true);\n    }\n\n    loadSearchFromState(): void {\n        if (this.searchFieldText == null || this.searchFieldText === \"\") {\n            return;\n        }\n\n        this.geomService.stopEditing();\n\n        this.spinner.show(this.CONSTANTS.SEARCH_OVERLAY);\n\n        let dataSource = new SearchLayerDataSource(this.mapService, this.state.text, this.state.date);\n\n        dataSource.getLayerData().then((data: any) => {\n            this.spinner.hide(this.CONSTANTS.SEARCH_OVERLAY);\n\n            this.data = data.features;\n        }).catch(() => {\n            this.spinner.hide(this.CONSTANTS.SEARCH_OVERLAY);\n            this.state.text = \"\";\n            this.state.date = \"\";\n        });\n    }\n\n    loadListRecordFromState() {\n        if (this.state.code == null) {\n            this.current = {\n                objectType: \"LIST\",\n                recordUid: this.state.uid,\n                versionId: this.state.version\n            };\n            this.list = {\n                versionId: this.state.version,\n                uid: this.state.uid\n            };\n        }\n    }\n\n    selectListRecord(list: ListTypeVersion, uid: string): void {\n        this.closeEditSessionSafeguard().then(() => {\n            this.listService.record(list.oid, uid, false).then(record => {\n                this.typeCache.waitOnTypes().then(() => {\n                    let newState = this.locationManagerService.selectListRecord(list, uid, record, this.geomService.getState());\n\n                    this.updateState(newState, true);\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    cancelEditingSession() {\n        if (this.isEdit) {\n            this.geomService.stopEditing();\n        }\n\n        this.isEdit = false;\n\n        this.featurePanel.setEditMode(false);\n    }\n\n    clearRecord() {\n        this.updateState({ type: null, code: null, version: null, uid: null }, false);\n    }\n\n    featurePanelForDateChange(date: string) {\n        // if (date !== null) {\n        this.geomService.stopEditing();\n\n        this.updateState({ date: date }, false);\n        // }\n    }\n\n    select(node: any, event: MouseEvent): void {\n        if (!this.isEdit) {\n            this.updateState({ type: node.properties.type, code: node.properties.code, objectType: \"GEOOBJECT\", uid: node.properties.uid, version: null }, false);\n\n            // this.zoomToFeature(node, null);\n        }\n    }\n\n    selectGeoObject(geoObject: GeoObject, date: string = null): void {\n        if (geoObject.properties.uid === this.state.uid && (date == null || date === this.state.date)) {\n            return;\n        }\n\n        this.typeCache.waitOnTypes().then(() => {\n            this.closeEditSessionSafeguard().then(() => {\n                let newState: LocationManagerState = {\n                    type: geoObject.properties.type,\n                    code: geoObject.properties.code,\n                    objectType: \"GEOOBJECT\",\n                    uid: geoObject.properties.uid,\n                    version: null,\n                    text: null\n                };\n\n                let layer: Layer = this.locationManagerService.addLayerForGeoObject(geoObject, date, newState);\n                this.geomService.zoomOnReady(layer.getId());\n\n                if (date != null) {\n                    newState.date = date;\n                }\n\n                this.updateState(newState, true);\n            });\n        });\n    }\n\n    loadGeoObjectFromState(): void {\n        this.typeCache.waitOnTypes().then(() => {\n            const type: GeoObjectType = this.typeCache.getTypeByCode(this.state.type);\n\n            this.geomService.stopEditing();\n            this.geomService.setGeometryType(null);\n\n            this.geomService.setGeometryType(type.geometryType);\n\n            this.current = {\n                objectType: \"GEOOBJECT\",\n                code: this.state.code,\n                forDate: this.state.date === \"\" ? null : this.state.date\n            };\n\n            if (this.state.code !== \"__NEW__\") {\n                // this.zoomToFeature(this.current.geoObject, null);\n            }\n        });\n    }\n\n    onFeatureSelect(event: any): void {\n        if (!this.isEdit) {\n            this.state.text = event.item.name;\n\n            const feature = event.item.feature;\n\n            if (feature.properties.uid != null) {\n                this.listService.getBounds(feature.version, feature.properties.uid).then(bounds => {\n                    if (bounds && Array.isArray(bounds)) {\n                        let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                        this.map.fitBounds(llb, { padding: 50, animate: true, maxZoom: 20 });\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n\n            if (feature.properties.uid != null) {\n                this.updateState({ type: null, code: null, version: feature.version, uid: feature.properties.uid }, false);\n            }\n        }\n    }\n\n    toggleGraphPanel(): void {\n        this.updateState({ graphPanelOpen: !this.state.graphPanelOpen }, false);\n    }\n\n    convertMapBounds(llb: LngLatBounds): LngLatBounds {\n        const ne = llb.getNorthEast();\n        const sw = llb.getSouthWest();\n\n        const bounds = LngLatBounds.convert([\n            [parseFloat(sw.lng.toFixed(10)), parseFloat(sw.lat.toFixed(10))],\n            [parseFloat(ne.lng.toFixed(10)), parseFloat(ne.lat.toFixed(10))]\n        ]);\n\n        return bounds;\n    }\n\n    onViewList(oid: string): void {\n        let newState = this.locationManagerService.clearListRecord(this.geomService.getState());\n\n        this.updateState(newState, true);\n\n        this.list = {\n            versionId: oid\n        };\n    }\n\n    onRowSelect(event: { version: ListTypeVersion, uid: string }): void {\n        this.recordContext = \"ROW\";\n\n        this.selectListRecord(event.version, event.uid);\n    }\n\n    onListPanelClose(): void {\n        let newState = this.locationManagerService.clearListRecord(this.geomService.getState());\n\n        this.updateState(newState, true);\n\n        this.list = null;\n    }\n\n    isAttributePanelOpen(): boolean {\n        return (this.state.attrPanelOpen && ((this.mode === this.MODE.VIEW && this.current != null) || (this.mode === this.MODE.SEARCH && this.searchEnabled && this.data.length > 0)));\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.name }} : {{ model.code }}</h5>\n  <h6>\n    {{model.layer.label}} - {{ model.layer.forDate }} ( <span *ngIf=\"model.layer.versionNumber !== 0\">\n      <localize key=\"list.type.version\"></localize> {{model.layer.versionNumber}}\n    </span>\n    <localize *ngIf=\"model.layer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n    )\n  </h6>\n</ng-template>\n\n\n<cgr-header></cgr-header>\n<loading-bar></loading-bar>\n\n\n<div id=\"app-container\" class=\"container-fluid\">\n\n  <!-- Floating search panel-->\n  <div style=\"position: absolute; top: 0; bottom: 0; left: 10px; right: 10px; height: 100%;\">\n\n    <div class=\"row\" style=\"margin-top: 50px;\">\n      <div class=\"col-md-4\" style=\"z-index: 999;\" [hidden]=\"!state.attrPanelOpen\">\n        <div class=\"row\" *ngIf=\"searchEnabled\">\n          <!-- \n                        Search features from the working versions of lists\n                  -->\n          <article class=\"panel-toggle\" [ngClass]=\"{'detached' : data.length === 0 && current == null}\">\n            <ng-container>\n              <!--              <div class=\"col-md-4\"> -->\n              <!--                <date-field [(value)]=\"dateFieldValue\" label=\"\" [inputName]=\"'date'\" [allowInfinity]=\"false\" -->\n              <!--                  [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" style=\"display:inline-grid;\"> </date-field> -->\n              <!--              </div> -->\n              <div class=\"col-md-12\">\n\n                <div class=\"input-group\">\n                  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.SEARCH_OVERLAY\"\n                    type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>\n                  <date-field [(value)]=\"dateFieldValue\" label=\"\" [inputName]=\"'date'\"\n                    [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\"\n                    style=\"display:table-cell;vertical-align:middle;width:175px;\"> </date-field>\n\n                  <input type=\"text\" class=\"form-control\"\n                    [placeholder]=\"'explorer.search.placeholder' | localize\"\n                    (keyup.enter)=\"search()\" [(ngModel)]=\"searchFieldText\" name=\"text\"> <span\n                    class=\"input-group-btn\">\n                    <button [disabled]=\"isEdit\" class=\"btn btn-primary\" type=\"button\"\n                      (click)=\"search()\">\n                      <span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </ng-container>\n          </article>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <ng-container *ngIf=\"mode === MODE.SEARCH && searchEnabled\">\n              <div class=\"row\">\n                <div class=\"col-md-12\" [ngClass]=\"{'full-height-sidebar' : data.length > 0 }\">\n                  <div id=\"hierarchy-tree-container\"\n                    class=\"location-management-widget-section location-management-list-container\">\n                    <div class=\"list-group\">\n\n                      <div *ngFor=\"let node of data; let i = index\" class=\"list-group-item\">\n                        <div class=\"card card-default\" (click)=\"selectGeoObject(node)\">\n                          <div class=\"card-body\">\n                            <!--\n                                          <i class=\"fa fa-map-marker clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\"\n                                            (click)=\"zoomToFeature(node, $event)\" [title]=\"'explorer.zoom.label' | localize\"></i>\n                                          <i class=\"fa fa-sitemap clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\" (click)=\"visualizeRelationships(node, VISUALIZE_MODE.GRAPH, $event)\" [title]=\"'hierarchyVisualizer.tooltip' | localize\"></i>\n                                          -->\n                            <h4 class=\"clickable\" style=\"word-break: break-all;\"\n                              title=\"View Geo-Object details\">\n                              {{node.properties.code}} -\n                              {{node.properties.displayLabel.localizedValue}}\n                            </h4>\n                          </div>\n                          <div class=\"card-footer\">{{node.properties.type}}</div>\n                        </div>\n                      </div>\n\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ng-container>\n\n            <ng-container *ngIf=\"mode === MODE.VIEW && current != null\">\n              <div class=\"row\">\n                <div class=\"col-md-12\"\n                  [ngClass]=\"{'full-height-sidebar' : current != null, 'max-height' : !searchEnabled }\">\n                  <feature-panel *ngIf=\"current.objectType === 'GEOOBJECT' && typeCache.ready()\"\n                    #FeaturePanel [type]=\"typeCache.getTypeByCode(state.type)\" [code]=\"current.code\"\n                    [forDate]=\"current.forDate\" (forDateChange)=\"featurePanelForDateChange($event)\"\n                    [readOnly]=\"false\" (modeChange)=\"onModeChange($event)\"\n                    (panelCancel)=\"clearRecord()\" (panelSubmit)=\"onPanelSubmit($event)\">\n                  </feature-panel>\n\n                  <business-object-panel *ngIf=\"current.objectType === 'BUSINESS'\"\n                    [type]=\"current.businessType\" [object]=\"current.businessObject\"\n                    (close)=\"mode = MODE.VIEW\">\n                  </business-object-panel>\n                </div>\n              </div>\n            </ng-container>\n          </div>\n        </div>\n\n      </div> <!--  END sidebar panel -->\n\n      <div [ngClass]=\"{'col-md-6':!state.attrPanelOpen, 'col-md-8':state.attrPanelOpen}\"\n        style=\"z-index:4;padding-top:10px;\">\n\n        <div style=\"z-index:999;padding-top:10px;overflow-y:auto;position:absolute;top:0;overflow:visible;\">\n          <div *ngIf=\"searchEnabled || current != null\" class=\"map-button clickable\"\n            style=\"padding-bottom: 5px;\" (click)=\"!isEdit && togglePanel()\">\n            <div class=\"map-button-icon\">\n              <span class=\"fa clickable\" style=\"font-size: 35px;\"\n                [title]=\"(state.attrPanelOpen ? 'explorer.resize.closeAttributePanel' : 'explorer.resize.openAttributePanel') | localize\"\n                [ngClass]=\"{'fa-angle-double-left': state.attrPanelOpen, 'fa-angle-double-right': !state.attrPanelOpen}\"\n                aria-hidden=\"true\">\n              </span>\n            </div>\n          </div>\n          <span *ngIf=\"current != null && graphVisualizerEnabled\" class=\"map-button visualize-mode-toggle\">\n            <i style=\"margin-right: initial\" class=\"visualize-mode-hierarchy clickable fa fa-share-alt\"\n              aria-hidden=\"true\"\n              [title]=\"(state.graphPanelOpen ? 'explorer.resize.closeGraphViz' : 'explorer.resize.openGraphViz') | localize\"\n              (click)=\"toggleGraphPanel()\"></i>\n          </span>\n        </div>\n\n        <div *ngIf=\"state.graphPanelOpen && graphVisualizerEnabled && state.type && state.code\"\n          id=\"graph-container\" style=\"height: calc(100vh - 74px);padding-left: 58px;\">\n          <div style=\"background-color: white; opacity: 100%; width: 100%; height: 100%;\">\n            <relationship-visualizer (nodeSelect)=\"onGraphNodeSelect($event)\">\n            </relationship-visualizer>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Full screen map-->\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"row\">\n\n        <article id=\"navigator-layer-panel\" class=\"base-layer-panel\"\n          [ngClass]=\"{'second-map-button' : searchEnabled && !state.attrPanelOpen}\"\n          [ngStyle]=\"{'max-width': layersPanelSize === 2 ? '50%' : 'unset', 'padding-left': layersPanelSize === 2 ? '10px' : 'unset'}\">\n          <layer-panel (create)=\"onCreate($event)\" [panelSize]=\"layersPanelSize\"\n            (viewList)=\"onViewList($event)\"> </layer-panel>\n        </article>\n\n        <article *ngIf=\"list != null && !state.graphPanelOpen\" id=\"navigator-list-panel\" class=\"list-panel\"\n          style=\"position: absolute; right: 5px; bottom: 0px; z-index: 500; width: 100%; pointer-events: none;\"\n          >\n          <div class=\"row\" style=\"margin-left: 5px; \">\n            <div [ngClass]=\"{'col-md-4':isAttributePanelOpen()}\">\n            </div>\n\n            <div [ngClass]=\"{'col-md-12':!isAttributePanelOpen(), 'col-md-8':isAttributePanelOpen()}\"\n              style=\"pointer-events: all;\">\n\n              <list-panel *ngIf=\"list.uid == null\" [oid]=\"list.versionId\" (close)=\"onListPanelClose()\"\n                (error)=\"error($event)\" (onRowSelect)=\"onRowSelect($event)\"> </list-panel>\n\n              <list-row *ngIf=\"list.uid != null\" [oid]=\"list.versionId\" [uid]=\"list.uid\"\n                (close)=\"onListPanelClose()\" (error)=\"error($event)\"> </list-row>\n\n            </div>\n          </div>\n        </article>\n\n\n        <div id=\"map\" class=\"map-view-port\"></div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\n\n\n@Component({\n    selector: \"select-type-modal\",\n    templateUrl: \"./select-type-modal.component.html\",\n    styleUrls: []\n})\nexport class SelectTypeModalComponent implements OnInit, OnDestroy {\n\n    version: ListTypeVersion;\n\n    type: string;\n\n    /*\n     * Called on confirm\n     */\n    onCreate: Subject<string>;\n\n    subscription: Subscription;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onCreate = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.onCreate.unsubscribe();\n    }\n\n    init(version: ListTypeVersion, observer: Observer<string>): void {\n        this.version = version;\n        this.subscription = this.onCreate.subscribe(observer);\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onCreate.next(this.type);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>                        \n        </h1>\n    </div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" name=\"export-form\">\n        <fieldset *ngIf=\"version != null\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n\n                    <select id=\"type\" name=\"type\" class=\"select-area\" [(ngModel)]=\"type\" required>\n                        <option></option>\n                        <option *ngFor=\"let subtype of version.subtypes\" [value]=\"subtype.code\">\n                            {{subtype.label}}                            \n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"form.invalid\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { CreateGeoObjectAction } from \"@registry/model/crtable\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"feature-panel\",\n    templateUrl: \"./feature-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class FeaturePanelComponent implements OnInit, OnChanges {\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\",\n        GEOMETRY: \"GEOMETRY\"\n    };\n\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.FEATURE_PANEL\n    };\n\n    @Input() datasetId: string;\n\n    @Input() type: GeoObjectType;\n\n    @Input() forDate: Date = new Date();\n\n    @Output() forDateChange = new EventEmitter<string>();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() code: string;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @Output() featureChange = new EventEmitter<GeoObjectOverTime>();\n    @Output() modeChange = new EventEmitter<boolean>();\n    @Output() panelCancel = new EventEmitter<void>();\n    @Output() panelSubmit = new EventEmitter<{ isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }>();\n\n    _isValid: boolean = true;\n\n    bsModalRef: BsModalRef;\n\n    mode: string = null;\n\n    isMaintainer: boolean;\n\n    // The current state of the GeoObject in the GeoRegistry\n    preGeoObject: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    postGeoObject: GeoObjectOverTime;\n\n    attribute: AttributeType = null;\n\n    isNew: boolean = false;\n\n    isEdit: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    hierarchy: HierarchyOverTime = null;\n\n    // Flag indicating if the component is communicating with the server\n    // inProgress: number = 0;\n\n    reason: string = \"\";\n\n    constructor(\n        public service: RegistryService,\n        private spinner: NgxSpinnerService,\n        private modalService: BsModalService,\n        private authService: AuthService,\n        private geometryService: GeometryService) { }\n\n    ngOnInit(): void {\n        this.isMaintainer = this.authService.isSRA() || this.authService.isOrganizationRA(this.type.organizationCode) || this.authService.isGeoObjectTypeOrSuperRM(this.type);\n        this.mode = \"ATTRIBUTES\";\n\n        //        this.isEdit = !this.readOnly;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.type != null || changes.code != null) {\n            this.refresh();\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this._isValid = valid;\n    }\n\n    isValid(): boolean {\n        return this._isValid && this.attributeEditor && this.attributeEditor.isValid();\n    }\n\n    updateCode(code: string): void {\n        this.code = code;\n    }\n\n    refresh(): void {\n        this.postGeoObject = null;\n        this.preGeoObject = null;\n        this.hierarchies = null;\n\n        if (this.code != null && this.type != null) {\n            if (this.code !== \"__NEW__\") {\n                this.isNew = false;\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.getGeoObjectOverTime(this.code, this.type.code).then(geoObject => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(geoObject)).attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.getHierarchiesForGeoObject(this.code, this.type.code, false).then((hierarchies: HierarchyOverTime[]) => {\n                    this.hierarchies = hierarchies;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n            } else {\n                this.isNew = true;\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.newGeoObjectOverTime(this.type.code, false).then(retJson => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, retJson.geoObject.attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n\n                    this.hierarchies = retJson.hierarchies;\n                    this.setEditMode(true);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n            }\n        }\n    }\n\n    editorForDateChange(date: string) {\n        this.forDateChange.emit(date);\n    }\n\n    onCancelInternal(): void {\n        this.panelCancel.emit();\n\n        // if (this.code === '__NEW__') {\n        //    this.updateCode(null);\n        // }\n        // else {\n        //    this.updateCode(this.code);\n        // }\n    }\n\n    canSubmit(): boolean {\n        return this.isValid() &&\n            (this.isMaintainer || (this.reason && this.reason.trim().length > 0)) &&\n            (this.isNew || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    onSubmit(): void {\n        if (this.isNew) {\n            const action: CreateGeoObjectAction = this.attributeEditor.getActions()[0];\n\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.service.applyGeoObjectCreate(action.parentJson, action.geoObjectJson, this.isNew, this.datasetId, this.reason, false).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n\n            // this.service.applyGeoObjectCreate(this.hierarchies, this.postGeoObject, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n            //     if (!applyInfo.isChangeRequest) {\n            //         this.featureChange.emit(this.postGeoObject);\n            //     }\n            //     this.panelSubmit.emit(applyInfo);\n            // }).catch((err: HttpErrorResponse) => {\n            //     this.error(err);\n            // });\n        } else {\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.service.applyGeoObjectEdit(this.postGeoObject.attributes.code, this.type.code, this.attributeEditor.getActions(), this.datasetId, this.reason, false).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n\n        this.geometryService.stopEditing();\n    }\n\n    onManageAttributeVersion(attribute: AttributeType): void {\n        this.attribute = attribute;\n        this.mode = this.MODE.VERSIONS;\n    }\n\n    onManageHiearchyVersion(hierarchy: HierarchyOverTime): void {\n        this.hierarchy = hierarchy;\n        this.mode = this.MODE.HIERARCHY;\n    }\n\n    onEditAttributes(): void {\n        this.setEditMode(!this.isEdit);\n\n        // window.document.getElementById(\"navigator-left-sidebar\").scroll({\n        //     top: 0,\n        //     behavior: \"smooth\"\n        // });\n    }\n\n    setEditMode(value: boolean): void {\n        this.isEdit = value;\n        this.reason = null;\n\n        this.modeChange.emit(this.isEdit);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div *ngIf=\"type\">\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>  \n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{type.label.localizedValue}}</h3>\n    </div>      \n  </div>\n  <div *ngIf=\"mode == MODE.ATTRIBUTES && postGeoObject != null\">\n    <!-- Attributes tab -->\n    <geoobject-shared-attribute-editor  *ngIf=\"hierarchies && postGeoObject\"\n      #attributeEditor \n      [geoObjectType]=\"type\" \n      [postGeoObject]=\"postGeoObject\" \n      [isNew]=\"isNew\" \n      [isGeometryInlined]=\"false\"\n      [hierarchies]=\"hierarchies\"\n      [readOnly]=\"!isEdit\"\n      (valid)=\"setValid($event)\"\n      [requestedDate]=\"forDate\"\n      (calculatedDateChange)=\"editorForDateChange($event)\"\n      [forDate]=\"forDate\"\n      [datasetId]=\"datasetId\"\n      > \n    </geoobject-shared-attribute-editor>\n    \n    <div *ngIf=\"isEdit && !isMaintainer\" class=\"form-group\" style=\"z-index: 0;\">\n      <label> \n        <localize key=\"change.request.reason.label\"></localize>\n      </label>\n      <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" class=\"form-control\" name=\"reason-input\" required></textarea>\n    </div>\n\n    <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    \n      <button *ngIf=\"!readOnly && !isEdit\" type=\"submit\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n        <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n      </button>\n      \n      <button *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-default\" (click)=\"onCancelInternal()\">\n        <localize key=\"modal.button.cancel\"></localize>\n      </button>\n      <button *ngIf=\"isEdit\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!canSubmit()\">\n        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n      </button>\n\n    </div>\n  </div>\n</div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventModalComponent } from \"./transition-event-modal.component\";\nimport { AuthService, DateService, LocalizationService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\n@Component({\n\n    selector: \"transition-event-table\",\n    templateUrl: \"./transition-event-table.component.html\",\n    styleUrls: [\"./transition-event-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class TransitionEventTableComponent {\n\n    page: PageResult<TransitionEvent> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    attrConditions: any = [];\n\n    dateCondition = {\n        attribute: \"eventDate\",\n        startDate: \"\",\n        endDate: \"\"\n    };\n\n    beforeTypeCondition = {\n        attribute: \"beforeTypeCode\",\n        value: \"\"\n    };\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[] = [];\n\n    bsModalRef: BsModalRef;\n\n    readOnly: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private modalService: BsModalService, private iService: IOService, public dateService: DateService, private authService: AuthService, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.readOnly = !this.authService.isSRA() && !this.authService.isRA() && !this.authService.isRM();\n        this.refresh();\n\n        this.attrConditions.push(this.dateCondition);\n        this.attrConditions.push(this.beforeTypeCondition);\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            this.types = this.filterTypesBasedOnMyOrg(types);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    filterTypesBasedOnMyOrg(types) {\n        let isSRA = this.authService.isSRA();\n        let myOrgTypes = [];\n        let myOrgs: string[] = this.authService.getMyOrganizations();\n\n        for (let i = 0; i < types.length; ++i) {\n            const type = types[i];\n            const orgCode = type.orgCode;\n            let myOrgIndex = myOrgs.indexOf(orgCode);\n\n            if (myOrgIndex !== -1 || isSRA) {\n                myOrgTypes.push(type);\n            }\n        }\n\n        return myOrgTypes;\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getPage(this.page.pageSize, pageNumber, this.attrConditions).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    filterChange(): void {\n        this.refresh(this.page.pageNumber);\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(false);\n        this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n            this.refresh(this.page.pageNumber);\n        });\n    }\n\n    deleteEvent(jsEvent, transitionEvent: TransitionEvent): void {\n        jsEvent.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + transitionEvent.eventId + \"]\";\n        this.bsModalRef.content.data = transitionEvent;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.service.delete(transitionEvent).then(response => {\n                this.refresh(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(event: TransitionEvent): void {\n        this.service.getDetails(event.oid).then(response => {\n            this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(false, response);\n            this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n                this.refresh(this.page.pageNumber);\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n\n<div>\n  <div class=\"row\" style=\"padding-top:10px; padding-bottom: 10px;\">\n    <span class=\"col-md-4\">\n      <label for=\"beforeTypeFilter\">\n        <localize key=\"transition.event.beforeType\"></localize>\n      </label>\n      <select id=\"beforeTypeFilter\" name=\"beforeTypeFilter\" class=\"select-area\" [(ngModel)]=\"beforeTypeCondition.value\"\n        (change)=\"filterChange()\">\n        <option></option>\n        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n      </select>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"startDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.startDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'startDateFilter'\" [allowFutureDates]=\"false\" name=\"startDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\">\n      </date-field>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"endDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.endDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'endDateFilter'\" [allowFutureDates]=\"false\" name=\"endDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\"></date-field>\n    </span>\n  </div>\n  <div class=\"row\">\n    <span class=\"col-md-4\"></span>\n    <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(dateCondition.startDate, dateCondition.endDate)\">\n      <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n    </span>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.actions\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.date\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.id\"></localize>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-event\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:left;\">\n                <a *ngIf=\"event.permissions.includes('READ')\" (click)=\"onView(event)\" [ngClass]=\"{'fa-pencil' : event.permissions.indexOf('WRITE') !== -1, 'fa-eye' : event.permissions.indexOf('WRITE') === -1}\" class=\"fa\" aria-hidden=\"true\"></a>\n                <a *ngIf=\"event.permissions.includes('DELETE')\" (click)=\"deleteEvent($event, event)\" class=\"fa fa-trash\" aria-hidden=\"true\"></a>\n              </td>\n              <td class=\"col-md-1\">\n                <h5><strong><date-text [date]=\"event.eventDate\"></date-text></strong></h5>\n              </td>\n              <td class=\"col-md-4\">\n                <h5><strong>{{event.description.localizedValue}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.beforeTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.afterTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.eventId}}</strong></h5>\n              </td>\n            </tr>\n          </ng-template>\n        </tbody>\n      </table>\n      <div *ngIf=\"!this.readOnly\" style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n          <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n            <localize key=\"hierarchy.management.button.create\"></localize>\n          </button>\n        </div>\n      </div>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","/* eslint-disable indent */\n/* eslint-disable quotes */\nimport { Component, OnDestroy, OnInit, ViewChild, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observable, Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { IOService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Transition, TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\n\nimport { DndDropEvent } from \"ngx-drag-drop\";\nimport * as uuid from \"uuid\";\n\n/* D3 Stuffs */\nimport * as d3 from \"d3\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const VIEWPORT_SCALE_FACTOR_X: number = 1.0;\nexport const VIEWPORT_SCALE_FACTOR_Y: number = 1.0;\n\nexport const GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR: string = \"#6BA542\"; // #3E2A5A or \"purple\"\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\n@Component({\n    selector: \"transition-event-modal\",\n    templateUrl: \"./transition-event-modal.component.html\",\n    styleUrls: [\"./transition-event-modal.component.css\"]\n})\nexport class TransitionEventModalComponent implements OnInit, OnDestroy {\n\n    @ViewChild(\"typeaheadParent\") typeaheadParent;\n\n    message: string = null;\n\n    event: TransitionEvent = null;\n\n    activeTransition: Transition = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onEventChange: Subject<TransitionEvent>;\n\n    afterTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    beforeTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    valid: boolean = false;\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: true\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private changeDetector: ChangeDetectorRef, public rService: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onEventChange = new Subject();\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            let myOrgs: string[] = this.authService.getMyOrganizations();\n            let myOrgTypes = [];\n            let afterTypes = [];\n            let isSRA = this.authService.isSRA();\n            for (let i = 0; i < types.length; ++i) {\n                const orgCode = types[i].orgCode;\n                const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                let myOrgIndex = myOrgs.indexOf(orgCode);\n\n                if (myOrgIndex !== -1 || isSRA) {\n                    afterTypes.push(types[i]);\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n            }\n            this.beforeTypes = myOrgTypes;\n            this.afterTypes = afterTypes;\n\n            this.readonly = this.readonly || this.event.permissions.indexOf(\"WRITE\") === -1;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.onEventChange.unsubscribe();\n    }\n\n    init(readonly: boolean, event?: TransitionEvent): void {\n        this.readonly = readonly;\n\n        if (event != null) {\n            this.event = event;\n        } else {\n            this.event = {\n                beforeTypeCode: \"\",\n                afterTypeCode: \"\",\n                eventDate: \"\",\n                permissions: [\"WRITE\", \"READ\", \"DELETE\", \"CREATE\"],\n                description: this.lService.create(),\n                transitions: []\n            };\n        }\n\n        setTimeout(() => {\n            this.onChange();\n        }, 0);\n    }\n\n    setActiveTransition(transition: Transition) {\n        let highlight = (active: boolean, trans: Transition) => {\n            let colorable = d3.selectAll('#svgHolder p[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],p[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            colorable.style(\"color\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_GO_LABEL_COLOR);\n\n            let fillable = d3.selectAll('#svgHolder circle[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],circle[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            fillable.attr(\"fill\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_CIRCLE_FILL);\n\n            let strokeable = d3.selectAll('#svgHolder path[data-transOid=\"' + trans.oid + '\"]');\n            strokeable.attr(\"stroke\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_LINE_COLOR);\n        };\n\n        if (this.activeTransition != null) {\n            highlight(false, this.activeTransition);\n        }\n\n        this.activeTransition = transition;\n\n        if (transition != null) {\n            highlight(true, transition);\n        }\n    }\n\n    onCreate(): void {\n        this.event.transitions.push({\n            oid: uuid.v4(),\n            isNew: true,\n            sourceCode: \"\",\n            sourceType: \"\",\n            targetCode: \"\",\n            targetType: \"\",\n            transitionType: \"\",\n            impact: \"\",\n            order: this.event.transitions.length\n        });\n    }\n\n    onChange(): void {\n        this.calculateDerivedAttributes();\n        this.renderVisual();\n\n        // Register highlight event listeners\n        let that = this;\n\n        setTimeout(() => {\n            d3.selectAll(\".transition\").on(\"mouseover\", function(mouseEvent) {\n                let d3This: any = this;\n                let transitionOid = d3This.getAttribute(\"data-transOid\");\n\n                let index = that.event.transitions.findIndex(trans => trans.oid === transitionOid);\n\n                that.setActiveTransition(that.event.transitions[index]);\n            });\n            d3.select(\"#transition-container\").on(\"mouseleave\", function(mouseEvent) {\n                that.setActiveTransition(null);\n            });\n        }, 0);\n\n        this.validChange();\n    }\n\n    getTypeAheadObservable(isSource: boolean, transition: Transition, typeCode: string, property: string): Observable<any> {\n        let date = isSource ? this.dateService.addDay(-1, this.event.eventDate) : this.event.eventDate;\n        return new Observable((observer: any) => {\n            this.rService.getGeoObjectSuggestions(transition[property], typeCode, null, null, null, date, date).then(results => {\n                let filtered = results.filter(result => {\n                  let pair = {\n                    sourceCode: isSource ? result.code : transition.sourceCode,\n                    targetCode: isSource ? transition.targetCode : result.code\n                  };\n\n                  for (let i = 0; i < this.event.transitions.length; ++i) {\n                      let transition = this.event.transitions[i];\n\n                      if (transition.sourceCode === pair.sourceCode && transition.targetCode === pair.targetCode) {\n                          return false;\n                      }\n                  }\n\n                  return true;\n                });\n\n                observer.next(filtered);\n            });\n        });\n    }\n\n    typeaheadOnSelect(selection: any, transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = selection.item.code;\n            transition.targetType = selection.item.typeCode;\n            transition.targetText = selection.item.name + \" (\" + selection.item.code + \")\";\n        } else {\n            transition.sourceCode = selection.item.code;\n            transition.sourceType = selection.item.typeCode;\n            transition.sourceText = selection.item.name + \" (\" + selection.item.code + \")\";\n        }\n\n        this.onChange();\n    }\n\n    clear(transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = \"\";\n            transition.targetType = \"\";\n            transition.targetText = \"\";\n        } else {\n            transition.sourceCode = \"\";\n            transition.sourceType = \"\";\n            transition.sourceText = \"\";\n        }\n\n        this.onChange();\n    }\n\n    localizeTransitionImpact(impact: string): string {\n        return this.lService.decode(\"transition.event.\" + impact.toLowerCase());\n    }\n\n    localizeTransitionType(type: string): string {\n        return type == null ? null : this.lService.decode(\"transition.event.type.\" + type.toLowerCase());\n    }\n\n    validChange() {\n        setTimeout(() => {\n            this.valid = (this.event.eventDate != null && this.event.eventDate.length > 0) &&\n                this.event.transitions.length > 0 &&\n                this.event.afterTypeCode != null &&\n                this.event.beforeTypeCode != null;\n        }, 0);\n    }\n\n    remove(index: number): void {\n        this.event.transitions.splice(index, 1);\n        this.onChange();\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.event).then(response => {\n            this.onEventChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    calculateDerivedAttributes(): void {\n        let stats = {};\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                if (stats[trans.sourceCode] == null) {\n                    stats[trans.sourceCode] = {\n                        source: 1,\n                        target: 0\n                    };\n                } else {\n                    stats[trans.sourceCode].source++;\n                }\n\n                if (stats[trans.targetCode] == null) {\n                    stats[trans.targetCode] = {\n                        source: 0,\n                        target: 1\n                    };\n                } else {\n                    stats[trans.targetCode].target++;\n                }\n            }\n        });\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let sourceStats = stats[trans.sourceCode];\n                let targetStats = stats[trans.targetCode];\n\n                let updown = \"UPGRADE\";\n                if (trans.transitionType != null && trans.transitionType.indexOf(\"DOWNGRADE\") !== -1) {\n                    updown = \"DOWNGRADE\";\n                }\n\n                if (sourceStats.source === 1 && targetStats.target === 1) {\n                    trans.transitionType = \"REASSIGN\";\n                    trans.impact = \"FULL\";\n                } else if (sourceStats.source > 1) {\n                    trans.impact = \"PARTIAL\";\n\n                    if (targetStats.target > 1) {\n                        trans.transitionType = \"MERGE\";\n                    } else {\n                        trans.transitionType = \"SPLIT\";\n                    }\n                } else if (targetStats.target > 1) {\n                    trans.impact = \"FULL\";\n                    trans.transitionType = \"MERGE\";\n                }\n\n                if (trans.sourceType !== trans.targetType) {\n                    if (trans.transitionType === \"REASSIGN\") {\n                        trans.typeUpdown = updown;\n                        delete trans.typePart;\n                        trans.transitionType = trans.typeUpdown;\n                    } else {\n                        trans.typeUpdown = updown;\n                        trans.typePart = trans.transitionType;\n                        trans.transitionType = trans.typeUpdown + \"_\" + trans.typePart;\n                    }\n                } else {\n                    delete trans.typePart;\n                }\n            }\n        });\n    }\n\n    onChangeTypeUpdown(transition: any): void {\n        if (transition.typePart) {\n            transition.transitionType = transition.typeUpdown + \"_\" + transition.typePart;\n        } else {\n            transition.transitionType = transition.typeUpdown;\n        }\n    }\n\n    /* Drag Drop Transitions */\n    onDragStart(event:DragEvent) {\n        // console.log(\"drag started\", JSON.stringify(event, null, 2));\n    }\n\n    onDragEnd(event:DragEvent) {\n        // console.log(\"drag ended\", JSON.stringify(event, null, 2));\n    }\n\n    onDragged(item: any, type: string) {\n        // console.log(\"onDragged\", item, type);\n    }\n\n    onDraggableCopied(event:DragEvent) {\n        // console.log(\"draggable copied\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableLinked(event:DragEvent) {\n        // console.log(\"draggable linked\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableMoved(event:DragEvent) {\n        // console.log(\"draggable moved\", JSON.stringify(event, null, 2));\n    }\n\n    onDragCanceled(event:DragEvent) {\n        // console.log(\"drag cancelled\", JSON.stringify(event, null, 2));\n    }\n\n    onDragover(event:DragEvent) {\n        // console.log(\"dragover\", JSON.stringify(event, null, 2));\n    }\n\n    onDrop(event:DndDropEvent) {\n        let transition: Transition = event.data;\n        let index: number = event.index;\n\n        // Remove from array\n        this.event.transitions.splice(transition.order, 1);\n\n        // Calculate new index, which may have shifted due to us removing the transition.\n        let newIndex = (index > transition.order) ? index - 1 : index;\n\n        // Insert us back into the array at newIndex\n        this.event.transitions.splice(newIndex, 0, transition);\n\n        // Update order for all transitions as elements have shifted\n        for (let i = 0; i < this.event.transitions.length; ++i) {\n            this.event.transitions[i].order = i;\n        }\n\n        window.setTimeout(() => { this.onChange(); }, 0);\n    }\n\n    /* D3 Stuff */\n    private renderVisual(): void {\n        if (this.event.transitions == null || this.event.transitions.length === 0) {\n            d3.select(\"#svg\").remove();\n            return;\n        }\n        d3.select(\"#svg\").remove();\n\n        let svg = d3.select(\"#svg\");\n\n        if (svg.node() == null) {\n            svg = d3.select(\"#svgHolder\").append(\"svg\");\n            svg.attr(\"id\", \"svg\");\n        }\n\n        let appData = this.generateAppData();\n        let renderingData = this.generateRenderingData(appData);\n\n        /*\n        let autoBox = function autoBox() {\n            document.body.appendChild(this);\n            const { x, y, width, height } = svg.node().getBBox();\n            document.body.removeChild(this);\n            return [x, y, width, height];\n        };\n        */\n\n        let chart = () => {\n            const root = renderingData.d3;\n\n            let links = svg.append(\"g\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", GRAPH_LINE_COLOR)\n                .attr(\"stroke-opacity\", 0.4)\n                .attr(\"stroke-width\", 0.4 * DRAW_SCALE_MULTIPLIER);\n            links.selectAll(\"path\")\n                .data(root.links())\n                .join(\"path\")\n                    .style(\"display\", function(d: any) {\n                        return d.source.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"d\", (d: any) => `\n                      M${d.target.y},${d.target.x}\n                       ${d.source.y},${d.source.x}\n                    `)\n                    .attr(\"data-transOid\", (d: any) => d.source.data.name === \"root\" ? null : appData.linkDataMappings[d.source.data.code + \":\" + d.target.data.code]);\n\n            svg.append(\"g\")\n                .selectAll(\"circle\")\n                .data(root.descendants())\n                .join(\"circle\")\n                    .style(\"display\", function(d: any) {\n                        return d.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"cx\", (d: any) => d.y)\n                    .attr(\"cy\", (d: any) => d.x)\n                    .attr(\"fill\", (d: any) => GRAPH_CIRCLE_FILL)\n                    .attr(\"r\", 0.9 * DRAW_SCALE_MULTIPLIER)\n                    .attr(\"data-goCode\", (d: any) => d.data.code)\n                    .attr(\"data-depth\", (d: any) => d.depth);\n\n            svg.append(\"g\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-size\", 2 * DRAW_SCALE_MULTIPLIER)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"stroke-width\", 3)\n              .selectAll(\"foreignObject\")\n              .data(root.descendants())\n              .join(\"foreignObject\")\n                .style(\"display\", function(d: any) {\n                    return d.depth === 0 ? \"none\" : null;\n                })\n                .attr(\"x\", (d: any) => (d.y + ((d.depth === 1) ? -13 : 1)))\n                .attr(\"y\", (d: any) => (d.x) + ((d.depth === 1) ? -2 : -3))\n                .attr(\"font-size\", \"0.7em\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"width\", 12)\n                .attr(\"height\", 8)\n              .append(\"xhtml:p\")\n                .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n                .attr(\"data-goCode\", (d: any) => d.data.code)\n                .attr(\"data-depth\", (d: any) => d.depth)\n                .style(\"margin\", \"0.5px\")\n                .style(\"vertical-align\", \"middle\")\n                .style(\"line-height\", 1.5)\n                .style(\"color\", GRAPH_GO_LABEL_COLOR)\n                .style(\"padding-left\", \"0.4px\")\n                .style(\"padding-top\", \"0.2px\")\n                .html((d: any) => d.data.name)\n              .filter((d: any) => d.depth === 1)\n                .style(\"text-align\", \"right\");\n\n            renderingData.multipleParentLinks.forEach(function(link) {\n                links.append(\"path\")\n                    .attr(\"d\", () => `\n                      M${link.parent.y},${link.parent.x}\n                       ${link.child.y},${link.child.x}\n                    `)\n                    .attr(\"data-transOid\", () => link.oid);\n            });\n\n            // return svg.attr(\"viewBox\", autoBox).node();\n        };\n\n        chart();\n\n        this.calculateSvgViewBox();\n    }\n\n    generateRenderingData(appData: any): any {\n        let width = 100;\n\n        const root: any = d3.hierarchy(appData.d3Data).sort((a, b) => d3.ascending(a.data.order, b.data.order));\n        root.dx = 5 * DRAW_SCALE_MULTIPLIER;\n        root.dy = width / (root.height + 1);\n        let d3RenderingData = d3.tree().nodeSize([root.dx, root.dy]).separation(() => 1.5)(root);\n\n        let multipleParentLinks = [];\n        appData.multipleParentLinks.forEach(function(link) {\n            let parentNode = root.find(node => node.data.isSource && node.data.code === link.parent.code);\n            let childNode = root.find(node => !node.data.isSource && node.data.code === link.child.code);\n\n            if (parentNode != null && childNode != null) {\n                multipleParentLinks.push({\n                    parent: parentNode,\n                    child: childNode,\n                    oid: link.oid\n                });\n            }\n        });\n\n        return {\n            d3: d3RenderingData,\n            multipleParentLinks: multipleParentLinks\n        };\n    }\n\n    generateAppData(): any {\n        let children = [];\n        let multipleParentLinks = []; // D3 can't handle multiple parents so we have to draw them ourselves.\n        let linkDataMappings = {}; // D3 doesn't allow us to put data on the link itself. Our link needs an oid. So this is a hack to store data on a link.\n\n        let isChildOfOtherNode = (code: string) => {\n            for (let i = 0; i < children.length; ++i) {\n                let child = children[i];\n\n                if (child.children) {\n                    for (let j = 0; j < child.children.length; ++j) {\n                        let grandChild = child.children[j];\n\n                        if (grandChild.code === code) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let index = children.findIndex(child => child.code === trans.sourceCode);\n                linkDataMappings[trans.sourceCode + \":\" + trans.targetCode] = trans.oid;\n\n                let childExists = isChildOfOtherNode(trans.targetCode);\n                let grandChild = null;\n                if (!childExists) {\n                    grandChild = {\n                        name: trans.targetText,\n                        code: trans.targetCode,\n                        isSource: false,\n                        children: []\n                    };\n                } else {\n                    multipleParentLinks.push({\n                        oid: trans.oid,\n                        child: {\n                            code: trans.targetCode,\n                            text: trans.targetText,\n                            type: trans.targetType\n                        },\n                        parent: {\n                            code: trans.sourceCode,\n                            text: trans.sourceText,\n                            type: trans.sourceType\n                        }\n                    });\n                }\n\n                if (index !== -1) {\n                    let child = children[index];\n\n                    let index2 = child.children.findIndex(child => child.code === trans.targetCode);\n\n                    if (index2 != null && grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n                } else {\n                    let child: any = {\n                        name: trans.sourceText,\n                        code: trans.sourceCode,\n                        children: [],\n                        isSource: true\n                    };\n\n                    if (grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n\n                    children.push(child);\n                }\n            }\n        });\n\n        return {\n            d3Data: {\n                name: \"root\",\n                children: children\n            },\n            multipleParentLinks: multipleParentLinks,\n            linkDataMappings: linkDataMappings\n        };\n    }\n\n    calculateSvgViewBox(): void {\n        let svg: any = d3.select(\"#svg\");\n        let svgNode: any = svg.node();\n\n        let { x, y, width, height } = svgNode.getBBox();\n\n        const xPadding = 0;\n        const yPadding = 2;\n        svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X + \" \" + (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y);\n\n        // width = (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X;\n        // height = (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y;\n\n        // d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n        // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"modal-body row\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset *ngIf=\"event != null\">\n            <div class=\"col-md-6\">\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label>\n\t\t                        <localize key=\"transition.event.date\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                            <date-text [date]=\"event.eventDate\"></date-text>                            \n\t\t                    </span>\n\t\t                    <date-field *ngIf=\"!readonly\" [(value)]=\"event.eventDate\" [classNames]=\"['form-control']\" label=\"\"\n\t\t                        [inputName]=\"'eventDate'\" [allowFutureDates]=\"false\" name=\"eventDate\" [required]=\"true\" (validChange)=\"validChange($event)\"\n\t\t                        [disable]=\"readonly || event.transitions.length > 0\"></date-field>\n\t\t                </div>\n\t\t            </div>\n\t\t        \n\t\t            <div class=\"row-holder\" *ngFor=\"let localeValue of event.description.localeValues\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label> <localize style=\"display:block;\" key=\"transition.event.description\"></localize>\n\t\t                        <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n\t\t                            </convert-key-label>)</span>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n\t\t                        class=\"form-control\" [disabled]=\"readonly\"\n\t\t                        [required]=\"false\" />\n\t\t                </div>\n\t\t            </div>\n\t\t\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"beforeTypeCode\">\n\t\t                        <localize key=\"transition.event.beforeType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && beforeTypes != null\" class=\"holder\">\n\t\t                    <select id=\"beforeTypeCode\" name=\"beforeTypeCode\" class=\"select-area\" [(ngModel)]=\"event.beforeTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of beforeTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.beforeTypeLabel\" name=\"beforeType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n\t\t            \n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"afterTypeCode\">\n\t\t                        <localize key=\"transition.event.afterType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && afterTypes != null\" class=\"holder\">\n\t\t                    <select id=\"afterTypeCode\" name=\"afterTypeCode\" class=\"select-area\" [(ngModel)]=\"event.afterTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of afterTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.afterTypeLabel\" name=\"afterType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n            </div>\n            \n            <div class=\"col-md-6\">\n\t\t\t\t      <div class=\"row\" style=\"text-align: center;\">\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.before\"></localize></label>\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.after\"></localize></label>\n\t\t\t\t      </div>\n\t\t\t\t    \n\t\t\t\t      <div style=\"margin-top: 10px;\" id=\"svgHolder\"></div>\n\t\t\t\t    </div>\n\t\t\t\t    \n            <div class=\"row-holder\" *ngIf=\"event.beforeTypeCode != null && event.beforeTypeCode !== '' && event.afterTypeCode != null && event.afterTypeCode !== '' && event.eventDate != null && event.eventDate !== ''\">\n                    <table class=\"table\" style=\"border-collapse: separate;\">\n                        <thead>\n\t                        <tr style=\"height: 50px;color: grey;\">\n\t\t                        <th *ngIf=\"!readonly\"></th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.before\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.impact\"></localize> </th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.after\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.type\"></localize> </th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\"></th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\" *ngIf=\"!readonly\"></th>\n\t                        </tr>\n                        </thead>\n                        <tbody class=\"dndList\" id=\"transition-container\"\n                          [dndDropzone]=\"readonly ? null : true\"\n                          [dndEffectAllowed]=\"readonly ? null : 'copyMove'\"\n                          (dndDrop)=\"readonly ? null : onDrop($event)\"\n                        >\n                            <tr *ngIf=\"!readonly\" class=\"dndPlaceholder\" dndPlaceholderRef>\n                              <td colspan=\"7\"></td>\n                            </tr>\n                        \n                            <tr *ngFor=\"let transition of event.transitions; let i = index;\" class=\"transition\" style=\"height: 50px;\" [attr.data-transOid]=\"transition.oid\"\n                                [dndDraggable]=\"readonly ? null : transition\"\n                                [dndEffectAllowed]=\"readonly ? null : draggable.effectAllowed\"\n                                [dndDisableIf]=\"readonly ? null : draggable.disable\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndStart)=\"readonly ? null : onDragStart($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCopied)=\"readonly ? null : onDraggableCopied($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndLinked)=\"readonly ? null : onDraggableLinked($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndMoved)=\"readonly ? null : onDraggableMoved($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCanceled)=\"readonly ? null : onDragCanceled($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndEnd)=\"readonly ? null : onDragEnd($event)\"\n                            >\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle; text-align: center;\">\n                                  <a style=\"font-size:25px; color: #969696; cursor: move;\" class=\"fa fa-bars\"></a>\n                                </td>\n                                <td>\n                                    <div class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.source-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.sourceText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(true, transition, this.event.beforeTypeCode, 'sourceText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'sourceText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentS-' + i\">\n\n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentS-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'sourceText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td style=\"vertical-align:middle;\">\n                                    <label>{{localizeTransitionImpact(transition.impact)}}</label>\n                                </td>\n                                <td>\n                                    <div  class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.target-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.targetText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(false, transition, this.event.afterTypeCode, 'targetText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'targetText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentT-' + i\">\n                                        \n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentT-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'targetText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td *ngIf=\"transition.typePart || !transition.typeUpdown\" style=\"vertical-align:middle;\">\n                                    <label *ngIf=\"!transition.typeUpdown\">{{localizeTransitionType(transition.transitionType)}}</label>\n                                    <label *ngIf=\"transition.typePart\" style=\"min-width:80px;\">{{localizeTransitionType(transition.typePart)}}</label>\n                                </td>\n                                <td *ngIf=\"transition.typeUpdown\">\n                                    <select style=\"min-width:80px;\" *ngIf=\"transition.typeUpdown\" [name]=\"'transition.transitionType-updown-' + transition.oid + '-' + i\" class=\"select-area\"\n                                        [(ngModel)]=\"transition.typeUpdown\" (change)=\"onChangeTypeUpdown(transition)\" [disabled]=\"readonly\" required>\n                                        <option value=\"UPGRADE\"><localize key=\"transition.event.type.upgrade\"></localize></option>\n                                        <option value=\"DOWNGRADE\"><localize key=\"transition.event.type.downgrade\"></localize></option>\n                                    </select>\n                                </td>\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle;\">\n                                    <span class=\"clickable\" (click)=\"remove(i)\">\n                                        <a class=\"fa fa-trash\" style=\"font-size:30px;\" aria-hidden=\"true\"></a>\n                                    </span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"!readonly\" style=\"margin-left: 6px; margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                        <div class=\"col-md-6\">\n                            <i class=\"fa fa-plus clickable\" (click)=\"onCreate()\"> \n                                <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                            </i>\n                        </div>\n                    </div>\n\n                </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                            role=\"button\" [disabled]=\"form.invalid || !valid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType, BusinessTypeByOrg } from \"@registry/model/business-type\";\nimport { CreateBusinessTypeModalComponent } from \"./modals/create-business-type-modal.component\";\nimport { ManageBusinessTypeModalComponent } from \"./modals/manage-business-type-modal.component\";\n\n@Component({\n    selector: \"business-type-manager\",\n    templateUrl: \"./business-type-manager.component.html\",\n    styleUrls: [\"./business-type-manager.css\"]\n})\nexport class BusinessTypeManagerComponent implements OnInit {\n\n    message: string = null;\n    orgs: BusinessTypeByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: BusinessTypeService, private modalService: BsModalService, private router: Router, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.service.getByOrganization().then(orgs => {\n            this.orgs = orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(org: BusinessTypeByOrg): void {\n        this.bsModalRef = this.modalService.show(CreateBusinessTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(org);\n        this.bsModalRef.content.onBusinessTypeChange.subscribe((type: BusinessType) => {\n            org.types.push(type);\n        });\n    }\n\n    onView(type: BusinessType): void {\n        this.service.edit(type.oid).then(t => {\n            this.bsModalRef = this.modalService.show(ManageBusinessTypeModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(t, true);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onEdit(org: BusinessTypeByOrg, type: BusinessType): void {\n        this.service.edit(type.oid).then(t => {\n            this.bsModalRef = this.modalService.show(ManageBusinessTypeModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(t, false);\n\n            this.bsModalRef.content.onBusinessTypeChange.subscribe(t => {\n                const index = org.types.findIndex((tt) => type.code === tt.code);\n\n                if (index !== -1) {\n                    org.types[index] = t;\n                }\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDelete(org: BusinessTypeByOrg, type: BusinessType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + type.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.remove(type).then(() => {\n                org.types = org.types.filter((t) => {\n                    return t.code !== type.code;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"settings.organizations.heading\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.types && org.types.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"business.data.noTypes\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.types && org.types.length > 0\" class=\"type-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"business.data.types\"></localize></th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let type of org.types; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/business-type/' + type.oid\" routerLinkActive=\"active\">\n                                    {{type.displayLabel.localizedValue}}\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(type)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(org, type)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"modal.button.edit\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onDelete(org, type)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType } from \"@registry/model/business-type\";\n\n@Component({\n    selector: \"create-business-type-modal\",\n    templateUrl: \"./create-business-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateBusinessTypeModalComponent implements OnInit {\n\n    type: BusinessType;\n    organization: Organization = null;\n    message: string = null;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onBusinessTypeChange: Subject<BusinessType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: BusinessTypeService, private lService: LocalizationService, public bsModalRef: BsModalRef) {\n        this.onBusinessTypeChange = new Subject<BusinessType>();\n    }\n\n    ngOnInit(): void {\n        this.type = {\n            code: \"\",\n            organization: \"\",\n            displayLabel: this.lService.create(),\n            description: this.lService.create(),\n            attributes: [],\n            labelAttribute: \"\"\n        };\n    }\n\n    init(organization: any) {\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n\n        this.type.organization = this.organization.code;\n        this.type.organizationLabel = this.organization.label;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply(this.type).then(data => {\n            this.onBusinessTypeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"business.data.type\"></localize>\n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"type.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of type.displayLabel.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"type.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n            \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"type.organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"manage-business-type-modal\",\n    templateUrl: \"./manage-business-type-modal.component.html\",\n    styleUrls: [\"./manage-business-type-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageBusinessTypeModalComponent implements OnInit {\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    message: string = null;\n    type: BusinessType;\n    public onBusinessTypeChange: Subject<BusinessType>;\n    readOnly: boolean = false;\n\n    constructor(private service: BusinessTypeService, private localizationService: LocalizationService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.onBusinessTypeChange = new Subject();\n    }\n\n    init(type: BusinessType, readOnly: boolean) {\n        this.type = type;\n        this.readOnly = readOnly;\n    }\n\n    createAttribute(): void {\n        this.onModalStateChange({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.onModalStateChange({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        let confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.type };\n        confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        confirmBsModalRef.content.type = ModalTypes.danger;\n\n        confirmBsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteAttributeType(this.type.code, attr.code).then(() => {\n                this.type.attributes.splice(this.type.attributes.indexOf(attr), 1);\n\n                this.onBusinessTypeChange.next(this.type);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    onTypeChange(data: BusinessType): void {\n        this.onBusinessTypeChange.next(data);\n    }\n\n    update(): void {\n        this.service.apply(this.type).then(type => {\n            this.onBusinessTypeChange.next(type);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        if (this.type.oid != null) {\n            this.service.unlock(this.type.oid).then(() => {\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef.hide();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n\n  <!--\n    <modal-step-indicator></modal-step-indicator>\n  -->\n\n  <ng-container *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"type\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n      <div class=\"heading text-center\">\n        <h1>\n          <localize *ngIf=\"readOnly\" key=\"business.data.view.type\"></localize>\n          <localize *ngIf=\"!readOnly\" key=\"business.data.edit.type\"></localize>\n          : {{type.displayLabel.localizedValue}}\n        </h1>\n      </div>\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"type.code\" name=\"code\" disabled required>\n            </span>\n          </div>\n        </div>\n\n        <localized-input [disabled]=\"readOnly\" [(value)]=\"type.displayLabel\" key=\"data.property.label.label\">\n        </localized-input>\n        <!--  \n  <localized-text [disabled]=\"readOnly\" [(value)]=\"type.description\" key=\"data.property.label.description\"></localized-text>\n-->\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"attribute.organization.label\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"type.organizationLabel\" name=\"organization\" disabled required>\n            </span>\n          </div>\n        </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"attribute.labelAttribute.label\"></localize>                            \n            </label>\n          </div>\n          <div class=\"holder\">\n            <select class=\"select-area\" name=\"labelAttribute\" [(ngModel)]=\"type.labelAttribute\" [disabled]=\"readOnly\">\n              <option *ngFor=\"let attr of type.attributes\" [value]=\"attr.code\">\n                {{attr.label.localizedValue}}\n              </option>\n            </select>\n          </div>\n        </div>\n\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"panel panel-default\">\n              <div class=\"panel-body\">\n\n                <div class=\"table-responsive\">\n                  <table class=\"table\">\n                    <tbody>\n                      <tr *ngFor=\"let attr of type.attributes\">\n                        <td>{{attr.label.localizedValue}}</td>\n                        <td class=\"button-column\" style=\"width: 60px;\">\n                          <ng-container *ngIf=\"!readOnly && !attr.isDefault\">\n                            <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                              [title]=\"'modal.button.edit' | localize\"></a>\n                            <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\"\n                              (click)=\"removeAttributeType(attr, $event)\"\n                              [title]=\"'modal.button.remove' | localize\"></a>\n                          </ng-container>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\"\n                  aria-hidden=\"true\" (click)=\"createAttribute()\">\n                  <localize key=\"modal.button.add\"></localize>\n                </i>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"form.invalid\"\n              (click)=\"update()\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n  </ng-container>\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"type\"\n    [service]=\"service\" (geoObjectTypeChange)=\"onTypeChange($event)\" (stateChange)=\"onModalStateChange($event)\">\n  </define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"type\"\n    [attribute]=\"modalState.attribute\" [service]=\"service\" (geoObjectTypeChange)=\"onTypeChange($event)\"\n    (stateChange)=\"onModalStateChange($event)\">\n  </edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    (stateChange)=\"onModalStateChange($event)\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    [termOption]=\"modalState.termOption\" (stateChange)=\"onModalStateChange($event)\">\n  </edit-term-option-input>\n\n</div>","import { Component, OnInit } from \"@angular/core\";\n\nimport { ActivatedRoute } from \"@angular/router\";\nimport { GenericTableColumn, GenericTableConfig, TableColumnSetup, TableEvent } from \"@shared/model/generic-table\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"business-table\",\n    templateUrl: \"./business-table.component.html\",\n    styles: []\n})\nexport class BusinessTableComponent implements OnInit {\n\n    message: string = null;\n\n    businessType: BusinessType;\n\n    config: GenericTableConfig = null;\n    setup: TableColumnSetup = null;\n\n    constructor(private service: BusinessTypeService, private localizationService: LocalizationService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.get(oid).then(businessType => {\n            this.businessType = businessType;\n\n            const cols = [];\n\n            this.businessType.attributes.forEach(attribute => {\n                let type = \"TEXT\";\n                let sortable = true;\n\n                if (attribute.type === \"integer\" || attribute.type === \"decimal\") {\n                    type = \"NUMBER\";\n                } else if (attribute.type === \"boolean\") {\n                    type = \"BOOLEAN\";\n                } else if (attribute.type === \"term\" || attribute.type === \"classification\") {\n                    sortable = false;\n                } else if (attribute.type === \"date\") {\n                    type = \"DATE\";\n                }\n\n                cols.push({ header: attribute.label.localizedValue, field: attribute.code, type: type, sortable: sortable, filter: sortable, rowspan: 1, colspan: 1, headerType: \"ATTRIBUTE\" });\n            });\n\n            this.setup = {\n                headers: [cols],\n                columns: cols\n            };\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: false,\n                create: false,\n                label: this.businessType.displayLabel.localizedValue,\n                sort: [{ field: \"code\", order: 1 }]\n            };\n        });\n    }\n\n    onClick(event: TableEvent): void {\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <ng-container *ngIf=\"businessType != null\">\n            <h2>{{businessType.displayLabel.localizedValue}}</h2>\n            <generic-table [setup]=\"setup\" [config]=\"config\" [pageConfig]=\"{typeCode: businessType.code}\" (click)=\"onClick($event)\"></generic-table>\t\t\n        </ng-container>\n    </div>\n</div>\n\n","import { Component, OnInit, Input, ViewChild, ElementRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, EventService } from \"@shared/service\";\nimport { HierarchyService } from \"@registry/service\";\n\nimport { SpreadsheetModalComponent } from \"@registry/component/importer/modals/spreadsheet-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"business-importer\",\n    templateUrl: \"./business-importer.component.html\",\n    styleUrls: [\"./business-importer.css\"]\n})\nexport class BusinessImporterComponent implements OnInit {\n\n    currentDate: Date = new Date();\n\n    showImportConfig: boolean = true;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    businessTypes: BusinessType[] = [];\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    businessTypeCode: string = null;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Date\n     */\n    date: Date = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string = \"EXCEL\";\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private hierarchyService: HierarchyService,\n        private businessService: BusinessTypeService\n    ) { }\n\n    ngOnInit(): void {\n        this.businessService.getAll().then(businessTypes => {\n            this.businessTypes = businessTypes;\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = registry.contextPath + \"/excel/get-business-config\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.businessTypeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.date != null) {\n                form.append(\"date\", this.date);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.hierarchy = this.hierarchyCode;\n            configuration.geoObjectType = { code: this.typeCode };\n\n            this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            this.bsModalRef.content.init(configuration, \"geoObjectType\", true);\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n            <div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\n                <div class=\"heading\">\n                    <h2>\n                        <localize key=\"business.data.import\"></localize>\n                    </h2>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n                    <div *ngIf=\"!showImportConfig\">\n                        <div>\n                            <div class=\"row\">\n\n                                <div class=\"col-xs-1\"></div>\n                                <div class=\"col-xs-9 radio-btn-wrapper\">\n\n                                    <label class=\"radio\">\n                                        <input type=\"checkbox\" [value]=\"true\" [checked]=\"true\"\n                                            (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                                        <span [ngClass]=\"{'active' : true}\">\n                                            <localize key=\"importer.import.from-file.label\"></localize>\n                                        </span>\n                                        <p class=\"radio-label-description\">\n                                            <localize key=\"importer.import.from-file.description\"></localize>\n                                        </p>\n                                    </label>\n\n                                    <div class=\"button-holder\">\n                                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                                            <localize key=\"io.next\"></localize>\n                                        </button>\n                                    </div>\n                                </div>\n                                <div class=\"col-xs-2\"></div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"showImportConfig\">\n                        <div>\n                            <form #form=\"ngForm\" autocomplete=\"off\">\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"businessTypeCode\"> <localize key=\"business.data.type\"></localize></label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"businessTypeCode\" name=\"businessTypeCode\" class=\"select-area\"\n                                            [(ngModel)]=\"businessTypeCode\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let businessType of businessTypes\"\n                                                value={{businessType.code}}>{{businessType.displayLabel.localizedValue}}\n                                            </option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                                    <label class=\"col-md-2 text-right\" for=\"hierarchyCode\">\n                                        <localize key=\"io.modal.hierarchy\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\"\n                                            [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>\n                                                {{view.label}}</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                                    <label class=\"col-md-2 text-right\" for=\"code\">\n                                        <localize key=\"io.geoObjectType\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\"\n                                            (change)=\"onSelectType()\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>\n                                                {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n                                            </option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"strategy\">\n                                        <localize *ngIf=\"this.format === 'EXCEL'\"\n                                            key=\"spreadsheet.import.import.strategy\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"strategy\" name=\"strategy\" class=\"select-area\"\n                                            [(ngModel)]=\"importStrategy\" required>\n                                            <option *ngFor=\"let strategy of importStrategies\"\n                                                value={{strategy.strategy}}>{{strategy.label}}</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"date\">Date</label>\n                                    <div class=\"col-md-8\">\n                                        <date-field #dateFieldComponents [(value)]=\"date\" label=\"\" [inputName]=\"'date'\"\n                                            [allowFutureDates]=\"false\"></date-field>\n                                    </div>\n\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n\n                                    <label class=\"col-md-2 text-right\" for=\"copyBlank\">\n                                        <localize key=\"dataimporter.importblankcells\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"file\">\n                                        <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\"\n                                            type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xls, .xlsx\"\n                                            required />\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n\n                                <div class=\"form-group row\">\n                                    <div class=\"col-md-2\"></div>\n                                    <div class=\"button-holder col-md-8 text-right\">\n                                        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\"\n                                            (click)=\"onClick()\">\n                                            <localize key=\"io.submit\"></localize>\n                                        </button>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n    </div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse, HttpParams } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { HistoricalRow } from \"@registry/model/transition-event\";\nimport { AuthService, DateService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"historical-report\",\n    templateUrl: \"./historical-report.component.html\",\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class HistoricalReportComponent {\n\n    message: string = null;\n\n    page: PageResult<HistoricalRow> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    data = {\n        type: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    }\n\n    types: { label: string, code: string }[] = [];\n\n    isValid: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private iService: IOService, private authService: AuthService,\n        public dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.iService.listGeoObjectTypes(true).then(types => {\n            this.types = types;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getHistoricalReport(this.data.type, this.data.startDate, this.data.endDate, this.page.pageSize, pageNumber).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    exportToExcel(): void {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", this.data.type.toString());\n        params = params.set(\"startDate\", this.data.startDate.toString());\n        params = params.set(\"endDate\", this.data.endDate.toString());\n\n        window.location.href = registry.contextPath + \"/transition-event/export-excel?\" + params.toString();\n    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = (this.data.startDate != null && this.data.endDate != null && !this.dateService.after(this.data.startDate, this.data.endDate));\n        }, 0);\n    }\n\n    public error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n  <form #form=\"ngForm\" autocomplete=\"off\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"code\">\n        <localize key=\"io.geoObjectType\"></localize>\n      </label>\n      <div class=\"col-md-8\">\n        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"data.type\" required>\n          <option></option>\n          <option *ngFor=\"let type of types\" [value]=\"type.code\">\n            {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n          </option>\n        </select>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"startDate\">\n        <localize key=\"io.startDate\"></localize>\n      </label>\n      <div class=\"col-md-2\">\n        <date-field #dateFieldComponents [(value)]=\"data.startDate\" label=\"\" [inputName]=\"'startDate'\"\n          [allowFutureDates]=\"false\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n        <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(data.startDate, data.endDate)\">\n\t        <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n\t      </span>\n      </div>\n\n      <label class=\"col-md-2 text-right\" for=\"endDate\">\n        <localize key=\"io.endDate\"></localize>\n      </label>\n      <div class=\"col-md-4\">\n        <date-field #dateFieldComponents [(value)]=\"data.endDate\" label=\"\" [inputName]=\"'endDate'\"\n          [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"button-holder col-md-8 text-right\">\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"refresh()\">\n          <localize key=\"io.submit\"></localize>\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"exportToExcel()\">\n          <localize key=\"io.export\"></localize>\n        </button>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n  </form>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventId\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventDate\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeLabel\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterLabel\"></localize>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-row\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td>\n                {{row.eventId}}\n              </td>\n              <td>\n                <date-text [date]=\"row.eventDate\"></date-text>\n              </td>\n              <td>\n                {{row.eventType}}\n              </td>\n              <td>\n                {{row.description.localizedValue}}\n              </td>\n              <td>\n                {{row.beforeType}}\n              </td>\n              <td>\n                {{row.beforeCode}}\n              </td>\n              <td>\n                {{row.beforeLabel.localizedValue}}\n              </td>\n              <td>\n                {{row.afterType}}\n              </td>\n              <td>\n                {{row.afterCode}}\n              </td>\n              <td>\n                {{row.afterLabel.localizedValue}}\n              </td>\n            </tr>\n\n          </ng-template>\n        </tbody>\n      </table>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"historical-event-module\",\n    templateUrl: \"./historical-event-module.component.html\",\n    styleUrls: []\n})\nexport class HistoricalEventModuleComponent {\n\n    tab: string = \"HISTORICAL-EVENT\";\n\n    readOnly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.readOnly = this.authService.isRC(true);\n        this.tab = this.readOnly ? \"HISTORICAL-REPORT\" : \"HISTORICAL-EVENT\";\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>\n              <localize *ngIf=\"tab === 'HISTORICAL-EVENT'\" key=\"transition.event.events\"></localize>\n              <localize *ngIf=\"tab === 'HISTORICAL-REPORT'\" key=\"historical.row.report\"></localize>\n            </h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <div *ngIf=\"!readOnly\" class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"form-group button-row\">\n\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-EVENT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-EVENT' ? 'cr-filter-link-active' : ''\"\n                    style=\"border-bottom: 1px solid;\">\n                    <localize key=\"transition.event.events\"></localize> \n                  </a>\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-REPORT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-REPORT' ? 'cr-filter-link-active' : ''\"\n                    style=\"margin-left: 5px;border-bottom:1px solid;\">\n                    <localize key=\"historical.row.report\"></localize>\n                  </a>\n\n                </div>\n                <hr style=\"border-top:solid 3px #6BA542\" />\n\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <transition-event-table *ngIf=\"tab === 'HISTORICAL-EVENT'\"></transition-event-table>\n                <historical-report *ngIf=\"tab === 'HISTORICAL-REPORT'\"></historical-report>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit, ViewChildren, QueryList } from \"@angular/core\";\nimport { ActivatedRoute, Params } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { Organization } from \"@shared/model/core\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { Subscription } from \"rxjs\";\nimport Utils from \"@registry/utility/Utils\";\n\n@Component({\n    selector: \"list-type-manager\",\n    templateUrl: \"./list-type-manager.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeManagerComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n    listByType: ListTypeByType = null;\n    current: ListType = null;\n\n    subscription: Subscription = null;\n\n    noQueryParams = false;\n\n    @ViewChildren(\"typesByOrgIter\") typesByOrgIterEls: QueryList<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private registryService: RegistryService,\n        private route: ActivatedRoute,\n        private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.subscription = this.route.queryParams.subscribe((params: Params) => {\n            const typeCode = params.typeCode;\n            const listId = params.listId;\n\n            if (listId != null && listId.length > 0) {\n                this.service.entries(listId).then(current => {\n                    this.current = current;\n                    this.listByType = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else if (typeCode != null && typeCode.length > 0) {\n                this.service.listForType(typeCode).then(listByType => {\n                    this.listByType = listByType;\n                    this.current = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else {\n                this.noQueryParams = true;\n            }\n\n            // this.refresh();\n        });\n\n        if (this.typesByOrg.length === 0) {\n            this.registryService.init().then(response => {\n                this.typesByOrg = [];\n\n                //\n                // Order alphabetically\n                // TODO: sort these on the server\n                //\n                response.organizations.sort((a, b) => {\n                    if (a.label.localizedValue < b.label.localizedValue) {\n                        return -1;\n                    }\n                    if (a.label.localizedValue > b.label.localizedValue) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                //\n                // End sort\n\n                // put org of the user on top\n                if (!this.authService.isSRA()) {\n                    let pos = null;\n                    let myorg = this.authService.getMyOrganizations();\n                    pos = response.organizations.findIndex(org => {\n                        return org.code === myorg[0];\n                    });\n\n                    if (pos >= 0) {\n                        Utils.arrayMove(response.organizations, pos, 0);\n                    }\n                }\n\n                response.organizations.forEach((org, index) => {\n                    //\n                    // Post processing to better handle groups in the frontend\n                    //\n                    let orgTypes = response.types.filter(t => t.organizationCode === org.code);\n                    let orgTypesNoGroupMembers = orgTypes.filter(t => !t.superTypeCode);\n\n                    orgTypesNoGroupMembers.sort((a, b) => {\n                        if (a.label.localizedValue < b.label.localizedValue) {\n                            return -1;\n                        }\n                        if (a.label.localizedValue > b.label.localizedValue) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n\n                    let groupTypes = [];\n                    let groups = orgTypesNoGroupMembers.filter(gType => gType.isAbstract);\n                    groups.forEach(group => {\n                        let groupType = { group: group, members: [] };\n                        orgTypes.forEach(t => {\n                            if (t.superTypeCode === group.code) {\n                                groupType.members.push(t);\n                            }\n                        });\n                        groupTypes.push(groupType);\n                    });\n\n                    groupTypes.forEach(grpT => {\n                        let index = orgTypesNoGroupMembers.findIndex(grp => grpT.group.code === grp.code);\n                        if (index !== -1) {\n                            orgTypesNoGroupMembers.splice(index + 1, 0, ...grpT.members);\n                        }\n                    });\n                    //\n                    // End post processing\n                    //\n\n                    this.typesByOrg.push({ org: org, types: orgTypesNoGroupMembers });\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        this.typesByOrgIterEls.changes.subscribe(t => {\n            // Select the first type on load if no URL type params\n            if (this.noQueryParams && t.length > 0) {\n                let els = document.getElementsByClassName(\"got-li-item\");\n                if (els && els.length > 0) {\n                    let el = els[0].firstChild as HTMLElement;\n                    el.click();\n                }\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n\n            <nav class=\"col-md-3 list-sidebar\">\n                <div class=\"sidebar-section-content\">\n                    <ul *ngFor=\"let typeByOrg of typesByOrg;\" class=\"list-group\">\n                        <div>\n\n                            <div class=\"got-org-label-wrapper\">\n                                <h3>{{typeByOrg.org.label.localizedValue}}</h3>\n                            </div>\n\n                            <li class=\"list-group-item got-li-item\" [ngClass]=\"{'got-group-child' : type.superTypeCode}\" *ngFor=\"let type of typeByOrg.types\"\n                                [id]=\"type.code\" #typesByOrgIter>\n                                <a [routerLink]=\"'/registry/master-lists'\"\n                                    [queryParams]=\"{typeCode:type.code}\" routerLinkActive=\"active\">\n                                    {{type.label.localizedValue}}\n                                </a>\n                            </li>\n                        </div>\n                    </ul>\n                </div>\n            </nav>\n            <div class=\"col-md-9 list-type-content\">\n                <div id=\"overflow-div\">\n                    <lists-for-type *ngIf=\"listByType != null\" [listByType]=\"listByType\" (error)=\"error($event)\">\n                    </lists-for-type>\n\n                    <list-type *ngIf=\"current != null\" [list]=\"current\" (error)=\"error($event)\"></list-type>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ListTypePublishModalComponent } from \"./publish-modal.component\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"lists-for-type\",\n    templateUrl: \"./lists-for-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListsForTypeComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() listByType: ListTypeByType = null;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n\n    groups = {\n        single: [],\n        interval: [],\n        incremental: []\n    };\n\n    /*\n     * Observable subject for ListType changes.  Called when an update is successful\n     */\n    onListTypeChange: Subject<ListType>;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.onListTypeChange = new Subject();\n        this.onListTypeChange.subscribe(() => {\n            // Refresh\n            this.service.listForType(this.listByType.typeCode).then(listByType => {\n                this.listByType = listByType;\n\n                this.createGroups(this.listByType);\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.onListTypeChange.unsubscribe();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.listByType != null) {\n            this.createGroups(changes.listByType.currentValue);\n        }\n    }\n\n    createGroups(listByType: ListTypeByType): void {\n        this.groups = {\n            single: [],\n            interval: [],\n            incremental: []\n        };\n\n        listByType.lists.forEach(list => {\n            if (list.listType === \"single\") {\n                this.groups.single.push(list);\n            } else if (list.listType === \"interval\") {\n                this.groups.interval.push(list);\n            } else if (list.listType === \"incremental\") {\n                this.groups.incremental.push(list);\n            }\n        });\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange);\n    }\n\n    onEdit(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange, list);\n    }\n\n    onDelete(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + list.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(list).then(() => {\n                this.listByType.lists = this.listByType.lists.filter((value) => {\n                    return value.oid !== list.oid;\n                });\n\n                this.createGroups(this.listByType);\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n}\n","<ng-template #groupDetail let-lists='lists' let-listByType=\"listByType\">\n    <div *ngFor=\"let list of lists; let i = index;\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-7\" style=\"vertical-align:middle;line-height:40px;\">\n                            <i *ngIf=\"list.listType === 'single'\" class=\"fa fa-table\" aria-hidden=\"true\"></i>\n                            <span *ngIf=\"list.listType !== 'single'\" class=\"fa-stack fa-lg\">\n                                <i class=\"fa fa-table fa-stack-2x\"></i>\n                                <i class=\"fa fa-table fa-stack-1x second-stacked-el\"\n                                    style=\"margin-left:8px;margin-top:-4px;\"></i>\n                            </span>\n\n                            <a [routerLink]=\"'/registry/master-lists'\"\n                                [queryParams]=\"{typeCode:listByType.typeCode, listId: list.oid}\"\n                                routerLinkActive=\"active\" style=\"font-size:18px;\">\n                                {{list.displayLabel.localizedValue}}\n                            </a>\n                        </div>\n                        <div class=\"col-md-5\" style=\"text-align: right;\">\n                            <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                <localize key=\"masterlist.button.configuration\"></localize>\n                            </button>\n                            <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(list)\" class=\"btn btn-danger\"\n                                role=\"button\">\n                                <localize key=\"modal.button.delete\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'single'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"list.type.valid.on\"></localize>:\n                                    <date-text [date]=\"list.validOn\"></date-text>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'incremental'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"data.property.label.publishingStartDate\"></localize>:\n                                    <date-text [date]=\"list.publishingStartDate\"></date-text>\n                                </li>\n                                <li>\n                                    <localize key=\"data.property.label.frequency\"></localize>: {{list.frequency}}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'interval'\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.valid.on\"></localize>:\n                            <ul class=\"unstyled-list\">\n                                <li *ngFor=\"let interval of list.intervalJson\">\n                                    <date-text [date]=\"interval.startDate\"></date-text>\n                                    -\n                                    <date-text [date]=\"interval.endDate\"></date-text>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <p style=\"color: #707070;\">{{list.description.localizedValue}}</p>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    </div>\n\n</ng-template>\n\n\n<ng-container>\n    <div class=\"heading\">\n        <h2>\n            {{listByType.orgLabel}} : {{listByType.typeLabel}}\n        </h2>\n    </div>\n    <div class=\"subheading\">\n        <h3>\n            <localize key=\"list.type.heading\"></localize>\n        </h3>\n    </div>\n    <hr />\n    <div *ngIf=\"listByType.write\" style=\"margin-top:30px;margin-bottom:30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n            <div>\n                <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"list.type.button.create\"></localize>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"groups.single.length > 0\">\n        <h3>\n            <localize key=\"list.type.single.date\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.single, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"groups.incremental.length > 0\">\n        <h3>\n            <localize key=\"list.type.incremental.series\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.incremental, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"groups.interval.length > 0\">\n        <h3>\n            <localize key=\"list.type.interval.series\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.interval, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"listByType.lists.length === 0\" style=\"font-style:italic;\">\n        <localize key=\"list.type.no.lists.message\"></localize>\n    </div>\n\n</ng-container>","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { AuthService, LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeEntry, ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypePublishModalComponent } from \"./publish-modal.component\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { PublishVersionComponent } from \"./publish-version.component\";\nimport { Router } from \"@angular/router\";\nimport { LngLatBounds } from \"mapbox-gl\";\nimport * as ColorGen from \"color-generator\";\nimport { ListVectorLayerDataSource } from \"@registry/service/layer-data-source\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\n\n@Component({\n    selector: \"list-type\",\n    templateUrl: \"./list-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeComponent implements OnInit, OnDestroy {\n\n    @Input() list: ListType;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n    isRC: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private router: Router,\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService,\n        private geomService: GeometryService,\n        private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.isRC = this.authService.isGeoObjectTypeOrSuperRC({\n            organizationCode: this.list.organization,\n            code: this.list.typeCode,\n            superTypeCode: this.list.superTypeCode\n        });\n\n        // Expand the most recent version by default\n        this.list.entries.filter(entry => {\n            return (entry.versions != null && entry.versions.length > 0);\n        }).forEach(entry => {\n            entry.versions[0].collapsed = true;\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    toggleVersions(entry: ListTypeEntry) {\n        entry.showAll = !entry.showAll;\n    }\n\n    onCreate(entry: ListTypeEntry): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry);\n    }\n\n    onCreateEntries(): void {\n        // Expand the most recent version by default\n        this.service.createEntries(this.list.oid).then(list => {\n            list.entries.forEach(entry => {\n                if (this.list.entries.findIndex(e => e.oid === entry.oid) === -1) {\n                    this.list.entries.push(entry);\n                }\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error.emit(err);\n        });\n    }\n\n    onEdit(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry, version);\n    }\n\n    onViewConfiguration(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(list, null, list);\n    }\n\n    onDelete(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" Version [\" + version.versionNumber + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.removeVersion(version).then(response => {\n                const index = entry.versions.findIndex(v => v.oid === version.oid);\n\n                if (index !== -1) {\n                    entry.versions.splice(index, 1);\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    layerFromVersion(version: ListTypeVersion): any {\n        let dataSource = new ListVectorLayerDataSource(this.service, version.oid);\n        let layer = dataSource.createLayer(version.displayLabel, true, ColorGen().hexString());\n        this.geomService.zoomOnReady(layer.getId());\n        return this.geomService.getDataSourceFactory().serializeLayers([layer]);\n    }\n\n    onGotoMap(version: ListTypeVersion): void {\n        this.service.getBounds(version.oid).then(bounds => {\n            const queryParams: any = {\n                layers: JSON.stringify(this.layerFromVersion(version))\n            };\n\n            if (bounds && Array.isArray(bounds)) {\n                let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n                const array = llb.toArray();\n\n                queryParams.bounds = JSON.stringify(array);\n            }\n\n            this.router.navigate([\"/registry/location-manager\"], {\n                queryParams: queryParams\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error.emit(err);\n        });\n    }\n\n}\n","<ng-template #versionDetail let-version='version' let-entry=\"entry\">\n    <div class=\"row\" style=\"margin-bottom:5px;line-height:40px;\">\n        <div class=\"col-md-7\" style=\"vertical-align: middle;\">\n\n            <span class=\"clickable\" (click)=\"version.collapsed = !version.collapsed\"\n                [attr.aria-expanded]=\"!version.collapsed\">\n\n                <i class=\"fa fa-chevron-right\"\n                    [ngClass]=\"{'fa-chevron-down' : version.collapsed, 'fa-chevron-right' : !version.collapsed}\"\n                    style=\"font-size:14px;\"></i>\n\n                <span class=\"h4\" *ngIf=\"!version.working\">\n                    <localize key=\"list.type.version\"></localize> {{version.versionNumber}}\n                </span>\n                <span class=\"h4\" *ngIf=\"version.working\">\n                    <localize key=\"list.type.working.version\"></localize>\n                </span>\n                <span style=\"margin-left:10px;color:grey;\">\n                    <localize key=\"list.type.date.generated\"></localize>: {{version.createDate}}\n                </span>\n            </span>\n        </div>\n        <div class=\"col-md-5\" style=\"text-align: right;\">\n            <button type=\"submit\" (click)=\"onEdit(entry, version)\" class=\"btn btn-default\" role=\"button\">\n                <localize *ngIf=\"version.working\" key=\"masterlist.button.metadata\"></localize>\n                <localize *ngIf=\"!version.working\" key=\"masterlist.snapshot.button.metadata\"></localize>\n            </button>\n            <button *ngIf=\"list.write && !version.working\" type=\"submit\" (click)=\"onDelete(entry, version)\"\n                class=\"btn btn-danger\" role=\"button\">\n                <localize key=\"modal.button.delete\"></localize>\n            </button>\n        </div>\n\n    </div>\n\n    <div class=\"row\" style=\"margin-bottom:5px;\" [collapse]=\"!version.collapsed\">\n        <ul style=\"list-style:none;\">\n            <li>\n                <a *ngIf=\"(version.isMember || version.listMetadata.visibility === 'PUBLIC')\"\n                    [routerLink]=\"'/registry/master-list/' + version.oid\" routerLinkActive=\"active\">\n                    <localize key=\"list.type.list\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.listMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.list\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.listMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.listMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n            </li>\n            <li>\n                <a *ngIf=\"(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\"\n                    (click)=\"onGotoMap(version)\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.geospatialMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.geospatialMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n\n            </li>\n        </ul>\n    </div>\n</ng-template>\n\n\n<ng-container>\n\n    <div class=\"heading\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h2>\n                    {{list.displayLabel.localizedValue}}\n                </h2>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-12\" style=\"padding: 20px 15px;\">\n            <button type=\"submit\" (click)=\"onViewConfiguration(list)\" class=\"btn btn-default\" style=\"padding-right: 10px;\"\n                role=\"button\">\n                <localize key=\"masterlist.button.configuration\"></localize>\n            </button>\n\n            <button *ngIf=\"list.listType === 'incremental'\" type=\"submit\" (click)=\"onCreateEntries()\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\">\n                <localize key=\"list.type.create.entries\"></localize>\n            </button>\n        </div>\n    </div>\n\n\n    <div *ngFor=\"let entry of list.entries\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <h3>\n                                <ng-container *ngIf=\"entry.period.type === 'text'\">\n                                    {{entry.period.value}}\n                                </ng-container>\n                                <ng-container *ngIf=\"entry.period.type === 'date'\">\n                                    <date-text [date]=\"entry.period.value\"></date-text>\n                                </ng-container>\n                                <ng-container *ngIf=\"entry.period.type === 'range'\">\n                                    <date-text [date]=\"entry.period.value.startDate\"></date-text>\n                                    -\n                                    <date-text [date]=\"entry.period.value.endDate\"></date-text>\n                                </ng-container>\n\n                            </h3>\n                        </div>\n                    </div>\n\n\n                    <ng-container *ngIf=\"entry.versions.length > 0 && entry.versions[entry.versions.length - 1].working\"\n                        [ngTemplateOutlet]=\"versionDetail\"\n                        [ngTemplateOutletContext]=\"{entry:entry, version:entry.versions[entry.versions.length - 1]}\">\n                    </ng-container>\n\n                    <hr style=\"border-color:lightgrey;\">\n\n                    <h4 style=\"margin-top:20px;\">\n                        <localize key=\"list.type.published.versions.header\"></localize>\n                    </h4>\n\n\n                    <div>\n                        <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onCreate(entry)\" class=\"btn btn-primary\"\n                            style=\"margin:0;\" role=\"button\">\n                            <localize key=\"list.type.new.version\"></localize>\n                        </button>\n\n                        <button *ngIf=\"entry.versions.length > 2\" type=\"submit\" (click)=\"toggleVersions(entry)\"\n                            class=\"btn btn-default\" role=\"button\">\n                            <localize *ngIf=\"!entry.showAll\" key=\"list.type.see.versions\"></localize>\n                            <localize *ngIf=\"entry.showAll\" key=\"list.type.hide.versions\"></localize>\n                        </button>\n                    </div>\n\n                    <ng-container *ngIf=\"entry.versions.length > 1\">\n                        <ng-container *ngFor=\"let version of entry.versions; let j = index;\">\n                            <ng-container *ngIf=\"j === 0 || (entry.showAll && j !== (entry.versions.length -1))\"\n                                [ngTemplateOutlet]=\"versionDetail\"\n                                [ngTemplateOutletContext]=\"{entry:entry, version:version}\">\n                            </ng-container>\n                        </ng-container>\n                        <!--                         <div class=\"row\" style=\"margin-bottom: 5px;\"> -->\n                        <!--                             <div class=\"col-md-12\" style=\"text-align: left;\"> -->\n                        <!--                                 <button *ngIf=\"entry.versions.length > 2\" type=\"submit\" (click)=\"toggleVersions(entry)\" -->\n                        <!--                                     class=\"btn btn-default\" role=\"button\"> -->\n                        <!--                                     <localize *ngIf=\"!entry.showAll\" key=\"list.type.see.versions\"></localize> -->\n                        <!--                                     <localize *ngIf=\"entry.showAll\" key=\"list.type.hide.versions\"></localize> -->\n                        <!--                                 </button> -->\n                        <!--                             </div> -->\n                        <!--                         </div> -->\n                    </ng-container>\n\n                    <div class=\"row\" *ngIf=\"entry.versions.length === 1\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.no.versions\" style=\"color:grey;font-style:italic;\"></localize>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</ng-container>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { ListType, ListTypeEntry, ListTypeVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"publish-version\",\n    templateUrl: \"./publish-version.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class PublishVersionComponent implements OnInit {\n\n    message: string = null;\n\n    list: ListType = null;\n    entry: ListTypeEntry = null;\n\n    metadata: ListVersionMetadata = null;\n\n    tab: string = \"LIST\";\n\n    readonly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    init(list: ListType, entry: ListTypeEntry, version?: ListTypeVersion): void {\n        this.list = list;\n        this.entry = entry;\n        this.readonly = !list.write;\n\n        if (version == null) {\n            const working: ListTypeVersion = entry.versions[entry.versions.length - 1];\n\n            this.metadata = {\n                listMetadata: {\n                    visibility: \"PRIVATE\",\n                    master: false,\n                    ...JSON.parse(JSON.stringify(working.listMetadata))\n                },\n                geospatialMetadata: {\n                    visibility: \"PRIVATE\",\n                    master: false,\n                    ...JSON.parse(JSON.stringify(working.geospatialMetadata))\n                }\n            };\n        } else {\n            this.metadata = version;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.metadata.oid != null) {\n            this.service.applyVersion(this.metadata).then(version => {\n                if (this.entry.versions != null) {\n                    const index = this.entry.versions.findIndex(v => v.oid === version.oid);\n\n                    version.collapsed = this.entry.versions[index].collapsed;\n\n                    this.entry.versions[index] = version;\n                }\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.service.createVersion(this.entry, this.metadata).then(version => {\n                this.entry.versions.unshift(version);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-list=\"list\" let-type=\"type\">\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.ismaster\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <boolean-field [disable]=\"readonly\" [(value)]=\"metadata.master\" label=\"\"></boolean-field>\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.visibility\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"metadata.visibility\" [disabled]=\"readonly\"\n                required>\n                <option value=\"PRIVATE\">\n                    <localize key=\"masterlist.private\"></localize>\n                </option>\n                <option *ngIf=\"!list.typePrivate\" value=\"PUBLIC\">\n                    <localize key=\"masterlist.public\"></localize>\n                </option>\n            </select>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.label\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"true\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"metadata != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n<!--         <div class=\"heading text-center\"> -->\n<!--             <h1> -->\n<!--                 <localize key=\"list.type.versionMetadata\"></localize> -->\n<!--             </h1> -->\n<!--         </div> -->\n\n\t\t<div class=\"text-center\">\n\t\t\t<h2>\n\t\t\t\t<localize key=\"type.publish.metadata.header\"></localize>\n\t\t\t</h2>\n\t\t\t<hr>\n\t    </div>\n\t\t\t\t\t        \n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <div class=\"label-holder\"></div>\n                        \n                            <div class=\"holder\">\n                              <div class=\"form-group\" style=\"text-align: center;\">\n\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('LIST')\" -->\n<!--                                     [ngClass]=\"tab === 'LIST' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"border-bottom: 1px solid;\"> -->\n<!--                                     <localize key=\"list.type.list\"></localize> -->\n<!--                                 </a> -->\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('GEOSPATIAL')\" -->\n<!--                                     [ngClass]=\"tab === 'GEOSPATIAL' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"margin-left: 5px;border-bottom:1px solid;\"> -->\n<!--                                     <localize key=\"list.type.geospatial\"></localize> -->\n<!--                                 </a> -->\n                                \n                                <div class=\"btn-group geobject-editor-tab-holder\">\n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.list\"></localize></span>\n                                    </label> \n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\" (click)=\"handleTab('GEOSPATIAL')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.geospatial\"></localize></span>\n                                    </label> \n                                  </div>\n                                  \n                                </div>\n                              </div>\n\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.listMetadata, list:list, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.geospatialMetadata, list:list, type:'geospatial'}\">\n                            </ng-container>\n\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"!form.valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LazyLoadEvent } from \"primeng/api\";\n\nimport { Subject, Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { AuthService, ProgressService } from \"@shared/service\";\nimport { ListColumn, ListData, ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ExportFormatModalComponent } from \"./export-format-modal.component\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { GenericTableColumn, GenericTableConfig, TableColumnSetup, TableEvent } from \"@shared/model/generic-table\";\nimport { LngLatBounds } from \"mapbox-gl\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\nimport { LocationManagerStateService } from \"@registry/service/location-manager.service\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\nimport { LocationManagerState } from \"../location-manager/location-manager.component\";\nimport Utils from \"@registry/utility/Utils\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"list\",\n    templateUrl: \"./list.component.html\",\n    styleUrls: [\"./list.component.css\"]\n})\nexport class ListComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    list: ListTypeVersion = null;\n    current: string = \"\";\n    isRefreshing: boolean = false;\n    isWritable: boolean = false;\n    isRM: boolean = false;\n    isSRA: boolean = false;\n\n    orgCode: string;\n    userOrgCodes: string[];\n\n    config: GenericTableConfig = null;\n    setup: TableColumnSetup = null;\n    refresh: Subject<void>;\n\n    tableState: LazyLoadEvent = null;\n\n    showInvalid = false;\n\n    historyOid: string = null;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    progressNotifier: WebSocketSubject<{ type: string, content: any }>;\n    progressSubscription: Subscription = null;\n\n    jobNotifier: WebSocketSubject<{ type: string, message: string }>;\n    jobSubscription: Subscription = null;\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private modalService: BsModalService,\n        private service: ListTypeService,\n        private pService: ProgressService,\n        private geomService: GeometryService,\n        private locationManagerService: LocationManagerStateService,\n        private cacheService: RegistryCacheService,\n        private authService: AuthService) {\n        this.userOrgCodes = this.authService.getMyOrganizations();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        if (localStorage.getItem(oid) != null) {\n            const data: ListData = JSON.parse(localStorage.getItem(oid));\n\n            this.tableState = data.event;\n        }\n\n        this.service.getVersion(oid).then(version => {\n            this.list = version;\n            this.orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(this.orgCode, typeCode);\n            this.isRM = this.authService.isGeoObjectTypeRM(this.orgCode, typeCode);\n            this.isSRA = this.authService.isSRA();\n\n            this.refreshColumns();\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: true,\n                create: false,\n                label: this.list.displayLabel,\n                sort: [{ field: \"code\", order: 1 }]\n            };\n\n            if (version.refreshProgress != null) {\n                this.handleProgressChange(version.refreshProgress);\n            }\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.progressNotifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.progressSubscription = this.progressNotifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(message);\n            }\n        });\n\n        this.jobNotifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.jobSubscription = this.jobNotifier.subscribe(message => {\n            this.handleJobChange();\n        });\n\n        this.refresh = new Subject<void>();\n    }\n\n    ngOnDestroy() {\n        if (this.refresh != null) {\n            this.refresh.unsubscribe();\n        }\n\n        if (this.progressSubscription != null) {\n            this.progressSubscription.unsubscribe();\n        }\n\n        this.progressNotifier.complete();\n\n        if (this.jobSubscription != null) {\n            this.jobSubscription.unsubscribe();\n        }\n\n        this.jobNotifier.complete();\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === \"view\") {\n            this.onGotoMap(event.row);\n        }\n        //  else if (event.type === \"remove\") {\n        //     this.onRemove(event.row as Sensor);\n        // } else if (event.type === \"create\") {\n        //     this.newInstance();\n        // }\n    }\n\n    refreshColumns(): void {\n        this.setup = Utils.createColumns(this.list, this.showInvalid, false, (attribute, column) => {\n            this.service.values(this.list.oid, column.text, attribute.name, this.tableState.filters).then(options => {\n                column.results = options;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    handleShowInvalidChange(): void {\n        this.refreshColumns();\n        this.refresh.next();\n    }\n\n    handleProgressChange(progress: any): void {\n        this.isRefreshing = (progress.current < progress.total);\n\n        this.pService.progress(progress);\n\n        if (!this.isRefreshing && this.refresh != null) {\n            // Refresh the resultSet\n            // this.onPageChange(1);\n            this.refresh.next();\n        }\n    }\n\n    handleJobChange(): void {\n        if (this.historyOid != null) {\n            this.service.getJob(this.historyOid).then(job => {\n                if (job != null) {\n                    if (job.status === \"SUCCESS\" || job.status === \"FAILURE\") {\n                        this.handleProgressChange({ current: 1, total: 1 });\n\n                        this.historyOid = null;\n                    }\n\n                    if (job.status === \"FAILURE\" && job.exception != null) {\n                        this.message = job.exception.message;\n                    }\n                }\n            });\n        }\n    }\n\n    onEdit(data): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        editModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            // this.onPageChange(this.page.pageNumber);\n            this.refresh.next();\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishList(this.list.oid).toPromise().then((result: { jobOid: string }) => {\n            this.isRefreshing = true;\n            this.list.curation = {};\n            this.historyOid = result.jobOid;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onNewGeoObject(type: string = null): void {\n        if (!type) {\n            type = this.list.typeCode;\n        }\n\n        const params: any = {\n            type: type,\n            code: \"__NEW__\"\n        };\n\n        this.locationManagerService.addLayerForList(this.list, params);\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    onExport(): void {\n        const criteria = {\n            filters: this.tableState.filters != null ? { ...this.tableState.filters } : {}\n        };\n\n        if (!this.showInvalid) {\n            criteria.filters[\"invalid\"] = { value: false, matchMode: \"equals\" };\n        }\n\n        this.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list);\n        this.bsModalRef.content.onFormat.subscribe(data => {\n            if (data.format === \"SHAPEFILE\") {\n                let url = registry.contextPath + \"/list-type/export-shapefile?oid=\" + this.list.oid;\n                url += \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n\n                if (data.actualGeometryType != null && data.actualGeometryType.length > 0) {\n                    url += \"&actualGeometryType=\" + encodeURIComponent(data.actualGeometryType);\n                }\n\n                window.location.href = url;\n            } else if (data.format === \"EXCEL\") {\n                window.location.href = registry.contextPath + \"/list-type/export-spreadsheet?oid=\" + this.list.oid + \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n            }\n        });\n    }\n\n    onWheel(event: WheelEvent): void {\n        let tableEl = (<Element>event.target).parentElement.closest(\"table\").parentElement;\n\n        tableEl.scrollLeft += event.deltaY;\n        event.preventDefault();\n    }\n\n    onGotoMap(result: any): void {\n        let state: LocationManagerState = { pageContext: \"DATA\" };\n\n        if (result == null) {\n            this.locationManagerService.selectListRecord(this.list, null, null, state);\n\n            this.service.getBounds(this.list.oid).then(bounds => {\n                if (bounds && Array.isArray(bounds)) {\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n                    const array = llb.toArray();\n\n                    state.bounds = JSON.stringify(array);\n                }\n\n                this.router.navigate([\"/registry/location-manager\"], {\n                    queryParams: state\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.service.record(this.list.oid, result.uid, false).then(record => {\n                this.cacheService.getTypeCache().waitOnTypes().then(() => {\n                    this.locationManagerService.selectListRecord(this.list, result.uid, record, state);\n\n                    if (record.recordType === \"GEO_OBJECT\") {\n                        this.router.navigate([\"/registry/location-manager\"], {\n                            queryParams: state\n                        });\n                    } else {\n                        this.service.getBounds(this.list.oid, result.uid).then(bounds => {\n                            if (bounds && Array.isArray(bounds)) {\n                                let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n                                const array = llb.toArray();\n\n                                state.bounds = JSON.stringify(array);\n                            }\n\n                            this.router.navigate([\"/registry/location-manager\"], {\n                                queryParams: state\n                            });\n                        }).catch((err: HttpErrorResponse) => {\n                            this.error(err);\n                        });\n                    }\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    onRunCuration(): void {\n        this.service.createCurationJob(this.list).then(job => {\n            this.router.navigate([\"/registry/curation-job\", this.list.oid]);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onLoadEvent(event: LazyLoadEvent): void {\n        this.tableState = event;\n\n        const data: ListData = {\n            event: event,\n            oid: this.list.oid\n        };\n\n        localStorage.setItem(data.oid, JSON.stringify(data));\n    }\n\n    isListInOrg(): boolean {\n        if (this.userOrgCodes && this.userOrgCodes.length > 0 && this.userOrgCodes.indexOf(this.orgCode) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar *ngIf=\"isRefreshing\"></progress-bar>\n\n    <div *ngIf=\"list != null\" id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row\">\n\n            <div class=\"col-md-4\">\n\n                <h4>\n                    <span *ngIf=\"!list.working\">\n                        <localize *ngIf=\"!list.working\" key=\"list.type.version\"></localize>&nbsp;{{list.versionNumber}}\n                    </span>\n                    <span *ngIf=\"list.working\">\n                        <localize key=\"list.type.working.version\"></localize>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlist.list.visibility\"></localize> :\n                    <span class=\"date-string-display\">\n                        <localize *ngIf=\"list.listMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\"></localize>\n                        <localize *ngIf=\"list.listMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\"></localize>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlists.list.authoritativeness\"></localize> :\n                    <span class=\"date-string-display\">\n                        <localize *ngIf=\"list.listMetadata.master\" key=\"list.type.master\"></localize>\n                        <localize *ngIf=\"!list.listMetadata.master\" key=\"list.type.non.master\"></localize>\n                    </span>\n                </h4>\n            </div>\n            <div class=\"col-md-8\">\n                <h4>\n                    <localize key=\"masterlist.generatedDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        <date-text [date]=\"list.publishDate\"></date-text>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        <ng-container *ngIf=\"list.period.type === 'text'\">\n                            {{list.period.value}}\n                        </ng-container>\n                        <ng-container *ngIf=\"list.period.type === 'date'\">\n                            <date-text [date]=\"list.period.value\"></date-text>\n                        </ng-container>\n                        <ng-container *ngIf=\"list.period.type === 'range'\">\n                            <date-text [date]=\"list.period.value.startDate\"></date-text>\n                            -\n                            <date-text [date]=\"list.period.value.endDate\"></date-text>\n                        </ng-container>\n                    </span>\n                </h4>\n            </div>\n        </div>\n\n        <div class=\"row\" style=\"margin-bottom:10px;\">\n            <div class=\"col-md-4\">\n                <div *ngIf=\"list.working && (isRM || isRA || isSRA)\" class=\"button-holder pull-left\">\n                    <button type=\"submit\" class=\"btn btn-primary\" role=\"button\" (click)=\"onRunCuration()\"\n                        style=\"margin-left:0;\">\n                        <localize key=\"list.type.run.curation\"></localize>\n                    </button>\n                    <span\n                        style=\"vertical-align:middle;display:inline-block;font-style: italic;margin-left: 5px;color: grey;\">\n                        <span *ngIf=\"list.curation.lastRun == null\" class=\"date-string-display\">\n                            <localize key=\"list.type.run.na\"></localize>\n                        </span>\n                        <a *ngIf=\"list.curation.lastRun != null\" [routerLink]=\"['/registry/curation-job', list.oid]\"\n                            routerLinkActive=\"active\">\n                            <localize key=\"list.type.last.validation.date\"></localize>\n                            <date-text [date]=\"list.curation.lastRun\"></date-text>\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"button-holder pull-right\">\n\n                    <span *ngIf=\"isWritable\" class=\"clickable\"\n                        style=\"vertical-align:middle;display:inline-block;line-height:0;\">\n                        <boolean-field [(value)]=\"showInvalid\" (change)=\"handleShowInvalidChange()\"\n                            [localizeLabelKey]=\"'masterlist.showInvalid'\"></boolean-field>\n                    </span>\n\n                    <span *ngIf=\"list.working\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true}\"\n                            style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n                    <button *ngIf=\"list.isMember || list.geospatialMetadata.visibility === 'PUBLIC'\" type=\"submit\"\n                        (click)=\"onGotoMap(null)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.viewOnMap\"></localize>\n                    </button>\n\n                    <button *ngIf=\"list.working && isWritable && !list.isAbstract\" type=\"submit\"\n                        (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.newGeoObject\"></localize>\n                    </button>\n\n                    <span dropdown #dropdown=\"bs-dropdown\" class=\"dropdown\" *ngIf=\"list.working && isWritable && list.isAbstract\">\n                        <button dropdownToggle class=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\"\n                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                            <span class=\"caret\"></span>\n                        </button>\n                        <ul *dropdownMenu class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n<!--                             <li> -->\n<!--                                 <localize style=\"padding-left:10px;\" key=\"masterlist.newGeoObject.selectASubtype\"> -->\n<!--                                 </localize> -->\n<!--                             </li> -->\n<!--                             <li role=\"separator\" class=\"divider\"></li> -->\n                            <li *ngFor=\"let subtype of list.subtypes\"><a\n                                    (click)=\"onNewGeoObject(subtype.code)\">{{subtype.label}}</a></li>\n                        </ul>\n                    </span>\n\n                    <button *ngIf=\"list.listMetadata.visibility === 'PUBLIC' || list.geospatialMetadata.visibility === 'PUBLIC' || isListInOrg() || isSRA\"\n                     type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"filters == null\" key=\"io.export.allrows\"></localize>\n                        <localize *ngIf=\"filters != null\" key=\"io.export.filteredrows\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\" style=\"max-height:calc(100vh - 460px); min-height:calc(100vh - 460px);\">\n\n                <ng-container *ngIf=\"setup != null && config != null\">\n                    <generic-table [setup]=\"setup\" [config]=\"config\" [refresh]=\"refresh\"\n                        [pageConfig]=\"{oid: list.oid, showInvalid: showInvalid}\" (click)=\"onClick($event)\"\n                        (onLoadEvent)=\"onLoadEvent($event)\" [initialState]=\"tableState\"></generic-table>\n                </ng-container>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { Subscription } from \"rxjs\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"curation-job\",\n    templateUrl: \"./curation-job.component.html\",\n    styleUrls: []\n})\nexport class CurationJobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    version: ListTypeVersion;\n    job: CurationJob;\n\n    page: PageResult<CurationProblem> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(private router: Router, public service: ListTypeService, private modalService: BsModalService,\n        private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params[\"oid\"];\n        this.service.getVersion(oid).then(version => {\n            this.version = version;\n\n            this.onPageChange(1);\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"CURATION_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: CurationProblem): void {\n        const index = this.page.resultSet.findIndex(p => p.id === problem.id);\n\n        if (index !== -1) {\n            this.page.resultSet.splice(index, 1);\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.no.geometry\");\n        } else if (probType === \"INVALID_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.invalid.geometry\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: CurationProblem): void {\n        // this.bsModalRef = this.modalService.show(CurationProblemModalComponent, {\n        //     animated: true,\n        //     backdrop: true,\n        //     ignoreBackdropClick: true\n        // });\n        // this.bsModalRef.content.init(this.version, problem, this.job, (result: any) => {\n        //     // if (result.action === \"RESOLVED\") {\n        //     // this.onProblemResolved(result.data);\n        //     // }\n        // });\n\n        const params: any = {\n            layers: JSON.stringify([this.version.oid]),\n            version: this.version.oid,\n            uid: problem.goUid,\n            pageContext: 'DATA'\n        };\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    toggleResolution(problem: CurationProblem): void {\n        const resolution = (problem.resolution == null || problem.resolution.length === 0 || problem.resolution === \"UNRESOLVED\")\n            ? \"APPLY_GEO_OBJECT\"\n            : \"UNRESOLVED\";\n\n        this.service.setResolution(problem, resolution).then(() => {\n            problem.resolution = resolution;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        if (this.version != null) {\n            this.message = null;\n\n            this.service.getCurationInfo(this.version, false, pageNumber, this.page.pageSize).then(response => {\n                this.job = response;\n\n                if (this.job.status === \"SUCCESS\") {\n                    this.page = this.job.page;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"py-5\">\n      <h2>\n        <localize key=\"curation.job.title\"></localize>\n      </h2>\n    </div>\n    <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n      <div class=\"col-md-4 order-md-1\">\n        <div class=\"wrapper\">\n\n          <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n          <p style=\"padding-left: 60px;\">\n            <span style=\"display: block;\">\n              <strong>{{version.label}}</strong>\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"list.type.job.started.by\"></localize>\n              {{job.lastRunBy}}\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"scheduledjobs.job.started.label\"></localize>\n              <span class=\"date-string-display\">\n                <date-text [date]=\"job.lastRun\"></date-text>\n              </span>\n            </span>\n          </p>\n\n        </div>\n      </div>\n      <div class=\"col-md-3 order-md-1\">\n        <div>\n\n          <h5><b>{{job.workProgress}}\n            <localize key=\"list.type.validated.out.of\"></localize>\n              {{job.workTotal}}\n              <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n            </b></h5>\n          <h5>{{job.workTotal - job.workProgress}} <localize key=\"scheduledjobs.job.remaining.label\"></localize>\n          </h5>\n\n        </div>\n      </div>\n      <div class=\"col-md-5 order-md-1\">\n      </div>\n    </div>\n    <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n\n        <ul class=\"list-group\">\n\n          <table class=\"list-table table table-bordered table-striped\">\n            <thead>\n              <tr>\n                <th class=\"label-column\">\n                  <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n                </th>\n                <th class=\"label-column\">\n                  <localize key=\"data.property.label.code\"></localize>\n                </th>\n                <th class=\"label-column\">\n\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{getFriendlyProblemType(row.type)}}</p>\n                </td>\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{row.goCode}}</p>\n                </td>\n                <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                  <button *ngIf=\"row.resolution !=='APPLY_GEO_OBJECT' \" type=\"submit\" (click)=\"onEdit(row)\"\n                    class=\"btn btn-link\" role=\"button\">\n                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                  </button>\n                  <boolean-field [value]=\"row.resolution === 'APPLY_GEO_OBJECT'\" (change)=\"toggleResolution(row)\"\n                    [label]=\"'list.type.problem.resolved' | localize\" style=\"vertical-align:middle;line-height:0;\"></boolean-field>\n\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div class=\"solid-table-footer\">\n            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n              <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n          </div>\n        </ul>\n      </div>\n    </div>\n    <div *ngIf=\"job && job.status === 'SUCCESS' && page && page.resultSet.length === 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <localize key=\"list.type.validation.empty\"></localize>\n      </div>\n    </div>\n\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\nimport { PageResult } from \"@shared/model/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\nimport { Subscription } from \"rxjs\";\nimport { ClassificationTypePublishModalComponent } from \"./classification-type-publish-modal.component\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\n@Component({\n    selector: \"classification-type-manager\",\n    templateUrl: \"./classification-type-manager.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypeManagerComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    page: PageResult<ClassificationType> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    querySubscription: Subscription = null;\n\n    subscription: Subscription = null;\n\n    classificationType: ClassificationType = null;\n\n    /*\n    * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private service: ClassificationTypeService,\n        private lService: LocalizationService,\n        private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.querySubscription = this.route.queryParams.subscribe((params: Params) => {\n            const typeCode = params.typeCode;\n\n            if (typeCode != null && typeCode.length > 0) {\n                if (this.classificationType == null || this.classificationType.code !== typeCode) {\n                    this.classificationType = null;\n\n                    this.service.get(typeCode).then(classificationType => {\n                        this.classificationType = classificationType;\n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                }\n            } else {\n                this.classificationType = null;\n            }\n        });\n\n        this.refresh();\n    }\n\n    ngOnDestroy(): void {\n        if (this.querySubscription != null) {\n            this.querySubscription.unsubscribe();\n        }\n\n        this.querySubscription = null;\n\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.subscription = null;\n    }\n\n    onCreate(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(() => this.refresh());\n    }\n\n    onEdit(type: ClassificationType): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(() => this.refresh(), type);\n    }\n\n    onDelete(type: ClassificationType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + type.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(type).then(() => {\n                const index = this.page.resultSet.findIndex(t => t.oid === type.oid);\n\n                if (index !== -1) {\n                    this.page.resultSet.splice(index, 1);\n                }\n\n                if (this.classificationType != null && type.code === this.classificationType.code) {\n                    this.router.navigate([], {\n                        relativeTo: this.route,\n                        queryParams: { typeCode: null }\n                    });\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    refresh(): void {\n        this.service.page({}).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n\n            <nav class=\"col-md-3 list-sidebar\">\n                <div class=\"sidebar-section-content\" style=\"padding-top:20px;\">\n                    <ul class=\"list-group\">\n\n\n                        <li class=\"list-group-item got-li-item\" *ngFor=\"let type of page.resultSet\" [id]=\"type.code\">\n                            <a [routerLink]=\"'/registry/classification-type'\" [queryParams]=\"{typeCode:type.code}\"\n                                routerLinkActive=\"active\">\n                                {{type.displayLabel.localizedValue}}\n                            </a>\n\n                            <span\n                                style=\"position:absolute;right:10px;top:50%;transform:translateY(-50%);\">\n\n                                <a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(type)\"\n                                    [title]=\"'modal.button.edit' | localize\"></a>\n                                <a class=\"fa fa-trash-o ico-remove\" (click)=\"onDelete(type)\"\n                                    [title]=\"'button.delete.helptext' | localize\"></a>\n                            </span>\n\n                        </li>\n                        <li class=\"list-group-item got-li-item\">\n                            <hr class=\"bottom\">\n                            <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <div class=\"col-md-9 hierarchy-content\">\n                <div id=\"overflow-div\">\n                    <classification-type *ngIf=\"classificationType != null\" [classificationType]=\"classificationType\"></classification-type>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\n\n@Component({\n    selector: \"classification-type-publish-modal\",\n    templateUrl: \"./classification-type-publish-modal.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypePublishModalComponent implements OnInit, OnDestroy {\n\n    currentDate: Date = new Date();\n    message: string = null;\n    onClassificationTypeChange: Subject<ClassificationType> = null;\n\n    type: ClassificationType = null;\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ClassificationTypeService,\n        private lService: LocalizationService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onClassificationTypeChange = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.onClassificationTypeChange != null) {\n            this.onClassificationTypeChange.unsubscribe();\n        }\n    }\n\n    init(observer: Observer<ClassificationType>, type?: ClassificationType): Subscription {\n        if (type == null) {\n            this.isNew = true;\n            this.type = {\n                oid: null,\n                displayLabel: this.lService.create(),\n                description: this.lService.create(),\n                code: \"\"\n            };\n        } else {\n            this.type = type;\n            this.isNew = false;\n        }\n\n        return this.onClassificationTypeChange.subscribe(observer);\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.type).then(response => {\n            this.onClassificationTypeChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    stringify(obj: any): string {\n        return JSON.stringify(obj);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"type != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1 *ngIf=\"isNew\">\n                <localize key=\"data.type.create.classification\"></localize>                \n            </h1>\n            <h1 *ngIf=\"!isNew\">\n                {{type.displayLabel.localizedValue}}\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"type.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of type.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.label\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of type.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.description\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, Input, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subscription } from \"rxjs\";\nimport { TreeComponent, TreeModel, TreeNode, TREE_ACTIONS } from \"@circlon/angular-tree-component\";\nimport { ContextMenuComponent, ContextMenuService } from \"ngx-contextmenu\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { Classification, ClassificationType } from \"@registry/model/classification-type\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { ClassificationPublishModalComponent } from \"./classification-publish-modal.component\";\nimport { PageResult } from \"@shared/model/core\";\n\nconst PAGE_SIZE: number = 100;\n\n// eslint-disable-next-line no-unused-vars\nenum NodeType {\n    // eslint-disable-next-line no-unused-vars\n    CLASSIFICATION = 0, LINK = 1\n}\n\nclass ClassificationNode {\n\n    name: string;\n    code: string;\n    type: NodeType;\n    classification?: Classification;\n    hasChildren: boolean;\n    children?: ClassificationNode[];\n    parent?: ClassificationNode;\n    pageNumber?: number;\n\n}\n\n@Component({\n    selector: \"classification-type\",\n    templateUrl: \"./classification-type.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypeComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    @Input() classificationType: ClassificationType = null;\n\n    nodes: ClassificationNode[] = null;\n\n    subscription: Subscription = null;\n\n    /*\n    * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild(TreeComponent)\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    options = {\n        idField: \"code\",\n        getChildren: (node: TreeNode) => {\n            return this.getChildren(node);\n        },\n        actionMapping: {\n            mouse: {\n                click: (tree: TreeComponent, node: TreeNode, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: TreeNode, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                },\n                drop: (tree: TreeModel, node: TreeNode, $event: any, obj: {\n                    from: any;\n                    to: any;\n                }) => {\n                    this.onMoveNode(tree, node, $event, obj);\n                }\n            }\n        },\n        allowDrag: (node: TreeNode) => {\n            if (node.data.type === NodeType.CLASSIFICATION) {\n                const code = node.data.classification.code;\n\n                return this.nodes.findIndex(root => root.classification.code === code) === -1;\n            }\n\n            return false;\n        },\n        allowDrop: (node: TreeNode, event: { parent: TreeNode, index: number }) => {\n            if (event != null && event.parent != null) {\n                return event.parent.data.type === NodeType.CLASSIFICATION;\n            }\n\n            return false;\n        },\n        animateExpand: true,\n        scrollOnActivate: true,\n        animateSpeed: 2,\n        animateAcceleration: 1.01\n    }\n\n    constructor(\n        private contextMenuService: ContextMenuService,\n        private modalService: BsModalService,\n        private service: ClassificationService,\n        private lService: LocalizationService\n    ) { }\n\n    ngOnInit(): void {\n        this.getChildren(null).then(nodes => {\n            this.nodes = nodes;\n\n            if (this.nodes.length > 0) {\n                window.setTimeout(() => {\n                    this.tree.treeModel.getFirstRoot().expand();\n                }, 50);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.subscription = null;\n    }\n\n    getChildren(treeNode: TreeNode): Promise<ClassificationNode[]> {\n        const node: ClassificationNode = treeNode != null ? treeNode.data : null;\n\n        const code = node != null ? node.classification.code : null;\n\n        return this.service.getChildren(this.classificationType.code, code, 1, PAGE_SIZE).then(page => {\n            const nodes = this.createNodes(node, page);\n\n            if (node != null) {\n                if (node.children == null) {\n                    node.children = [];\n                }\n\n                node.children.concat(nodes);\n            }\n\n            return nodes;\n        }).catch(ex => {\n            return [];\n        });\n    }\n\n    createNodes(parent: ClassificationNode, page: PageResult<Classification>): ClassificationNode[] {\n        const nodes = page.resultSet.map(child => {\n            return {\n                code: child.code,\n                name: child.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: child,\n                hasChildren: true\n            } as ClassificationNode;\n        });\n\n        // Add page node if needed\n        if (page.count > page.pageNumber * page.pageSize) {\n            nodes.push({\n                code: \"...\",\n                name: \"...\",\n                type: NodeType.LINK,\n                hasChildren: false,\n                pageNumber: page.pageNumber + 1,\n                parent: parent\n            } as ClassificationNode);\n        }\n\n        return nodes;\n    }\n\n    handleOnMenu(node: TreeNode, $event: any): void {\n        this.contextMenuService.show.next({\n            contextMenu: this.nodeMenuComponent,\n            event: $event,\n            item: node\n        });\n        $event.preventDefault();\n        $event.stopPropagation();\n    }\n\n    treeNodeOnClick(treeNode: TreeNode, $event: any): void {\n        const node: ClassificationNode = treeNode != null ? treeNode.data : null;\n\n        if (node != null && node.type === NodeType.LINK) {\n            if (treeNode.parent != null) {\n                const parentNode: ClassificationNode = treeNode.parent.data;\n                const code = parentNode.classification.code;\n                const pageNumber = node.pageNumber;\n\n                this.service.getChildren(this.classificationType.code, code, pageNumber, PAGE_SIZE).then(page => {\n                    const nodes = this.createNodes(parentNode, page);\n\n                    parentNode.children = parentNode.children.filter(node => node.code !== \"...\");\n                    parentNode.children = parentNode.children.concat(nodes);\n\n                    this.tree.treeModel.update();\n                }).catch(ex => {\n                });\n            }\n        } else {\n            if (treeNode.isExpanded) {\n                treeNode.collapse();\n            } else {\n                treeNode.expand();\n            }\n\n            treeNode.setActiveAndVisible();\n        }\n    }\n\n    onCreate(parentNode: TreeNode): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        const parent: ClassificationNode = parentNode != null ? parentNode.data : null;\n\n        this.bsModalRef = this.modalService.show(ClassificationPublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(classification => {\n            const node: ClassificationNode = {\n                code: classification.code,\n                name: classification.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: classification,\n                hasChildren: true\n            };\n\n            if (parentNode != null) {\n                parent.children.push(node);\n            } else {\n                this.nodes.push(node);\n            }\n\n            this.tree.treeModel.update();\n        }, this.classificationType, (parent != null ? parent.classification : null));\n    }\n\n    onEdit(node: TreeNode): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationPublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(classification => {\n            const classificationNode: ClassificationNode = node.data;\n            classificationNode.classification = classification;\n            classificationNode.name = classification.displayLabel.localizedValue;\n\n            this.tree.treeModel.update();\n        }, this.classificationType, null, node.data.classification);\n    }\n\n    onRemove(node: TreeNode): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + node.data.classification.code + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.removeTreeNode(node);\n        });\n    }\n\n    onMoveNode(tree: TreeModel, node: TreeNode, $event: any, obj: {\n        from: any;\n        to: any;\n    }): void {\n        const parent: Classification = node.data.classification;\n        const classification: Classification = obj.from.data.classification;\n        const parentCode = parent.code;\n        const code = classification.code;\n\n        let message = this.lService.decode(\"classification.move.message\");\n        message = message.replace(\"{0}\", classification.displayLabel.localizedValue);\n        message = message.replace(\"{1}\", parent.displayLabel.localizedValue);\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.message = null;\n\n            this.service.move(this.classificationType.code, code, parentCode).then(() => {\n                TREE_ACTIONS.MOVE_NODE(tree, node, $event, obj);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    removeTreeNode(node: TreeNode): void {\n        this.message = null;\n\n        this.service.remove(this.classificationType.code, node.data.classification.code).then(() => {\n            if (node.parent.data.classification == null) {\n                this.nodes = [];\n            }\n\n            const parent: TreeNode = node.parent;\n            const children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter((n: any) => n.id !== node.data.id);\n\n            if (parent.data.children.length === 0) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    /*\n\n    refresh(): void {\n    this.service.page({}).then(page => {\n        this.page = page;\n    }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n    });\n    }\n    */\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<context-menu #nodeMenu>\n    <ng-template contextMenuItem let-item (execute)=\"onEdit($event.item)\">\n        <localize key=\"modal.button.edit\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"onRemove($event.item)\">\n        <localize key=\"modal.button.delete\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"onCreate($event.item)\">\n        <localize key=\"hierarchy.content.addChild\"></localize>\n    </ng-template>\n</context-menu>\n\n<ng-container>\n\n    <div class=\"heading\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" style=\"margin-top: 5px;\" role=\"alert\">{{message}}</div>\n\n                <h2>\n                    {{classificationType.displayLabel.localizedValue}}\n                </h2>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"classificationType != null && nodes != null\" class=\"row\">\n        <div class=\"col-md-12\">\n            <ng-container *ngIf=\"nodes.length === 0\">\n                <button type=\"submit\" (click)=\"onCreate(null)\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"classification.set.root\"></localize>\n                </button>\n            </ng-container>\n            <div>\n                <tree-root *ngIf=\"nodes.length > 0\" #tree [options]=\"options\" [nodes]=\"nodes\">\n                </tree-root>\n            </div>\n        </div>\n    </div>\n\n</ng-container>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { Classification, ClassificationType } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\n\n@Component({\n    selector: \"classification-publish-modal\",\n    templateUrl: \"./classification-publish-modal.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationPublishModalComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    onClassificationChange: Subject<Classification> = null;\n\n    classificationType: ClassificationType = null;\n\n    parent: Classification = null;\n\n    classification: Classification = null;\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ClassificationService,\n        private lService: LocalizationService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onClassificationChange = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.onClassificationChange != null) {\n            this.onClassificationChange.unsubscribe();\n        }\n    }\n\n    init(observer: Observer<ClassificationType>, classificationType: ClassificationType, parent: Classification, classification?: Classification): Subscription {\n        this.classificationType = classificationType;\n        this.parent = parent;\n\n        if (classification == null) {\n            this.isNew = true;\n            this.classification = {\n                code: \"\",\n                displayLabel: this.lService.create(),\n                description: this.lService.create()\n            };\n        } else {\n            this.classification = classification;\n            this.isNew = false;\n        }\n\n        return this.onClassificationChange.subscribe(observer);\n    }\n\n    onSubmit(): void {\n        const classificationType = this.classificationType.code;\n        const parentCode = this.parent != null ? this.parent.code : null;\n\n        // classificationType: string, parentCode: string, classification: Classification, isNew: boolean\n        this.service.apply(classificationType, parentCode, this.classification, this.isNew).then(response => {\n            this.onClassificationChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"classification != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1 *ngIf=\"isNew\">\n                <localize key=\"data.type.create.classification\"></localize>                \n            </h1>\n            <h1 *ngIf=\"!isNew\">\n                {{classificationType.displayLabel.localizedValue}}\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"classification.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of classification.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.label\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of classification.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.description\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Layer } from \"./layer-data-source\";\n\nexport class LayerDiff {\n\n    type: \"LAYER_REORDER\" | \"REMOVE_LAYER\" | \"NEW_LAYER\" | \"COLOR_CHANGE\" | \"RENDERED_CHANGE\"\n    newLayer: Layer;\n    newLayerIndex: number;\n    oldLayer: Layer;\n    oldLayerIndex: number;\n\n    constructor(type: \"LAYER_REORDER\" | \"REMOVE_LAYER\" | \"NEW_LAYER\" | \"COLOR_CHANGE\" | \"RENDERED_CHANGE\", newLayer: Layer, newLayerIndex: number, oldLayer: Layer, oldLayerIndex: number) {\n        this.type = type;\n        this.newLayer = newLayer;\n        this.newLayerIndex = newLayerIndex;\n        this.oldLayer = oldLayer;\n        this.oldLayerIndex = oldLayerIndex;\n    }\n\n    equals(obj: any) {\n        if (!(obj instanceof LayerDiff)) {\n            return false;\n        }\n\n        return this.type === obj.type &&\n               this.newLayerIndex === obj.newLayerIndex && this.oldLayerIndex === obj.oldLayerIndex &&\n               ((this.newLayer == null && obj.newLayer == null) || (this.newLayer != null && obj.newLayer != null && this.newLayer.getId() === obj.newLayer.getId())) &&\n               ((this.oldLayer == null && obj.oldLayer == null) || (this.oldLayer != null && obj.oldLayer != null && this.oldLayer.getId() === obj.oldLayer.getId()));\n    }\n\n}\n\nexport class LayerDiffingStrategy {\n\n    private newLayers: Layer[];\n\n    private oldLayers: Layer[];\n\n    private diffs: LayerDiff[] = [];\n\n    constructor(newLayers: Layer[], oldLayers: Layer[]) {\n        this.newLayers = newLayers;\n        this.oldLayers = oldLayers;\n        this.calculateDiffs();\n    }\n\n    public getDiffs(): LayerDiff[] {\n        return this.diffs;\n    }\n\n    private calculateDiffs(): void {\n        this.diffs = [];\n\n        let iterations = Math.max(this.newLayers.length, this.oldLayers.length);\n        for (let i = 0; i < iterations; ++i) {\n            let newLayer: Layer = null;\n            let oldLayer: Layer = null;\n            let newLayerIndex: number = -1;\n            let oldLayerIndex: number = -1;\n\n            if (i < this.newLayers.length) {\n                newLayer = this.newLayers[i];\n                newLayerIndex = i;\n\n                oldLayerIndex = this.oldLayers.findIndex(findLayer => findLayer.getId() === newLayer.getId());\n                if (oldLayerIndex !== -1) {\n                    oldLayer = this.oldLayers[oldLayerIndex];\n                }\n\n                this.diffLayers(newLayer, newLayerIndex, oldLayer, oldLayerIndex);\n            }\n\n            newLayer = null;\n            oldLayer = null;\n            newLayerIndex = -1;\n            oldLayerIndex = -1;\n\n            if (i < this.oldLayers.length) {\n                oldLayer = this.oldLayers[i];\n                oldLayerIndex = i;\n\n                newLayerIndex = this.newLayers.findIndex(findLayer => findLayer.getId() === oldLayer.getId());\n                if (newLayerIndex !== -1) {\n                    newLayer = this.newLayers[newLayerIndex];\n                }\n\n                this.diffLayers(newLayer, newLayerIndex, oldLayer, oldLayerIndex);\n            }\n        }\n    }\n\n    private addDiff(diff: LayerDiff) {\n        if (this.diffs.findIndex(search => search.equals(diff)) === -1) {\n            this.diffs.push(diff);\n        }\n    }\n\n    private diffLayers(newLayer: Layer, newLayerIndex: number, oldLayer: Layer, oldLayerIndex: number): void {\n        if (newLayer != null && oldLayer != null) {\n            if (newLayerIndex !== oldLayerIndex) {\n                this.addDiff(new LayerDiff(\"LAYER_REORDER\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n            }\n\n            if (newLayer.rendered !== oldLayer.rendered) {\n                this.addDiff(new LayerDiff(\"RENDERED_CHANGE\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n            }\n            if (newLayer.color !== oldLayer.color) {\n                this.addDiff(new LayerDiff(\"COLOR_CHANGE\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n            }\n        } else if (newLayer != null && oldLayer == null) {\n            this.addDiff(new LayerDiff(\"NEW_LAYER\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n        } else if (newLayer == null && oldLayer != null) {\n            this.addDiff(new LayerDiff(\"REMOVE_LAYER\", newLayer, newLayerIndex, oldLayer, oldLayerIndex));\n        }\n    }\n\n}\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\nimport { calculateTextWidth } from \"./svg-util\";\n\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\nimport { SvgHierarchyType } from \"./svg-hierarchy-type\";\nimport { HierarchyComponent, RELATED_NODE_BANNER_COLOR } from \"../hierarchy.component\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nexport class SvgHierarchyNode {\n\n    private hierarchyComponent: HierarchyComponent;\n\n    private svgHierarchyType: SvgHierarchyType;\n\n    private geoObjectType: GeoObjectType;\n\n    private treeNode: any;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    constructor(hierarchyComponent: HierarchyComponent, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n        public localizeService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        this.hierarchyComponent = hierarchyComponent;\n        this.svgHierarchyType = svgHierarchyType;\n        this.geoObjectType = geoObjectType;\n        this.treeNode = treeNode;\n    }\n\n    getCode(): string {\n        return this.geoObjectType.code;\n    }\n\n    setPos(x: number, y: number, dragging: boolean) {\n        let bbox = this.getBbox();\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + 5)\n            .attr(\"y\", y + 1);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + bbox.width - 20)\n            .attr(\"y\", y + 17);\n\n        // Move inherit and uninherit buttons with the node they're moving\n\n        let inheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (inheritNode != null) {\n            const heritX = (x + bbox.width - 60);\n            const heritY = (y + bbox.height - 24);\n            let inheritBbox = inheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n        }\n\n        let uninheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (uninheritNode != null) {\n            const heritX = (x + bbox.width - 71);\n            const heritY = (y + bbox.height - 24);\n            let uninheritBbox = uninheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n        }\n    }\n\n    getPos() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n    }\n\n    getBbox() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n    }\n\n    getTreeNode() {\n        return this.treeNode;\n    }\n\n    hideRelatedHierarchy(): string {\n        let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n        if (existingSecondary.node() != null) {\n            existingSecondary.remove();\n            this.hierarchyComponent.calculateSvgViewBox();\n\n            let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n            return existingSecondaryCode;\n        }\n    }\n\n    renderRelatedHierarchiesMenu() {\n        let that = this;\n        let existingMenu = d3.select(\".g-context-menu\");\n\n        if (existingMenu.node() == null) {\n            //let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n            let parent = d3.select(\"#svg\");\n\n            let contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n            let relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n            const hasActionsPermissions = this.authService.isSRA() || this.authService.isOrganizationRA(this.svgHierarchyType.hierarchyType.organizationCode);\n\n            let bbox = this.getBbox();\n            let x = bbox.x + bbox.width - 5;\n            let y = bbox.y + bbox.height / 2 - 8;\n            const height = 20;\n            const fontSize = 8;\n            const widthPadding = 10;\n            const borderColor = \"#aaaaaa\";\n            const dividerColor = \"#e4e4e4\";\n            const fontFamily = \"sans-serif\";\n            const titleFontSize = 9;\n\n            const titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n            const actionsTitle = this.hierarchyComponent.localize(\"hierarchy.content.actionsTitle\");\n            const removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n            const noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n            const hideRelatedHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.hideRelatedHierarchy\");\n            const uninheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n            const inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\n            let isSecondaryHierarchyRendered = (d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node() != null);\n\n            let numActions = hasActionsPermissions ? (isSecondaryHierarchyRendered ? 2 : 1) : 0;\n\n            // Calculate the width of our title\n            let width = calculateTextWidth(titleLabel, titleFontSize);\n\n            // Calculate with of remove text\n            let removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n            width = removeWidth > width ? removeWidth : width;\n\n            if (isSecondaryHierarchyRendered) {\n              // Calculate width of \"hide related hierarchy\" label\n                let hideRelatedWidth = calculateTextWidth(hideRelatedHierarchyLabel, fontSize);\n                width = hideRelatedWidth > width ? hideRelatedWidth : width;\n            }\n\n            if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                let uninheritWidth = calculateTextWidth(uninheritLabel, fontSize);\n                width = uninheritWidth > width ? uninheritWidth : width;\n                numActions++;\n            } else {\n                let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                if (existingSecondary.node() != null) {\n                    let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                    let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                    let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                    let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                    if (this.treeNode.parent == null && relatedGotHasParents) {\n                        let inheritWidth = calculateTextWidth(inheritLabel, fontSize);\n                        width = inheritWidth > width ? inheritWidth : width;\n                        numActions++;\n                    }\n                }\n            }\n\n            // Calculate the width of our context menu, which is based on how long the text inside it will be.\n            // We don't know how long text is until we render it. So we'll need to loop over all the text and\n            // render and destroy all of it.\n            if (relatedHierarchies.length > 0) {\n                relatedHierarchies.forEach((relatedHierarchyCode: string) => {\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    let textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n\n                    if (textWidth > width) {\n                        width = textWidth;\n                    }\n                });\n            } else {\n                let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n                width = noHierLabelWidth > width ? noHierLabelWidth : width;\n            }\n\n            width = width + widthPadding;\n\n            let heightAdditions: number = relatedHierarchies.length > 0 ? (numActions + 2) : (numActions + 3);\n\n            // Background rectangle with border\n            contextMenuGroup.append(\"rect\")\n                .classed(\"contextmenu-relatedhiers-background\", true)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"rx\", 5)\n                .attr(\"width\", width)\n                .attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", .5)\n                .attr(\"stroke\", borderColor);\n\n            // Related Hierarchies Title\n            contextMenuGroup.append(\"text\")\n                .classed(\"contextmenu-relatedhiers-title\", true)\n                .attr(\"x\", x + widthPadding / 2)\n                .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                .attr(\"font-size\", titleFontSize)\n                .attr(\"font-family\", fontFamily)\n                .attr(\"font-weight\", \"bold\")\n                .text(titleLabel);\n\n            y = y + height;\n\n            // Dividing line at the bottom\n            contextMenuGroup.append(\"line\")\n                .classed(\"contextmenu-relatedhiers-divider\", true)\n                .attr(\"x1\", x)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x + width)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", borderColor)\n                .attr(\"stroke-width\", .5);\n\n\n            if (relatedHierarchies.length > 0) {\n                // Loop over all related hierarchies and draw them as list items\n                for (let i = 0; i < relatedHierarchies.length; ++i) {\n                    let relatedHierarchyCode = relatedHierarchies[i];\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    // Text that says the hierarchy's display label\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"data-hierCode\", relatedHierarchyCode)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(relatedHierarchyLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n                    y = y + height;\n\n                    // Dividing line at the bottom\n                    if (i < relatedHierarchies.length) {\n                        contextMenuGroup.append(\"line\")\n                            .classed(\"contextmenu-relatedhiers-divider\", true)\n                            .attr(\"data-hierCode\", relatedHierarchyCode)\n                            .attr(\"x1\", x + 5)\n                            .attr(\"y1\", y)\n                            .attr(\"x2\", x + width - 5)\n                            .attr(\"y2\", y)\n                            .attr(\"stroke\", dividerColor)\n                            .attr(\"stroke-width\", .5);\n                    }\n                }\n            } else {\n                // Text that says \"No related Hierarchies\"\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(noRelatedHierLabel);\n\n                y = y + height;\n\n                    // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x + 5)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width - 5)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", dividerColor)\n                    .attr(\"stroke-width\", .5);\n            }\n\n      // Actions Section\n            if (hasActionsPermissions) {\n              // Actions Title\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-title\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                    .attr(\"font-size\", titleFontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .attr(\"font-weight\", \"bold\")\n                    .text(actionsTitle);\n\n                y = y + height;\n\n              // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n        // \"Remove from hierarchy\" button\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"data-remove\", \"REPLACE---gotCode\")\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(removeFromHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) { that.removeGotFromHierarchy(); });\n\n                y = y + height;\n\n            // Inherit / Uninherit buttons\n                if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                    contextMenuGroup.append(\"line\")\n                        .classed(\"contextmenu-relatedhiers-divider\", true)\n                        .attr(\"x1\", x)\n                        .attr(\"y1\", y)\n                        .attr(\"x2\", x + width)\n                        .attr(\"y2\", y)\n                        .attr(\"stroke\", borderColor)\n                        .attr(\"stroke-width\", .5);\n\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(uninheritLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.onClickUninheritHierarchy(); });\n\n                    y = y + height;\n                } else {\n                    let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                    if (existingSecondary.node() != null) {\n                        let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                        let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                        let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                        let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                        if (this.treeNode.parent == null && relatedGotHasParents) {\n                            contextMenuGroup.append(\"line\")\n                                .classed(\"contextmenu-relatedhiers-divider\", true)\n                                .attr(\"x1\", x)\n                                .attr(\"y1\", y)\n                                .attr(\"x2\", x + width)\n                                .attr(\"y2\", y)\n                                .attr(\"stroke\", borderColor)\n                                .attr(\"stroke-width\", .5);\n\n                            contextMenuGroup.append(\"text\")\n                                .classed(\"contextmenu-relatedhiers-text\", true)\n                                .attr(\"x\", x + widthPadding / 2)\n                                .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-family\", fontFamily)\n                                .text(inheritLabel)\n                                .style(\"cursor\", \"pointer\")\n                                .on(\"click\", function(event, node) { that.onClickInheritHierarchy(secondaryHierarchy); });\n\n                            y = y + height;\n                        }\n                    }\n                }\n            }\n\n            if (isSecondaryHierarchyRendered) {\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(hideRelatedHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) {\n                        that.hideRelatedHierarchy();\n\n                        let existingMenu = d3.select(\".g-context-menu\");\n                        if (existingMenu.node() != null) {\n                            existingMenu.remove();\n                        }\n\n                        d3.select(\".g-hierarchy-got-connector\").remove();\n                    });\n            }\n\n            this.hierarchyComponent.calculateSvgViewBox();\n        } else {\n            existingMenu.remove();\n        }\n    }\n\n    removeGotFromHierarchy() {\n        let svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n        let obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        let message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.data = obj.code;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            let treeNode = svgGot.getTreeNode();\n            let parent = null;\n            if (treeNode.parent == null) {\n                parent = \"ROOT\";\n            } else {\n                if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                    parent = \"ROOT\";\n                } else {\n                    parent = treeNode.parent.data.geoObjectType;\n                }\n            }\n\n            this.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err); });\n        });\n    }\n\n    renderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let myBbox = this.getBbox();\n        let svg = d3.select(\"#svg\");\n\n        // Remove any secondary hierarchy that may already be rendered\n        if (this.hideRelatedHierarchy() === relatedHierarchy.code) {\n            return;\n        }\n\n        // Get the bounding box for our primary hierarchy\n        let primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n        // Render the secondary hierarchy\n        let svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService, this.authService);\n        svgHt.render();\n        let gSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n\n        // Translate the secondary hierarchy to the right of the primary hierarchy\n        let gHierarchy: any = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node();\n        let bbox = gHierarchy.getBBox();\n        let paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n        gSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n        // Draw dotted line between the shared node in the hierarchies\n        let secondaryGot = d3.select(\".g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n        let secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n        secondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n        d3.select(\".g-hierarchy-got-connector\").remove();\n        let gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n        gConnector.append(\"path\")\n            .classed(\"hierarchy-got-connector\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\n                \"d\",\n                \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width) +\n                \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2) +\n                \"H\" + secondaryGotBbox.x\n            );\n\n        // Draw arrow for dotted line\n        const arrowRectD = { height: 10, width: 7 };\n        let gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n        gArrow.append(\"rect\")\n            .classed(\"hierarchy-got-connector-arrow-rect\", true)\n            .attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n            .attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n        gArrow.append(\"path\")\n            .classed(\"hierarchy-got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\",\n                \"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n            );\n\n        // Recalculate the viewbox (should probably be the last thing that happens)\n        this.hierarchyComponent.calculateSvgViewBox();\n    }\n\n    onClickInheritHierarchy(hierarchy: HierarchyType) {\n        this.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n    }\n\n    onClickUninheritHierarchy() {\n        this.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n    }\n\n}\n","/* eslint-disable indent */\n/* eslint-disable no-unused-vars */\n/* eslint-disable quotes */\n\nimport { Graph, Layout, Edge } from '@swimlane/ngx-graph';\nimport { DIMENSIONS } from \"./relationship-visualizer.component\";\nimport * as dagre from 'dagre';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport interface DagreNodesOnlySettings extends DagreSettings {\n  curveDistance?: number;\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nexport class DagreNodesOnlyLayout implements Layout {\n\n  defaultSettings: DagreNodesOnlySettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 0,\n    marginY: 0,\n    edgePadding: DIMENSIONS.PADDING.BETWEEN_NODES,\n    rankPadding: 100,\n    nodePadding: DIMENSIONS.PADDING.BETWEEN_NODES,\n    curveDistance: 0,\n    multigraph: false,\n    compound: true\n  };\n\n  settings: DagreNodesOnlySettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  public constructor() {\n\n  }\n\n  public run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  public updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n    // determine new arrow position\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [rankAxis]: sourceNode.position[rankAxis] + (targetNode.position[rankAxis] - sourceNode.position[rankAxis]) / 2,\n        [orderAxis]: startingPoint[orderAxis]\n      },\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: sourceNode.position[rankAxis] + (targetNode.position[rankAxis] - sourceNode.position[rankAxis]) / 2\n      },\n      endingPoint\n    ];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n    return graph;\n  }\n\n  public createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n    let linkId: number = 1;\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = linkId;\n        linkId++;\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { TreeNode } from \"@circlon/angular-tree-component\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\n\n\n@Component({\n    selector: \"add-child-to-hierarchy-modal\",\n    templateUrl: \"./add-child-to-hierarchy-modal.component.html\",\n    styleUrls: []\n})\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n    /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n    public hierarchyType: HierarchyType;\n    public nodes: HierarchyNode[];\n    public allGeoObjectTypes: GeoObjectType[];\n    public selectedGeoObjectType: GeoObjectType;\n    private toRoot: boolean = false;\n    selectUndefinedOptionValue: any;\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n\n    onSelect(value: string): void {\n        this.allGeoObjectTypes.forEach(gObj => {\n            if (gObj.code === value) {\n                this.selectedGeoObjectType = gObj;\n            }\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy(this.hierarchyType.code, parent, this.selectedGeoObjectType.code).then(data => {\n            this.onNodeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-attributes-modal\",\n    templateUrl: \"./manage-attributes-modal.component.html\",\n    styleUrls: [\"./manage-attributes-modal.css\"]\n})\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageAttributes, attribute: this.attribute, termOption: \"\" };\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy() {\n        this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            this.onDeleteAttribute.next(data);\n\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            [title]=\"'modal.button.edit' | localize\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            [title]=\"'modal.button.remove' | localize\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyOverTimeEntry, GeoObject, HierarchyOverTimeEntryParent, HierarchyOverTime, AttributeType, TimeRangeEntry } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nexport class HierarchyCREditor extends ValueOverTimeCREditor {\n\n  hierarchyOverTime: HierarchyOverTime;\n\n  hierarchyEntry: HierarchyOverTimeEntry;\n\n  existRangeStale: boolean = false;\n\n  constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction, hierarchyEntry: HierarchyOverTimeEntry, hierarchyOverTime: HierarchyOverTime) {\n      super(changeRequestAttributeEditor, attr, action);\n      this.hierarchyEntry = hierarchyEntry;\n      this.hierarchyOverTime = hierarchyOverTime;\n\n      if (this.hierarchyEntry != null) {\n          this.hierarchyEntry.loading = {};\n      }\n  }\n\n  // @Override\n  getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n      return this.hierarchyEntry;\n  }\n\n  // @Override\n  getValueFromGeoObjectForDiff(): any {\n      let immediateParent: GeoObject = this.hierarchyEntry == null ? null : this.hierarchyEntry.parents[this.hierarchyOverTime.types[this.hierarchyOverTime.types.length - 1].code].geoObject;\n      let goVal: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n      return goVal;\n  }\n\n  // @Override\n  onChange(type: ChangeType) {\n      if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n          this.existRangeStale = true;\n      }\n\n      super.onChange(type);\n  }\n\n  // @Override\n  validate(): boolean {\n      super.validate();\n\n      if (this._isValid && this.hierarchyEntry != null) {\n          let invalidParent = this.changeRequestAttributeEditor.changeRequestEditor.dateService.invalidParent;\n          let parentDoesNotExist = this.changeRequestAttributeEditor.changeRequestEditor.dateService.parentDoesNotExist;\n          let service = this.changeRequestAttributeEditor.changeRequestEditor.registryService;\n\n          let len = this.hierarchyOverTime.types.length;\n          for (let i = len - 1; i >= 0; --i) {\n              let type = this.hierarchyOverTime.types[i];\n\n              if (Object.prototype.hasOwnProperty.call(this.hierarchyEntry.parents, type.code) && this.hierarchyEntry.parents[type.code].geoObject) {\n                  let goParent = this.hierarchyEntry.parents[type.code].geoObject;\n\n                  if (!this.existRangeStale) {\n                      if (goParent.properties.invalid) {\n                          this._isValid = false;\n                          this.conflictMessages.add(invalidParent);\n                      }\n                      if (!goParent.properties.exists) {\n                          this._isValid = false;\n                          this.conflictMessages.add(parentDoesNotExist);\n                      }\n                  } else {\n                      service.doesGeoObjectExistAtRange(this.startDate, this.endDate, type.code, goParent.properties.code).then(stats => {\n                          goParent.properties.invalid = stats.invalid;\n                          goParent.properties.exists = stats.exists;\n\n                          this.conflictMessages.delete(invalidParent);\n                          this.conflictMessages.delete(parentDoesNotExist);\n\n                          if (goParent.properties.invalid) {\n                              this._isValid = false;\n                              this.conflictMessages.add(invalidParent);\n                          }\n                          if (!goParent.properties.exists) {\n                              this._isValid = false;\n                              this.conflictMessages.add(parentDoesNotExist);\n                          }\n                      }).catch((err: HttpErrorResponse) => {\n                      // eslint-disable-next-line no-console\n                          console.log(err);\n                      });\n                  }\n              }\n          }\n\n          this.existRangeStale = false;\n      }\n\n      return this._isValid;\n  }\n\n  // @Override\n  validateUpdateReference() {\n      // We could potentially try to check for this, but it won't be easy. So for now we're doing nothing.\n  }\n\n  setParentValue(type: {code: string, label: string}, parents: { [k: string]: HierarchyOverTimeEntryParent }) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      let directParent: GeoObject = null;\n      if (type != null) {\n          directParent = parents[type.code].geoObject;\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  // let currentDirectParent: GeoObject = this.hierarchyEntry.parents[type.code].geoObject;\n                  let currentDirectParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n                  let oldValue: string = currentDirectParent == null ? null : currentDirectParent.properties.type + \"_~VST~_\" + currentDirectParent.properties.code;\n\n                  if (\n                      (currentDirectParent == null && directParent == null) ||\n                      ((currentDirectParent != null && directParent != null) &&\n                      currentDirectParent.properties.code === directParent.properties.code)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldParents = JSON.parse(JSON.stringify(this.hierarchyEntry.parents));\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          let newValueStrConcat: string = null;\n          if (directParent != null) {\n              newValueStrConcat = directParent.properties.type + \"_~VST~_\" + directParent.properties.code;\n          }\n\n          if (newValueStrConcat === this.diff.oldValue) {\n              delete this.diff.newValue;\n          } else {\n              this.diff.newValue = newValueStrConcat;\n          }\n\n          this.diff.parents = parents;\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.parents = parents;\n      }\n\n      this.onChange(ChangeType.VALUE);\n  }\n\n  public getLowestLevelFromHierarchyEntry(parents: any): {geoObject: GeoObject, text: string} {\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(parents, type.code) && parents[type.code].geoObject) {\n              return parents[type.code];\n          }\n      }\n\n      return null;\n  }\n\n  set value(val: any) {\n      throw new Error(\"Invoke setParentValue instead\");\n  }\n\n  get value() {\n      if (this.diff != null && this.diff.parents !== undefined) {\n          return this.diff;\n      } else if (this.hierarchyEntry != null) {\n          return this.hierarchyEntry;\n      }\n\n      return null;\n  }\n\n  public removeType(type): void {\n      // this.value.parents[type.code] = { text: \"\", geoObject: null };\n\n      let newParents = JSON.parse(JSON.stringify(this.value.parents));\n      newParents[type.code] = { text: \"\", geoObject: null };\n\n      // Set the value to be the next existing ancestor.\n      let entry = this.value;\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let parentType = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(entry.parents, parentType.code) && entry.parents[parentType.code].geoObject) {\n              this.setParentValue(parentType, newParents);\n              return;\n          }\n      }\n\n      // If we do not have a next existing ancestor, then we must set the value to null.\n      this.setParentValue(null, newParents);\n  }\n\n  createEmptyHierarchyEntry(): HierarchyOverTimeEntry {\n      let hierarchyEntry = new HierarchyOverTimeEntry();\n      hierarchyEntry.loading = {};\n      hierarchyEntry.oid = uuid();\n\n      hierarchyEntry.parents = {};\n\n      if (this.hierarchyOverTime) {\n          for (let i = 0; i < this.hierarchyOverTime.types.length; i++) {\n              let current = this.hierarchyOverTime.types[i];\n\n              hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n\n              hierarchyEntry.loading = {};\n          }\n      }\n\n      return hierarchyEntry;\n  }\n\n  public remove(): void {\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.onChange(ChangeType.REMOVE);\n              return;\n          } else if (this.hierarchyEntry != null && this.diff == null) {\n              let currentImmediateParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n              let oldValue: string = currentImmediateParent == null ? null : currentImmediateParent.properties.type + \"_~VST~_\" + currentImmediateParent.properties.code;\n\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.hierarchyEntry.oid;\n              this.diff.oldValue = oldValue;\n              this.diff.oldStartDate = this.hierarchyEntry.startDate;\n              this.diff.oldEndDate = this.hierarchyEntry.endDate;\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let index = this.hierarchyOverTime.entries.findIndex(vot => vot.oid === this.hierarchyEntry.oid);\n\n          if (index !== -1) {\n              this.hierarchyOverTime.entries.splice(index, 1);\n          }\n      }\n\n      this.onChange(ChangeType.REMOVE);\n  }\n\n}\n","\nimport { ChangeRequest, AbstractAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ActionTypes } from \"@registry/model/constants\";\n\nexport class StandardAttributeCRModel {\n\n    changeRequest: ChangeRequest;\n\n    diff: { oldValue?: any, newValue?: any };\n\n    attribute: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    editAction: AbstractAction;\n\n    code: string;\n\n    private _isValid: boolean = true;\n\n    constructor(attr: AttributeType, geoObject: GeoObjectOverTime, cr: ChangeRequest) {\n        this.attribute = attr;\n        this.geoObject = geoObject;\n        this.changeRequest = cr;\n        this.initialize();\n    }\n\n    initialize(): void {\n        let actions = this.changeRequest.actions;\n\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            if (actions.length > 0 && actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                this.editAction = actions[0];\n            }\n        } else {\n            actions.forEach((action: AbstractAction) => {\n                if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (this.attribute.code === updateAttrAction.attributeName) {\n                        this.editAction = action;\n                    }\n                }\n            });\n\n            if (this.editAction == null) {\n                this.editAction = new UpdateAttributeAction(this.attribute.code);\n            }\n        }\n\n        let len = this.changeRequest.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let action: AbstractAction = actions[i];\n\n            if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                if (this.attribute.code === updateAttrAction.attributeName) {\n                    this.diff = updateAttrAction.attributeDiff;\n                }\n            } else if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n              // Nothing to do here. Create actions don't have diffs.\n            } else {\n                console.log(\"Unexpected action : \" + action.actionType, action);\n            }\n        }\n    }\n\n    public hasChanges(): boolean {\n        return this.diff != null;\n    }\n\n    isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(): boolean {\n        return this._isValid;\n    }\n\n    set value(val: any) {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            this.geoObject.attributes[this.attribute.code] = val;\n        } else {\n            if (this.diff != null) {\n                if (this.areValuesEqual(this.diff.oldValue, val)) {\n                    delete (this.editAction as UpdateAttributeAction).attributeDiff;\n                    this.diff = null;\n\n                    let index = this.changeRequest.actions.findIndex(findAction => findAction === this.editAction);\n                    if (index !== -1) {\n                        this.changeRequest.actions.splice(index, 1);\n                    }\n                } else {\n                    this.diff.newValue = val;\n                }\n            } else {\n                this.diff = { oldValue: this.geoObject.attributes[this.attribute.code], newValue: val };\n\n                (this.editAction as UpdateAttributeAction).attributeDiff = this.diff;\n                this.changeRequest.actions.push(this.editAction);\n            }\n        }\n    }\n\n    get value(): any {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            return this.geoObject.attributes[this.attribute.code];\n        } else {\n            if (this.diff != null) {\n                return this.diff.newValue;\n            } else {\n                return this.geoObject.attributes[this.attribute.code];\n            }\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attribute.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        return val1 === val2;\n    }\n\n}\n","\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeTermType, Term } from \"@registry/model/registry\";\nimport { GeoJsonLayer, Layer } from \"@registry/service/layer-data-source\";\n\n/*\n * This class exists purely for the purpose of storing what data to be rendered to the front-end. Any storage or submission of this data to the back-end must be translated\n * using the editor.\n */\nexport class VersionDiffView {\n\n    component: ManageVersionsComponent;\n    summaryKeyData: SummaryKey;\n    summaryKeyLocalized: string; // If we try to localize this in the html with a localize element then it won't update as frequently as we need so we're doing stuff manually here.\n    objectLayer: Layer = null;\n    editingLayer: GeoJsonLayer = null;\n    oldLayer: GeoJsonLayer = null;\n    coordinate?: any;\n    newCoordinateX?: any;\n    newCoordinateY?: any;\n    editor: ValueOverTimeCREditor;\n\n    // We must track our own value, so that they can be diffed when setting.\n    _value: any;\n\n    constructor(component: ManageVersionsComponent, editor: ValueOverTimeCREditor) {\n        this.component = component;\n        this.editor = editor;\n\n        this.populate(editor);\n        this.editor.onChangeSubject.subscribe(() => {\n            this.populate(this.editor);\n        });\n    }\n\n    populate(editor: ValueOverTimeCREditor) {\n        if (this.component.attributeType.type === \"local\" && this._value != null && this.editor.value != null) {\n            // The front-end glitches out if we swap to a new object. We have to update the existing object to be the same\n            LocalizedValue.populate(this._value, this.editor.value);\n        } else if (this.component.attributeType.code === \"_PARENT_\" && this._value != null && this.editor.value != null && this.editor.value.parents != null) {\n            for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n                let current = this.component.hierarchy.types[i];\n\n                this._value.parents[current.code].text = this.editor.value.parents[current.code].text;\n                this._value.parents[current.code].geoObject = this.editor.value.parents[current.code].geoObject;\n            }\n        } else if (this.component.attributeType.code === \"_PARENT_\") {\n            this._value = JSON.parse(JSON.stringify(this.editor.value));\n        } else {\n            this._value = this.convertValueForDisplay(this.editor.value == null ? null : JSON.parse(JSON.stringify(this.editor.value)));\n        }\n\n        if (this.component.attributeType.code === \"_PARENT_\") {\n            this._value.loading = {};\n        }\n\n        this.calculateSummaryKey();\n    }\n\n    set oid(oid: string) {\n        this.editor.oid = oid;\n    }\n\n    get oid(): string {\n        return this.editor.oid;\n    }\n\n    get startDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return this.editor.oldStartDate;\n        }\n\n        return this.editor.startDate;\n    }\n\n    set startDate(startDate: string) {\n        this.editor.startDate = startDate;\n        this.calculateSummaryKey();\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        this.editor.oldStartDate = oldStartDate;\n    }\n\n    get oldStartDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newStartDate != null && this.editor.oldStartDate !== undefined) {\n            return this.convertDateForDisplay(this.editor.oldStartDate);\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return this.editor.oldEndDate;\n        }\n\n        return this.editor.endDate;\n    }\n\n    set endDate(endDate: string) {\n        this.editor.endDate = endDate;\n        this.calculateSummaryKey();\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        this.editor.oldEndDate = oldEndDate;\n    }\n\n    get oldEndDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newEndDate != null && this.editor.oldEndDate !== undefined) {\n            return this.convertDateForDisplay(this.editor.oldEndDate);\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.editor.value = value;\n    }\n\n    set oldValue(oldValue: any) {\n        this.editor.oldValue = oldValue;\n    }\n\n    get oldValue(): any {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newValue != null && this.editor.oldValue !== undefined) {\n            return this.convertOldValueForDisplay(this.editor.oldValue);\n        }\n\n        return null;\n    }\n\n    convertDateForDisplay(date: string): string {\n        return (date == null || date.length === 0) ? null : this.component.dateService.formatDateForDisplay(date);\n    }\n\n    convertOldValueForDisplay(val: any): any {\n        if (this.component.attributeType.type === \"date\") {\n            return this.component.dateService.formatDateForDisplay(new Date(val));\n        } else if (this.component.attributeType.code === \"_PARENT_\" && val.includes(\"_~VST~_\")) {\n            let split = val.split(\"_~VST~_\");\n            // let parentTypeCode = split[0];\n            let parentCode = split[1];\n\n            return parentCode;\n        } else if (this.component.attributeType.type === \"term\") {\n            let code = val;\n            if (code instanceof Array) {\n                code = val[0];\n            }\n\n            let attrOpts = (this.component.attributeType as AttributeTermType).rootTerm.children;\n\n            let index = attrOpts.findIndex((term: Term) => term.code === code);\n\n            if (index !== -1) {\n                return attrOpts[index].label.localizedValue;\n            } else {\n                return val;\n            }\n        } else if (this.component.attributeType.type === \"classification\") {\n            return val.label.localizedValue;\n        }\n\n        return val;\n    }\n\n    convertValueForDisplay(val: any): any {\n        if (val == null) {\n            return null;\n        }\n\n        return val;\n    }\n\n    calculateSummaryKey() {\n        if (this.editor.diff == null) {\n            this.summaryKey = SummaryKey.UNMODIFIED;\n            return;\n        }\n\n        if (this.editor.diff.action === \"CREATE\") {\n            this.summaryKey = SummaryKey.NEW;\n            return;\n        } else if (this.editor.diff.action === \"DELETE\") {\n            this.summaryKey = SummaryKey.DELETE;\n            return;\n        }\n\n        let hasTime = this.editor.diff.newStartDate != null || this.editor.diff.newEndDate != null;\n        let hasValue = Object.prototype.hasOwnProperty.call(this.editor.diff, \"newValue\");\n\n        if (hasTime && hasValue) {\n            this.summaryKey = SummaryKey.UPDATE;\n        } else if (hasTime) {\n            this.summaryKey = SummaryKey.TIME_CHANGE;\n        } else if (hasValue) {\n            this.summaryKey = SummaryKey.VALUE_CHANGE;\n        } else {\n            this.summaryKey = SummaryKey.UNMODIFIED;\n        }\n    }\n\n    set summaryKey(newKey: SummaryKey) {\n        this.summaryKeyData = newKey;\n        this.localizeSummaryKey();\n    }\n\n    get summaryKey(): SummaryKey {\n        return this.summaryKeyData;\n    }\n\n    private localizeSummaryKey(): void {\n        this.summaryKeyLocalized = this.component.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + this.summaryKeyData);\n    }\n\n    private conflictMessagesHasSeverity(severity: string) {\n        let has = false;\n\n        this.editor.conflictMessages.forEach(msg => {\n            if (msg.severity === severity) {\n                has = true;\n            }\n        });\n\n        return has;\n    }\n\n    hasError(): boolean {\n        return this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"ERROR\");\n    }\n\n    hasWarning(): boolean {\n        return !this.hasError() && this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"WARNING\");\n    }\n\n    destroy(component: ManageVersionsComponent): void {\n        let removeLayers = [];\n\n        if (this.editingLayer != null) {\n            removeLayers.push(this.editingLayer.getId());\n            this.editingLayer = null;\n        }\n        if (this.oldLayer != null) {\n            removeLayers.push(this.oldLayer.getId());\n            this.oldLayer = null;\n        }\n\n        component.geomService.removeLayers(removeLayers);\n    }\n\n}\n","import { Input, Component, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectOverTime, GeoObjectType } from \"@registry/model/registry\";\nimport { AbstractAction } from \"@registry/model/crtable\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\n\nimport { AuthService } from \"@shared/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { ActionDetailComponent } from \"../action-detail-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\ndeclare var $: any;\n\n@Component({\n\n    selector: \"crtable-detail-create-geo-object\",\n    templateUrl: \"./detail.component.html\",\n    styleUrls: [\"./crtable-detail-create-geo-object.css\"],\n    encapsulation: ViewEncapsulation.None\n})\n// export class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\nexport class CreateUpdateGeoObjectDetailComponent implements ActionDetailComponent {\n\n    isMaintainer: boolean = false;\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    @Input() readOnly: boolean;\n\n    isEditing: boolean = false;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    constructor(private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService,\n        private authService: AuthService) {\n\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if (this.isNew()) {\n\n            this.preGeoObject = this.postGeoObject;\n\n        }\n\n        this.onSelect(this.action);\n\n    }\n\n    isNew(): boolean {\n\n        return (this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\");\n\n    }\n\n    handleDateChange(): void {\n\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n    }\n\n    applyAction() {\n\n        // var action = JSON.parse( JSON.stringify( this.action ) );\n        let action = this.action;\n\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if (this.geometryEditor != null) {\n\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n\n        }\n\n        /*\n        this.changeRequestService.applyAction(action).then(response => {\n\n            this.endEdit();\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n        */\n\n    }\n\n    onSelect(action: AbstractAction) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n\n            this.registryService.getGeoObjectOverTime(this.postGeoObject.attributes.code, this.geoObjectType.code).then(geoObject => {\n\n                this.preGeoObject = geoObject;\n\n            }).catch((err: HttpErrorResponse) => {\n\n                this.error(err);\n\n            });\n\n        }\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    // @HostListener( 'window:beforeunload' )\n    // canDeactivate(): Observable<boolean> | boolean {\n    //    if ( this.isEditing ) {\n    //        //event.preventDefault();\n    //        //event.returnValue = 'Are you sure?';\n    //        //return 'Are you sure?';\n//\n     //       return false;\n     //   }\n//\n    //    return true;\n    // }\n\n    // afterDeactivate( isDeactivating: boolean ) {\n    //    if ( isDeactivating && this.isEditing ) {\n    //        this.unlockActionSync();\n    //    }\n    // }\n\n    startEdit(): void {\n\n        //this.lockAction();\n\n    }\n\n    public endEdit(): void {\n\n        //this.unlockAction();\n\n    }\n/*\n    lockAction() {\n\n        this.changeRequestService.lockAction(this.action.oid).then(response => {\n\n            this.isEditing = true;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(true);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    unlockAction() {\n\n        this.changeRequestService.unlockAction(this.action.oid).then(response => {\n\n            this.isEditing = false;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(false);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n\n        $.ajax({\n            url: registry.contextPath + \"/changerequest/unlockAction\",\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function(a) {\n\n            },\n            async: false\n        });\n\n    }\n*/\n    getUsername(): string {\n\n        return this.authService.getUsername();\n\n    }\n\n    public error(err: HttpErrorResponse): void {\n\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading text-center\">\n        <h1 class=\"action-detail-header\">{{action.actionLabel}}</h1>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <h4>\n        <localize key=\"io.geoObjectType\"></localize>: {{action.geoObjectType.code}}\n      </h4>\n    \n      <div style=\"margin: 20px 0;\">\n        <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\"></localize></span>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n\n<!--         <geoobject-shared-attribute-editor  -->\n<!--           #attributeEditor -->\n<!--           *ngIf=\"preGeoObject\" -->\n<!--           [readOnly]=\"!isEditing\"   -->\n<!--           [geoObjectType]=\"geoObjectType\" -->\n<!--           [postGeoObject]=\"postGeoObject\" -->\n<!--           [preGeoObject]=\"preGeoObject\" -->\n<!--           [forDate]=\"forDate\" -->\n<!--           [isGeometryInlined]=\"true\"> -->\n<!--         </geoobject-shared-attribute-editor> -->\n        \n        <geoobject-shared-attribute-editor \n            #attributeEditor\n            *ngIf=\"action\"\n            [readOnly]=\"readOnly\"  \n            [geoObjectType]=\"geoObjectType\"\n            [geoObjectData]=\"{'geoObject':postGeoObject, 'actions': [action]}\"\n            [forDate]=\"forDate\"\n            [readOnly]=\"false\"\n            [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\" [disabled]=\"!isEditing\"></textarea>\n        </div>\n\n        <div class=\"button-holder text-right\" style=\"margin:40px 0 20px 0;\">\n          <button *ngIf=\"!readOnly && !isEditing\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: \"simple-edit-control\",\n    templateUrl: \"./simple-edit-control.component.html\",\n    styleUrls: [\"./simple-edit-control.css\"]\n})\nexport class SimpleEditControl {\n\n    elRef: ElementRef\n\n    @Output() editEmitter = new EventEmitter<void>();\n\n    @Input() visible: boolean = true;\n    @Input() editSessionEnabled: boolean = false;\n    @Input() save: boolean = false;\n\n    constructor(elRef: ElementRef) {\n        this.elRef = elRef;\n    }\n\n    onAdd(map): any {\n        return this.elRef.nativeElement;\n    }\n\n    onRemove(map): void {\n        this.elRef.nativeElement.remove();\n    }\n\n    onClick(): void {\n        this.editEmitter.emit();\n    }\n}\n","<div (click)=\"this.onClick();\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button *ngIf=\"editSessionEnabled\" \n    class=\"fa\" \n    [ngClass]=\"{'fa-pencil-square-o':!save, 'fa-save':save}\" \n    style=\"color: black; font-size: 18px;\" \n    [title]=\"'changeovertime.manageVersions.button.label' | localize\" \n    >\n  </button>\n  <div *ngIf=\"editSessionEnabled\" class=\"map-button-info-hint-wrapper\">\n    <div class=\"map-button-info-hint\">\n      <localize key=\"map.button.info.hint\"></localize>\n    </div>\n    <div class=\"map-button-pointer\"></div>\n  </div>\n</div>","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\n@Component({\n\n    selector: \"cascading-geo-selector\",\n    templateUrl: \"./cascading-geo-selector.html\"\n})\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mainForm\") mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() customEvent: boolean = false;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach(hierarchy => {\n            const object = {};\n            object[\"label\"] = hierarchy.label;\n            object[\"code\"] = hierarchy.code;\n\n            this.isValid = this.isValid && (this.hierarchies.length > 0);\n\n            hierarchy.entries.forEach(pot => {\n                const startDate = Date.parse(pot.startDate);\n                const endDate = Date.parse(pot.endDate);\n\n                if (time >= startDate && time <= endDate) {\n                    let parents = [];\n\n                    hierarchy.types.forEach(type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if (pot.parents[type.code] != null) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push(parent);\n                    });\n\n                    object[\"parents\"] = parents;\n                }\n            });\n\n            this.cHierarchies.push(object);\n        });\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions(code: string): void {\n        const hierarchy = this.hierarchies.find(h => h.code === code);\n\n        if (this.customEvent) {\n            this.onManageVersion.emit(hierarchy);\n        } else {\n/*\n            this.bsModalRef = this.modalService.show(ManageParentVersionsModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            });\n            this.bsModalRef.content.init(hierarchy);\n            this.bsModalRef.content.onVersionChange.subscribe(hierarchy => {\n                this.calculate();\n            });\n            */\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\" *ngIf=\"!readOnly\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, Input, EventEmitter, Output, SimpleChanges } from \"@angular/core\";\nimport { IActionMapping, ITreeOptions } from \"@circlon/angular-tree-component\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\n\n@Component({\n\n    selector: \"tree-geo-selector\",\n    templateUrl: \"./tree-geo-selector.html\",\n    styleUrls: [\"./tree-geo-selector.css\"]\n})\nexport class TreeGeoSelector {\n\n    @Input() hierarchy: HierarchyOverTime;\n\n    @Input() readOnly: boolean = false;\n\n    @Input() forDate: Date = null;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    nodes: any[] = [];\n\n    actionMapping: IActionMapping = {\n        mouse: {\n            click: null\n        }\n    }\n\n    options: ITreeOptions = {\n        displayField: \"name\",\n        isExpandedField: \"expanded\",\n        idField: \"code\",\n        actionMapping: this.actionMapping\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        let time = null;\n\n        if (this.forDate != null) {\n            time = this.forDate.getTime();\n        }\n\n        let nodes = [];\n        let current = null;\n\n        this.hierarchy.entries.forEach(pot => {\n            const startDate = Date.parse(pot.startDate);\n            const endDate = Date.parse(pot.endDate);\n\n            // eslint-disable-next-line no-mixed-operators\n            if (time == null || time >= startDate && time <= endDate) {\n                this.hierarchy.types.forEach(type => {\n                    let node: any = {\n                        code: type.code,\n                        label: type.label,\n                        children: [],\n                        expanded: false\n                    };\n\n                    if (pot.parents[type.code] != null) {\n                        node.name = pot.parents[type.code].text;\n\n                        if (time == null) {\n                            node.name = node.name + \" (\" + pot.startDate + \" -> \" + pot.endDate + \")\";\n                        }\n\n                        node.geoObject = pot.parents[type.code].geoObject;\n                    }\n\n                    if (current == null) {\n                        nodes.push(node);\n                    } else {\n                        current.children.push(node);\n                        current.expanded = true;\n                    }\n\n                    current = node;\n                });\n            }\n\n            current = null;\n        });\n\n        this.nodes = nodes;\n    }\n\n    onEdit(): void {\n        this.onManageVersion.emit(this.hierarchy);\n    }\n\n}\n","<div>\n\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 style=\"margin: 0;\">{{hierarchy.label}}</h4>\n    </div>\n    <div class=\"panel-body\">\n\n<!--       <div class=\"input-group\"> -->\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\" >\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n<!--         <span *ngIf=\"!readOnly\" class=\"input-group-addon\">  -->\n<!--           <i class=\"fa fa-pencil clickable\" (click)=\"onEdit()\" aria-hidden=\"true\"></i> -->\n<!--         </span> -->\n<!--       </div> -->\n      \n      <button class=\"btn btn-primary\" style=\"width:100%;margin-top:10px;\" *ngIf=\"!readOnly\" (click)=\"onEdit()\"><localize key=\"modal.button.edit\"></localize></button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component({\n    selector: \"action-detail-modal\",\n    templateUrl: \"./action-detail-modal.component.html\",\n    styleUrls: []\n})\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    readonly: boolean;\n\n    @ViewChild(\"cuDetail\") cuDetail: ActionDetailComponent;\n    @ViewChild(\"arDetail\") arDetail: ActionDetailComponent;\n    @ViewChild(\"spDetail\") spDetail: ActionDetailComponent;\n\n    @Input()\n    curAction(action: any, readonly: boolean) {\n        this.action = action;\n        this.readonly = readonly;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if (this.cuDetail != null) {\n            this.cuDetail.endEdit();\n        }\n\n        if (this.arDetail != null) {\n            this.arDetail.endEdit();\n        }\n\n        if (this.spDetail != null) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { IOService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"data-export\",\n    templateUrl: \"./data-export.component.html\",\n    styleUrls: []\n})\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService, private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes(true).then(types => {\n            // this.types = types;\n\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                if (this.authService.isOrganizationRA(types[i].orgCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.types = myOrgTypes;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onChange(code: string): void {\n        if (code != null && code.length > 0) {\n            this.service.getHierarchiesForType(code, false).then(hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n    }\n\n    onExport(): void {\n        if (this.format === \"SHAPEFILE\") {\n            window.location.href = registry.contextPath + \"/shapefile/export-shapefile?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        } else if (this.format === \"EXCEL\") {\n            window.location.href = registry.contextPath + \"/excel/export-spreadsheet?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"export.option.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"export.option.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\nimport { ContextList, ListOrgGroup, ListVersion } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport * as ColorGen from \"color-generator\";\nimport { Subscription } from \"rxjs\";\n\nimport { CdkDragDrop, moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport { PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\nimport { GEO_OBJECT_DATA_SOURCE_TYPE, Layer, ListVectorLayerDataSource, LIST_VECTOR_SOURCE_TYPE, RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE, SEARCH_DATASOURCE_TYPE } from \"@registry/service/layer-data-source\";\nimport { RegistryService } from \"@registry/service/registry.service\";\nimport { RelationshipVisualizationService } from \"@registry/service/relationship-visualization.service\";\nimport { LayerGroup, LayerGroupSorter } from \"./layer-group\";\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nexport interface BaseLayer {\n    name: string,\n    label: string,\n    id: string,\n    sprite: string,\n    url: string,\n    selected: boolean\n}\n\n@Component({\n    selector: \"layer-panel\",\n    templateUrl: \"./layer-panel.component.html\",\n    styleUrls: [\"./location-manager.css\", \"./layer-panel.css\"]\n})\nexport class LayerPanelComponent implements OnInit, OnDestroy {\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: false\n    };\n\n    // Hack to allow the constant to be used in the html\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.LAYER_PANEL,\n        SEARCH_DATASOURCE_TYPE: SEARCH_DATASOURCE_TYPE,\n        GEO_OBJECT_DATA_SOURCE_TYPE: GEO_OBJECT_DATA_SOURCE_TYPE,\n        RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE: RELATIONSHIP_VISUALIZER_DATASOURCE_TYPE,\n        LIST_VECTOR_SOURCE_TYPE: LIST_VECTOR_SOURCE_TYPE\n    }\n\n    @Input() filter: string[] = [];\n    @Input() includeSearchLayer: boolean = false;\n    @Input() visualizeMode: number;\n\n    @Output() viewList = new EventEmitter<string>();\n    @Output() baseLayerChange = new EventEmitter<BaseLayer>();\n    @Output() create = new EventEmitter<Layer>();\n\n    @Input() panelSize: number = PANEL_SIZE_STATE.MINIMIZED;\n    @Output() panelSizeChange = new EventEmitter<number>();\n\n    listOrgGroups: ListOrgGroup[] = [];\n\n    layers: Layer[] = [];\n    layerGroups: LayerGroup[] = [];\n\n    versionMap: { [key: string]: ListVersion } = {};\n\n    graphList: ContextList = null;\n\n    form: { startDate: string, currentStartDate: string, endDate: string, currentEndDate: string } = {\n        startDate: \"\",\n        currentStartDate: \"\",\n        endDate: \"\",\n        currentEndDate: \"\"\n    };\n\n    /*\n     * List of base layers\n     */\n    baseLayers: BaseLayer[] = [\n        {\n            name: \"Satellite\",\n            label: \"baselayer.satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        //         {\n        //             name: 'Streets',\n        //             label: 'baselayer.streets',\n        //             id: 'streets-v11',\n        //             sprite: 'mapbox://sprites/mapbox/streets-v11',\n        //             url: 'mapbox://styles/mapbox/streets-v11'\n        //         }\n    ];\n\n    subscription: Subscription;\n\n    params: Params = null;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private spinner: NgxSpinnerService,\n        private service: ListTypeService,\n        private geomService: GeometryService,\n        private registryService: RegistryService,\n        private vizService: RelationshipVisualizationService,\n        private localService: LocalizationService,\n        private listService: ListTypeService) { }\n\n    ngOnInit(): void {\n        this.subscription = this.geomService.layersChange.subscribe((layers: Layer[]) => {\n            this.layersChange(layers);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    setPanelSize(size: number) {\n        this.panelSize = size;\n\n        if (this.layers.length === 0 && this.panelSize === PANEL_SIZE_STATE.WINDOWED) {\n            this.panelSize = PANEL_SIZE_STATE.FULLSCREEN;\n        }\n        if (this.panelSize > PANEL_SIZE_STATE.FULLSCREEN) {\n            this.panelSize = 0;\n        }\n\n        this.panelSizeChange.emit(this.panelSize);\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { layersPanelSize: this.panelSize },\n            queryParamsHandling: \"merge\",\n            replaceUrl: true\n        });\n    }\n\n    togglePanelOpen() {\n        this.setPanelSize(this.panelSize === 0 ? 1 : 0);\n    }\n\n    layersChange(layers: Layer[]): void {\n        this.layers = this.geomService.getLayers();\n        this.layerGroups = new LayerGroupSorter(this.localService).getLayerGroups(layers);\n\n        let layersWithoutVersions = this.layers.filter(layer => this.versionMap[layer.getId()] == null && layer.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE).map(layer => (layer.dataSource as ListVectorLayerDataSource).getVersionId());\n        if (layersWithoutVersions.length > 0) {\n            this.service.fetchVersionsAsListVersion(layersWithoutVersions).then((versions: ListVersion[]) => {\n                versions.forEach(version => {\n                    let layers = this.layers.filter(l => l.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE && (l.dataSource as ListVectorLayerDataSource).getVersionId() === version.oid);\n                    version.layers = layers;\n                    layers.forEach(layer => {\n                        this.versionMap[layer.getId()] = version;\n                    });\n                });\n            });\n        }\n\n        this.refreshListLayerReferences();\n    }\n\n    /*\n        private convertLayerToContextLayer(layer: Layer): ContextLayer {\n            let cLayer: ContextLayer = new ContextLayer(layer.getId(), layer.dataSource.getDataSourceType(), layer.legendLabel, layer.rendered, layer.color);\n            return cLayer;\n        }\n\n        private convertContextLayerToLayer(cLayer: ContextLayer): Layer {\n            let serializedLayer: any = cLayer;\n            delete serializedLayer.dataSourceType;\n            serializedLayer.dataSource = { dataSourceType: cLayer.dataSourceType };\n\n            return new DataSourceFactory(this.geomService, this.registryService, this.vizService).deserializeLayer();\n        }\n        */\n\n    handleSearch(): Promise<ListOrgGroup[]> {\n        this.spinner.show(this.CONSTANTS.OVERLAY);\n\n        return this.service.getGeospatialVersions(this.form.startDate, this.form.endDate).then(listOrgGroups => {\n            this.form.currentStartDate = this.form.startDate;\n            this.form.currentEndDate = this.form.endDate;\n\n            this.listOrgGroups = listOrgGroups;\n\n            this.refreshListLayerReferences();\n\n            return listOrgGroups;\n        }).finally(() => {\n            this.spinner.hide(this.CONSTANTS.OVERLAY);\n        });\n    }\n\n    private refreshListLayerReferences() {\n        this.listOrgGroups.forEach(listOrgGroup => {\n            listOrgGroup.types.forEach(listTypeGroup => {\n                listTypeGroup.lists.forEach(list => {\n                    list.versions = list.versions.filter(v => this.filter.indexOf(v.oid) === -1);\n\n                    for (let i = 0; i < list.versions.length; ++i) {\n                        let version = list.versions[i];\n\n                        let layers = this.layers.filter(l => l.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE && (l.dataSource as ListVectorLayerDataSource).getVersionId() === version.oid);\n                        version.layers = layers;\n                        layers.forEach(layer => {\n                            this.versionMap[layer.getId()] = version;\n                        });\n                    }\n                });\n            });\n        });\n\n        for (const [, ver] of Object.entries(this.versionMap)) {\n            let version: ListVersion = ver as ListVersion;\n\n            let layers = this.layers.filter(l => l.dataSource.getDataSourceType() === LIST_VECTOR_SOURCE_TYPE && (l.dataSource as ListVectorLayerDataSource).getVersionId() === version.oid);\n            version.layers = layers;\n        }\n    }\n\n    clickToggleVersionRendered(version: ListVersion, list: ContextList) {\n        let rendered = ! this.versionIsRendered(version);\n      \n        if (version.layers != null) {\n            version.layers.forEach(layer => {\n                if (layer.rendered !== rendered) {\n                    this.toggleLayerRendered(layer);\n                }\n            });\n        }\n    }\n\n    toggleLayerRendered(layer: Layer): void {\n        layer.rendered = !layer.rendered;\n\n        this.geomService.addOrUpdateLayer(layer);\n    }\n\n    onGotoBounds(layer: Layer): void {\n        let layers = this.geomService.getLayers().filter(l => l.getId() === layer.getId());\n\n        if (layers.length > 0) {\n            this.geomService.zoomToLayer(layers[0]);\n        }\n    }\n\n    togglePinned(layer: Layer): void {\n        let layers = this.geomService.getLayers();\n        let layerIndex = this.geomService.getLayers().findIndex(l => l.getId() === layer.getId());\n\n        if (layerIndex !== -1) {\n            let layer = layers[layerIndex];\n\n            layer.setPinned(!layer.getPinned());\n            this.geomService.setLayers(layers);\n        }\n    }\n\n    onCreate(layer: Layer): void {\n        this.create.emit(layer);\n    }\n\n    toggleVersionLayer(version: ListVersion, list: ContextList): void {\n        if (!version.layers || version.layers.length == 0) {\n            let dataSource = new ListVectorLayerDataSource(this.listService, version.oid);\n            version.layers = [ dataSource.createLayer(list.label, true, ColorGen().hexString()) ];\n            this.versionMap[version.layers[0].getId()] = version;\n            this.geomService.addOrUpdateLayer(version.layers[0]);\n        } else {\n            version.layers.forEach(layer => {\n                this.geomService.removeLayer(layer.getId());\n                delete this.versionMap[layer.getId()];\n            });\n            delete version.layers;\n        }\n    }\n\n    removeLayer(layer: Layer): void {\n        this.geomService.removeLayer(layer.getId());\n\n        let version = this.versionMap[layer.getId()];\n        if (version) {\n            delete this.versionMap[layer.getId()];\n            version.layers = version.layers.filter(l => l.getId() !== layer.getId());\n        }\n    }\n    \n    versionIsRendered(version: ListVersion) {\n        if (!version.layers || version.layers.length == 0) {\n            return false;\n        }\n      \n        let rendered = false;\n        \n        for (let i = 0; i < version.layers.length; ++i) {\n            rendered = rendered || version.layers[i].rendered;\n        }\n        \n        return rendered;\n    }\n\n    toggleBaseLayer(layer: BaseLayer): void {\n        this.baseLayers.forEach(bl => {\n            bl.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.baseLayerChange.emit(layer);\n    }\n\n    drop(event: CdkDragDrop<string[]>, group: LayerGroup) {\n        moveItemInArray(group.getLayers(), event.previousIndex, event.currentIndex);\n\n        let layers = [];\n        this.layerGroups.forEach(group => group.getLayers().forEach(l => layers.push(l)));\n\n        this.geomService.setLayers(layers);\n    }\n\n    onViewList(oid: string): void {\n        this.viewList.emit(oid);\n    }\n\n}\n","<ng-template #versionDetail let-versionOrLayer='versionOrLayer'>\n  (\n  <a *ngIf=\"versionOrLayer.versionNumber !== 0\" (click)=\"onViewList(versionOrLayer.oid)\" routerLinkActive=\"active\">\n    <localize key=\"list.type.version\"></localize>\n    {{versionOrLayer.versionNumber}}\n  </a>\n  \n  <a *ngIf=\"versionOrLayer.versionNumber === 0\" (click)=\"onViewList(versionOrLayer.oid)\" routerLinkActive=\"active\">\n    <localize *ngIf=\"versionOrLayer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n  </a>\n  )\n</ng-template>\n\n<ng-template #listView let-list='list'>\n  <div *ngIf=\"list.versions.length > 0\" class=\"list-group-item\" style=\"border: none; padding-top:0; padding-bottom:0;\">\n    <h4><a (click)=\"list.open = !list.open\"><i class=\"fa fa-chevron-right\" [ngClass]=\"{'fa-chevron-down' : list.open, 'fa-chevron-right' : !list.open}\" style=\"font-size:14px;\"></i>{{ list.label }}</a></h4>\n  \n    <div *ngIf=\"list.open\" class=\"list-group\">\n      <div *ngFor=\"let version of list.versions\">\n        <div class=\"layer-toggle-wrapper\">\n\t\t\t      <a class=\"fa\" style=\"padding-right: 10px;\" [ngClass]='{\"fa-minus\" : (version.layers != null && version.layers.length > 0), \"fa-plus\" : (version.layers == null || version.layers.length == 0)}' [title]=\"(version.layers ? 'explorer.layerPanel.removeFromLegend' : 'explorer.layerPanel.addToLegend') | localize\" (click)=\"toggleVersionLayer(version, list)\"></a>\n\t\t\t      <boolean-field *ngIf=\"version.layers && version.layers.length > 0\" [value]=\"versionIsRendered(version)\" label=\"\" [disable]=\"false\" (change)=\"clickToggleVersionRendered(version, list)\" style=\"line-height:0;\"></boolean-field>\n\t\t\t  \n\t\t\t      <div class=\"label-wrapper\">\n              \t\t<date-text [date]=\"version.forDate\"></date-text>\n\t\t\t\t        (\n\t\t\t\t\t\t\t  <a *ngIf=\"version.versionNumber !== 0\" (click)=\"onViewList(version.oid)\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t    <localize key=\"list.type.version\"></localize>\n\t\t\t\t\t\t\t    {{version.versionNumber}}\n\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t  <a *ngIf=\"version.versionNumber === 0\" (click)=\"onViewList(version.oid)\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t    <localize *ngIf=\"version.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t  )\n\t\t\t\t        \n\t\t\t\t        <div *ngIf=\"version.color != null\" class=\"layer-legend-square\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"\n\t\t\t          [ngStyle]=\"{'background-color': version.color}\"> </div>\n\t\t\t      </div>\n\t\t\t  </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n<div class=\"layer-toggle\">\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>  \n\n  <div class=\"row\">\n  \t<div class=\"col-md-12\">\n      <span [title]=\"(panelSize === 0 ? 'explorer.resize.openLayerPanel' : 'explorer.resize.closeLayerPanel') | localize\" class=\"clickable\" style=\"width:27px; height:27px; float: right;margin:5px;\" (click)=\"togglePanelOpen()\">\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 122.88 105.02\" style=\"enable-background:new 0 0 122.88 105.02\" xml:space=\"preserve\"><g><path d=\"M97.25,40.58l23.85,10.28c1.48,0.64,2.17,2.36,1.53,3.85c-0.32,0.75-0.93,1.3-1.63,1.57l-23.19,9.39l23.29,10.04 c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57l-58.52,23.69c-0.73,0.3-1.52,0.27-2.2,0L1.83,81.05 c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67l22.97-9.96l-23.12-9.4c-1.5-0.61-2.22-2.31-1.61-3.81 c0.33-0.82,0.99-1.4,1.76-1.67l23.53-10.21L1.83,30.9c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67L60.02,0.24 c0.77-0.33,1.6-0.31,2.31,0l0-0.01l58.77,25.32c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57L97.25,40.58 L97.25,40.58z M112.36,53.47l-22.73-9.79L62.49,54.66c-0.73,0.3-1.52,0.27-2.2,0L33.08,43.6L10.47,53.4L61.39,74.1L112.36,53.47 L112.36,53.47z M90.19,68.75l-27.7,11.21c-0.73,0.3-1.52,0.27-2.2,0L32.52,68.68l-22.05,9.56l50.92,20.69l50.97-20.63L90.19,68.75 L90.19,68.75z M61.17,6.1l-50.7,21.99l50.92,20.69l50.97-20.63L61.17,6.1L61.17,6.1z\"/></g></svg>\n      </span>\n      \n      <i *ngIf=\"(panelSize === 2 && this.layers.length > 0) || (panelSize === 1)\" (click)=\"setPanelSize( (panelSize === 2 ? 1 : 2) )\" class=\"clickable fa\" [ngClass]=\"{'fa-compress' : panelSize === 2, 'fa-expand' : panelSize === 1}\" \n      \t\t[title]=\"(panelSize === 2 ? 'explorer.resize.collapseLayerPanel' : 'explorer.resize.expandLayerPanel') | localize\" style=\"width:30px;height:30px;margin-right:5px;font-size:25px;padding:5px;\"></i>\n  \t</div>\n  </div>\n\n  <div *ngIf=\"panelSize !== 0 && layers.length > 0\">\n    <div style=\"margin-bottom: 10px;\">\n      <!--\n      <h4>\n        <localize key=\"explorer.layers\"></localize>\n      </h4>\n      -->\n      <div *ngFor=\"let layerGroup of layerGroups\">\n          <label style=\"font-weight: bold;\">{{layerGroup.getLabel()}}</label>\n      \n\t\t      <div class=\"list-group\" cdkDropList (cdkDropListDropped)=\"drop($event, layerGroup)\">\n\t\t\t        <div *ngFor=\"let layer of layerGroup.getLayers()\" class=\"list-group-item\" style=\"padding:5px;\" cdkDrag>\n\t\t\t\n\t\t\t            <div class=\"layer-toggle-wrapper\" style=\"cursor:move;\">\n\t\t\t            \n\t\t\t              <div class=\"custom-placeholder\" *cdkDragPlaceholder></div>\n\t\t\t              \n\t\t\t              <!-- <i class=\"fa fa-arrows\" style=\"font-size:15px;color: grey;margin-right: 3px;\" aria-hidden=\"true\"></i> -->\n\t\t\t              <boolean-field [value]=\"layer.rendered\" label=\"\" [disable]=\"false\" (change)=\"toggleLayerRendered(layer)\" style=\"line-height:0;\" ></boolean-field>\n\t\t\t              \n\t\t\t              <i *ngIf=\"!(layer.dataSource.getDataSourceType() === CONSTANTS.LIST_VECTOR_SOURCE_TYPE) && layer.getPinned()\" [title]=\"'explorer.layerPanel.unpin' | localize\" class=\"fa fa-thumb-tack\" aria-hidden=\"true\" style=\"cursor: pointer;\" (click)=\"togglePinned(layer)\"></i>\n\t\t\t              \n\t\t\t              <div class=\"label-wrapper\">\n\t\t\t                {{layer.legendLabel}}\n\t\t\t                <span *ngIf=\"versionMap[layer.getId()]\">- {{ versionMap[layer.getId()].forDate }}</span>\n\t\t\t                \n\t\t\t                <ng-container *ngIf=\"versionMap[layer.getId()] != null\">\n\t\t\t\t\t                (\n\t\t\t\t\t\t\t\t\t\t\t\t  <a *ngIf=\"versionMap[layer.getId()].versionNumber !== 0\" (click)=\"onViewList(layer.dataSource.getVersionId())\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <localize key=\"list.type.version\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t    {{versionMap[layer.getId()].versionNumber}}\n\t\t\t\t\t\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\t\t\t\t\t\t\t\t\t\t\t  <a *ngIf=\"versionMap[layer.getId()].versionNumber === 0\" (click)=\"onViewList(layer.dataSource.getVersionId())\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t\t\t\t\t\t    <localize *ngIf=\"versionMap[layer.getId()].versionNumber === 0\" key=\"list.type.working.version\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t  </ng-container>\n\t\t\t                \n\t\t\t                <div class=\"layer-legend-square\" [ngStyle]=\"{'background-color': layer.color}\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"> </div>\n\t\t\t<!--                 <i class=\"fa fa-arrow-up\" aria-hidden=\"true\" (click)=\"moveLayer(layer, -1)\"></i> -->\n\t\t\t<!--                 <i class=\"fa fa-arrow-down\" aria-hidden=\"true\" (click)=\"moveLayer(layer, 1)\"></i> -->\n\t\t\t                <i [title]=\"'explorer.layerPanel.zoomToFeature' | localize\" class=\"fa fa-eye\" aria-hidden=\"true\" (click)=\"onGotoBounds(layer)\"></i>\n\t\t\t                <i [title]=\"'explorer.layerPanel.pin' | localize\" *ngIf=\"!(layer.dataSource.getDataSourceType() === CONSTANTS.LIST_VECTOR_SOURCE_TYPE) && !layer.getPinned()\" class=\"fa fa-thumb-tack\" aria-hidden=\"true\" (click)=\"togglePinned(layer)\"></i>\n\t\t\t                <i [title]=\"'explorer.layerPanel.addNewGeoObject' | localize\" *ngIf=\"versionMap[layer.getId()] && versionMap[layer.getId()].versionNumber === 0\" class=\"fa fa-plus\" aria-hidden=\"true\" (click)=\"onCreate(layer)\"></i>\n\t\t\t                <i [title]=\"'explorer.layerPanel.removeLayer' | localize\" class=\"fa fa-times\" aria-hidden=\"true\" (click)=\"removeLayer(layer)\"></i>\n\t\t\t              </div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t      </div>\n      </div>\n      \n    </div>\n  </div>\n\n  <div *ngIf=\"panelSize === 2\" style=\"margin-top: 10px;\">\n\n    <div *ngIf=\"baseLayers.length > 1\" style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.base.layers.label\"></localize>\n      </h4>\n      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n        <input class=\"layer-toggle-input\" type='radio' name='baselayers' [value]='baseLayer.id'\n          [checked]=\"baseLayer.selected\" (change)=\"toggleBaseLayer(baseLayer)\">\n        <label class=\"layer-toggle-label\">\n          <localize [key]=\"baseLayer.label\"></localize>\n        </label>\n      </div>\n    </div>\n    \n    <form class=\"modal-form\" name=\"export-form\" style=\"overflow:visible;\">\n    \n      <fieldset style=\"padding:10px;\">\n        <div class=\"row\">\n          <div class=\"col-md-4\" style=\"padding-left:10px;padding-right:0;\">\n            <label><localize key=\"io.startDate\"></localize></label>\n          </div>\n          <div class=\"col-md-4\" style=\"padding-left:5px;padding-right:0;\">\n            <label><localize key=\"io.endDate\"></localize></label>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-4\" style=\"padding-left:10px;padding-right:0;\">\n            <date-field [(value)]=\"form.startDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"startDate\"\n              [allowFutureDates]=\"false\" name=\"startDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\" style=\"padding-left:5px;padding-right:0;\">\n            <date-field [(value)]=\"form.endDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"endDate\"\n              [allowFutureDates]=\"false\" name=\"endDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\" style=\"text-align:center;padding-left:5px;\">\n            <button type=\"button\" (click)=\"handleSearch()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n              <span>\n                <localize key=\"explorer.find.layers.by.date.range.button\"></localize>\n              </span>\n            </button>\n          </div>\n        </div>\n        <!--\n        <div *ngIf=\"listOrgGroups.length > 0\" class=\"row\">\n          <div class=\"col-md-12\">\n            <p style=\"font-style:italic;color:grey;\"><localize key=\"explorer.search.note\"></localize></p>\n          </div>\n        </div>\n        -->\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <!--\n            <h3>\n              <localize key=\"explorer.layers\"></localize>\n            </h3>\n            -->\n            \n            <p *ngIf=\"listOrgGroups.length < 1\" style=\"font-style: italic; color: grey;\"><localize key=\"explorer.find.layers.no.layers.found.message\"></localize></p>\n            \n            <div class=\"list-group\">\n              <ng-container *ngIf=\"graphList\" [ngTemplateOutlet]=\"listView\"\n                [ngTemplateOutletContext]=\"{list:graphList}\">\n              </ng-container>\n            \n              <div *ngFor=\"let listOrgGroup of listOrgGroups\">\n                <div *ngIf=\"listOrgGroup.types.length > 0\" class=\"list-group-item\" style=\"border: none;\">\n                \n                  <h3>{{ listOrgGroup.orgLabel.localizedValue }}</h3>\n                  \n                  <div *ngFor=\"let listTypeGroup of listOrgGroup.types\">\n                    <div *ngIf=\"listTypeGroup.lists.length > 0\" class=\"list-group-item\" style=\"border: none;\">\n                    \n                      <h4>{{ listTypeGroup.typeLabel.localizedValue }}</h4>\n                      \n                      <div *ngFor=\"let list of listTypeGroup.lists\">\n                        <ng-container *ngIf=\"list\" [ngTemplateOutlet]=\"listView\"\n                          [ngTemplateOutletContext]=\"{list:list}\">\n                        </ng-container>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n\n  </div>\n  </div>\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, PRESENT } from \"@registry/model/registry\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport * as moment from \"moment\";\n\n@Component({\n    selector: \"geometry-panel\",\n    templateUrl: \"./geometry-panel.component.html\",\n    styleUrls: [\"./geometry-panel.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeometryPanelComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n\n    isVersionForHighlight: number;\n\n    message: string = null;\n\n    readonly: boolean = false;\n\n    hasConflict: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Output() onCloneGeometry = new EventEmitter<any>();\n\n    @Output() onEdit = new EventEmitter<ValueOverTime>();\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    geoObjectOverTime: GeoObjectOverTime;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set geoObjectOverTimeInput(value: GeoObjectOverTime) {\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value));\n        this.geoObjectOverTime = value;\n    }\n\n    @Input() isNewGeoObject: boolean = false;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public changeDetectorRef: ChangeDetectorRef, private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    onDateChange(): any {\n        this.hasConflict = false;\n\n        this.isValid = this.checkDateFieldValidity();\n\n        let vAttributes = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        this.hasConflict = this.dateService.checkRanges(null, vAttributes);\n    }\n\n    edit(vot: ValueOverTime, isVersionForHighlight: number): void {\n        this.onEdit.emit(vot);\n\n        this.isVersionForHighlight = isVersionForHighlight;\n    }\n\n    onAddNewVersion(geometry: ValueOverTime): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null; // Utils.formatDateString(new Date());\n        vot.endDate = null; // Utils.formatDateString(new Date());\n\n        if (geometry && geometry.value) {\n            vot.value = geometry.value;\n        } else {\n            vot.value = { type: this.geoObjectType.geometryType, coordinates: [] };\n        }\n\n        if (this.geoObjectType.geometryType === \"MULTIPOLYGON\") {\n            vot.value.type = \"MultiPolygon\";\n        } else if (this.geoObjectType.geometryType === \"POLYGON\") {\n            vot.value.type = \"Polygon\";\n        } else if (this.geoObjectType.geometryType === \"POINT\") {\n            vot.value.type = \"Point\";\n        } else if (this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            vot.value.type = \"MultiPoint\";\n        } else if (this.geoObjectType.geometryType === \"LINE\") {\n            vot.value.type = \"Line\";\n        } else if (this.geoObjectType.geometryType === \"MULTILINE\") {\n            vot.value.type = \"MultiLine\";\n        } else if (this.geoObjectType.geometryType === \"MIXED\") {\n            vot.value.type = \"Mixed\";\n        }\n\n        votArr.push(vot);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    setDateAttribute(vot: ValueOverTime, val: string): void {\n        vot.value = new Date(val).getTime().toString();\n    }\n\n    remove(version: any): void {\n        let val = this.geoObjectOverTime.attributes[\"geometry\"];\n\n        let position = -1;\n        for (let i = 0; i < val.values.length; i++) {\n            let vals = val.values[i];\n\n            if (vals.startDate === version.startDate) {\n                position = i;\n            }\n        }\n\n        if (position > -1) {\n            val.values.splice(position, 1);\n        }\n    }\n\n    formatDate(date: string) {\n        let localeData = moment.localeData(date);\n        let format = localeData.longDateFormat(\"L\");\n        return moment().format(format);\n    }\n\n    setInfinity(vAttribute, attributes): void {\n        if (vAttribute.endDate === PRESENT) {\n            vAttribute.endDate = new Date();\n        } else {\n            vAttribute.endDate = PRESENT;\n        }\n\n        this.onDateChange();\n    }\n\n    sort(votArr: ValueOverTime[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    onCloneGeometryToNewVersion(geometry: ValueOverTime): void {\n        this.onAddNewVersion(geometry);\n    }\n\n    onSubmit(): void {\n        this.onChange.emit(this.geoObjectOverTime);\n    }\n\n    onCancel(): void {\n        this.onChange.emit(this.originalGeoObjectOverTime);\n    }\n\n}\n","<div>\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #versionsform=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"col-md-12\">\n          <div class=\"attribute-version-wrapper\" *ngIf=\"geoObjectOverTime\">\n\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                    <table class=\"table table-striped\">\n\n                      <tbody class=\"attribute-element-wrapper\">\n                        <p class=\"message\" *ngIf=\"geoObjectOverTime.attributes['geometry'].values.length === 0\">\n                          <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize>\n                        </p>\n\n                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\" [ngClass]=\"{'error-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'ERROR', 'warning-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'WARNING'}\">\n                          <td [ngClass]=\"{'active' : i === isVersionForHighlight}\">\n                            <table>\n                              <tr class=\"attribute-value-row\" *ngIf=\"geoObjectType.isGeometryEditable\">\n                                <td colspan=\"2\">\n                                  <button class=\"btn btn-primary\" (click)=\"edit(vAttribute, i)\" role=\"button\">\n                                    <localize key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                  </button>\n                                  <button type=\"submit\" (click)=\"onCloneGeometryToNewVersion(vAttribute)\" class=\"btn btn-default\" role=\"button\">\n                                      <localize key=\"changeovertime.manageVersions.copy.geometry.button\"></localize>\n                                    </button>\n                                </td>\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5> \n                                  \n                                  <date-field #dateFieldComponents [(value)]=\"vAttribute.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" ></date-field>\n                                  \n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                      <h5>\n                                        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                      </h5>\n                                      \n                                      <date-field #dateFieldComponents [(value)]=\"vAttribute.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" [placement]=\"'bottom'\"></date-field>\n                                      \n                                    </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0\">\n<!--                                   <p class=\"error-message\"> -->\n<!--                                     <localize key=\"manage.versions.overlap.message\"></localize> -->\n<!--                                   </p> -->\n                                  <p *ngFor=\"let msg of vAttribute.conflictMessage\" [ngClass]=\"{'error-message': msg.type === 'ERROR', 'warning-message': msg.type === 'WARNING'}\">\n                                    {{msg.message}}\n                                  </p>\n                              </tr>    \n                            </table>\n                          </td>\n                          <td style=\"vertical-align: middle;\" class=\"manage-version-button clickable\" [title]=\"'changeovertime.manageVersions.remove.version' | localize\" (click)=\"remove(vAttribute)\">\n                            <i class=\"fa fa-times\"></i>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </li>\n\n                  <li class=\"list-group-item\" style=\"text-align: left;\">\n                    <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion(null)\"> <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                    </i>\n                  </li>\n                </ul>\n              </div>\n        </div>\n\n      </div>\n\n      <div class=\"row-holder\">\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"holder\" style=\"border: none; width: 100%;\">\n          <div class=\"button-holder pull-right\">\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n              <localize key=\"io.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || !versionsform.valid\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\n@Pipe({\n    name: \"geoobjecttype\",\n    pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n\n    transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        let unassignedGeoObjTypes: string[] = [];\n        this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n\n        // filter items array, items which match and return true will be\n        // kept, false will be filtered out\n        return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n    }\n\n    buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void {\n        filter.forEach(f => {\n            this.processHierarchyNodes(f, unassignedGeoObjTypes);\n        })\n    }\n\n    processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]) {\n        unassignedGeoObjTypes.push(node.geoObjectType)\n\n        node.children.forEach(child => {\n            this.processHierarchyNodes(child, unassignedGeoObjTypes);\n        })\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"toEpochDateTime\",\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n\n    transform(date: string): any {\n        if (!date) {\n            return date;\n        }\n\n        return new Date(date).getTime();\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from \"../shared/service/guard.service\";\nimport { BusinessTypeManagerComponent } from \"./component/business-type/business-type-manager.component\";\nimport { BusinessImporterComponent } from \"./component/business-importer/business-importer.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\nimport { BusinessTableComponent } from \"./component/business-table/business-table.component\";\nimport { ClassificationTypeManagerComponent } from \"./component/classification-type/classification-type-manager.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"hierarchies\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"data\",\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-requests\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"change-requests/:oid\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"master-lists\",\n        component: ListTypeManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"master-list/:oid\",\n        component: ListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"scheduled-jobs\",\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"job/:oid\",\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-request\",\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"tasks\",\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"synchronization-configs\",\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"synchronization-config/:oid\",\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"sync/details/:config/:oid\",\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"curation-job/:oid\",\n        component: CurationJobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"historical-events\",\n        component: HistoricalEventModuleComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"business-types\",\n        component: BusinessTypeManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"business-importer\",\n        component: BusinessImporterComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"business-type/:oid\",\n        component: BusinessTableComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"classification-type\",\n        component: ClassificationTypeManagerComponent,\n        canActivate: [AuthGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n})\nexport class RegistryRoutingModule { }\n","import { LocalizedValue, PageResult } from \"@shared/model/core\";\n\nexport class ClassificationType {\n\n    oid?: string;\n    code: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n\n}\n\nexport class Classification {\n\n    code: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n\n}\n\nexport class ClassificationNode {\n\n    classification:Classification;\n    children: PageResult<ClassificationNode>;\n\n}\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LayerRecord } from \"@registry/model/list-type\";\n\n@Component({\n    selector: \"record-panel\",\n    templateUrl: \"./record-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class RecordPanelComponent {\n\n    @Input() record: LayerRecord\n    @Output() close = new EventEmitter<void>();\n\n    onClose(): void {\n        this.close.emit();\n    }\n\n}\n","<div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{record.typeLabel.localizedValue}}</h3>\n    </div>      \n  </div>\n\n  <form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of record.attributes let i = index\" class=\"list-group-item\"\n              style=\"text-align:left;border:none;padding:0;\">\n              <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span>\n                      {{attr.label}}\n                    </span>\n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <input type=\"text\" [(ngModel)]=\"record.data[attr.name]\" [name]=\"'mod-' + attr.name\" disabled=\"true\">\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n  <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n      <localize key=\"modal.button.cancel\"></localize>\n    </button>\n  </div>\n\n</div>","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LayerRecord } from \"@registry/model/list-type\";\n\n@Component({\n    selector: \"record-popup\",\n    templateUrl: \"./record-popup.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class RecordPopupComponent {\n\n    @Input() public record: LayerRecord;\n    @Input() public canEdit: boolean = false;\n\n    @Output() public edit = new EventEmitter<void>();\n\n    onEdit(): void {\n        this.edit.emit();\n    }\n\n}\n","<div *ngIf=\"record && record.data\">\n\n  <h3>{{record.data['code']}} ({{record.typeLabel.localizedValue}})</h3>\n\n  <hr />\n\n  <ng-container *ngFor=\"let attr of record.attributes let i = index\">\n\n    <div *ngIf=\"attr.name !== 'code' && record.data[attr.name] != null && record.data[attr.name].length > 0\">\n      <span style=\"font-weight: bold;\">{{attr.label}}</span>\n      -\n      {{record.data[attr.name]}}\n    </div>\n  </ng-container>\n\n  <div *ngIf=\"record.edit\" class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    <hr>\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onEdit()\">\n      <localize key=\"modal.button.edit\"></localize>\n    </button>\n  </div>\n\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\nimport { DateService } from \"@shared/service\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"curation-problem-modal\",\n    templateUrl: \"./curation-problem-modal.component.html\",\n    styleUrls: []\n})\nexport class CurationProblemModalComponent {\n\n    message: string = null;\n    version: ListTypeVersion;\n    problem: CurationProblem;\n    job: CurationJob;\n    callback: Function;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public service: ListTypeService, public bsModalRef: BsModalRef, private modalService: BsModalService, private dateService: DateService) {\n    }\n\n    init(version: ListTypeVersion, problem: CurationProblem, job: CurationJob, callback: Function): void {\n        this.version = version;\n        this.problem = problem;\n        this.job = job;\n        this.callback = callback;\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            // return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n            return \"Missing geometry\";\n        }\n\n        return probType;\n    }\n\n    onEditGeoObject(): void {\n        const editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureAsExisting(this.problem.goCode, this.problem.typeCode, this.version.forDate, true);\n        editModal.content.setMasterListId(this.version.oid);\n        editModal.content.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n            // THERE HAS TO BE A BETTER WAY TO DO THIS\n            if (attributeEditor.changeRequest != null) {\n                const changeRequest = attributeEditor.changeRequest;\n\n                let config = {\n                    historyId: this.job.historyId,\n                    problemId: this.problem.id,\n                    resolution: \"APPLY_GEO_OBJECT\",\n                    code: this.problem.goCode,\n                    typeCode: this.problem.typeCode,\n                    actions: changeRequest.actions\n                };\n\n                this.service.submitErrorResolve(config).then(() => {\n                    this.callback({ action: \"RESOLVED\", data: this.problem });\n                    editModal.hide();\n                }).catch((err: HttpErrorResponse) => {\n                    editModal.content.error(err);\n                });\n            }\n        };\n\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolvedListener(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    onProblemResolvedListener(problem: CurationProblem): void {\n        this.callback({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\" *ngIf=\"problem != null\">\n\n        <fieldset>\n\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n                <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n                <!-- <div class=\"row\">\n            \n                    <h2>\n                        Review: {{job.fileName}} problem\n                    </h2>\n                </div> -->\n                <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                                    border-radius: 10px;\n                                                    margin-bottom: 20px;\n                                                    margin-top: 20px;\n                                                    padding: 10px;\">\n                    <div class=\"col-md-6\">\n                        <div class=\"wrapper\">\n\n                            <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.lastRunBy}}\n                                </span>\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.started.date.label\"></localize>:\n                                    <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                                        <date-text [date]=\"job.lastRun\"></date-text>\n                                    </span>\n                                </span>\n                            </p>\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-6\"></div>\n                </div>\n\n                <div class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n                    <div class=\"col-md-12\">\n\n                        <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                            <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                                <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                                    <h4><strong>\n                                            <localize key=\"etl.problem.header.problem\"></localize>\n                                        </strong></h4>\n                                    <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.type)}}\n                                    </p>\n\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                                <div\n                                    style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                                    <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\"\n                                        class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BusinessObject, BusinessType } from \"@registry/model/business-type\";\n\n@Component({\n    selector: \"business-object-panel\",\n    templateUrl: \"./business-object-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class BusinessObjectPanelComponent {\n\n    @Input() type: BusinessType;\n    @Input() object: BusinessObject;\n\n    @Output() close = new EventEmitter<void>();\n\n    onClose(): void {\n        this.close.emit();\n    }\n\n}\n","<div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{type.displayLabel.localizedValue}}</h3>\n    </div>\n  </div>\n\n  <form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <ng-container *ngFor=\"let attributeType of type.attributes\">\n              <li *ngIf=\"object.data[attributeType.code] != null\" class=\"list-group-item\"\n                style=\"text-align:left;border:none;padding:0;\">\n                <div class=\"panel panel-default\">\n                  <div class=\"panel-heading\">\n                    <h4 style=\"margin:0;\">\n                      <span>\n                        {{attributeType.label.localizedValue}}\n                      </span>\n                    </h4>\n                  </div>\n\n                  <div class=\"panel-body\">\n                    <ng-container ng-switch=\"attributeType.type\">\n                      <ng-container ng-switch-when=\"'date'\">\n                        <date-text [value]=\"object.data[attributeType.code]\"></date-text>\n                      </ng-container>\n                      <ng-container ng-switch-default>\n                        {{ object.data[attributeType.code] }}\n                      </ng-container>\n                    </ng-container>\n                  </div>\n                </div>\n              </li>\n            </ng-container>\n          </ul>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n<!--\n\n  <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n      <localize key=\"modal.button.cancel\"></localize>\n    </button>\n  </div>\n-->  \n\n</div>","import { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeDecimalType, AttributedType, AttributeTermType, AttributeType } from \"./registry\";\n\nexport class BusinessType implements AttributedType {\n\n    oid?: string;\n    code: string;\n    organization: string;\n    organizationLabel?: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n    attributes?: Array<AttributeType | AttributeTermType | AttributeDecimalType>;\n    labelAttribute?: string;\n\n}\n\nexport class BusinessTypeByOrg {\n\n    oid: string;\n    code: string;\n    label: string;\n    types: BusinessType[];\n\n}\n\nexport class BusinessObject {\n\n    code: string;\n    label: string;\n    data: {\n        [key: string]: string | number;\n    }\n\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ListData, ListTypeVersion } from \"@registry/model/list-type\";\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from \"@shared/model/generic-table\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { LazyLoadEvent } from \"primeng/api\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { AuthService } from \"@shared/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { ExportFormatModalComponent } from \"../list-type/export-format-modal.component\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"list-modal\",\n    templateUrl: \"./list-modal.component.html\",\n    styleUrls: []\n})\nexport class ListModalComponent implements OnInit, OnDestroy {\n\n    CONSTANTS = {\n        LIST_MODAL: OverlayerIdentifier.LIST_MODAL\n    };\n\n    list: ListTypeVersion = null;\n    current: string = \"\";\n    isWritable: boolean = false;\n    isRM: boolean = false;\n    isSRA: boolean = false;\n\n    orgCode: string;\n    userOrgCodes: string[];\n\n    config: GenericTableConfig = null;\n    cols: GenericTableColumn[] = null;\n\n    showInvalid = false;\n\n    tableState: LazyLoadEvent = null;\n\n    message: string = null;\n\n    public onRowSelect: Subject<{\n        version: ListTypeVersion,\n        uid: string\n    }>;\n\n    progressNotifier: WebSocketSubject<{ type: string, content: any }>;\n    progressSubscription: Subscription = null;\n\n    jobNotifier: WebSocketSubject<{ type: string, message: string }>;\n    jobSubscription: Subscription = null;\n\n    historyOid: string = null;\n\n    isRefreshing: boolean = false;\n    progress: { current: number, total: number } = null;\n    refresh: Subject<void>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalService: BsModalService,\n        private service: ListTypeService,\n        private spinner: NgxSpinnerService,\n        private authService: AuthService) {\n        this.userOrgCodes = this.authService.getMyOrganizations();\n    }\n\n    ngOnInit(): void {\n        this.onRowSelect = new Subject();\n        this.refresh = new Subject<void>();\n    }\n\n    ngOnDestroy(): void {\n        this.onRowSelect.unsubscribe();\n        this.refresh.unsubscribe();\n\n        if (this.progressSubscription != null) {\n            this.progressSubscription.unsubscribe();\n        }\n\n        if (this.progressNotifier != null) {\n            this.progressNotifier.complete();\n        }\n\n        if (this.jobSubscription != null) {\n            this.jobSubscription.unsubscribe();\n        }\n\n        if (this.jobSubscription != null) {\n            this.jobNotifier.complete();\n        }\n    }\n\n    init(oid: string): void {\n        this.tableState = null;\n\n        if (localStorage.getItem(oid) != null) {\n            const data: ListData = JSON.parse(localStorage.getItem(oid));\n\n            this.tableState = data.event;\n        }\n\n        this.service.getVersion(oid).then(version => {\n            this.list = version;\n            this.orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(this.orgCode, typeCode);\n            this.isRM = this.authService.isGeoObjectTypeRM(this.orgCode, typeCode);\n            this.isSRA = this.authService.isSRA();\n\n            this.refreshColumns();\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: true,\n                create: false,\n                label: this.list.displayLabel,\n                sort: [{ field: \"code\", order: 1 }],\n                baseZIndex: 1051,\n                pageSize: 10\n            };\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.progressNotifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.progressSubscription = this.progressNotifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(null);\n            }\n        });\n\n        this.jobNotifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.jobSubscription = this.jobNotifier.subscribe(message => {\n            this.handleJobChange();\n        });\n    }\n\n    refreshColumns(): void {\n        this.cols = [];\n        // const orderedArray = [];\n\n        // const mainGroups: GenericTableGroup[] = [];\n        // const subGroups: GenericTableGroup[] = [];\n\n        // if (this.list.isMember || this.list.geospatialMetadata.visibility === \"PUBLIC\") {\n        //     this.cols.push({ header: \"\", type: \"ACTIONS\", sortable: false });\n\n        //     mainGroups.push({ label: \"\", colspan: 1 });\n        //     subGroups.push({ label: \"\", colspan: 1 });\n        // }\n\n        // this.list.attributes.forEach(group => {\n        //     if (this.showInvalid || group.name !== \"invalid\") {\n        //         mainGroups.push({\n        //             label: group.label,\n        //             colspan: group.colspan\n        //         });\n\n        //         group.columns.forEach(subgroup => {\n        //             subGroups.push({\n        //                 label: subgroup.label,\n        //                 colspan: subgroup.colspan\n        //             });\n\n        //             subgroup.columns.forEach(attribute => {\n        //                 orderedArray.push(attribute);\n        //             });\n        //         });\n        //     }\n        // });\n\n        // this.groups = [mainGroups, subGroups];\n\n        // orderedArray.forEach(attribute => {\n        //     if (this.showInvalid || attribute.name !== \"invalid\") {\n        //         let column: GenericTableColumn = {\n        //             header: attribute.label,\n        //             field: attribute.name,\n        //             type: \"TEXT\",\n        //             sortable: true,\n        //             filter: true\n        //         };\n\n        //         if (attribute.type === \"date\") {\n        //             column.type = \"DATE\";\n        //         } else if (attribute.name === \"invalid\" || attribute.type === \"boolean\") {\n        //             column.type = \"BOOLEAN\";\n        //         } else if (attribute.type === \"number\") {\n        //             column.type = \"NUMBER\";\n        //         } else if (attribute.type === \"list\") {\n        //             column.type = \"AUTOCOMPLETE\";\n        //             column.text = \"\";\n        //             column.onComplete = () => {\n        //                 this.service.values(this.list.oid, column.text, attribute.name, this.tableState.filters).then(options => {\n        //                     column.results = options;\n        //                 }).catch((err: HttpErrorResponse) => {\n        //                     this.error(err);\n        //                 });\n        //             };\n        //         }\n\n        //         this.cols.push(column);\n        //     }\n        // });\n    }\n\n    handleShowInvalidChange(): void {\n        this.refreshColumns();\n        this.refresh.next();\n    }\n\n    onLoadEvent(event: LazyLoadEvent): void {\n        this.tableState = event;\n\n        const data: ListData = {\n            event: event,\n            oid: this.list.oid\n        };\n\n        localStorage.setItem(data.oid, JSON.stringify(data));\n    }\n\n    isListInOrg(): boolean {\n        if (this.userOrgCodes && this.userOrgCodes.length > 0 && this.userOrgCodes.indexOf(this.orgCode) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleProgressChange(progress: { current: number, total: number }): void {\n        if (progress != null) {\n            this.isRefreshing = (progress.current < progress.total);\n            this.progress = progress;\n\n            if (this.isRefreshing) {\n                this.spinner.show(this.CONSTANTS.LIST_MODAL);\n            } else {\n                this.spinner.hide(this.CONSTANTS.LIST_MODAL);\n            }\n        } else {\n            this.isRefreshing = false;\n            this.progress = null;\n        }\n\n        if (!this.isRefreshing && this.refresh != null) {\n            this.refresh.next();\n        }\n    }\n\n    handleJobChange(): void {\n        if (this.historyOid != null) {\n            this.service.getJob(this.historyOid).then(job => {\n                if (job != null) {\n                    if (job.status === \"SUCCESS\" || job.status === \"FAILURE\") {\n                        this.handleProgressChange({ current: 1, total: 1 });\n\n                        this.historyOid = null;\n                    }\n\n                    if (job.status === \"FAILURE\" && job.exception != null) {\n                        this.message = job.exception.message;\n                    }\n                }\n            });\n        }\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === \"view\") {\n            const result: any = event.row;\n\n            this.onRowSelect.next({\n                version: this.list,\n                uid: result.uid\n            });\n\n            this.bsModalRef.hide();\n        }\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishList(this.list.oid).toPromise().then((result: { jobOid: string }) => {\n            this.isRefreshing = true;\n            this.list.curation = {};\n            this.historyOid = result.jobOid;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onNewGeoObject(type: string = null): void {\n    }\n\n    onExport(): void {\n        const criteria = {\n            filters: this.tableState.filters != null ? { ...this.tableState.filters } : {}\n        };\n\n        if (!this.showInvalid) {\n            criteria.filters[\"invalid\"] = { value: false, matchMode: \"equals\" };\n        }\n\n        const modal = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        modal.content.init(this.list);\n        modal.content.onFormat.subscribe(data => {\n            if (data.format === \"SHAPEFILE\") {\n                let url = registry.contextPath + \"/list-type/export-shapefile?oid=\" + this.list.oid;\n                url += \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n\n                if (data.actualGeometryType != null && data.actualGeometryType.length > 0) {\n                    url += \"&actualGeometryType=\" + encodeURIComponent(data.actualGeometryType);\n                }\n\n                window.open(url, \"_blank\");\n            } else if (data.format === \"EXCEL\") {\n                window.open(registry.contextPath + \"/list-type/export-spreadsheet?oid=\" + this.list.oid + \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria)), \"_blank\");\n            }\n        });\n    }\n\n    percent(): number {\n        if (this.progress != null) {\n            return Math.floor(this.progress.current / this.progress.total * 100);\n        }\n\n        return 0;\n    }\n\n    onClose(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"row\">\n                <div *ngIf=\"list\" class=\"col-md-12\">\n                    <h2>\n                        {{list.displayLabel}}\n                    </h2>\n                </div>\n            </div>\n        \n            <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.LIST_MODAL\" type=\"ball-clip-rotate-multiple\"\n                size=\"medium\">\n                <p *ngIf=\"progress != null\" style=\"font-size: 20px; color: white\">{{percent()}}%</p>\n            </ngx-spinner>\n\n            <div class=\"row\" style=\"margin-bottom:10px;\">\n                <div class=\"col-md-12\" *ngIf=\"list\">\n                    <div class=\"button-holder pull-right\">\n\n                        <span *ngIf=\"isWritable\" class=\"clickable\"\n                            style=\"vertical-align:middle;display:inline-block;line-height:0;\">\n                            <boolean-field [(value)]=\"showInvalid\" (change)=\"handleShowInvalidChange()\"\n                                [localizeLabelKey]=\"'masterlist.showInvalid'\"></boolean-field>\n                        </span>\n\n                        <span *ngIf=\"isWritable && list.working\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                            <i [ngClass]=\"{'fa fa-refresh clickable':true}\"\n                                style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\"\n                                aria-hidden=\"true\"></i>\n                            <localize key=\"masterlist.publish\"></localize>\n                        </span>\n\n                        <button\n                            *ngIf=\"list.listMetadata.visibility === 'PUBLIC' || list.geospatialMetadata.visibility === 'PUBLIC' || isListInOrg() || isSRA\"\n                            type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filters == null\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filters != null\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div *ngIf=\"list\" class=\"col-md-12\">\n<!--\n\n    <ng-container *ngIf=\"cols != null && config != null\">\n        <generic-table [cols]=\"cols\" [config]=\"config\"  [groups]=\"groups\" [refresh]=\"refresh\"\n        [pageConfig]=\"{oid: list.oid, showInvalid: showInvalid}\" (click)=\"onClick($event)\"\n        (onLoadEvent)=\"onLoadEvent($event)\" [initialState]=\"tableState\"></generic-table>\n    </ng-container>\n-->\n    \n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div *ngIf=\"list\" class=\"col-md-12\">\n            <div class=\"text-right\" style=\"margin-top: 20px;\">\n\n                <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n                    <localize key=\"modal.button.close\"></localize>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>","import { ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from \"@angular/core\";\nimport { ListColumn, ListData, ListTypeVersion } from \"@registry/model/list-type\";\nimport { GenericTableColumn, GenericTableConfig, TableColumnSetup, TableEvent } from \"@shared/model/generic-table\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\nimport { LazyLoadEvent } from \"primeng/api\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { AuthService } from \"@shared/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Subject, Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { ExportFormatModalComponent } from \"../list-type/export-format-modal.component\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport Utils from \"@registry/utility/Utils\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"list-panel\",\n    templateUrl: \"./list-panel.component.html\",\n    styleUrls: []\n})\nexport class ListPanelComponent implements OnInit, OnDestroy, OnChanges {\n\n    CONSTANTS = {\n        LIST_MODAL: OverlayerIdentifier.LIST_MODAL\n    };\n\n    @Input() oid: string;\n\n    @Output() error: EventEmitter<HttpErrorResponse> = new EventEmitter<HttpErrorResponse>();\n\n    @Output() onRowSelect: EventEmitter<{ version: ListTypeVersion, uid: string }> = new EventEmitter<{\n        version: ListTypeVersion,\n        uid: string\n    }>();\n\n    @Output() close: EventEmitter<void> = new EventEmitter<void>();\n\n    list: ListTypeVersion = null;\n    current: string = \"\";\n    isWritable: boolean = false;\n    isRM: boolean = false;\n    isSRA: boolean = false;\n\n    orgCode: string;\n    userOrgCodes: string[];\n\n    config: GenericTableConfig = null;\n    setup: TableColumnSetup = null;\n\n    showInvalid = false;\n\n    tableState: LazyLoadEvent = null;\n\n    progressNotifier: WebSocketSubject<{ type: string, content: any }>;\n    progressSubscription: Subscription = null;\n\n    isRefreshing: boolean = false;\n    progress: { current: number, total: number } = null;\n    refresh: Subject<void>;\n\n    // Verticle size of the panel\n    size: number = 50;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService,\n        private service: ListTypeService,\n        private spinner: NgxSpinnerService,\n        private authService: AuthService,\n        private cdr: ChangeDetectorRef) {\n        this.userOrgCodes = this.authService.getMyOrganizations();\n    }\n\n    ngOnInit(): void {\n        this.refresh = new Subject<void>();\n\n        this.tableState = null;\n\n        if (localStorage.getItem(this.oid) != null) {\n            const data: ListData = JSON.parse(localStorage.getItem(this.oid));\n\n            this.tableState = data.event;\n        }\n\n        this.service.getVersion(this.oid).then(version => {\n            this.list = version;\n            this.orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(this.orgCode, typeCode);\n            this.isRM = this.authService.isGeoObjectTypeRM(this.orgCode, typeCode);\n            this.isSRA = this.authService.isSRA();\n\n            this.refreshColumns();\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: true,\n                create: false,\n                label: this.list.displayLabel,\n                sort: [{ field: \"code\", order: 1 }],\n                baseZIndex: 1051,\n                pageSize: 20\n            };\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.progressNotifier = webSocket(baseUrl + \"/websocket/progress/\" + this.oid);\n        this.progressSubscription = this.progressNotifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(null);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.refresh != null) {\n            this.refresh.unsubscribe();\n        }\n\n        if (this.progressSubscription != null) {\n            this.progressSubscription.unsubscribe();\n        }\n\n        if (this.progressNotifier != null) {\n            this.progressNotifier.complete();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"oid\"] != null && this.refresh != null) {\n            this.list = null;\n\n            this.ngOnDestroy();\n\n            this.ngOnInit();\n        }\n    }\n\n    refreshColumns(): void {\n        this.setup = Utils.createColumns(this.list, this.showInvalid, false, (attribute, column) => {\n            this.service.values(this.list.oid, column.text, attribute.name, this.tableState.filters).then(options => {\n                column.results = options;\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    handleShowInvalidChange(): void {\n        this.refreshColumns();\n        this.refresh.next();\n    }\n\n    onLoadEvent(event: LazyLoadEvent): void {\n        this.tableState = event;\n\n        const data: ListData = {\n            event: event,\n            oid: this.list.oid\n        };\n\n        localStorage.setItem(data.oid, JSON.stringify(data));\n    }\n\n    isListInOrg(): boolean {\n        if (this.userOrgCodes && this.userOrgCodes.length > 0 && this.userOrgCodes.indexOf(this.orgCode) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n\n    handleProgressChange(progress: { current: number, total: number }): void {\n        if (progress != null) {\n            this.isRefreshing = (progress.current < progress.total);\n            this.progress = progress;\n\n            if (this.isRefreshing) {\n                this.spinner.show(this.CONSTANTS.LIST_MODAL);\n            } else {\n                this.spinner.hide(this.CONSTANTS.LIST_MODAL);\n            }\n        } else {\n            this.isRefreshing = false;\n            this.progress = null;\n        }\n\n        if (!this.isRefreshing && this.refresh != null) {\n            this.refresh.next();\n        }\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === \"view\") {\n            const result: any = event.row;\n\n            this.onRowSelect.next({\n                version: this.list,\n                uid: result.uid\n            });\n        }\n    }\n\n    onPublish(): void {\n        if (!this.isRefreshing) {\n            this.service.publishList(this.list.oid).toPromise().then((result: { jobOid: string }) => {\n                this.isRefreshing = true;\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        }\n    }\n\n    onExport(): void {\n        const criteria = {\n            filters: this.tableState.filters != null ? { ...this.tableState.filters } : {}\n        };\n\n        if (!this.showInvalid) {\n            criteria.filters[\"invalid\"] = { value: false, matchMode: \"equals\" };\n        }\n\n        const modal = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        modal.content.init(this.list);\n        modal.content.onFormat.subscribe(data => {\n            if (data.format === \"SHAPEFILE\") {\n                let url = registry.contextPath + \"/list-type/export-shapefile?oid=\" + this.list.oid;\n                url += \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n\n                if (data.actualGeometryType != null && data.actualGeometryType.length > 0) {\n                    url += \"&actualGeometryType=\" + encodeURIComponent(data.actualGeometryType);\n                }\n\n                window.open(url, \"_blank\");\n            } else if (data.format === \"EXCEL\") {\n                window.open(registry.contextPath + \"/list-type/export-spreadsheet?oid=\" + this.list.oid + \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria)), \"_blank\");\n            }\n        });\n    }\n\n    onToggleSize(): void {\n        if (this.size === 50) {\n            this.size = 100;\n        } else {\n            this.size = 50;\n        }\n\n        this.cdr.detectChanges();\n    }\n\n    percent(): number {\n        if (this.progress != null) {\n            return Math.floor(this.progress.current / this.progress.total * 100);\n        }\n\n        return 0;\n    }\n\n    onClose(): void {\n        this.close.emit();\n    }\n\n}\n","<div style=\"background-color: white; background-color: white; overflow: hidden auto; height: calc(-50px + 100vh); padding-left: 20px; \"\n    [style.height]=\"'calc(' + size + 'vh - 50px)'\">\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.LIST_MODAL\" type=\"ball-clip-rotate-multiple\"\n                size=\"medium\">\n                <p *ngIf=\"progress != null\" style=\"font-size: 20px; color: white\">{{percent()}}%</p>\n            </ngx-spinner>\n\n            <div class=\"row\" *ngIf=\"list\">\n                <div class=\"col-md-6\">\n                    <div class=\"button-holder pull-right\" style=\"margin-top: 10px; margin-right: 5px;\">\n                        <span class=\"clickable\" (click)=\"onToggleSize()\" style=\"padding: 10px;\">\n                            <i class=\"fa\" [ngClass]=\"{'fa-arrow-up':(size === 50), 'fa-arrow-down':(size === 100)}\"\n                                style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\"\n                                aria-hidden=\"true\"></i>\n                        </span>\n                    </div>\n                    <h2>\n                        {{list.displayLabel}} (<date-text [date]=\"list.forDate\"></date-text>)\n                    </h2>\n                </div>\n                <div class=\"col-md-6\" *ngIf=\"list\">\n                    <div class=\"button-holder pull-right\" style=\"margin-top: 10px; margin-right: 5px;\">\n\n                        <span *ngIf=\"isWritable && list.working\" class=\"clickable\"\n                            style=\"vertical-align:middle;display:inline-block;line-height:0;\">\n                            <boolean-field [(value)]=\"showInvalid\" (change)=\"handleShowInvalidChange()\"\n                                [localizeLabelKey]=\"'masterlist.showInvalid'\"></boolean-field>\n                        </span>\n\n                        <span *ngIf=\"isWritable && list.working\" class=\"clickable\" (click)=\"onPublish()\"\n                            style=\"padding: 10px;\">\n                            <i [ngClass]=\"{'fa fa-refresh clickable':true}\"\n                                style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\"\n                                aria-hidden=\"true\"></i>\n                            <localize key=\"masterlist.publish\"></localize>\n                        </span>\n\n                        <button\n                            *ngIf=\"list.listMetadata.visibility === 'PUBLIC' || list.geospatialMetadata.visibility === 'PUBLIC' || isListInOrg() || isSRA\"\n                            type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filters == null\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filters != null\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n                            <localize key=\"modal.button.close\"></localize>\n                        </button>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row\">\n                <div *ngIf=\"list\" class=\"col-md-12\">\n\n                    <ng-container *ngIf=\"setup != null && config != null\">\n                        <generic-table [setup]=\"setup\" [config]=\"config\" [refresh]=\"refresh\"\n                            [pageConfig]=\"{oid: list.oid, showInvalid: showInvalid}\" (click)=\"onClick($event)\"\n                            (onLoadEvent)=\"onLoadEvent($event)\" [initialState]=\"tableState\">\n                        </generic-table>\n                    </ng-container>\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from \"@angular/core\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { GenericTableConfig, TableColumnSetup } from \"@shared/model/generic-table\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { LazyLoadEvent } from \"primeng/api\";\nimport { timeout } from \"d3\";\nimport Utils from \"@registry/utility/Utils\";\n\n@Component({\n    selector: \"list-row\",\n    templateUrl: \"./list-row.component.html\",\n    styleUrls: []\n})\nexport class ListRowComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() oid: string;\n    @Input() uid: string;\n\n    @Output() error: EventEmitter<HttpErrorResponse> = new EventEmitter<HttpErrorResponse>();\n\n    @Output() close: EventEmitter<void> = new EventEmitter<void>();\n\n    list: ListTypeVersion = null;\n    tableState: LazyLoadEvent = null;\n\n    config: GenericTableConfig = null;\n    setup: TableColumnSetup = null;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: ListTypeService) {\n    }\n\n    ngOnInit(): void {\n        this.refreshVersion();\n    }\n\n    ngOnDestroy(): void {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes[\"oid\"] != null) {\n            this.refreshVersion();\n        } else if (changes[\"uid\"] != null) {\n            this.tableState = null;\n\n            timeout(() => {\n                this.tableState = {\n                    filters: {\n                        uid: {\n                            matchMode: \"equals\",\n                            value: this.uid\n                        }\n                    }\n                };\n            });\n        }\n    }\n\n    refreshVersion(): void {\n        this.list = null;\n\n        this.tableState = {\n            filters: {\n                uid: {\n                    matchMode: \"equals\",\n                    value: this.uid\n                }\n            }\n        };\n\n        this.service.getVersion(this.oid).then(version => {\n            this.list = version;\n            this.refreshColumns();\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: true,\n                create: false,\n                label: this.list.displayLabel,\n                sort: [{ field: \"code\", order: 1 }],\n                baseZIndex: 1051,\n                pageSize: 10\n            };\n        });\n    }\n\n    refreshColumns(): void {\n        this.setup = Utils.createColumns(this.list, false, true);\n    }\n\n    onClose(): void {\n        this.close.emit();\n    }\n\n}\n","<div style=\"background-color: white; height: 160px;\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\" *ngIf=\"list\">\n                <div class=\"col-md-4\">\n                    <h2>\n                        {{list.displayLabel}}\n                    </h2>\n                </div>\n                <div class=\"col-md-8\">\n                    <div class=\"text-right\" style=\"margin-top: 10px; margin-right: 5px;\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n                            <localize key=\"modal.button.close\"></localize>\n                        </button>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row\" style=\"padding-bottom: 10px;\">\n                <div *ngIf=\"list != null && tableState != null\" class=\"col-md-12\">\n\n                    <ng-container *ngIf=\"setup != null && config != null\">\n                        <generic-table [setup]=\"setup\" [config]=\"config\" [refresh]=\"refresh\"\n                            [pageConfig]=\"{oid: list.oid, showInvalid: false}\" [initialState]=\"tableState\"\n                            [paginator]=\"false\"></generic-table>\n                    </ng-container>\n\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { NgModule } from \"@angular/core\";\nimport { CommonModule, DatePipe } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\nimport { DndModule } from \"ngx-drag-drop\";\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\nimport { NgxSpinnerModule } from \"ngx-spinner\";\n\nimport { ImportTypesModalComponent } from \"./component/hierarchy/modals/import-types-modal.component\";\nimport { LocalizedInputComponent } from \"./component/form-fields/localized-input/localized-input.component\";\nimport { LocalizedTextComponent } from \"./component/form-fields/localized-text/localized-text.component\";\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { RelationshipVisualizerComponent } from \"./component/relationship-visualizer/relationship-visualizer.component\";\nimport { CreateHierarchyTypeModalComponent } from \"./component/hierarchy/modals/create-hierarchy-type-modal.component\";\nimport { AddChildToHierarchyModalComponent } from \"./component/hierarchy/modals/add-child-to-hierarchy-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./component/hierarchy/modals/create-geoobjtype-modal.component\";\nimport { ManageAttributesModalComponent } from \"./component/hierarchy/geoobjecttype-management/manage-attributes-modal.component\";\nimport { DefineAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component\";\nimport { EditAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component\";\nimport { ShapefileModalComponent } from \"./component/importer/modals/shapefile-modal.component\";\nimport { AttributesPageComponent } from \"./component/importer/modals/attributes-page.component\";\nimport { LocationPageComponent } from \"./component/importer/modals/location-page.component\";\nimport { LocationProblemPageComponent } from \"./component/importer/modals/location-problem-page.component\";\nimport { LocationProblemComponent } from \"./component/importer/modals/location-problem.component\";\nimport { TermProblemPageComponent } from \"./component/importer/modals/term-problem-page.component\";\nimport { TermProblemComponent } from \"./component/importer/modals/term-problem.component\";\nimport { SpreadsheetModalComponent } from \"./component/importer/modals/spreadsheet-modal.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { TermOptionWidgetComponent } from \"./component/hierarchy/geoobjecttype-management/term-option-widget.component\";\nimport { AttributeInputComponent } from \"./component/hierarchy/geoobjecttype-management/attribute-input.component\";\nimport { EditTermOptionInputComponent } from \"./component/hierarchy/geoobjecttype-management/edit-term-option-input.component\";\nimport { ManageTermOptionsComponent } from \"./component/hierarchy/geoobjecttype-management/manage-term-options.component\";\nimport { GeoObjectTypeInputComponent } from \"./component/hierarchy/geoobjecttype-management/geoobjecttype-input.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./component/hierarchy/modals/manage-geoobjecttype-modal.component\";\nimport { RequestTableComponent } from \"./component/crtable/request-table.component\";\nimport { CreateUpdateGeoObjectDetailComponent } from \"./component/crtable/action-detail/create-update-geo-object/detail.component\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component\";\nimport { StabilityPeriodComponent } from \"./component/geoobject-shared-attribute-editor/stability-period.component\";\nimport { ManageVersionsComponent } from \"./component/geoobject-shared-attribute-editor/manage-versions.component\";\nimport { StandardAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/standard-attribute-editor.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { GeoObjectEditorComponent } from \"./component/geoobject-editor/geoobject-editor.component\";\nimport { GeoObjectEditorMapComponent } from \"./component/geoobject-editor-map/geoobject-editor-map.component\";\nimport { SimpleEditControl } from \"./component/geoobject-editor-map/simple-edit-control/simple-edit-control.component\";\nimport { CascadingGeoSelector } from \"./component/cascading-geo-selector/cascading-geo-selector\";\nimport { TreeGeoSelector } from \"./component/tree-geo-selector/tree-geo-selector\";\nimport { ActionDetailModalComponent } from \"./component/crtable/action-detail/action-detail-modal.component\";\nimport { DataImporterComponent } from \"./component/importer/dataimporter.component\";\nimport { DataExportComponent } from \"./component/data-export/data-export.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { JobConflictModalComponent } from \"./component/scheduled-jobs/conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./component/scheduled-jobs/conflict-widgets/reupload-modal.component\";\nimport { ParentReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component\";\nimport { TermReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component\";\nimport { RowValidationProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component\";\nimport { StepIndicatorComponent } from \"./component/scheduled-jobs/step-indicator.component\";\nimport { ImportProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/import-problem-widget.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { FhirExportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-export-synchronization-config.component\";\nimport { Dhis2SynchronizationConfigComponent } from \"./component/synchronization-config/dhis2-synchronization-config.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigModalComponent } from \"./component/synchronization-config/synchronization-config-modal.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\n\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { LayerPanelComponent } from \"./component/location-manager/layer-panel.component\";\nimport { FeaturePanelComponent } from \"./component/location-manager/feature-panel.component\";\nimport { GeometryPanelComponent } from \"./component/location-manager/geometry-panel.component\";\n\nimport { GeoObjectAttributeCodeValidator } from \"./factory/form-validation.factory\";\n\nimport { GeoObjectTypePipe } from \"./pipe/geoobjecttype.pipe\";\nimport { GeoObjectAttributeExcludesPipe } from \"./pipe/geoobject-attribute-excludes.pipe\";\nimport { ToEpochDateTimePipe } from \"./pipe/to-epoch-date-time.pipe\";\nimport { RegistryService } from \"./service/registry.service\";\nimport { TaskService } from \"./service/task.service\";\nimport { HierarchyService } from \"./service/hierarchy.service\";\nimport { RelationshipVisualizationService } from \"./service/relationship-visualization.service\";\nimport { SynchronizationConfigService } from \"./service/synchronization-config.service\";\nimport { LocalizationManagerService } from \"./service/localization-manager.service\";\nimport { LocationManagerStateService } from \"./service/location-manager.service\";\nimport { ChangeRequestService } from \"./service/change-request.service\";\nimport { IOService } from \"./service/io.service\";\nimport { MapService } from \"./service/map.service\";\nimport { FhirImportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-import-synchronization-config.component\";\nimport { TransitionEventService } from \"./service/transition-event.service\";\nimport { TransitionEventTableComponent } from \"./component/transition-event/transition-event-table.component\";\nimport { TransitionEventModalComponent } from \"./component/transition-event/transition-event-modal.component\";\nimport { BusinessTypeManagerComponent } from \"./component/business-type/business-type-manager.component\";\nimport { BusinessTableComponent } from \"./component/business-table/business-table.component\";\nimport { BusinessTypeService } from \"./service/business-type.service\";\nimport { CreateBusinessTypeModalComponent } from \"./component/business-type/modals/create-business-type-modal.component\";\nimport { ManageBusinessTypeModalComponent } from \"./component/business-type/modals/manage-business-type-modal.component\";\nimport { BusinessImporterComponent } from \"./component/business-importer/business-importer.component\";\nimport { HistoricalReportComponent } from \"./component/historical-report/historical-report.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\n\nimport { RegistryRoutingModule } from \"./registry-routing.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { AccordionModule } from \"ngx-bootstrap/accordion\";\n\nimport \"../rxjs-extensions\";\n\nimport { NgxGraphModule } from \"@swimlane/ngx-graph\";\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListTypePublishModalComponent } from \"./component/list-type/publish-modal.component\";\nimport { ListTypeService } from \"./service/list-type.service\";\nimport { ListsForTypeComponent } from \"./component/list-type/lists-for-type.component\";\nimport { ListTypeComponent } from \"./component/list-type/list-type.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { PublishVersionComponent } from \"./component/list-type/publish-version.component\";\nimport { ExportFormatModalComponent } from \"./component/list-type/export-format-modal.component\";\nimport { RecordPanelComponent } from \"./component/location-manager/record-panel.component\";\nimport { RecordPopupComponent } from \"./component/location-manager/record-popup.component\";\nimport { SelectTypeModalComponent } from \"./component/location-manager/select-type-modal.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\nimport { CurationProblemModalComponent } from \"./component/curation/curation-problem-modal.component\";\nimport { ClassificationTypeManagerComponent } from \"./component/classification-type/classification-type-manager.component\";\nimport { ClassificationTypeService } from \"./service/classification-type.service\";\nimport { ClassificationTypePublishModalComponent } from \"./component/classification-type/classification-type-publish-modal.component\";\nimport { ClassificationTypeComponent } from \"./component/classification-type/classification-type.component\";\nimport { ClassificationPublishModalComponent } from \"./component/classification-type/classification-publish-modal.component\";\nimport { ClassificationService } from \"./service/classification.service\";\nimport { ClassificationFieldComponent } from \"./component/form-fields/classification-field/classification-field.component\";\nimport { ClassificationFieldModalComponent } from \"./component/form-fields/classification-field/classification-field-modal.component\";\nimport { GeometryService } from \"@registry/service/geometry.service\";\n\nimport { RegistryCacheService } from \"./service/registry-cache.service\";\nimport { BusinessObjectPanelComponent } from \"./component/location-manager/business-object-panel.component\";\nimport { BusinessObjectService } from \"./service/business-object.service\";\nimport { ListModalComponent } from \"./component/location-manager/list-modal.component\";\nimport { ListPanelComponent } from \"./component/location-manager/list-panel.component\";\nimport { ListRowComponent } from \"./component/location-manager/list-row.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        TabsModule,\n        CollapseModule,\n        NgxPaginationModule,\n        SharedModule,\n        RegistryRoutingModule,\n        DndModule,\n        NgxGraphModule,\n        DragDropModule,\n        AccordionModule.forRoot(),\n        NgxSpinnerModule\n    ],\n    declarations: [\n        HierarchyComponent,\n        RelationshipVisualizerComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        ImportTypesModalComponent,\n        FhirExportSynchronizationConfigComponent,\n        FhirImportSynchronizationConfigComponent,\n        Dhis2SynchronizationConfigComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        StabilityPeriodComponent,\n        ManageVersionsComponent,\n        StandardAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        TreeGeoSelector,\n        ActionDetailModalComponent,\n        DataImporterComponent,\n        DataExportComponent,\n        // Scheduled jobs\n        ExportFormatModalComponent,\n        ScheduledJobsComponent,\n        JobComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        ParentReferenceProblemWidgetComponent,\n        TermReferenceProblemWidgetComponent,\n        RowValidationProblemWidgetComponent,\n        StepIndicatorComponent,\n        ImportProblemWidgetComponent,\n        TaskViewerComponent,\n        // Synchronization Config\n        SynchronizationConfigManagerComponent,\n        SynchronizationConfigModalComponent,\n        SynchronizationConfigComponent,\n        SyncDetailsComponent,\n        // Location manager\n        LocationManagerComponent,\n        LayerPanelComponent,\n        FeaturePanelComponent,\n        GeometryPanelComponent,\n        TransitionEventTableComponent,\n        TransitionEventModalComponent,\n        RecordPanelComponent,\n        RecordPopupComponent,\n        BusinessObjectPanelComponent,\n        ListModalComponent,\n        ListPanelComponent,\n        ListRowComponent,\n        // Business Type components\n        BusinessTypeManagerComponent,\n        CreateBusinessTypeModalComponent,\n        ManageBusinessTypeModalComponent,\n        BusinessImporterComponent,\n        BusinessTableComponent,\n        // Historical report components\n        HistoricalReportComponent,\n        HistoricalEventModuleComponent,\n        SelectTypeModalComponent,\n        // List type\n        ListTypeManagerComponent,\n        ListTypePublishModalComponent,\n        ListsForTypeComponent,\n        ListTypeComponent,\n        ListComponent,\n        PublishVersionComponent,\n        // Curation\n        CurationJobComponent,\n        CurationProblemModalComponent,\n        // Classification\n        ClassificationTypeManagerComponent,\n        ClassificationTypePublishModalComponent,\n        ClassificationTypeComponent,\n        ClassificationPublishModalComponent,\n        ClassificationFieldComponent,\n        ClassificationFieldModalComponent\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        RelationshipVisualizationService,\n        LocalizationManagerService,\n        LocationManagerStateService,\n        ChangeRequestService,\n        IOService,\n        RegistryService,\n        RegistryCacheService,\n        TaskService,\n        DatePipe,\n        ToEpochDateTimePipe,\n        StepIndicatorComponent,\n        SynchronizationConfigService,\n        TransitionEventService,\n        BusinessTypeService,\n        BusinessObjectService,\n        ListTypeService,\n        ClassificationTypeService,\n        ClassificationService,\n        GeometryService\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        StepIndicatorComponent,\n        SynchronizationConfigModalComponent,\n        CreateBusinessTypeModalComponent,\n        ManageBusinessTypeModalComponent,\n        TransitionEventModalComponent,\n        ListTypePublishModalComponent,\n        PublishVersionComponent,\n        SelectTypeModalComponent,\n        CurationProblemModalComponent,\n        ClassificationTypePublishModalComponent,\n        ClassificationPublishModalComponent,\n        ClassificationFieldModalComponent,\n        ListModalComponent,\n        RecordPopupComponent\n    ]\n})\nexport class RegistryModule { }\n\n"],"sourceRoot":""}