{"version":3,"sources":["webpack:///./src/app/registry/registry.module.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.html","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.ts","webpack:///./src/app/registry/component/location-manager/context-layer-modal.component.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.html","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","SynchronizationConfigService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","AddRemoveChildDetailComponent","SetParentDetailComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","ManageVersionsModalComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","ManageParentVersionsModalComponent","ActionDetailModalComponent","DataImporterComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","SynchronizationConfigManagerComponent","SynchronizationConfigModalComponent","SynchronizationConfigComponent","SyncDetailsComponent","LocationManagerComponent","ContextLayerModalComponent","http","eventService","init","this","get","acp","toPromise","getGeoObjectTypes","types","hierarchies","params","HttpParams","set","JSON","stringify","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","date","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","typeCode","headers","HttpHeaders","start","post","pipe","finalize","complete","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","code","addAttributeType","geoObjTypeId","attribute","updateAttributeType","deleteAttributeType","attributeName","addAttributeTermTypeOption","parentTermCode","term","updateAttributeTermTypeOption","termJSON","deleteAttributeTermTypeOption","termCode","getGeoObject","id","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestions","text","type","parent","hierarchy","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","pageSize","pageNumber","sortAttr","isAscending","toString","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","getExportDetails","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","oid","versionType","getAllMasterListVersions","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","createMasterList","list","createMasterListVersion","forDate","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","parentTreeNode","geoObject","isNew","masterListId","notes","data","filter","sort","length","values","value","valueAttribute","publishShapefile","progress","getMasterListsByOrg","getPublishMasterListJobs","getOrganizations","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeLeafTypes","getTypeAncestors","hierarchyCode","getHierarchiesForType","includeTypes","createGeoObjectSynonym","entityId","label","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","removeTerm","PRESENT","TreeEntity","description","children","addChild","push","Term","GeoObject","attributes","GeoObjectType","Task","geoObjectType","getVotAtDate","attrCode","lService","retVot","startDate","endDate","time","getTime","i","attr","create","isChangeOverTime","forEach","vot","Date","parse","Array","isArray","GeoObjectOverTime","ValueOverTime","isDefault","required","unique","Attribute","isChange","rootTerm","termOptions","setRootTerm","AttributeTerm","precision","scale","AttributeDecimal","GeoObjectTypeModalStates","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","PaginationPage","AbstractScheduledJob","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","MasterList","MasterListVersion","HierarchyOverTime","ImportStrategy","MasterListByOrg","SynchronizationConfig","OrgSyncInfo","ExportScheduledJob","ContextLayer","ContextLayerGroup","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","getHierarchyTypes","addChildToHierarchy","parentGeoObjectTypeCode","childGeoObjectTypeCode","removeFromHierarchy","createHierarchyType","htJSON","updateHierarchyType","deleteHierarchyType","getAllActions","requestId","applyAction","action","applyActionStatusProperties","lockAction","actionId","unlockAction","getAllRequests","getRequestDetails","confirmChangeRequest","execute","rejectAllActions","actions","approveAllActions","submitChangeRequest","transform","getPage","getCustomAttrCfg","externalId","apply","edit","remove","unlock","run","getJobs","ImportSheet","Location","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","EventEmitter","message","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","animate","onAnimationDone","event","isValid","indexOf","localeValues","console","log","trigger","style","transition","service","iService","bsModalRef","authService","readonly","onMasterListChange","master","then","myOrgTypes","isGeoObjectTypeRM","orgCode","catch","err","error","displayLabel","representativityDate","publishDate","listAbstract","process","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","leaf","frequency","isMaster","visibility","org","getIsDisabled","elClasses","target","classList","onChange","onSubmit","response","hide","onCancel","ErrorHandler","getMessageFromError","key","disabled","valueChange","modalService","changeDetectorRef","registryService","elRef","changeRequestService","datePipe","toEpochDateTimePipe","preGeoObject","calculatedPreObject","postGeoObject","calculatedPostObject","attributeExcludes","readOnly","isEditingGeometries","isGeometryInlined","valid","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","geomAttr","geometry","LocalizedValue","calculate","attributeForm","statusChanges","subscribe","result","emit","changes","calculateCurrent","geometryEditor","reload","goot","object","formatDate","localize","handleChangeCode","e","onManageAttributeVersions","show","animated","backdrop","ignoreBackdropClick","content","geoObjectOverTime","isNewGeoObject","onAttributeVersionChange","versionObj","tfInit","onManageGeometryVersions","isDifferentText","trim","isDifferentValue","onSelectPropertyOption","option","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attrOpts","removeStatuses","isStatusChanged","pre","preCompare","postCompare","getTypeDefinition","getIsValid","configurationChange","stateChange","onNext","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","name","exclusion","termProblems","attributeCode","geometryChange","onClickEdit","setTimeout","mapboxgl","accessToken","mapDiv","nativeElement","Math","floor","random","map","Map","container","zoom","center","on","initMap","onValidChange","removeLayers","addLayers","editingControl","getAll","features","saveDraw","preGeometry","zoomToBbox","addControl","NavigationControl","addEditButton","enableEditing","simpleEditControl","editEmitter","geometryType","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","postGeometry","add","removeSource","prefix","sourceName","removeLayer","getSource","renderGeometryAsLayer","color","addSource","addLayer","setData","bboxCode","bboxType","bboxDate","boundArr","bounds","LngLatBounds","fitBounds","padding","featureCollection","polygons","feature","j","coordinates","points","lines","cHierarchies","parentMap","day","getUTCDate","dateStr","getUTCFullYear","getUTCMonth","entries","pot","parents","getHierarchies","onManageVersions","find","h","onVersionChange","ErrorModalComponent","localizeService","geoObjectTypes","geoObjectId","reason","dataSource","Observable","observer","results","isGeoObjectTypeRC","organizationCode","a","b","localizedValue","toLowerCase","pos","getGeoObjectTypePosition","splice","newValid","attributeEditor","changeTypeaheadLoading","typeaheadLoading","typeaheadOnSelect","item","submit","goSubmit","cancel","SuccessModalComponent","decode","tabIndex","submitFunction","arePropertiesValid","areParentsValid","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","handleDateChange","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","goPropertiesPost","configureFromImportError","importError","importErrorId","resolution","configureAsExisting","fetchGeoObject","fetchHierarchies","locales","setLocales","typeTypeCode","getTypeAheadObservable","ptn","properties","parentSelector","changePage","nextPage","force","persistModelChanges","_stepConfig","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","status","roots","select","contextMenuService","instance","Instance","nodes","currentHierarchy","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","isRA","isOrganizationRA","desiredHierarchy","setHierarchies","setNodesOnInit","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","index","findIndex","rootGeoObjectTypes","treeModel","expandAll","setNodesForHierarchy","hierarchyType","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","updateHierarchy","getHierarchyLabel","child","gOT","childType","nodeMenuComponent","leafMenuComponent","preventDefault","stopPropagation","setFocusedNode","isExpanded","collapse","hierarchyOnClick","update","createHierarchy","onHierarchytTypeCreate","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","manageGeoObjectType","onGeoObjectTypeSubmitted","position","addChildAndRootToHierarchy","that","allGeoObjectTypes","toRoot","onNodeChange","current","deleteTreeNode","removeTreeNode","n","hasChildren","isActive","onDrop","element","allowDrop","TreeComponent","auth","organizations","orgs","onSelect","gObj","selectedGeoObjectType","toggleIsLeaf","isLeaf","toggleIsGeometryEditable","confirmBsModalRef","geoObjectTypeManagementService","modalStateSubscription","unsubscribe","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","localizationService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","manageAttributes","onDeleteAttribute","defineAttributeModal","defineAttribute","editAttribute","removeAttributeType","attributeType","newAttribute","setAttribute","attributeInputComponent","isFormValid","isAttrValid","validator","c","geoObjectAttributeCode","validate","provide","NG_VALIDATORS","useExisting","multi","Object","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","termOption","replace","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","sysService","showImportConfig","importStrategies","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","getExternalSystems","paginatedSystems","externalSystems","resultSet","getUrl","format","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","append","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","externalSystem","sys","externalSystemId","onErrorItem","onClick","queue","uploadAll","setImportSource","onCreate","createDate","lastUpdateDate","admin","lists","onView","onEdit","pair","ret","onDelete","arr","onFormat","confirm","objectKeys","keys","requests","columns","filterCriteria","prop","sortable","width","refresh","selected","onExecute","changeRequest","request","onApproveAll","onRejectAll","requestTrackBy","toggle","parentElement","className","includes","toggleId","criteria","setActionStatus","approvalStatus","getActiveDetailComponent","actionType","endsWith","showActionDetail","curAction","cuDetail","endEdit","arDetail","spDetail","editingGeometry","hasDuplicateDate","vAttribute","onDateChange","vAttributes","snapDates","votArr","prev","formatDateString","onAddNewVersion","terms","editGeometry","getVersionData","versions","val","getDefaultLocaleVal","locale","defVal","locVal","setDateAttribute","version","opacity","newArray","dateObj","month","visible","onAdd","onRemove","items","entry","pType","uid","ancestors","ancestor","pService","route","p","page","count","order","isPublished","isRefreshing","searchPlaceholder","snapshot","paramMap","isCollapsed","onPageChange","onSort","clearFilters","search","toggleFilter","getValues","base","unshift","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","editModal","onGoto","window","open","onPublish","subscription","interval","onNewGeoObject","onExport","location","href","encodeURIComponent","pollingData","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onDownloadShapefile","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","onResolveScheduledJob","allSelected","timeCounter","isPolling","hasRowValidationProblem","stopPolling","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","startPolling","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onProblemResolvedListener","onEditGeoObject","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","toUpperCase","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onViewAllCompletedTasks","onSuccess","level","system","cOrg","cSystem","levelRows","oIndex","sIndex","systems","levels","levelRow","levelNum","isAttributeEditor","hasAttributes","onOrganizationSelected","lvl","addLevel","len","removeLevel","levelRowIndex","editorIndex","getEditorIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Id","dhis2Attrs","dhis2Attr","onChangeAttrMapping","newValue","attrCfg","attrs","attrCfgAttr","isDifferentGot","onRun","exportErrors","mapService","geojson","breadcrumbs","active","vectorLayers","contextLayerGroups","baseLayers","sprite","baselayerIconHover","preventSingleClick","convertListsToContextLayers","layer","protocol","host","attributionControl","thisList","contextLayers","thisContextLayer","enabled","AttributionControl","compact","handleMapClickEvent","source","cLayerGroup","cLayer","addVectorLayer","handleBasemapStyle","baseLayer","setStyle","addContextLayerModal","cLayerGroups","highlightMapFeature","clearHighlightMapFeature","onListEntityHover","site","onListEntityHoverOff","zoomToFeature","timer","clearTimeout","drillDown","addBreadcrumb","expand","setNodes","groupHasEnabledContextLayers","group","hasEnabled","hasEnabledContextLayers","removeContextLayer","toggleContextLayer","tiles","navigator","language","groupHasContextLayers","hasCLayers","geoObjectJson","canDeactivate","afterDeactivate","isDeactivating","unlockActionSync","startEdit","$","ajax","method","success","async","original","ChangeRequest","AbstractAction","UpdateGeoObjectAction","CreateGeoObjectAction","AddChildAction","RemoveChildAction","GovernanceStatus","PageEvent","SetParentAction","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","getNewLocaleInfo","installLocale","country","variant","routes","path","component","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"2IAAA,SACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UAEA,UACA,UAEA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,O,4TAGA,4B,wCA4IaA,I,8DAAAA,IAAc,UA9Cf,CACV,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,uBACA,GAAAC,8BACA,SA1GQ,CACR,EAAAC,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBAEA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,0B,EAlBF,GA4Ia,EAAA5B,mB,iEAAAA,GAAc,eAvHzB,EAAA6B,mBACA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,8BACA,EAAAC,yBACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BACA,GAAAC,kBACA,GAAAC,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,EAAAC,uBACA,EAAAC,wCACA,EAAAC,6BACA,EAAAC,6BACA,EAAAC,yBACA,GAAAC,+BACA,GAAApD,oBACA,EAAAqD,4BACA,GAAAC,kBACA,EAAAC,kBACA,EAAAC,2BACA,GAAAC,qBACA,GAAAC,mCACA,GAAAC,2BACA,EAAAxC,mBACA,GAAAyC,sBACA,GAAAC,oBAEA,EAAAC,2BACA,GAAAC,oBACA,GAAAC,2BACA,GAAAC,oCACA,EAAAC,sBACA,GAAAC,wBAEA,EAAAC,2BACA,GAAAC,uBACA,GAAAC,aACA,GAAAC,0BACA,GAAAC,uBACA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAA1E,uBACA,GAAA2E,6BACA,GAAAC,oBAEA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,+BACA,GAAAC,qBAEA,GAAAC,yBACA,GAAAC,4BAA0B,SA1F1B,EAAAhF,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBAEA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,yB,uBA4CA,GAAAyC,2BAA0B,ujEAC1B,EAAAxC,mBAzCA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,8BACA,EAAAC,yBACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BAEA,GAAAE,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,EAAAC,uBACA,EAAAC,wCACA,EAAAC,6BACA,EAAAC,6BACA,EAAAC,yBAGA,EAAAE,4BACA,GAAAC,kBACA,EAAAC,kBACA,EAAAC,2BACA,GAAAC,qBACA,GAAAC,mCACA,GAAAC,2BAEA,GAAAC,sBACA,GAAAC,oBAEA,EAAAC,2BACA,GAAAC,oBACA,GAAAC,2BACA,GAAAC,oCACA,EAAAC,sBACA,GAAAC,wBAEA,EAAAC,2BACA,GAAAC,uBACA,GAAAC,aACA,GAAAC,0BACA,GAAAC,uBACA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAA1E,uBACA,GAAA2E,6BACA,GAAAC,oBAEA,GAAAC,sCACA,GAAAC,oCACA,GAAAC,+BACA,GAAAC,qBAEA,GAAAC,yBACA,GAAAC,4BAA0B,qPArD1B,GAAA9C,kBAeA,GAAAe,+BACA,GAAApD,uB,kFC3IF,SACA,QAGA,Q,GAQA,M,sBAMA,aAGC,WAAoBoF,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAC,KAAA,WACC,OAAOC,KAAKH,KAAKI,IAAiFC,IAAM,aACtGC,aAIH,YAAAC,kBAAA,SAAkBC,EAAiBC,GAClC,IAAIC,EAAqB,IAAI,EAAAC,WAW7B,OARa,MAATH,IACHE,EAASA,EAAOE,IAAI,QAASC,KAAKC,UAAUN,KAG1B,MAAfC,IACHC,EAASA,EAAOE,IAAI,cAAeC,KAAKC,UAAUL,KAG5CN,KAAKH,KACVI,IAAqBC,IAAM,6BAA8B,CAAEK,OAAQA,IACnEJ,aAGH,YAAAS,oBAAA,SAAoBC,EAAiBC,EAAuBC,EAAkBC,EAAoBC,GACjG,IAAIV,EAAqB,IAAI,EAAAC,WAW7B,OANAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,UAAWI,IACfJ,IAAI,gBAAiBK,IACrBL,IAAI,cAAeC,KAAKC,UAAUI,KAClCN,IAAI,YAAaC,KAAKC,UAAUK,IAEpC,MAARC,IACHV,EAASA,EAAOE,IAAI,OAAQQ,IAGtBjB,KAAKH,KACVI,IAAoBC,IAAM,uCAAwC,CAAEK,OAAQA,IAC5EJ,aAGH,YAAAe,mBAAA,SAAmBC,EAAkBC,EAAwBC,EAAoBL,GAChF,IAAIT,EAAqB,IAAI,EAAAC,WAO7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,WAAYU,IAChBV,IAAI,iBAAkBW,IACtBX,IAAI,gBAAiBC,KAAKC,UAAUU,KACpCZ,IAAI,YAAaC,KAAKC,UAAUK,IAEzChB,KAAKH,KACVI,IAAmBC,IAAM,6BAA8B,CAAEK,OAAQA,IACjEJ,aAGH,YAAAmB,qBAAA,SAAqBC,GAArB,WACKC,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAUzB,IAAM,sCAAuCQ,KAAKC,UAAU,CAAE,SAAYY,IAAa,CAAEC,QAASA,IAC5GI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA4B,oBAAA,SAAoBC,GAApB,WAEKR,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAoBzB,IAAM,4BAA6BQ,KAAKC,UAAU,CAAE,OAAUqB,IAAW,CAAER,QAASA,IACxGI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA8B,oBAAA,SAAoBD,GAApB,WACKR,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAoBzB,IAAM,4BAA6BQ,KAAKC,UAAU,CAAE,OAAUqB,IAAW,CAAER,QAASA,IACxGI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA+B,oBAAA,SAAoBC,GAApB,WACKX,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAWzB,IAAM,4BAA6BQ,KAAKC,UAAU,CAAEwB,KAAMA,IAAS,CAAEX,QAASA,IACzFI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAiC,iBAAA,SAAiBC,EAAsBC,GAAvC,WAEKd,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAgBzB,IAAM,kCAAmCQ,KAAKC,UAAU,CAAE,aAAgB0B,EAAc,cAAiBC,IAAc,CAAEd,QAASA,IAClJI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAoC,oBAAA,SAAoBF,EAAsBC,GAA1C,WAEKd,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzB,KAAKF,aAAa4B,QAGX1B,KAAKH,KACV8B,KAAgBzB,IAAM,qCAAsCQ,KAAKC,UAAU,CAAE,aAAgB0B,EAAc,cAAiBC,IAAc,CAAEd,QAASA,IACrJI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAqC,oBAAA,SAAoBH,EAAsBI,GAA1C,WAEKjB,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzB,KAAKF,aAAa4B,QAGX1B,KAAKH,KACV8B,KAAczB,IAAM,qCAAsCQ,KAAKC,UAAU,CAAE,aAAgB0B,EAAc,cAAiBI,IAAkB,CAAEjB,QAASA,IACvJI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAuC,2BAAA,SAA2BC,EAAwBC,GAAnD,WAEKpB,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzB,KAAKF,aAAa4B,QAGX1B,KAAKH,KACV8B,KAAWzB,IAAM,6BAA8BQ,KAAKC,UAAU,CAAE,eAAkBgC,EAAgB,SAAYC,IAAS,CAAEpB,QAASA,IAClII,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA0C,8BAAA,SAA8BF,EAAwBG,GAAtD,WAEKtB,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzB,KAAKF,aAAa4B,QAGX1B,KAAKH,KACV8B,KAAWzB,IAAM,gCAAiCQ,KAAKC,UAAU,CAAE,eAAkBgC,EAAgB,SAAYG,IAAa,CAAEtB,QAASA,IACzII,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA4C,8BAAA,SAA8BJ,EAAwBK,GAAtD,WAEKxB,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAMjB,OAHAzB,KAAKF,aAAa4B,QAGX1B,KAAKH,KACV8B,KAAgBzB,IAAM,gCAAiCQ,KAAKC,UAAU,CAAE,eAAkBgC,EAAgB,SAAYK,IAAa,CAAExB,QAASA,IAC9II,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA8C,aAAA,SAAaC,EAAY3B,GACxB,IAAIhB,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,KAAMyC,IACVzC,IAAI,WAAYc,GAEzBvB,KAAKH,KACVI,IAAeC,IAAM,qBAAsB,CAAEK,OAAQA,IACrDJ,aAGH,YAAAgD,mBAAA,SAAmBhB,EAAcZ,GAChC,IAAIhB,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,OAAQ0B,IACZ1B,IAAI,WAAYc,GAEzBvB,KAAKH,KACVI,IAAcC,IAAM,4BAA6B,CAAEK,OAAQA,IAC3DJ,aAGH,YAAAiD,yBAAA,SAAyBjB,EAAcZ,EAAkBN,GACxD,IAAIV,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,EAASA,EAAOE,IAAI,OAAQ0B,IACZ1B,IAAI,WAAYc,IAChBd,IAAI,OAAQQ,GAErBjB,KAAKH,KACVI,IAAcC,IAAM,iCAAkC,CAAEK,OAAQA,IAChEJ,aAGH,YAAAkD,mBAAA,SAAmBlB,EAAcZ,GAChC,IAAIhB,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,OAAQ0B,IACZ1B,IAAI,WAAYc,GAEzBvB,KAAKH,KACVI,IAAeC,IAAM,0BAA2B,CAAEK,OAAQA,IAC1DJ,aAGH,YAAAmD,2BAAA,SAA2BnB,EAAcZ,GAAzC,WACKhB,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,OAAQ0B,IACZ1B,IAAI,WAAYc,GAEhCvB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACVI,IAAyBC,IAAM,2CAA4C,CAAEK,OAAQA,IACrFqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAoD,wBAAA,SAAwBC,EAAcC,EAAcC,EAAgBC,EAAmB1C,GAEtF,IAAIO,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,CACZiD,KAAMA,EACNC,KAAMA,GAYP,OATc,MAAVC,GAA+B,MAAbC,IACrBpD,EAAOmD,OAASA,EAChBnD,EAAOoD,UAAYA,GAGR,MAAR1C,IACHV,EAAOU,KAAOA,GAGRjB,KAAKH,KACV8B,KAAgBzB,IAAM,6BAA8BQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IACvFrB,aAGH,YAAAyD,iCAAA,SAAiCJ,EAAcC,GAC9C,IAAIjC,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,CACZiD,KAAMA,EACNC,KAAMA,GAGP,OAAOzD,KAAKH,KACV8B,KAAgBzB,IAAM,6BAA8BQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IACvFrB,aAGH,YAAA0D,iBAAA,SAAiBC,EAAkBC,EAAoBC,EAAkBC,GAExE,IAAI1D,EAAqB,IAAI,EAAAC,WAO7B,OAHAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,WAAYqD,EAASI,aACzBzD,IAAI,aAAcsD,EAAWG,aAC7BzD,IAAI,WAAYuD,IAChBvD,IAAI,cAAewD,EAAYC,YAGxClE,KAAKH,KACVI,IAAoBC,IAAM,kBAAmB,CAAEK,OAAQA,IACvDJ,aAGH,YAAAgE,0BAAA,SAA0BL,EAAkBC,EAAoBC,EAAkBC,GAEjF,IAAI1D,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,WAAYqD,EAASI,aACzBzD,IAAI,aAAcsD,EAAWG,aAC7BzD,IAAI,WAAYuD,IAChBvD,IAAI,cAAewD,EAAYC,YAExClE,KAAKH,KACVI,IAAoBC,IAAM,qBAAsB,CAAEK,OAAQA,IAC1DJ,aAGH,YAAAiE,gBAAA,SAAgBC,EAAmBP,EAAkBC,EAAoBO,GACxE,IAAI/D,EAAqB,IAAI,EAAAC,WAM7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,YAAa4D,IACjB5D,IAAI,WAAYqD,EAASI,aACzBzD,IAAI,aAAcsD,EAAWG,aAC7BzD,IAAI,iBAAkB6D,EAAeJ,YAE9ClE,KAAKH,KACVI,IAAkBC,IAAM,0BAA2B,CAAEK,OAAQA,IAC7DJ,aAGH,YAAAoE,iBAAA,SAAiBF,EAAmBP,EAAkBC,GACrD,IAAIxD,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAOE,IAAI,YAAa4D,IACjB5D,IAAI,WAAYqD,EAASI,aACzBzD,IAAI,aAAcsD,EAAWG,YAEtClE,KAAKH,KACVI,IAAkBC,IAAM,0BAA2B,CAAEK,OAAQA,IAC7DJ,aAGH,YAAAqE,oBAAA,SAAoBH,GAApB,WACK7C,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAWzB,IAAM,sBAAuBQ,KAAKC,UAAU,CAAE0D,UAAWA,IAAc,CAAE7C,QAASA,IAC7FI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAsE,wBAAA,SAAwBC,GAAxB,WACKlD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAiBzB,IAAM,0BAA2BQ,KAAKC,UAAU,CAAE+D,OAAQA,IAAW,CAAElD,QAASA,IACjGI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAwE,mBAAA,SAAmBD,GAAnB,WACKlD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAiBzB,IAAM,qBAAsBQ,KAAKC,UAAU,CAAE+D,OAAQA,IAAW,CAAElD,QAASA,IAC5FI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAyE,eAAA,WACC,IAAIrE,EAAqB,IAAI,EAAAC,WAE7B,OAAOR,KAAKH,KACVI,IAAgHC,IAAM,wBAAyB,CAAEK,OAAQA,IACzJJ,aAGH,YAAA0E,qBAAA,SAAqBC,EAAaC,GACjC,IAAIxE,EAAqB,IAAI,EAAAC,WAI7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,MAAOqE,IACXrE,IAAI,cAAesE,GAE5B/E,KAAKH,KACVI,IAAgBC,IAAM,wBAAyB,CAAEK,OAAQA,IACzDJ,aAGH,YAAA6E,yBAAA,WACC,IAAIzE,EAAqB,IAAI,EAAAC,WAE7B,OAAOR,KAAKH,KACVI,IAAkBC,IAAM,iCAAkC,CAAEK,OAAQA,IACpEJ,aAGH,YAAA8E,qBAAA,SAAqBH,GACpB,IAAIvE,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,MAAOqE,GAEpB9E,KAAKH,KACVI,IAAuBC,IAAM,uBAAwB,CAAEK,OAAQA,IAC/DJ,aAGH,YAAA+E,WAAA,WACC,IAAI3E,EAAqB,IAAI,EAAAC,WAE7B,OAAOR,KAAKH,KACVI,IAAcC,IAAM,4BAA6B,CAAEK,OAAQA,IAC3DJ,aAGH,YAAAgF,qBAAA,SAAqBC,EAAuBC,GAC7B,IAAI,EAAA5D,YAAY,CAC7B,eAAgB,qBADjB,IAcIlB,EAAqB,IAAI,EAAAC,WAI7B,OAFAD,GADAA,EAASA,EAAOE,IAAI,OAAQ2E,IACZ3E,IAAI,WAAY4E,GAEzBrF,KAAKH,KACVI,IAAuBC,IAAM,+BAAgC,CAAEK,OAAQA,IACvEJ,aAIH,YAAAmF,qBAAA,SAAqB/D,GAArB,WACKC,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAUzB,IAAM,2CAA4CQ,KAAKC,UAAU,CAAE,SAAYY,IAAa,CAAEC,QAASA,IACjHI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAkBH,YAAAoF,qBAAA,SAAqBH,EAAuBC,EAA2B5C,EAAuB+C,GAA9F,WACKhE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,CACZ6E,cAAeA,EACfC,kBAAmBA,EACnB5C,cAAeA,EACf+C,WAAYA,GAMb,OAFAxF,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAezB,IAAM,sCAAuCQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IAC/FI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAsF,iBAAA,SAAiBC,GAAjB,WACKlE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAiBzB,IAAM,sBAAuBQ,KAAKC,UAAU,CAAE+E,KAAMA,IAAS,CAAElE,QAASA,IACzFI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAwF,wBAAA,SAAwBb,EAAac,GAArC,WACKpE,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAwBzB,IAAM,8BAA+BQ,KAAKC,UAAU,CAAEmE,IAAKA,EAAKc,QAASA,IAAY,CAAEpE,QAASA,IACxHI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA0F,0BAAA,SAA0Bf,GAA1B,WACKtD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAsBzB,IAAM,gCAAiCQ,KAAKC,UAAU,CAAEmE,IAAKA,IAAQ,CAAEtD,QAASA,IACtGI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA2F,iBAAA,SAAiBhB,GAAjB,WACKtD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAWzB,IAAM,sBAAuBQ,KAAKC,UAAU,CAAEmE,IAAKA,IAAQ,CAAEtD,QAASA,IACjFI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA4F,wBAAA,SAAwBjB,GAAxB,WACKtD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAWzB,IAAM,8BAA+BQ,KAAKC,UAAU,CAAEmE,IAAKA,IAAQ,CAAEtD,QAASA,IACzFI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA6F,kBAAA,SAAkBlB,GACjB,IAAItD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGjB,OAAOzB,KAAKH,KAAK8B,KAAwBzB,IAAM,uBAAwBQ,KAAKC,UAAU,CAAEmE,IAAKA,IAAQ,CAAEtD,QAASA,KAGjH,YAAAyE,cAAA,SAAcnB,GACb,IAAIvE,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,MAAOqE,GAEpB9E,KAAKH,KACVI,IAAgBC,IAAM,mBAAoB,CAAEK,OAAQA,IACpDJ,aAMH,YAAA+F,mBAAA,SAAmBC,EAAqCC,EAA8BC,EAAgBC,EAAsBC,GAA5H,WACK/E,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,CAAE4F,eAAgBA,EAAgBC,UAAWA,EAAWC,MAAOA,EAAOC,aAAcA,GAQjG,OANa,MAATC,IACHhG,EAAc,MAAIgG,GAGnBvG,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAWzB,IAAM,0BAA2BQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IAC/EI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAqG,KAAA,SAAK1B,EAAaf,EAAoBD,EAAkB2C,EAAgDC,GACvG,IAAIlF,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,CACZuE,IAAKA,EACL4B,KAAMA,GAeP,OAZkB,MAAd3C,IACHxD,EAAOwD,WAAaA,GAGL,MAAZD,IACHvD,EAAOuD,SAAWA,GAGf2C,EAAOE,OAAS,IACnBpG,EAAOkG,OAASA,GAGVzG,KAAKH,KACV8B,KAAUzB,IAAM,oBAAqBQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IACxErB,aAGH,YAAAyG,OAAA,SAAO9B,EAAa+B,EAAepE,EAAuBqE,EAAwBL,GACjF,IAAIjF,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,CACZuE,IAAKA,EACLrC,cAAeA,EACfqE,eAAgBA,GAYjB,OATIL,EAAOE,OAAS,IACnBpG,EAAOkG,OAASA,GAGJ,MAATI,GAAiBA,EAAMF,OAAS,IACnCpG,EAAOsG,MAAQA,GAIT7G,KAAKH,KACV8B,KAAyCzB,IAAM,sBAAuBQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IACzGrB,aAGH,YAAA4G,iBAAA,SAAiBjC,GAChB,IAAItD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,CACZuE,IAAKA,GAGN,OAAO9E,KAAKH,KACV8B,KAAwBzB,IAAM,kCAAmCQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IACpGrB,aAGH,YAAA6G,SAAA,SAASlC,GACR,IAAIvE,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAI,MAAOqE,GAEpB9E,KAAKH,KACVI,IAAcC,IAAM,wBAAyB,CAAEK,OAAQA,IACvDJ,aAGH,YAAA8G,oBAAA,WACC,IAAI1G,EAAqB,IAAI,EAAAC,WAE7B,OAAOR,KAAKH,KACVI,IAAoDC,IAAM,wBAAyB,CAAEK,OAAQA,IAC7FJ,aAGH,YAAA+G,yBAAA,SAAyBpC,EAAahB,EAAkBC,EAAoBC,EAAkBC,GAE7F,IAAI1D,EAAqB,IAAI,EAAAC,WAQ7B,OAHAD,GADAA,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAI,MAAOqE,IACXrE,IAAI,WAAYqD,EAASI,aACzBzD,IAAI,aAAcsD,EAAWG,aAC7BzD,IAAI,WAAYuD,IAChBvD,IAAI,cAAewD,EAAYC,YAGxClE,KAAKH,KACVI,IAAoBC,IAAM,gCAAiC,CAAEK,OAAQA,IACrEJ,aAIH,YAAAgH,iBAAA,sBAIC,OAFAnH,KAAKF,aAAa4B,QAEX1B,KAAKH,KACVI,IAAoBC,IAAM,8BAC1B0B,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,a,iCAvvBS7F,GAAe,sD,oCAAfA,EAAe,QAAfA,EAAe,O,EAD5B,GACa,EAAAA,mB,kFCtCb,SACA,QAGA,Q,GAGA,M,sBAIA,aAGI,WAAqBuF,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE/C,YAAAsH,kBAAA,SAAmBC,GAAnB,WACQ7F,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAA2BzB,IAAM,cAAeQ,KAAKC,UAAW,CAAE2G,KAAMD,IAAmB,CAAE7F,QAASA,IAC/GI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAoH,aAAA,SAAcF,GAAd,WACQ7F,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAYzB,IAAM,qBAAsBQ,KAAKC,UAAW,CAAE0G,cAAeA,IAAmB,CAAE7F,QAASA,IAChHI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAqH,gBAAA,SAAiBH,GAAjB,WACQ7F,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAA2BzB,IAAM,cAAeQ,KAAKC,UAAW,CAAE2G,KAAMD,IAAmB,CAAE7F,QAASA,IAC/GI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAsH,mBAAA,SAAoBC,GAChB,IAAInH,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAK,mBAAoBiH,EAAiBxD,YAEnDlE,KAAKH,KACPI,IAAyDC,IAAM,gCAAiC,CAAEK,OAAQA,IAC1GJ,aAGT,YAAAwH,iBAAA,SAAkBxF,EAAcyF,GAC5B,IAAIrH,EAAqB,IAAI,EAAAC,WAI7B,OAFAD,GADAA,EAASA,EAAOE,IAAK,OAAQ0B,IACb1B,IAAK,gBAAiBmH,GAE/B5H,KAAKH,KACPI,IAAiBC,IAAM,mCAAoC,CAAEK,OAAQA,IACrEJ,aAGT,YAAA0H,sBAAA,SAAuB1F,EAAc2F,GAArC,WACQvH,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAK,OAAQ0B,IACb1B,IAAK,eAAgBqH,EAAa5D,YAElDlE,KAAKF,aAAa4B,QAEX1B,KAAKH,KACPI,IAAoFC,IAAM,qCAAsC,CAAEK,OAAQA,IACnJqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAoD,wBAAA,SAAyBC,EAAcC,EAAcC,EAAgBC,GAEjE,IAAInC,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAGhBlB,EAAS,CACTiD,KAAMA,EACNC,KAAMA,GAQV,OALe,MAAVC,GAA+B,MAAbC,IACnBpD,EAAOmD,OAASA,EAChBnD,EAAOoD,UAAYD,GAGhB1D,KAAKH,KACP8B,KAAWzB,IAAM,6BAA8BQ,KAAKC,UAAWJ,GAAU,CAAEiB,QAASA,IACpFrB,aAGT,YAAA4H,uBAAA,SAAwBC,EAAkBC,GAA1C,WACQzG,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAezB,IAAM,sCAAuCQ,KAAKC,UAAW,CAAEqH,SAAUA,EAAUC,MAAOA,IAAW,CAAEzG,QAASA,IACxII,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAA+H,uBAAA,SAAwBC,EAAmBC,GAA3C,WACQ5G,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAYzB,IAAM,sCAAuCQ,KAAKC,UAAW,CAAEwH,UAAWA,EAAWC,KAAMA,IAAU,CAAE5G,QAASA,IACrII,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAkI,mBAAA,SAAoBC,EAAuB9E,EAAc+E,GAErD,IAAIhI,EAAqB,IAAI,EAAAC,WAK7B,OAFAD,GADAA,GADAA,EAASA,EAAOE,IAAK,gBAAiB6H,IACtB7H,IAAK,OAAQ+C,IACb/C,IAAK,QAAS8H,GAEvBvI,KAAKH,KACPI,IAAoCC,IAAM,qCAAsC,CAAEK,OAAQA,IAC1FJ,aAGT,YAAAqI,kBAAA,SAAmBC,EAAsBR,GACrC,IAAIzG,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAGhB+E,EAAO9F,KAAKC,UAAW,CAAE8H,aAAcA,EAAcR,MAAOA,IAEhE,OAAOjI,KAAKH,KACP8B,KAAezB,IAAM,oCAAqCsG,EAAM,CAAEhF,QAASA,IAC3ErB,aAGT,YAAAuI,kBAAA,SAAmBP,GACf,IAAI3G,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAGhB+E,EAAO9F,KAAKC,UAAW,CAAEwH,UAAWA,IAExC,OAAOnI,KAAKH,KACP8B,KAAYzB,IAAM,oCAAqCsG,EAAM,CAAEhF,QAASA,IACxErB,aAGT,YAAAwI,WAAA,SAAYV,EAAe9F,EAAcQ,GACrC,IAAInB,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAGhBlB,EAAS,CAAEoC,eAAgBA,EAAgBG,SAAU,CAAEmF,MAAOA,EAAO9F,KAAMA,IAE/E,OAAOnC,KAAKH,KACP8B,KAAYzB,IAAM,6BAA8BQ,KAAKC,UAAWJ,GAAU,CAAEiB,QAASA,IACrFrB,aAGT,YAAAyI,WAAA,SAAYjG,EAAwBK,GAChC,IAAIxB,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAGpB,OAAOzB,KAAKH,KACP8B,KAAYzB,IAAM,gCAAiCQ,KAAKC,UAAW,CAAE,eAAkBgC,EAAgB,SAAYK,IAAc,CAAExB,QAASA,IAC5IrB,a,iCA7LA/F,GAAS,sD,oCAATA,EAAS,QAATA,EAAS,O,EADtB,GACa,EAAAA,a,kaCRA,EAAAyO,QAAkB,aAE/B,mBAAa,EAAAC,aAMb,iBAKC,WAAY3G,EAAc8F,EAAuBc,GAKjD,KAAAC,SAAmB,GAJlBhJ,KAAKmC,KAAOA,EACZnC,KAAKiI,MAAQA,EACbjI,KAAK+I,YAAcA,EAOrB,OAHC,YAAAE,SAAA,SAASrG,GACR5C,KAAKgJ,SAASE,KAAKtG,IAErB,EAfA,GAAa,EAAAuG,OAiBb,mBAAa,EAAAC,YAeb,iBAQC,KAAAC,WAAkE,IARtD,EAAAC,gBAWb,mBAAa,EAAAC,OAwBb,iBAMC,WAAmBC,EAA8BH,GAChDrJ,KAAKwJ,cAAgBA,EACrBxJ,KAAKqJ,WAAaA,EAgDpB,OA7CQ,YAAAI,aAAP,SAAoBxI,EAAYyI,EAAkBC,GAKjD,IAJA,IAAIC,EAAS,CAAEC,UAAW5I,EAAM6I,QAAS,KAAMjD,MAAO,MAEhDkD,EAAO9I,EAAK+I,U,WAETC,GACR,IAAIC,EAAO,EAAKV,cAAcH,WAAWY,GAEzC,GAAIC,EAAK/H,OAASuH,EAAU,CAK3B,GAJkB,UAAdQ,EAAKzG,OACRmG,EAAO/C,MAAQ8C,EAASQ,UAGrBD,EAAKE,iBACK,EAAKf,WAAWa,EAAK/H,MAAMyE,OAEjCyD,SAAQ,SAAAC,GAEd,IAAMT,EAAYU,KAAKC,MAAMF,EAAIT,WAC3BC,EAAUS,KAAKC,MAAMF,EAAIR,SAE3BC,GAAQF,GAAaE,GAAQD,IAEd,UAAdI,EAAKzG,KACRmG,EAAO/C,MAAQnG,KAAK8J,MAAM9J,KAAKC,UAAU2J,EAAIzD,QAEvB,SAAdqD,EAAKzG,MAAgC,MAAb6G,EAAIzD,OAAiB4D,MAAMC,QAAQJ,EAAIzD,QAAUyD,EAAIzD,MAAMF,OAAS,EACpGiD,EAAO/C,MAAQyD,EAAIzD,MAAM,GAGzB+C,EAAO/C,MAAQyD,EAAIzD,eAMtB+C,EAAO/C,MAAQ,EAAKwC,WAAWa,EAAK/H,M,uBA/B9B8H,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,SAAUsD,EAAG,C,eAAtDA,G,MAsCT,OAAOL,GAET,EAxDA,GAAa,EAAAe,oBA0Db,mBAAa,EAAAC,gBAOb,MAYC,SAAYzI,EAAcsB,EAAcwE,EAAuBc,EAA6B8B,EAAoBC,EAAmBC,EAAiBX,GAEnJpK,KAAKmC,KAAOA,EACZnC,KAAKyD,KAAOA,EACZzD,KAAKiI,MAAQA,EACbjI,KAAK+I,YAAcA,EACnB/I,KAAK6K,UAAYA,EACjB7K,KAAK8K,UAAW,EAChB9K,KAAK+K,OAASA,EACd/K,KAAKoK,iBAAmBA,GArBb,EAAAY,YA0Bb,kBAGC,WAAY7I,EAAcsB,EAAcwE,EAAuBc,EAA6B8B,EAAoBC,EAAmBC,EAAiBE,GAApJ,MACC,YAAM9I,EAAMsB,EAAMwE,EAAOc,EAAa8B,EAAWC,EAAUC,EAAQE,IAAS,K,OAG7E,EAAAC,SAAiB,IAAI/B,EAAK,KAAM,KAAM,MAEtC,EAAAgC,YAAsB,G,EAKvB,OAdmC,OAWlC,YAAAC,YAAA,SAAYxI,GACX5C,KAAKkL,SAAWtI,GAElB,EAdA,CAAmCoI,GAAtB,EAAAK,gBAgBb,kBACC,WAAYlJ,EAAcsB,EAAcwE,EAAuBc,EAA6B8B,EAAoBC,EAAmBC,EAAiBE,GAApJ,MACC,YAAM9I,EAAMsB,EAAMwE,EAAOc,EAAa8B,EAAWC,EAAUC,EAAQE,IAAS,K,OAE5E,EAAKK,UAAY,GACjB,EAAKC,MAAQ,E,EAEf,OAPsC,OAOtC,EAPA,CAAsCP,GAAzB,EAAAQ,mBASb,SAAYC,GACX,uCACA,iCACA,qCACA,wCACA,oCACA,+CAND,CAAY,EAAAA,2BAAA,EAAAA,yBAAwB,KASpC,mBAAa,EAAAC,WAKb,+B,+CAEA,OAFmC,OAEnC,EAFA,CAAmCA,GAAtB,EAAAC,gBAIb,+B,+CAEA,OAFoC,OAEpC,EAFA,CAAoCD,GAAvB,EAAAE,iBAIb,mBAAa,EAAAC,gCAMb,mBAAa,EAAAC,iBAOb,mBAAa,EAAAC,uBAcb,+B,+CAMA,OANkC,OAMlC,EANA,CAAkCA,GAArB,EAAAC,eAQb,+B,+CAEA,OAF0C,OAE1C,EAFA,CAA0CA,GAA7B,EAAAC,uBASb,mBAAa,EAAAC,cASb,mBAAa,EAAAC,kBAMb,mBAAa,EAAAC,2BAKb,mBAAa,EAAAC,oBAMb,mBAAa,EAAAC,aAIb,mBAAa,EAAAC,OAOb,mBAAa,EAAAC,aA2Bb,mBAAa,EAAAC,oBAeb,mBAAa,EAAAC,oBAcb,SAAYC,GACX,kCACA,sBACA,4BAHD,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KAM1B,mBAAa,EAAAC,kBAMb,mBAAa,EAAAC,wBAWb,mBAAa,EAAAC,cAOb,+B,+CAEA,OAFwC,OAExC,EAFA,CAAwCf,GAA3B,EAAAgB,qBAIb,mBAAa,EAAAC,eAOb,mBAAa,EAAAC,qB,kFC3Yb,SACA,Q,OAOA,aAOI,aAHQ,KAAAC,wBAA0B,IAAI,EAAAC,QACtC,KAAAC,gBAAkBpN,KAAKkN,wBAAwBG,e,OAIxC,YAAAC,cAAP,WACI,OAAOtN,KAAKuN,YAGT,YAAAC,cAAP,SAAqBC,GACjBzN,KAAKuN,WAAaE,EAElBzN,KAAKkN,wBAAwBQ,KAAK1N,KAAKuN,a,iCAflClT,I,oCAAAA,EAA8B,QAA9BA,EAA8B,O,EAD3C,GACa,EAAAA,kC,kFCUb,SACA,QAEA,Q,GAIA,M,sBAIA,aAGI,WAAqBwF,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE/C,YAAA6N,kBAAA,SAAmBtN,GACf,IAAIE,EAAqB,IAAI,EAAAC,WAG7B,OAFAD,EAASA,EAAOE,IAAK,QAASC,KAAKC,UAAUN,IAEtCL,KAAKH,KACPI,IAAsBC,IAAM,6BAA8B,CAACK,OAAQA,IACnEJ,aAGT,YAAAyN,oBAAA,SAAqBhG,EAAuBiG,EAAiCC,GAA7E,WAEItM,EAAU,IAAI,EAAAC,YAAa,CACxB,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAqBzB,IAAM,yBAA0BQ,KAAKC,UAAW,CAAEiH,cAAgBA,EAAeiG,wBAA0BA,EAAyBC,uBAAyBA,IAA4B,CAAEtM,QAASA,IACjOI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAEV3B,aAGR,YAAA4N,oBAAA,SAAqBnG,EAAuBiG,EAAiCC,GAA7E,WAEKtM,EAAU,IAAI,EAAAC,YAAa,CACxB,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAqBzB,IAAM,4BAA6BQ,KAAKC,UAAW,CAAEiH,cAAgBA,EAAeiG,wBAA0BA,EAAyBC,uBAAyBA,IAA4B,CAAEtM,QAASA,IACrOI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAA6N,oBAAA,SAAqBC,GAArB,WAEQzM,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAqBzB,IAAM,4BAA6BQ,KAAKC,UAAU,CAAE,OAAUsN,IAAW,CAAEzM,QAASA,IAClHI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAA+N,oBAAA,SAAqBD,GAArB,WAEQzM,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAqBzB,IAAM,4BAA6BQ,KAAKC,UAAU,CAAE,OAAUsN,IAAW,CAAEzM,QAASA,IAClHI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAgO,oBAAA,SAAqBhM,GAArB,WAEQX,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAkBzB,IAAM,4BAA6B,CAAE,KAAQiC,GAAQ,CAAEX,QAASA,IAC3FI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,a,iCA1FAlG,GAAgB,sD,oCAAhBA,EAAgB,QAAhBA,EAAgB,O,EAD7B,GACa,EAAAA,oB,kFC/Bb,SACA,QAEA,Q,GAIA,M,sBAKA,aAGI,WAAqB4F,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAEhD,YAAAsO,cAAA,SAAeC,GAAf,WACS9N,EAAqB,IAAI,EAAAC,WAQ7B,OANkB,MAAb6N,IACD9N,EAASA,EAAOE,IAAK,YAAa4N,IAGtCrO,KAAKF,aAAa4B,QAEX1B,KAAKH,KACPI,IAAuBC,IAAM,+BAAgC,CAAEK,OAAQA,IAChFqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aA0BT,YAAAmO,YAAA,SAAaC,GAAb,WACQ/M,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAYzB,IAAM,6BAA8BQ,KAAKC,UAAW,CAAE4N,OAAQA,IAAY,CAAE/M,QAASA,IAC1GI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGZ,YAAAqO,4BAAA,SAA6BD,GAA7B,WACW/M,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAYzB,IAAM,6CAA8CQ,KAAKC,UAAW,CAAE4N,OAAQA,IAAY,CAAE/M,QAASA,IAC1HI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAIT,YAAAsO,WAAA,SAAYC,GAAZ,WACQlN,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAYzB,IAAM,4BAA6BQ,KAAKC,UAAW,CAAE+N,SAAUA,IAAc,CAAElN,QAASA,IAC7GI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAwO,aAAA,SAAcD,GAAd,WACQlN,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACP8B,KAAYzB,IAAM,8BAA+BQ,KAAKC,UAAW,CAAE+N,SAAUA,IAAc,CAAElN,QAASA,IAC/GI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAyO,eAAA,SAAenI,GACjB,IAAIlG,EAAqB,IAAI,EAAAC,WAIvB,OAFND,EAASA,EAAOE,IAAI,SAAUgG,GAEjBzG,KAAKH,KAAKI,IAAsBC,IAAM,kCAAmC,CAAEK,OAAQA,IACrFJ,aAGT,YAAA0O,kBAAA,SAAmBR,GAAnB,WACQ9N,EAAqB,IAAI,EAAAC,WAK7B,OAJAD,EAASA,EAAOE,IAAK,YAAa4N,GAElCrO,KAAKF,aAAa4B,QAEX1B,KAAKH,KAAKI,IAAoBC,IAAM,qCAAsC,CAAEK,OAAQA,IAC/FqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGZ,YAAA2O,qBAAA,SAAsBT,GAAtB,WACW7M,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KAAK8B,KAAqBzB,IAAM,wCAAyCQ,KAAKC,UAAW,CAAE0N,UAAWA,IAAe,CAAE7M,QAASA,IAChJI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAA4O,QAAA,SAASV,GAAT,WACQ7M,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KAAK8B,KAAqBzB,IAAM,iCAAkCQ,KAAKC,UAAW,CAAE0N,UAAWA,IAAe,CAAE7M,QAASA,IACzII,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAA6O,iBAAA,SAAkBX,EAAmBY,GAArC,WACQzN,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KAAK8B,KAAwBzB,IAAM,oCAAqCQ,KAAKC,UAAW,CAAE0N,UAAWA,EAAWY,QAASA,IAAa,CAAEzN,QAASA,IACjKI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAA+O,kBAAA,SAAmBb,EAAmBY,GAAtC,WACQzN,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAKpB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KAAK8B,KAAwBzB,IAAM,qCAAsCQ,KAAKC,UAAW,CAAE0N,UAAWA,EAAWY,QAASA,IAAa,CAAEzN,QAASA,IAClKI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,aAGT,YAAAgP,oBAAA,SAAqBF,GAArB,WACQzN,EAAU,IAAI,EAAAC,YAAa,CAC3B,eAAgB,qBAGhBlB,EAAqB,IAAI,EAAAC,WAK7B,OAJAD,EAASA,EAAOE,IAAK,UAAWwO,GAEhCjP,KAAKF,aAAa4B,QAEX1B,KAAKH,KAAK8B,KAAiBzB,IAAM,2BAA4B,CAAC+O,QAASA,GAAU,CAAEzN,QAASA,IACvGI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAET3B,a,iCArMAhG,GAAoB,sD,oCAApBA,EAAoB,QAApBA,EAAoB,O,EADjC,GACa,EAAAA,wB,kFCbb,S,OAEA,2B,OAKI,YAAAiV,UAAA,SAAUnO,GACN,OAAKA,EAIE,IAAIsJ,KAAKtJ,GAAM+I,UAHX/I,G,iCAHNxG,I,oDAAAA,EAAmB,U,EAJhC,GAIa,EAAAA,uB,kFCab,SACA,QAEA,Q,GAEA,M,sBAQA,aAGC,WAAoBoF,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE9C,YAAAuP,QAAA,SAAQtL,EAAoBD,GAA5B,WAEKvD,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,aAAcsD,EAAWG,aAC7BzD,IAAI,WAAYqD,EAASI,YAEzClE,KAAKF,aAAa4B,QAEX1B,KAAKH,KACVI,IAAuCC,IAAM,kCAAmC,CAAEK,OAAQA,IAC1FqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAF,IAAA,SAAI6E,GAAJ,WAEKvE,EAAqB,IAAI,EAAAC,WAK7B,OAJAD,EAASA,EAAOE,IAAI,MAAOqE,GAE3B9E,KAAKF,aAAa4B,QAEX1B,KAAKH,KACVI,IAA2BC,IAAM,8BAA+B,CAAEK,OAAQA,IAC1EqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAmP,iBAAA,SAAiBjK,EAA2BkK,GAA5C,WAEOhP,EAAqB,IAAI,EAAAC,WAM7B,OAJAD,GADAA,EAASA,EAAOE,IAAI,aAAc8O,IAClB9O,IAAI,oBAAqB4E,GAEzCrF,KAAKF,aAAa4B,QAEX1B,KAAKH,KACTI,IAA6BC,IAAM,0CAA2C,CAAEK,OAAQA,IACxFqB,KAAK,EAAAC,UAAS,WACb,EAAK/B,aAAagC,eAEnB3B,aAGN,YAAAqP,MAAA,SAAM9K,GAAN,WAEKlD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAA4BzB,IAAM,gCAAiCQ,KAAKC,UAAU,CAAE+D,OAAQA,IAAW,CAAElD,QAASA,IAClHI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAsP,KAAA,SAAK3K,GAAL,WAEKtD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAGblB,EAAS,GAQb,OANW,MAAPuE,IACHvE,EAAS,CAAEuE,IAAKA,IAGjB9E,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAA6DzB,IAAM,+BAAgCQ,KAAKC,UAAUJ,GAAS,CAAEiB,QAASA,IACtII,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAuP,OAAA,SAAO5K,GAAP,WAEKtD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAUzB,IAAM,iCAAkCQ,KAAKC,UAAU,CAAEmE,IAAKA,IAAQ,CAAEtD,QAASA,IAC3FI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAwP,OAAA,SAAO7K,GAAP,WAEKtD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAUzB,IAAM,iCAAkCQ,KAAKC,UAAU,CAAEmE,IAAKA,IAAQ,CAAEtD,QAASA,IAC3FI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAAyP,IAAA,SAAI9K,GAAJ,WAEKtD,EAAU,IAAI,EAAAC,YAAY,CAC7B,eAAgB,qBAKjB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACV8B,KAAUzB,IAAM,8BAA+BQ,KAAKC,UAAU,CAAEmE,IAAKA,IAAQ,CAAEtD,QAASA,IACxFI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA0P,QAAA,SAAQ/K,EAAYf,EAAoBD,GAEvC,IAAIvD,EAAqB,IAAI,EAAAC,WAO7B,OAJAD,GADAA,GADAA,EAASA,EAAOE,IAAI,MAAOqE,IACXrE,IAAI,aAAcsD,EAAWG,aAC7BzD,IAAI,WAAYqD,EAASI,YAIlClE,KAAKH,KACVI,IAAoCC,IAAM,mCAAoC,CAAEK,OAAQA,IAIxFJ,a,iCAvJSxF,GAA4B,sD,oCAA5BA,EAA4B,QAA5BA,EAA4B,O,EADzC,GACa,EAAAA,gC,kFC/Bb,mBAAa,EAAAmV,cAUb,mBAAa,EAAAC,WAOb,mBAAa,EAAA5G,OAKb,mBAAa,EAAA6G,cAUb,mBAAa,EAAAC,kBAUb,mBAAa,EAAAC,YAKb,mBAAa,EAAAC,UAMb,mBAAa,EAAAC,uB,kFCvDb,WACA,O,GASA,OACA,O,6HCIE,uCAA4C,+GAAwE,iB,gCAAxE,+C,mDAG5C,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,6BACE,+BAAmB,+GAAnB,iBACF,iBACF,iBACF,iB,gCAHyB,8D,mDAKzB,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,6BACE,+BAAmB,2GAAnB,iBACF,iBACF,iBACF,iB,gCAHyB,0DDtB3B,iBA6BC,WAAoBC,EAA4CC,GAA5C,KAAAD,mBAA4C,KAAAC,MAVvD,KAAAC,kBAA4B,EAC5B,KAAAC,oBAA8B,EAC9B,KAAAC,WAAqB,EAGpB,KAAAC,gBAAkB,IAAI,EAAAC,aAChC,KAAAC,QAAkB,KAElB,KAAAnD,MAAgB,O,OAKhB,YAAAoD,SAAA,aAIA,YAAAC,gBAAA,WACC9Q,KAAKyN,MAAQ,OACbzN,KAAKsQ,IAAIS,iBAGV,YAAAC,YAAA,aAIA,YAAAC,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAC,eAAA,WACCnR,KAAKsC,UAAUyI,QAAU/K,KAAKsC,UAAUyI,QAGzC,YAAAqG,QAAA,WACCpR,KAAKyN,MAAQ,QAGd,YAAA4D,gBAAA,SAAgBC,GACftR,KAAKyN,MAAQ,QAGd,YAAA8D,QAAA,WACC,QAAIvR,KAAKsC,UAAUH,QAGwB,IAAtCnC,KAAKsC,UAAUH,KAAKqP,QAAQ,OAI0B,IAAtDxR,KAAKsC,UAAU2F,MAAMwJ,aAAa,GAAG5K,MAAMF,SAI3C3G,KAAKyQ,WACRiB,QAAQC,IAAI3R,KAAKsC,aAGdtC,KAAKyQ,WAA0C,MAA5BzQ,KAAKsC,UAAUgJ,WAA4D,IAAvCtL,KAAKsC,UAAUgJ,UAAUpH,eAIhFlE,KAAKyQ,WAAsC,MAAxBzQ,KAAKsC,UAAUiJ,OAAoD,IAAnCvL,KAAKsC,UAAUiJ,MAAMrH,gB,iCApElEhH,GAAuB,mF,iCAAvBA,EAAuB,khCClCpC,0BACE,4BACE,4BACE,4BACE,4BACF,iBACF,iBACA,4BACE,6BACE,8BAA2D,uEAA3D,iBACF,iBACF,iBACF,iBAEA,wCAAiB,sEAA4D,iBAC7E,yCAGA,+BAaA,+BAYF,kB,MAlCqC,2DAA6B,4BAK/C,uDACD,0DAGQ,gDAaA,kD,+eDVb,CACX,EAAA0U,QAAQ,eAAgB,CACvB,EAAAnE,MAAM,aACL,EAAAoE,MAAM,CAAE,QAAW,KAEpB,EAAApE,MAAM,OACL,EAAAoE,MAAM,CAAE,QAAW,KAEpB,EAAAC,WAAW,eAAgB,EAAAV,QAAQ,gB,EAZtC,GAiBa,EAAAlU,2B,kFElCb,KACA,MADA,IAEA,QAIA,S,GACA,OAEA,OACA,MACA,M,gGCVI,6BAAqE,YAAW,kB,6BAAX,+C,sBAGjE,yBACI,6BACJ,kB,yBACA,yBACI,YACA,6BACJ,kB,6BAFI,mF,mDAQA,4BACI,4BACI,4BAAQ,6BAA6C,YACrD,iBACJ,iBACA,6BACI,+BAAO,2FAAP,iBACJ,iBACJ,iB,8CAN6D,wDAI9C,+CAA+B,yBAA/B,CAA+B,sBAA/B,CAA+B,wC,yBAWlC,gCAAuD,YAAc,kB,uBAAlC,6BAAoB,6C,mDARnE,4BACI,4BACI,+BAAuB,6BACvB,iBACJ,iBACA,6BACI,gCAA0D,2GAA6B,iFACnF,wBACA,kCACJ,iBACJ,iBACJ,iB,gCALkE,yDAE9C,gD,sBAwBZ,+BAAuE,6BAAuD,kB,sBAyJtI,4BACI,uBACA,6BACI,6BACJ,iBACJ,kB,2GAQY,6BAGI,6BAGI,6BAAK,kHAAiC,KAAO,EAAH,wBACtC,sBACJ,iBAEA,+BAAiC,YAAgB,iBAGrD,iBAGJ,iB,+CAVyF,4FAIhD,6C,yBAhBrD,0BACI,4BACI,4BACI,4BAAQ,YAAoB,iBAChC,iBACA,6BACI,+BAiBJ,iBACJ,iBACJ,kB,uBAtBoB,qDAGS,kD,mDA4BjB,gCAAwC,2FACpC,6BACJ,iB,iDAFmG,oCD9O3H,iBAgCC,WAAoB6U,EAAkCC,EAA6BrI,EAAsCsI,EAAgCC,GAArI,KAAAH,UAAkC,KAAAC,WAA6B,KAAArI,WAAsC,KAAAsI,aAAgC,KAAAC,cA1BzJ,KAAAtB,QAAkB,KAiBlB,KAAAuB,UAAoB,EAKpB,KAAA1C,MAAgB,EAEhB,KAAApJ,OAAiB,E,OAIjB,YAAAwK,SAAA,sBAEC7Q,KAAKoS,mBAAqB,IAAI,EAAAjF,QAEX,MAAfnN,KAAKqS,QAAmBrS,KAAKmS,WAChCnS,KAAKgS,SAASvK,oBAAmB,GAAM6K,MAAK,SAAAjS,GAG3C,IADA,IAAIkS,EAAa,GACRtI,EAAI,EAAGA,EAAI5J,EAAMsG,SAAUsD,EAC/B,EAAKiI,YAAYM,kBAAkBnS,EAAM4J,GAAGwI,QAASpS,EAAM4J,GAAG9H,OACjEoQ,EAAWrJ,KAAK7I,EAAM4J,IAGxB,EAAK5J,MAAQkS,KAEXG,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZ3S,KAAKqS,OAAS,CACbvN,IAAK,KACLvD,SAAU,GACVsR,aAAc7S,KAAK2J,SAASQ,SAC5BhI,KAAM,GACN2Q,qBAAsB,KACtBC,YAAa,KACbC,aAAc,GACdC,QAAS,GACTjM,SAAU,GACVkM,kBAAmB,GACnBC,eAAgB,GAChBC,iBAAkB,GAClBC,WAAY,GACZC,YAAa,GACbC,aAAc,GACdC,gBAAiB,GACjBC,MAAO,GACPnT,YAAa,GACboT,MAAM,EACNC,UAAW,SACXC,SAAU,KACVC,WAAY,QAKf,YAAA9T,KAAA,SAAK+T,GACJ9T,KAAKqS,OAAOkB,aAAeO,EAAIhP,KAGhC,YAAAiP,cAAA,SAAczC,GAEb,IADA,IAAI0C,EAAY1C,EAAM2C,OAAOC,UACpBjK,EAAI,EAAGA,EAAI+J,EAAUrN,OAAQsD,IAAK,CAE1C,GAAU,aADF+J,EAAU/J,GAEjB,OAAO,EAIT,OAAO,GAGR,YAAAkK,SAAA,sBAE6B,MAAxBnU,KAAKqS,OAAO9Q,UAAoBvB,KAAKqS,OAAO9Q,SAASoF,OAAS,EACjE3G,KAAKgS,SAASnK,sBAAsB7H,KAAKqS,OAAO9Q,UAAU,GAAM+Q,MAAK,SAAAhS,GACpE,EAAK+R,OAAO/R,YAAcA,KACxBoS,OAAM,SAACC,GACT,EAAKC,MAAMD,MAIZ3S,KAAKqS,OAAO/R,YAAc,IAI5B,YAAA8T,SAAA,sBACCpU,KAAK+R,QAAQtM,iBAAiBzF,KAAKqS,QAAQC,MAAK,SAAA+B,GAE/C,EAAKjC,mBAAmB1E,KAAK2G,GAC7B,EAAKpC,WAAWqC,UACd5B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA4B,SAAA,WACCvU,KAAKiS,WAAWqC,QAGjB,YAAA1B,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAxHtChU,GAAqB,0L,iCAArBA,EAAqB,q2G,GAAA,MClBlC,4BACI,8BAEA,4BACI,6BAGA,6BAIJ,iBAEA,+BAEI,+BACI,8BASA,8BAYA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,oEAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BAAyD,iBACrE,iBACA,8BACI,oCAA6C,yEACzC,yBACA,iCAAuB,8BAAwD,iBAC/E,iCAAwB,8BAAyD,iBACjF,iCAAwB,8BAAyD,iBACrF,iBACA,kCACJ,iBACJ,iBACA,6BACI,6BACI,6BAAO,8BAAiD,iBAC5D,iBACA,8BACI,iCAA8C,0EAC1C,yBACA,iCAAuB,8BAA6C,iBACpE,iCAAwB,8BAA8C,iBAC1E,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BAAgD,iBAC5D,iBACA,8BACI,8BACI,8BAEI,8BAAK,yCAAS,EAAAoV,cAAA,GAAwB,KAAO,EAAH,sCACtC,uBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAyBA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,4EAAiG,iBAC/G,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,uEAAuF,iBACrG,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,wEAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,iFAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,gCAAO,8EAAP,iBACJ,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,gFAAyG,iBACvH,iBACJ,iBACA,6BACI,6BACI,6BAAQ,8BACR,iBACJ,iBACA,8BACI,mCAAU,0EAA6F,iBAC3G,iBACJ,iBAEA,6BACI,wBACA,8BACI,8BACJ,iBACJ,iBAEA,6BACI,6BACI,6BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,2EAAP,iBACJ,iBACJ,iBACA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,+EAAP,iBACJ,iBACJ,iBACA,8BACI,8BACI,8BAAQ,+BACR,iBACJ,iBACA,+BACI,iCAAO,qEAAP,iBACJ,iBACJ,iBAEA,gCAOA,iCA2BA,8BACI,yBACA,+BACI,+BACI,kCAAsB,wCAAS,EAAAQ,cAC3B,+BACJ,iBACA,oCAGJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,6BApQS,oDAGG,4CAGA,6CASwB,0EASA,mEAkBT,qDAAyB,+BAQa,0DAA8B,uBAMpE,oDAQuC,2DAA+B,uBAe4B,qGAqC/F,6DAAiC,uBASjC,wDAA4B,uBAS/B,yDAA6B,uBAS7B,kEAAsC,uBAStC,+DAAmC,uBAShC,iEAAqC,uBASrC,2DAA+B,uBAiBlC,6DAAgC,uBAShC,gEAAoC,uBASpC,sDAA0B,uBAIjB,kEAOnB,4DAgCqB,oEAEN,kD,ySD9OhC,GAKa,EAAA5V,yB,kFElBb,W,GACA,O,gFCDA,4BACE,4BACE,4BACE,4BACA,YACF,iBACF,iBACA,4BACE,6BACE,8BAAO,2FAAP,iBACF,iBACF,iBACF,iB,8CATgB,yCACV,wDAKO,+CAA+B,yBAA/B,CAA+B,sBAA/B,CAA+B,wCDN5C,iBAWI,aALgB,KAAA+V,IAAc,GAEd,KAAAC,UAAoB,EACnB,KAAAC,YAAc,IAAI,EAAAjE,a,wCAJ1BpT,I,iCAAAA,EAAuB,wXCRpC,8B,KAAwB,8C,sIDGxB,GAKa,EAAAA,2B,kFERb,WAGA,GAFA,MAEA,MAEA,SAGA,GAFA,MAEA,QAOA,GALA,OACA,OAGA,OACA,QAIA,GAFA,OAEA,Q,mKCD8C,2BACE,6BACF,kB,sBACA,2BACE,6BACF,kB,yBACA,2BACE,YACF,kB,wCADE,qE,yBAGF,2BACE,YACF,kB,6DADE,sI,yBAbJ,yBAEE,+BAGA,+BAGA,+BAIA,+BAGF,kB,4DAbQ,oDAGA,4DAGA,6EAIA,8I,yBAON,2BACE,YACF,kB,6DADE,sI,yBAHJ,yBACE,6BACA,+BAGF,kB,4DAHQ,8I,mDAON,+BAAyC,4JAA6C,0FAAtF,iB,gEAA2H,gDAAuB,kDAAzG,uDAA6C,sB,yBADxF,0BACE,iCACF,kB,8BADS,qD,wBAIP,0B,6DAA2F,gDAAuB,kDAAzE,8D,yBAEzC,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,yBAJpE,0BACE,iCAEA,6BAIF,kB,4DANS,oDAEiB,oE,yBAYpB,2BACE,6BAAgE,YAClE,kB,uFADkE,wG,yBALpE,4BACE,yBAAI,YAAsB,iBAC1B,0BAEA,6BAGF,kB,qFANM,6CACY,mEAAmD,kBAAnD,CAAmD,mCAE3C,oL,yBAL5B,2BACE,8BAQF,kB,6DAR8B,0F,yBAFhC,0BACE,8BAUF,kB,4DAVyB,gF,yBAerB,2BACE,6BAAgE,Y,mBAClE,kB,6DADkE,qG,yBAJtE,0BACI,0B,mBAEA,6BAIJ,kB,4DAN6F,+DAAuB,kDAA7F,6FAEK,qE,yBAiBxB,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,yBAZtE,0BACI,4BACI,0BACA,6BACJ,iBAEA,4BACI,0BACA,6BACJ,iBAEA,6BAIJ,kB,4DAbsG,oEAA4B,uDAAtG,6DAAiD,YAK2B,qEAA6B,wDAAzG,8DAAkD,YAIlD,qE,yBAUxB,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,mDALtE,0BACI,+BAA8B,iKAA9B,iBAGA,6BAIJ,iB,+DANQ,+DAAuB,kDADG,6DAGN,qE,yBASxB,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,mDAJtE,0BACI,+BAAqB,iKAArB,iBAEA,6BAIJ,iB,+DANsF,+DAAuB,kDAApF,6DAEG,qE,yBASpB,gCAAsG,YAA+B,kB,uBAAtD,6BAAuB,4D,yBAM1G,2BACE,6BAAgE,YAClE,kB,6DADkE,kF,mDAVtE,0BACI,gCAA8G,iKAC1G,2BACA,kCACJ,iBAKA,6BAIJ,iB,+DAZY,+DAAuB,uDAA+E,6DAElG,sFAMY,2I,mDAM5B,0BACE,iDAOE,kHAEF,iBACF,iB,iCATI,yEAAgD,cAAhD,CAAgD,6FAAhD,CAAgD,gGAAhD,CAAgD,0CAAhD,CAAgD,gCAAhD,CAAgD,mD,mDAWpD,6BACE,gCAA+B,gJAC7B,6BACF,iBACF,kB,yBAjIJ,4BACI,6BAiBA,6BAQA,8BAIA,8BASA,8BAaA,8BASA,8BAiBA,8BAUA,8BASA,+BAeA,+BAaA,gCAKJ,kB,4CAjIQ,wDAiBA,wDAQC,oDAIA,0EASA,qDAaA,oDASA,uDAiBA,qDAUA,uDASA,oDAeA,6EAaA,wD,yBAxIjC,4BAMI,4BACI,wBACI,4BACI,4BACI,2BACI,gC,+CAmIJ,iBACJ,iBACJ,iBACR,iBACH,kB,8BAvIoG,mH,oDAwIpG,0BAME,6BACE,iDAOE,kHAEF,iBACF,iBACF,iB,iCAVM,yEAAgD,cAAhD,CAAgD,6FAAhD,CAAgD,gGAAhD,CAAgD,0CAAhD,CAAgD,gCAAhD,CAAgD,mD,0BA5J3D,0BACI,8BAmJC,+BAmBN,kB,6BAtKU,2DAmJC,iFD/HtB,kBA2DI,WAAqBwU,EAA4B8C,EAAsCC,EAC3EC,EAA0CC,EAA2BC,EACrEC,EAA4BC,EAAkDxL,GAFrE,KAAAoI,UAA4B,KAAA8C,eAAsC,KAAAC,oBAC3E,KAAAC,kBAA0C,KAAAC,QAA2B,KAAAC,uBACrE,KAAAC,WAA4B,KAAAC,sBAAkD,KAAAxL,WAvCjF,KAAAyL,aAAkC,KAE3C,KAAAC,oBAA2B,GAKlB,KAAAC,cAAmC,KAE5C,KAAAC,qBAA4B,GAInB,KAAAC,kBAA8B,GAE9B,KAAA5P,QAAgB,IAAI2E,KAEpB,KAAAkL,UAAoB,EAEpB,KAAApP,OAAiB,EAEjB,KAAAqP,qBAAsB,EAEtB,KAAAC,mBAAoB,EAInB,KAAAC,MAAQ,IAAI,EAAAjF,aAEtB,KAAAkF,mBAA2B,KAC3B,KAAAC,kBAA0B,KAC1B,KAAAvE,SAAmB,EAEnB,KAAAwE,2BAAuC,CAAC,MAAO,WAAY,OAAQ,iBAAkB,c,OAUrF,YAAAlF,SAAA,WACI7Q,KAAKoV,aAAe,IAAI,EAAAzK,kBAAmB3K,KAAKwJ,cAAe9I,KAAK8J,MAAO9J,KAAKC,UAAWX,KAAKoV,eAAiB/L,YAEtF,MAAtBrJ,KAAKsV,cACNtV,KAAKsV,cAAgB,IAAI,EAAA3K,kBAAmB3K,KAAKwJ,cAAe9I,KAAK8J,MAAO9J,KAAKC,UAAWX,KAAKoV,eAAiB/L,YAGlHrJ,KAAKsV,cAAgB,IAAI,EAAA3K,kBAAmB3K,KAAKwJ,cAAe9I,KAAK8J,MAAO9J,KAAKC,UAAWX,KAAKsV,gBAAkBjM,YASxF,MAA1BrJ,KAAKwV,oBACNxV,KAAK+V,2BAA2B7M,KAAKsG,MAAOxP,KAAK+V,2BAA4B/V,KAAKwV,mBAE5ExV,KAAK2V,mBACP3V,KAAK+V,2BAA2B7M,KAAM,aAK9C,IADA,IAAI8M,EAAW,KACL/L,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,SAAUsD,EACV,aAA1CjK,KAAKwJ,cAAcH,WAAWY,GAAG9H,OAClC6T,EAAWhW,KAAKwJ,cAAcH,WAAWY,IAGjD,GAAiB,MAAZ+L,EAAmB,CACpB,IAAIC,EAAsB,IAAI,EAAAjL,UAAW,WAAY,WAAY,IAAI,EAAAkL,eAAgB,WAAY,MAAQ,IAAI,EAAAA,eAAgB,WAAY,OAAQ,GAAM,GAAO,GAAO,GACrKlW,KAAKwJ,cAAcH,WAAWH,KAAM+M,GAGxCjW,KAAKmW,aAGT,YAAArF,gBAAA,sBACK9Q,KAAKoW,cAAcC,cAAcC,WAAW,SAAAC,GACzC,EAAKhF,QAAuB,UAAXgF,GAAiC,aAAXA,EAEvC,EAAKX,MAAMY,KAAM,EAAKjF,aAI9B,YAAAP,YAAA,SAAayF,GACJA,EAAiB,SAClBzW,KAAKmW,aAIb,YAAAA,UAAA,WACInW,KAAKqV,oBAAsBrV,KAAK0W,iBAAkB1W,KAAKoV,cACvDpV,KAAKuV,qBAAuBvV,KAAK0W,iBAAkB1W,KAAKsV,eAE5B,MAAvBtV,KAAK2W,gBACN3W,KAAK2W,eAAeC,UAI5B,YAAAF,iBAAA,SAAkBG,GAKhB,IALF,WACQC,EAAS,GAET/M,EAAO/J,KAAK4F,QAAQoE,U,WAEhBC,GACN,IAAIC,EAAO,EAAKV,cAAcH,WAAWY,IACzC6M,EAAO5M,EAAK/H,MAAQ,KAED,UAAd+H,EAAKzG,OACNqT,EAAO5M,EAAK/H,MAAQ,EAAKwH,SAASQ,UAGjCD,EAAKE,kBACKyM,EAAKxN,WAAWa,EAAK/H,MAAMyE,OAEjCyD,SAAS,SAAAC,GAEZ,IAAMT,EAAYU,KAAKC,MAAOF,EAAIT,WAC5BC,EAAUS,KAAKC,MAAOF,EAAIR,SAE3BC,GAAQF,GAAaE,GAAQD,IAEX,UAAdI,EAAKzG,KACNqT,EAAO5M,EAAK/H,MAAQ,CAChB0H,UAAW,EAAKkN,WAAYzM,EAAIT,WAChCC,QAAS,EAAKiN,WAAYzM,EAAIR,SAC9BjD,MAAOnG,KAAK8J,MAAO9J,KAAKC,UAAW2J,EAAIzD,SAGvB,SAAdqD,EAAKzG,MAAgC,MAAb6G,EAAIzD,OAAiB4D,MAAMC,QAASJ,EAAIzD,QAAWyD,EAAIzD,MAAMF,OAAS,EACpGmQ,EAAO5M,EAAK/H,MAAQ,CAChB0H,UAAW,EAAKkN,WAAYzM,EAAIT,WAChCC,QAAS,EAAKiN,WAAYzM,EAAIR,SAC9BjD,MAAOyD,EAAIzD,MAAM,IAIrBiQ,EAAO5M,EAAK/H,MAAQ,CAChB0H,UAAW,EAAKkN,WAAYzM,EAAIT,WAChCC,QAAS,EAAKiN,WAAYzM,EAAIR,SAC9BjD,MAAOyD,EAAIzD,WAOzBiQ,EAAO5M,EAAK/H,MAAQ0U,EAAKxN,WAAWa,EAAK/H,O,OA3CvC8H,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,SAAUsD,E,EAAnDA,GA+CV,IAAUA,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,SAAUsD,EAAI,CAC/D,IAAIC,EAAOlK,KAAKwJ,cAAcH,WAAWY,GAEpCC,EAAKE,kBAAyC,MAArB0M,EAAO5M,EAAK/H,QACxC2U,EAAO5M,EAAK/H,MAAQ,CAClB0H,UAAW,KACXC,QAAS,KACTjD,MAAO,KAKb,OAAOiQ,GAGT,YAAAC,WAAA,SAAY9V,GACR,OAAKA,IAAS,EAAA4H,QACH7I,KAAK2J,SAASqN,SAAS,iBAAkB,WAG7C/V,GAGX,YAAAgW,iBAAA,SAAkBC,GACdlX,KAAKsV,cAAcjM,WAAWlH,KAAOnC,KAAKuV,qBAA2B,MAMzE,YAAA4B,0BAAA,SAA2B7U,GAA3B,WACItC,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA1Z,6BAA8B,CACpE2Z,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAIzBvX,KAAKiS,WAAWuF,QAAQC,kBAAoBzX,KAAKsV,cACjDtV,KAAKiS,WAAWuF,QAAQhO,cAAgBxJ,KAAKwJ,cAC7CxJ,KAAKiS,WAAWuF,QAAQE,eAAiB1X,KAAKqG,MAC9CrG,KAAKiS,WAAWuF,QAAQlV,UAAYA,EACpCtC,KAAKiS,WAAWuF,QAAQG,yBAAyBrB,WAAW,SAAAsB,GACxD,EAAKzB,eAETnW,KAAKiS,WAAWuF,QAAQK,UAG5B,YAAAC,yBAAA,WAEI,IADA,IAAI7B,EAAW,KACLhM,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,SAAUsD,EACV,aAA1CjK,KAAKwJ,cAAcH,WAAWY,GAAG9H,OAClC8T,EAAWjW,KAAKwJ,cAAcH,WAAWY,IAIjDjK,KAAKmX,0BAA2BlB,IAGpC,YAAA8B,gBAAA,SAAiBzV,GACb,OAAkD,MAA7CtC,KAAKuV,qBAAqBjT,EAAUH,OAA6D,MAA5CnC,KAAKqV,oBAAoB/S,EAAUH,OAIpFnC,KAAKuV,qBAAqBjT,EAAUH,MAAM0E,OAAS7G,KAAKuV,qBAAqBjT,EAAUH,MAAM0E,MAAMmR,SAAWhY,KAAKqV,oBAAoB/S,EAAUH,MAAM0E,OAGpK,YAAAoR,iBAAA,SAAkB3V,GACd,OAAkD,MAA7CtC,KAAKuV,qBAAqBjT,EAAUH,OAA6D,MAA5CnC,KAAKqV,oBAAoB/S,EAAUH,OAKpFnC,KAAKuV,qBAAqBjT,EAAUH,MAAM0E,OAAS7G,KAAKuV,qBAAqBjT,EAAUH,MAAM0E,QAAU7G,KAAKqV,oBAAoB/S,EAAUH,MAAM0E,OAG7J,YAAAqR,uBAAA,SAAwB5G,EAAY6G,GAChCnY,KAAK8V,kBAAoBpV,KAAK8J,MAAO9J,KAAKC,UAAWX,KAAK6V,sBAG9D,YAAAuC,qCAAA,SAAsCC,GAClC,IAAM,IAAIpO,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,OAAQsD,IAAM,CAC7D,IAAIC,EAAYlK,KAAKwJ,cAAcH,WAAWY,GAE9C,GAAmB,SAAdC,EAAKzG,MAAmByG,EAAK/H,OAASkW,EAAoB,CAG3D,IAAIC,GADJpO,EAAsBA,GACFgB,SAASlC,SAE7B,MAAmB,WAAdkB,EAAK/H,KACC,UAAMoW,eAAeD,GAGrBA,GAKnB,OAAO,MAGX,YAAAE,gBAAA,SAAiB7W,EAAM8W,GAEnB,GAAY,MAAPA,GAAuB,MAAR9W,EAChB,OAAO,EAGX,GAAY,MAAP8W,GAAuB,MAAR9W,GAA8B,GAAd8W,EAAI9R,QAA8B,GAAfhF,EAAKgF,OACxD,OAAO,EAGX,IAAI+R,EAAaD,EACZhO,MAAMC,QAAS+N,KAChBC,EAAaD,EAAI,IAGrB,IAAIE,EAAchX,EAKlB,OAJK8I,MAAMC,QAAS/I,KAChBgX,EAAchX,EAAK,IAGhB+W,IAAeC,GAG1B,YAAAC,kBAAA,SAAmBlE,GAKf,IAAM,IAAIzK,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,OAAQsD,IAAM,CAC7D,IAAIC,EAAOlK,KAAKwJ,cAAcH,WAAWY,GAEzC,GAAKC,EAAK/H,OAASuS,EACf,OAAOxK,EAAKzG,KAIpB,OAAO,MAGJ,YAAAoV,WAAP,WACI,OAAO7Y,KAAKuR,SAGT,YAAAtO,aAAP,WACI,OAAOjD,KAAKsV,e,iCApTP7X,GAAuC,6V,iCAAvCA,EAAuC,0E,OAAA,M,mfAXrC,CAAC,EAAAjD,WAAS,u/DC5BzB,+BACI,+BAEQ,+BAyKR,iBACJ,kB,MA1KiB,qD,m5BDqBjB,GAea,EAAAiD,4C,kFEvCb,W,GACA,O,gFCDA,4BACE,4BACE,4BACE,4BACA,YACF,iBACF,iBACA,4BACE,6BACE,iCAAU,2FAAmG,iBAC/G,iBACF,iBACF,iB,8CATgB,yCACV,wDAKU,+CAA+B,sBAA/B,CAA+B,iCDN/C,iBAWI,aALgB,KAAAiX,IAAc,GAEd,KAAAC,UAAoB,EACnB,KAAAC,YAAc,IAAI,EAAAjE,a,wCAJ1BnT,I,iCAAAA,EAAsB,6UCRnC,8B,KAAwB,8C,kHDGxB,GAKa,EAAAA,0B,kFERb,W,GAGA,O,sDCyBc,gCAAqF,YAAmB,kB,uBAA5C,wCAAyB,6C,yBAiBrF,gCAA+F,YAAQ,kB,uBAAvB,mCAAe,uC,mDATvG,4BACE,4BACE,4BACE,8BAAgB,YAAkC,iBACpD,iBACA,6BACE,gCACE,4FACA,wBACA,kCACF,iBACF,iBACF,iBACF,iB,8CAVsB,2DAGR,wEAA4E,mBAA5E,CAA4E,uBAG1E,qF,8FAQhB,4BACE,4BACE,4BACE,8BACE,6BACF,iBACF,iBACA,6BACE,6BACE,6BAAK,6IAGH,sBACF,iBACF,iBAEF,iBACF,iBACF,iB,gCARU,0F,yBAmBF,gCAAmF,YAAQ,kB,uBAAvB,mCAAe,uC,yBAanF,gCAAmF,YAAQ,kB,uBAAvB,mCAAe,uC,mDARzF,4BACE,4BACE,8BAAgB,6BAA6D,iBAC/E,iBACA,6BACE,gCACE,+HACA,wBACA,kCACF,iBACF,iBACF,iB,iCALM,4EAAgD,eAExC,8E,mDAtBhB,4BACE,4BACE,4BACE,8BAAgB,6BAA6C,iBAC/D,iBACA,6BACE,gCACE,mIACA,wBACA,kCACF,iBACF,iBACF,iBAEA,+BAYF,iB,gCAnBQ,iFAAqD,eAE7C,6EAKT,wI,qBA+CG,6B,qBACA,6BDlIhB,iBAWI,aAHU,KAAAsb,oBAAsB,IAAI,EAAAnI,aAC1B,KAAAoI,YAAc,IAAI,EAAApI,a,OAK5B,YAAAqI,OAAA,WACIhZ,KAAK8Y,oBAAoBtC,KAAMxW,KAAKqH,eACpCrH,KAAK+Y,YAAYvC,KAAM,SAG3B,YAAAjC,SAAA,WACIvU,KAAK+Y,YAAYvC,KAAM,W,iCAflBja,I,iCAAAA,EAAuB,s2C,GAAA,MCVpC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBAQE,+BAEE,4BACE,4BACE,6BACE,+BACE,8BACF,iBACF,iBACA,8BACE,iCAA6C,gFAC3C,yBACA,mCACF,iBACF,iBACF,iBACF,iBAEA,qBAEA,gCAeA,qBAEA,gCAoBA,iCAsDA,6BACE,6BACE,8BACE,iCAAsB,wCAAS,EAAAgY,cAC3B,8BACJ,iBACA,iCAAsB,wCAAS,EAAAyE,YAC3B,qCACA,qCACJ,iBACF,iBACF,iBACF,iBACF,iBAEJ,kB,4BApHyD,kEAEnC,mEAQQ,uEAiBnB,kEAoBA,+DA4DgF,kDACjE,gEACA,iE,kRDlI1B,GAKa,EAAAzc,2B,kFEVb,W,GAEA,OAEA,O,+DCmBkB,gCAAgF,YAAQ,kB,uBAAvB,wBAAe,uC,sBAWnF,gCAA0D,6BAA6C,kB,sBACvG,gCAA2H,6BAA8C,kB,mDAvBlL,6BACE,4BACE,6BACE,6BAA2B,4BAAQ,YAAmB,iBAAQ,iBAC9D,6BACE,6BACE,4BAAO,6BAAyD,iBAClE,iBACA,8BACE,iCAA4B,4FAC1B,4BACA,mCACF,iBACF,iBACA,8BACE,6BAAO,8BAAgE,iBACzE,iBACA,8BACE,iCAA0D,mGAC3D,yBACA,iCAAoB,8BAAwC,iBAC5D,iCAAqB,8BAAyC,iBAC9D,mCACA,mCACF,iBACC,iBACF,iBACF,iBACF,iBACF,iB,wDA1ByC,qDAMH,gDAA6B,sBAE/C,6EAOF,uDAA6B,0BAA7B,CAA6B,0CAI9B,+DACA,6HD7BvB,iBAYI,WAAqBwV,GAAA,KAAAA,UAHX,KAAA+G,oBAAsB,IAAI,EAAAnI,aAC1B,KAAAoI,YAAc,IAAI,EAAApI,a,OAI5B,YAAAE,SAAA,sBACI7Q,KAAK+R,QAAQpK,iBAAkB3H,KAAKqH,cAAc5D,KAAKtB,KAAMnC,KAAKqH,cAAc1D,WAAY2O,MAAM,SAAA2G,GAC9F,EAAK5R,cAAc4R,UAAYA,MAIvC,YAAAD,OAAA,WAEIhZ,KAAK8Y,oBAAoBtC,KAAMxW,KAAKqH,eACpCrH,KAAK+Y,YAAYvC,KAAM,SAG3B,YAAA0C,OAAA,WACIlZ,KAAK+Y,YAAYvC,KAAM,SAG3B,YAAAjC,SAAA,WACIvU,KAAK+Y,YAAYvC,KAAM,W,iCAzBlBha,GAAqB,mC,iCAArBA,EAAqB,uzC,GAAA,MCZlC,6BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,4BACE,kCAEE,+BA+BA,6BACE,6BACE,8BACE,iCAAsB,wCAAS,EAAA0c,YAC3B,8BACJ,iBACA,iCAAmB,wCAAS,EAAA3E,cACxB,8BACJ,iBACA,iCAAsB,wCAAS,EAAAyE,YAC3B,8BACJ,iBACF,iBACF,iBACF,iBAEF,iBACF,iBACF,kB,4BAjD8B,iEAwC6D,oD,wQD9C3F,GAMa,EAAAxc,yB,kFEZb,WAEA,GADA,OACA,Q,6DCQI,4BACE,6BACE,6BACF,iBACF,kB,yBACA,4BACE,6BAAgC,YAAW,iBAC7C,kB,6BADkC,+C,mDAyBhC,0BACE,0CAAkF,kGAAgC,iBACpH,iB,wDADoB,yCAAmB,gCAAnB,CAAmB,Y,qBAW/B,6B,qBACA,6BDlDd,iBAYI,aAHU,KAAAuc,YAAc,IAAI,EAAApI,aAC5B,KAAAC,QAAkB,K,OAIlB,YAAAC,SAAA,aAGA,YAAAsI,YAAA,WACI,IAAM,IAAIlP,EAAI,EAAGA,EAAIjK,KAAKqH,cAAc+R,iBAAiBzS,OAAQsD,IAE7D,IAAMjK,KAAKqH,cAAc+R,iBAAiBnP,GAAGoP,SACzC,OAAO,EAIf,OAAO,GAGX,YAAAC,YAAA,SAAa3G,GACL3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,IAGxD,YAAAqG,OAAA,WAC0C,MAAjChZ,KAAKqH,cAAckS,aACpBvZ,KAAKqH,cAAckS,WAAa,IAGpC,IAAM,IAAItP,EAAI,EAAGA,EAAIjK,KAAKqH,cAAc+R,iBAAiBzS,OAAQsD,IAAM,CACnE,IAAMuP,EAAUxZ,KAAKqH,cAAc+R,iBAAiBnP,GAEpD,GAAKuP,EAAQH,UAAmC,oBAAvBG,EAAQjL,OAAOkL,KAA6B,CACjE,IACMC,EAAY,CAAEvX,KAAM,aAAc0E,MADN,MAAlB2S,EAAQ9V,OAAiB8V,EAAQ9V,OAAS,IAAM8V,EAAQvR,MAAQuR,EAAQvR,OAGxFjI,KAAKqH,cAAckS,WAAWrQ,KAAMwQ,IAK5C1Z,KAAK+Y,YAAYvC,KAAM,SAG3B,YAAAjC,SAAA,WACIvU,KAAK+Y,YAAYvC,KAAM,W,iCA/ClB/Z,I,iCAAAA,EAA4B,q6BCVzC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,0BACE,8BAKA,8BAGA,kCACE,6BACE,6BACE,6BACE,6BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACF,iBACA,gCAGA,6BACE,8BACE,iCAAsB,wCAAS,EAAA8X,cAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,wCAAS,EAAAyE,YAC7B,4BACE,qCACA,qCACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MAnDS,oDAKA,oDA0BE,yEAU8E,wDAEjE,uEACA,yE,mKDlDxB,GAMa,EAAAvc,gC,kFEVb,W,GACA,O,4DCSI,4BACE,6BACE,6BACF,iBACF,kB,yBACA,4BACE,6BAAgC,YAAW,iBAC7C,kB,6BADkC,+C,mDAyBhC,0BACE,sCAA8E,kGAAgC,iBAChH,iB,wDADgB,yCAAmB,gCAAnB,CAAmB,YDvCzC,iBAYI,aAHU,KAAAsc,YAAc,IAAI,EAAApI,aAC5B,KAAAC,QAAkB,K,OAIlB,YAAAC,SAAA,aAGA,YAAAsI,YAAA,WACI,IAAM,IAAIlP,EAAI,EAAGA,EAAIjK,KAAKqH,cAAcsS,aAAahT,OAAQsD,IAEzD,IAAMjK,KAAKqH,cAAcsS,aAAa1P,GAAGoP,SACrC,OAAO,EAIf,OAAO,GAGX,YAAAL,OAAA,WAC0C,MAAjChZ,KAAKqH,cAAckS,aACpBvZ,KAAKqH,cAAckS,WAAa,IAGpC,IAAM,IAAItP,EAAI,EAAGA,EAAIjK,KAAKqH,cAAcsS,aAAahT,OAAQsD,IAAM,CAC/D,IAAMuP,EAAUxZ,KAAKqH,cAAcsS,aAAa1P,GAEhD,GAAKuP,EAAQH,UAAmC,UAAvBG,EAAQjL,OAAOkL,KAAmB,CACvD,IAAMC,EAAY,CAAEvX,KAAMqX,EAAQI,cAAe/S,MAAO2S,EAAQvR,OAEhEjI,KAAKqH,cAAckS,WAAWrQ,KAAMwQ,IAI5C1Z,KAAK+Y,YAAYvC,KAAM,SAG3B,YAAAjC,SAAA,WACIvU,KAAK+Y,YAAYvC,KAAM,W,iCAzClB7Z,I,iCAAAA,EAAwB,80BCTrC,0BACE,4BACE,yBACE,4BACF,iBACA,0BACE,4BACF,iBACF,iBACA,4BACE,8BAKA,8BAGA,kCACE,6BACE,6BACE,6BACE,6BACF,iBACF,iBACA,8BACE,6BACE,8BACF,iBACF,iBACA,6BACE,6BACE,8BACF,iBACF,iBACA,8BACE,6BACE,8BACF,iBACF,iBACF,iBACA,gCAGA,6BACE,8BACE,iCAAsB,wCAAS,EAAA4X,cAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,wCAAS,EAAAyE,YAC7B,4BACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MAlDS,oDAKA,oDA0BE,qEAU8E,0D,+JDhDzF,GAMa,EAAArc,4B,kFETb,WAKA,GAFA,OAEA,QACA,SAEA,S,oFAKA,aA8DI,WAAqBoY,GAAA,KAAAA,kBA1CX,KAAA8E,eAAiB,IAAI,EAAAlJ,aA2BtB,KAAA8E,UAAoB,EAKnB,KAAAqE,YAAc,IAAI,EAAAnJ,a,OAc5B,YAAAE,SAAA,aAGA,YAAAC,gBAAA,sBACIiJ,YAAW,WAILC,EAAkBC,YAAc,gGAElC,EAAKC,OAAOC,cAAcjX,GAAKkX,KAAKC,MAAuB,OAAhBD,KAAKE,UAA0B,IAE1E,EAAKC,IAAM,IAAI,EAAAC,IAAK,CAChBC,UAAW,EAAKP,OAAOC,cAAcjX,GACrC2O,MAAO,sCACP6I,KAAM,EACNC,OAAQ,CAAC,WAAY,aAGzB,EAAKJ,IAAIK,GAAI,QAAQ,WACjB,EAAKC,aAGT,EAAKN,IAAIK,GAAI,eAAe,WACxB,EAAKE,mBAET,EAAKP,IAAIK,GAAI,eAAe,WACxB,EAAKE,mBAET,EAAKP,IAAIK,GAAI,eAAe,WACxB,EAAKE,qBAMV,KAGP,YAAA9J,YAAA,SAAayF,IACJA,EAAqB,aAAKA,EAAsB,eACjDzW,KAAK4W,UAIN,YAAAA,OAAP,WACqB,MAAZ5W,KAAKua,MACNva,KAAK+a,eACL/a,KAAKgb,cAIb,YAAA/J,YAAA,WACIjR,KAAKua,IAAI7K,UAGb,YAAAmJ,WAAA,WACI,IAAM7Y,KAAKyV,SAAW,CAClB,IAAIlE,GAAmB,EAEvB,GAA4B,MAAvBvR,KAAKib,eACuBjb,KAAKib,eAAeC,SAE1BC,SAASxU,OAAS,IACrC4K,GAAU,GAIlB,OAAOA,EAGX,OAAO,GAGH,YAAAuJ,cAAR,WACI9a,KAAK6Z,eAAerD,KAAMxW,KAAKob,aAGnC,YAAAP,QAAA,sBAEI7a,KAAKua,IAAIK,GAAI,cAAc,WACvB,EAAKI,YACL,EAAKF,mBAIT9a,KAAKgb,YAEoB,MAApBhb,KAAKqb,aAA4C,KAArBrb,KAAKqb,aAClCrb,KAAKsb,aAITtb,KAAKua,IAAIgB,WAAY,IAAI,EAAAC,mBAEnBxb,KAAKyV,SAIPzV,KAAKyb,gBAHLzb,KAAK0b,gBAMT1b,KAAK8a,iBAGT,YAAAW,cAAA,sBACIzb,KAAK2b,kBAAkBC,YAAYtF,WAAW,SAAAsB,GAC1C,EAAKkC,YAAYtD,UAGrBxW,KAAKua,IAAIgB,WAAYvb,KAAK2b,oBAG9B,YAAAD,cAAA,WAC+B,iBAAtB1b,KAAK6b,cAAyD,YAAtB7b,KAAK6b,aAC9C7b,KAAKib,eAAiB,IAAIa,EAAY,CAClCC,SAAU,CACNC,OAAO,EACPC,aAAa,EACbC,SAAS,EACTC,OAAO,EACPC,kBAAkB,EAClBC,oBAAoB,KAIA,UAAtBrc,KAAK6b,cAAkD,eAAtB7b,KAAK6b,aAC5C7b,KAAKib,eAAiB,IAAIa,EAAY,CAClCC,SAAU,CACNC,OAAO,EACPC,aAAa,EACbC,SAAS,EACTC,OAAO,EACPC,kBAAkB,EAClBC,oBAAoB,KAIA,SAAtBrc,KAAK6b,cAAiD,cAAtB7b,KAAK6b,eAC3C7b,KAAKib,eAAiB,IAAIa,EAAY,CAClCC,SAAU,CACNC,OAAO,EACPC,aAAa,EACbC,SAAS,EACTC,OAAO,EACPC,kBAAkB,EAClBC,oBAAoB,MAIhCrc,KAAKua,IAAIgB,WAAYvb,KAAKib,gBAEA,MAArBjb,KAAKsc,cACNtc,KAAKib,eAAesB,IAAKvc,KAAKsc,eAItC,YAAAE,aAAA,SAAcC,GACV,IAAIC,EAAqBD,EAAS,aAEP,iBAAtBzc,KAAK6b,cAAyD,YAAtB7b,KAAK6b,aAC9C7b,KAAKua,IAAIoC,YAAaD,EAAa,YAEP,UAAtB1c,KAAK6b,cAAkD,eAAtB7b,KAAK6b,aAC5C7b,KAAKua,IAAIoC,YAAaD,EAAa,UAEP,SAAtB1c,KAAK6b,cAAiD,cAAtB7b,KAAK6b,cAC3C7b,KAAKua,IAAIoC,YAAaD,EAAa,SAGvC1c,KAAKua,IAAIiC,aAAcE,IAG3B,YAAA3B,aAAA,WACS/a,KAAKua,IAAIqC,UAAW,kBACrB5c,KAAKwc,aAAc,OAElBxc,KAAKua,IAAIqC,UAAW,mBACrB5c,KAAKwc,aAAc,SAI3B,YAAAxB,UAAA,WAC6B,MAApBhb,KAAKqb,aAA4C,KAArBrb,KAAKqb,aAClCrb,KAAK6c,sBAAuB7c,KAAKqb,YAAa,MAAO,WAEpDrb,KAAKyV,UAAiC,MAArBzV,KAAKsc,cAA8C,KAAtBtc,KAAKsc,cACpDtc,KAAK6c,sBAAuB7c,KAAKsc,aAAc,OAAQ,YAI/D,YAAAO,sBAAA,SAAuB5G,EAAewG,EAAgBK,GAClD,IAAIJ,EAAqBD,EAAS,aAElCzc,KAAKua,IAAIwC,UAAWL,EAAY,CAC5BjZ,KAAM,UACN+C,KAAM,CACF,KAAQ,oBACR,SAAY,MAIO,iBAAtBxG,KAAK6b,cAAyD,YAAtB7b,KAAK6b,aAE9C7b,KAAKua,IAAIyC,SAAU,CACf,GAAMN,EAAa,WACnB,KAAQ,OACR,OAAUA,EACV,MAAS,CACL,aAAcI,EACd,qBAAsB,QACtB,eAAgB,MAII,UAAtB9c,KAAK6b,cAAkD,eAAtB7b,KAAK6b,aAE5C7b,KAAKua,IAAIyC,SAAU,CACf,GAAMN,EAAa,SACnB,KAAQ,SACR,OAAUA,EACV,MAAS,CACL,gBAAiB,EACjB,eAAgBI,EAChB,sBAAuB,EACvB,sBAAuB,aAIH,SAAtB9c,KAAK6b,cAAiD,cAAtB7b,KAAK6b,cAC3C7b,KAAKua,IAAIyC,SAAU,CACf,GAAMN,EAAa,QACnB,OAAUA,EACV,KAAQ,OACR,OAAU,CACN,YAAa,QACb,WAAY,SAEhB,MAAS,CACL,aAAcI,EACd,aAAc,KAKnB9c,KAAKua,IAAIqC,UAAWF,GAAeO,QAAShH,IAGvD,YAAAqF,WAAA,sBAC0B,MAAjBtb,KAAKkd,UAAqC,MAAjBld,KAAKmd,WACT,MAAjBnd,KAAKod,SACNpd,KAAK+U,gBAAgB5R,mBAAoBnD,KAAKkd,SAAUld,KAAKmd,UAAW7K,MAAM,SAAA+K,GAC1E,IAAIC,EAAS,IAAI,EAAAC,aAAc,CAACF,EAAS,GAAIA,EAAS,IAAK,CAACA,EAAS,GAAIA,EAAS,KAElF,EAAK9C,IAAIiD,UAAWF,EAAQ,CAAEG,QAAS,QACvC/K,OAAM,SAAEC,GACR,EAAKC,MAAOD,MAIhB3S,KAAK+U,gBAAgB3R,yBAA0BpD,KAAKkd,SAAUld,KAAKmd,SAAUnd,KAAKod,UAAW9K,MAAM,SAAA+K,GAC/F,IAAIC,EAAS,IAAI,EAAAC,aAAc,CAACF,EAAS,GAAIA,EAAS,IAAK,CAACA,EAAS,GAAIA,EAAS,KAElF,EAAK9C,IAAIiD,UAAWF,EAAQ,CAAEG,QAAS,QACvC/K,OAAM,SAAEC,GACR,EAAKC,MAAOD,QAM5B,YAAAyI,SAAA,WACI,GAA4B,MAAvBpb,KAAKib,eAAyB,CAC/B,IAAIyC,EAAyB1d,KAAKib,eAAeC,SAEjD,GAAKwC,EAAkBvC,SAASxU,OAAS,EAAI,CAKzC,GAA2B,iBAAtB3G,KAAK6b,aAAkC,CAGxC,IAFA,IAAI8B,EAAW,GAEL1T,EAAI,EAAGA,EAAIyT,EAAkBvC,SAASxU,OAAQsD,IAAM,CAG1D,GAA+B,kBAF3B2T,EAAUF,EAAkBvC,SAASlR,IAE5BgM,SAASxS,KAClB,IAAM,IAAIoa,EAAI,EAAGA,EAAID,EAAQ3H,SAAS6H,YAAYnX,OAAQkX,IACtDF,EAASzU,KAAM0U,EAAQ3H,SAAS6H,YAAYD,SAIhDF,EAASzU,KAAM0U,EAAQ3H,SAAS6H,aAIxC,MAAO,CACHA,YAAaH,EACbla,KAAM,gBAGT,GAA2B,eAAtBzD,KAAK6b,aAAgC,CAC3C,IAAIkC,EAAS,GAEb,IAAU9T,EAAI,EAAGA,EAAIyT,EAAkBvC,SAASxU,OAAQsD,IAAM,CAG1D,GAA+B,gBAF3B2T,EAAUF,EAAkBvC,SAASlR,IAE5BgM,SAASxS,KAClB,IAAUoa,EAAI,EAAGA,EAAID,EAAQ3H,SAAS6H,YAAYnX,OAAQkX,IACtDE,EAAO7U,KAAM0U,EAAQ3H,SAAS6H,YAAYD,SAI9CE,EAAO7U,KAAM0U,EAAQ3H,SAAS6H,aAItC,MAAO,CACHA,YAAaC,EACbta,KAAM,cAGT,GAA2B,cAAtBzD,KAAK6b,aAA+B,CAC1C,IAAImC,EAAQ,GAEZ,IAAU/T,EAAI,EAAGA,EAAIyT,EAAkBvC,SAASxU,OAAQsD,IAAM,CAC1D,IAAI2T,EAEJ,GAA+B,qBAF3BA,EAAUF,EAAkBvC,SAASlR,IAE5BgM,SAASxS,KAClB,IAAUoa,EAAI,EAAGA,EAAID,EAAQ3H,SAAS6H,YAAYnX,OAAQkX,IACtDG,EAAM9U,KAAM0U,EAAQ3H,SAAS6H,YAAYD,SAI7CG,EAAM9U,KAAM0U,EAAQ3H,SAAS6H,aAIrC,MAAO,CACHA,YAAaE,EACbva,KAAM,mBAIV,OAAOia,EAAkBvC,SAAS,GAAGlF,SAI7C,OAAOjW,KAAKsc,aAGhB,OAAOtc,KAAKsc,cAGT,YAAA1J,MAAP,SAAcD,GAEVjB,QAAQC,IAAK,QAASgB,I,iCA5ZjB7U,GAA2B,yC,iCAA3BA,EAA2B,+E,OAAA,M,qlBCvBxC,yBAEA,8C,iDDWA,GAUa,EAAAA,+B,kFEvBb,WASA,GALA,MAGA,OAEA,QAGA,SACA,S,iHCAc,6BACE,YAEA,+BACE,sIADF,iBAGF,iB,wDALE,qDAGwE,8EAAtE,4E,mDAbZ,4BACE,4BACE,4BACE,YACF,iBACF,iBACA,4BACE,4BACE,4BACE,8BAQF,iBAEA,4BACE,4BACI,8BACI,iCAA+B,2HAC3B,8BACJ,iBACJ,iBACJ,iBACF,iBACF,iBACF,iBACF,iB,0BA3BM,qDAMyD,kDDErE,iBAyBI,WAAqB+W,EAAsCE,GAAtC,KAAAF,eAAsC,KAAAE,kBAhBjD,KAAAa,MAAQ,IAAI,EAAAjF,aAEb,KAAAY,SAAmB,EAInB,KAAA3L,QAAgB,IAAI2E,KAI7B,KAAA0T,aAAsB,GAEtB,KAAAC,UAAiB,G,OAQjB,YAAArN,SAAA,WACI,IAAMsN,EAAMne,KAAK4F,QAAQwY,aAEzBpe,KAAKqe,QAAUre,KAAK4F,QAAQ0Y,iBAAmB,KAAQte,KAAK4F,QAAQ2Y,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,EAG1Hne,KAAK4F,QAAU,IAAI2E,KAAMA,KAAKC,MAAOxK,KAAKqe,UAE1Cre,KAAKmW,aAGT,YAAAnF,YAAA,SAAayF,GAEJA,EAAiB,SAClBzW,KAAKmW,aAIb,YAAAA,UAAA,sBACUpM,EAAO/J,KAAK4F,QAAQoE,UAE1BhK,KAAKuR,SAAU,EAEfvR,KAAKie,aAAe,GACpBje,KAAKM,YAAY+J,SAAS,SAAA1G,GACtB,IAAMmT,EAAS,GACfA,EAAc,MAAInT,EAAUsE,MAC5B6O,EAAa,KAAInT,EAAUxB,KAE3B,EAAKoP,QAAU,EAAKA,SAAa,EAAKjR,YAAYqG,OAAS,EAE3DhD,EAAU6a,QAAQnU,SAAS,SAAAoU,GACvB,IAAM5U,EAAYU,KAAKC,MAAOiU,EAAI5U,WAC5BC,EAAUS,KAAKC,MAAOiU,EAAI3U,SAEhC,GAAKC,GAAQF,GAAaE,GAAQD,EAAU,CACxC,IAAI,EAAU,GAEdnG,EAAUtD,MAAMgK,SAAS,SAAA5G,GACrB,IAAIC,EAAc,CACdvB,KAAMsB,EAAKtB,KACX8F,MAAOxE,EAAKwE,OAGe,MAA1BwW,EAAIC,QAAQjb,EAAKtB,QAClBuB,EAAOF,KAAOib,EAAIC,QAAQjb,EAAKtB,MAAMqB,KACrCE,EAAO0C,UAAYqY,EAAIC,QAAQjb,EAAKtB,MAAMiE,WAG9C,EAAQ8C,KAAMxF,MAGlBoT,EAAgB,QAAI,MAI5B,EAAKmH,aAAa/U,KAAM4N,MAI5B9W,KAAK4V,MAAMY,QAGR,YAAAqC,WAAP,WACI,OAAO,GAGJ,YAAA8F,eAAP,WACI,OAAO3e,KAAKM,aAGhB,YAAAse,iBAAA,SAAkBzc,GAAlB,WAEUwB,EAAY3D,KAAKM,YAAYue,MAAM,SAAAC,GAAK,OAAAA,EAAE3c,OAASA,KAEzDnC,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAjZ,mCAAoC,CAC1EkZ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBvX,KAAKiS,WAAWuF,QAAQzX,KAAM4D,GAC9B3D,KAAKiS,WAAWuF,QAAQuH,gBAAgBzI,WAAW,SAAA3S,GAC/C,EAAKwS,gBAIN,YAAAvD,MAAP,SAAcD,GACW3S,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC/DE,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAhH7DzU,GAAoB,+E,iCAApBA,EAAoB,+D,OAAA,K,i9BCnBjC,+BACE,+BACE,0BACE,+BA+BF,iBACF,iBACF,kB,MAjCwD,wD,oLDWxD,GAKa,EAAAA,wB,kFEpBb,KACA,MADA,IAKA,SAIA,GAFA,KAEA,QAGA,GADA,OACA,QAYA,GATA,OACA,MACA,MAEA,OAGA,OAEA,O,yLCL4B,gCAA2D,YAC3D,kB,uBAD2C,0BAAgB,oE,mDAwB3E,0BACI,8DAAoD,kGAAoC,kGAGxF,iBACJ,iB,gCAHQ,6DAAoC,8BAApC,CAAoC,gCAApC,CAAoC,yBDfxD,iBA4CI,WAAqB6T,EAA4B8C,EAAsCC,EAC3EC,EAA0CC,EAA2BC,EACrEhU,EAAwBkU,EAAkD8J,EAC1E/M,GAHZ,WAAqB,KAAAH,UAA4B,KAAA8C,eAAsC,KAAAC,oBAC3E,KAAAC,kBAA0C,KAAAC,QAA2B,KAAAC,uBACrE,KAAAhU,OAAwB,KAAAkU,sBAAkD,KAAA8J,kBAC1E,KAAA/M,cAjCZ,KAAAgN,eAAkC,GAMlC,KAAAC,YAAsB,GAEtB,KAAAC,OAAiB,GAWjB,KAAAhK,aAAkC,KAKlC,KAAAE,cAAmC,KAEnC,KAAA/D,SAAmB,EAEnB,KAAAwE,2BAAuC,CAAC,MAAO,WAAY,OAAQ,iBAAkB,aAAc,UAO/F/V,KAAKqf,WAAa,EAAAC,WAAWnV,QAAO,SAAEoV,GAClC,EAAKxK,gBAAgBnR,iCAAkC,EAAKub,YAAa,EAAK3V,cAAcrH,MAAOmQ,MAAM,SAAAkN,GACrGD,EAAS7R,KAAM8R,S,OAK3B,YAAA3O,SAAA,sBACI7Q,KAAK+U,gBAAgB3U,kBAAmB,GAAI,MAAOkS,MAAM,SAAAjS,GAGrD,IADA,IAAIkS,EAAa,GACRtI,EAAI,EAAGA,EAAI5J,EAAMsG,SAAUsD,EAE9B,EAAKiI,YAAYuN,kBAAkBpf,EAAM4J,GAAGyV,iBAAkBrf,EAAM4J,GAAG9H,OAEzEoQ,EAAWrJ,KAAK7I,EAAM4J,IAG1B,EAAKiV,eAAiB3M,EAEtB,EAAK2M,eAAexY,MAAK,SAAEiZ,EAAGC,GAC1B,OAAKD,EAAE1X,MAAM4X,eAAeC,cAAgBF,EAAE3X,MAAM4X,eAAeC,eAAwB,EACjFH,EAAE1X,MAAM4X,eAAeC,cAAgBF,EAAE3X,MAAM4X,eAAeC,cAAuB,EACnF,KAGhB,IAAIC,EAAM,EAAKC,yBAA0B,QACpCD,GACD,EAAKb,eAAee,OAAQF,EAAK,MAKrCrN,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAOZ,YAAAmI,cAAR,SAAuBoF,GACO,MAArBlgB,KAAKoV,eAKkB,MAAvBpV,KAAK2W,gBAA2B3W,KAAK2W,eAAekC,gBAK5B,MAAxB7Y,KAAKmgB,iBAA4BngB,KAAKmgB,gBAAgBtH,cAK3D7Y,KAAKuR,SAAU,EAdXvR,KAAKuR,SAAU,GAiBf,YAAAyO,yBAAR,SAAkC7d,GAC9B,IAAM,IAAI8H,EAAI,EAAGA,EAAIjK,KAAKkf,eAAevY,OAAQsD,IAAM,CAEnD,GADUjK,KAAKkf,eAAejV,GACrB9H,OAASA,EACd,OAAO8H,EAIf,OAAO,MAGX,YAAAmW,uBAAA,SAAwBlJ,GACpBlX,KAAKqgB,iBAAmBnJ,GAG5B,YAAAoJ,kBAAA,SAAmBpJ,GAAnB,WACIlX,KAAK+U,gBAAgB5P,qBAAsB+R,EAAEqJ,KAAKpe,KAAMnC,KAAKwJ,cAAcrH,MAAOmQ,MAAM,SAAAlM,GAChF,EAAKgP,aAAehP,EACpB,EAAKkP,cAAgB5U,KAAK8J,MAAO9J,KAAKC,UAAW,EAAKyU,kBAEtD1C,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIxB,YAAA6N,OAAA,sBAEQC,EAA8BzgB,KAAKmgB,gBAAgBld,eAEvD,GAA4B,MAAvBjD,KAAK2W,eACgC3W,KAAK2W,eAAeyE,WAI9D,IAAInM,EAAU,CAAC,CACX,WAAc,mBACd,WAAc,eACd,kBAAoB,IAAI1E,MAAOP,UAC/B,UAAayW,EACb,iBAAoBzgB,KAAKof,SAG7Bpf,KAAKiV,qBAAqB9F,oBAAqBzO,KAAKC,UAAWsO,IAC1DqD,MAAM,SAAAlM,GACH,EAAKsa,SAEL,EAAKzO,WAAa,EAAK4C,aAAauC,KAAM,EAAAuJ,sBAAuB,CAAErJ,UAAU,IAC7E,EAAKrF,WAAWuF,QAAQ5G,QAAU,EAAKqO,gBAAgB2B,OAAQ,qCAE/DlO,OAAM,SAAEC,GACR,EAAKC,MAAOD,MAGpB3S,KAAKuR,SAAU,GAGnB,YAAAmP,OAAA,WACI1gB,KAAKuR,SAAU,EACfvR,KAAKoV,aAAe,KACpBpV,KAAKsV,cAAgB,KACrBtV,KAAKmf,YAAc,KACnBnf,KAAKwJ,cAAgB,KACrBxJ,KAAKof,OAAS,MAGX,YAAAxM,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA3KlEhV,GAA4B,gY,iCAA5BA,EAA4B,8D,OAAA,M,w4CCjCzC,6BAEA,+BACI,+BACI,4BAEI,4BACI,4BACI,4BACI,4BACJ,iBACJ,iBACA,4BACI,8BACI,gCACI,sEAEA,kCAEJ,iBACJ,iBACJ,iBACJ,iBAEA,8BACI,6BACI,6BACI,8BACJ,iBACJ,iBACA,6BACI,8BACI,gCAAmB,oEAAyB,wCAEnB,EAAA2iB,kBAAA,MAFzB,iBAKJ,iBACJ,iBACJ,iBAEA,gCAOA,8BACI,6BACI,6BACI,8BACJ,iBACJ,iBACA,6BACI,8BACI,mCAA6B,+DAAkD,iBACnF,iBACJ,iBACJ,iBAEA,6BACI,wBAEA,6BACI,8BACI,iCAA8C,wCAAS,EAAAI,YACnD,8BACJ,iBACA,iCAA8C,wCAAS,EAAAF,YACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBACJ,kB,4BA/D4B,wDAEQ,wDAeO,qDAAyB,4BAAzB,CAAyB,oBAAzB,CAAyB,yBAAzB,CAAyB,2BASnD,mDAeoC,gDAaoC,mD,oXDzCzF,GAKa,EAAA7iB,gC,kFEnCb,KACA,MACA,MAFA,IAGA,OAGA,SACA,SAMA,GAJA,OACA,MAGA,QAGA,Q,GAGA,M,iJCNgB,6BACE,6BACF,kB,mDAsBR,8DAGI,gGAOJ,iB,gCANI,8CAAoC,iCAApC,CAAoC,mCAApC,CAAoC,oBAApC,CAAoC,yBAApC,CAAoC,8C,mDAUxC,0BACE,mDAC2B,gGAG3B,iBACF,iB,gCAJI,iDAAwB,oBAAxB,CAAwB,8B,sBAqBpB,2BAAwC,kCAAmB,kB,mDALnE,6BACI,6BAA0B,4BAAO,6BAAyE,iBAAQ,iBAClH,6BACE,kCAAiG,iGAA0C,iBAC3I,6BACE,6BACF,iBACF,iBACJ,iB,gCALuG,+CAE5F,8C,2HDpDnB,aAkFI,WAAqBkX,EAAqC5C,EAC9C8C,EAA0CkK,EAClD/M,GAFiB,KAAA2C,eAAqC,KAAA5C,aAC9C,KAAA8C,kBAA0C,KAAAkK,kBApEtD,KAAA1N,SAAmB,EAInB,KAAAsP,SAAmB,EAOnB,KAAAnJ,gBAA0B,EAI1B,KAAAoJ,eAA2B,KAW3B,KAAAC,oBAA8B,EAoB9B,KAAAC,iBAA2B,EAO3B,KAAA3C,QAAkB,KAKlB,KAAAzY,QAAgB,KAEhB,KAAA8P,qBAA+B,EAW3B1V,KAAKihB,QAAU/O,EAAY+O,UAC3BjhB,KAAKkhB,aAAelhB,KAAKihB,SAAW/O,EAAYgP,eAChDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBhP,EAAYkP,gBAEtEphB,KAAK4F,QAAU,IAAI2E,KAEnB,IAAM4T,EAAMne,KAAK4F,QAAQwY,aACzBpe,KAAKqe,QAAUre,KAAK4F,QAAQ0Y,iBAAmB,KAAQte,KAAK4F,QAAQ2Y,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,E,OAG9H,YAAAtN,SAAA,aAIA,YAAAwQ,qBAAA,SAAsBC,EAAUzX,GAC9B,IAAK,IAAII,EAAY,EAAGA,EAAIqX,EAAS3a,SAAUsD,EAE7C,GAAIqX,EAASrX,GAAGJ,YAAcA,EAE5B,OAAOyX,EAASrX,GAIpB,OAAO,MAGT,YAAAsX,gBAAA,SAAiBre,GACblD,KAAKsG,aAAepD,GAGxB,YAAAse,iBAAA,WACIxhB,KAAK4F,QAAU,IAAI2E,KAAMA,KAAKC,MAAOxK,KAAKqe,WAG9C,YAAAoD,qBAAA,SAAsBC,GAClB1hB,KAAK2hB,kBAAoBD,GAKtB,YAAAE,eAAP,SAAuBrgB,EAAkB8c,EAAiBwD,GAA1D,WACI7hB,KAAK0X,gBAAiB,EACtB1X,KAAKqe,QAAUA,EACfre,KAAK4F,QAAU,IAAI2E,KAAMA,KAAKC,MAAOxK,KAAKqe,UAC1Cre,KAAK6hB,mBAAqBA,EAE1B7hB,KAAK8hB,mBAAoBvgB,GACzBvB,KAAK+hB,eAEL/hB,KAAK+U,gBAAgBzP,qBAAsB/D,GAAW+Q,MAAM,SAAA0P,GACxD,EAAKC,gBAAkB,IAAI,EAAAtX,kBAAkB,EAAKnB,cAAewY,EAAQ5b,UAAUiD,YACnF,EAAK6Y,iBAAmB,IAAI,EAAAvX,kBAAkB,EAAKnB,cAAe9I,KAAK8J,MAAO9J,KAAKC,UAAW,EAAKshB,kBAAoB5Y,YAEvH,EAAK/I,YAAc0hB,EAAQ1hB,gBAK5B,YAAA6hB,yBAAP,SAAiCC,EAA0B/d,EAAmBga,EAAiBwD,GAA/F,WACQtgB,EAAW6gB,EAAYtL,OAAO1Q,UAAUiD,WAAW5F,KACvDzD,KAAK0X,eAAiB0K,EAAYtL,OAAOzQ,MACzCrG,KAAKqe,QAAUA,EACfre,KAAK4F,QAAU,IAAI2E,KAAMA,KAAKC,MAAO6T,IACrCre,KAAK6hB,mBAAqBA,EAE1B7hB,KAAK8hB,mBAAoBvgB,GACzBvB,KAAK+hB,eAEqB,MAAtBK,EAAYtL,QAAgD,MAA9BsL,EAAYtL,OAAO4H,SAAmB0D,EAAYtL,OAAO4H,QAAQ/X,OAAS,GAE1G3G,KAAKM,YAAc8hB,EAAYtL,OAAO4H,QACtC1e,KAAKghB,iBAAkB,IAIvBhhB,KAAK+U,gBAAgBzP,qBAAsB/D,GAAW+Q,MAAM,SAAA0P,GAC1D,EAAK1hB,YAAc0hB,EAAQ1hB,eAE7BN,KAAKghB,iBAAkB,GAIzBhhB,KAAKiiB,gBAAkB,IAAI,EAAAtX,kBAAkB3K,KAAKwJ,cAAe4Y,EAAYtL,OAAO1Q,UAAUiD,YAC9FrJ,KAAKkiB,iBAAmB,IAAI,EAAAvX,kBAAkB3K,KAAKwJ,cAAe4Y,EAAYtL,OAAO1Q,UAAUiD,YAE/FrJ,KAAK8gB,eAAiB,WACpB,IAAIpc,EAAS,CACXL,UAAYA,EACZge,cAAeD,EAAYlf,GAC3Bof,WAAY,mBACZnc,eAAgB,EAAK7F,YACrB8F,UAAW,EAAKqa,SAChBpa,MAAO+b,EAAYtL,OAAOzQ,OAG5B,EAAK0O,gBAAgBpQ,mBAAoBD,GACtC4N,MAAK,WAE2B,MAA1B,EAAKqP,mBACN,EAAKA,uBAGPjP,OAAM,SAAEC,GACV,EAAKC,MAAOD,QAMf,YAAA4P,oBAAP,SAA4BpgB,EAAcZ,EAAkB8c,EAAiBwD,GACzE7hB,KAAK0X,gBAAiB,EACtB1X,KAAKqe,QAAUA,EACfre,KAAK4F,QAAU,IAAI2E,KAAMA,KAAKC,MAAOxK,KAAKqe,UAC1Cre,KAAK6hB,mBAAqBA,EAE1B7hB,KAAKwiB,eAAgBrgB,EAAMZ,GAC3BvB,KAAK8hB,mBAAoBvgB,GACzBvB,KAAKyiB,iBAAkBtgB,EAAMZ,GAC7BvB,KAAK+hB,gBAGD,YAAAS,eAAR,SAAwBrgB,EAAcZ,GAAtC,WACIvB,KAAK+U,gBAAgB5P,qBAAsBhD,EAAMZ,GAAW+Q,MAAM,SAAAlM,GAC9D,EAAK6b,gBAAkB,IAAI,EAAAtX,kBAAkB,EAAKnB,cAAe9I,KAAK8J,MAAO9J,KAAKC,UAAWyF,IAAciD,YAC3G,EAAK6Y,iBAAmB,IAAI,EAAAvX,kBAAkB,EAAKnB,cAAe9I,KAAK8J,MAAO9J,KAAKC,UAAW,EAAKshB,kBAAoB5Y,YAGvH,EAAKoX,SAAW,EAAKyB,iBAGrB,EAAKnB,oBAAqB,EAC1B,EAAKxP,SAAU,KACfmB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIZ,YAAAoP,aAAR,sBACI/hB,KAAK+U,gBAAgB7P,aAAaoN,MAAM,SAAAoQ,GACpC,EAAKzD,gBAAgB0D,WAAYD,MACjChQ,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIZ,YAAAmP,mBAAR,SAA4B3f,GAA5B,WACInC,KAAK+U,gBAAgB3U,kBAAmB,CAAC+B,GAAO,MAC3CmQ,MAAM,SAAA9I,GACH,EAAKA,cAAgBA,EAAc,GAEP,MAAxB,EAAKyY,kBAEP,EAAKA,gBAAgBzY,cAAgB,EAAKA,eAEf,MAAzB,EAAK0Y,mBAEP,EAAKA,iBAAiB1Y,cAAgB,EAAKA,eAGvC,EAAKA,cAAcqY,sBAIzBnP,OAAM,SAAEC,GACRjB,QAAQC,IAAKgB,OAKjB,YAAA8P,iBAAR,SAA0BtgB,EAAcygB,GAAxC,WACI5iB,KAAK+U,gBAAgBzR,2BAA4BnB,EAAMygB,GAClDtQ,MAAK,SAAEhS,GACJ,EAAKA,YAAcA,EAGnB,EAAK0gB,iBAAkB,KAEvBtO,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIxB,YAAAkQ,uBAAA,SAAwBrf,EAAMjC,GAA9B,WACI,OAAO,EAAA+d,WAAWnV,QAAO,SAAEoV,GACvB,EAAKxK,gBAAgBnR,iCAAkCJ,EAAMjC,GAAW+Q,MAAM,SAAAkN,GAC1ED,EAAS7R,KAAM8R,UAK3B,YAAAc,kBAAA,SAAmBpJ,EAAmB4L,GAAtC,WACI9iB,KAAK+U,gBAAgB1R,mBAAoB6T,EAAEqJ,KAAKpe,KAAM2gB,EAAI1c,UAAU2c,WAAWtf,MAC1E6O,MAAM,SAAAlM,GAEH0c,EAAI1c,UAAYA,KAEhBsM,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIhB,YAAAmI,cAAR,WACiC,MAAxB9a,KAAKmgB,kBACNngB,KAAK+gB,mBAAqB/gB,KAAKmgB,gBAAgBtH,cAKvB,MAAvB7Y,KAAKgjB,iBACNhjB,KAAKghB,gBAAkBhhB,KAAKgjB,eAAenK,cAI/C7Y,KAAKuR,QAAUvR,KAAK+gB,oBAAsB/gB,KAAKghB,iBAGnD,YAAAiC,WAAA,SAAYC,EAAkBC,QAAA,IAAAA,OAAA,IACrBD,IAAaljB,KAAK6gB,UAAasC,KAKpCnjB,KAAKojB,sBAELpjB,KAAK6gB,SAAWqC,EAEhBljB,KAAK8a,gBAIH9a,KAAK0V,oBAFU,IAAbwN,IAUA,YAAAE,oBAAR,WACiC,MAAxBpjB,KAAKmgB,kBACRngB,KAAKkiB,iBAAmBliB,KAAKmgB,gBAAgBld,gBAEnB,MAAvBjD,KAAKgjB,iBACRhjB,KAAKM,YAAcN,KAAKgjB,eAAerE,kBAGzC3e,KAAKygB,SAAWzgB,KAAKkiB,kBAOlB,YAAAtP,MAAP,SAAcD,GACR3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,IAGlE,YAAA+N,OAAP,WACE1gB,KAAKiS,WAAWqC,QAGX,YAAAkM,OAAP,sBACOxgB,KAAKuR,UACRvR,KAAKiS,WAAWqC,OAEhBtU,KAAKojB,sBAEsB,MAAvBpjB,KAAK8gB,eAEP9gB,KAAK+U,gBAAgB7O,mBAAoBlG,KAAKM,YAAaN,KAAKygB,SAAUzgB,KAAK0X,eAAgB1X,KAAKsG,aAActG,KAAKuG,OACpH+L,MAAK,WAE2B,MAA1B,EAAKqP,mBACN,EAAKA,uBAGPjP,OAAM,SAAEC,GACV,EAAKC,MAAOD,MAKhB3S,KAAK8gB,mB,iCAtWFljB,GAAwB,+L,iCAAxBA,EAAwB,yD,OAAA,M,+RAPtB,CAAC,EAAApD,YAAS,umD,GAAA,MC1BzB,4BAEI,+BAQI,4BACI,4BAEI,8BAGJ,iBACJ,iBACA,4BAEI,4BACI,4BACI,8BAAqF,wCAAS,aAAgB,MAC1G,6BACJ,iBACA,+BAA8G,wCAAS,aAAgB,MACnI,6BACJ,iBACA,+BAAoH,8DAA+B,aAAgB,MAC/J,8BACJ,iBACJ,iBACJ,iBACJ,iBAIA,8DAcA,gCAkBA,gCAUC,8BACG,8BAA0B,6BAAO,8BAAkD,iBAAQ,iBAC3F,8BACI,gCAAuC,gEAAqB,4BAAW,EAAAgnB,sBAAvE,iBACJ,iBACJ,iBAEA,6BAEI,6BACI,8BACI,iCAA8C,wCAAS,EAAAd,YACnD,8BACJ,iBACA,iCAA8C,wCAAS,EAAAF,YACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,4BAvFqB,uDAS0C,8EAGA,iGAGA,oGAUnD,6HAaC,wEAkBA,oDAa0C,iDAW8B,8DACnD,sG,ixCDxElC,GAWa,EAAA5iB,4B,kFEjCb,KACA,MAEA,OAHA,I,uGCEQ,2BAGI,YACJ,kB,uBAFI,6GACA,sD,yBAJR,2BACI,6BAKJ,kB,6BAJQ,4DDGZ,iBAgBI,WAAqBqhB,GAAA,KAAAA,kBAEjBjf,KAAKqjB,YAAc,CAAC,MAAS,I,OAXjC,sBACI,oBAAK,C,IADT,SACUxc,GACN7G,KAAKqjB,YAAcxc,G,gCAavB,YAAAgK,SAAA,aAGA,YAAAI,YAAA,a,iCApBSvW,GAAsB,6C,iCAAtBA,EAAsB,iRCXnC,4BACI,6BAOJ,kB,MAPQ,uG,ioDDKR,GAKa,EAAAA,0B,kFEQb,SACA,QAGA,Q,GAIA,M,sBAKA,aAGI,WAAqBmF,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAE/C,YAAAwjB,WAAA,SAAYC,EAAiBzf,EAAkB0f,GAC7C,IAAIjjB,EAAqB,IAAI,EAAAC,WAO7B,OAFAD,GADAA,GADAA,GADAA,EAASA,EAAOE,IAAK,UAAW,eAChBA,IAAK,UAAW8iB,EAAQrf,aACxBzD,IAAK,WAAYqD,EAASI,aAC1BzD,IAAK,cAAe+iB,GAE7BxjB,KAAKH,KACPI,IAAUC,IAAM,aAAc,CAAEK,OAAQA,IACxCJ,aAGP,YAAAsjB,aAAA,SAAcC,GAAd,WACMliB,EAAU,IAAI,EAAAC,YAAa,CAC7B,eAAgB,qBAKlB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACT8B,KAAWzB,IAAM,kBAAmBQ,KAAKC,UAAW,CAAE,GAAM+iB,IAAY,CAAEliB,QAASA,IACxFI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAEb3B,aAGL,YAAAwjB,cAAA,SAAeD,EAAgBE,GAA/B,WACMpiB,EAAU,IAAI,EAAAC,YAAa,CAC7B,eAAgB,qBAKlB,OAFAzB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACT8B,KAAWzB,IAAM,uBAAwBQ,KAAKC,UAAW,CAAE,GAAM+iB,EAAQ,OAAUE,IAAY,CAAEpiB,QAASA,IAC/GI,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAEb3B,a,iCA5CI5F,GAAW,sD,oCAAXA,EAAW,QAAXA,EAAW,O,EADxB,GACa,EAAAA,e,kFCjCb,SACA,QACA,QACA,S,GAGA,M,sBAKA,aAGC,WAAoBsF,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,eAC5Cka,EAAiBC,YAAc,gG,OAGjC,YAAA4J,MAAA,SAAMtiB,EAAkBqG,EAAuB3G,GAA/C,WAEKV,EAAqB,IAAI,EAAAC,WAgB7B,OAdgB,MAAZe,IACHhB,EAASA,EAAOE,IAAI,WAAYc,IAGZ,MAAjBqG,IACHrH,EAASA,EAAOE,IAAI,gBAAiBmH,IAG1B,MAAR3G,IACHV,EAASA,EAAOE,IAAI,OAAQQ,IAG7BjB,KAAKF,aAAa4B,QAEX1B,KAAKH,KACVI,IAAyBC,IAAM,0BAA2B,CAAEK,OAAQA,IACpEqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,aAGH,YAAA2jB,OAAA,SAAO3hB,EAAcZ,EAAkBT,EAAuB8G,EAAuB3G,GAArF,WACKV,EAAqB,IAAI,EAAAC,WAkB7B,OAhBAD,GADAA,EAASA,EAAOE,IAAI,OAAQ0B,IACZ1B,IAAI,WAAYc,GAEpB,MAARN,IACHV,EAASA,EAAOE,IAAI,OAAQQ,IAGR,MAAjBH,IACHP,EAASA,EAAOE,IAAI,gBAAiBK,IAGjB,MAAjB8G,IACHrH,EAASA,EAAOE,IAAI,gBAAiBmH,IAGtC5H,KAAKF,aAAa4B,QAEX1B,KAAKH,KACVI,IAAyBC,IAAM,2BAA4B,CAAEK,OAAQA,IACrEqB,KAAK,EAAAC,UAAS,WACd,EAAK/B,aAAagC,eAElB3B,a,iCAxDSnG,GAAU,sD,oCAAVA,EAAU,QAAVA,EAAU,O,EADvB,GACa,EAAAA,c,kFCZb,SAIA,SAKA,GAJA,MAEA,OAEA,QACA,SACA,SACA,SACA,SACA,SAOA,GALA,MACA,MAIA,QAIA,GAFA,OACA,OACA,Q,+JCT0C,sB,mDAG5B,2BAAkG,0I,uBAAkF,iB,KAA9C,kE,mDADxI,2BACE,6BACA,2BAA6C,sIAAmC,M,uBAAoD,iBACtI,iB,8DAFyD,sEACiC,gF,mDAG1F,2BACE,2BAA0C,sIAAmC,M,uBAAoD,iBACnI,iB,MADsF,gF,yBATxF,4BACE,YAA8B,6BAE9B,gCAKA,gCAGF,kB,2CAVE,oEAAiC,sDAE3B,2EAKA,6E,mDAOR,gCAA6D,sGAAgC,6BAA8D,kB,mDAcvJ,2BAAuG,0I,uBAAuF,iB,KAA9C,kE,mDADlJ,2BACE,6BACA,2BAA6C,oIAAsC,M,uBAAqD,iBAC1I,iB,8DAFK,sEACwF,gF,mDAG7F,2BACE,2BAA0C,oIAAsC,M,uBAAoD,iBACtI,iB,MADyF,gF,uFAT3F,4BAAuH,yHACrH,sBAA8B,YAE9B,gCAKA,gCAGF,iB,8CAX6E,6DAC7C,oEAExB,2EAKA,6E,mDAOR,gCAA6D,kGAA4B,6BAA8D,kB,yBAOrJ,2BAAgC,YAAyC,kB,6BAAzC,qF,yBAGpC,6BACE,8BACF,kB,6BADa,6CAAe,sB,mDAIxB,gCAA6D,8GAAuC,6BAAyE,kB,yBAFjL,0BACE,0BACE,iCACF,iBACF,kB,6BAFkD,8C,qBAclD,6B,qBAGF,6B,yBASA,6BAAqF,a,uBAAA,uFDrE3F,mBAKA,aAkDI,WAAqBqW,EAA4CwE,EACrDkP,EAAgDjP,EAChDmK,EAA8ClK,EAA0C7C,GAFpG,WAAqB,KAAA7B,mBAA4C,KAAAwE,eACrD,KAAAkP,qBAAgD,KAAAjP,oBAChD,KAAAmK,kBAA8C,KAAAlK,kBAA0C,KAAA7C,cAvCpG,KAAA8R,SAAqB,IAAIC,EAEzB,KAAA/E,eAAkC,GAClC,KAAAgF,MAAQ,GACR,KAAAC,iBAAkC,KAElC,KAAAC,8BAA0C,CAAC,YAAa,mBACxD,KAAAC,8BAA0C,CAAC,QAgO3C,KAAAC,QAAU,CAMNC,aAAc,QACdC,cAAe,CACXC,MAAO,CACHC,MAAO,SAAEC,EAAqBC,EAAgBC,GAC1C,EAAKC,gBAAiBF,EAAMC,IAEhCE,YAAa,SAAEJ,EAAWC,EAAWC,GACjC,EAAKG,aAAcJ,EAAMC,MAIrCJ,MAAO,I,OAzMX,YAAA5T,SAAA,WACI7Q,KAAKilB,WAAY,OAGrB,YAAAnU,gBAAA,aAIA,YAAAoU,KAAA,WACI,OAAOllB,KAAKkS,YAAYgT,QAG5B,YAAAC,iBAAA,SAAiB1S,GACb,OAAOzS,KAAKkS,YAAYiT,iBAAiB1S,IAGtC,YAAAwS,WAAP,SAAmBG,GAAnB,WACIplB,KAAK+U,gBAAgBhV,OAAOuS,MAAM,SAAA+B,GAC9B,EAAK4K,gBAAgB0D,WAAYtO,EAASqO,SAE1C,EAAKxD,eAAiB7K,EAAShU,MAE/B,EAAK6e,eAAexY,MAAK,SAAEiZ,EAAGC,GAC1B,OAAKD,EAAE1X,MAAM4X,eAAeC,cAAgBF,EAAE3X,MAAM4X,eAAeC,eAAwB,EACjFH,EAAE1X,MAAM4X,eAAeC,cAAgBF,EAAE3X,MAAM4X,eAAeC,cAAuB,EACnF,KAGhB,IAAIC,EAAM,EAAKC,yBAA0B,QACpCD,GACD,EAAKb,eAAee,OAAQF,EAAK,GAGrC,EAAKsF,eAAgBhR,EAAS/T,aAE9B,EAAKglB,eAAgBF,MACrB1S,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIb,YAAA4S,4BAAP,SAAoC5hB,GAChC,OAA2E,IAAlE3D,KAAKokB,8BAA8B5S,QAAS7N,EAAUxB,OAG5D,YAAAqjB,4BAAP,SAAoChc,GAChC,OAA+E,IAAtExJ,KAAKqkB,8BAA8B7S,QAAShI,EAAcrH,OAG/D,YAAAmjB,eAAR,SAAwBF,GAAxB,WAEQK,GAAS,EASb,GAPyB,MAApBL,EACDK,EAAQzlB,KAAKM,YAAYolB,WAAW,SAAA5G,GAAK,OAAAA,EAAE3c,OAASijB,EAAiBjjB,QAE/DnC,KAAKM,YAAYqG,OAAS,IAChC8e,EAAQ,GAGPA,GAAS,EAAI,CACd,IAAI9hB,EAAY3D,KAAKM,YAAYmlB,GAEjCzlB,KAAKkkB,MAAQvgB,EAAUgiB,mBAEvB3lB,KAAKmkB,iBAAmBxgB,EAExBoW,YAAW,WACF,EAAK4K,MACN,EAAKA,KAAKiB,UAAUC,cAEzB,KAIH,YAAAC,qBAAR,SAA8BC,GAC1B,IADJ,WACc9b,EAAI,EAAGA,EAAIjK,KAAKM,YAAYqG,OAAQsD,IAAM,CAChD,IAAItG,EAAY3D,KAAKM,YAAY2J,GACjC,GAAKtG,EAAUxB,OAAS4jB,EAAc5jB,KAAO,CACzCnC,KAAKkkB,MAAQ6B,EAAcJ,mBAC3B3lB,KAAKmkB,iBAAmBxgB,EACxB,OAIRoW,YAAW,WACP,EAAK4K,KAAKiB,UAAUC,cACrB,IAGC,YAAAG,aAAR,SAAsBC,GAClB,IAAIhS,EAAwB,KAO5B,OANAjU,KAAKM,YAAY+J,SAAS,SAAA1G,GACjBsiB,IAAgBtiB,EAAUxB,OAC3B8R,EAAStQ,MAIVsQ,GAGH,YAAAoR,eAAR,SAAwB7e,GAAxB,WACQlG,EAA+B,GACnCkG,EAAK6D,SAAQ,SAAE0b,EAAeN,GAErBM,EAAcJ,mBAAmBhf,OAAS,GAC3Cof,EAAcJ,mBAAmBtb,SAAS,SAAA6b,GACtC,EAAKC,sBAAuBD,MAIpC5lB,EAAY4I,KAAM6c,MAItB/lB,KAAKM,YAAcA,EAEnBN,KAAKM,YAAYoG,MAAK,SAAEiZ,EAAGC,GACvB,OAAKD,EAAE1X,MAAM4X,eAAeC,cAAgBF,EAAE3X,MAAM4X,eAAeC,eAAwB,EACjFH,EAAE1X,MAAM4X,eAAeC,cAAgBF,EAAE3X,MAAM4X,eAAeC,cAAuB,EACnF,MAIZ,YAAAsG,gBAAR,SAAyBjkB,EAAcwjB,GACnC3lB,KAAKM,YAAY+J,SAAS,SAAA1G,GACjBA,EAAUxB,OAASA,IACpBwB,EAAUgiB,mBAAqBA,OAQnC,YAAAQ,sBAAR,SAA+BvB,GAA/B,WACIA,EAAK3c,MAAQjI,KAAKqmB,kBAAmBzB,EAAKpb,eAE1Cob,EAAK5b,SAASqB,SAAS,SAAAic,GACnB,EAAKH,sBAAuBG,OAI5B,YAAAD,kBAAR,SAA2BhhB,GACvB,IAAI4C,EAAgB,KAOpB,OANAjI,KAAKkf,eAAe7U,SAAS,SAAUkc,GAC9BA,EAAIpkB,OAASkD,IACd4C,EAAQse,EAAIte,MAAM4X,mBAInB5X,GAGJ,YAAA+c,aAAP,SAAqBJ,EAAWC,GACxB7kB,KAAKmlB,iBAAiBnlB,KAAKmkB,iBAAiBzE,mBAE9C1f,KAAK+jB,mBAAmB3M,KAAK1J,KAAM,CAC/BqX,YAAuC,OAAxBH,EAAKpe,KAAKggB,UAAqBxmB,KAAKymB,kBAAoBzmB,KAAK0mB,kBAC5EpV,MAAOuT,EACPtE,KAAMqE,IAEVC,EAAO8B,iBACP9B,EAAO+B,oBAIP/B,EAAO8B,iBACP9B,EAAO+B,oBAIN,YAAA9B,gBAAP,SAAwBF,EAAgBC,GAEpCD,EAAKgB,UAAUiB,eAAgBjC,GAE1BA,EAAKgB,UAAUkB,WAAYlC,GAC5BA,EAAKmC,WAGLnC,EAAKgB,UAAUC,aA8BhB,YAAAmB,iBAAP,SAAyB1V,EAAYiP,GAArC,WACQ0F,EAAc1F,EAAKpe,KAEvBnC,KAAKmkB,iBAAmB5D,EAExBvgB,KAAKkkB,MAAQ,GAERlkB,KAAKgmB,aAAcC,GAAcN,mBAAmBhf,OAAS,IAE9D3G,KAAKkkB,MAAMhb,KAAMlJ,KAAKgmB,aAAcC,GAAcN,mBAAmB,IAErE5L,YAAW,WACF,GAAQ,EAAK4K,MACd,EAAKA,KAAKiB,UAAUC,cAEzB,IAGF7lB,KAAK2kB,MACN3kB,KAAK2kB,KAAKiB,UAAUqB,UAIrB,YAAAC,gBAAP,sBACIlnB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAnb,kCAAmC,CACzEob,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAGwBvX,KAAKiS,WAAWuF,QAAU2P,uBAAuB7Q,WAAW,SAAA9P,GAE7F,EAAKlG,YAAY4I,KAAM1C,OAIxB,YAAA2H,oBAAP,SAA4BiZ,GAA5B,WACIpnB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAiQ,sBAAuB,CAC7DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAQ,+BAAkC,KAAOwG,EAAInf,MAAM4X,eAAiB,IACnI7f,KAAKiS,WAAWuF,QAAQhR,KAAO4gB,EAAIjlB,KACnCnC,KAAKiS,WAAWuF,QAAQ/T,KAAO,SAC/BzD,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAQ,uBAEzC5gB,KAAKiS,WAAWuF,QAAU+P,UAAUjR,WAAW,SAAA9P,GACpE,EAAKghB,oBAAqBhhB,OAI3B,YAAAihB,kBAAP,SAA0BL,EAAoB3R,GAA9C,WACIzV,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAnb,kCAAmC,CACzEob,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAEbvX,KAAKiS,WAAWuF,QAAQ/H,MAAO,EAC/BzP,KAAKiS,WAAWuF,QAAQ/B,SAAWA,EACnCzV,KAAKiS,WAAWuF,QAAQuO,cAAgBqB,EACxCpnB,KAAKiS,WAAWuF,QAAQ2P,uBAAuB7Q,WAAW,SAAA9P,GACtD,IAAIuZ,EAAM,EAAK2H,yBAA0BlhB,EAAKrE,MAE9C,EAAK7B,YAAYyf,GAAK9X,MAAQzB,EAAKyB,MACnC,EAAK3H,YAAYyf,GAAKhX,YAAcvC,EAAKuC,gBAI1C,YAAAye,oBAAP,SAA4BrlB,GAA5B,WACInC,KAAKqQ,iBAAiBlC,oBAAqBhM,GAAOmQ,MAAM,SAAA+B,GAEpD,IAAI0L,EAAM,EAAK2H,yBAA0BvlB,GACzC,EAAK7B,YAAY2f,OAAQF,EAAK,MAE9BrN,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIb,YAAA5Q,oBAAP,sBACI/B,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAjb,+BAAgC,CACtEkb,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAEbvX,KAAKiS,WAAWuF,QAAQuO,cAAgB/lB,KAAKmkB,iBAEXnkB,KAAKiS,WAAWuF,QAAUmQ,mBAAmBrR,WAAW,SAAA9P,GACtF,EAAK0Y,eAAehW,KAAM1C,OAI3B,YAAAtE,oBAAP,SAA4BklB,GAA5B,WACIpnB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAiQ,sBAAuB,CAC7DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAQ,+BAAkC,KAAOwG,EAAInf,MAAM4X,eAAiB,IACnI7f,KAAKiS,WAAWuF,QAAQhR,KAAO4gB,EAAIjlB,KACnCnC,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAQ,uBAClE5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAEjB7nB,KAAKiS,WAAWuF,QAAU+P,UAAUjR,WAAW,SAAA9P,GACpE,EAAKshB,oBAAqBthB,OAI3B,YAAAshB,oBAAP,SAA4B3lB,GAA5B,WACInC,KAAK+U,gBAAgB7S,oBAAqBC,GAAOmQ,MAAM,SAAA+B,GAEnD,IAAI0L,EAAM,EAAKC,yBAA0B7d,GACzC,EAAK+c,eAAee,OAAQF,EAAK,GAcjC,EAAKkF,WAAY,EAAKd,qBAEtBzR,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIb,YAAAoV,oBAAP,SAA4Bve,EAA8BiM,GAA1D,WAEIzV,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAha,kCAAmC,CACzEia,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,+BAGb/N,EAAcH,WAAW3C,MAAK,SAAEiZ,EAAGC,GAC/B,OAAKD,EAAE1X,MAAM4X,eAAiBD,EAAE3X,MAAM4X,gBAAyB,EACrDF,EAAE1X,MAAM4X,eAAiBD,EAAE3X,MAAM4X,eAAwB,EACvD,KAEhB7f,KAAKiS,WAAWuF,QAAQhO,cAAgBA,EACxCxJ,KAAKiS,WAAWuF,QAAQ/B,SAAWA,EAEEzV,KAAKiS,WAAWuF,QAAUwQ,yBAAyB1R,WAAW,SAAA9P,GAE/F,IAAIyhB,EAAW,EAAKjI,yBAA0BxZ,EAAKrE,MAC9C8lB,IACD,EAAK/I,eAAe+I,GAAYzhB,OAKpC,YAAAkhB,yBAAR,SAAkCvlB,GAC9B,IAAM,IAAI8H,EAAI,EAAGA,EAAIjK,KAAKM,YAAYqG,OAAQsD,IAAM,CAEhD,GADUjK,KAAKM,YAAY2J,GAClB9H,OAASA,EACd,OAAO8H,IAKX,YAAA+V,yBAAR,SAAkC7d,GAC9B,IAAM,IAAI8H,EAAI,EAAGA,EAAIjK,KAAKkf,eAAevY,OAAQsD,IAAM,CAEnD,GADUjK,KAAKkf,eAAejV,GACrB9H,OAASA,EACd,OAAO8H,EAIf,OAAO,MAGJ,YAAAie,2BAAP,sBACUC,EAAOnoB,KAEbA,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAlb,kCAAmC,CACzEmb,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAEbvX,KAAKiS,WAAWuF,QAAQ4Q,kBAAoBpoB,KAAKkf,eACjDlf,KAAKiS,WAAWuF,QAAQ9T,OAAS,OACjC1D,KAAKiS,WAAWuF,QAAQ6Q,QAAS,EACjCroB,KAAKiS,WAAWuF,QAAQuO,cAAgB/lB,KAAKmkB,iBAC7CnkB,KAAKiS,WAAWuF,QAAQ0M,MAAQlkB,KAAKkkB,MAEAlkB,KAAKiS,WAAWuF,QAAU8Q,aAAahS,WAAW,SAAAyP,GAEnFoC,EAAKhC,sBAAuBJ,EAAcJ,mBAAmB,IAC7DwC,EAAK/B,gBAAiBL,EAAc5jB,KAAM4jB,EAAcJ,oBAExDwC,EAAKrC,qBAAsBC,GAEtB,EAAKpB,MACN,EAAKA,KAAKiB,UAAUqB,aAKzB,YAAArZ,oBAAP,SAA4BlK,GAA5B,WACUykB,EAAOnoB,KACbmoB,EAAKI,QAAU7kB,EAEf1D,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAlb,kCAAmC,CACzEmb,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,iBAEbvX,KAAKiS,WAAWuF,QAAQ4Q,kBAAoBpoB,KAAKkf,eACjDlf,KAAKiS,WAAWuF,QAAQ9T,OAASA,EACjC1D,KAAKiS,WAAWuF,QAAQ6Q,QAAS,EACjCroB,KAAKiS,WAAWuF,QAAQuO,cAAgB/lB,KAAKmkB,iBAC7CnkB,KAAKiS,WAAWuF,QAAQ0M,MAAQlkB,KAAKkkB,MAEAlkB,KAAKiS,WAAWuF,QAAU8Q,aAAahS,WAAW,SAAAyP,GACzEoC,EAAKI,QAAQ/hB,KAGvB2hB,EAAKhC,sBAAuBJ,EAAcJ,mBAAmB,IAC7DwC,EAAK/B,gBAAiBL,EAAc5jB,KAAM4jB,EAAcJ,oBAExDwC,EAAKrC,qBAAsBC,GAEtB,EAAKpB,MACN,EAAKA,KAAKiB,UAAUqB,aAKzB,YAAAuB,eAAP,SAAuB5D,GAAvB,WACI5kB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAiQ,sBAAuB,CAC7DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAQ,+BAAkC,KAAOgE,EAAKpe,KAAKyB,MAAQ,IAC1HjI,KAAKiS,WAAWuF,QAAQhR,KAAOoe,EAEN5kB,KAAKiS,WAAWuF,QAAU+P,UAAUjR,WAAW,SAAA9P,GACpE,EAAKiiB,eAAgBjiB,OAItB,YAAAiiB,eAAP,SAAuB7D,GAAvB,WACI5kB,KAAKqQ,iBAAiBtC,oBAAqB/N,KAAKmkB,iBAAiBhiB,KAAMyiB,EAAKlhB,OAAO8C,KAAKgD,cAAeob,EAAKpe,KAAKgD,eAAgB8I,MAAM,SAAA9L,GAE5F,MAAlCoe,EAAKlhB,OAAO8C,KAAKgD,gBAClB,EAAK0a,MAAQ,IAKjB,IAAMxgB,EAASkhB,EAAKlhB,OAChBsF,EAAWtF,EAAO8C,KAAKwC,SAG3BtF,EAAO8C,KAAKwC,SAAWA,EAASvC,QAAO,SAAEiiB,GAAY,OAAAA,EAAExlB,KAAO0hB,EAAKpe,KAAKtD,MACnC,IAAhCQ,EAAO8C,KAAKwC,SAASrC,SACtBjD,EAAO8C,KAAKmiB,aAAc,GAE9B,EAAKhE,KAAKiB,UAAUqB,SAGpB,EAAKnS,kBAAkB/D,mBAEvB2B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIb,YAAAiW,SAAP,SAAiBrI,GACb,OAAOvgB,KAAKmkB,mBAAqB5D,GAG9B,YAAAsI,OAAP,SAAehE,GAEX7kB,KAAKyoB,eAAgB5D,EAAOiE,UAGzB,YAAAC,UAAP,SAAkBD,GAEd,OAAO,GAGJ,YAAAlW,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAljBlE/W,GAAkB,wR,iCAAlBA,EAAkB,oD,OAAA,M,cAwBf,EAAAotB,eAAa,G,g0DC/D7B,4BACE,4BAEA,6BAEA,4BAIE,4BACE,4BACE,yBAAI,4BAAkE,iBACtE,oBACA,2BAEE,8BAYF,iBAEA,2BACE,kCACF,iBAEF,iBAGA,6BACE,0BAAI,6BAA4D,iBAChE,qBACA,4BACE,8BAYF,iBAEA,2BACE,kCACF,iBACF,iBAEA,6BACE,0BACI,8BACA,iCACJ,iBACA,qBACA,gCAGA,gCAKF,iBAEF,iBAEF,iBAEA,4CAIE,wCAAsC,2CAAW,EAAApb,oBAAA,WAGjD,wCAAsC,2CAAW,EAAA4a,eAAA,WAGnD,iBAEA,4CAIE,wCAAsC,2CAAW,EAAAA,eAAA,WAGnD,iBAEF,kB,MArFsC,yDAekB,6CAU1C,qDAe0C,6CAOtC,uDAGL,qDAGA,6E,6RDpCb,GAOa,EAAA5sB,sB,kFEvCb,KACA,MADA,IAEA,QAEA,S,GAEA,OACA,OACA,MACA,M,gGCJM,6BAAqE,YAAW,kB,6BAAX,+C,mDASrE,4BACE,+BACE,6BAAsD,YACxD,iBACA,+BAA6B,2FAA7B,iBAEF,iB,8CAJ0D,wDAEjD,mDAAqB,kBAArB,CAAqB,2B,mDAG9B,4BACE,+BACE,6BAA4D,YAC9D,iBACA,+BAA6B,2FAA7B,iBAEF,iB,8CAJgE,wDAEvD,mDAAqB,kBAArB,CAAqB,iC,yBAW1B,gCAA6D,YAA4B,kB,uBAA/C,6BAAmB,4D,mDAU3D,gCACE,iGACA,6BACF,iB,gCAHwC,wDDlCpD,iBAoBI,WAAqB+N,EAAuCsf,EAA2BlU,EAA0C1E,EAA2C4B,GAAvJ,KAAAtI,WAAuC,KAAAsf,OAA2B,KAAAlU,kBAA0C,KAAA1E,mBAA2C,KAAA4B,aAZ5K,KAAAiX,cAAqB,GACrB,KAAAtY,QAAkB,KAElB,KAAAnB,MAAgB,EAEhB,KAAAgG,UAAoB,E,OASpB,YAAA5E,SAAA,sBACI7Q,KAAKmnB,uBAAyB,IAAI,EAAAha,QAElCnN,KAAK+lB,cAAgB,CACjB,KAAQ,GACR,MAAS/lB,KAAK2J,SAASQ,SACvB,YAAenK,KAAK2J,SAASQ,SAC7B,mBAAsB,GACtB,iBAAoB,IAGxBnK,KAAK+U,gBAAgB5N,mBAAmBmL,MAAK,SAAA6W,GAQ3C,GANK,EAAK1Z,MAAwB,IAAhB0Z,EAAKxiB,SAErB,EAAKof,cAAcrG,iBAAmByJ,EAAK,GAAGhnB,MAI3C,EAAKsT,SAcR,EAAKyT,cAAgBC,MAbvB,CACE,EAAKD,cAAgB,GAErB,IAAK,IAAIjf,EAAI,EAAGA,EAAIkf,EAAKxiB,SAAUsD,EAE7B,EAAKgf,KAAK9D,iBAAiBgE,EAAKlf,GAAG9H,OAErC,EAAK+mB,cAAchgB,KAAKigB,EAAKlf,QASlCyI,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAzB,eAAA,sBACIlR,KAAK4Q,QAAU,KAEX5Q,KAAKyV,SAEPzV,KAAKiS,WAAWqC,OAIbtU,KAAKyP,KACNzP,KAAKqQ,iBAAiBnC,oBAAqBxN,KAAKC,UAAWX,KAAK+lB,gBAAkBzT,MAAM,SAAA9L,GACpF,EAAK2gB,uBAAuBzZ,KAAMlH,GAClC,EAAKyL,WAAWqC,UAChB5B,OAAM,SAAEC,GACR,EAAKC,MAAOD,MAIhB3S,KAAKqQ,iBAAiBrC,oBAAqBtN,KAAKC,UAAWX,KAAK+lB,gBAAkBzT,MAAM,SAAA9L,GACpF,EAAK2gB,uBAAuBzZ,KAAMlH,GAClC,EAAKyL,WAAWqC,UAChB5B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKxB,YAAAC,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAtF/C1W,GAAiC,iM,iCAAjCA,EAAiC,2yCCjB9C,2BAEE,4BACE,6BAEE,8BAEA,4BACE,8BACE,4BACF,iBACA,8BAAO,2EAAP,iBAEF,iBACA,8BAOA,8BAQA,6BACE,+BACE,6BACF,iBACA,iCACE,uFACA,yBACA,mCACF,iBACF,iBAEA,8BACE,8BACE,8BACE,iCAA8C,wCAAS,EAAAgW,WAAA,UACrD,8BACF,iBACA,mCAIF,iBACF,iBACF,iBAEF,iBACF,iBACF,kB,MAnDW,oDAMI,4DAAgC,+BAGjB,0EAOA,gFAYd,2DAA6B,4CAG3B,uDAUE,kD,+RDlCpB,GAKa,EAAAhW,qC,kFEjBb,KACA,MADA,IAEA,QAGA,S,GAGA,O,uECJI,6BAAqE,YAAW,kB,8BAAX,+C,yBAgB/D,gCACE,YACF,kB,uBAFqD,wCACnD,qE,mDANJ,gCAAkC,4GAChC,gCAA6D,kBAAG,6BACgB,kBAAE,iBAElF,wBACA,kCAGF,iB,iCAP0B,kEAIhB,4D,mDAlBhB,4BAEE,8BAEA,4BACE,yBACE,4BACF,iBACF,iBACA,+BAEE,4BAEE,iCAUF,iBAEA,4BACE,+BAAsB,6EAASgW,WAAA,UAC7B,4BACE,8BACF,iBACF,iBACA,iCAAsB,iGACpB,4BACE,8BACF,iBACF,iBACF,iBACF,iBACF,iB,gCApCO,oDAWO,yDDJhB,iBA+BI,WAAqB5B,EAA2C4B,GAA3C,KAAA5B,mBAA2C,KAAA4B,aAT3D,KAAAoW,QAAkB,EAEvB,KAAAzX,QAAkB,K,OAUlB,YAAAC,SAAA,WACI7Q,KAAKsoB,aAAe,IAAI,EAAAnb,SAG5B,YAAAic,SAAA,SAASviB,GAAT,WACC7G,KAAKooB,kBAAkB/d,SAAQ,SAAAgf,GAC3BA,EAAKlnB,OAAS0E,IAChB,EAAKyiB,sBAAwBD,OAKhC,YAAAnY,eAAA,sBACIlR,KAAK4Q,QAAU,KAEf,IAAIlN,EAAU1D,KAAW,OAAI,OAASA,KAAK0D,OAAO8C,KAAKgD,cACvDxJ,KAAKqQ,iBAAiBzC,oBAAqB5N,KAAK+lB,cAAc5jB,KAAMuB,EAAQ1D,KAAKspB,sBAAsBnnB,MAAOmQ,MAAM,SAAA9L,GAChH,EAAK8hB,aAAa5a,KAAMlH,GACxB,EAAKyL,WAAWqC,UAChB5B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAC,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAvD/CzW,GAAiC,4E,iCAAjCA,EAAiC,mxBChB9C,6BAEE,+BAuCF,kB,MAvCO,qD,2LDSP,GAKa,EAAAA,qC,kFEhBb,KACA,MADA,IAEA,QAEA,S,GAGA,OACA,MAEA,M,uFCPI,6BAAqE,YAAW,kB,6BAAX,+C,mDAwBjE,4BACE,4BACE,6BAAsD,YACxD,iBACA,+BAAO,2FAAP,iBAEF,iB,0BAJ0D,wDAEjD,+CAA+B,yBAA/B,CAA+B,wC,mDAQxC,4BACE,0BACE,4BACE,6BAA4D,YAC9D,iBACA,+BAAO,2FAAP,iBAEF,iBACF,iB,0BALkE,wDAEvD,+CAA+B,iC,yBAsFtC,gCAA6D,YAA4B,kB,uBAA/C,6BAAmB,4D,2CDrHzE,aAgBI,WAAqByN,EAAuCsf,EAA2BlU,EAAyC9C,GAA3G,KAAAtI,WAAuC,KAAAsf,OAA2B,KAAAlU,kBAAyC,KAAA9C,aARhI,KAAAiX,cAAqB,GACrB,KAAAtY,QAAkB,K,OASlB,YAAAC,SAAA,sBACI7Q,KAAK2nB,mBAAqB,IAAI,EAAAxa,QAE9BnN,KAAKwJ,cAAgB,CACjB,KAAQ,GACR,MAASxJ,KAAK2J,SAASQ,SACvB,YAAenK,KAAK2J,SAASQ,SAC7B,aAAgB,aAChB,QAAU,EACV,oBAAsB,EACtB,iBAAoB,GACpB,WAAc,IAGlBnK,KAAK+U,gBAAgB5N,mBAAmBmL,MAAK,SAAA6W,GAEvB,IAAhBA,EAAKxiB,SAEP,EAAK6C,cAAckW,iBAAmByJ,EAAK,GAAGhnB,MAIhD,EAAK+mB,cAAgB,GAErB,IAAK,IAAIjf,EAAI,EAAGA,EAAIkf,EAAKxiB,SAAUsD,EAE7B,EAAKgf,KAAK9D,iBAAiBgE,EAAKlf,GAAG9H,OAErC,EAAK+mB,cAAchgB,KAAKigB,EAAKlf,OAIhCyI,OAAM,SAACC,GACN,EAAKC,MAAMD,OAInB,YAAAzB,eAAA,sBACIlR,KAAK4Q,QAAU,KAEf5Q,KAAK+U,gBAAgBhT,oBAAqBrB,KAAKC,UAAWX,KAAKwJ,gBAAkB8I,MAAM,SAAA9L,GACnF,EAAKmhB,mBAAmBja,KAAMlH,GAC9B,EAAKyL,WAAWqC,UAChB5B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAA4W,aAAA,WACIvpB,KAAKwJ,cAAcggB,QAAUxpB,KAAKwJ,cAAcggB,QAGpD,YAAAC,yBAAA,WACIzpB,KAAKwJ,cAAcqY,oBAAsB7hB,KAAKwJ,cAAcqY,oBAGhE,YAAAjP,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAvE/CxW,GAA8B,yJ,iCAA9BA,EAA8B,0mD,2BClB3C,+BAAqB,sFAA0B,EAAA+U,oBAE7C,4BACE,8BAQA,4BACE,4BACE,4BACE,0BACE,8BACE,4BACF,iBACA,+BAAO,2EAAP,iBAEF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,gCAOF,iBACF,iBAEA,6BACE,6BACE,gCASF,iBACF,iBAEA,6BACE,6BACE,6BACE,gCACE,8BACF,iBACA,iCAAgD,mFAC9C,yBAmBC,iCACC,8BACF,iBACA,iCACE,8BACF,iBACA,iCACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBAeA,6BACE,8BACE,6BACE,8BACE,8BAAK,wCAAS,EAAAuY,8BAEZ,uBACF,iBAEA,gCACE,8BACF,iBACF,iBACF,iBACF,iBACF,iBAGA,6BACE,6BACE,6BACE,gCACE,8BACF,iBACA,iCAAgD,uFAC9C,yBACA,mCACF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,8BACE,iCAA8C,wCAAS,EAAAxX,WAAA,UACrD,8BACF,iBACA,iCACE,8BACF,iBACF,iBACF,iBACF,iBAEF,iBACF,iB,+BAnJS,oDAeU,4DASa,0EAYA,gFAkB0B,oEAmDJ,kGAoBI,wEAEtC,uDAYY,oD,ySDjIhC,GAKa,EAAA9V,kC,kFElBb,KACA,MADA,IAGA,QAIA,SACA,S,GAGA,O,wJCNE,4CAAiG,wHAAyH,iB,gCAA/I,oCAAqB,gCAArB,CAAqB,qC,wBAEhG,2C,6BAA0E,+C,wBAE1E,kD,6BAAgF,+C,wBAEhF,gD,6BAA4E,8CAA+B,qC,wBAE3G,uC,6BAAuE,8CAA+B,qC,wBAEtG,0C,6BAAwE,8CAA+B,mCAA/B,CAA+B,uCDDzG,iBAaI,WAAoB8V,EAA+ByX,EAAuCC,GAA1F,WAAoB,KAAA1X,aAA+B,KAAAyX,oBAAuC,KAAAC,iCAP1F,KAAA/Y,QAAkB,KAClB,KAAArD,WAA4C,CAAC,MAAQ,EAAA9B,yBAAyBsc,oBAAqB,UAAY,GAAI,WAAa,IAIhI,KAAAtS,UAAoB,EAGlBzV,KAAK4pB,uBAAyBD,EAA+Bvc,gBAAgBkJ,WAAW,SAAA/I,GAClF,EAAKA,WAAaA,K,OAI1B,YAAAsD,SAAA,WACI7Q,KAAKgoB,yBAA2B,IAAI,EAAA7a,SAGxC,YAAA8D,YAAA,WACIjR,KAAK4pB,uBAAuBC,eAGhC,YAAAC,mBAAA,SAAmBrc,GACfzN,KAAKuN,WAAaE,GAGtB,YAAAsc,sBAAA,SAAsBvjB,GAGlBxG,KAAKgoB,yBAAyBta,KAAMlH,IAGxC,YAAAygB,OAAA,aAIA,YAAA+C,MAAA,WACIhqB,KAAKiS,WAAWqC,QAGpB,YAAA1B,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAzC/CvV,GAAiC,4H,iCAAjCA,EAAiC,sdClB9C,2BAEE,sCAEA,8CAEA,kDAEA,yDAEA,uDAEA,8CAEA,iDAEF,kB,MAZuB,kFAEI,6EAEO,4EAEF,0EAET,8EAEG,8E,2UDD1B,GAKa,EAAAA,qC,kFEnBb,WAKA,GAJA,MACA,MAGA,QAMA,GAHA,OACA,MAEA,Q,GACA,OACA,OACA,O,qICZI,4BAAqE,YAAW,kB,8BAAX,+C,yBAuEzC,4BAA8E,YAA6B,kB,uBAA7B,4D,mDAgBtF,gCAAwF,0FACpF,6BACJ,iB,iCAFgE,uC,mDArFpF,+BAAkE,wFAC9D,4BACI,yBACI,4BACA,YACJ,iBACJ,iBACA,+BACI,4BACI,6BACI,4BAAO,8BAAoD,iBAC/D,iBACA,8BACI,+BAAoB,gCAAmB,mHAAnB,iBACpB,iBACJ,iBACJ,iBAEA,0CAAuC,kHAAoE,iBAC3G,yCAAsC,wHAAgF,iBAEtH,6BACI,8BACI,6BAAO,8BAA4D,iBACvE,iBACA,8BACI,iCAA4B,2HACxB,yBACC,iCAA2B,8BAAsD,iBAClF,iCAA0B,8BAAqD,iBAC/E,iCAA6B,8BAAwD,iBAOzF,iBACJ,iBACJ,iBAGA,6BACI,8BACI,6BAAO,8BAA8E,iBACzF,iBACA,8BAEI,wCAAoC,+HAA6H,iBACrK,iBACJ,iBAEA,6BACE,8BACE,6BAAO,8BAAwD,iBACjE,iBACA,8BACE,+BAAoB,gCAAmB,+HAAuF,iBAA9H,iBACF,iBACF,iBAEA,6BACI,8BACI,6BAAO,8BAA0F,iBACrG,iBACA,8BACI,8BACI,8BACI,6BACI,+BACJ,iBAEA,iCAA+E,oGAC3E,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACQ,8BACI,iCAA8C,yFAC1C,8BACJ,iBACA,mCAGJ,iBACJ,iBACR,iBACJ,iB,iCAvFY,sFAS2C,gEAK9B,mDAAqB,mCACtB,mDAAqB,yCAOD,wEAsBb,mDAAoB,+CAApB,CAAoB,2EASA,4EAYnB,sEAGA,mDAaJ,iD,yBAxFhC,4BACI,8BAEA,iCA4FJ,kB,6BA9FS,oDAEgB,yDDazB,iBA0BI,WAAqBiT,EAA2C4B,EAA+ByX,EAAuC7U,EAC1HoV,EAA8DN,EAC9DO,EAAkDnV,GAFzC,KAAA1E,mBAA2C,KAAA4B,aAA+B,KAAAyX,oBAAuC,KAAA7U,eAC1H,KAAAoV,4BAA8D,KAAAN,iCAC9D,KAAAO,sBAAkD,KAAAnV,kBArBrD,KAAAU,UAAoB,EAEnB,KAAA0U,oBAAoD,IAAI,EAAAxZ,aAUlE,KAAAC,QAAkB,KAClB,KAAArD,WAA4C,CAAC,MAAQ,EAAA9B,yBAAyBsc,oBAAqB,UAAY,GAAI,WAAa,IAEhI,KAAAqC,gBAA8B,CAAC,MAAS,CACpC,CAAC,MAAQpqB,KAAKkqB,oBAAoBtJ,OAAO,6CAA8C,QAAS,EAAM,SAAU,K,OAXpH,sBACI,iBAAE,C,IADN,SACOpX,GACAA,IACDxJ,KAAKqqB,kBAAoB3pB,KAAK8J,MAAM9J,KAAKC,UAAU6I,M,gCAiBzD,YAAAqH,SAAA,WAEI7Q,KAAKiqB,0BAA0BK,cAActqB,KAAKoqB,iBAClDpqB,KAAK2pB,+BAA+Bnc,cAAcxN,KAAKuN,aAG3D,YAAAuD,gBAAA,aAGA,YAAAG,YAAA,aAGA,YAAAsZ,iBAAA,WACIvqB,KAAK2pB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyB8e,iBAAkB,UAAY,GAAI,WAAa,MAGvI,YAAAT,mBAAA,SAAmBrc,GACfzN,KAAKuN,WAAaE,GAGtB,YAAAwZ,OAAA,sBACIjnB,KAAK+U,gBAAgB9S,oBAAqBjC,KAAKqqB,mBAAoB/X,MAAM,SAAA9I,GAIrE,EAAK2gB,oBAAoB3T,KAAKhN,GAE9B,EAAKwgB,WAELtX,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAQpB,YAAAqX,MAAA,WAEIhqB,KAAKiS,WAAWqC,QAIpB,YAAA/C,QAAA,WAkBI,OAAO,GAGX,YAAAqB,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA7F/CtV,GAA2B,6U,iCAA3BA,EAA2B,+9DCrBxC,8B,KAAwB,oE,gpBDgBxB,GAKa,EAAAA,+B,kFEtBb,KACA,MACA,MAFA,IAGA,QAEA,SACA,SACA,SAIA,GAHA,OACA,MAEA,Q,GACA,OACA,OACA,O,kHCbI,4BAAqE,YAAW,kB,6BAAX,+C,mDAiCjC,2BAAoG,uIAC1C,kB,mDAC1D,2BAAuG,6IAC3C,kB,yBANpE,yBACI,yBAAI,YAA6B,iBACjC,4BACI,6BAEA,6BAEJ,iBACJ,kB,uBAPQ,2DAEG,qEAEA,sE,mDAjCvC,+BAA8D,wFAC1D,4BACI,yBACI,4BAAyE,YAAsC,iBACvH,iBACA,+BAEI,0BACI,4BACI,4BACI,6BACJ,iBACJ,iBACA,8BAEI,8BACI,gCACI,6BACI,0BACI,0BACI,8BACJ,iBACA,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BACI,+BASJ,iBACJ,iBACJ,iBAkBJ,iBACJ,iBACA,8BACI,wBAEA,8BACI,4BAAgG,uGAC5F,8BACJ,iBACJ,iBACJ,iBAEA,8BACI,8BACI,8BACI,iCAA8C,wFAC1C,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,gCA5EqF,iFAyBrD,oEDbpC,iBAqBI,WAAqBgT,EAA2C4B,EAA+ByX,EAAuC7U,EAAsCoK,EAChKgL,EAA8DN,EAAwE5U,GAD7H,KAAA1E,mBAA2C,KAAA4B,aAA+B,KAAAyX,oBAAuC,KAAA7U,eAAsC,KAAAoK,kBAChK,KAAAgL,4BAA8D,KAAAN,iCAAwE,KAAA5U,kBAblJ,KAAAnE,QAAkB,KAClB,KAAAwZ,gBAA8B,CAAC,MAAS,CACpC,CAAC,MAAQpqB,KAAKif,gBAAgB2B,OAAO,6CAA8C,QAAS,EAAM,SAAU,GAC5G,CAAC,MAAQ5gB,KAAKif,gBAAgB2B,OAAO,0CAA2C,QAAS,EAAM,SAAU,KAE7G,KAAArT,WAA4C,CAAC,MAAQ,EAAA9B,yBAAyB8e,iBAAkB,UAAYvqB,KAAKsC,UAAW,WAAa,I,OAWzI,YAAAuO,SAAA,WACI7Q,KAAKwqB,kBAAoB,IAAI,EAAArd,QAC7BnN,KAAKiqB,0BAA0BK,cAActqB,KAAKoqB,kBAGtD,YAAAnZ,YAAA,WACEjR,KAAKwqB,kBAAkBX,eAGzB,YAAAY,qBAAA,WACIzqB,KAAK2pB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyBif,gBAAiB,UAAY,GAAI,WAAa,MAGtI,YAAAC,cAAA,SAAczgB,EAAiBgN,GAC3BlX,KAAK2pB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyBkf,cAAe,UAAYzgB,EAAM,WAAa,MAGtI,YAAA0gB,oBAAA,SAAoB1gB,EAAiBgN,GAArC,WAEElX,KAAK0pB,kBAAoB1pB,KAAK6U,aAAauC,KAAM,EAAAiQ,sBAAuB,CAC1EhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAK0pB,kBAAkBlS,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,+BAAiC,IAAM1W,EAAKjC,MAAM4X,eAAiB,IACrI7f,KAAK0pB,kBAAkBlS,QAAQhR,KAAO,CAAC,cAAiB0D,EAAM,cAAiBlK,KAAKwJ,eACpFxJ,KAAK0pB,kBAAkBlS,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,uBACxE5gB,KAAK0pB,kBAAkBlS,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAE3B7nB,KAAK0pB,kBAAkBlS,QAAU+P,UAAUjR,WAAW,SAAA9P,GACxE,EAAKhE,oBAAqBgE,EAAKgD,cAAcrH,KAAMqE,EAAKqkB,mBAI9D,YAAAroB,oBAAA,SAAoB6C,EAA2B6E,GAA/C,WAEMlK,KAAK+U,gBAAgBvS,oBAAqB6C,EAAmB6E,EAAK/H,MAAOmQ,MAAM,SAAA9L,GAC7E,EAAKgkB,kBAAkB9c,KAAMlH,GAE1BA,GACD,EAAKgD,cAAcH,WAAW4W,OAAO,EAAKzW,cAAcH,WAAWmI,QAAQtH,GAAO,MAGpFwI,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAqX,MAAA,WACIhqB,KAAK2pB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyBsc,oBAAqB,UAAY/nB,KAAKsC,UAAW,WAAa,MAGtJ,YAAAsQ,MAAA,SAAOD,GACL3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAzEzCvW,GAA8B,6U,iCAA9BA,EAA8B,49CCvB3C,4BACI,8BAEA,gCAiFJ,kB,MAnFS,oDAEgB,sD,0jBDezB,GAKa,EAAAA,kC,kFEvBb,KAQA,MARA,IAUA,SAKA,GAHA,OACA,MAEA,QAGA,GAFA,OACA,OACA,Q,2GCXgB,6BAAqE,YAAW,kB,6BAAX,+C,oCDcrF,aAoBI,WACQ6V,EACIgY,EACAN,EACA1K,EACAlK,GAJJ,KAAA9C,aACI,KAAAgY,4BACA,KAAAN,iCACA,KAAA1K,kBACA,KAAAlK,kBAjBZ,KAAAnE,QAAkB,KAClB,KAAAka,aAA0B,KAC1B,KAAAV,gBAA8B,CAAC,MAAS,CACpC,CAAC,MAAQpqB,KAAKif,gBAAgB2B,OAAO,6CAA8C,QAAS,EAAM,SAAU,GAC5G,CAAC,MAAQ5gB,KAAKif,gBAAgB2B,OAAO,0CAA2C,QAAS,EAAM,SAAU,GACzG,CAAC,MAAQ5gB,KAAKif,gBAAgB2B,OAAO,yCAA0C,QAAS,EAAM,SAAU,KAE5G,KAAArT,WAA4C,CAAC,MAAQ,EAAA9B,yBAAyBif,gBAAiB,UAAY,GAAI,WAAa,I,OAc5H,YAAA7Z,SAAA,WACI7Q,KAAK+qB,aAAa,aAClB/qB,KAAKiqB,0BAA0BK,cAActqB,KAAKoqB,kBAGtD,YAAAtZ,gBAAA,WAEO9Q,KAAKgrB,yBACJhrB,KAAKgrB,wBAAwB5Z,WAKrC,YAAAH,YAAA,aAGA,YAAAC,eAAA,sBAEIlR,KAAK+U,gBAAgB3S,iBAAkBpC,KAAKwJ,cAAcrH,KAAMnC,KAAK8qB,cAAexY,MAAM,SAAA9L,GACtF,EAAKgD,cAAcH,WAAWH,KAAK1C,GAEnC,EAAKmjB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyB8e,iBAAkB,UAAY,GAAI,WAAa,QACnI7X,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAoY,aAAA,SAAatnB,GAELzD,KAAK8qB,aADG,SAATrnB,EACqB,IAAI,EAAA4H,cAAc,GAAI5H,EAAMzD,KAAKif,gBAAgB9U,SAAUnK,KAAKif,gBAAgB9U,UAAU,GAAO,GAAO,GAAO,GAEtH,UAAT1G,EACgB,IAAI,EAAA+H,iBAAiB,GAAI/H,EAAMzD,KAAKif,gBAAgB9U,SAAUnK,KAAKif,gBAAgB9U,UAAU,GAAO,GAAO,GAAO,GAGlH,IAAI,EAAAa,UAAU,GAAIvH,EAAMzD,KAAKif,gBAAgB9U,SAAUnK,KAAKif,gBAAgB9U,UAAU,GAAO,GAAO,GAAO,IAIvI,YAAA8gB,YAAA,WAEI,IAAIC,GAAuB,EAM3B,OAJGlrB,KAAKgrB,0BACJE,EAAclrB,KAAKgrB,wBAAwBzZ,aAG5C2Z,GAOP,YAAAxK,OAAA,WACI1gB,KAAK2pB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyB8e,iBAAkB,UAAY,GAAI,WAAa,MAGvI,YAAA3X,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAnF/CtW,GAAoC,6N,iCAApCA,EAAoC,uE,OAAA,K,cAYlC,EAAAa,yBAAuB,G,8gCCtCtC,4BAII,+BAAwC,2CAAY,EAAAgU,oBAChD,4BACI,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,4BACI,6BACI,6BACI,gCAAmG,wCAAS,EAAA6Z,aAAa,gBACrH,8BACJ,iBACA,gCAAiG,wCAAS,EAAAA,aAAa,cACnH,8BACJ,iBACA,gCAA+F,wCAAS,EAAAA,aAAa,YACjH,8BACJ,iBACA,gCAA8F,wCAAS,EAAAA,aAAa,WAChH,8BACJ,iBACA,gCAAiG,wCAAS,EAAAA,aAAa,cACnH,8BACJ,iBACA,gCAA8F,wCAAS,EAAAA,aAAa,WAChH,8BACJ,iBACJ,iBACJ,iBACJ,iBAEA,gCAEI,0CAAoI,uEAA6B,iBAEjK,6BACI,8BAII,8BACI,iCAA8C,wCAAS,EAAArK,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAzDqB,oDAWkD,iGAGA,+FAGA,6FAGA,4FAGA,+FAGA,4FASlC,mDAA0B,wBAA1B,CAA0B,0CAA1B,CAA0B,4BAWe,2D,sqCDhC9E,GAKa,EAAArkB,wC,kFE1Bb,SACA,Q,OAwBA,iBASE,aACE2D,KAAKmrB,UA7BA,SAACC,GACN,GAAGA,EAAEvkB,MAGD,OAFwC,IAA1BukB,EAAEvkB,MAAM2K,QAAQ,KAGnB,KAEA,CACH6Z,uBAAwB,CACnBzV,OAAO,K,OAuB1B,YAAA0V,SAAA,SAASF,GACP,OAAOprB,KAAKmrB,UAAUC,I,iCARbruB,I,iCAAAA,EAA+B,yFAJ/B,CACT,CAAEwuB,QAAS,EAAAC,cAAeC,YAAa1uB,EAAiC2uB,OAAO,Q,EAHnF,GAMa,EAAA3uB,mC,kFC/Bb,KAOA,MAPA,IAUA,SAEA,SAQA,GANA,OACA,MAEA,OACA,OAEA,Q,oHCfgB,6BAAqE,YAAW,kB,6BAAX,+C,sBAOjE,4BAA6D,6BAAwE,iBAAE,6BAAgD,kB,sBACvL,4BAA2D,6BAAwE,iBAAE,6BAAmD,kB,sBACxL,4BAAyD,6BAAwE,iBAAE,6BAAiD,kB,sBACpL,4BAA2D,6BAAwE,iBAAE,6BAAmD,kB,sBACxL,4BAAwD,6BAAwE,iBAAE,6BAAgD,kB,sBAClL,4BAAwD,6BAAwE,iBAAE,6BAAgD,kB,mDAUlL,4CAAuE,uGAA0D,iB,gCAA1D,sCAAyB,kCDHpH,iBAqBC,WAAmBkV,EACVgY,EACAN,EACA1K,EACAlK,GAJU,KAAA9C,aACV,KAAAgY,4BACA,KAAAN,iCACA,KAAA1K,kBACA,KAAAlK,kBAhBT,KAAAnE,QAAkB,KAClB,KAAArD,WAA4C,CAAE,MAAS,EAAA9B,yBAAyBkf,cAAe,UAAa3qB,KAAKsC,UAAW,WAAc,IAC1I,KAAA8nB,gBAA8B,CAC7B,MAAS,CACR,CAAE,MAASpqB,KAAKif,gBAAgB2B,OAAO,6CAA8C,QAAU,EAAM,SAAW,GAChH,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAO,0CAA2C,QAAU,EAAM,SAAW,GAC7G,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAO,uCAAwC,QAAU,EAAM,SAAW,K,OAa5G,YAAA/P,SAAA,WACC7Q,KAAKiqB,0BAA0BK,cAActqB,KAAKoqB,kBAGnD,YAAAtZ,gBAAA,aAIA,YAAAG,YAAA,aAGA,YAAAC,eAAA,sBAEClR,KAAK+U,gBAAgBxS,oBAAoBvC,KAAKwJ,cAAcrH,KAAMnC,KAAKsC,WAAWgQ,MAAK,SAAA9L,GAEtF,IAAK,IAAIyD,EAAI,EAAGA,EAAI,EAAKT,cAAcH,WAAW1C,OAAQsD,IAAK,CAC9D,IAAIC,EAAO,EAAKV,cAAcH,WAAWY,GACzC,GAAIC,EAAK/H,OAASqE,EAAKrE,KAAM,CAC5BwpB,OAAOC,OAAO1hB,EAAM1D,GACpB,OAIF,EAAKmjB,+BAA+Bnc,cAAc,CAAE,MAAS,EAAA/B,yBAAyB8e,iBAAkB,UAAa,GAAI,WAAc,QACrI7X,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAsY,YAAA,WASC,OAAO,GAGR,YAAAvK,OAAA,WACC1gB,KAAK2pB,+BAA+Bnc,cAAc,CAAE,MAAS,EAAA/B,yBAAyB8e,iBAAkB,UAAa,GAAI,WAAc,MAGxI,YAAAsB,KAAA,WACC7rB,KAAK2pB,+BAA+Bnc,cAAc,CAAE,MAAS,EAAA/B,yBAAyB8e,iBAAkB,UAAa,GAAI,WAAc,MAGxI,YAAA3X,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAzEtC3V,GAAkC,6N,iCAAlCA,EAAkC,qE,OAAA,K,cAcnC,EAAAE,yBAAuB,G,yoCC3CnC,4BAEI,+BAAwC,sFAA0B,EAAAgU,oBAC9D,4BACI,4BACI,8BAEA,4BACI,yBACI,4BAAqE,YACzE,iBAEA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACJ,iBAIA,gCAEI,yCAAmK,oEAA0B,iBAG7L,8CAEA,8BACI,8BAII,8BACI,iCAA8C,wCAAS,EAAAwP,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAGJ,iB,MA7CqB,oDAIwE,+EAGnD,mEACA,iEACA,+DACA,iEACA,8DACA,8DAOL,mDAAyB,+CAAzB,CAAyB,uCAAzB,CAAyB,yBAGtB,+EAWsC,2D,26CDd9E,GAKa,EAAA1jB,sC,kFE7Bb,WACA,OASA,GAFA,MAEA,Q,GACA,OACA,O,wECAwB,4BAA6E,YAA6B,kB,uBAA7B,4DDMrG,iBA0CI,WAAqBqT,EAA2C4B,EAAgC3B,EAAgCqZ,GAA3G,KAAAtZ,mBAA2C,KAAA4B,aAAgC,KAAA3B,MAAgC,KAAAqZ,iCALtH,KAAAjZ,gBAAkB,IAAI,EAAAC,aAChC,KAAAC,QAAkB,KAClB,KAAAnD,MAAgB,OAChB,KAAAF,WAA4C,CAAC,MAAQ,EAAA9B,yBAAyBqgB,iBAAkB,UAAY9rB,KAAKsC,UAAW,WAAa,I,OAKzI,YAAAuO,SAAA,aAIA,YAAAC,gBAAA,WACI9Q,KAAKyN,MAAQ,OACbzN,KAAKsQ,IAAIS,iBAGb,YAAAE,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAE,QAAA,WACIpR,KAAKyN,MAAQ,QAGjB,YAAA4D,gBAAA,SAAgBC,GACZtR,KAAKyN,MAAQ,QAyBjB,YAAAse,sBAAA,WACI/rB,KAAK2pB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyBqgB,iBAAkB,UAAY9rB,KAAKsC,UAAW,WAAc,M,iCA5D3IrF,GAAyB,2K,iCAAzBA,EAAyB,sjBCnDtC,4BAAgD,sDAAsB,EAAAoU,gBAAA,MAElE,0BACI,4BACI,4BACI,4BACJ,iBACJ,iBACA,4BACI,4BACI,4BACI,2BACI,6BACJ,iBAEA,gCAAyD,wCAAS,EAAA0a,2BAC9D,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAvBwB,sCAYI,uE,2nBDUZ,CACR,EAAAna,QAAQ,eAAgB,CACpB,EAAAnE,MAAM,aACF,EAAAoE,MAAM,CAAE,QAAW,KAErB,EAAApE,MAAM,OACJ,EAAAoE,MAAM,CAAE,QAAW,KAErB,EAAAC,WAAW,eAAgB,EAAAV,QAAQ,UACnC,EAAAU,WAAW,eAAgB,EAAAV,QAAQ,YAEzC,EAAAQ,QAAQ,YACJ,CACA,EAAAE,WACI,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAT,QAAQ,QAAS,EAAAS,MAAM,CAAE,QAAW,OAGxC,EAAAC,WACI,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAT,QAAQ,MAAO,EAAAS,MAAM,CAAC,QAAW,a,EA1BjD,GAiCa,EAAA5U,6B,kFEnDb,WACA,OAUA,GAHA,MACA,MAEA,QACA,SACA,SAMA,GALA,OACA,MAEA,OACA,OACA,Q,0GCdY,6BAAqE,YAAW,kB,6BAAX,+C,yBAuBrC,yBACI,6BAAsD,YAC1D,kB,uBAD0D,yD,yBAU1D,yBAA0D,YAAqB,kB,uBAArB,6C,mDAF9D,yBACI,yBAAI,YAAe,iBACnB,8BACA,4BACI,2BAAiD,uHAAyC,iBAC1F,2BAAoD,yHAA2C,iBACnG,iBACJ,iB,0BANQ,2CACA,6D,mDAUJ,yBACI,+BAAmB,2FAAnB,iBACJ,iB,8CADuB,+CAA+B,mCAA/B,CAA+B,uCD5BlG,iBAmDI,WAAoBgV,EAAgC3B,EAAgCqZ,EACxE9U,EAAsCoK,EAA8CgL,EACpFlV,GAFQ,KAAA9C,aAAgC,KAAA3B,MAAgC,KAAAqZ,iCACxE,KAAA9U,eAAsC,KAAAoK,kBAA8C,KAAAgL,4BACpF,KAAAlV,kBAhBF,KAAArE,gBAAkB,IAAI,EAAAC,aAChC,KAAAC,QAAkB,KAElB,KAAAnD,MAAgB,OAChB,KAAAue,sBAAuB,EACvB,KAAA5B,gBAA8B,CAC1B,MAAS,CACL,CAAE,MAASpqB,KAAKif,gBAAgB2B,OAAQ,6CAA+C,QAAU,EAAM,SAAW,GAClH,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAQ,0CAA4C,QAAU,EAAM,SAAW,GAC/G,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAQ,uCAAyC,QAAU,EAAM,SAAW,GAC5G,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAQ,4CAA8C,QAAU,EAAM,SAAW,K,OASzH,YAAA/P,SAAA,WACI7Q,KAAKiqB,0BAA0BK,cAAetqB,KAAKoqB,iBACnDpqB,KAAKisB,WAAa,IAAI,EAAA9iB,KAAM,GAAInJ,KAAKif,gBAAgB9U,SAAUnK,KAAKif,gBAAgB9U,WAGxF,YAAA2G,gBAAA,WACI9Q,KAAKyN,MAAQ,OACbzN,KAAKsQ,IAAIS,iBAGb,YAAAE,YAAA,aAIA,YAAAC,eAAA,aAIA,YAAAE,QAAA,WACIpR,KAAKyN,MAAQ,QAGjB,YAAA4D,gBAAA,SAAiBC,GACbtR,KAAKyN,MAAQ,QAGjB,YAAA8D,QAAA,WACI,GAAKvR,KAAKisB,WAAW9pB,MAAQnC,KAAKisB,WAAW9pB,KAAKwE,OAAS,EAAI,CAG3D,IAA8C,IAAzC3G,KAAKisB,WAAW9pB,KAAKqP,QAAS,KAC/B,OAAO,EAIX,IAAI,IAAIvH,EAAI,EAAGA,EAAIjK,KAAKisB,WAAWhkB,MAAMwJ,aAAa9K,OAAQsD,IAC5D,GAAiF,IAA5EjK,KAAKisB,WAAWhkB,MAAMwJ,aAAaxH,GAAGpD,MAAMqlB,QAAS,MAAO,IAAKvlB,OACpE,OAAO,EAKX,OAAO,EAEN,OAAK3G,KAAKisB,WAAW9pB,MAAQnC,KAAKisB,WAAW9pB,KAAKqP,QAAS,MACrD,GAMf,YAAA2a,cAAA,sBAEInsB,KAAK+U,gBAAgBrS,2BAA4B1C,KAAKsC,UAAU4I,SAAS/I,KAAMnC,KAAKisB,YAAa3Z,MAAM,SAAA9L,GAEnG,EAAKlE,UAAU4I,SAASlC,SAASE,KAAM1C,GAEvC,EAAKkK,gBAAgB8F,KAAM,EAAKlU,WAEhC,EAAK8pB,kBAEL,EAAKJ,sBAAuB,KAE5BtZ,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAA0Z,iBAAA,SAAkBJ,GAAlB,WAEIjsB,KAAK+U,gBAAgBhS,8BAA+B/C,KAAKsC,UAAU4I,SAAS/I,KAAM8pB,EAAW9pB,MAAOmQ,MAAM,SAAA9L,IAErC,IAA5D,EAAKlE,UAAU4I,SAASlC,SAASwI,QAASya,IAC3C,EAAK3pB,UAAU4I,SAASlC,SAASiX,OAAQ,EAAK3d,UAAU4I,SAASlC,SAASwI,QAASya,GAAc,GAGrG,EAAKvb,gBAAgB8F,KAAM,EAAKlU,WAEhC,EAAK8pB,qBAEL1Z,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAA2Z,iBAAA,SAAkBL,GAAlB,WACIjsB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAiQ,sBAAuB,CAC7DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAQ,+BAAkC,IAAMqL,EAAWhkB,MAAQ,IAC1HjI,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAQ,uBAClE5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAEjB7nB,KAAKiS,WAAWuF,QAAU+P,UAAUjR,WAAW,SAAA9P,GACpE,EAAK6lB,iBAAkBJ,OAI/B,YAAAM,eAAA,SAAgBN,GACZjsB,KAAK2pB,+BAA+Bnc,cAAe,CAAE,MAAS,EAAA/B,yBAAyB8gB,eAAgB,UAAavsB,KAAKsC,UAAW,WAAc2pB,KAGtJ,YAAAG,gBAAA,WACIpsB,KAAKisB,WAAW9pB,KAAO,GACvBnC,KAAKisB,WAAWhkB,MAAQjI,KAAKif,gBAAgB9U,SAC7CnK,KAAKisB,WAAWljB,YAAc/I,KAAKif,gBAAgB9U,UAGvD,YAAAqiB,iBAAA,WACIxsB,KAAKosB,kBACLpsB,KAAKgsB,sBAAuB,GAGhC,YAAAD,sBAAA,WACI/rB,KAAKgsB,sBAAuB,GAGhC,YAAAhC,MAAA,WACIhqB,KAAK2pB,+BAA+Bnc,cAAe,CAAE,MAAS,EAAA/B,yBAAyBkf,cAAe,UAAa3qB,KAAKsC,UAAW,WAAc,MAGrJ,YAAAsQ,MAAA,SAAOD,GACL3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCArJzCrV,GAA0B,4S,iCAA1BA,EAA0B,sqC,2BCvDvC,4BAEI,+BAAwC,wFACpC,+BAEI,8BAEA,4BACI,yBACI,iCAA6D,YAAoC,iBACrG,iBACJ,iBACA,4BAAgD,sDAAsB,EAAA+T,gBAAA,MAClE,2BACI,6BACI,6BACI,6BACJ,iBACJ,iBACA,6BACI,+BACI,8BACI,gCACI,6BACI,0BACI,0BACI,8BACJ,iBACA,+BAGA,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BACI,+BAQA,0BACI,0BACI,gCAAmB,wEAAnB,iBACJ,iBACA,+BAGA,6BACI,iCAAsE,wCAAS,EAAA8a,mBAC3E,8BACJ,iBAOJ,iBACJ,iBAYJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACI,wBAEA,6BACI,8BACI,iCAA8C,wCAAS,EAAAnC,WACnD,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,MA3FiB,oDAIgE,8EAG7C,qDACf,iDAe2B,wEASJ,qEAUuB,yDAA6B,uCAEhD,uEAI8C,uD,qxBD3B9E,CACR,EAAApY,QAAS,eAAgB,CACrB,EAAAnE,MAAO,aACH,EAAAoE,MAAO,CAAE,QAAW,KAExB,EAAApE,MAAO,OACH,EAAAoE,MAAO,CAAE,QAAW,KAExB,EAAAC,WAAY,eAAgB,EAAAV,QAAS,UACrC,EAAAU,WAAY,eAAgB,EAAAV,QAAS,YAEzC,EAAAQ,QAAS,YACL,CACI,EAAAE,WACI,SAAU,CACN,EAAAD,MAAO,CAAE,QAAW,IACpB,EAAAT,QAAS,QAAS,EAAAS,MAAO,CAAE,QAAW,OAG9C,EAAAC,WACI,SAAU,CACN,EAAAD,MAAO,CAAE,QAAW,IACpB,EAAAT,QAAS,MAAO,EAAAS,MAAO,CAAE,QAAW,a,EA1B5D,GAiCa,EAAAvU,8B,kFEvDb,SACA,OAQA,GAFA,MAEA,QAMA,GAHA,OACA,MAEA,Q,GACA,OACA,O,0GChBI,6BAAqE,YAAW,kB,6BAAX,+CDkBzE,iBA0CC,WAAmB2U,EAAgCgY,EAA8DN,EACxG1K,EAA8ClK,GADpC,KAAA9C,aAAgC,KAAAgY,4BAA8D,KAAAN,iCACxG,KAAA1K,kBAA8C,KAAAlK,kBAdvD,KAAAnE,QAAkB,KAClB,KAAArD,WAA4C,CAAE,MAAS,EAAA9B,yBAAyBkf,cAAe,UAAa3qB,KAAKsC,UAAW,WAAc,IAC1I,KAAA8nB,gBAA8B,CAC7B,MAAS,CACR,CAAE,MAASpqB,KAAKif,gBAAgB2B,OAAO,6CAA8C,QAAU,EAAM,SAAW,GAChH,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAO,0CAA2C,QAAU,EAAM,SAAW,GAC7G,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAO,uCAAwC,QAAU,EAAM,SAAW,GAC1G,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAO,4CAA6C,QAAU,EAAM,SAAW,GAC/G,CAAE,MAAS5gB,KAAKif,gBAAgB2B,OAAO,yCAA0C,QAAU,EAAM,SAAW,K,OAS9G,YAAA/P,SAAA,WACC7Q,KAAKiqB,0BAA0BK,cAActqB,KAAKoqB,kBAGnD,YAAAtZ,gBAAA,aAIA,YAAAG,YAAA,aAGA,YAAAC,eAAA,sBAEClR,KAAK+U,gBAAgBlS,8BAA8B7C,KAAKsC,UAAU4I,SAAS/I,KAAMnC,KAAKisB,YAAY3Z,MAAK,SAAA9L,GACtG,EAAKmjB,+BAA+Bnc,cAAc,CAAE,MAAS,EAAA/B,yBAAyBqgB,iBAAkB,UAAa,EAAKxpB,UAAW,WAAckE,OACjJkM,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAsY,YAAA,WAQC,OAAO,GAGR,YAAAvK,OAAA,WACC1gB,KAAK2pB,+BAA+Bnc,cAAc,CAAC,MAAQ,EAAA/B,yBAAyBqgB,iBAAkB,UAAa9rB,KAAKsC,UAAW,WAAc,MAG/I,YAAAsQ,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA3D/CxV,GAA4B,6N,iCAA5BA,EAA4B,yzB,2BC1CzC,4BACI,8BAEA,+BAAyC,yFAA8B,EAAA+T,oBAEnE,4BACI,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BACI,6BACI,6BACI,6BACI,6BACJ,iBACJ,iBACA,8BACI,+BACI,gCAAqC,wEAArC,iBACJ,iBACJ,iBACJ,iBAEA,0CAAiB,uEAA6D,iBAE9E,6BACI,wBAEA,8BACI,8BACI,iCAA8C,wCAAS,EAAAwP,YACnD,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAGJ,iB,+BAhDS,oDAqB0C,4CAAiB,6BAK/B,wDAUyC,oD,uNDdjE,CACX,EAAA9O,QAAQ,YACP,CACC,EAAAE,WACC,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAT,QAAQ,QAAS,EAAAS,MAAM,CAAE,QAAW,OAGrC,EAAAC,WACC,SAAU,CACV,EAAAD,MAAM,CAAE,QAAW,IACnB,EAAAT,QAAQ,MAAO,EAAAS,MAAM,CAAE,QAAW,a,EAhBvC,GAuBa,EAAA1U,gC,kFE1Cb,KACA,MACA,MAEA,MAEA,MANA,IAOA,SAEA,S,GAIA,O,2GCZE,4BAAqE,YAAW,kB,6BAAX,+C,mDAGnE,0BACE,wCAAiB,gHAAiC,4FAAuC,iBAC3F,iB,iCADmB,8D,mDAEnB,0BACE,sCAAe,gHAAiC,4FAAuC,iBACzF,iB,iCADiB,8D,mDAEjB,0BACE,8CAAuB,gHAAiC,4FAAuC,iBACjG,iB,iCADyB,8D,mDAEzB,0BACE,0CAAmB,gHAAiC,4FAAuC,iBAC7F,iB,iCADqB,8D,yBAXvB,0BACE,8BAGA,8BAGA,8BAGA,8BAGF,kB,6BAZO,oDAGA,yDAGA,iEAGA,8DDET,iBAWI,WAAqB4U,EAA2BE,EAAgC4C,EACpEoK,EAA8CwN,GADrC,KAAA1a,UAA2B,KAAAE,aAAgC,KAAA4C,eACpE,KAAAoK,kBAA8C,KAAAwN,SAJ1D,KAAA7b,QAAkB,KAClB,KAAAnD,MAAgB,M,OAMhB,YAAAoD,SAAA,aAGA,YAAA6b,cAAA,SAAepb,GACI,SAAVA,EACDtR,KAAK2sB,aAEW,SAAVrb,EACNtR,KAAK4sB,aAEW,WAAVtb,GACNtR,KAAK6sB,gBAIb,YAAAF,WAAA,WACwB,aAAf3sB,KAAKyN,QACNzN,KAAKyN,MAAQ,QAIrB,YAAAmf,WAAA,WACwB,QAAf5sB,KAAKyN,MAEAzN,KAAKqH,cAAcylB,WAIrB9sB,KAAK+sB,eAHL/sB,KAAKyN,MAAQ,WAMI,aAAfzN,KAAKyN,MACXzN,KAAK+sB,eAEgB,qBAAf/sB,KAAKyN,MAE6B,MAAnCzN,KAAKqH,cAAcsS,aACpB3Z,KAAKyN,MAAQ,eAGbzN,KAAK+sB,eAGY,iBAAf/sB,KAAKyN,OACXzN,KAAK+sB,gBAIb,YAAAA,aAAA,sBACI/sB,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQvK,gBAAiBxH,KAAKqH,eAAgBiL,MAAM,SAAA5N,GAErB,MAA3BA,EAAO0U,kBACR,EAAK3L,MAAQ,mBACb,EAAKpG,cAAgB3C,GAEQ,MAAvBA,EAAOiV,cACb,EAAKlM,MAAQ,eACb,EAAKpG,cAAgB3C,IAGrB,EAAKuN,WAAWqC,OAEhB,EAAKrC,WAAa,EAAK4C,aAAauC,KAAM,EAAAiQ,sBAAuB,CAC7DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB,EAAKtF,WAAWuF,QAAQ5G,QAAU,EAAKqO,gBAAgB2B,OAAQ,oDAC/D,EAAK3O,WAAWuF,QAAQ8P,WAAa,EAAKrI,gBAAgB2B,OAAQ,2CAClE,EAAK3O,WAAWuF,QAAQwV,WAAa,EAAK/N,gBAAgB2B,OAAQ,sBAEzC,EAAK3O,WAAWuF,QAAU+P,UAAUjR,WAAW,SAAA9P,GACpE,EAAKimB,OAAOQ,SAAS,CAAC,oCAG9Bva,OAAM,SAAE2B,GACR,EAAKzB,MAAOyB,OAKpB,YAAAwY,aAAA,sBACI7sB,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQxK,aAAcvH,KAAKqH,eAAgBiL,MAAM,SAAA+B,GAClD,EAAKpC,WAAWqC,UAChB5B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAC,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAxG/CrW,GAAuB,oL,iCAAvBA,EAAuB,0QCpBpC,4BACE,8BAEA,8BAcF,kB,MAhBO,oDAEA,6E,oJDYP,GAKa,EAAAA,2B,kFEpBb,WAEA,Q,GAEA,OACA,O,gFCDQ,yBAA4C,YAAoC,kB,uBAApC,iE,yBAD9C,yBACE,6BACF,kB,6BADM,0D,yFAIR,0BACE,4BACE,8BAAgC,uGAAyB,qGAAzD,iBACF,iBACA,4BACE,0BAA8E,gG,uBAA+F,iBAC7K,0BAA8C,uG,uBAA6F,iBAC7I,iBACF,iB,gCANW,oDAAwB,wBAAxB,CAAwB,oBAAxB,CAAwB,yBAAxB,CAAwB,2BAG5B,6EAAmC,4EACyC,iG,yBAU3E,yBAAsD,YAAkB,kB,uBAAlB,6C,yBAH1D,2BACE,yBACE,6BACA,6BACF,iBACF,kB,8BAFQ,mE,mDANV,4BACE,2BAAG,0FAAoB,sBAA+D,sBAA2E,6BAAyD,YAC1N,iBACA,+BAMF,iB,iCAR4N,sEAEpN,4C,yBAOR,4BACE,6BACA,YACF,kB,8BADE,uE,mDAbJ,0BACE,+BAUA,+BAIA,4BACE,2BAAsC,6F,uBAAoF,iBAC5H,iBACF,iB,gCAjBwB,qEAUA,8EAKyC,iGD1BrE,iBAoBI,WAAqByV,GAArB,WAAqB,KAAAA,UATX,KAAAmb,QAA6B,IAAI,EAAAvc,aAUvC3Q,KAAKqf,WAAa,EAAAC,WAAWnV,QAAO,SAAEoV,GAClC,EAAKxN,QAAQxO,wBAAyB,EAAK4pB,YAAa,EAAK3T,QAAQ/V,KAAM,EAAK+V,QAAQ9V,OAAQ,EAAK2D,cAAc1D,WAAY2O,MAAM,SAAAkN,GACjID,EAAS7R,KAAM8R,S,OAK3B,YAAA3O,SAAA,WACI7Q,KAAKmtB,YAAc,KACnBntB,KAAKgI,SAAW,KAChBhI,KAAKotB,YAAa,GAGtB,YAAA9M,kBAAA,SAAmBpJ,GACflX,KAAKgI,SAAWkP,EAAEqJ,KAAKrd,GACvBlD,KAAKotB,WAAgC,MAAjBptB,KAAKgI,UAG7B,YAAAqlB,cAAA,sBACSrtB,KAAKotB,aACNptB,KAAKktB,QAAQ1W,KAAM,MAEnBxW,KAAK+R,QAAQhK,uBAAwB/H,KAAKgI,SAAUhI,KAAKwZ,QAAQvR,OAAQqK,MAAM,SAAA+B,GAC3E,EAAKmF,QAAQH,UAAW,EACxB,EAAKG,QAAQjL,OAAS,CAClBkL,KAAM,UACNtR,UAAWkM,EAASlM,UACpBC,KAAMiM,EAASjM,KACfH,MAAOoM,EAASpM,UAEpByK,OAAO,SAAAwE,GACP,EAAKgW,QAAQ1W,KAAMU,EAAEtE,YAKjC,YAAA0a,qBAAA,WACI,IAAIC,EAAgBvtB,KAAKwZ,QAAQvR,MACjBjI,KAAKwZ,QAAQ/V,KAE7BzD,KAAKwZ,QAAQH,UAAW,EAExBrZ,KAAKwZ,QAAQjL,OAAS,CAClBkL,KAAM,mBACNxR,MAAOslB,IAIf,YAAAC,WAAA,sBACwBxtB,KAAKwZ,QAAQvR,MACjBjI,KAAKwZ,QAAQ/V,KAE7B,GAAKzD,KAAKwZ,QAAQH,SAAW,CACzB,IAAI9K,EAASvO,KAAKwZ,QAAQjL,OAEN,oBAAfA,EAAOkL,MACRzZ,KAAKwZ,QAAQH,UAAW,EACxBrZ,KAAKwZ,QAAQjL,OAAS,MAED,WAAfA,EAAOkL,OACbzZ,KAAKktB,QAAQ1W,KAAM,MAEnBxW,KAAK+R,QAAQ7J,uBAAwBqG,EAAOpG,UAAWoG,EAAOnG,MAAOkK,MAAM,SAAA+B,GACvE,EAAKmF,QAAQH,UAAW,EACxB,EAAKG,QAAQjL,OAAS,KAEtB,EAAK4e,YAAc,KACnB,EAAKC,WAAmC,MAApB,EAAKD,eACzBza,OAAO,SAAAwE,GACP,EAAKgW,QAAQ1W,KAAMU,EAAEtE,a,iCApF5BlW,GAAwB,mC,iCAAxBA,EAAwB,o9BCbrC,4BACE,kCACE,4BACE,6BAGF,iBACA,4BAAoC,YAAyC,iBAC7E,+BASA,8BAmBF,iBACF,kB,MAlCU,+DAI8B,qFAC/B,wDASA,yD,iPDVT,GAMa,EAAAA,4B,kFEbb,WAEA,QACA,S,GAEA,OACA,O,4ICFI,0BACE,4BACE,8BAAgC,qGAAuB,qGAAvD,iBACF,iBACA,4BACE,0BAA8E,gG,uBAA2F,iBACzK,0BAAsC,+F,uBAAoF,iBAC1H,0BAA8C,8F,uBAAkF,iBAClI,iBACF,iB,gCAPW,oDAAwB,sBAAxB,CAAwB,oBAAxB,CAAwB,yBAAxB,CAAwB,2BAG5B,6EAAmC,wEACyB,+FACO,+F,sBAIxE,4BACE,6BACF,kB,yBACA,4BACE,6BACA,YACF,kB,8BADE,uE,yBAEF,4BACE,6BACA,YACF,kB,8BADE,gE,mDAVJ,0BACE,+BAGA,+BAIA,+BAIA,4BACE,2BAAsC,6F,uBAAoF,iBAC5H,iBACF,iB,gCAdwB,oEAGA,qEAIA,oEAKyC,iGDnBrE,iBAoBI,WAAqBqV,GAArB,WAAqB,KAAAA,UATX,KAAAmb,QAA6B,IAAI,EAAAvc,aAUvC3Q,KAAKqf,WAAa,EAAAC,WAAWnV,QAAO,SAAEoV,GAClC,EAAKxN,QAAQ1J,mBAAoB,EAAKmR,QAAQlR,cAAe,EAAKmlB,UAAW,MAAOnb,MAAM,SAAAkN,GACtFD,EAAS7R,KAAM8R,S,OAK3B,YAAA3O,SAAA,WACI7Q,KAAKytB,UAAY,KACjBztB,KAAK0tB,OAAS,KACd1tB,KAAKotB,YAAa,GAGtB,YAAA9M,kBAAA,SAAmBpJ,GACflX,KAAK0tB,OAASxW,EAAEqJ,KAAK1Z,MACrB7G,KAAKotB,WAA8B,MAAfptB,KAAK0tB,QAG7B,YAAAL,cAAA,sBACSrtB,KAAKotB,aACNptB,KAAKktB,QAAQ1W,KAAM,MAEnBxW,KAAK+R,QAAQvJ,kBAAmBxI,KAAK0tB,OAAQ1tB,KAAKwZ,QAAQvR,OAAQqK,MAAM,SAAA+B,GACpE,EAAKmF,QAAQH,UAAW,EACxB,EAAKG,QAAQjL,OAAS,CAClBkL,KAAM,UACNtR,UAAWkM,EAASlM,UACpBF,MAAOoM,EAASpM,UAEpByK,OAAO,SAAAwE,GACP,EAAKgW,QAAQ1W,KAAMU,EAAEtE,YAKjC,YAAA+a,aAAA,sBACI3tB,KAAKktB,QAAQ1W,KAAM,MAEnBxW,KAAK+R,QAAQpJ,WAAY3I,KAAKwZ,QAAQvR,MAAO,OAAQjI,KAAKwZ,QAAQoU,YAAYtb,MAAM,SAAA1P,GAChF,EAAK4W,QAAQH,UAAW,EACxB,EAAKG,QAAQjL,OAAS,CAClBkL,KAAM,SACN7W,KAAMA,MAEV8P,OAAO,SAAAwE,GACP,EAAKgW,QAAQ1W,KAAMU,EAAEtE,WAI7B,YAAAib,YAAA,WACI7tB,KAAKwZ,QAAQH,UAAW,EAExBrZ,KAAKwZ,QAAQjL,OAAS,CAClBkL,KAAM,WAId,YAAA+T,WAAA,sBAEI,GAAKxtB,KAAKwZ,QAAQH,SAAW,CAEzB,IAAI9K,EAASvO,KAAKwZ,QAAQjL,OAEN,UAAfA,EAAOkL,MACRzZ,KAAKwZ,QAAQH,UAAW,EACxBrZ,KAAKwZ,QAAQjL,OAAS,MAED,WAAfA,EAAOkL,MACbzZ,KAAKktB,QAAQ1W,KAAM,MAEnBxW,KAAK+R,QAAQrJ,kBAAmB6F,EAAOpG,WAAYmK,MAAM,SAAA+B,GACrD,EAAKmF,QAAQH,UAAW,EACxB,EAAKG,QAAQjL,OAAS,QACtBmE,OAAO,SAAAwE,GACP,EAAKgW,QAAQ1W,KAAMU,EAAEtE,WAGJ,UAAfrE,EAAOkL,OACbzZ,KAAKktB,QAAQ1W,KAAM,MAEnBxW,KAAK+R,QAAQnJ,WAAW5I,KAAKwZ,QAAQoU,WAAYrf,EAAO3L,KAAKT,MAAOmQ,MAAM,SAAA+B,GACtE,EAAKmF,QAAQH,UAAW,EACxB,EAAKG,QAAQjL,OAAS,QACtBmE,OAAO,SAAAwE,GACP,EAAKgW,QAAQ1W,KAAMU,EAAEtE,a,iCAnG5BhW,GAAoB,mC,iCAApBA,EAAoB,y1BCdjC,4BACE,kCACE,4BAAsB,YAA0B,iBAChD,4BAAoC,YAAiB,iBACrD,gCAUA,8BAgBF,iBACF,kB,MA7B0B,6DACc,oDAC/B,wDAUA,yD,uODNT,GAMa,EAAAA,wB,kFEdb,KAEA,MACA,MACA,MAEA,MANA,IASA,SACA,S,GAGA,O,2GCZE,4BAAqE,YAAW,kB,6BAAX,+C,mDAGnE,0BACE,wCAAiB,gHAAiC,4FAAuC,iBAC3F,iB,iCADmB,8D,mDAEnB,0BACE,sCAAe,gHAAiC,4FAAuC,iBACzF,iB,iCADiB,8D,mDAEjB,0BACE,8CAAuB,gHAAiC,4FAAuC,iBACjG,iB,iCADyB,8D,mDAEzB,0BACE,0CAAmB,gHAAiC,4FAAuC,iBAC7F,iB,iCADqB,8D,yBAXvB,0BACE,8BAGA,8BAGA,8BAGA,8BAGF,kB,6BAZO,oDAGA,yDAGA,iEAGA,8DDET,iBAWE,WAAqBmV,EAA2BE,EAAgC4C,EACtEoK,EAA8CwN,GADnC,KAAA1a,UAA2B,KAAAE,aAAgC,KAAA4C,eACtE,KAAAoK,kBAA8C,KAAAwN,SAJtD,KAAA7b,QAAkB,KAClB,KAAAnD,MAAgB,M,OAMhB,YAAAoD,SAAA,aAGA,YAAA6b,cAAA,SAAepb,GACI,SAAVA,EACDtR,KAAK2sB,aAEW,SAAVrb,EACNtR,KAAK4sB,aAEW,WAAVtb,GACNtR,KAAK6sB,gBAIb,YAAAF,WAAA,WACwB,aAAf3sB,KAAKyN,QACNzN,KAAKyN,MAAQ,QAIrB,YAAAmf,WAAA,WACwB,QAAf5sB,KAAKyN,MACAzN,KAAKqH,cAAcylB,WAIrB9sB,KAAK+sB,eAHL/sB,KAAKyN,MAAQ,WAMI,aAAfzN,KAAKyN,MACXzN,KAAK+sB,eAEgB,qBAAf/sB,KAAKyN,MAE6B,MAAnCzN,KAAKqH,cAAcsS,aACpB3Z,KAAKyN,MAAQ,eAGbzN,KAAK+sB,eAGY,iBAAf/sB,KAAKyN,OACXzN,KAAK+sB,gBAIb,YAAAA,aAAA,sBACI/sB,KAAK+R,QAAQ3K,kBAAmBpH,KAAKqH,eAAgBiL,MAAM,SAAA5N,GAEvB,MAA3BA,EAAO0U,kBACR,EAAK3L,MAAQ,mBACb,EAAKpG,cAAgB3C,GAEQ,MAAvBA,EAAOiV,cACb,EAAKlM,MAAQ,eACb,EAAKpG,cAAgB3C,IAGvB,EAAKuN,WAAWqC,OAEhB,EAAKrC,WAAa,EAAK4C,aAAauC,KAAM,EAAAiQ,sBAAuB,CAC3DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEzB,EAAKtF,WAAWuF,QAAQ5G,QAAU,EAAKqO,gBAAgB2B,OAAQ,oDAC/D,EAAK3O,WAAWuF,QAAQ8P,WAAa,EAAKrI,gBAAgB2B,OAAQ,2CAEzC,EAAK3O,WAAWuF,QAAU+P,UAAUjR,WAAW,SAAA9P,GACpE,EAAKimB,OAAOQ,SAAS,CAAC,oCAI9Bva,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAka,aAAA,sBACI7sB,KAAK+R,QAAQxK,aAAcvH,KAAKqH,eAAgBiL,MAAM,SAAA+B,GAClD,EAAKpC,WAAWqC,UAChB5B,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAC,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAnG/C9V,GAAyB,oL,iCAAzBA,EAAyB,4QCpBtC,4BACE,8BAEA,8BAcF,kB,MAhBO,oDAEA,6E,oJDYP,GAKa,EAAAA,6B,kFEpBb,KAGA,MAGA,MANA,IAOA,SAGA,S,GAEA,M,2JCcK,0BAAoI,2FAAuB,kBAAgB,iCAAkB,iB,gCAA3G,0E,mDAClF,0BAAkI,2FAAuB,gBAAc,+BAAgB,iB,gCAArG,wE,qBAIlF,iC,KAAgD,+B,qBAChD,iC,KAA8C,mCDhBnD,iBAeI,WAAqBqtB,EAAkDrV,EAAsC9C,GAAxF,KAAAmY,sBAAkD,KAAArV,eAAsC,KAAA9C,UAPhH,KAAAyF,QAAkB,cAQXxX,KAAKihB,QAAUlP,EAAQkP,UACvBjhB,KAAKkhB,aAAelhB,KAAKihB,SAAWlP,EAAQmP,eAClDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBnP,EAAQqP,gBAElEphB,KAAKkhB,aAAelhB,KAAK8tB,cAAc,eAAiB9tB,KAAK8tB,cAAc,U,OAGzE,YAAAjd,SAAA,aAGH,YAAAid,cAAA,SAActW,GACbxX,KAAKwX,QAAUA,EAEA,gBAAZA,EACFxX,KAAK+tB,UAAY/tB,KAAKkqB,oBAAoBtJ,OAAO,qBAE9B,cAAZpJ,EACPxX,KAAK+tB,UAAY/tB,KAAKkqB,oBAAoBtJ,OAAO,mBAE9B,WAAZpJ,IACPxX,KAAK+tB,UAAY/tB,KAAKkqB,oBAAoBtJ,OAAO,qBAKzC,YAAAhO,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCArClE3U,GAAiB,sH,iCAAjBA,EAAiB,yfCtB9B,4BACI,4BACA,6BAEA,4BAWI,4BACI,uBACT,4BAEC,4BACC,yBACC,YACD,iBACD,iBAEA,2BACC,6BACA,6BACD,iBAEA,6BACC,wCACA,wCACD,iBAEQ,iBACA,wBACJ,iBACR,iBAtCA,kB,MAqBM,yDAK4C,mDACA,mDAI/B,8DACA,8D,2MDhBnB,GAMa,EAAAA,qB,kFEtBb,KAEA,MAFA,IAIA,SAIA,SACA,SACA,SACA,SAMA,GALA,OACA,MACA,MACA,OACA,MACA,Q,yLChBA,0BACE,0BACE,4BAEI,uBACA,4BAEI,8BACI,8BAA8D,iGAAkC,WAAhG,iBACA,6BACI,4BACJ,iBACA,0BACI,6BACJ,iBACJ,iBAEA,+BACI,+BAA8D,iGAAkC,eAAhG,iBACA,8BACI,8BACJ,iBACA,2BACI,8BACJ,iBACJ,iBAEA,8BACI,iCAA8C,yFAC1C,8BACJ,iBACJ,iBACJ,iBACA,yBACL,iBACD,iBACF,iB,gCA5BuC,wCAAc,yBAC/B,4EASiB,wCAAe,wBAChC,4E,yBA4BE,gCAAoF,YAAuC,kB,uBAApE,uCAA6B,4D,mDANhG,6BACI,+BACI,6BACJ,iBACA,6BACI,gCAAsE,6GAClE,kCACJ,iBACJ,iBACA,wBACJ,iB,iCAL8E,0DAC1D,0D,yBAUR,gCAAuD,YAAc,kB,uBAAlC,wCAAoB,6C,mDALnE,6BACI,+BAA+C,6BAA4C,iBAC3F,6BACI,gCAAkD,iGAC9C,wBACA,kCACJ,iBACJ,iBACA,wBACJ,iB,iCAN0D,8CAEtC,gD,qBAOZ,6B,qBACA,6B,yBAII,gCAA8E,YAAkB,kB,uBAA9C,4CAA4B,6C,qBAclF,6B,qBACA,6B,wBAGA,6B,8BACI,qC,wBACJ,6B,8BACI,qC,mDApDxB,0BACI,0BACI,mCACI,+BAWA,+BAUA,6BACI,+BACI,oCACA,oCACJ,iBACA,8BACI,iCAA0D,0GACtD,mCACJ,iBACJ,iBACA,yBACJ,iBACA,8BACI,gCAAmD,8BAAwC,iBAC3F,8BACI,gCAA4C,qGAA5C,iBACJ,iBACA,yBACJ,iBACA,8BACI,gCACI,qCACA,qCACJ,iBACA,8BACI,kCAEA,kCAEJ,iBACA,yBACJ,iBAEA,8BACI,yBACA,8BACI,iCAA8C,yFAC1C,8BACJ,iBACA,iCAAwE,0FACpE,8BACJ,iBACJ,iBACA,yBACJ,iBACJ,iBACJ,iBACJ,iB,mDApEiB,iDAWuB,4CAYV,uDACA,2DAGgD,wDAC9C,0DAQgC,mDAMlC,uDACA,2DAGH,uDAEA,2DAYuC,mDDhFlE,iBA8DC,WAAoB+T,EACXjS,EACA+U,EACAqV,EACAhY,EACA8b,GALW,KAAAjc,UACX,KAAAjS,eACA,KAAA+U,eACA,KAAAqV,sBACA,KAAAhY,cACA,KAAA8b,aA3DT,KAAAC,kBAA4B,EAQ5B,KAAAC,iBAA0B,CACzB,CAAE,SAAY,EAAAvhB,eAAewhB,eAAgB,MAASnuB,KAAKkqB,oBAAoBtJ,OAAO,6CACtF,CAAE,SAAY,EAAAjU,eAAeyhB,SAAU,MAASpuB,KAAKkqB,oBAAoBtJ,OAAO,uCAChF,CAAE,SAAY,EAAAjU,eAAe0hB,YAAa,MAASruB,KAAKkqB,oBAAoBtJ,OAAO,2CAMpF,KAAAze,KAAe,KAKf,KAAA0H,UAAoB,KAkBpB,KAAAykB,YAAsB,EAYtB,KAAAC,WAAqB,E,OAUrB,YAAA1d,SAAA,sBACC7Q,KAAKguB,WAAWQ,mBAAmB,EAAG,KAAKlc,MAAK,SAAAmc,GAE/C,EAAKC,gBAAkBD,EAAiBE,UAEJ,IAAhC,EAAKD,gBAAgB/nB,SACxB,EAAK2nB,YAAa,EAClB,EAAKL,kBAAmB,GAGzB,EAAKM,WAAY,KAEf7b,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZ3S,KAAK+R,QAAQtK,oBAAmB,GAAM6K,MAAK,SAAAjS,GAG1C,IADA,IAAIkS,EAAa,GACRtI,EAAI,EAAGA,EAAI5J,EAAMsG,SAAUsD,EAAG,CACtC,IAAIxG,EAAOpD,EAAM4J,IAEb,EAAKiI,YAAYiT,iBAAiB1hB,EAAKgP,UAAY,EAAKP,YAAYM,kBAAkB/O,EAAKgP,QAAShP,EAAKtB,QAC5GoQ,EAAWrJ,KAAK7I,EAAM4J,IAGxB,EAAK5J,MAAQkS,KAEXG,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZ,IAAIic,EAAS1uB,IAAM,2BACC,cAAhBF,KAAK6uB,SACRD,EAAS1uB,IAAM,0CAKhB,IAAIokB,EAA+B,CAClCwK,WAAY,EACZC,mBAAmB,EACnBC,IAAKJ,GAGN5uB,KAAKivB,SAAW,IAAI,EAAAC,aAAa5K,GAEjCtkB,KAAKivB,SAASE,gBAAkB,SAACC,EAAeC,GAC/CA,EAAKC,OAAO,OAAQ,EAAKntB,MAEH,MAAlB,EAAK0H,WACRwlB,EAAKC,OAAO,YAAa,EAAKzlB,WAE3B,EAAK0lB,gBACRF,EAAKC,OAAO,WAAY,EAAKC,iBAG/BvvB,KAAKivB,SAASO,mBAAqB,SAACJ,GACnC,EAAKtvB,aAAa4B,SAEnB1B,KAAKivB,SAASQ,eAAiB,SAAClP,EAAWlM,EAAeuP,EAAapiB,GACtE,EAAKkuB,QAAQvV,cAActT,MAAQ,GACnC,EAAK/G,aAAagC,YAEnB9B,KAAKivB,SAASU,cAAgB,SAACpP,EAAWlM,EAAkBuP,EAAgBpiB,GAC3E,IAAM6F,EAAgB3G,KAAK8J,MAAM6J,GAEjChN,EAAcinB,WAAa,EAAKA,WAGhC,IADA,IAAIsB,EAAiC,KAC5B3lB,EAAI,EAAGA,EAAI,EAAKykB,gBAAgB/nB,SAAUsD,EAAG,CACrD,IAAI4lB,EAAsB,EAAKnB,gBAAgBzkB,GAE3C4lB,EAAI/qB,MAAQ,EAAKgrB,mBACpBF,EAAiBC,GAInBxoB,EAAcyoB,iBAAmB,EAAKA,iBACtCzoB,EAAcuoB,eAAiBA,EAEX,cAAhB,EAAKf,OACR,EAAK5c,WAAa,EAAK4C,aAAauC,KAAK,EAAA9a,wBAAyB,CAAEgb,UAAU,IAG9E,EAAKrF,WAAa,EAAK4C,aAAauC,KAAK,EAAAva,0BAA2B,CAAEya,UAAU,EAAMC,qBAAqB,IAG5G,EAAKtF,WAAWuF,QAAQnQ,cAAgBA,GAEzCrH,KAAKivB,SAASc,YAAc,SAACxP,EAAWlM,EAAkBuP,EAAgBpiB,GACzE,IAAMoR,EAAQlS,KAAK8J,MAAM6J,GAEzB,EAAKzB,MAAM,CAAEA,MAAOA,MAItB,YAAAod,QAAA,WAE4B,MAAvBhwB,KAAKivB,SAASgB,OAAiBjwB,KAAKivB,SAASgB,MAAMtpB,OAAS,EAC/D3G,KAAKivB,SAASiB,YAGdlwB,KAAK4S,MAAM,CACVhC,QAAS5Q,KAAKkqB,oBAAoBtJ,OAAO,mBACzChO,MAAO,MAKV,YAAAud,gBAAA,SAAgB7e,EAAO7N,GAErBzD,KAAKsuB,WADO,aAAT7qB,GAQL,YAAAuV,OAAA,WACChZ,KAAKiuB,kBAAmB,GAGzB,YAAA/U,OAAA,WACClZ,KAAKiuB,kBAAmB,GAIlB,YAAArb,MAAP,SAAaD,GACX3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC1EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAlMzDtU,GAAqB,wO,iCAArBA,EAAqB,qD,OAAA,K,q7EC3BlC,gCAsCA,iC,MAtCK,mFAsCA,4F,wqBDjBL,GAMa,EAAAA,yB,kFE5Bb,KACA,MACA,MAFA,IAOA,SACA,SACA,S,GAEA,OACA,MACA,M,yGCAQ,4BAAqE,YAAW,kB,6BAAX,+C,sBAY7D,4BACI,6BACI,6BACI,2BAA0B,6BAA+D,iBAC7F,iBACJ,iBACJ,kB,sBAcoB,2BAA4B,6BAA6C,kB,mDAOzE,gCAAwC,6HACpC,6BACJ,kB,mDACA,gCAAwC,+JACpC,6BACJ,kB,mDAhBR,4BACI,4BACE,2BACE,YACA,gCACF,iBACF,iBACA,4BACI,gCAAsB,iHAClB,6BACJ,iBACA,kCAGA,kCAGJ,iBACJ,iB,yDAhBS,8EACD,qDACM,+CAOE,4CAGA,6C,yBAtB5B,4BACI,+BACI,4BACI,yBACI,4BAAwB,6BAA2C,iBACvE,iBACJ,iBACA,4BACI,+BAmBJ,iBACJ,iBACJ,kB,uCArBgB,gD,mDAwBR,0BACI,gCAAsB,8HAClB,6BACJ,iBACJ,kB,yBAtDhB,4BACI,4BACI,4BACI,6BACI,6BACI,yBAAI,YAAa,iBACrB,iBACJ,iBACJ,iBAEA,+BAQA,8BA8BA,6BACI,8BACI,gCAKJ,iBACJ,iBACJ,iBACJ,kB,uBArDwB,4CAKX,gEAQD,8DAgCS,6CDlD7B,iBAkBC,WAAmB0T,EAAkC8C,EAAsC4X,EAClFxN,EAAsC/M,GAD5B,KAAAH,UAAkC,KAAA8C,eAAsC,KAAA4X,SAClF,KAAAxN,kBAbT,KAAArO,QAAkB,KAcjB5Q,KAAKihB,QAAU/O,EAAY+O,UAC3BjhB,KAAKkhB,aAAelhB,KAAKihB,SAAW/O,EAAYgP,eAChDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBhP,EAAYkP,gB,OAGvE,YAAAvQ,SAAA,sBAEC7Q,KAAK+R,QAAQ9K,sBAAsBqL,MAAK,SAAA+B,GACvC,EAAK8U,KAAO9U,EAAS8U,QAEnBzW,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAAyd,SAAA,SAAStc,GACR9T,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAzY,sBAAuB,CAC/D0Y,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQzX,KAAK+T,GAC7B9T,KAAKiS,WAAWuF,QAAQnR,OAAQ,EAChCrG,KAAKiS,WAAWuF,QAAQpF,mBAAmBkE,WAAU,SAAC5Q,GACrD,IAAM0hB,EAAM,CACXnf,MAAOvC,EAAKmN,aAAagN,eACzB/a,IAAKY,EAAKZ,IACVurB,WAAY3qB,EAAK2qB,WACjBC,eAAgB5qB,EAAK4qB,eACrBC,MAAO7qB,EAAK6qB,MACZ3c,SAAUlO,EAAKkO,UAGhBE,EAAI0c,MAAMtnB,KAAKke,OAIjB,YAAAqJ,OAAA,SAAOtuB,GACNnC,KAAKysB,OAAOQ,SAAS,CAAC,8BAA+B9qB,KAGtD,YAAAuuB,OAAA,SAAOC,GAAP,WACC3wB,KAAK+R,QAAQ9L,cAAc0qB,EAAK7rB,KAAKwN,MAAK,SAAA5M,GAEzC,EAAKuM,WAAa,EAAK4C,aAAauC,KAAK,EAAAzY,sBAAuB,CAC/D0Y,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtB,EAAKtF,WAAWuF,QAAQ/H,MAAO,EAC/B,EAAKwC,WAAWuF,QAAQnF,OAAS3M,EACjC,EAAKuM,WAAWuF,QAAQnR,OAAQ,EAChC,EAAK4L,WAAWuF,QAAQpF,mBAAmBkE,WAAU,SAAAsa,GACpDD,EAAK1oB,MAAQ2oB,EAAI/d,aAAagN,qBAE7BnN,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAke,SAAA,SAAS/c,EAAsBpO,GAA/B,WACC1F,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAiQ,sBAAuB,CAC/DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,+BAAiC,KAAOlb,EAAKuC,MAAQ,IACnHjI,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,uBACjE5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,SAE/BzD,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,SAAA9P,GAC3C,EAAKuL,QAAQjM,iBAAiBJ,EAAKZ,KAAKwN,MAAK,SAAA+B,GAC5CP,EAAI0c,MAAQ1c,EAAI0c,MAAM/pB,QAAO,SAACI,EAAO4e,EAAOqL,GAC3C,OAAOjqB,EAAM/B,MAAQY,EAAKZ,UAGzB4N,OAAM,SAACC,GACT,EAAKC,MAAMD,UAKd,YAAAC,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAnGtCpU,GAA0B,2L,iCAA1BA,EAA0B,uhDCpBvC,4BACI,4BACA,6BAGA,4BAEI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,8BAEA,+BA2DJ,iBACJ,kB,MA9Da,oDAEY,gD,qJDAzB,GAKa,EAAAA,8B,kFEpBb,KACA,MADA,IAEA,Q,+BAGA,aAcI,WAAoB0T,GAAA,KAAAA,a,OAEpB,YAAApB,SAAA,WACI7Q,KAAK+wB,SAAW,IAAI,EAAA5jB,SAGxB,YAAA6jB,QAAA,WACIhxB,KAAKiS,WAAWqC,OAChBtU,KAAK+wB,SAASrjB,KAAM1N,KAAK6uB,S,iCAjBpBhwB,GAA0B,oC,iCAA1BA,EAA0B,8rBCVvC,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,6BACI,+BACI,4BACI,4BACI,4BACI,4BACJ,iBAEA,gCAAsD,+DAClD,yBACA,gCACI,6BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBAEA,6BACI,6BACI,8BACI,iCAAsB,wCAAS,EAAAoT,WAAA,UAE3B,4BACI,8BACJ,iBACJ,iBACA,iCAAsB,wCAAS,EAAA+e,aAE3B,4BACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MAhC0E,iDAqBR,wE,uPD/BlE,GAKa,EAAAnyB,8B,kFEVb,KAGA,MAHA,IAMA,SAKA,GAFA,OACA,MACA,QAEA,S,oFCgFW,sB,qBACA,sB,qBACA,sB,qBACA,sB,yBAEA,4BACC,yBAAI,sBAAO,wBAAG,YAAsF,iBAAK,YAAiD,iBAC1J,yBAAI,YAA8B,iBACnC,kB,uCAFe,kHAA2F,qFACrG,kE,yBAEL,4BACC,yBAAI,sBAAO,wBAAG,YAAsF,iBAAK,YAAkD,iBAC3J,yBAAI,YAA8B,iBACnC,kB,uCAFe,kHAA2F,sFACrG,kE,yBAEL,4BACC,yBAAI,8BAAe,wBAAG,YAAoB,iBAA1C,iBACA,yBAAI,YAA8B,iBACnC,kB,uCAFuB,gDAClB,kE,yBAEL,4BACC,yBAAI,mBAAI,wBAAG,YAAwB,iBAAK,8BAAc,wBAAG,YAAyB,iBAAK,iBACvF,yBAAI,YAA8B,iBACnC,kB,uCAFY,oDAA8C,qDACrD,kE,yBAEL,4BACC,yBAAI,sBAAO,wBAAG,YAAwB,iBAAK,qBAAK,wBAAG,YAAyB,iBAAK,iBACjF,yBAAI,YAA8B,iBACnC,kB,uCAFe,oDAAqC,qDAC/C,kE,mHAIL,4BAA2Q,YAAyB,kB,uCAA/N,wIAAsM,sD,mDAC3Q,gCAAiH,kIAAiC,eACjJ,6BAED,iB,0CAHsB,wD,mDAItB,gCAAiH,kIAAiC,eACjJ,6BAED,iB,0CAHsB,wD,mDAItB,gCAAgH,kIAAiC,cAChJ,6BAED,iB,0CAHsB,uD,2KA3CzB,6BACC,6BACC,6BACC,sBACA,4BAA6E,YAAiB,iBAC/F,iBACA,6BACC,6BACA,6BACA,6BACA,8BAEA,+BAIA,+BAIA,+BAIA,gCAIA,gCAID,iBACA,8BACC,+BACA,mCAIA,mCAIA,mCAID,iBACD,iBAEA,8BACC,8BACC,8BACC,gCAA4C,8BAAmE,iBAC/G,mCAAwF,sGAAsD,iBAC/I,iBACD,iBACA,8BACC,8BACC,gCAA+C,8BAAkE,iBACjH,mCAA2F,qGAAmF,iBAC/K,iBACD,iBACA,8BACC,iCAAsB,uHACrB,8BACD,iBACD,iBACD,iBACD,iB,yDArEwD,yIAGU,wJACc,gDAG1E,kHACA,kHACA,sGACA,yGAEC,kHAIA,kHAIA,4GAIA,sGAIA,yGAMA,iEACoE,iEAIA,iEAID,iEAU/D,6EACG,4EAA8E,2CAKjF,gFACG,+EAAiF,0CAAoC,0C,mDAnEvI,4BACU,4BAER,6BAEC,4BAEC,iCA4EA,6BACC,gCAAoE,kIACnE,6BACD,iBACA,gCAAoE,iIACnE,6BACD,iBACA,iCAAoE,+HACnE,8BACD,iBACD,iBACD,iBAED,iBAED,iBACK,iB,8DA5FG,iDA6EI,qEAGA,qEAGA,sE,6FAlHb,4BAAsE,mHACzD,4BACX,yBAAI,6BAAQ,YAAiB,iBAAS,iBACvC,iBACA,4BACE,YACF,iBACA,4BACC,4BACE,6BAAQ,aAAsB,iBAChC,iBACD,iBASA,6BACC,uBACD,iBACD,iBACA,gC,8CAxBsB,kEAER,gDAGX,0DAGG,uJACM,qDAeR,wDDhER,iBAuBI,WAAqBkT,EAAuC8C,EAAsCqV,GAA7E,KAAAnY,UAAuC,KAAA8C,eAAsC,KAAAqV,sBAdrG,KAAA+G,WAAatF,OAAOuF,KAIpB,KAAAC,SAA4B,GAI5B,KAAAC,QAAiB,GAIjB,KAAAC,eAAyB,MAGlBrxB,KAAKoxB,QAAU,CACX,CAAE3X,KAAMyQ,EAAoBtJ,OAAQ,uBAAyB0Q,KAAM,YAAaC,UAAU,GAC1F,CAAE9X,KAAMyQ,EAAoBtJ,OAAQ,6BAA+B0Q,KAAM,aAAcC,UAAU,EAAOC,MAAO,KAC/G,CAAE/X,KAAMyQ,EAAoBtJ,OAAQ,yBAA2B0Q,KAAM,iBAAkBC,UAAU,IAGrGvxB,KAAKyxB,U,OAGT,YAAAA,QAAA,sBAEQzxB,KAAK+R,QAAQnD,eAAe,OAAO0D,MAAM,SAAA6e,GAEjD,EAAKA,SAAWA,KAEJze,OAAM,SAAE2B,GACR,EAAKzB,MAAOyB,OAMxB,YAAA+U,SAAA,SAAUsI,GAAV,WAII1xB,KAAK+R,QAAQ3D,cAAesjB,EAASA,SAAS,GAAG5sB,KAAMwN,MAAK,SAAArD,GAEjE,EAAKA,QAAUA,KACNyD,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAgf,UAAA,SAAUC,GAAV,WAE0B,MAAjBA,GACD5xB,KAAK+R,QAAQhD,QAAS6iB,EAAc9sB,KAAMwN,MAAM,SAAAuf,GAC5CD,EAAgBC,EAGhB,EAAKJ,aACL/e,OAAM,SAAE2B,GACR,EAAKzB,MAAOyB,OAmB3B,YAAA7F,4BAAA,SAA4BD,GAA5B,WAICvO,KAAK+R,QAAQvD,4BAA4BD,GAAQ+D,MAAM,SAAA+B,OAEnD3B,OAAM,SAAEC,GACX,EAAKC,MAAOD,OAIX,YAAAmf,aAAA,SAAaF,GAAb,WAE0B,MAAjBA,GACD5xB,KAAK+R,QAAQ7C,kBAAmB0iB,EAAc9sB,IAAK9E,KAAKiP,SAAUqD,MAAM,SAAArD,GACpE,EAAKA,QAAUA,KACfyD,OAAM,SAAE2B,GACR,EAAKzB,MAAOyB,OAKxB,YAAA0d,YAAA,SAAYH,GAAZ,WAC0B,MAAjBA,GACD5xB,KAAK+R,QAAQ/C,iBAAkB4iB,EAAc9sB,IAAK9E,KAAKiP,SAAUqD,MAAM,SAAArD,GACnE,EAAKA,QAAUA,KAIfyD,OAAM,SAAE2B,GACR,EAAKzB,MAAOyB,OAKjB,YAAAzB,MAAP,SAAcD,GACW3S,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC/DE,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,IAGzE,YAAAqf,eAAA,SAAevM,EAAeoM,GAC1B,OAAOA,EAAQ/sB,KAGnB,YAAAmtB,OAAA,SAAO3gB,EAAYxM,GAEdwM,EAAM2C,OAAOie,cAAcC,UAAUC,SAAS,QAAW9gB,EAAM2C,OAAOke,UAAUC,SAAS,SACzFpyB,KAAKqyB,WAAavtB,EACpB9E,KAAKqyB,SAAW,MAGhBryB,KAAKqyB,SAAWvtB,EAChB9E,KAAKopB,SAAS,CAACsI,SAAS,CAAC,CAAC5sB,IAAIA,SAKjC,YAAA2B,OAAA,SAAO6rB,GAAP,WAEItyB,KAAK+R,QAAQnD,eAAe0jB,GAAUhgB,MAAM,SAAA6e,GAC7C,EAAKA,SAAWA,KACJze,OAAM,SAAE2B,GACR,EAAKzB,MAAOyB,MAG1BrU,KAAKqxB,eAAiBiB,GAGvB,YAAAC,gBAAA,SAAgBhkB,EAAwBqV,GACvCrV,EAAOikB,eAAiB5O,EAExB5jB,KAAKwO,4BAA4BD,IAGlC,YAAAkkB,yBAAA,SAAyBlkB,GAWvB,OATOA,EAAOmkB,WAAWC,SAAS,0BAA4BpkB,EAAOmkB,WAAWC,SAAS,yBASlFpkB,GAGN,YAAAqkB,iBAAA,SAAkBrkB,GAEpBvO,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAAhZ,2BAA4B,CAC5DiZ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAE/BvX,KAAKiS,WAAWuF,QAAQqb,UAAYtkB,G,iCA9KzB1S,GAAqB,+H,iCAArBA,EAAqB,g/ICNlC,4BACC,4BACC,4BAEC,0BAAmB,wCAAS,EAAA4K,OAAO,UAClC,4BACD,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,cAClC,4BACD,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,eAClC,4BACD,iBACA,0BAAmB,wCAAS,EAAAA,OAAO,eAClC,6BACD,iBAED,iBAEA,uBAED,iBACD,iBAEA,6BACC,6BAEA,gCACC,6BACC,6BACC,6BAAqC,8BAA6D,iBAClG,6BAAqC,8BAAkE,iBACvG,6BAAqC,8BAAwD,iBAE7F,qBACD,iBACD,iBACM,6BACL,0CA8HK,iBACP,iBACA,iBACD,kB,MAnK8C,2FAGI,+FAGC,gGAGA,gGAyBrB,mDAAoB,mC,0vEDvClD,GAOa,EAAA5K,yB,kFEtBb,KACA,MADA,I,+GCSY,2DAA2K,iGAAqB,iB,gCAArB,iC,mDAC3K,0DAA+J,iGAAqB,iB,gCAArB,iC,mDAC/J,6CAA+F,iGAAqB,iB,gCAArB,iCDH3G,iBAuBI,WAAoBoW,GAAA,KAAAA,a,OAVpB,sBACI,wBAAS,C,IADb,SACe1D,GACXvO,KAAKuO,OAASA,G,gCAUlB,YAAAsC,SAAA,aAGA,YAAA6P,OAAA,WAC0B,MAAjB1gB,KAAK8yB,UACN9yB,KAAK8yB,SAASC,UAGI,MAAjB/yB,KAAKgzB,UACNhzB,KAAKgzB,SAASD,UAGI,MAAjB/yB,KAAKizB,UACNjzB,KAAKizB,SAASF,UAGlB/yB,KAAKiS,WAAWqC,QAGpB,YAAA0c,QAAA,WACIhxB,KAAKiS,WAAWqC,Q,iCAxCXlW,GAA0B,oC,iCAA1BA,EAA0B,4D,OAAA,M,6pBCbvC,4BAOI,4BACI,4BACI,2DACA,0DACA,4CACJ,iBACJ,iBAEA,oBACA,4BACI,4BACI,4BACI,gCAAsB,wCAAS,EAAAsiB,YAC3B,4BAAO,6BACP,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAlBwD,6JACD,kJACd,gG,oBDHzC,GAKa,EAAAtiB,8B,kFEbb,KACA,MADA,IAEA,QAEA,OAOA,SAGA,GADA,OACA,QAKA,GAHA,OACA,MAEA,Q,kGClBI,6BAAqE,YAAW,kB,6BAAX,+C,sBACrE,6BAAsE,6BAAuE,kB,sBAGzI,yBACI,6BACJ,kB,sBAsCwE,2BAA8E,iCAAkB,kB,mDAL5G,yBACI,4BACI,yBAAI,YAAc,iBAClB,+BAA4E,2FAAuB,8EAAnG,iBACA,6BACI,6BACJ,iBACJ,iBACJ,iB,8DANY,6CACoC,uDAAmC,kBAAnC,CAAmC,uCAEpE,0E,sBAUf,2BAAuD,sCAAuB,kB,mDAlB1F,yBACI,yBACI,+BACI,8BASJ,iBACJ,iBAEA,4BACI,+BAAkE,+FAAkC,wGAApG,iBACA,6BACI,6BACJ,iBACJ,iBACA,4BACI,2BAA6B,a,oBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAxBgB,4DAagC,mDAAyB,uBAE1D,iDAIsB,yF,yBAvBzC,4BACI,+BA4BJ,kB,8BA5BQ,gG,yBAuCQ,gCAA2G,YAA+B,kB,uBAAtD,6BAAuB,4D,mDANvH,yBACI,yBAGI,gCAA4H,2FACxH,2BACA,kCACJ,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,oBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,yDAfgB,yEAA4B,wDAA+C,mBAEvE,gGAK4B,mDAAyB,uBAGpC,yF,yBAfzC,4BACI,gCAoBJ,kB,8BApBQ,gG,mDAwBJ,yBACI,yBAEI,+BAAiE,2FAA8B,8EAA/F,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,4BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZgD,kDAAwB,mBAIxB,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,+BAgBJ,kB,8BAhBQ,gG,mDAoBJ,yBACI,yBAEI,+BAAkH,kI,mBAAlH,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZgD,kDAAwB,mDAIxB,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,gCAgBJ,kB,8BAhBQ,gG,mDAqBJ,yBACI,yBAEI,4BACI,+BAAyE,2FAAzE,iBACA,6BACJ,iBAEA,4BACI,+BAA4E,2FAA5E,iBACA,6BACJ,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,0BACI,4BAA6B,a,oBAA2C,iBAC5E,iBACA,6BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAnBoH,+DAAoB,kDAAxG,qCAAqC,WAArC,CAAqC,mBAKkD,gEAAqB,mDAA5G,qCAAsC,WAAtC,CAAsC,mBAMtB,mDAAyB,uBAGpC,0F,yBApBzC,4BAEI,gCAyBJ,kB,8BAzBQ,gG,mDA6BJ,yBACI,yBAEI,+BAAmE,2FAA8B,8EAAjG,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,4BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZkD,kDAAwB,mBAI1B,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,+BAgBJ,kB,8BAhBQ,gG,mDAoBJ,yBACI,yBAEI,+BAAmE,2FAA8B,8EAAjG,iBAEJ,iBACA,yBACI,+BAAkE,+FAAkC,wGAApG,iBACJ,iBACA,yBACI,2BAA6B,Y,mBAA2C,iBAC5E,iBACA,4BACI,4BAA4C,6GAA6B,iBAC7E,iBACJ,iB,oCAZkD,kDAAwB,mBAI1B,mDAAyB,uBAGpC,wF,yBAXzC,4BACI,+BAgBJ,kB,8BAhBQ,gG,yBA/JpB,0BACQ,+BACI,+BACI,yBACI,4BAAwB,6BAAiF,iBACzG,4BAAwB,6BAAqF,iBAC7G,4BAAwB,6BAAmF,iBAC3G,6BAA4C,8BAAmF,iBACnI,iBACJ,iBAEA,iCAiCA,iCAwBA,iCAoBA,iCAoBA,iCA8BA,iCAoBA,iCAkBR,iBACJ,kB,8BAtKmB,gEAiCA,8DAwBA,mEAoBA,8DAoBA,iEA8BA,+DAoBA,kE,mDAgCR,gCAAsD,+HAAwC,6BAAuE,kB,mDACrK,iDAA0H,iJAAwQ,iB,+DAAzT,0DAAgD,+CAAhD,CAAgD,uBAAhD,CAAgD,+CAAhD,CAAgD,gCAAhD,CAAgD,yB,mDAH7H,yBACE,4BACE,kCACA,gDACF,iBACA,4BACE,+BAA0C,+FAAkC,wGAA5E,iBACF,iBACA,4BACE,2BAA6B,Y,mBAA2C,iBAC1E,iBACA,6BACE,4BAA4C,6GAA6B,iBAC3E,iBACF,iB,yDAZY,yDACc,0DAGH,kEAAuB,oCAGb,wF,yBAlBxC,0BACG,+BACE,+BACE,4BAAuB,6BAAiF,iBACxG,4BAAuB,6BAAqF,iBAC5G,4BAAuB,6BAAmF,iBAC1G,4BAAwB,8BAAmF,iBAC7G,iBACA,gCACE,gCAeD,iBACJ,iBACF,kB,8BAjBW,wF,mDApM/B,0BAEI,6BACI,6BACI,4BAEI,4BAEI,+BAmLA,+BA4BJ,iBAEA,4BACI,2BAAgC,kGAC5B,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,gCAzNyB,kEAmLA,mE,mDAkDrB,gCAAwC,2FACpC,6BACJ,iB,iDAFmG,mCDxO3H,iBAiDI,WAAqB2T,EAAkCC,EAA6BrI,EACzEsI,EAA+B6C,GADrB,KAAA/C,UAAkC,KAAAC,WAA6B,KAAArI,WACzE,KAAAsI,aAA+B,KAAA6C,oBA1B1C,KAAAlE,QAAkB,KAElB,KAAAuB,UAAoB,EAeX,KAAAuF,gBAA0B,EAInC,KAAAwb,iBAA2B,EAE3B,KAAAC,kBAA4B,E,OAK5B,YAAAtiB,SAAA,WAEI7Q,KAAK2X,yBAA2B,IAAI,EAAAxK,SAGxC,YAAA0K,OAAA,WAC+B,aAAxB7X,KAAKsC,UAAUH,MAAgG,IAAzEnC,KAAKyX,kBAAkBpO,WAAWrJ,KAAKsC,UAAUH,MAAMyE,OAAOD,SACvG3G,KAAKkzB,gBAAkB,IAI3B,YAAArZ,eAAA,SAAeuZ,EAAY9hB,GACzB8hB,EAAWvsB,MAAQyK,GAGrB,YAAA+hB,aAAA,SAAc/hB,EAAY8hB,GAOtB,IAAIE,EAActzB,KAAKyX,kBAAkBpO,WAAWrJ,KAAKsC,UAAUH,MAAMyE,OAIzE5G,KAAKuzB,UAAWD,IAKpB,YAAAC,UAAA,SAAWC,GAGPxzB,KAAKmzB,kBAAmB,EAGxBK,EAAO9sB,MAAM,SAAUiZ,EAAGC,GAEtB,OAAoB,MAAfD,EAAE9V,WAAqC,KAAhB8V,EAAE9V,UACnB,EAEc,MAAf+V,EAAE/V,WAAqC,KAAhB+V,EAAE/V,WACvB,EAGK,IAAIU,KAAMoV,EAAE9V,WACb,IAAIU,KAAMqV,EAAE/V,cAIhC,IAAM,IAAII,EAAI,EAAGA,EAAIupB,EAAO7sB,OAAQsD,IAAM,CACtC,IAAIwpB,EAAOD,EAAOvpB,EAAI,GAClBse,EAAUiL,EAAOvpB,GAEhBse,EAAQ1e,UACT4pB,EAAK3pB,QAAU,UAAM4pB,iBAAkB,IAAInpB,KAAM,IAAIA,KAAMge,EAAQ1e,WAAYG,UAxBtE,QA2BTypB,EAAK3pB,QAAU,EAAAjB,QAGd4qB,EAAK5pB,YAAc0e,EAAQ1e,YAC5B7J,KAAKmzB,kBAAmB,GAI3BK,EAAO7sB,OAAS,IACjB6sB,EAAOA,EAAO7sB,OAAS,GAAGmD,QAAU,EAAAjB,UAI5C,YAAA8qB,gBAAA,WACI,IAAIH,EAA0BxzB,KAAKyX,kBAAkBpO,WAAWrJ,KAAKsC,UAAUH,MAAMyE,OAEjF0D,EAAqB,IAAI,EAAAM,cAI7B,GAHAN,EAAIT,UAAY,KAChBS,EAAIR,QAAU,KAEe,UAAxB9J,KAAKsC,UAAUmB,KAEhB6G,EAAIzD,MAAQ7G,KAAK2J,SAASQ,cAEzB,GAA6B,aAAxBnK,KAAKsC,UAAUmB,KAEhB+vB,EAAO7sB,OAAS,GACa,GAAzB3G,KAAKkzB,iBAAiD,MAAxBlzB,KAAKkzB,gBACpC5oB,EAAIzD,MAAQ2sB,EAAOxzB,KAAKkzB,iBAAiBrsB,MAGzCyD,EAAIzD,MAAQ2sB,EAAO,GAAG3sB,OAI1ByD,EAAIzD,MAAQ,CAAE,KAAQ7G,KAAKwJ,cAAcqS,aAAc,YAAe,IAE7B,iBAApC7b,KAAKwJ,cAAcqS,aACpBvR,EAAIzD,MAAMpD,KAAO,eAEyB,YAApCzD,KAAKwJ,cAAcqS,aACzBvR,EAAIzD,MAAMpD,KAAO,UAEyB,UAApCzD,KAAKwJ,cAAcqS,aACzBvR,EAAIzD,MAAMpD,KAAO,QAEyB,eAApCzD,KAAKwJ,cAAcqS,aACzBvR,EAAIzD,MAAMpD,KAAO,aAEyB,SAApCzD,KAAKwJ,cAAcqS,aACzBvR,EAAIzD,MAAMpD,KAAO,OAEyB,cAApCzD,KAAKwJ,cAAcqS,eACzBvR,EAAIzD,MAAMpD,KAAO,mBAIxB,GAA6B,SAAxBzD,KAAKsC,UAAUmB,KAAkB,CACvC,IAAImwB,EAAQ5zB,KAAKoY,qCAAsCpY,KAAKsC,UAAUH,MAEjEyxB,EAAMjtB,OAAS,IAChB2D,EAAIzD,MAAQ+sB,EAAM,GAAGzxB,MAI7BqxB,EAAOtqB,KAAMoB,GAEgB,aAAxBtK,KAAKsC,UAAUH,OAChBnC,KAAKkzB,gBAAkBM,EAAO7sB,OAAS,GAG3C3G,KAAKuzB,UAAWC,GAEhBxzB,KAAK8U,kBAAkB/D,iBAG3B,YAAA8iB,aAAA,SAAcpO,GACVzlB,KAAKkzB,gBAAkBzN,GAG3B,YAAAqO,eAAA,SAAgBxxB,GACZ,IAAIyxB,EAA4B,GAOhC,OALA/zB,KAAKyX,kBAAkBpO,WAAW/G,EAAUH,MAAMyE,OAAOyD,SAAS,SAAA+oB,GAC9DA,EAAWvsB,MAAM4K,aAAapH,SAAS,SAAA2pB,GACnCD,EAAS7qB,KAAM8qB,SAGhBD,GAGX,YAAAE,oBAAA,SAAqBC,GACjB,IAAIC,EAAS,KASb,OAPAD,EAAOziB,aAAapH,SAAS,SAAA+pB,GACF,kBAAlBA,EAAOF,SACRC,EAASC,EAAOvtB,UAKjBstB,GAGX,YAAAE,iBAAA,SAAkB/pB,EAAoB0pB,GAClC1pB,EAAIzD,MAAQ,IAAI0D,KAAMypB,GAAMhqB,UAAU9F,YAG1C,YAAAkU,qCAAA,SAAsCC,GAClC,IAAM,IAAIpO,EAAI,EAAGA,EAAIjK,KAAKwJ,cAAcH,WAAW1C,OAAQsD,IAAM,CAC7D,IAAIC,EAAYlK,KAAKwJ,cAAcH,WAAWY,GAE9C,GAAmB,SAAdC,EAAKzG,MAAmByG,EAAK/H,OAASkW,EAAoB,CAG3D,IAAIC,GADJpO,EAAsBA,GACFgB,SAASlC,SAG7B,GAAKsP,EAAS3R,OAAS,EACnB,MAAmB,WAAduD,EAAK/H,KACC,UAAMoW,eAAeD,GAGrBA,GAMvB,OAAO,MAGX,YAAA5I,OAAA,SAAQ4kB,GAIJ,IAFA,IAAIN,EAAMh0B,KAAKyX,kBAAkBpO,WAAWrJ,KAAKsC,UAAUH,MAEjD8H,EAAI,EAAGA,EAAI+pB,EAAIptB,OAAOD,OAAQsD,IAAM,CAC/B+pB,EAAIptB,OAAOqD,GAEZJ,YAAcyqB,EAAQzqB,WAC5BmqB,EAAIptB,OAAOqZ,OAAQhW,EAAG,GAI9BjK,KAAKuzB,UAAWS,EAAIptB,SAGxB,YAAAwD,iBAAA,SAAkBF,GAAlB,WACQE,GAAmB,EAQvB,OANApK,KAAKwJ,cAAcH,WAAWgB,SAAS,SAAA/H,GAC9B,EAAKA,UAAUH,OAAS+H,EAAK/H,OAC9BiI,EAAmBF,EAAKE,qBAIzBA,GAGX,YAAAgK,SAAA,WAEIpU,KAAK2X,yBAAyBjK,KAAM1N,KAAKyX,mBAEzCzX,KAAKiS,WAAWqC,QAGpB,YAAAC,SAAA,WACIvU,KAAKiS,WAAWqC,QAGpB,YAAA1B,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAnQ/CjV,GAA4B,gM,iCAA5BA,EAA4B,iF,w+FC7CzC,4BACI,8BACA,8BAEA,4BACI,6BAGJ,iBAEA,+BAEI,+BACI,4BAGI,4BACI,gCAkOJ,iBAEJ,iBAEA,6BAEI,6BACI,6BAII,mCAGJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,MAvQS,oDACA,uDAGG,gDAYa,wDA6OO,kD,ykCDnOhB,CACR,CACI,EAAAkU,QAAS,YAAa,CAClB,EAAAE,WAAY,YAAa,CACrB,EAAAD,MAAO,CACH0iB,QAAS,IAEb,EAAAnjB,QAAS,YAEb,EAAAU,WAAY,YAAa,CACrB,EAAAD,MAAO,CACH0iB,QAAS,IAEb,EAAAnjB,QAAS,mB,EAlB7B,GAuBa,EAAA1T,gC,kFE7Cb,+BAgCA,OA1BQ,EAAA6a,eAAP,SAAuBuY,GAGjB,IAFA,IAAI0D,EAAW,GAELvqB,EAAI,EAAGA,EAAI6mB,EAAInqB,SAAUsD,EACV,mBAAhB6mB,EAAI7mB,GAAG9H,MACU,uBAAhB2uB,EAAI7mB,GAAG9H,MAEbqyB,EAAStrB,KAAK4nB,EAAI7mB,IAItB,OAAOuqB,GAQN,EAAAd,iBAAP,SAAwBe,GACjB,IAAMtW,EAAMsW,EAAQrW,aACdsW,EAAQD,EAAQlW,cAAgB,EAEtC,OAAOkW,EAAQnW,iBAAmB,KAAQoW,EAAQ,GAAK,IAAM,IAAOA,EAAQ,KAAQvW,EAAM,GAAK,IAAM,IAAOA,GAGpH,EAhCA,G,+FCCA,W,iECDA,4BACE,+BAA4H,0FAA0B,iBACxJ,kBDCA,iBAWE,WAAYnJ,GAJH,KAAA2f,SAAU,EAET,KAAA/Y,YAAc,IAAI,EAAAjL,aAG1B3Q,KAAKgV,MAAQA,E,OAGf,YAAA4f,MAAA,SAAMra,GAEJ,OADAva,KAAK20B,SAAU,EACR30B,KAAKgV,MAAMmF,eAGpB,YAAA0a,SAAA,SAASta,GACPva,KAAKgV,MAAMmF,cAAczK,UAG3B,YAAAsgB,QAAA,WACEhwB,KAAK4b,YAAYpF,Q,iCArBRzY,GAAiB,oC,iCAAjBA,EAAiB,sXCP9B,8B,KAAK,gC,wCDGL,GAIa,EAAAA,qB,kFEPb,S,OAEA,2B,OAKI,YAAAqR,UAAA,SAAU0lB,EAAcruB,GACpB,OAAKquB,GAAUruB,EAIRquB,EAAMruB,QAAO,SAAA8Z,GAAQ,OAA+B,IAA/B9Z,EAAO+K,QAAQ+O,EAAKpe,SAHrC2yB,G,iCAHNj3B,I,qEAAAA,EAA8B,U,EAJ3C,GAIa,EAAAA,kC,kFCNb,KACA,MADA,IAEA,QAEA,QAGA,SAOA,GALA,OAEA,OACA,MAEA,Q,kGCbI,6BAAqE,YAAW,kB,6BAAX,+C,sBACrE,6BAAsE,6BAAuE,kB,mDA6B/F,6BACE,YAEA,+BAGE,4IAA2C,sKAH7C,iBAYF,iB,qGAdE,qDAGE,mEACA,6DAA8D,iCAA9D,CAA8D,oBAA9D,CAA8D,wDAA9D,CAA8D,0BAA9D,CAA8D,uBAA9D,CAA8D,wB,yBAiBlE,2BAAuF,Y,mBAAsC,kB,uCAAtC,wF,mDAzB7F,yBACI,yBAEE,gCAiBF,iBACA,4BACE,+BAA+D,+FAA6B,+EAA5F,iBACF,iBACA,4BACE,6BACF,iBACA,4BACE,2BAAkC,6GAAwB,iBAC5D,iBACJ,iB,yDA3B6D,yDAmBf,kEAAuB,oCAG5D,yE,mDArCzB,4BACI,4BACI,+BACI,+BACI,yBACI,4BAAwB,6BAAiF,iBACzG,4BAAwB,6BAAqF,iBAC7G,4BAAwB,8BAAmF,iBAC3G,6BAA4C,8BAAmF,iBACnI,iBACJ,iBACA,6BACI,+BA+BJ,iBACJ,iBACJ,iBAEA,6BACE,4BAAgC,kGAA4B,8BAAoE,iBAClI,iBACJ,iB,gCAtCoB,6DDZhD,iBAkBI,WAAqBkU,EAAkCC,EAA6BrI,EAAsCsI,GAArG,KAAAF,UAAkC,KAAAC,WAA6B,KAAArI,WAAsC,KAAAsI,aAZ1H,KAAArB,QAAkB,KAOlB,KAAAjN,UAA+B,KAE/B,KAAAwvB,kBAA4B,E,OAK5B,YAAAtiB,SAAA,WAEI7Q,KAAK+e,gBAAkB,IAAI,EAAA5R,SAI/B,YAAApN,KAAA,SAAM4D,GACF3D,KAAK2D,UAAYA,GAGrB,YAAAgwB,gBAAA,WAII,IAFA,IAAIjV,EAAU,GAEJzU,EAAI,EAAGA,EAAIjK,KAAK2D,UAAUtD,MAAMsG,OAAQsD,IAAM,CAGpDyU,EAFc1e,KAAK2D,UAAUtD,MAAM4J,GAEnB9H,MAAQ,GAG5B,IAAM4yB,EAAQ,CACVlrB,UAAW,KACXC,QAAS,KACT4U,QAASA,GAGb1e,KAAK2D,UAAU6a,QAAQtV,KAAM6rB,IAGjC,YAAArlB,OAAA,SAAQqlB,GAEJ,IAAM,IAAI9qB,EAAI,EAAGA,EAAIjK,KAAK2D,UAAU6a,QAAQ7X,OAAQsD,IAAM,CAC3CjK,KAAK2D,UAAU6a,QAAQvU,GAExBJ,YAAckrB,EAAMlrB,WAC1B7J,KAAK2D,UAAU6a,QAAQyB,OAAQhW,EAAG,GAI1CjK,KAAKuzB,aAGT,YAAA1Q,uBAAA,SAAwB5hB,EAAcwC,EAAWsxB,EAAYtP,GAA7D,WAEQpgB,EAAoB5B,EAAKtB,KAEzByrB,EAAa,KACbhmB,EAAgB,KAEpB,GAAK6d,EAAQ,EAAI,CACb,IAAIuP,EAAQh1B,KAAK2D,UAAUtD,MAAMolB,EAAQ,GACnC,EAASsP,EAAMrW,QAAQsW,EAAM7yB,MAEV,MAApB,EAAOiE,WAAyD,MAApC,EAAOA,UAAU2c,WAAW5gB,OACzDyF,EAAgB5H,KAAK2D,UAAUxB,KAC/ByrB,EAAa,EAAOxnB,UAAU2c,WAAW5gB,MAIjD,OAAO,EAAAmd,WAAWnV,QAAO,SAAEoV,GACvB,EAAKxN,QAAQxO,wBAAyBwxB,EAAMrW,QAAQjb,EAAKtB,MAAMqB,KAAM6B,EAAmBuoB,EAAYhmB,EAAe3G,GAAOqR,MAAM,SAAAkN,GAC5HD,EAAS7R,KAAM8R,UAK3B,YAAAc,kBAAA,SAAmBpJ,EAAmBzT,EAAWsxB,EAAY9zB,GAKzD,IALJ,WAGQF,EAAc,GAERkJ,EAAI,EAAGA,EAAIjK,KAAK2D,UAAUtD,MAAMsG,OAAQsD,IAAM,CACpD,IAAIse,EAAUvoB,KAAK2D,UAAUtD,MAAM4J,GAInC,GAFAlJ,EAAYmI,KAAMqf,EAAQpmB,MAErBomB,EAAQpmB,OAASsB,EAAKtB,KACvB,MAIRnC,KAAK+R,QAAQnR,oBAAqBsW,EAAEqJ,KAAK0U,IAAKxxB,EAAKtB,KAAMpB,GAAa,EAAME,GAAOqR,MAAM,SAAA4iB,GAErFH,EAAMrW,QAAQjb,EAAKtB,MAAMiE,UAAY8uB,EAAU9uB,UAC/C2uB,EAAMrW,QAAQjb,EAAKtB,MAAMqB,KAAO0xB,EAAU9uB,UAAU2c,WAAWlQ,aAAagN,eAE5E,IAAM,IAAI5V,EAAI,EAAGA,EAAI,EAAKtG,UAAUtD,MAAMsG,OAAQsD,IAAM,CAIpD,IAHA,IAAIse,EAAU,EAAK5kB,UAAUtD,MAAM4J,GAC/BkrB,EAAWD,EAEK,MAAZC,GAAoBA,EAAS/uB,UAAU2c,WAAWtf,MAAQ8kB,EAAQpmB,MAElEgzB,EADCA,EAASzW,QAAQ/X,OAAS,EAChBwuB,EAASzW,QAAQ,GAGjB,KAIF,MAAZyW,IACDJ,EAAMrW,QAAQ6J,EAAQpmB,MAAMiE,UAAY+uB,EAAS/uB,UACjD2uB,EAAMrW,QAAQ6J,EAAQpmB,MAAMqB,KAAO2xB,EAAS/uB,UAAU2c,WAAWlQ,aAAagN,oBAItFnN,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAyB,SAAA,WAEIpU,KAAK+e,gBAAgBrR,KAAM1N,KAAK2D,WAEhC3D,KAAKiS,WAAWqC,QAGpB,YAAAC,SAAA,WACIvU,KAAKiS,WAAWqC,QAGpB,YAAA+e,aAAA,SAAc/hB,GACVtR,KAAKuzB,aAGT,YAAAA,UAAA,WAGIvzB,KAAKmzB,kBAAmB,EAGxBnzB,KAAK2D,UAAU6a,QAAQ9X,MAAM,SAAUiZ,EAAGC,GAEtC,OAAoB,MAAfD,EAAE9V,WAAqC,KAAhB8V,EAAE9V,UACnB,EAEc,MAAf+V,EAAE/V,WAAqC,KAAhB+V,EAAE/V,WACvB,EAGK,IAAIU,KAAMoV,EAAE9V,WACb,IAAIU,KAAMqV,EAAE/V,cAKhC,IAAM,IAAII,EAAI,EAAGA,EAAIjK,KAAK2D,UAAU6a,QAAQ7X,OAAQsD,IAAM,CACtD,IAAIwpB,EAAOzzB,KAAK2D,UAAU6a,QAAQvU,EAAI,GAClCse,EAAUvoB,KAAK2D,UAAU6a,QAAQvU,GAErCwpB,EAAK3pB,QAAU9J,KAAK0zB,iBAAkB,IAAInpB,KAAM,IAAIA,KAAMge,EAAQ1e,WAAYG,UAxBjE,QA0BRypB,EAAK5pB,YAAc0e,EAAQ1e,YAC5B7J,KAAKmzB,kBAAmB,GAI3BnzB,KAAK2D,UAAU6a,QAAQ7X,OAAS,IACjC3G,KAAK2D,UAAU6a,QAAQxe,KAAK2D,UAAU6a,QAAQ7X,OAAS,GAAGmD,QAAU,EAAAjB,UAI5E,YAAA6qB,iBAAA,SAAkBe,GACd,IAAMtW,EAAMsW,EAAQrW,aAEpB,OAAOqW,EAAQnW,iBAAmB,KAAQmW,EAAQlW,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,GAI5G,YAAAvL,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAzL/CxU,GAAkC,uJ,iCAAlCA,EAAkC,44D,GAAA,MCrB/C,4BACI,8BACA,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BACI,+BACI,4BACI,6BACI,6BACI,6BACI,gCAmDJ,iBACJ,iBACJ,iBAEJ,iBAEA,6BAEI,8BACI,8BAII,iCAAsB,wCAAS,EAAAiW,cAC3B,8BACJ,iBACJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBACJ,kB,4BAxFS,oDACA,uDAc0C,uDAgEsD,wE,uPDhEzG,GAKa,EAAAjW,sC,kFErBb,KAEA,MAFA,IAQA,SAIA,GAHA,MACA,MAEA,Q,qKCIK,0BAA+H,2FAAuB,aAAW,qBAAM,iB,gCAArF,qE,mDAClF,0BAAgI,2FAAuB,aAAW,qBAAM,iB,gCAArF,qE,qBAInF,uC,qBACA,+BDNL,iBAeI,WAAqB+rB,EAAkDrV,EAAsC9C,GAAxF,KAAAmY,sBAAkD,KAAArV,eAAsC,KAAA9C,UAPhH,KAAAyF,QAAkB,SAQXxX,KAAKihB,QAAUlP,EAAQkP,UACvBjhB,KAAKkhB,aAAelhB,KAAKihB,SAAWlP,EAAQmP,eAClDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBnP,EAAQqP,gBAElEphB,KAAKkhB,aAAelhB,KAAK8tB,cAAc,UAAY9tB,KAAK8tB,cAAc,U,OAGpE,YAAAjd,SAAA,aAGH,YAAAid,cAAA,SAActW,GACbxX,KAAKwX,QAAUA,EAEA,WAAZA,EACFxX,KAAK+tB,UAAY/tB,KAAKkqB,oBAAoBtJ,OAAO,6BAE9B,WAAZpJ,IACPxX,KAAK+tB,UAAY/tB,KAAKkqB,oBAAoBtJ,OAAO,gCAKzC,YAAAhO,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAlClE1U,GAA0B,sH,iCAA1BA,EAA0B,qcCtBvC,4BACI,4BACA,6BAEA,4BAEI,4BACL,4BAEC,4BACC,yBACC,YACD,iBACD,iBAEA,0BACC,6BACA,6BACD,iBAEA,6BACC,iDACA,yCACD,iBAEQ,iBACJ,iBACJ,iBACJ,kB,MAjBM,yDAK4C,mDACA,oDAItB,yDACR,2D,0ODNpB,GAMa,EAAAA,8B,kFEtBb,KACA,MACA,MAFA,IAMA,QACA,QAGA,SAGA,SAMA,GAJA,OACA,OACA,MAEA,Q,GAEA,M,6JCfQ,6BAAqE,YAAW,kB,6BAAX,+C,yBAGjE,4BACI,yBAEI,YACJ,iBACJ,kB,6BAFQ,kE,yBAIZ,4BAEI,4BACI,yBACI,6BACA,YACJ,iBAEA,yBACI,6BACA,YACJ,iBACJ,iBACJ,kB,6BARY,kEAKA,+D,yBAUA,yBAA6B,YAAW,kB,uBAAX,6C,yBAJzC,4BACI,6BACI,6BACA,yBACI,8BACJ,iBACJ,iBACJ,kB,6BAHgB,iD,uHAkBJ,8BAA6C,4FACzC,sBACA,6BACJ,iB,gCAFO,8E,qBASC,6B,qBACA,6B,sBAUA,4BAA8D,6BAAkD,kB,mDAI5G,6BACI,2BAAY,mIACtC,sB,uBAC0B,iBAC5B,iB,0CAH0E,6DACvB,kF,qBAKlD,sB,qBACA,sB,mDAQ+B,+BAAkE,4GAA6B,kIAA/F,iB,2CAA0C,4BAAuB,oB,mDACjE,0BACI,+BAAyC,kHAAmC,4HAA5E,iBAAqK,+BAAuC,gHAAiC,4HAAxE,iBACzK,iB,2CADW,mDAAiC,yBAAoI,iDAA+B,wB,mDAE/M,+BAA6E,6GAA8B,0IAA3G,iB,gEAAqD,4BAAuB,mBAAvB,CAAuB,oBAAvB,CAAuB,2BAAvB,CAAuB,4BAAvB,CAAuB,uBAAvB,CAAuB,wB,yBATpF,0BAII,6BACI,iCACA,+BAGA,iCAEJ,iBACJ,kB,uCAR4B,sDACb,qDACF,oDAGE,qD,mDAtBnB,4BAEI,+BAKxB,2BAAG,6GAAkG,YAAoB,iBACzH,2BAAG,6GACF,6BACA,6BACoB,iBAEG,+BAaJ,iB,+CAxBmF,sDAKF,oDAEjG,oFACA,qFAGyB,uD,mDAkBT,4BAAmF,2BAA4B,6HAAyB,iBAAI,kB,yBAE5I,4BAAmE,YAA4B,kB,qDAA5B,+C,mDAHvE,4BACI,8BACA,4BAA2C,2BAAiC,6G,uBAAqE,iBAAI,iBACrJ,8BACJ,iB,iCAHQ,iDACiG,+EACjG,0D,kGAvCpB,6BACI,+BACI,4BACI,yBACI,8BACA,4BAA2C,6BAAkD,iBAC7F,8BA2BJ,iBACJ,iBACA,4BACI,8B,wBAKJ,iBACJ,iBACJ,kB,6BAvCoB,iDAEA,yDA8BJ,iJDlF5B,iBAmCC,WAAmB8T,EAAkCqjB,EAAmCC,EAA+B5I,EAC9G5X,EAAsCoK,EAAsC/M,GADlE,KAAAH,UAAkC,KAAAqjB,WAAmC,KAAAC,QAA+B,KAAA5I,SAC9G,KAAA5X,eAAsC,KAAAoK,kBA9B/C,KAAArO,QAAkB,KAClB,KAAAlL,KAA0B,KAC1B,KAAA4vB,EAAY,EACZ,KAAA/M,QAAkB,GAClB,KAAA9hB,OAAgE,GAChE,KAAAirB,SAAqB,GACrB,KAAA6D,KAAY,CACXC,MAAO,EACPzxB,WAAY,EACZD,SAAU,IACV0b,QAAS,IAEV,KAAA9Y,KAAO,CAAEpE,UAAW,OAAQmzB,MAAO,OACnC,KAAAC,aAAuB,EAEvB,KAAAC,cAAwB,EAOjB,KAAAC,kBAAoB,GAU1B51B,KAAK41B,kBAAoB3W,EAAgB2B,OAAO,qBAEhD5gB,KAAKihB,QAAU/O,EAAY+O,UAC3BjhB,KAAKkhB,aAAelhB,KAAKihB,SAAW/O,EAAYgP,eAChDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBhP,EAAYkP,gB,OAGvE,YAAAvQ,SAAA,sBACO/L,EAAM9E,KAAKq1B,MAAMQ,SAASC,SAAS71B,IAAI,OAC7CD,KAAK01B,YAAgE,QAAjD11B,KAAKq1B,MAAMQ,SAASC,SAAS71B,IAAI,aAErDD,KAAK+R,QAAQ9M,qBAAqBH,GAAKwN,MAAM,SAAAgiB,GAC5C,EAAK5uB,KAAO4uB,EACZ,EAAK5uB,KAAK2D,WAAWgB,SAAQ,SAAA/H,GAC5BA,EAAUyzB,aAAc,KAGzB,EAAKC,aAAa,OAIpB,YAAAA,aAAA,SAAajyB,GAAb,WAEC/D,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQvL,KAAKxG,KAAK0F,KAAKZ,IAAKf,EAAY/D,KAAKu1B,KAAKzxB,SAAU9D,KAAKyG,OAAQzG,KAAK0G,MAAM4L,MAAK,SAAAijB,GAC7F,EAAKA,KAAOA,KACV7iB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAUb,YAAAsjB,OAAA,SAAO3zB,GACFtC,KAAK0G,KAAKpE,YAAcA,EAAUmX,KACrCzZ,KAAK0G,KAAK+uB,MAA6B,QAApBz1B,KAAK0G,KAAK+uB,MAAkB,OAAS,MAGxDz1B,KAAK0G,KAAO,CAAEpE,UAAWA,EAAUmX,KAAMgc,MAAO,OAGjDz1B,KAAKg2B,aAAa,IAGnB,YAAAE,aAAA,WACCl2B,KAAK0F,KAAK2D,WAAWgB,SAAQ,SAAAH,GAC5BA,EAAKisB,OAAS,QAGfn2B,KAAKyG,OAAS,GACdzG,KAAK0xB,SAAW,GAEhB1xB,KAAKg2B,aAAa,IAGnB,YAAAI,aAAA,SAAa9zB,GACZA,EAAUyzB,aAAezzB,EAAUyzB,aAGpC,YAAAM,UAAA,SAAU/zB,GAAV,WACC,OAAO,EAAAgd,WAAWnV,QAAO,SAACoV,GACzB,EAAK3O,QAAU,KAGf,EAAKmB,QAAQnL,OAAO,EAAKlB,KAAKZ,IAAKxC,EAAU6zB,OAAQ7zB,EAAUmX,KAAMnX,EAAUg0B,KAAM,EAAK7vB,QAAQ6L,MAAK,SAAAgS,GACtGA,EAAQiS,QAAQ,CAAEtuB,MAAO,IAAM,EAAKgX,gBAAgB2B,OAAO,uBAAyB,IAAK/Z,MAAO,OAEhG0Y,EAAS7R,KAAK4W,MACZ5R,OAAM,SAACC,GACT,EAAKC,MAAMD,UAMd,YAAA6O,iBAAA,SAAiBlf,GAOhB,GANAA,EAAUyzB,aAAc,EAGxB/1B,KAAKyG,OAASzG,KAAKyG,OAAOA,QAAO,SAAA+vB,GAAK,OAAAA,EAAEl0B,YAAcA,EAAUg0B,QAChEt2B,KAAK0xB,SAAW1xB,KAAK0xB,SAASjrB,QAAO,SAAAgwB,GAAK,OAAAA,IAAMn0B,EAAUg0B,QAEnC,MAAnBh0B,EAAUuE,QAA4C,KAA1BvE,EAAUuE,MAAMnF,OAAwC,KAAxBY,EAAUuE,MAAM6vB,KAAa,CAE5F,IAAIzuB,EAAQ,IAAM3F,EAAU2F,MAAQ,QAEP,MAAzB3F,EAAUuE,MAAMnF,QACnBuG,GAAS3F,EAAUuE,MAAMnF,OAGG,MAAzBY,EAAUuE,MAAMnF,OAAwC,MAAvBY,EAAUuE,MAAM6vB,MACpDzuB,GAAS,OAGiB,MAAvB3F,EAAUuE,MAAM6vB,MACnBzuB,GAAS3F,EAAUuE,MAAM6vB,KAG1BzuB,GAAS,IAETjI,KAAKyG,OAAOyC,KAAK,CAAE5G,UAAWA,EAAUg0B,KAAMzvB,MAAOvE,EAAUuE,MAAOoB,MAAOA,IAC7EjI,KAAK0xB,SAASxoB,KAAK5G,EAAUg0B,MAG9Bt2B,KAAKg2B,aAAa,IAGnB,YAAAW,kBAAA,SAAkBr0B,GAOjB,GANAA,EAAUyzB,aAAc,EAGxB/1B,KAAKyG,OAASzG,KAAKyG,OAAOA,QAAO,SAAA+vB,GAAK,OAAAA,EAAEl0B,YAAcA,EAAUg0B,QAChEt2B,KAAK0xB,SAAW1xB,KAAK0xB,SAASjrB,QAAO,SAAAgwB,GAAK,OAAAA,IAAMn0B,EAAUg0B,QAEnC,MAAnBh0B,EAAUuE,OAAqC,KAApBvE,EAAUuE,MAAc,CACtD,IAAMoB,EAAQ,IAAM3F,EAAU2F,MAAhB,QAAuC3F,EAAUuE,MAAQ,IAEvE7G,KAAKyG,OAAOyC,KAAK,CAAE5G,UAAWA,EAAUg0B,KAAMzvB,MAAOvE,EAAUuE,MAAOoB,MAAOA,IAC7EjI,KAAK0xB,SAASxoB,KAAK5G,EAAUg0B,MAG9Bt2B,KAAKg2B,aAAa,IAGnB,YAAAY,iBAAA,SAAiB1f,EAAmB5U,GAcnC,GAbAA,EAAUuE,MAAQqQ,EAAEqJ,KACpBje,EAAUyzB,aAAc,EAGxB/1B,KAAKyG,OAASzG,KAAKyG,OAAOA,QAAO,SAAA+vB,GAAK,OAAAA,EAAEl0B,YAAcA,EAAUg0B,QAChEt2B,KAAK0xB,SAAW1xB,KAAK0xB,SAASjrB,QAAO,SAAAgwB,GAAK,OAAAA,IAAMn0B,EAAUg0B,QAE1Dt2B,KAAK0F,KAAK2D,WAAWgB,SAAQ,SAAAH,GACxBA,EAAKosB,OAASh0B,EAAUg0B,OAC3BpsB,EAAKisB,OAAS,OAIa,MAAzB7zB,EAAUuE,MAAMA,OAA2C,KAA1BvE,EAAUuE,MAAMA,MAAc,CAClE,IAAMoB,EAAQ,IAAM3F,EAAU2F,MAAhB,QAAuC3F,EAAUuE,MAAMoB,MAAQ,IAE7EjI,KAAKyG,OAAOyC,KAAK,CAAE5G,UAAWA,EAAUg0B,KAAMzvB,MAAOqQ,EAAEqJ,KAAK1Z,MAAOoB,MAAOA,IAC1EjI,KAAK0xB,SAASxoB,KAAK5G,EAAUg0B,MAC7Bh0B,EAAU6zB,OAASjf,EAAEqJ,KAAKtY,WAG1B3F,EAAU6zB,OAAS,GAGpBn2B,KAAKg2B,aAAa,IAGnB,YAAAa,aAAA,SAAav0B,GACZ,MAA0B,SAAnBA,EAAUmB,OAAoD,IAAhCnB,EAAUw0B,WAAWnwB,SAA2D,IAA3C3G,KAAK0xB,SAASlgB,QAAQlP,EAAUg0B,OAAgBt2B,KAAK0xB,SAASjrB,QAAO,SAAAI,GAAS,OAAAvE,EAAUw0B,WAAW1E,SAASvrB,MAAQF,OAAS,IAGxM,YAAA+pB,OAAA,SAAOlqB,GAAP,WACKuwB,EAAY/2B,KAAK6U,aAAauC,KAAK,EAAAxZ,yBAA0B,CAAE0Z,UAAU,EAAMC,qBAAqB,IACxGwf,EAAUvf,QAAQ+K,oBAAoB/b,EAAKrE,KAAMnC,KAAK0F,KAAKnE,SAAUvB,KAAK0F,KAAKE,QAAS5F,KAAK0F,KAAKmc,oBAClGkV,EAAUvf,QAAQ+J,gBAAgBvhB,KAAK0F,KAAKZ,KAC5CiyB,EAAUvf,QAAQiK,sBAAqB,WAEtC,EAAKuU,aAAa,EAAKT,KAAKxxB,gBAI9B,YAAAizB,OAAA,SAAOxwB,GACN,IAAM1B,EAAM0B,EAAKrE,KAEN,MAAP2C,GAAeA,EAAI6B,OAAS,GAC/BswB,OAAOC,KAAKh3B,IAAM,8BAAgC4E,EAAK,WAKzD,YAAAqyB,UAAA,sBACCn3B,KAAK4Q,QAAU,KAEf5Q,KAAK21B,cAAe,EAEpB,IAAIyB,EAAe,EAAAC,SAAS,KAAM/gB,WAAU,WAC3C,EAAKvE,QAAQ/K,SAAS,EAAKtB,KAAKZ,KAAKwN,MAAK,SAAAtL,GACzC,EAAKouB,SAASpuB,SAASA,SAIzBhH,KAAK+R,QAAQ/L,kBAAkBhG,KAAK0F,KAAKZ,KACvClD,KAAK,EAAAC,UAAS,WACdu1B,EAAavN,cAEb,EAAKuL,SAAStzB,eACX3B,YACHmS,MAAK,SAAA5M,GACJ,EAAKiwB,cAAe,EACrB,EAAKjwB,KAAOA,EACZ,EAAKA,KAAK2D,WAAWgB,SAAQ,SAAA/H,GAC5BA,EAAUyzB,aAAc,KAIzB,EAAKC,aAAa,MAChBtjB,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGb3S,KAAKo1B,SAAS1zB,SAGf,YAAA41B,eAAA,sBACKP,EAAY/2B,KAAK6U,aAAauC,KAAK,EAAAxZ,yBAA0B,CAAE0Z,UAAU,EAAMC,qBAAqB,IAExGwf,EAAUvf,QAAQoK,eAAe5hB,KAAK0F,KAAKnE,SAAUvB,KAAK0F,KAAKE,QAAS5F,KAAK0F,KAAKmc,oBAClFkV,EAAUvf,QAAQ+J,gBAAgBvhB,KAAK0F,KAAKZ,KAC5CiyB,EAAUvf,QAAQiK,sBAAqB,WAEtC,EAAKuU,aAAa,EAAKT,KAAKxxB,gBAI9B,YAAAwzB,SAAA,sBACCv3B,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAvY,2BAA4B,CACpEwY,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQuZ,SAASza,WAAU,SAAAuY,GAC5B,aAAVA,EACHoI,OAAOO,SAASC,KAAOv3B,IAAM,qCAAuC,EAAKwF,KAAKZ,IAAM,WAAa4yB,mBAAmBh3B,KAAKC,UAAU,EAAK8F,SAEtH,SAAVooB,IACRoI,OAAOO,SAASC,KAAOv3B,IAAM,uCAAyC,EAAKwF,KAAKZ,IAAM,WAAa4yB,mBAAmBh3B,KAAKC,UAAU,EAAK8F,cAM7I,YAAAmM,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAnRtCnU,GAAmB,wQ,iCAAnBA,EAAmB,wzGC9BhC,4BACI,4BACA,6BAGA,4BACI,8BAEA,4BACI,8BAMJ,iBACA,8BAgBA,8BAQA,4BACI,6BACI,6CAAiD,8CAAc,EAAAw3B,aAAA,MAAsB,iBAErF,6BAEI,+BAAwB,wCAAS,EAAAE,kBAC7B,+BACI,uBACA,uBACJ,iBACA,8BACJ,iBAEA,iCAMI,iCAAsB,wCAAS,EAAAoB,oBAC3B,8BACJ,iBACA,iCAAsB,wCAAS,EAAAC,cAC3B,qCACA,qCACJ,iBACR,iBACJ,iBACJ,iBACA,6BACI,kCA4CJ,iBAKA,6BACI,6BACI,6CAAiD,8CAAc,EAAAvB,aAAA,MAAsB,iBACzF,iBACJ,iBACJ,iBAEJ,kB,MAzHa,oDAGI,2CAOJ,2CAgBA,sDAsBa,oDAUY,wDACA,sDAMrB,6C,2RD9CjB,GAKa,EAAAx3B,uB,kFE9Bb,KACA,MACA,MAFA,IAIA,QAGA,SAEA,S,GACA,OACA,M,wGCVI,6BAAqE,YAAW,kB,6BAAX,+C,mDAEpE,6BACG,6BACI,mCACI,6BACI,gCAAiD,4F,uBAE7C,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,+BAP6H,kDAA2B,4D,mDA0B5H,gCAAmD,yIAC/C,6BACJ,kB,mDACA,gCAAgD,0IAC5C,6BACJ,kB,mDACA,gCAAmD,oJAC/C,uBACJ,kB,mDAdZ,yBACI,4BACI,6BACI,gCAAsB,6GAClB,6BACJ,iBACA,kCAGA,kCAGA,kCAGJ,iBACJ,iBACA,4BAA4C,YAAqB,iBACjE,6BAA4C,aAAwB,iBACxE,iB,+CAboB,yDAGA,gDAGA,yDAK4B,8CACA,kD,yBA5B5D,6BACI,+BACI,4BACI,yBACI,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAAkD,iBAClG,iBACJ,iBACA,6BACI,gCAoBJ,iBACJ,iBACJ,kB,6BAtBgB,yD,yBAqCI,yBACI,4BACI,6BACI,sBACA,2BACI,8BAA+B,YAAmB,iBAAQ,8BAA+B,YAAe,iBAAQ,8BAA+B,aAAa,iBAAQ,+BAA+B,aAAe,iBACtN,iBACJ,iBACJ,iBACJ,kB,uBAJ+C,0DAA0D,sDAAsD,oDAAoD,uD,mDAO3N,6BACI,6CAAqB,sGAAoC,iBAC7D,kB,yED/DpB,aA2BC,WAAmBuT,EAAkC0a,EAAwB5X,EAAqC3C,GAA/F,KAAAH,UAAkC,KAAA0a,SAAwB,KAAA5X,eAAqC,KAAA3C,cArBlH,KAAAtB,QAAkB,KAClB,KAAAlL,KAAmB,KACnB,KAAA6vB,KAAY,CACXzxB,SAAU,GACVC,WAAY,EACZyxB,MAAO,EACPhW,QAAS,IAiBTxf,KAAKihB,QAAU/O,EAAY+O,U,OAG5B,YAAApQ,SAAA,sBACC7Q,KAAK+R,QAAQlN,qBAAqB7E,KAAK8E,IAAK,aAAawN,MAAK,SAAA5M,GAC7D,EAAKA,KAAOA,EAEZ,EAAKswB,aAAa,MAGnBh2B,KAAK23B,YAAc,EAAAN,SAAS,KAAM/gB,WAAU,WAC3C,EAAK0f,aAAa,EAAKT,KAAKxxB,gBAI9B,YAAAkN,YAAA,WACCjR,KAAK23B,YAAY9N,eAOlB,YAAA+N,0BAAA,SAA0B9yB,GAA1B,WACC9E,KAAK+R,QAAQhM,wBAAwBjB,GAAKwN,MAAK,SAAA9L,GAC9C,EAAKqxB,gBACHnlB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAklB,WAAA,sBAEC73B,KAAK+R,QAAQlN,qBAAqB7E,KAAK8E,IAAK,aAAawN,MAAK,SAAA5M,GAC7D,EAAKA,KAAOA,KACVgN,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAwkB,UAAA,sBACCn3B,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQlM,0BAA0B7F,KAAK0F,KAAKZ,KAAKwN,MAAK,SAAC9L,GAE3D,EAAKwvB,aAAa,EAAKT,KAAKxxB,eAE1B2O,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAqjB,aAAA,SAAajyB,GAAb,WACkB,MAAb/D,KAAK0F,OAER1F,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQ7K,yBAAyBlH,KAAK0F,KAAKZ,IAAK9E,KAAKu1B,KAAKzxB,SAAUC,EAAY,cAAc,GAAMuO,MAAK,SAAA+B,GAE7G,EAAKkhB,KAAOlhB,KAEV3B,OAAM,SAACC,GACT,EAAKC,MAAMD,MAGZ3S,KAAK63B,eAIP,YAAAC,eAAA,SAAexmB,GACdA,EAAMqV,iBAEN3mB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAzY,sBAAuB,CAC/D0Y,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQrF,UAAW,EACnCnS,KAAKiS,WAAWuF,QAAQnF,OAASrS,KAAK0F,KACtC1F,KAAKiS,WAAWuF,QAAQnR,OAAQ,GAIjC,YAAAoqB,OAAA,SAAO6D,GACNhjB,MAAMqV,iBAEN3mB,KAAKysB,OAAOQ,SAAS,CAAC,yBAA0BqH,EAAQxvB,KAAK,KAG9D,YAAAizB,mBAAA,SAAmBzD,GAAnB,WAECt0B,KAAK+R,QAAQhL,iBAAiButB,EAAQxvB,KAAKwN,MAAK,WAE/C,EAAK0jB,aAAa,EAAKT,KAAKxxB,eAE1B2O,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAqlB,oBAAA,SAAoB1D,GACnB2C,OAAOO,SAASC,KAAOv3B,IAAM,uCAAyCo0B,EAAQxvB,KAG/E,YAAA8N,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAjItCjU,GAAmC,gJ,iCAAnCA,EAAmC,kzDCpBhD,0BACI,8BAEC,8BAaD,4BACI,+BAiCJ,iBAGA,4BACI,4BACI,2BACI,4BACI,8BACI,6BACI,4BACI,6BAAoC,8BAA2C,iBACnF,iBACJ,iBACA,6BACI,gC,wBAUJ,iBACJ,iBACA,gCAGJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MAlFS,oDAEC,yDAcG,2CA+CmB,iJAYP,8D,4MD7DzB,GAKa,EAAAA,uC,kFEpBb,KACA,MACA,MAFA,IASA,SACA,SACA,S,GAEA,OACA,MAEA,M,+FCfI,4BAAqE,YAAW,kB,6BAAX,+C,mDAErE,4BAEI,4BACI,+BACI,4BACI,+BAA+D,6BAAoD,iBAAS,+BAA+C,mGAA/C,iBAE5H,gCAAiD,4FAC7C,6BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iB,mDAR2L,iDAE9D,mD,mDA0BjG,gCAAsD,+HAClD,6BACJ,kB,mDARZ,yBACI,4BACI,6BACI,gCAAsB,6GAClB,6BACJ,iBACA,kCAGJ,iBACJ,iBACA,4BAA4C,YAAqB,iBACjE,4BAA4C,YAAwB,iBACxE,iB,+CAPoB,8DAK4B,8CACA,kD,yBAvB5D,6BACI,+BACI,4BACI,yBACI,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAA8C,iBAC1F,4BAA4C,6BAAoD,iBACpG,iBACJ,iBACA,6BAEI,gCAcJ,iBACJ,iBACJ,kB,6BAhBgB,yDDZxB,iBAsBC,WAAmBqT,EAAkC0a,EAC5C5X,EAAsCoK,EAAsC/M,GADlE,KAAAH,UAAkC,KAAA0a,SAC5C,KAAA5X,eAAsC,KAAAoK,kBAjB/C,KAAArO,QAAkB,KAClB,KAAAlL,KAAmB,KACnB,KAAAE,QAAkB,GAiBjB5F,KAAKihB,QAAU/O,EAAY+O,UAC3BjhB,KAAKkhB,aAAelhB,KAAKihB,SAAW/O,EAAYgP,eAChDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBhP,EAAYkP,gB,OAGvE,YAAAvQ,SAAA,sBACC7Q,KAAK+R,QAAQlN,qBAAqB7E,KAAK8E,IAAK,eAAewN,MAAK,SAAA5M,GAC/D,EAAKA,KAAOA,MAKd,YAAAyxB,UAAA,sBACCn3B,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQpM,wBAAwB3F,KAAK0F,KAAKZ,IAAK9E,KAAK4F,SAAS0M,MAAK,SAAAgiB,GACtE,EAAK5uB,KAAKquB,SAAS7qB,KAAKorB,MAEtB5hB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAmlB,eAAA,SAAexmB,GACdA,EAAMqV,iBAEN3mB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAzY,sBAAuB,CAC/D0Y,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQrF,UAAW,EACnCnS,KAAKiS,WAAWuF,QAAQnF,OAASrS,KAAK0F,KACtC1F,KAAKiS,WAAWuF,QAAQnR,OAAQ,GAIjC,YAAAoqB,OAAA,SAAO6D,GACNhjB,MAAMqV,iBAEN3mB,KAAKysB,OAAOQ,SAAS,CAAC,yBAA0BqH,EAAQxvB,KAAK,KAG9D,YAAA+rB,SAAA,SAASyD,GAAT,WACCt0B,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAiQ,sBAAuB,CAC/DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,+BAAiC,KAAO0T,EAAQ1uB,QAAU,IACxH5F,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,uBAEjE5gB,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,SAAA9P,GAC3C,EAAKuL,QAAQhM,wBAAwBuuB,EAAQxvB,KAAKwN,MAAK,SAAA+B,GACtD,EAAK3O,KAAKquB,SAAW,EAAKruB,KAAKquB,SAASttB,QAAO,SAACI,EAAO4e,EAAOqL,GAC7D,OAAOjqB,EAAM/B,MAAQwvB,EAAQxvB,UAG5B4N,OAAM,SAACC,GACT,EAAKC,MAAMD,UAMd,YAAAC,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAtFtClU,GAA0B,2L,iCAA1BA,EAA0B,qyCCvBvC,0BACI,8BAEA,+BAeA,4BACI,+BA4BJ,iBACJ,kB,MA/CS,oDAEA,2EAgBI,6C,+MDDb,GAKa,EAAAA,8B,kFEvBb,KACA,MACA,MAIA,OANA,IAOA,S,4GCGgB,4BACI,4BACI,yBAAI,YAAoC,iBAC5C,iBACJ,kB,6BAFY,wE,mDAGZ,4BACI,4BACI,yBACI,wBAAI,0BAAY,mGAAiC,6BAA4C,iBAAI,iBACrG,iBACJ,iBACJ,kB,uFAII,0BAAqH,2FAAuB,UAAQ,0BAAW,iB,gCAApF,kE,wBAI3E,kD,6BAAiE,gC,wBACjE,wC,6BAAuD,gCDrB3E,iBAiBC,WAAoBsT,EAAkC8C,EAAsCwgB,GAAxE,KAAAtjB,UAAkC,KAAA8C,eAAsC,KAAAwgB,QAT5F,KAAA7d,QAAkB,GAClB,KAAA9R,KAAmB,K,OAWnB,YAAAmL,SAAA,sBACO/L,EAAM9E,KAAKq1B,MAAMQ,SAASC,SAAS71B,IAAI,OAElC,MAAP6E,IACH9E,KAAKwX,QAAU,OAGhBxX,KAAK+R,QAAQ9L,cAAcnB,GAAKwN,MAAK,SAAA5M,GACpC,EAAKA,KAAOA,MAId,YAAAoyB,eAAA,SAAexmB,GACdA,EAAMqV,iBAEN3mB,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAzY,sBAAuB,CAC/D0Y,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQrF,UAAW,EACnCnS,KAAKiS,WAAWuF,QAAQnF,OAASrS,KAAK0F,KACtC1F,KAAKiS,WAAWuF,QAAQnR,OAAQ,GAMjC,YAAAynB,cAAA,SAActW,GACbxX,KAAKwX,QAAUA,G,iCA3CJ5Y,GAAuB,qH,iCAAvBA,EAAuB,yfCfpC,4BACI,4BACA,6BAEA,4BAGI,4BACI,4BAEI,8BAKA,8BAQA,0BACI,0BAA0F,wCAAS,EAAAkvB,cAAc,UAAQ,yBAAS,iBAClI,6BACJ,iBAEA,6BACI,yDACA,+CACJ,iBAEJ,iBACJ,iBACJ,iBACJ,kB,MA1BqB,2CAKA,2CAS+C,gFAC7C,yDAI4B,8DACV,gE,qPDrBzC,GAMa,EAAAlvB,2B,kFEfb,KACA,MACA,MAFA,IAMA,SAMA,GAJA,OACA,MACA,MACA,OACA,QAEA,SAEA,Q,qICXQ,6BAAqE,YAAW,kB,6BAAX,+C,qBA8CzB,6B,qBACA,6B,mDAGR,gCAAiE,uJAC7D,6BACJ,kB,mDACA,gCAA6D,wJACvE,6BACF,kB,yBAdI,4BAEI,6BACI,2BACI,gCACI,oCACA,oCACJ,iBACJ,iBACA,kCAGA,kCAGJ,iBACJ,kB,uCAbW,uEAEe,+FACA,6FAGV,mEAGA,gE,yBAhCpB,yBACI,4BACI,6BACI,sBACA,2BACI,8BACI,YACJ,iBACA,8BACI,YACJ,iBACA,8BACI,aACJ,iBACJ,iBAEA,oCAEJ,iBACJ,iBACA,+BAiBJ,kB,2CA/BoB,wDAGA,0DAGA,kEAIQ,kDAIpB,+D,mDAqBhB,6BACI,6CAAqC,gHAA8C,iBACvF,kB,sBAUG,4BACE,6BACF,kB,sBACA,4BACG,6BACF,kB,sBACA,4BACE,6BACF,kB,sBACA,4BACE,6BACF,kB,mDACD,4BACE,gCAAsB,wGACpB,6BACF,iBACF,kB,qBACA,uB,qBAyBF,uB,yBAnBF,yBACE,4BACE,6BACG,sBACA,2BAAyC,YAAgB,iBAC5D,iBACF,iBACA,4BACE,2BAAwC,YAAwB,iBAClE,iBACA,4BACG,4BAAwC,aAAuB,iBACjE,iBACA,6BACE,4BAAwC,aAAkB,iBAC5D,iBACA,6BACE,4BAAwC,aAAsB,iBAChE,iBACD,+BAMD,kB,2CArB+C,+CAIJ,yDAGC,sDAGA,iDAGA,qDAEvC,+D,mDAUR,6BACG,6CAAuC,kHAAgD,iBAC1F,kB,gLDnHrB,aAsCC,WAAmBmT,EAAkC8C,EAAsC4X,EAClFxN,EAAsC/M,EAAiC+lB,GAD7D,KAAAlmB,UAAkC,KAAA8C,eAAsC,KAAA4X,SAClF,KAAAxN,kBAAuE,KAAAgZ,YAjChF,KAAArnB,QAAkB,KAElB,KAAAsnB,eAAiC,CAChC1C,MAAO,EACPzxB,WAAY,EACZD,SAAU,GACV0b,QAAS,IAGV,KAAA2Y,iBAAmC,CAClC3C,MAAO,EACPzxB,WAAY,EACZD,SAAU,GACV0b,QAAS,IAYV,KAAA4Y,kBAA4B,EAC5B,KAAAC,oBAA8B,EAI9B,KAAAC,eAAyB,EAIxBt4B,KAAKihB,QAAU/O,EAAY+O,UAC3BjhB,KAAKkhB,aAAelhB,KAAKihB,SAAW/O,EAAYgP,eAChDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBhP,EAAYkP,gB,OAGvE,YAAAvQ,SAAA,sBAEC7Q,KAAKu4B,uBAAuB,GAE5Bv4B,KAAK23B,YAAc,EAAAN,SAAS,KAAM/gB,WAAU,WAC3C,EAAK8hB,oBACL,EAAKC,sBAED,EAAKC,eACJ,EAAKF,mBAAqB,IAC7B,EAAKG,uBAAuB,EAAKL,eAAen0B,YAEhD,EAAKq0B,kBAAoB,GAEtB,EAAKC,qBAAuB,IAC/B,EAAKG,yBAAyB,EAAKL,iBAAiBp0B,YAEpD,EAAKs0B,oBAAsB,IAIxB,EAAKD,mBAAqB,IAC7B,EAAKG,uBAAuB,EAAKL,eAAen0B,YAEhD,EAAKq0B,kBAAoB,OAO7B,YAAAnnB,YAAA,WACCjR,KAAK23B,YAAY9N,eAGlB,YAAA4O,gBAAA,SAAgBC,GACf,MAAmB,aAAfA,EAAI9U,OACA5jB,KAAKif,gBAAgB2B,OAAO,0BAEZ,YAAf8X,EAAI9U,QAAuC,QAAf8U,EAAI9U,OACjC5jB,KAAKif,gBAAgB2B,OAAO,yBAEZ,WAAf8X,EAAI9U,OACL5jB,KAAKif,gBAAgB2B,OAAO,wBAEZ,YAAf8X,EAAI9U,OACL5jB,KAAKif,gBAAgB2B,OAAO,yBAEZ,aAAf8X,EAAI9U,OACL5jB,KAAKif,gBAAgB2B,OAAO,0BAEZ,YAAf8X,EAAI9U,OACL5jB,KAAKif,gBAAgB2B,OAAO,yBAG5B5gB,KAAKif,gBAAgB2B,OAAO,0BAIrC,YAAA+X,iBAAA,SAAiBpD,GAAjB,WAECA,EAAK/V,QAAQnV,SAAQ,SAAAquB,GAEpB,IAAIE,EAAa,CAChB,MAAS,CACR,CAAE,MAAS,cAAe,OAAU,YAEpC,CACC,MAAS,UACT,OAAwB,QAAdF,EAAIG,MAAkB,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,QAG7F,CACC,MAAS,aACT,OAAwB,aAAdH,EAAIG,OAAsC,uBAAdH,EAAIG,MAAiC,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,aAGxI,CACC,MAAS,kBACT,OAAwB,WAAdH,EAAIG,OAAoC,mBAAdH,EAAIG,OAA4C,kBAAdH,EAAIG,MAA4B,EAAKC,aAAaJ,GAAO,OAKlIA,EAAMA,GACFE,WAAaA,MAMnB,YAAAG,mBAAA,SAAmBC,EAAkBC,GACpC,IAAIxD,EAAQ,CAAC,MAAO,WAAY,qBAAsB,SAAU,iBAAkB,iBAE9EyD,EAASzD,EAAMjkB,QAAQwnB,GAE3B,OADgBvD,EAAMjkB,QAAQynB,GACdC,EACR,WAGA,IAIT,YAAAJ,aAAA,SAAaJ,GACZ,MAAmB,WAAfA,EAAI9U,QAAsC,YAAf8U,EAAI9U,OAC3B,UAEgB,aAAf8U,EAAI9U,OACL,QAGD,IAIR,YAAAuV,sBAAA,WACCn5B,KAAKw4B,yBAAyB,GAE9Bx4B,KAAKs4B,eAAgB,GAItB,YAAA7H,OAAA,SAAOtuB,GACNnC,KAAKysB,OAAOQ,SAAS,CAAC,iCAAkC9qB,KAGzD,YAAAo2B,uBAAA,SAAuBx0B,GAAvB,WAEC/D,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQlO,iBAAiB7D,KAAKk4B,eAAep0B,SAAUC,EAAY,cAAc,GAAOuO,MAAK,SAAA+B,GAEjG,EAAK6jB,eAAiB7jB,EACtB,EAAKskB,iBAAiB,EAAKT,mBAEzBxlB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA6lB,yBAAA,SAAyBz0B,GAAzB,WAEC/D,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQ5N,0BAA0BnE,KAAKm4B,iBAAiBr0B,SAAUC,EAAY,cAAc,GAAOuO,MAAK,SAAA+B,GAE5G,EAAK8jB,iBAAmB9jB,EACxB,EAAKskB,iBAAiB,EAAKR,qBAEzBzlB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAAymB,qBAAA,SAAqB/0B,EAAmBq0B,GAAxC,WACC14B,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAiQ,sBAAuB,CAC/DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGtBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,uCAC9D5gB,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,kCAEjE5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAE1C7nB,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,SAAA9P,GAE3C,EAAKyxB,UAAU1wB,aAAamxB,EAAIrxB,eAAeiL,MAAK,SAAA+B,GACnD,EAAKpC,WAAWqC,OAEhB,IAAK,IAAIrK,EAAI,EAAGA,EAAI,EAAKiuB,eAAe1Y,QAAQ7Y,SAAUsD,EAAG,CAG5D,GAFgB,EAAKiuB,eAAe1Y,QAAQvV,GAE9BovB,QAAUX,EAAIW,MAAO,CAClC,EAAKnB,eAAe1Y,QAAQS,OAAOhW,EAAG,GACtC,OAIF,EAAKkvB,2BAEHzmB,OAAM,SAACC,GACT,EAAKC,MAAMD,UAMb,YAAA2mB,sBAAA,SAAsBj1B,EAAmBq0B,GAAzC,WACE14B,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAiQ,sBAAuB,CAC9DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGvBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,6CAC9D5gB,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,wCAEjE5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAE1C7nB,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,SAAA9P,GAE1C,EAAKuL,QAAQvN,oBAAoBH,GAAWiO,MAAK,SAAA+B,GAE/C,EAAKpC,WAAWqC,OAEhB,IAAK,IAAIrK,EAAI,EAAGA,EAAI,EAAKiuB,eAAe1Y,QAAQ7Y,SAAUsD,EAAG,CAG3D,GAFgB,EAAKiuB,eAAe1Y,QAAQvV,GAE9BovB,QAAUX,EAAIW,MAAO,CACjC,EAAKnB,eAAe1Y,QAAQS,OAAOhW,EAAG,GACtC,OAIJ,EAAKkvB,2BAEJzmB,OAAM,SAACC,GACR,EAAKC,MAAMD,UAOlB,YAAAC,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA7QtC7T,GAAsB,4N,iCAAtBA,EAAsB,6qFCvBnC,4BACI,4BACA,6BAEA,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBACA,4BACI,4BACI,4BACI,6BACI,+BACI,6BACI,6BACI,6BACI,8BACJ,iBACJ,iBACJ,iBACA,6BAEI,gC,wBAuCJ,iBACJ,iBACA,gCAGJ,iBAEA,6BACC,+BACE,6BACE,0BACE,6BACE,8BACF,iBACA,+BAGA,+BAGC,+BAGA,+BAGD,+BAKA,+BAEF,iBACF,iBACA,6BAEA,gC,wBA0BA,iBACF,iBAEA,gCAGD,iBACJ,iBAEJ,iBACJ,iBACJ,iBACJ,kB,MAvIa,oDAqBuB,2LAyCP,sEAYE,wEAGA,wEAGC,wEAGA,wEAGD,wEAKA,wEAMJ,kMA6BD,0E,skBDjH1B,GAKa,EAAAA,0B,kFEvBb,KACA,MACA,MAFA,IAMA,SACA,SACA,SAKA,GAHA,OACA,MACA,MACA,QAEA,SAGA,GAFA,OAEA,O,4HCbQ,4BAAqE,YAAW,kB,6BAAX,+C,mDA6C3D,6BACE,8BACE,6BACF,iBACA,gCAAsB,gIACpB,6BACF,iBACF,kB,mDAEA,6BACE,8BACE,6BACF,iBACA,gCAAsB,gIACpB,6BACF,iBACF,kB,qBAIM,6B,sBACA,2BACE,6BACF,kB,mDALN,6BACI,gCAAsB,gIACpB,oCACA,gCAGF,iBACJ,iB,iCALgB,8EACJ,2E,mDAMZ,6BACE,gCAAsB,8HAClB,2BACE,6BACF,iBACF,iBACJ,kB,yBAvEN,4BAKI,4BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACE,6BACA,aACF,iBACA,+BACE,8BACA,aACF,iBACJ,iBAEJ,iBACJ,iBACA,8BACI,2BAEI,0BAAI,yBAAG,aACL,8BACA,aACA,8BACF,iBAAI,iBACJ,0BAAI,aAAwC,8BAA6D,iBAE7G,iBACJ,iBACA,8BACE,gCASA,gCASA,gCASA,gCAaF,iBACJ,kB,6BApE4B,mDAIV,0DAIA,8DASC,kEAEL,6DAGE,kFAKL,wGASA,oGASA,sHASA,+D,sBAqBK,4BACI,yBAQC,4BACI,6BACJ,iBACA,4BACK,6BACL,iBACA,4BACG,6BACF,iBACD,uBAGD,iBACJ,kB,sBACA,4BACE,yBAQE,4BACE,6BACF,iBACA,4BACE,6BACF,iBACA,4BACE,6BACF,iBACA,uBAGF,iBACF,kB,mDAiBQ,4BACI,gCAAsB,6HAClB,6BACJ,iBACJ,kB,yBAlBJ,yBAKI,4BACE,wBAAG,YAA8C,iBACnD,iBACA,4BACE,wBAAG,YAAyB,iBAC9B,iBACA,4BACE,wBAAG,YAAc,iBACnB,iBACA,+BAKJ,kB,4CAbS,+EAGA,wDAGA,6CAEoB,+D,kGAfjC,4BACI,+B,uBAoBJ,kB,8BApBQ,gJ,yBA+BH,wBAA+C,YAAyB,kB,uCAAzB,yD,yBAC/C,wBAAwF,YAAa,kB,uCAAb,6C,mDAK3F,4BACC,gCAAsB,6HACjB,6BACL,iBACD,kB,yBAlBD,yBAIC,4BACE,wBAAG,YAAY,iBACjB,iBACA,4BACG,6BACA,6BACF,iBACA,4BACE,wBAAG,YAAwC,iBAC7C,iBACD,+BAKD,kB,4CAdM,2CAGC,oEACA,uGAGA,yEAEmB,+D,yBAf3B,4BACC,+B,uBAoBD,kB,8BApBK,gJ,mDAuBL,6BACI,6CAAqB,uGAAoC,iBAC7D,kB,yBArGZ,6BAEI,4BAEI,+BACI,iCAuBA,iCAwBA,iCAuBA,iCAsBJ,iBACA,6BACI,+BAGJ,iBACJ,iBACJ,kB,8BAnGmB,mEAuBA,uEAwBA,mEAuBA,uEAwBF,6D,yBApGrB,6BACI,+BAyGJ,kB,6BAzGsC,2CDzElD,iBAiCC,WAAmBiT,EAAkC8C,EAC5C4X,EAAwB4I,EACxBpW,EAAsC/M,EAAiC+lB,GAF7D,KAAAlmB,UAAkC,KAAA8C,eAC5C,KAAA4X,SAAwB,KAAA4I,QACxB,KAAApW,kBAAuE,KAAAgZ,YA7BhF,KAAArnB,QAAkB,KAElB,KAAA2oB,aAAuB,EACvB,KAAAl1B,UAAoB,GAEpB,KAAAkxB,KAAY,CACXC,MAAO,EACPzxB,WAAY,EACZD,SAAU,GACV0b,QAAS,IAGV,KAAAga,YAAsB,EAYtB,KAAAC,WAAqB,EACrB,KAAAC,yBAAmC,EAKlC15B,KAAKihB,QAAU/O,EAAY+O,UAC3BjhB,KAAKkhB,aAAelhB,KAAKihB,SAAW/O,EAAYgP,eAChDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBhP,EAAYkP,gB,OAGvE,YAAAvQ,SAAA,WAEC7Q,KAAKqE,UAAYrE,KAAKq1B,MAAMQ,SAASt1B,OAAY,IAEjDP,KAAKg2B,aAAa,IAInB,YAAA/kB,YAAA,WACCjR,KAAK25B,eAGN,YAAAC,mBAAA,SAAmBC,GAClB,OAAOA,EAAK3N,QAAQ,KAAM,OAG3B,YAAA4N,wBAAA,SAAwB1S,GACvB,OAAO1mB,KAAKC,UAAUymB,IAGvB,YAAA2S,kBAAA,SAAkBvgB,GACjB,IAAK,IAAIvP,EAAI,EAAGA,EAAIjK,KAAKu1B,KAAK/V,QAAQ7Y,SAAUsD,EAAG,CAC/BjK,KAAKu1B,KAAK/V,QAAQvV,GAEpB/G,KAAOsW,EAAQtW,IAC/BlD,KAAKu1B,KAAK/V,QAAQS,OAAOhW,EAAG,KAK/B,YAAA+vB,uBAAA,SAAuBC,GAEtB,MAAiB,iDAAbA,EACIj6B,KAAKif,gBAAgB2B,OAAO,gDAGnB,yDAAbqZ,EACIj6B,KAAKif,gBAAgB2B,OAAO,qDAGnB,sDAAbqZ,EACIj6B,KAAKif,gBAAgB2B,OAAO,sDAGnB,sDAAbqZ,EACIj6B,KAAKif,gBAAgB2B,OAAO,sDAGnB,gDAAbqZ,EACIj6B,KAAKif,gBAAgB2B,OAAO,+CAItB,mEAAbqZ,GACgB,kEAAbA,GACa,mEAAbA,GACa,iEAAbA,EAEIj6B,KAAKif,gBAAgB2B,OAAO,6CAQtB,oDAAbqZ,GACgB,sDAAbA,GACa,0DAAbA,EAEIj6B,KAAKif,gBAAgB2B,OAAO,wDAG7BqZ,GAIR,YAAAvJ,OAAA,SAAOlX,GAAP,WAGCxZ,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAApY,0BAA2B,CACnEqY,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQgC,QAAUA,EAClCxZ,KAAKiS,WAAWuF,QAAQkhB,IAAM14B,KAAK04B,IACnC14B,KAAKiS,WAAWuF,QAAQ0iB,iBAAiB5jB,WAAU,SAAA9P,GAC9B,aAAhBA,EAAK+H,QACR,EAAKwrB,kBAAkBvzB,EAAKA,UAK/B,YAAAwvB,aAAA,SAAajyB,GAAb,WAEC/D,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQ3N,gBAAgBpE,KAAKqE,UAAWrE,KAAKu1B,KAAKzxB,SAAUC,GAAY,GAAMuO,MAAK,SAAA+B,GAIvF,GAFA,EAAKqkB,IAAMrkB,EAEY,mBAAnB,EAAKqkB,IAAIG,MACZ,EAAKtD,KAAO,EAAKmD,IAAIyB,kBAEjB,GAAuB,uBAAnB,EAAKzB,IAAIG,MAAgC,CACjD,EAAKtD,KAAO,EAAKmD,IAAI0B,SAErB,IAAK,IAAInwB,EAAI,EAAGA,EAAI,EAAKsrB,KAAK/V,QAAQ7Y,SAAUsD,EAAG,CAG7B,yBAFP,EAAKsrB,KAAK/V,QAAQvV,GAEpBxG,OACX,EAAKi2B,yBAA0B,IAK7B,EAAKD,WAAiC,YAApB,EAAKf,IAAI9U,OAGvB,EAAK6V,WAAgC,WAAnB,EAAKf,IAAI9U,QACnC,EAAK+V,cAHL,EAAKU,kBAMJ3nB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAKb,YAAAgnB,YAAA,WACK35B,KAAKy5B,WAAiC,MAApBz5B,KAAK23B,aAC1B33B,KAAK23B,YAAY9N,eAInB,YAAAwQ,aAAA,sBACCr6B,KAAKw5B,YAAc,EAEnBx5B,KAAK23B,YAAc,EAAAN,SAAS,KAAM/gB,WAAU,WAC3C,EAAKkjB,cAED,EAAKA,aAAe,IACvB,EAAKxD,aAAa,EAAKT,KAAKxxB,YAE5B,EAAKy1B,YAAc,MAIrBx5B,KAAKy5B,WAAY,GAGlB,YAAAa,oBAAA,aAIA,YAAAnB,sBAAA,aAIA,YAAAoB,UAAA,sBACCv6B,KAAKu5B,aAAev5B,KAAKu5B,YAEzBv5B,KAAK04B,IAAIyB,aAAa3a,QAAQnV,SAAQ,SAAAmwB,GACrCA,EAAI9I,SAAW,EAAK6H,gBAItB,YAAAkB,oBAAA,SAAoBp2B,GAApB,WACCrE,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAnY,uBAAwB,CAChEoY,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGtBvX,KAAKiS,WAAWuF,QAAQkhB,IAAM14B,KAAK04B,IAEnC14B,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,SAAA9P,GAC3C,EAAKimB,OAAOQ,SAAS,CAAC,iCAIxB,YAAAqM,sBAAA,SAAsBj1B,GAAtB,WACiC,GAA5BrE,KAAKu1B,KAAK/V,QAAQ7Y,OACrB3G,KAAK+R,QAAQvN,oBAAoBH,GAAWiO,MAAK,SAAA+B,GAChD,EAAKoY,OAAOQ,SAAS,CAAC,gCACpBva,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIZ3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAiQ,sBAAuB,CAC/DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGC,uBAAnBvX,KAAK04B,IAAIG,OACZ74B,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,iDAC9D5gB,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,8CAGjE5gB,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,6CAC9D5gB,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,yCAGlE5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAE1C7nB,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,SAAA9P,GAE3C,EAAKuL,QAAQvN,oBAAoBH,GAAWiO,MAAK,SAAA+B,GAEhD,EAAKoY,OAAOQ,SAAS,CAAC,gCAEpBva,OAAM,SAACC,GACT,EAAKC,MAAMD,WAOf,YAAAymB,qBAAA,SAAqB/0B,GAArB,WACCrE,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAiQ,sBAAuB,CAC/DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAGtBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAKif,gBAAgB2B,OAAO,uCAC9D5gB,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAKif,gBAAgB2B,OAAO,kCAEjE5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAE1C7nB,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,SAAA9P,GAE3C,EAAKyxB,UAAU1wB,aAAa,EAAKmxB,IAAIrxB,eAAeiL,MAAK,SAAA+B,GAExD,EAAKoY,OAAOQ,SAAS,CAAC,gCACpBva,OAAM,SAACC,GACT,EAAKC,MAAMD,UAMd,YAAAC,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA3RtC5T,GAAY,kQ,iCAAZA,EAAY,i6FCzBzB,4BACI,4BACA,6BAEA,4BACI,8BAEI,4BACI,yBACI,4BACJ,iBACJ,iBACA,gCAgFA,8BA2GR,iBACJ,kB,MAnMa,oDAOI,0CAgFA,sE,qgBDxEjB,GAKa,EAAAA,gB,kFEzBb,KACA,MADA,IAEA,QAMA,S,GAGA,OAEA,OACA,M,4HCbI,6BAAqE,YAAW,kB,6BAAX,+C,mDAY7D,0BACI,+CAAuB,4IAAiG,iBAC5H,iB,gCAD4F,iDAAmB,c,mDAG7G,yDAAmF,6IAAkG,iB,iCAAjC,kCAAmB,c,mDACvK,uDAA+E,6IAAkG,iB,iCAAjC,kCAAmB,c,mDACnK,uDAA+E,6IAAkG,iB,iCAAjC,kCAAmB,c,yBAHrK,0BACE,2DACA,yDACA,yDACF,kB,6BAHmC,8EACF,4EACA,6EDH7C,iBAmBI,WAAqBgT,EAAkCC,EAA6BrI,EAAsCsI,GAArG,KAAAF,UAAkC,KAAAC,WAA6B,KAAArI,WAAsC,KAAAsI,aAb1H,KAAArB,QAAkB,KASlB,KAAAuB,UAAoB,EACpB,KAAA1C,MAAgB,EAIdzP,KAAKk6B,iBAAmB,IAAI,EAAA/sB,Q,OAG9B,YAAA0D,SAAA,aAIA,YAAA6pB,0BAAA,SAA0BlhB,GACxBxZ,KAAKk6B,iBAAiBxsB,KAAK,CAACa,OAAO,WAAY/H,KAAMgT,KAGvD,YAAAjF,SAAA,WACIvU,KAAKiS,WAAWqC,QAGpB,YAAA1B,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA/B/C3T,GAAyB,uJ,iCAAzBA,EAAyB,shBCrBtC,4BACI,8BAEA,4BACI,yBACI,4BACJ,iBACJ,iBAEA,+BAEI,+BAEI,8BAGA,8BAMA,6BAEI,6BACI,6BACI,iCAAsB,wCAAS,EAAAuV,cAC3B,8BACJ,iBACJ,iBACJ,iBACJ,iBAEJ,iBACJ,iBAEJ,kB,MAnCS,oDAYQ,qFAGA,2F,iRDAjB,GAKa,EAAAvV,6B,kFErBb,WAQA,GAPA,MACA,MAIA,OAEA,QACA,S,GAGA,OACA,OACA,M,gFCbI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAb4B,mDAGR,uEAGA,wEDbxB,iBAeI,WAAqB+S,EAAkCC,EAC3CrI,EAAsCsI,EAAgC4C,GAD7D,KAAA9C,UAAkC,KAAAC,WAC3C,KAAArI,WAAsC,KAAAsI,aAAgC,KAAA4C,eAVlF,KAAAjE,QAAkB,KAGD,KAAAmpB,kBAAoB,IAAI,EAAAppB,aAEzC,KAAAwB,UAAoB,EACpB,KAAA1C,MAAgB,E,OAOhB,YAAAoB,SAAA,aAIA,YAAA8pB,gBAAA,sBACQ5D,EAAY/2B,KAAK6U,aAAauC,KAAM,EAAAxZ,yBAA0B,CAC9D0Z,UAAU,EACVC,qBAAqB,IAGzBwf,EAAUvf,QAAQ2K,yBAAyBniB,KAAKwZ,QAASxZ,KAAK04B,IAAIr0B,UAAWrE,KAAK04B,IAAIrxB,cAAcwC,WAAW,GAC/GktB,EAAUvf,QAAQ+J,gBAAiB,MACnCwV,EAAUvf,QAAQiK,sBAAqB,WAErC,EAAKsY,kBAAkBvjB,KAAK,EAAKgD,SACjC,EAAKvH,WAAWqC,WAKtB,YAAA0lB,uBAAA,SAAuBC,GAEnB,MAAgB,iDAAbA,EACQj6B,KAAK2J,SAASiX,OAAQ,gDAGjB,yDAAbqZ,EACQj6B,KAAK2J,SAASiX,OAAQ,qDAGjB,sDAAbqZ,EACMj6B,KAAK2J,SAASiX,OAAQ,sDAGf,sDAAbqZ,EACMj6B,KAAK2J,SAASiX,OAAQ,sDAGf,gDAAbqZ,EACMj6B,KAAK2J,SAASiX,OAAQ,+CAId,mEAAbqZ,GACgB,kEAAbA,GACa,mEAAbA,GACa,iEAAbA,EAEEj6B,KAAK2J,SAASiX,OAAQ,6CAOhB,oDAAbqZ,GACgB,sDAAbA,GACa,0DAAbA,EAEIj6B,KAAK2J,SAASiX,OAAQ,wDAGxBqZ,GAGX,YAAA7lB,SAAA,aAIA,YAAAG,SAAA,WACEvU,KAAKiS,WAAWqC,QAGlB,YAAA1B,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAxF/CtT,GAA4B,6L,iCAA5BA,EAA4B,w5CCrBzC,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,4BACI,4BACI,4BACI,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,aAAkD,iBAEjF,0BAAI,8BAAQ,8BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6B,iBAIhE,iBACJ,iBACA,8BACI,8BACI,iCAA0C,wCAAS,EAAAs7B,qBAC/C,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MApES,oDAWA,qDAqC8C,wFAGA,kE,4DDpCvD,GAKa,EAAAt7B,gC,kFErBb,WAKA,GAJA,MACA,MAGA,OAEA,S,GACA,OAMA,OACA,OACA,M,iGCfI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAb4B,mDAGR,uEAGA,wE,yBAwCF,yBACJ,yBAAI,YAA4B,iBAClC,kB,uBADM,iE,yBAFD,6BACC,8BAGP,kB,6BAHW,0DDnD1B,iBAsBI,WAAqB0S,EAAkCC,EAC3CrI,EAAsCsI,EAAgC4C,GAD7D,KAAA9C,UAAkC,KAAAC,WAC3C,KAAArI,WAAsC,KAAAsI,aAAgC,KAAA4C,eAjBlF,KAAAjE,QAAkB,KAGD,KAAAmpB,kBAAoB,IAAI,EAAAppB,aASzC,KAAAwB,UAAoB,EACpB,KAAA1C,MAAgB,E,OAOhB,YAAAoB,SAAA,WAMI7Q,KAAKwZ,QAAQ9V,OAAS,KACtB1D,KAAK46B,YAAc,IAIvB,YAAAC,UAAA,SAAUC,GACR,OAAOp6B,KAAKC,UAAUm6B,IAGxB,YAAAC,iCAAA,SAAiCD,GAC/B,OAAOA,EAASr3B,MAGlB,YAAAof,uBAAA,SAAwBthB,EAAkBu5B,GAA1C,WAGQlzB,EAAgB5H,KAAK04B,IAAIrxB,cAAc1D,UAE3C,OAAO,EAAA2b,WAAWnV,QAAO,SAAEoV,GACvB,EAAKxN,QAAQxO,wBAAyB,EAAKq3B,YAAar5B,EAJ3C,KAIiEqG,EAAe,EAAK8wB,IAAI7uB,WAAYyI,MAAM,SAAAkN,GACpHD,EAAS7R,KAAM8R,UAK3B,YAAAc,kBAAA,SAAmBpJ,EAAmB4jB,GAAtC,WAEI96B,KAAK+R,QAAQnR,oBAAqBsW,EAAEqJ,KAAK0U,IAAK6F,EAASv5B,SAAU,IAAI,EAAOvB,KAAK04B,IAAI7uB,WAAYyI,MAAM,SAAA4iB,GAEnG4F,EAASp3B,OAASwxB,EAAU9uB,UAC5B,EAAKw0B,YAAc1F,EAAU9uB,UAAU2c,WAAWlQ,aAAagN,kBAE/DnN,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAqoB,SAAA,sBACMC,EAAM,CACR3Y,WAAY,SACZ4Y,oBAAqBl7B,KAAKwZ,QAAQtW,IAGpClD,KAAK+R,QAAQtN,wBAAyBw2B,GAAM3oB,MAAM,SAAA+B,GAEhD,EAAK0lB,kBAAkBvjB,KAAK,EAAKgD,SAEjC,EAAKvH,WAAWqC,UAEd5B,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAwoB,gBAAA,sBACMF,EAAM,CACRC,oBAAqBl7B,KAAKwZ,QAAQtW,GAClCof,WAAY,UACZngB,KAAMnC,KAAKwZ,QAAQ9V,OAAOqf,WAAW5gB,KACrCZ,SAAUvB,KAAKwZ,QAAQ9V,OAAOqf,WAAWtf,KACzCwE,MAAOjI,KAAKwZ,QAAQvR,OAGtBjI,KAAK+R,QAAQtN,wBAAyBw2B,GAAM3oB,MAAM,SAAA+B,GAEhD,EAAK0lB,kBAAkBvjB,KAAK,EAAKgD,SAEjC,EAAKvH,WAAWqC,UAEd5B,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAA4B,SAAA,WACEvU,KAAKiS,WAAWqC,QAGlB,YAAA1B,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA1G/CzT,GAAqC,6L,iCAArCA,EAAqC,+pECvBlD,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,4BACI,4BACI,yBAAI,6BAAQ,4BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6C,iBAE5E,0BAAI,8BAAQ,6BAAsD,iBAAS,iBAC3E,2BACE,8BACF,iBAEA,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBACE,8BACF,iBACJ,iBACA,8BACC,8BACE,8BACC,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACD,iBACA,8BACE,gCAKF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAAoD,iBACzE,iBACF,iBACA,8BACE,+BAA4C,aAAiB,iBAC/D,iBACF,iBACA,8BACG,8BACE,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACF,iBACA,8BACE,gCAEC,oEAAyB,wCAGJ,EAAAohB,kBAAA,gBALtB,iBAUF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAAsD,iBAC3E,iBACF,iBACA,8BACE,iCAA0D,wCAAS,EAAA6a,qBACjE,8BACF,iBACA,iCAAsB,wCAAS,EAAAH,cAC7B,8BACF,iBACF,iBACF,iBACF,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MA3HS,oDAWA,qDAoC0C,kFAoBzB,gEAcuC,oDAY1C,qDAAyB,oBAAzB,CAAyB,mEAAzB,CAAyB,0BAAzB,CAAyB,uBAAzB,CAAyB,uBAiBJ,iE,8ID7F5C,GAKa,EAAA97B,yC,kFEvBb,WAKA,GAJA,MACA,MAGA,OAEA,S,GACA,OAMA,OACA,OACA,M,iGCfI,4BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,4BACI,4BAEI,qBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,wBACJ,kB,6BAb4B,mDAGR,uEAGA,wE,mDAgBZ,6BACI,6BACI,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,YAA6C,iBAE5E,yBAAI,6BAAQ,6BAAsD,iBAAS,iBAC3E,4BACE,8BACF,iBAEA,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBAAG,8BAA+D,iBACtE,iBACA,8BACC,8BACG,8BACE,6BACE,+BAAmB,8BAAoE,iBACzF,iBACF,iBACA,8BACE,+BAA4C,aAA0B,iBACxE,iBACF,iBACD,8BACE,8BACE,6BACE,+BAAmB,8BAA2D,iBAChF,iBACF,iBACA,8BACE,+BAA4C,aAAiB,iBAC/D,iBACF,iBACA,8BACG,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,gCAEC,uGAAyB,uHAF1B,iBAUF,iBACF,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,iCAAkD,kGAChD,8BACF,iBACA,iCAAsB,2FACpB,8BACF,iBACF,iBACF,iBACF,iBACJ,iB,gCAlEuC,kFAkBe,8DAUD,oDAY1C,qDAAyB,oBAAzB,CAAyB,gDAAzB,CAAyB,0BAAzB,CAAyB,uBAAzB,CAAyB,uBAiBJ,wDDvF5C,iBAkBI,WAAqB6S,EAAkCC,EAC3CrI,EAAsCsI,EAAgC4C,GAD7D,KAAA9C,UAAkC,KAAAC,WAC3C,KAAArI,WAAsC,KAAAsI,aAAgC,KAAA4C,eAblF,KAAAjE,QAAkB,KAGD,KAAAmpB,kBAAoB,IAAI,EAAAppB,aAEzC,KAAA+c,OAAiB,KAGjB,KAAAvb,UAAoB,EACpB,KAAA1C,MAAgB,E,OAOhB,YAAAoB,SAAA,WAEI7Q,KAAKwZ,QAAQ9V,OAAS,KACtB1D,KAAK46B,YAAc,IAIvB,YAAAG,iCAAA,SAAiCD,GAC/B,OAAOA,EAASr3B,MAGlB,YAAAof,uBAAA,SAAwBiY,GAAxB,WACI,OAAO,EAAAxb,WAAWnV,QAAO,SAAEoV,GACvB,EAAKvN,SAAS3J,mBAAoByyB,EAASxyB,cAAe,EAAKsyB,YAAa,MAAOtoB,MAAM,SAAAkN,GACrFD,EAAS7R,KAAM8R,UAK3B,YAAAc,kBAAA,SAAmBpJ,GACflX,KAAK0tB,OAASxW,EAAEqJ,KAAK1Z,OAGzB,YAAAm0B,SAAA,sBACMC,EAAM,CACR3Y,WAAY,SACZ4Y,oBAAqBl7B,KAAKwZ,QAAQtW,IAGpClD,KAAK+R,QAAQtN,wBAAyBw2B,GAAM3oB,MAAM,SAAA+B,GAEhD,EAAK0lB,kBAAkBvjB,KAAK,EAAKgD,SAEjC,EAAKvH,WAAWqC,UAEd5B,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAwoB,gBAAA,sBACMF,EAAM,CACRC,oBAAqBl7B,KAAKwZ,QAAQtW,GAClCof,WAAY,UACZ7Z,aAAczI,KAAK0tB,OACnBzlB,MAAOjI,KAAKwZ,QAAQvR,OAGtBjI,KAAK+R,QAAQtN,wBAAyBw2B,GAAM3oB,MAAM,SAAA+B,GAEhD,EAAK0lB,kBAAkBvjB,KAAK,EAAKgD,SAEjC,EAAKvH,WAAWqC,UAEd5B,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAA4B,SAAA,WACEvU,KAAKiS,WAAWqC,QAGlB,YAAA1B,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAjF/CxT,GAAmC,6L,iCAAnCA,EAAmC,kpECvBhD,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,gCAsEJ,iBACJ,iBAEJ,kB,MArHS,oDAWA,qDAiCQ,gD,oID3BjB,GAKa,EAAAA,uC,kFEvBb,WAKA,GAJA,MACA,MAGA,OAEA,S,GACA,OAMA,OACA,OACA,M,gFCfI,6BAAqE,YAAW,kB,6BAAX,+C,yBAWrE,4BAKI,6BACI,6BAEI,sBACA,2BACI,8BACI,6BAAQ,YAAgB,iBAC5B,iBACA,8BACI,YACJ,iBACA,+BACI,aACJ,iBACJ,iBAEJ,iBACJ,iBACA,yBACJ,kB,6BAb4B,mDAGR,uEAGA,wEDXxB,iBAsBI,WAAqB4S,EAAkCC,EAC3CrI,EAAsCsI,EAAgC4C,GAD7D,KAAA9C,UAAkC,KAAAC,WAC3C,KAAArI,WAAsC,KAAAsI,aAAgC,KAAA4C,eAjBlF,KAAAjE,QAAkB,KAGD,KAAAmpB,kBAAoB,IAAI,EAAAppB,aASzC,KAAAwB,UAAoB,EACpB,KAAA1C,MAAgB,E,OAOhB,YAAAoB,SAAA,WAMI7Q,KAAKwZ,QAAQ9V,OAAS,KACtB1D,KAAK46B,YAAc,IAIvB,YAAAC,UAAA,SAAUC,GACR,OAAOp6B,KAAKC,UAAUm6B,IAGxB,YAAAC,iCAAA,SAAiCD,GAC/B,OAAOA,EAASr3B,MAGlB,YAAAof,uBAAA,SAAwBthB,EAAkBu5B,GAA1C,WAGQlzB,EAAgB5H,KAAK04B,IAAIrxB,cAAc1D,UAE3C,OAAO,EAAA2b,WAAWnV,QAAO,SAAEoV,GACvB,EAAKxN,QAAQxO,wBAAyB,EAAKq3B,YAAar5B,EAJ3C,KAIiEqG,EAAe,EAAK8wB,IAAI7uB,WAAYyI,MAAM,SAAAkN,GACpHD,EAAS7R,KAAM8R,UAK3B,YAAAc,kBAAA,SAAmBpJ,EAAmB4jB,GAAtC,WAEI96B,KAAK+R,QAAQnR,oBAAqBsW,EAAEqJ,KAAK0U,IAAK6F,EAASv5B,SAAU,IAAI,EAAOvB,KAAK04B,IAAI7uB,WAAYyI,MAAM,SAAA4iB,GAEnG4F,EAASp3B,OAASwxB,EAAU9uB,UAC5B,EAAKw0B,YAAc1F,EAAU9uB,UAAU2c,WAAWlQ,aAAagN,kBAE/DnN,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAqoB,SAAA,sBACMC,EAAM,CACR3Y,WAAY,SACZ4Y,oBAAqBl7B,KAAKwZ,QAAQtW,IAGpClD,KAAK+R,QAAQtN,wBAAyBw2B,GAAM3oB,MAAM,SAAA+B,GAEhD,EAAK0lB,kBAAkBvjB,KAAK,EAAKgD,SAEjC,EAAKvH,WAAWqC,UAEd5B,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAAinB,mBAAA,SAAmBC,GAEjB,OAAOA,EAAK3N,QAAQ,KAAM,OAG5B,YAAAiP,gBAAA,sBACMF,EAAM,CACRC,oBAAqBl7B,KAAKwZ,QAAQtW,GAClCof,WAAY,UACZngB,KAAMnC,KAAKwZ,QAAQ9V,OAAOqf,WAAW5gB,KACrCZ,SAAUvB,KAAKwZ,QAAQ9V,OAAOqf,WAAWtf,KACzCwE,MAAOjI,KAAKwZ,QAAQvR,OAGtBjI,KAAK+R,QAAQtN,wBAAyBw2B,GAAM3oB,MAAM,SAAA+B,GAEhD,EAAK0lB,kBAAkBvjB,KAAK,EAAKgD,SAEjC,EAAKvH,WAAWqC,UAEd5B,OAAM,SAAEC,GACV,EAAKC,MAAMD,OAIf,YAAA4B,SAAA,WACEvU,KAAKiS,WAAWqC,QAGlB,YAAA1B,MAAA,SAAOD,GACC3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA/G/CvT,GAAmC,6L,iCAAnCA,EAAmC,g/CCvBhD,4BACI,8BAWA,+BA0BA,4BAKI,4BAEI,4BACI,4BACI,yBAAI,6BAAQ,4BAAsD,iBAAS,iBAC3E,2BAA+B,aAA6C,iBAE5E,0BAAI,8BAAQ,6BAAsD,iBAAS,iBAC3E,2BAA+B,8BAA6D,iBAE5F,0BAAI,8BAAQ,8BAAwD,iBAAS,iBAC7E,yBAAG,8BAA+D,iBACtE,iBACA,8BACC,8BACE,8BACC,6BACE,+BAAmB,8BAA+E,iBACpG,iBACD,iBACA,8BACG,+BAA4C,aAA4C,iBAC1F,iBACH,iBACA,8BACE,8BACE,6BACE,+BAAmB,8BAA6D,iBAClF,iBACF,iBACA,8BACE,+BAA4C,aAA6B,iBAC3E,iBACF,iBACD,iBACJ,iBACJ,iBACJ,iBAEJ,kB,MAjFS,oDAWA,qDAoC0C,kFAgBe,kFAUD,kE,4DDxDjE,GAKa,EAAAA,uC,kFEvBb,KACA,MADA,IAEA,QAEA,GADA,MACA,QACA,SAGA,GAFA,MACA,OACA,Q,qGCFE,2BAA2B,YAAgB,kB,6BAAhB,oD,qBAOrB,6B,qBACA,6B,wBAGA,6B,8BACgB,qC,wBAChB,6B,8BACgB,qC,mDAVtB,+BACE,4BACE,8BACE,mCACA,mCACF,iBACA,6BACE,iCAEA,iCAEF,iBACF,iBAEA,6BACE,8BACE,iCAAsB,6EAAS6S,WAAA,UAE7B,4BAAM,aAAc,iBACtB,iBACA,iCAAsB,0FAGpB,4BAAM,aAAc,iBACtB,iBACF,iBACF,iBACF,iB,gCAxBgB,iFACA,6EAGH,iFAEA,6EASC,iDAGN,kGAEM,kDDrBhB,iBAmCE,WAAoBA,EAAgCgN,EAA8Cnf,GAA9E,KAAAmS,aAAgC,KAAAgN,kBAA8C,KAAAnf,eA7BzF,KAAAs7B,MAAgBp7B,KAAKif,gBAAgB2B,OAAO,uBAE5C,KAAAhQ,QAAkB5Q,KAAKif,gBAAgB2B,OAAO,yBAI9C,KAAA0G,WAAqBtnB,KAAKif,gBAAgB2B,OAAO,wBAEjD,KAAAoM,WAAqBhtB,KAAKif,gBAAgB2B,OAAO,uBAEjD,KAAAnd,KAAmB,EAAAmkB,WAAWyT,Q,OAqBvC,YAAAxqB,SAAA,sBACE7Q,KAAKunB,UAAY,IAAI,EAAApa,QAErB,IAAImX,EAA+B,CACjCwK,WAAY,EACZC,mBAAmB,EACnBC,IAAK9uB,IAAM,iBAGbF,KAAKivB,SAAW,IAAI,EAAAC,aAAc5K,GAClCtkB,KAAKivB,SAASE,gBAAkB,SAAEC,EAAeC,GAC7CA,EAAKC,OAAQ,OAAQ5uB,KAAKC,UAAU,EAAK+3B,IAAIrxB,iBAEjDrH,KAAKivB,SAASO,mBAAqB,SAAEJ,GACjC,EAAKtvB,aAAa4B,SAEtB1B,KAAKivB,SAASQ,eAAiB,SAAElP,EAAWlM,EAAeuP,EAAapiB,GACpE,EAAKkuB,QAAQvV,cAActT,MAAQ,GACnC,EAAK/G,aAAagC,YAEtB9B,KAAKivB,SAASU,cAAgB,SAAEpP,EAAWlM,EAAkBuP,EAAgBpiB,GAC3E,EAAK+lB,UAAU7Z,KAAM,EAAKlH,MAC1B,EAAKyL,WAAWqC,QAElBtU,KAAKivB,SAASc,YAAc,SAAExP,EAAWlM,EAAkBuP,EAAgBpiB,GACzE,EAAKoR,MAAOlS,KAAK8J,MAAO6J,MAI5B,YAAAnQ,SAAA,SAASsC,GAEP,OAAO9F,KAAKC,UAAU6F,IAGxB,YAAAwqB,QAAA,WAC8B,MAAvBhxB,KAAKivB,SAASgB,OAAiBjwB,KAAKivB,SAASgB,MAAMtpB,OAAS,EAC/D3G,KAAKivB,SAASiB,YAGdlwB,KAAK4S,MAAO,CAAEhC,QAAS5Q,KAAKif,gBAAgB2B,OAAQ,mBAAqBhO,MAAO,MAI7E,YAAAA,MAAP,SAAcD,GACZ3S,KAAKs7B,aAAe,EAAA9mB,aAAaC,oBAAoB9B,I,iCA5E5C1T,GAAsB,mH,iCAAtBA,EAAsB,uD,OAAA,K,+yCCjBnC,4BAEE,4BACE,yBAAI,YAAS,iBACf,iBAEA,+BAEA,2BAAM,YAAW,iBAEjB,gCA4BF,kB,MAnCQ,4CAGA,mDAEA,8CAEA,4C,4aDER,GAKa,EAAAA,0B,kFEjBb,SAGA,O,GAKA,OACA,OACA,MACA,MAEA,OAEA,O,oHCRI,6BAAqE,YAAW,kB,6BAAX,+C,mDAUhE,6BACE,6BACE,yBAAI,YAAqB,iBAC3B,iBAEA,6BACE,4BACC,4BACC,4BAAO,6BAA6C,iBACpD,2BAA+B,aAAY,iBAC3C,gCAAkC,8BAAiD,iBAAQ,4BAAM,aAAmB,iBACrH,iBACA,8BACE,gCACE,2BACA,4BAAM,8BAAsC,iBAC9C,iBAEA,gCACE,gCAAwE,qHAAxE,iBACA,4BAAM,8BAA0C,iBAClD,iBACF,iBACD,iBACF,iBACF,iB,+CAvBQ,qDAO6B,0CACkE,iDAIlB,kDAAAiE,GAAA,eAA4B,uDAKY,kDAAAA,GAAA,cAA2B,uD,mDAOxJ,6BACG,6CAA0C,sHAAmD,iBAC/F,kB,uHA/BR,4BACI,6BACE,6BACC,gC,uBA0BA,+BAGD,iBACF,iBACJ,kB,6BA/BY,2LA0BA,wE,mDAqBJ,6BACE,6BACE,yBAAI,YAAqB,iBAC3B,iBAEA,6BACE,4BACC,4BACC,4BAAO,6BAA6C,iBACpD,2BAA+B,aAAY,iBAC3C,gCAAkC,8BAAiD,iBAAQ,+BAAiC,aAAmB,iBAC/I,gCAAkC,8BAAmD,iBAAQ,4BAAM,aAAsB,iBAC1H,iBACA,8BAEC,gCACE,gCAAoE,6HAApE,iBACA,4BAAM,8BAAsC,iBAC9C,iBACA,gCACE,2BACA,4BAAM,8BAA0C,iBAClD,iBACD,iBACD,iBACF,iBACF,iB,+CAxBQ,qDAO6B,0CAC6F,iDACzB,oDAKU,kDAAAA,GAAA,eAA4B,uDAI1C,kDAAAA,GAAA,cAA2B,uD,mDAOhI,6BACE,6CAAyC,qHAAkD,iBAC7F,kB,sHA9BF,6BACE,gC,uBA2BA,+BAGF,kB,6BA9BO,uLA2BA,uE,sBAIP,6BACE,2BAAyC,6BAA4D,iBACvG,kBD3ER,iBAkCI,WAAqB6R,EACAwmB,EACAtc,EACAhe,EACAkU,EACAjD,GALA,KAAA6C,kBACA,KAAAwmB,cACA,KAAAtc,kBACA,KAAAhe,OACA,KAAAkU,sBACA,KAAAjD,cA5BrB,KAAAspB,gBAAkC,CAC9BhG,MAAO,EACPzxB,WAAY,EACZD,SAAU,GACV0b,QAAS,IAGb,KAAAic,eAAiC,CAC7BjG,MAAO,EACPzxB,WAAY,EACZD,SAAU,GACV0b,QAAS,IAKb,KAAA8Y,eAAyB,EAEzB,KAAAF,kBAA4B,EAC5B,KAAAC,oBAA8B,E,OAe9B,YAAAxnB,SAAA,WACE7Q,KAAK07B,4BAA6B,IAuCpC,YAAAC,MAAA,SAAMC,GACJ,OAAW,MAAPA,EAEKA,EAAIC,cAIJ,IAIX,YAAAH,4BAAA,SAA6B33B,GAA7B,WACE/D,KAAK4Q,QAAU,KAEf5Q,KAAKu7B,YAAYjY,WAAYvf,EAAY/D,KAAKw7B,gBAAgB13B,SAAU,cAAcwO,MAAM,SAAAijB,GAC1F,EAAKiG,gBAAkBjG,MAI3B,YAAAuG,2BAAA,SAA4B/3B,GAA5B,WACE/D,KAAK4Q,QAAU,KAEf5Q,KAAKu7B,YAAYjY,WAAYvf,EAAY/D,KAAKy7B,eAAe33B,SAAU,YAAYwO,MAAM,SAAAijB,GACvF,EAAKkG,eAAiBlG,MAI1B,YAAAwG,eAAA,SAAeC,GAAf,WAGEh8B,KAAKu7B,YAAY9X,aAAauY,EAAK94B,IAAIoP,MAAM,WAC3C,EAAKkpB,gBAAgBhc,QAAQS,OAAO,EAAKub,gBAAgBhc,QAAQhO,QAAQwqB,GAAO,GAChF,EAAKP,eAAejc,QAAQtW,KAAK8yB,OAKrC,YAAAC,uBAAA,SAAuBD,GAAvB,WACEh8B,KAAKs4B,eAAgB,EAErBt4B,KAAKu7B,YAAY5X,cAAcqY,EAAK94B,GAAI,cAAcoP,MAAM,WAC1D,EAAKmpB,eAAejc,QAAQS,OAAO,EAAKwb,eAAejc,QAAQhO,QAAQwqB,GAAO,GAC9E,EAAKR,gBAAgBhc,QAAQtW,KAAK8yB,GAClC,EAAKN,4BAA4B,OAIrC,YAAAQ,wBAAA,WACEl8B,KAAKs4B,eAAgB,EAErBt4B,KAAK87B,2BAA2B,I,iCAhIzBx8B,GAAmB,qO,iCAAnBA,EAAmB,kGAHjB,CAAC,EAAA9E,YAAS,onDC1BzB,4BACE,4BAEA,4BAEE,yBAEA,8BAEA,yBACE,4BACF,iBACA,oBAEF,8BAqCA,4BACA,4BACI,6BACF,iBACA,gCAAgE,wCAAS,EAAA0hC,6BACvE,6BACF,iBACA,iBACA,qBAEA,6BACE,8BACE,gCAgCA,gCAGF,iBACF,iBAGH,iBACD,kB,MAhGS,oDAOU,uEAiDkB,uFAgCA,2F,oqCDzErC,GAOa,EAAA58B,uB,kFE7Bb,KAEA,MACA,MAHA,IAOA,SAEA,GADA,MACA,QACA,SAEA,S,GACA,O,oICQY,4BACE,4BACE,2BAA8F,YAAgC,iBAChI,iBACA,4BACE,gCAAsB,4GACpB,6BACF,iBACA,gCAAsB,4GACpB,6BACF,iBACA,gCAAsB,8GACpB,8BACF,iBACF,iBACF,iB,0BAbO,oFAA2F,qE,yEDR9G,aAoBC,WAAmByS,EAA+CpI,EAAuC8iB,EAAwB5X,GAA9G,KAAA9C,UAA+C,KAAApI,WAAuC,KAAA8iB,SAAwB,KAAA5X,eAdjI,KAAAjE,QAAkB,KAElB,KAAA2kB,KAA0C,CACzC5G,UAAW,GACX6G,MAAO,EACPzxB,WAAY,EACZD,SAAU,I,OAUX,YAAA+M,SAAA,WACC7Q,KAAKg2B,aAAa,IAGnB,YAAAA,aAAA,SAAajyB,GAAb,WACC/D,KAAK+R,QAAQ1C,QAAQtL,EAAY/D,KAAKu1B,KAAKzxB,UAAUwO,MAAK,SAAAijB,GACzD,EAAKA,KAAOA,KACV7iB,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAxI,OAAA,sBACCnK,KAAK+R,QAAQtC,KAAK,MAAM6C,MAAK,SAAA+B,GAE5B,IAAIpC,EAAa,EAAK4C,aAAauC,KAAK,EAAA5X,oCAAqC,CAC5E6X,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBtF,EAAWuF,QAAQzX,KAAK,KAAMsU,EAAS8U,MACvClX,EAAWuF,QAAQ2kB,UAAU7lB,WAAU,WACtC,EAAK0f,aAAa,EAAKT,KAAKxxB,mBAK/B,YAAA2sB,OAAA,SAAOhsB,GAAP,WAEC1E,KAAK+R,QAAQtC,KAAK/K,EAAOI,KAAKwN,MAAK,SAAA+B,GAElC,IAAIpC,EAAa,EAAK4C,aAAauC,KAAK,EAAA5X,oCAAqC,CAC5E6X,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBtF,EAAWuF,QAAQzX,KAAKsU,EAAS3P,OAAQ2P,EAAS8U,MAClDlX,EAAWuF,QAAQ2kB,UAAU7lB,WAAU,WACtC,EAAK0f,aAAa,EAAKT,KAAKxxB,mBAK/B,YAAA8wB,SAAA,SAASnwB,GAAT,WAEC1E,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAiQ,sBAAuB,CAC/DhQ,UAAU,EACVC,UAAU,EACVC,qBAAqB,IAEtBvX,KAAKiS,WAAWuF,QAAQ5G,QAAU5Q,KAAK2J,SAASiX,OAAO,+BAAiC,KAAOlc,EAAOuD,MAAM4X,eAAiB,IAC7H7f,KAAKiS,WAAWuF,QAAQ8P,WAAatnB,KAAK2J,SAASiX,OAAO,uBAC1D5gB,KAAKiS,WAAWuF,QAAQ/T,KAAO,EAAAmkB,WAAWC,OAE1C7nB,KAAKiS,WAAWuF,QAAQ+P,UAAUjR,WAAU,WAC3C,EAAKvE,QAAQrC,OAAOhL,EAAOI,KAAKwN,MAAK,WACpC,EAAK0jB,aAAa,EAAKT,KAAKxxB,eAC1B2O,OAAM,SAACC,GACT,EAAKC,MAAMD,UAKd,YAAA8d,OAAA,SAAO/rB,GACN1E,KAAKysB,OAAOQ,SAAS,CAAC,oCAAqCvoB,EAAOI,OAGnE,YAAA8N,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCArFtCpT,GAAqC,qK,iCAArCA,EAAqC,+7BCpBlD,4BACE,4BACA,6BAEA,4BAEE,4BACE,yBACE,4BACF,iBACF,iBAEA,4BACE,4BACE,8BACE,6BACE,0BACE,4BAAwB,6BAAwD,iBAClF,iBACF,iBACA,6BACE,+B,wBAgBF,iBACF,iBACA,8CAAqB,8CAAc,EAAAy2B,aAAA,MAAsB,iBAEzD,8BACE,8BACE,iCAAsB,wCAAS,EAAA7rB,YAC7B,8BACF,iBACF,iBACF,iBACF,iBACF,iBACF,iBACF,kB,MA9BgB,qJ,uMDNhB,GAKa,EAAA5K,yC,kFEpBb,KACA,MADA,IAEA,QAQA,GALA,MAGA,OACA,OACA,Q,4GCTE,6BAAqE,YAAW,kB,6BAAX,+C,mDAWjE,4BACE,4BACE,4BAAQ,6BAAyD,YACjE,iBACF,iBACA,6BACE,+BAAO,2FAAP,iBACF,iBACF,iB,0BANqE,wDAI1D,+CAA+B,yBAA/B,CAA+B,wC,yBAWlC,gCAA6D,YAAa,kB,uBAAhC,6BAAmB,6C,yBAa7D,gCAA4E,YAAmB,kB,uBAA5C,6BAAyB,6C,mDARpF,4BACE,4BACE,4BAAO,6BAA4D,iBACrE,iBACA,6BACE,8BACE,gCAAoB,4GAClB,wBACA,kCACF,iBACF,iBACF,iBACF,iB,gCAN0B,0DAA8B,+BAExC,2D,yBAcR,gCAAiE,YAAgB,kB,uBAArC,4BAAqB,6C,mDARzE,4BACE,4BACE,4BAAO,6BAAyD,iBAClE,iBACA,6BACE,8BACE,gCAAoB,yGAA2B,+EAC7C,wBACA,kCACF,iBACF,iBACF,iBACF,iB,gCAN0B,uDAA2B,+BAErC,uD,yBAgCJ,4BACE,+BAA2C,YAA+B,iBAC5E,kB,uCAD6C,+D,yBAKzC,gCAAuD,YAA6B,kB,uBAAjD,6BAAoB,4D,mDAH3D,4BACE,gCAAoB,yHAA0C,oKAC5D,wBACA,kCACF,iBACF,iB,+DAJsB,6DAA0C,mCAEpD,gD,mDAGZ,4BACE,gCAAoB,gHAClB,wBACA,gCAA0B,6BAAwD,iBAClF,gCAA8B,6BAAgE,iBAC9F,gCAAoB,6BAAsD,iBAC5E,iBACF,iB,0CANsB,oDAAiC,2B,mDAenD,2BAAyD,2I,uBACvD,yBACA,+BAAgD,6BAAyD,iBAC3G,iB,KAHiG,kF,mDARrG,4BACP,0BACE,2BAA0B,2J,uBACxB,yBACA,+BAAgD,qBAAM,iBACxD,iBACF,iBACA,0BACW,6BAIF,iBACX,iB,0CAX0E,iFAM1D,qD,yBA0CY,gCACE,YACF,kB,uBAFQ,gCACN,qD,2FAHJ,gCAA2C,gKAAyB,GAAG68B,MAAM/yB,WAAW,EAAnB,qBAA1B,CAAmE,uLAAiF,GAAG+yB,MAAM/yB,WAAW,EAAnB,oBAA2C,GAAG+yB,MAAM/yB,WAAW,EAAnB,uBAC1O,gCAAyB,6BAA0C,iBACnE,kCAGF,iB,0FAL2C,6EAAmE,yCACpG,4CAC4B,qD,sBAItC,+BAA+D,6BAAwC,kB,yBA8BnG,gCACE,YACF,kB,uBAF2G,6BACzG,qD,mDAzBb,+BACG,4BACE,yBACE,uBAEA,4BACE,4BAAO,6BAAkD,iBAC3D,iBACA,uBAGA,4BACE,4BAAO,8BAAsD,iBAC/D,iBACF,iBACF,iBACA,6BACE,0BACE,qBACA,0BAAI,gCAA2B,aAAc,iBAAQ,iBACrD,6BAA4C,gCAA2B,8BAAwC,iBAAQ,iBACvH,0BACE,iCAAQ,+KAAyB,GAAG+yB,MAAM/yB,WAAW,EAAnB,yBAChC,iCAAyB,8BAA0C,iBACnE,mCAGF,iBACF,iBACF,iBACF,iBACF,iB,yGAZqC,6CAGrB,+FAAyE,yCACvE,4CACA,iH,yBAzBpB,0BACC,kCAgCA,kB,uCAhCO,gD,yBArCZ,yBACE,2BACE,+BACE,4BACE,yBACE,4BACE,4BAAO,6BAAqD,iBAC9D,iBACA,4BACG,4BAAO,8BAA0C,iBACnD,iBACA,wBAGA,6BACE,6BAAO,8BAAqD,iBAC9D,iBACH,iBACF,iBACA,6BACE,0BACE,0BAAI,gCAA2B,aAAc,iBAAQ,iBACrD,0BAAI,gCAA2B,aAAkB,iBAAQ,iBACzD,6BAA4C,gCAA2B,8BAAwC,iBAAQ,iBACvH,0BACE,mCAMA,kCACF,iBACF,iBACF,iBACF,iBACA,gCAkCF,iBACF,kB,uEAlDyC,6CACA,gDAGrB,0DAMD,2DAKV,+J,yBA7Cd,4BACE,yBAAI,yBAAU,iBACf,+BACE,4BACE,yBACE,oBACF,iBACF,iBACA,4BACE,+BAwEF,iBACF,iBACD,kB,uCA1ES,wD,yBAzCX,yBACE,8BAGA,8BAMA,8BAQA,8BAcA,8BAoFF,kB,uBApHuD,wEAC/B,6DAGA,6DAMA,6DAQA,6DAcN,8D,mDAzD5B,4BAEE,4BACE,4BAAO,6BAAwD,iBACjE,iBACA,6BACE,6BACE,+BACE,4BACE,yBACE,4BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACA,6BACE,8BACF,iBACF,iBACF,iBACA,6BACE,+BAqHA,0BACE,6BACE,4BAAsB,2FAAqB,iBAC7C,iBACF,iBACF,iBACF,iBAEF,iBACJ,iBAGA,iB,gCAjIc,qDD5DpB,iBAkCC,WAAoB0I,EAA+CgD,EAA0CpL,EAAuCsI,GAAhI,KAAAF,UAA+C,KAAAgD,kBAA0C,KAAApL,WAAuC,KAAAsI,aA5BpJ,KAAArB,QAAkB,KAIlB,KAAAlM,OAAgC,CAC/B6O,aAAc,KACd8oB,OAAQ,KACR14B,UAAW,KACXsE,MAAOjI,KAAK2J,SAASQ,SACrB9C,cAAe,IAGhB,KAAA6hB,cAA+B,GAE/B,KAAAoT,KAAoB,KACpB,KAAAC,QAAwD,KAExD,KAAAl8B,MAAyB,GAEzB,KAAAm8B,UAAwB,G,OAWxB,YAAA3rB,SAAA,WACC7Q,KAAKm8B,UAAY,IAAI,EAAAhvB,SAGtB,YAAApN,KAAA,SAAK2E,EAA+BwkB,GAApC,WAIC,GAFAlpB,KAAKkpB,cAAgBA,EAEP,MAAVxkB,EAAgB,CACnB1E,KAAK0E,OAASA,EAEd,IAAI+3B,EAASz8B,KAAKkpB,cAAcxD,WAAU,SAAA5R,GAAO,OAAAA,EAAI3R,OAAS,EAAKuC,OAAO6O,iBAE1D,IAAZkpB,IACHz8B,KAAKs8B,KAAOt8B,KAAKkpB,cAAcuT,IAGhC,IAAIC,EAAS18B,KAAKs8B,KAAKK,QAAQjX,WAAU,SAAA2W,GAAU,OAAAA,EAAOv3B,MAAQ,EAAKJ,OAAO23B,WAE9D,IAAZK,IACH18B,KAAKu8B,QAAUv8B,KAAKs8B,KAAKK,QAAQD,IAGd,MAAhB18B,KAAKu8B,SAAyC,wBAAtBv8B,KAAKu8B,QAAQ94B,MAExCzD,KAAK+U,gBAAgB3U,kBAAkB,KAAM,CAACJ,KAAK0E,OAAOf,YAAY2O,MAAK,SAAAjS,GAC1E,EAAKA,MAAQA,KAKfL,KAAKw8B,UAAY,GACjB,IAAK,IAAIvyB,EAAI,EAAGA,EAAIjK,KAAK0E,OAAO2C,cAAcu1B,OAAOj2B,SAAUsD,EAC/D,CACE,IAAImyB,EAAQp8B,KAAK0E,OAAO2C,cAAcu1B,OAAO3yB,GAEzC4yB,EAAqB,CAAET,MAAOA,EAAOU,SAAU7yB,EAAG8yB,mBAAkB,GAEhD,MAApBX,EAAM/yB,YAAsBsiB,OAAOuF,KAAKkL,EAAM/yB,YAAY1C,OAAS,IAErEk2B,EAASG,eAAgB,GAG3Bh9B,KAAKw8B,UAAUtzB,KAAK2zB,MAKxB,YAAAI,uBAAA,sBACKxX,EAAQzlB,KAAKkpB,cAAcxD,WAAU,SAAA5R,GAAO,OAAAA,EAAI3R,OAAS,EAAKuC,OAAO6O,iBAE1D,IAAXkS,EACHzlB,KAAKs8B,KAAOt8B,KAAKkpB,cAAczD,IAG/BzlB,KAAKs8B,KAAO,KACZt8B,KAAKu8B,QAAU,OAIjB,YAAApoB,SAAA,sBACKsR,EAAQzlB,KAAKs8B,KAAKK,QAAQjX,WAAU,SAAA2W,GAAU,OAAAA,EAAOv3B,MAAQ,EAAKJ,OAAO23B,UAU7E,GAPCr8B,KAAKu8B,SADS,IAAX9W,EACYzlB,KAAKs8B,KAAKK,QAAQlX,GAGlB,KAII,MAAhBzlB,KAAKu8B,SAAyC,wBAAtBv8B,KAAKu8B,QAAQ94B,MAMxC,GAJAzD,KAAK+U,gBAAgB3U,kBAAkB,KAAM,CAACJ,KAAK0E,OAAOf,YAAY2O,MAAK,SAAAjS,GAC1E,EAAKA,MAAQA,KAG6B,MAAvCL,KAAK0E,OAAO2C,cAAsB,OAAW,CAC/C,IAAI61B,EAAM,CACLz5B,KAAM,KACN+F,cAAe,KACf4yB,MAAO,GAEbp8B,KAAK0E,OAAO2C,cAAsB,OAAI,CAAC61B,GACvCl9B,KAAKw8B,UAAUtzB,KAAK,CAACkzB,MAAMc,EAAKJ,SAAU,EAAGC,mBAAkB,UAKhE/8B,KAAKK,MAAQ,IAIf,YAAA88B,SAAA,WACE,IAAID,EAAM,CACPz5B,KAAM,KACN+F,cAAe,KACf4yB,MAAOp8B,KAAK0E,OAAO2C,cAAcu1B,OAAOj2B,QAExCy2B,EAAMp9B,KAAK0E,OAAO2C,cAAsB,OAAE6B,KAAKg0B,GACnDl9B,KAAKw8B,UAAUtzB,KAAK,CAAEkzB,MAAOc,EAAKJ,SAAUM,EAAI,EAAGL,mBAAkB,KAGtE,YAAAM,YAAA,SAAYP,EAAkBQ,GAC7B,GAAIR,EAAW98B,KAAK0E,OAAO2C,cAAsB,OAAEV,OAAQ,CAC1D,IAAI42B,EAAcv9B,KAAKw9B,iBACnBD,IAAgBD,EAAc,GAEhCt9B,KAAKw8B,UAAUvc,OAAOsd,EAAa,GAGrCv9B,KAAKw8B,UAAUvc,OAAOqd,EAAe,GAGrC,IADA,IAAIG,EAAc,EACTxzB,EAAI,EAAGA,EAAIjK,KAAKw8B,UAAU71B,SAAUsD,EAC7C,CACE,IAAI4yB,EAAqB78B,KAAKw8B,UAAUvyB,GAExC4yB,EAASC,SAAWW,EAEfZ,EAASE,oBAEZU,GAA4B,GAIhCz9B,KAAK0E,OAAO2C,cAAsB,OAAE4Y,OAAO6c,EAAU,KAIvD,YAAAU,eAAA,WACE,IAAK,IAAIvzB,EAAI,EAAGA,EAAIjK,KAAKw8B,UAAU71B,SAAUsD,EAC5C,CAGE,GAFejK,KAAKw8B,UAAUvyB,GAEjB8yB,kBAEX,OAAO9yB,EAIX,OAAQ,GAGX,YAAAyzB,oBAAA,SAAoBb,GAClB,IAAIU,EAAcv9B,KAAKw9B,kBAEF,GAAhBD,IAEFv9B,KAAKw8B,UAAUvc,OAAOsd,EAAa,GAE/BA,GAAeV,EAASC,SAAW,IAMzC98B,KAAK29B,sBAAsBd,EAAST,MAAM5yB,cAAeqzB,EAASC,UAAU,IAG9E,YAAAc,eAAA,SAAe1zB,EAA6B2zB,GAE1C,IAAK,IAAI5zB,EAAI,EAAGA,EAAIC,EAAK4zB,WAAWn3B,SAAUsD,EAC9C,CACE,IAAI8zB,EAAY7zB,EAAK4zB,WAAW7zB,GAEhC,GAAI8zB,EAAUF,UAAYA,EAExB,OAAOE,EAAUzZ,UAKxB,YAAA0Z,oBAAA,SAAoB9zB,EAAW+zB,EAAkBpB,GAE/C,GAAgB,MAAZoB,GAAiC,KAAbA,GAUxB,IAAK,IAAIpgB,EAAI,EAAGA,EAAIgf,EAASqB,QAAQC,MAAMx3B,OAAQkX,IAEjD,GAAIgf,EAASqB,QAAQC,MAAMtgB,GAAGpE,OAASvP,EAAKuP,KAC5C,CACE,IAAI2kB,EAAmBvB,EAASqB,QAAQC,MAAMtgB,GAE9C,GAAyB,MAArBugB,EAAYxK,MAChB,CACE1pB,EAAK0pB,MAAQ,GAEb,IAAK,IAAI3pB,EAAI,EAAGA,EAAIm0B,EAAYxK,MAAMjtB,SAAUsD,EAChD,CACE,IAAIrH,EAAOw7B,EAAYxK,MAAM3pB,GAE7BC,EAAK0pB,MAAMhxB,EAAKT,MAAQ,MAI5B,aA1BgB,MAAd+H,EAAK0pB,QAEP1pB,EAAK0pB,MAAQ,KA6BnB,YAAA+J,sBAAA,SAAsBt4B,EAA2Bi4B,EAAuBe,GAAxE,WACG,QADqE,IAAAA,OAAA,GAC3C,KAAtBh5B,GAAiD,MAArBA,EAChC,CACE,IAAIw3B,EAAqB78B,KAAKw8B,UAAUc,GAaxC,OAXAT,EAASG,eAAgB,EACzBH,EAASqB,QAAU,KACnBrB,EAAST,MAAM/yB,WAAa,SAIR,IAFhBk0B,EAAcv9B,KAAKw9B,mBAEED,IAAgBD,EAAc,GAErDt9B,KAAKw8B,UAAUvc,OAAOsd,EAAa,IAMvC,IAKMA,EALFW,EAAUl+B,KAAKw8B,UAAUc,GAAeY,QAC7B,MAAXA,GAAmBA,EAAQ74B,oBAAsBA,IAM/B,IAFhBk4B,EAAcv9B,KAAKw9B,mBAEED,IAAgBD,EAAgB,IAEvDt9B,KAAKw8B,UAAUvc,OAAOsd,EAAa,GAE/BA,EAAcD,IAEhBA,GAAgC,IAIpCt9B,KAAKw8B,UAAUvc,OAAOqd,EAAc,EAAG,EAAG,CAACP,mBAAkB,EAAMmB,QAAQA,KAI5El+B,KAAK+R,QAAQzC,iBAAiBjK,EAAmBrF,KAAK0E,OAAO23B,QAAQ/pB,MAAM,SAAC6rB,GAC1E,IAAIZ,EAAc,EAAKC,iBACnBX,EAAqB,EAAKL,UAAUc,GACpClB,EAAQS,EAAST,MAmBrB,GAjBIiC,IAEFjC,EAAM/yB,WAAa,IAGrBwzB,EAASqB,QAAU,CAAC74B,kBAAmBA,EAAmB84B,MAAMA,IAE5C,GAAhBZ,IAAsBA,IAAgBD,EAAc,GAAKa,EAAMx3B,OAAS,KAEzE,EAAK61B,UAAUvc,OAAOsd,EAAa,GAE/BA,EAAcD,IAEhBA,GAAgC,IAIjCa,EAAMx3B,OAAS,EACnB,CACEk2B,EAASG,eAAgB,EAEzB,IAAK,IAAI/yB,EAAI,EAAGA,EAAIk0B,EAAMx3B,SAAUsD,EACpC,CACE,IAAIC,EAAOi0B,EAAMl0B,GAEjB,IAAIo0B,GAAiD,MAA/BjC,EAAM/yB,WAAWa,EAAKuP,SAE1C2iB,EAAM/yB,WAAWa,EAAKuP,MAAQ,CAC5BA,KAAMvP,EAAKuP,KACXlK,WAAY,MAGK,MAAdrF,EAAK0pB,OAAiB1pB,EAAK0pB,MAAMjtB,OAAS,GAC/C,CACEy1B,EAAM/yB,WAAWa,EAAKuP,MAAMma,MAAQ,GAEpC,IAAK,IAAI/V,EAAI,EAAGA,EAAI3T,EAAK0pB,MAAMjtB,SAAUkX,EACxC,CACE,IAAIjb,EAAOsH,EAAK0pB,MAAM/V,GAEtBue,EAAM/yB,WAAWa,EAAKuP,MAAMma,MAAMhxB,EAAKT,MAAQ,OAMxD,EAAKq6B,UAAUvc,OAAOqd,EAAc,EAAG,EAAG,CAACP,mBAAkB,EAAMmB,QAAQ,CAAC74B,kBAAmBA,EAAmB84B,MAAMA,UAIxHtB,EAASG,eAAgB,KAE1BtqB,OAAM,SAACC,GACP,EAAKC,MAAMD,OAKlB,YAAAyB,SAAA,sBACCpU,KAAK+R,QAAQvC,MAAMxP,KAAK0E,QAAQ4N,MAAK,SAAA2oB,GAEpC,EAAKkB,UAAUzuB,KAAKutB,GACpB,EAAKhpB,WAAWqC,UACd5B,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAA+N,OAAA,sBAEwB,MAAnB1gB,KAAK0E,OAAOI,IACf9E,KAAK+R,QAAQpC,OAAO3P,KAAK0E,OAAOI,KAAKwN,MAAK,WACzC,EAAKL,WAAWqC,UACd5B,OAAM,SAACC,GACT,EAAKC,MAAMD,MAKZ3S,KAAKiS,WAAWqC,QAIlB,YAAA1B,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAhXtCnT,GAAmC,0K,iCAAnCA,EAAmC,qE,OAAA,K,ssGChChD,4BACE,8BAEA,4BACE,yBACE,4BACF,iBACF,iBAEA,+BAAwC,sFAA0B,EAAA4U,cAEhE,+BACE,8BASA,4BACE,6BACE,6BAAO,6BAA+D,iBACxE,iBACA,8BACE,+BACE,iCAAoB,4EAAiC,4BAA+B,EAAA6oB,4BAClF,yBACA,mCACF,iBACF,iBACF,iBACF,iBACA,gCAcA,gCAcA,iCA4JA,6BACE,wBACA,8BACE,8BACE,gCAAmF,wCAAS,EAAAvc,Y,wBAA5F,iBACA,2B,wBACF,iBACF,iBACF,iBAEF,iBACF,iBAEF,iB,+BAtOO,oDAWuB,mEAeE,6DAAiC,+BAE3C,uDAKX,iDAcA,6DAcmB,4FAgKG,2EACA,2EAAqC,uB,sTDpMtE,GAKa,EAAAlhB,uC,kFEhCb,KACA,MADA,IAEA,QAQA,GAJA,MAGA,OACA,Q,4HCJI,4BAAqE,YAAW,kB,6BAAX,+C,qBA0D/C,6B,qBACA,6B,qBACA,6B,yBAVJ,yBACE,2BACE,6BAA0E,YAC5E,iBACA,yBACE,YACF,iBACA,4BACE,oCACA,oCACA,oCACF,iBACF,kB,iCAV8E,iDAG1E,6DAGU,yDACA,6DACA,oD,yBA/B1B,4BACE,4BAEI,yBACI,6BACJ,iBACA,+BACI,4BACE,yBACE,yBACE,6BACF,iBACA,yBACE,8BACF,iBACA,6BACE,8BACF,iBACF,iBACF,iBACA,6BACE,gCAaF,iBACJ,iBAEJ,iBACF,kB,8BAjBgB,uE,yBAwCI,8BACE,YACF,kB,uCADE,kE,wBAIJ,mC,uCAA0G,oC,yBAM1G,2BACE,gCACE,6BACF,iBACF,kB,uCAJoC,kE,yBAnB1C,yBACE,2BACE,6BACE,sBACA,2BACE,8BAA+B,YAAiB,iBAChD,8BAA+B,YAAmB,iBAClD,8BAA+B,aAAyB,iBACxD,iCAGF,iBAEA,2CAEF,iBACF,iBACA,6BACE,8BACE,8BAKD,iBACF,iBACH,kB,4CArBuC,wDACA,0DACA,kEACzB,sGAKQ,sGAMb,0D,mDAWb,6BACE,6CAAqB,uGAAoC,iBAC3D,kB,4HA/GZ,4BAEE,4BACE,4BACE,yBAAI,YAA+B,iBACrC,iBACF,iBAEA,4BACE,4BACE,4BACE,8BAAuC,kBAAG,iBAC1C,uBACA,+BAAuC,aAAsB,iBAC/D,iBACA,8BACE,oCACE,8BACE,iCAAiD,wF,wBAC/C,8BACF,iBACF,iBACF,iBACF,iBACF,iBAEA,iCAyCA,6BACE,8BACE,6BACE,8BACE,gCACE,6BACE,6BACE,4BAAoC,8BAA2C,iBACjF,iBACF,iBACA,6BAEE,gC,wBA4BF,iBACF,iBACA,gCAGF,iBACF,iBACF,iBACF,iBACF,iBACF,iB,oDAjHU,kEASqC,yDAKsE,kDAA2B,0DAQ3H,0FAqDD,oJA8BH,+DDxGvB,iBAmBC,WAAoBuS,EAA+CpI,EAAuC0rB,GAAtF,KAAAtjB,UAA+C,KAAApI,WAAuC,KAAA0rB,QAb1G,KAAAzkB,QAAkB,KAElB,KAAAlM,OAAgC,KAEhC,KAAA6wB,KAAuC,CACtCzxB,SAAU,GACVC,WAAY,EACZyxB,MAAO,EACP7G,UAAW,I,OAOZ,YAAA9d,SAAA,sBACO/L,EAAM9E,KAAKq1B,MAAMQ,SAASC,SAAS71B,IAAI,OAE7CD,KAAK+R,QAAQ9R,IAAI6E,GAAKwN,MAAK,SAAA5N,GAC1B,EAAKA,OAASA,EACd,EAAKsxB,aAAa,MAGnBh2B,KAAK23B,YAAc,EAAAN,SAAS,KAAO/gB,WAAU,WAC5C,EAAK0f,aAAa,EAAKT,KAAKxxB,gBAI9B,YAAAkN,YAAA,WACCjR,KAAK23B,YAAY9N,eAGlB,YAAAyU,MAAA,sBACCt+B,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQnC,IAAI5P,KAAK0E,OAAOI,KAAKwN,MAAK,WAEtC,EAAK0jB,aAAa,EAAKT,KAAKxxB,eAE1B2O,OAAM,SAACC,GACT,EAAKC,MAAMD,OAIb,YAAAqjB,aAAA,SAAajyB,GAAb,WACoB,MAAf/D,KAAK0E,SAER1E,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQlC,QAAQ7P,KAAK0E,OAAOI,IAAKf,EAAY/D,KAAKu1B,KAAKzxB,UAAUwO,MAAK,SAAA+B,GAE1E,EAAKskB,iBAAiBtkB,GACtB,EAAKkhB,KAAOlhB,KAEV3B,OAAM,SAACC,GACT,EAAKC,MAAMD,QAKd,YAAA8lB,gBAAA,SAAgBC,GACf,MAAmB,aAAfA,EAAI9U,OACA5jB,KAAK2J,SAASiX,OAAO,0BAEL,YAAf8X,EAAI9U,QAAuC,QAAf8U,EAAI9U,OACjC5jB,KAAK2J,SAASiX,OAAO,yBAEL,WAAf8X,EAAI9U,OACL5jB,KAAK2J,SAASiX,OAAO,wBAEL,YAAf8X,EAAI9U,OACL5jB,KAAK2J,SAASiX,OAAO,yBAEL,aAAf8X,EAAI9U,OACL5jB,KAAK2J,SAASiX,OAAO,0BAEL,YAAf8X,EAAI9U,OACL5jB,KAAK2J,SAASiX,OAAO,yBAGrB5gB,KAAK2J,SAASiX,OAAO,0BAI9B,YAAA+X,iBAAA,SAAiBpD,GAAjB,WAECA,EAAK5G,UAAUtkB,SAAQ,SAACquB,GAEvBA,EAAIE,WAAa,CAChB,MAAS,CACR,CACC,MAAS,SACT,OAAwB,QAAdF,EAAIG,MAAkB,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,QAG7F,CACC,MAAS,aACT,OAAwB,eAAdH,EAAIG,OAAwC,sBAAdH,EAAIG,MAAgC,EAAKC,aAAaJ,GAAO,EAAKK,mBAAmBL,EAAIG,MAAO,sBAEzI,CACC,MAAS,kBACT,OAAwB,WAAdH,EAAIG,OAAoC,mBAAdH,EAAIG,OAA4C,kBAAdH,EAAIG,MAA4B,EAAKC,aAAaJ,GAAO,UAOpI,YAAAK,mBAAA,SAAmBC,EAAkBC,GACpC,IAAIxD,EAAQ,CAAC,aAAc,oBAAqB,SAAU,iBAAkB,iBAExEyD,EAASzD,EAAMjkB,QAAQwnB,GAG3B,OAFgBvD,EAAMjkB,QAAQynB,GAEdC,EACR,WAGA,IAIT,YAAAJ,aAAA,SAAaJ,GACZ,MAAmB,WAAfA,EAAI9U,QAAsC,YAAf8U,EAAI9U,OAC3B,UAEgB,aAAf8U,EAAI9U,QAAwC,YAAf8U,EAAI9U,OAClC,QAGD,IAIR,YAAAhR,MAAA,SAAMD,GACJ3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAxItClT,GAA8B,uI,iCAA9BA,EAA8B,mgECnB3C,4BACE,4BACA,6BAEA,4BAEE,8BAEA,4BACE,gCAsHF,iBACF,iBACF,kB,MA3HS,oDAGE,qD,wTDKX,GAKa,EAAAA,kC,kFEnBb,KACA,MAGA,OACA,MACA,MANA,IAOA,S,GAGA,O,mHCLQ,4BAAqE,YAAW,kB,6BAAX,+C,yBAOjE,4BAKI,4BACI,6BAEI,sBACA,2BACI,8BACE,6BACA,YACF,iBACA,8BACE,6BACA,aACF,iBACJ,iBAEJ,iBACJ,iBACA,8BACI,2BAEI,0BAAI,yBAAG,aACL,8BACA,aACA,8BACF,iBAAI,iBACJ,0BAAI,aAAwC,8BAA6D,iBAE7G,iBACJ,iBACJ,kB,6BAtBkB,0DAIA,8DASC,kEAEL,6DAGE,mF,yBA0BI,yBACI,4BACE,wBAAG,YAAY,iBACjB,iBACA,4BACE,wBAAG,YAAe,iBACpB,iBACA,4BACE,wBAAG,YAAc,iBACnB,iBACJ,kB,uBARS,2CAGA,8CAGA,8C,mDAMb,6BACI,6CAAqB,uGAAoC,iBAC7D,kB,kGApCZ,6BAEI,4BAEI,+BACI,4BACI,yBACC,4BACI,6BAA2C,gBAAM,6BACrD,iBACA,4BACK,8BACJ,iBACD,6BACG,8BACF,iBACF,iBACJ,iBAEA,6BACI,gC,wBAWJ,iBACJ,iBACA,8BACI,gCAGJ,iBACJ,iBACJ,kB,8BAnBoB,iJAcH,6D,yBAnCrB,6BACI,gCAwCJ,kB,6BAxCsC,2CDlClD,iBAqBE,WAAmBsS,EACT0a,EAAwB4I,EACxBpW,EAAsC/M,EAAiC+lB,GAF9D,KAAAlmB,UACT,KAAA0a,SAAwB,KAAA4I,QACxB,KAAApW,kBAAuE,KAAAgZ,YAjBjF,KAAArnB,QAAkB,KAElB,KAAAvM,UAAoB,GAEpB,KAAAkxB,KAAY,CACVC,MAAO,EACPzxB,WAAY,EACZD,SAAU,GACV0b,QAAS,IAUTxf,KAAKihB,QAAU/O,EAAY+O,UAC3BjhB,KAAKkhB,aAAelhB,KAAKihB,SAAW/O,EAAYgP,eAChDlhB,KAAKmhB,cAAgBnhB,KAAKihB,SAAWjhB,KAAKkhB,cAAgBhP,EAAYkP,gB,OAGxE,YAAAvQ,SAAA,WAEE7Q,KAAKqE,UAAYrE,KAAKq1B,MAAMQ,SAASt1B,OAAY,IAEjDP,KAAKg2B,aAAa,IAIpB,YAAA/kB,YAAA,aAGA,YAAA2oB,mBAAA,SAAmBC,GACjB,OAAOA,EAAK3N,QAAQ,KAAM,OAG5B,YAAA4N,wBAAA,SAAwB1S,GACtB,OAAO1mB,KAAKC,UAAUymB,IAGxB,YAAA4O,aAAA,SAAajyB,GAAb,WAEE/D,KAAK4Q,QAAU,KAEf5Q,KAAK+R,QAAQxN,iBAAiBvE,KAAKqE,UAAWrE,KAAKu1B,KAAKzxB,SAAUC,GAAYuO,MAAK,SAAA+B,GAEjF,EAAKqkB,IAAMrkB,EAEX,EAAKkhB,KAAO,EAAKmD,IAAI6F,gBAEpB7rB,OAAM,SAACC,GACR,EAAKC,MAAMD,OAKf,YAAAC,MAAA,SAAMD,GACF3S,KAAK4Q,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA5DzCjT,GAAoB,4N,iCAApBA,EAAoB,slDCnBjC,4BACI,4BACA,6BAEA,4BACI,8BAEI,4BACI,yBACI,4BACJ,iBACJ,iBACA,+BAmCA,8BA0CR,iBACJ,kB,MArFa,oDAOI,0CAmCA,sE,qgBDjCjB,GAKa,EAAAA,wB,kFEnBb,SACA,SAMA,GAJA,MAIA,QAQA,S,GAEA,OACA,O,4HCHkB,yBAEE,2BAAG,kFAAc,SAA+B,6BAA+C,iBACjG,kB,mDAEE,2BAAmB,0HAAgD,YAAiD,iB,0CAAjD,sF,yBACnE,2BACE,wBAAG,YAAiD,iBACtD,kB,uCADK,8E,6DAHP,4BACE,6BACA,+BAGF,kB,kBALuD,iDAClD,uCACG,uC,yBAyCN,gCAA4E,YAAkC,kB,uBAA3D,6BAAyB,4D,yBAc5E,gCAA4D,YAA6B,kB,uBAAjD,6BAAoB,4D,mDAc5D,6BAEE,6BAA+B,sHAC7B,6BACE,2BAA+E,+GAA2D,iBAC1I,4BAA8E,YAA0E,iBAC1J,iBACF,iBACF,iB,0BAHoF,6G,qBA6B1F,sB,mDAOI,6BACE,+BAAoH,0HAApH,iBACA,+BAAkC,YAAmB,iBACvD,iB,0BAFgE,0CAAsB,sBAClD,6C,mDAc1B,6BACE,+BAAiD,6IAAjD,iBAKA,YACA,2BAA+D,yIAAqC,iBACtG,iB,0CAPyB,gDAKvB,6D,yBAPJ,0BACE,+BASF,kB,uBAToD,+C,yBAJxD,6BACE,4BAAO,YAA8B,iBACrC,6BACE,+BAWF,iBACF,kB,uCAdS,mDAEA,wD,yBAJX,0BACE,+BAgBF,kB,4CAhBO,2E,yBANX,0BACE,yBACE,6BACF,iBACA,6BACE,+BAmBF,iBACF,kB,8BApBS,6D,mDAjBX,0BAEE,6BACE,yBACE,6BACF,iBACA,+BAIF,iBAEA,8BA2BA,gCAAgC,uGAAkC,kCAAmB,iBACvF,iB,gCAlC0B,oDAMnB,iEDlHrB,iBAyFC,WAAoBmV,EAAsC2pB,EAA+BzsB,GAArE,KAAA8C,eAAsC,KAAA2pB,aAA+B,KAAAzsB,UA7EzF,KAAAvL,KAA4B,CAC3BnG,MAAO,GACPC,YAAa,GACbm+B,QAAS,CAAEh7B,KAAM,eAAgB0X,SAAU,KAG5C,KAAAqL,UAAoB,KACpB,KAAA7iB,UAAoB,KAKpB,KAAA0a,QAAkB,KAKlB,KAAAqgB,YAAc,GAed,KAAAC,QAAkB,EAElB,KAAAC,aAAyB,GAEzB,KAAAC,mBAA0C,GAE1C,KAAArO,MAAsB,GAKtB,KAAAsO,WAAoB,CACnB,CACCrlB,KAAM,YACNxR,MAAO,YACP/E,GAAI,eACJ67B,OAAQ,uCACR/P,IAAK,4BACL0C,UAAU,IAWZ,KAAAsN,oBAAqB,EAIrB,KAAAC,oBAA8B,E,OAe9B,YAAApuB,SAAA,sBACC7Q,KAAK+R,QAAQ/M,2BAA2BsN,MAAK,SAAAke,GAC5C,EAAKA,MAAQA,EAEb,EAAK0O,4BAA4B1O,OAInC,YAAAvf,YAAA,WACCjR,KAAKua,IAAI7K,UAGV,YAAAoB,gBAAA,sBAEOquB,EAAQn/B,KAAK8+B,WAAW,GAE9B9+B,KAAKua,IAAM,IAAI,EAAAC,IAAI,CAClBC,UAAW,MACX5I,MAAO,CACN,QAAW,EACX,KAAQstB,EAAM1lB,KACd,SAAY,CACX,wBAAwB,GAEzB,QAAW,CACV,OAAU,CACT,KAAQ,SACR,IAAO0lB,EAAMnQ,IACb,SAAY,MAGd,OAAUmQ,EAAMJ,OAChB,OAAU9H,OAAOO,SAAS4H,SAAW,KAAOnI,OAAOO,SAAS6H,KAAOn/B,IAAM,kCACzE,OAAU,CACT,CACC,GAAMi/B,EAAMj8B,GACZ,KAAQ,SACR,OAAU,YAKbwX,KAAM,EACN4kB,oBAAoB,EACpB3kB,OAAQ,EAAE,UAAW,aAGtB3a,KAAKua,IAAIK,GAAG,QAAQ,WACnB,EAAKC,cAKP,YAAAqkB,4BAAA,SAA4B1O,GAA5B,WACCA,EAAMnmB,SAAQ,SAAA3E,GACb,IAAI65B,EAAW,CAAEz6B,IAAKY,EAAKZ,IAAK+N,aAAcnN,EAAKmN,aAAagN,eAAgB2f,cAAe,IAC/F,EAAKX,mBAAmB31B,KAAKq2B,GAC7B75B,EAAKquB,SAAS1pB,SAAQ,SAAAiqB,GACrB,IAAImL,EAAmB,CAAE36B,IAAKwvB,EAAQxvB,IAAK+N,aAAcyhB,EAAQ1uB,QAAS+4B,QAAQ,EAAOe,SAAS,GAClGH,EAASC,cAAct2B,KAAKu2B,UAK/B,YAAAje,iBAAA,WACCxhB,KAAK6rB,KAAK,OAGX,YAAAhR,QAAA,sBAEC7a,KAAKua,IAAIK,GAAG,cAAc,WACzB,EAAKI,YACL,EAAKyW,aAGNzxB,KAAKgb,YAGLhb,KAAKyxB,UAGLzxB,KAAKua,IAAIgB,WAAW,IAAI,EAAAC,kBAAkB,CAAE,gBAAkB,KAC9Dxb,KAAKua,IAAIgB,WAAW,IAAI,EAAAokB,mBAAmB,CAAEC,SAAS,IAAS,gBAE/D5/B,KAAKua,IAAIK,GAAG,WAAY,mBAAmB,SAACtJ,GAC3C,EAAKuuB,oBAAoBvuB,MAG1BtR,KAAKua,IAAIK,GAAG,WAAY,oBAAoB,SAACtJ,GAC5C,EAAKuuB,oBAAoBvuB,OAI3B,YAAA0J,UAAA,sBAEO8kB,EAAS,WAEf9/B,KAAKua,IAAIwC,UAAU+iB,EAAQ,CAC1Br8B,KAAM,UACN+C,KAAM,CACL,KAAQ,oBACR,SAAY,MAKdxG,KAAKua,IAAIyC,SAAS,CACjB,GAAM8iB,EAAS,UACf,KAAQ,SACR,OAAUA,EACV,MAAS,CACR,gBAAiB,GACjB,eAAgB,UAChB,sBAAuB,EACvB,sBAAuB,WAExBr5B,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,MAK7DzG,KAAKua,IAAIyC,SAAS,CACjB,GAAM8iB,EAAS,WACf,KAAQ,OACR,OAAUA,EACV,OAAU,GACV,MAAS,CACR,aAAc,UACd,eAAgB,GAChB,qBAAsB,SAEvBr5B,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,MAMlEzG,KAAKua,IAAIyC,SAAS,CACjB,GAAM8iB,EAAS,SACf,OAAUA,EACV,KAAQ,SACR,MAAS,CACR,aAAc,QACd,kBAAmB,OACnB,kBAAmB,GAEpB,OAAU,CACT,aAAc,CAAC,MAAO,iBAAkB,CAAC,MAAO,iBAChD,YAAa,CAAC,mBACd,cAAe,CAAC,EAAG,IACnB,cAAe,MACf,YAAa,MAIf9/B,KAAK6+B,mBAAmBx0B,SAAQ,SAAA01B,GAC/BA,EAAYP,cAAcn1B,SAAQ,SAAA21B,GAC7BA,EAAON,SACV,EAAKO,eAAeD,EAAOl7B,YAO/B,YAAA2sB,QAAA,sBACC/f,QAAQC,IAAI3R,KAAK2D,WAEG,MAAhB3D,KAAKuoB,QACRvoB,KAAKw+B,WAAW3a,MAAM7jB,KAAKwmB,UAAWxmB,KAAK2D,UAAW3D,KAAKqe,SAAS/L,MAAK,SAAA9L,GAClE,EAAK+T,IAAIqC,UAAU,YAAaK,QAAQzW,EAAKi4B,SAEnD,EAAKxhB,QAAQzW,MAGdxG,KAAKw+B,WAAW1a,OAAO9jB,KAAKuoB,QAAQxF,WAAW5gB,KAAMnC,KAAKuoB,QAAQxF,WAAWtf,KAAMzD,KAAKwmB,UAAWxmB,KAAK2D,UAAW3D,KAAKqe,SAAS/L,MAAK,SAAA9L,GAC/H,EAAK+T,IAAIqC,UAAU,YAAaK,QAAQzW,EAAKi4B,SAGnD,EAAKxhB,QAAQzW,MAGfxG,KAAK2D,UAAY,KACjB3D,KAAKwmB,UAAY,MAGlB,YAAA0Z,mBAAA,SAAmBf,GAGlBn/B,KAAK8+B,WAAWz0B,SAAQ,SAAA81B,GACvBA,EAAUzO,UAAW,KAGtByN,EAAMzN,UAAW,EAEjB1xB,KAAKua,IAAI6lB,SAAS,CACjB,QAAW,EACX,KAAQjB,EAAM1lB,KACd,SAAY,CACX,wBAAwB,GAEzB,QAAW,CACV,OAAU,CACT,KAAQ,SACR,IAAO0lB,EAAMnQ,IACb,SAAY,MAGd,OAAUmQ,EAAMJ,OAChB,OAAU9H,OAAOO,SAAS4H,SAAW,KAAOnI,OAAOO,SAAS6H,KAAOn/B,IAAM,kCACzE,OAAU,CACT,CACC,GAAMi/B,EAAMj8B,GACZ,KAAQ,SACR,OAAU,cAgDd,YAAAm9B,qBAAA,WACCrgC,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAK,EAAAxX,2BAA4B,CACpEyX,UAAU,EACVC,UAAU,EACVC,qBAAqB,EACrB,MAAS,wBAEVvX,KAAKiS,WAAWuF,QAAQqnB,mBAAqB7+B,KAAK6+B,mBAErB7+B,KAAKiS,WAAWuF,QAASpD,SAASkC,WAAU,SAAAgqB,QAW1E,YAAAC,oBAAA,SAAoBr9B,KAQpB,YAAAs9B,yBAAA,aAQA,YAAAC,kBAAA,SAAkBnvB,EAAkBovB,GACf,MAAhB1gC,KAAKuoB,SACRvoB,KAAKugC,oBAAoBG,EAAK3d,WAAW5gB,OAI3C,YAAAw+B,qBAAA,WACC3gC,KAAKwgC,4BAqBN,YAAAI,cAAA,SAAchc,EAAiBtT,GAA/B,WACc,MAATA,GACHA,EAAMsV,kBAGP5mB,KAAKi/B,oBAAqB,EAG1Bj/B,KAAK6gC,MAAQ9mB,YAAW,WACvB,IAAK,EAAKklB,oBACY,MAAjBra,EAAK3O,SAAkB,CAC1B,IAAMqH,EAAS,UAAKsH,GAEpB,EAAKrK,IAAIiD,UAAUF,MAPR,MAaf,YAAAwG,OAAA,SAAOc,EAAiBtT,GAEV,MAATA,GACHA,EAAMsV,kBAGP5mB,KAAKi/B,oBAAqB,EAC1B6B,aAAa9gC,KAAK6gC,OAElB7gC,KAAK+gC,UAAUnc,IAGhB,YAAAib,oBAAA,SAAoBvuB,GACnB,GAAsB,MAAlBA,EAAM6J,UAAoB7J,EAAM6J,SAASxU,OAAS,EAAG,CACxD,IAAM,EAAU2K,EAAM6J,SAAS,GAEzBsK,EAAQzlB,KAAKwG,KAAKi4B,QAAQtjB,SAASuK,WAAU,SAAAd,GAAU,OAAOA,EAAK7B,WAAW5gB,OAAS,EAAQ4gB,WAAW5gB,SAEjG,IAAXsjB,GACHzlB,KAAK+gC,UAAU/gC,KAAKwG,KAAKi4B,QAAQtjB,SAASsK,MAO7C,YAAAsb,UAAA,SAAUnc,GAAV,WACC5kB,KAAKw+B,WAAW1a,OAAOc,EAAK7B,WAAW5gB,KAAMyiB,EAAK7B,WAAWtf,KAAM,KAAMzD,KAAK2D,UAAW3D,KAAKqe,SAAS/L,MAAK,SAAA9L,GAC3G,EAAK+hB,QAAU3D,EAEf,EAAKoc,cAAcpc,GAEb,EAAKrK,IAAIqC,UAAU,YAAaK,QAAQzW,EAAKi4B,SAEnD,EAAKxhB,QAAQzW,MAGdxG,KAAK2D,UAAY,KACjB3D,KAAKwmB,UAAY,MAGlB,YAAAwa,cAAA,SAAcpc,GAEkB,GAA3B5kB,KAAK0+B,YAAY/3B,QAAe3G,KAAK0+B,YAAY1+B,KAAK0+B,YAAY/3B,OAAS,GAAGoc,WAAW5gB,OAASyiB,EAAK7B,WAAW5gB,MACrHnC,KAAK0+B,YAAYx1B,KAAK0b,IAIxB,YAAAiH,KAAA,SAAKjH,GAAL,WAEa,MAARA,EACH5kB,KAAKw+B,WAAW1a,OAAOc,EAAK7B,WAAW5gB,KAAMyiB,EAAK7B,WAAWtf,KAAM,KAAMzD,KAAK2D,UAAW3D,KAAKqe,SAAS/L,MAAK,SAAA9L,GAC3G,IAAIgL,EAAU,EAAKktB,YAAYhZ,WAAU,SAAAzb,GAAK,OAAAA,EAAE8Y,WAAW5gB,OAASyiB,EAAK7B,WAAW5gB,QAEpF,EAAKomB,QAAU3D,EACf,EAAK8Z,YAAYze,OAAOzO,EAAU,GAE5B,EAAK+I,IAAIqC,UAAU,YAAaK,QAAQzW,EAAKi4B,SAEnD,EAAKxhB,QAAQzW,MAGNxG,KAAK0+B,YAAY/3B,OAAS,GAClC3G,KAAKw+B,WAAW3a,MAAM,KAAM,KAAM7jB,KAAKqe,SAAS/L,MAAK,SAAA9L,GAC9C,EAAK+T,IAAIqC,UAAU,YAAaK,QAAQzW,EAAKi4B,SAEnD,EAAKxhB,QAAQzW,GAEb,EAAK+hB,QAAU,KACf,EAAKmW,YAAc,MAIrB1+B,KAAK2D,UAAY,KACjB3D,KAAKwmB,UAAY,MAGlB,YAAAya,OAAA,SAAOrc,GACN5kB,KAAKuoB,QAAU3D,GAGhB,YAAAsc,SAAA,SAAShd,GAAT,WACClkB,KAAKwG,KAAKi4B,QAAQtjB,SAAW,GAE7B+I,EAAM7Z,SAAQ,SAAAua,GACb,EAAKpe,KAAKi4B,QAAQtjB,SAASjS,KAAK0b,OAIlC,YAAA3H,QAAA,SAAQzW,GACPxG,KAAKwG,KAAOA,EAEZxG,KAAK2D,UAAY6C,EAAK7C,UACtB3D,KAAKwmB,UAAYhgB,EAAKggB,WAIvB,YAAA2a,6BAAA,SAA6BC,GAC5B,IAAIC,GAAa,EAWjB,OAVArhC,KAAK6+B,mBAAmBx0B,SAAQ,SAAA01B,GAC3BA,EAAYj7B,MAAQs8B,GACvBrB,EAAYP,cAAcn1B,SAAQ,SAAA21B,GAC7BA,EAAON,UACV2B,GAAa,SAMVA,GAGR,YAAAC,wBAAA,WACC,IAAID,GAAa,EASjB,OARArhC,KAAK6+B,mBAAmBx0B,SAAQ,SAAA01B,GAC/BA,EAAYP,cAAcn1B,SAAQ,SAAA21B,GAC7BA,EAAON,UACV2B,GAAa,SAKTA,GAGR,YAAAE,mBAAA,SAAmBvB,GACdA,EAAOrB,SACV3+B,KAAKua,IAAIoC,YAAYqjB,EAAOl7B,IAAM,WAClC9E,KAAKua,IAAIoC,YAAYqjB,EAAOl7B,IAAM,YAClC9E,KAAKua,IAAIoC,YAAYqjB,EAAOl7B,IAAM,UAClC9E,KAAKua,IAAIiC,aAAawjB,EAAOl7B,KAE7Bk7B,EAAOrB,QAAS,GAGjBqB,EAAON,SAAU,GAGlB,YAAA8B,mBAAA,SAAmB1B,GAAnB,WAEC9/B,KAAK6+B,mBAAmBx0B,SAAQ,SAAA01B,GAC/BA,EAAYP,cAAcn1B,SAAQ,SAAA21B,GAC7BA,EAAOl7B,MAAQg7B,IAOdE,EAAOrB,QACV,EAAKpkB,IAAIoC,YAAYmjB,EAAS,WAC9B,EAAKvlB,IAAIoC,YAAYmjB,EAAS,YAC9B,EAAKvlB,IAAIoC,YAAYmjB,EAAS,UAC9B,EAAKvlB,IAAIiC,aAAasjB,GAEtBE,EAAOrB,QAAS,IAGhB,EAAKsB,eAAeH,GAEpBE,EAAOrB,QAAS,WAOrB,YAAAsB,eAAA,SAAeH,GACd,IAIIV,EAAWnI,OAAOO,SAAS4H,SAC3BC,EAAOpI,OAAOO,SAAS6H,KAE3Br/B,KAAKua,IAAIwC,UAAU+iB,EAAQ,CAC1Br8B,KAAM,SACNg+B,MAAO,CAACrC,EAAW,KAAOC,EAAOn/B,IAAM,8CAAgDw3B,mBAAmBh3B,KAAKC,UAAU,CAAEmE,IAAKg7B,QAIjI9/B,KAAKua,IAAIyC,SAAS,CACjB,GAAM8iB,EAAS,UACf,KAAQ,SACR,OAAUA,EACV,eAAgB,UAChB,MAAS,CACR,gBAAiB,GACjB,eAAgB,UAChB,sBAAuB,EACvB,sBAAuB,WAExBr5B,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,QAAS,cAAc,GAAM,KAzB3C,mBA8BlBzG,KAAKua,IAAIyC,SAAS,CACjB,GAAM8iB,EAAS,WACf,KAAQ,OACR,OAAUA,EACV,eAAgB,UAChB,OAAU,GACV,MAAS,CACR,aAAc,UACd,eAAgB,GAChB,qBAAsB,SAEvBr5B,OAAQ,CAAC,MACR,CAAC,QAAS,CAAC,iBAAkB,CAAC,UAAW,iBAAiB,GAAM,KA1ChD,mBAgDlBzG,KAAKua,IAAIyC,SAAS,CACjB,GAAM8iB,EAAS,SACf,OAAUA,EACV,eAAgB,UAChB,KAAQ,SACR,MAAS,CACR,aAAc,QACd,kBAAmB,OACnB,kBAAmB,GAEpB,OAAU,CACT,aAAc,CAAC,OACd,CAAC,MAAO,gBAAkB4B,UAAUC,SAAS7hB,eAC7C,CAAC,WAAY,CAAC,SAAU,CAAC,MAAO,gBAAkB4hB,UAAUC,SAAS7hB,gBAAiB,CAAC,SAAU,CAAC,MAAO,kBACzG,CAAC,SAAU,CAAC,MAAO,kBAEpB,YAAa,CAAC,mBACd,cAAe,CAAC,EAAG,IACnB,cAAe,MACf,YAAa,KAnEG,oB,iCA1lBPngB,GAAwB,iH,iCAAxBA,EAAwB,ssEC5BrC,4BACE,4BACA,6BAGA,4BAEE,4BACE,4BACE,4BACE,4BAEE,4BACE,4BACE,4BACE,8BAIA,8BAMF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,6BACE,8BACF,iBACA,gCAAwC,gEAAqB,4BAAW,EAAA6hB,sBAAxE,iBACF,iBACF,iBACF,iBAgBA,6BACE,6BACE,6BACE,6BACE,8BACF,iBACA,iCAA4D,kEAAuB,4BAAW,EAAAiQ,aAC5F,yBACA,mCACF,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,6BACE,8BACF,iBACA,iCAA0D,kEAAuB,4BAAW,EAAAA,aAC1F,yBACA,mCACF,iBACF,iBACF,iBACF,iBAEF,iBACF,iBAEA,6BACE,6BACE,8BACM,8BAEE,gCAsBN,iBACF,iBACF,iBACF,iBACF,iBAEA,8BACE,6BAEE,kCACE,8BAA0B,mEAAmC,IAAnC,CAAwC,sDAAoC,KAEpG,8BACA,+BA0CF,iBACF,iBAEA,yBACF,iBACF,iBACF,iBACF,iBACF,kB,MAhKsB,qDAIA,qDAgBoC,iDAyBoB,mDAElD,0DAYgD,mDAEhD,oDAcH,+DAkCW,0DACjB,2D,opCDtGnB,GAKa,EAAA9xB,4B,kFE5Bb,KACA,MADA,IAEA,Q,+DCcoC,0BACI,+BAAkD,mFAAlD,iBAA0H,YAI9H,kB,uBAJ2B,iDAAmG,6D,yBAJtI,6BACI,yBAAI,YAA8B,iBAClC,4BACI,8BAMJ,iBACJ,kB,uCATQ,mDAEK,wD,yBAJjB,0BACI,+BAWJ,kB,2CAXS,oEDNjC,iBAeI,WAAoBsS,GAAA,KAAAA,a,OAEpB,YAAApB,SAAA,WACI7Q,KAAKoU,SAAW,IAAI,EAAAjH,SAGxB,YAAAy0B,sBAAA,SAAsBR,GACxB,IAAIS,GAAa,EAOjB,OANA7hC,KAAK6+B,mBAAmBx0B,SAAQ,SAAA01B,GAC5BA,EAAYj7B,MAAQs8B,GAASrB,EAAYP,cAAc74B,OAAS,IAClEk7B,GAAa,MAIRA,GAGL,YAAA7Q,QAAA,WACIhxB,KAAKoU,SAAS1G,KAAM1N,KAAK6+B,oBACzB7+B,KAAKiS,WAAWqC,Q,iCA7BX1U,GAA0B,oC,iCAA1BA,EAA0B,mqBCZvC,4BACI,4BACI,yBACI,4BACJ,iBACJ,iBAEA,6BACI,+BACI,4BACI,4BACI,4BACI,8BAaJ,iBACJ,iBACJ,iBAEA,6BACI,6BACI,6BACI,gCAAsB,wCAAS,EAAAqS,WAAA,UAE3B,4BACI,8BACJ,iBACJ,iBACA,iCAAsB,wCAAS,EAAA+e,aAC3B,4BACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,iBACJ,kB,MApC6B,8D,0gCDL7B,GAKa,EAAApxB,8B,kFEZb,KAEA,MACA,MAOA,OACA,OAXA,IAaA,SAGA,S,4ICOQ,yD,6BAGE,oCAAqB,gCAArB,CAAqB,gCAArB,CAAqB,8BAArB,CAAqB,oBAArB,CAAqB,yB,mDA2BrB,gCAAyB,4FACvB,6BACF,kB,mDACA,gCAA0B,8FACxB,6BACF,kB,mDACA,gCAA0B,0FACxB,6BACF,kBDtCV,iBAoCI,WAAqB6sB,EAAwBxX,EAAoDJ,EAAsCE,GAAlH,KAAA0X,SAAwB,KAAAxX,uBAAoD,KAAAJ,eAAsC,KAAAE,kBAzBvI,KAAAK,aAAkC,KAElC,KAAAE,cAAmC,KAEnC,KAAA9L,cAA+B,KAE/B,KAAAiM,UAAoB,EAWpB,KAAA4I,QAAkB,KAKlB,KAAAzY,QAAgB,KAKZ5F,KAAK4F,QAAU,IAAI2E,KAEnB,IAAM4T,EAAMne,KAAK4F,QAAQwY,aACzBpe,KAAKqe,QAAUre,KAAK4F,QAAQ0Y,iBAAmB,KAAQte,KAAK4F,QAAQ2Y,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,E,OAG9H,YAAAtN,SAAA,WAEI7Q,KAAKsV,cAAgBtV,KAAKuO,OAAOuzB,cACjC9hC,KAAKwJ,cAAgBxJ,KAAKuO,OAAO/E,cAE5BxJ,KAAKqG,UACNrG,KAAKoV,aAAepV,KAAKsV,eAG7BtV,KAAKopB,SAAUppB,KAAKuO,SAGxB,YAAAlI,MAAA,WACI,MAAoC,iEAA3BrG,KAAKuO,OAAOmkB,YAGzB,YAAAlR,iBAAA,WACIxhB,KAAK4F,QAAU,IAAI2E,KAAMA,KAAKC,MAAOxK,KAAKqe,WAG9C,YAAA/P,YAAA,sBACQC,EAAS7N,KAAK8J,MAAO9J,KAAKC,UAAWX,KAAKuO,SAC9CA,EAAOuzB,cAAgB9hC,KAAKmgB,gBAAgBld,eAEhB,MAAvBjD,KAAK2W,iBACNpI,EAAOuzB,cAAc7rB,SAAWjW,KAAK2W,eAAeyE,WAAWnF,UAGnEjW,KAAKiV,qBAAqB3G,YAAaC,GAAS+D,MAAM,SAAA+B,GAClD,EAAK0e,aACLrgB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAyW,SAAA,SAAU7a,GAAV,WAoBmC,iEAA3BvO,KAAKuO,OAAOmkB,YAGZ1yB,KAAK+U,gBAAgB5P,qBAAsBnF,KAAKsV,cAAcjM,WAAWlH,KAAMnC,KAAKwJ,cAAcrH,MAAOmQ,MAAM,SAAAlM,GAC3G,EAAKgP,aAAehP,KAEpBsM,OAAM,SAAEC,GACRjB,QAAQC,IAAK,QAASgB,GACtB,EAAKC,MAAOD,OAOxB,YAAAovB,cADA,WAEI,QAAM/hC,KAAKyV,UAWf,YAAAusB,gBAAA,SAAiBC,GACRA,IAAmBjiC,KAAKyV,UACzBzV,KAAKkiC,oBAIb,YAAAC,UAAA,WACIniC,KAAKyO,cAGF,YAAAskB,QAAP,WACI/yB,KAAK2O,gBAGT,YAAAF,WAAA,sBACIzO,KAAKiV,qBAAqBxG,WAAYzO,KAAKuO,OAAOzJ,KAAMwN,MAAM,SAAA+B,GAC1D,EAAKoB,UAAW,EACY,MAAvB,EAAKkB,gBACN,EAAKA,eAAe+E,eAAe,MAEvChJ,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAhE,aAAA,sBACI3O,KAAKiV,qBAAqBtG,aAAc3O,KAAKuO,OAAOzJ,KAAMwN,MAAM,SAAA+B,GAC5D,EAAKoB,UAAW,EACY,MAAvB,EAAKkB,gBACN,EAAKA,eAAe+E,eAAe,MAEvChJ,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAuvB,iBAAA,WACIE,EAAEC,KAAM,CACJrT,IAAK9uB,IAAM,8BACXoiC,OAAQ,OACR97B,KAAM,CAAEkI,SAAU1O,KAAKuO,OAAOzJ,KAC9By9B,QAAS,SAAU5iB,KAGnB6iB,OAAO,KAyCR,YAAA5vB,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA/MlE7W,GAAoC,yJ,iCAApCA,EAAoC,yE,OAAA,M,kQAApC,qBAAe,sB,4jCC9B5B,4BAEI,4BACI,2BAAiC,YAAsB,iBAC5D,iBAEC,4BACE,0BACE,8BAA4B,+BAAgB,iBAC5C,8BAA4B,YAA6B,iBAC3D,iBAEA,2BACE,6BACA,+BAAmB,gEAAqB,4BAAW,EAAA0lB,sBAAnD,iBACF,iBAQE,6DAeA,2BACI,+BACI,6BAA0E,mBAC9E,iBACA,mCAA0G,gFAAsC,iBACpJ,iBAEA,2BACI,+BACI,8BAAyE,mBAC7E,iBACA,mCAA0G,+EAAqC,iBACnJ,iBAEA,8BACE,mCAGA,mCAGA,mCAGF,iBACJ,iBACJ,kB,MA7DyC,yDAML,gEAKT,iDAWjB,mDAiBY,mDAAqB,qCAOrB,mDAAqB,oCAIzB,+CAGA,gDAGA,kD,8jBDpClB,GAOa,EAAA1lB,wC,kFE9Bb,KAGA,MACA,MAJA,IAOA,SAMA,GAJA,OACA,OAGA,Q,0GCoCU,gCAAyB,4FACvB,6BACF,kB,mDACA,gCAA0B,8FACxB,6BACF,kB,mDACA,gCAA0B,0FACxB,6BACF,kB,0FDtCV,aAiBI,WAAqB2wB,EAAwBxX,EAAoDJ,GAA5E,KAAA4X,SAAwB,KAAAxX,uBAAoD,KAAAJ,eALjG,KAAAY,UAAoB,E,OASpB,YAAA5E,SAAA,WACI7Q,KAAKyiC,SAAW9W,OAAOC,OAAQ,GAAI5rB,KAAKuO,SAG5C,YAAAD,YAAA,sBACItO,KAAKiV,qBAAqB3G,YAAatO,KAAKuO,QAAS+D,MAAM,SAAA+B,GACvD,EAAKouB,SAAW9W,OAAOC,OAAQ,GAAI,EAAKrd,QAExC,EAAKI,kBACL+D,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAMpB,YAAAovB,cADA,WAEI,QAAM/hC,KAAKyV,UAWf,YAAAusB,gBAAA,SAAiBC,GACRA,IAAmBjiC,KAAKyV,UACzBzV,KAAKkiC,oBAIb,YAAAC,UAAA,WACIniC,KAAKyO,cAGF,YAAAskB,QAAP,WACI/yB,KAAK2O,gBAGT,YAAAF,WAAA,sBACIzO,KAAKiV,qBAAqBxG,WAAYzO,KAAKuO,OAAOzJ,KAAMwN,MAAM,SAAA+B,GAC1D,EAAKoB,UAAW,KAChB/C,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAhE,aAAA,sBACI3O,KAAKiV,qBAAqBtG,aAAc3O,KAAKuO,OAAOzJ,KAAMwN,MAAM,SAAA+B,GAC5D,EAAKoB,UAAW,EAEhB,EAAKlH,OAAS,EAAKk0B,YACnB/vB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAuvB,iBAAA,WACIE,EAAEC,KAAM,CACJrT,IAAK9uB,IAAM,8BACXoiC,OAAQ,OACR97B,KAAM,CAAEkI,SAAU1O,KAAKuO,OAAOzJ,KAC9By9B,QAAS,SAAU5iB,KAGnB6iB,OAAO,KAIf,YAAApZ,SAAA,SAAU7a,GACNvO,KAAKuO,OAASA,GAGX,YAAAqE,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCA9FlE5W,GAA6B,kH,iCAA7BA,EAA6B,gF,+CAA7B,qBAAe,sB,gkCCzB5B,4BACI,2BAAiC,YAAsB,iBACvD,4BAEI,8BAA4B,2BAAY,iBACxC,8BAAwC,uEAAxC,iBAEA,8BAA4B,gCAAiB,iBAC7C,8BAAwC,6EAAxC,iBAEA,+BAA4B,6BAAa,iBACzC,+BAAwC,wEAAxC,iBAEA,+BAA4B,kCAAkB,iBAC9C,+BAAwC,8EAAxC,iBAEA,+BAA4B,iCAAiB,iBAC7C,+BAAwC,iFAAxC,iBAEA,+BACI,6BAAkD,mBACtD,iBACA,gCAAkN,8EAC9M,gCACI,6BACJ,iBACA,gCACI,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBAEA,2BACI,+BACI,8BAA0E,mBAC9E,iBACA,mCAAoF,gFAA6D,iBACrJ,iBAEA,2BACI,+BACI,8BAAyE,mBAC7E,iBACA,mCAAoF,+EAA4D,iBACpJ,iBAEA,8BACE,mCAGA,mCAGA,mCAGF,iBAEJ,iBACJ,kB,MA5DqC,yDAIW,wDAA4B,uBAG5B,8DAAkC,uBAGlC,yDAA6B,uBAG7B,+DAAmC,uBAGnC,kEAAsC,uBAKlD,6KAAqL,kCAArL,CAAqL,uBAgBzH,kEAAqC,uBAOrC,gEAAoC,uBAIlH,+CAGA,gDAGA,kD,yMDpClB,GAMa,EAAAA,iC,kaEvBb,mBAAa,EAAA2mC,gBAUb,mBAAa,EAAAC,iBASb,+B,+CAEA,OAF2C,OAE3C,EAFA,CAA2CA,GAA9B,EAAAC,wBAIb,+B,+CAEA,OAF2C,OAE3C,EAFA,CAA2CD,GAA9B,EAAAE,wBAIb,+B,+CAQA,OARoC,OAQpC,EARA,CAAoCF,GAAvB,EAAAG,iBAUb,+B,+CAMA,OANuC,OAMvC,EANA,CAAuCH,GAA1B,EAAAI,oBAQb,mBAAa,EAAAC,mBAKb,mBAAa,EAAAC,YAKb,+B,+CAIA,OAJqC,OAIrC,EAJA,CAAqCN,GAAxB,EAAAO,mB,kFCzDb,KAEA,MACA,MAOA,OACA,OAXA,IAaA,SAGA,S,4HC8BU,gCAAyB,4FACvB,6BACF,kB,mDACA,gCAA0B,8FACxB,6BACF,kB,mDACA,gCAA0B,0FACxB,6BACF,kB,0FD/BV,aA0BI,WAAqBzW,EAAwBxX,EAAoDJ,EAAsCE,GAAlH,KAAA0X,SAAwB,KAAAxX,uBAAoD,KAAAJ,eAAsC,KAAAE,kBAfvI,KAAAzU,YAAmC,GACnC,KAAAmV,UAAoB,EAOpB,KAAA4I,QAAkB,KAKlB,KAAAzY,QAAgB,KAGZ5F,KAAK4F,QAAU,IAAI2E,KAEnB,IAAM4T,EAAMne,KAAK4F,QAAQwY,aACzBpe,KAAKqe,QAAUre,KAAK4F,QAAQ0Y,iBAAmB,KAAQte,KAAK4F,QAAQ2Y,cAAgB,GAAM,KAAQJ,EAAM,GAAK,IAAM,IAAOA,E,OAG9H,YAAAtN,SAAA,WAEI7Q,KAAKM,YAAcN,KAAKuO,OAAOjH,KAE/BtH,KAAKopB,SAAUppB,KAAKuO,SAGxB,YAAAD,YAAA,sBACQC,EAAS7N,KAAK8J,MAAO9J,KAAKC,UAAWX,KAAKuO,SAE9CvO,KAAKiV,qBAAqB3G,YAAaC,GAAS+D,MAAM,SAAA+B,GAClD,EAAK0e,aACLrgB,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAA6O,iBAAA,WACIxhB,KAAK4F,QAAU,IAAI2E,KAAMA,KAAKC,MAAOxK,KAAKqe,WAG9C,YAAA+K,SAAA,SAAU7a,KAMV,YAAAwzB,cADA,WAEI,QAAM/hC,KAAKyV,UAWf,YAAAusB,gBAAA,SAAiBC,GACRA,IAAmBjiC,KAAKyV,UACzBzV,KAAKkiC,oBAIb,YAAAC,UAAA,WACIniC,KAAKyO,cAGF,YAAAskB,QAAP,WACI/yB,KAAK2O,gBAGT,YAAAF,WAAA,sBACIzO,KAAKiV,qBAAqBxG,WAAYzO,KAAKuO,OAAOzJ,KAAMwN,MAAM,SAAA+B,GAC1D,EAAKoB,UAAW,KAChB/C,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAhE,aAAA,sBACI3O,KAAKiV,qBAAqBtG,aAAc3O,KAAKuO,OAAOzJ,KAAMwN,MAAM,SAAA+B,GAC5D,EAAKoB,UAAW,KAChB/C,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAKpB,YAAAuvB,iBAAA,WACIE,EAAEC,KAAM,CACJrT,IAAK9uB,IAAM,8BACXoiC,OAAQ,OACR97B,KAAM,CAAEkI,SAAU1O,KAAKuO,OAAOzJ,KAC9By9B,QAAS,SAAU5iB,KAGnB6iB,OAAO,KAyCR,YAAA5vB,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCAnJlE3W,GAAwB,yJ,iCAAxBA,EAAwB,kE,+CAAxB,qBAAe,sB,ipCC9B5B,4BACI,2BAAiC,YAAsB,iBAEvD,4BACI,0BACE,4BACA,8BAAmB,gEAAqB,4BAAW,EAAAwlB,sBAAnD,iBACF,iBAEA,4CAKA,0BACI,+BACI,6BAAkD,mBACtD,iBACA,gCAAwO,8EACpO,iCACI,8BACJ,iBACA,iCACI,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBAEA,2BACI,+BACI,8BAA0E,mBAC9E,iBACA,mCAA0G,gFAAsC,iBACpJ,iBAEA,2BACI,+BACI,8BAAyE,mBAC7E,iBACA,mCAA0G,+EAAqC,iBACnJ,iBAEA,8BACE,mCAGA,mCAGA,mCAGF,iBACJ,iBACJ,kB,MAxDqC,yDAKR,iDAInB,yDAAgC,qBAQtB,mDAAqB,gJAArB,CAAqB,mCAiBnB,oDAAqB,qCAOrB,mDAAqB,oCAIzB,+CAGA,gDAGA,kD,gOD7BlB,GAOa,EAAAxlB,4B,kFE9Bb,KACA,MADA,IAKA,SACA,S,GAEA,OACA,M,wFCiBgC,gCAAuD,YAAc,kB,uBAAlC,6BAAoB,6C,yBAWvD,gCAAuE,YAAmB,kB,uBAA5C,6BAAyB,6C,mDAPnF,4BACI,+BACI,6BACJ,iBACA,4BACI,gCAA6C,sGACzC,wBACA,iCACJ,iBACJ,iBACJ,iB,iCALqD,mDAEjC,sD,mDApBxB,kCACI,4BACI,8BACI,4BACJ,iBACA,4BACI,+BAAkD,gGAAkB,8FAEhE,wBACA,iCACJ,iBACJ,iBACJ,iBACA,8BAWA,6BACI,+BACI,8BACJ,iBACA,6BACI,iCAAsD,kGAClD,yBACA,iCACI,8BACJ,iBACA,iCACI,8BACJ,iBACJ,iBACJ,iBACJ,iBACA,6BACI,8BACI,iCAAwE,2FACpE,8BACJ,iBACJ,iBACJ,iBACJ,iB,mDAzC8D,8CAGtC,+CAIQ,2DAgBkC,gDAaR,mDD9C1E,iBAwCI,WAAqB+V,EAA4B8C,EAAsC3C,GAAlE,KAAAH,UAA4B,KAAA8C,eAAsC,KAAA3C,cAxBvF,KAAA/P,KAAe,KAKf,KAAA7B,YAAiD,GAKjD,KAAAqD,UAAoB,KAKpB,KAAAkrB,OAAiB,K,OAWjB,YAAAhe,SAAA,sBACI7Q,KAAK+R,QAAQtK,oBAAoB,GAAQ6K,MAAM,SAAAjS,GAK3C,IADA,IAAIkS,EAAa,GACRtI,EAAI,EAAGA,EAAI5J,EAAMsG,SAAUsD,EAE9B,EAAKiI,YAAYiT,iBAAiB9kB,EAAM4J,GAAGwI,UAE7CF,EAAWrJ,KAAK7I,EAAM4J,IAG1B,EAAK5J,MAAQkS,KAEbG,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIpB,YAAAwB,SAAA,SAAUhS,GAAV,WAEiB,MAARA,GAAgBA,EAAKwE,OAAS,EAC/B3G,KAAK+R,QAAQlK,sBAAuB1F,GAAM,GAAQmQ,MAAM,SAAAhS,GACpD,EAAKA,YAAcA,EACnB,EAAKqD,UAAY,QACjB+O,OAAM,SAAEC,GACR,EAAKC,MAAOD,OAIhB3S,KAAKM,YAAc,GACnBN,KAAK2D,UAAY,OAKzB,YAAA4zB,SAAA,WAEwB,aAAfv3B,KAAK6uB,OACNoI,OAAOO,SAASC,KAAOv3B,IAAM,oCAAsCF,KAAKmC,KAAO,kBAAoBnC,KAAK2D,UAEnF,SAAf3D,KAAK6uB,SACXoI,OAAOO,SAASC,KAAOv3B,IAAM,kCAAoCF,KAAKmC,KAAO,kBAAoBnC,KAAK2D,YAIvG,YAAAiP,MAAP,SAAcD,GACN3S,KAAKiS,WAAajS,KAAK6U,aAAauC,KAAM,EAAA4H,oBAAqB,CAAE1H,UAAU,IAC3EtX,KAAKiS,WAAWuF,QAAQ5G,QAAU,EAAA4D,aAAaC,oBAAoB9B,I,iCArFlErU,GAAmB,4G,iCAAnBA,EAAmB,82BCjB5B,6BAeY,iC,MAAqB,8C,8RDJrC,GAMa,EAAAA,uB,kFEnBb,S,OAIA,2B,OAKE,YAAA8Q,UAAA,SAAU0lB,EAAwBruB,GACjC,IAAKquB,IAAUruB,EACR,OAAOquB,EAGd,IAAIqO,EAAiC,GAKlC,OAJAnjC,KAAKojC,2BAA2B38B,EAAQ08B,GAIjCrO,EAAMruB,QAAO,SAAA8Z,GAAQ,OAA8C,IAA9C4iB,EAAsB3xB,QAAQ+O,EAAKpe,UAGnE,YAAAihC,2BAAA,SAA2B38B,EAAyB08B,GAApD,WACC18B,EAAO4D,SAAQ,SAAAmsB,GACd,EAAKrQ,sBAAsBqQ,EAAG2M,OAIhC,YAAAhd,sBAAA,SAAsBvB,EAAqBue,GAA3C,WACCA,EAAsBj6B,KAAK0b,EAAKpb,eAEhCob,EAAK5b,SAASqB,SAAQ,SAAAic,GACrB,EAAKH,sBAAsBG,EAAO6c,O,iCAxBzBrmC,I,kDAAAA,EAAiB,U,EAJ9B,GAIa,EAAAA,qB,kFCWb,SACA,Q,GAGA,M,sBAMA,aAII,WAAqB+C,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,e,OAG/C,YAAAujC,iBAAA,WACI,OAAOrjC,KAAKH,KACPI,IAAoBC,IAAM,yCAC1BC,aAGT,YAAAmjC,cAAA,SAAe3B,EAAkB4B,EAAiBC,GAC9C,IAAIjjC,EAAqB,IAAI,EAAAC,WAc7B,OAZiB,MAAZmhC,IACDphC,EAASA,EAAOE,IAAK,WAAYkhC,IAGrB,MAAX4B,IACDhjC,EAASA,EAAOE,IAAK,UAAW8iC,IAGpB,MAAXC,IACDjjC,EAASA,EAAOE,IAAK,UAAW+iC,IAG7BxjC,KAAKH,KACPI,IAAWC,IAAM,8BAA+B,CAAEK,OAAQA,IAC1DJ,a,iCA7BAjG,GAA0B,sD,oCAA1BA,EAA0B,QAA1BA,EAA0B,O,EADvC,GACa,EAAAA,8B,kFC9Bb,SACA,OACA,QAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,S,eAEMupC,EAAiB,CACnB,CACIC,KAAM,GACNC,UAAW,EAAA/nC,mBACXgoC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,cACNC,UAAW,EAAA/nC,mBACXgoC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,OACNC,UAAW,EAAA3lC,kBACX4lC,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,kBACNC,UAAW,EAAA1lC,2BACX2lC,YAAa,CAAC,EAAAG,mBAElB,CACIL,KAAM,eACNC,UAAW,EAAAplC,2BACXqlC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,iBACNC,UAAW,EAAA7kC,uBACX8kC,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,WACNC,UAAW,EAAA5kC,aACX6kC,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,8BACNC,UAAW,EAAAnlC,oBACXolC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,wBACNC,UAAW,EAAA/kC,wBACXglC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,iBACNC,UAAW,EAAAhmC,6BACXimC,YAAa,CAAC,EAAAG,mBAElB,CACIL,KAAM,QACNC,UAAW,EAAArkC,oBACXskC,YAAa,CAAC,EAAAE,kBAElB,CACIJ,KAAM,0BACNC,UAAW,EAAApkC,sCACXqkC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,8BACNC,UAAW,EAAAlkC,+BACXmkC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,mBACNC,UAAW,EAAAhkC,yBACXikC,YAAa,CAAC,EAAAC,YAElB,CACIH,KAAM,oBACNC,UAAW,EAAAjkC,qBACXkkC,YAAa,CAAC,EAAAE,mBAItB,2B,uCAOanoC,I,6DAAAA,IAAqB,UAJnB,CACP,CAAE4vB,QAAS,EAAAyY,iBAAkBC,SAAU,EAAAC,uBAC1C,SAJQ,CAAC,EAAArpC,aAAaspC,SAAUV,IACvB,EAAA5oC,gB,EAFd,GAOa,EAAAc,yB,gEAAAA,EAAqB,mCALpB,EAAAd","file":"1.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedInputComponent } from './component/form-fields/localized-input/localized-input.component';\nimport { LocalizedTextComponent } from './component/form-fields/localized-text/localized-text.component';\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { CreateHierarchyTypeModalComponent } from './component/hierarchy/modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './component/hierarchy/modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './component/hierarchy/modals/create-geoobjtype-modal.component';\nimport { ManageAttributesModalComponent } from './component/hierarchy/geoobjecttype-management/manage-attributes-modal.component';\nimport { DefineAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component';\nimport { EditAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component';\nimport { ShapefileModalComponent } from './component/importer/modals/shapefile-modal.component';\nimport { AttributesPageComponent } from './component/importer/modals/attributes-page.component';\nimport { LocationPageComponent } from './component/importer/modals/location-page.component';\nimport { LocationProblemPageComponent } from './component/importer/modals/location-problem-page.component';\nimport { LocationProblemComponent } from './component/importer/modals/location-problem.component';\nimport { TermProblemPageComponent } from './component/importer/modals/term-problem-page.component';\nimport { TermProblemComponent } from './component/importer/modals/term-problem.component';\nimport { SpreadsheetModalComponent } from './component/importer/modals/spreadsheet-modal.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { TermOptionWidgetComponent } from './component/hierarchy/geoobjecttype-management/term-option-widget.component';\nimport { AttributeInputComponent } from './component/hierarchy/geoobjecttype-management/attribute-input.component';\nimport { EditTermOptionInputComponent } from './component/hierarchy/geoobjecttype-management/edit-term-option-input.component';\nimport { ManageTermOptionsComponent } from './component/hierarchy/geoobjecttype-management/manage-term-options.component';\nimport { GeoObjectTypeInputComponent } from './component/hierarchy/geoobjecttype-management/geoobjecttype-input.component';\nimport { ManageGeoObjectTypeModalComponent } from './component/hierarchy/modals/manage-geoobjecttype-modal.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { PublishModalComponent } from './component/master-list/publish-modal.component';\nimport { ExportFormatModalComponent } from './component/master-list/export-format-modal.component';\nimport { RequestTableComponent } from './component/crtable/request-table.component';\nimport { CreateUpdateGeoObjectDetailComponent } from './component/crtable/action-detail/create-update-geo-object/detail.component';\nimport { AddRemoveChildDetailComponent } from './component/crtable/action-detail/add-remove-child/detail.component';\nimport { SetParentDetailComponent } from './component/crtable/action-detail/set-parent/set-parent-detail.component';\nimport { GeoObjectSharedAttributeEditorComponent } from './component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component';\nimport { ManageVersionsModalComponent } from './component/geoobject-shared-attribute-editor/manage-versions-modal.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { GeoObjectEditorComponent } from './component/geoobject-editor/geoobject-editor.component';\nimport { GeoObjectEditorMapComponent } from './component/geoobject-editor-map/geoobject-editor-map.component';\nimport { SimpleEditControl } from './component/geoobject-editor-map/simple-edit-control/simple-edit-control.component';\nimport { CascadingGeoSelector } from './component/cascading-geo-selector/cascading-geo-selector';\nimport { ManageParentVersionsModalComponent } from './component/cascading-geo-selector/manage-parent-versions-modal.component';\nimport { ActionDetailModalComponent } from './component/crtable/action-detail/action-detail-modal.component';\nimport { DataImporterComponent } from './component/importer/dataimporter.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { PublishedMasterListHistoryComponent } from './component/master-list/published-master-list-history.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { JobConflictModalComponent } from './component/scheduled-jobs/conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './component/scheduled-jobs/conflict-widgets/reupload-modal.component';\nimport { ParentReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component';\nimport { TermReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component';\nimport { RowValidationProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component';\nimport { StepIndicatorComponent } from './component/scheduled-jobs/step-indicator.component';\nimport { ImportProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/import-problem-widget.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigModalComponent } from './component/synchronization-config/synchronization-config-modal.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\n\nimport { LocationManagerComponent } from './component/location-manager/location-manager.component';\nimport { ContextLayerModalComponent } from './component/location-manager/context-layer-modal.component';\n\nimport { GeoObjectAttributeCodeValidator } from './factory/form-validation.factory';\n\nimport { GeoObjectTypePipe } from './pipe/geoobjecttype.pipe';\nimport { GeoObjectAttributeExcludesPipe } from './pipe/geoobject-attribute-excludes.pipe';\nimport { ToEpochDateTimePipe } from './pipe/to-epoch-date-time.pipe';\nimport { RegistryService } from './service/registry.service';\nimport { TaskService } from './service/task.service';\nimport { HierarchyService } from './service/hierarchy.service';\nimport { SynchronizationConfigService } from './service/synchronization-config.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\nimport { ChangeRequestService } from './service/change-request.service';\nimport { IOService } from './service/io.service';\nimport { MapService } from './service/map.service';\nimport { GeoObjectTypeManagementService } from './service/geoobjecttype-management.service'\n\nimport { RegistryRoutingModule } from './registry-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\t//        ModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tTabsModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule,\n\t\tSharedModule,\n\t\tRegistryRoutingModule\n\t],\n\tdeclarations: [\n\t\tHierarchyComponent,\n\t\tRequestTableComponent,\n\t\tCreateUpdateGeoObjectDetailComponent,\n\t\tAddRemoveChildDetailComponent,\n\t\tSetParentDetailComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tShapefileModalComponent,\n\t\tAttributesPageComponent,\n\t\tLocationPageComponent,\n\t\tLocationProblemPageComponent,\n\t\tLocationProblemComponent,\n\t\tTermProblemPageComponent,\n\t\tTermProblemComponent,\n\t\tSpreadsheetModalComponent,\n\t\tGeoObjectTypePipe,\n\t\tGeoObjectAttributeCodeValidator,\n\t\tEditAttributeModalContentComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tLocalizedInputComponent,\n\t\tLocalizedTextComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tGeoObjectAttributeExcludesPipe,\n\t\tToEpochDateTimePipe,\n\t\tGeoObjectEditorMapComponent,\n\t\tSimpleEditControl,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tCascadingGeoSelector,\n\t\tManageParentVersionsModalComponent,\n\t\tActionDetailModalComponent,\n\t\tHierarchyComponent,\n\t\tDataImporterComponent,\n\t\tDataExportComponent,\n\t\t// Master List screens\n\t\tMasterListManagerComponent,\n\t\tMasterListComponent,\n\t\tMasterListHistoryComponent,\n\t\tPublishedMasterListHistoryComponent,\n\t\tPublishModalComponent,\n\t\tMasterListViewComponent,\n\t\t// Scheduled jobs\n\t\tExportFormatModalComponent,\n\t\tScheduledJobsComponent,\n\t\tJobComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tParentReferenceProblemWidgetComponent,\n\t\tTermReferenceProblemWidgetComponent,\n\t\tRowValidationProblemWidgetComponent,\n\t\tStepIndicatorComponent,\n\t\tImportProblemWidgetComponent,\n\t\tTaskViewerComponent,\n\t\t// Synchronization Config\n\t\tSynchronizationConfigManagerComponent,\n\t\tSynchronizationConfigModalComponent,\n\t\tSynchronizationConfigComponent,\n\t\tSyncDetailsComponent,\n\t\t// Location manager\n\t\tLocationManagerComponent,\n\t\tContextLayerModalComponent\n\t],\n\tproviders: [\n\t\tMapService,\n\t\tHierarchyService,\n\t\tLocalizationManagerService,\n\t\tChangeRequestService,\n\t\tIOService,\n\t\tGeoObjectTypeManagementService,\n\t\tRegistryService,\n\t\tTaskService,\n\t\tDatePipe,\n\t\tToEpochDateTimePipe,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigService\n\t],\n\tentryComponents: [\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tEditAttributeModalContentComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tShapefileModalComponent,\n\t\tSpreadsheetModalComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tManageParentVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tPublishModalComponent,\n\t\tExportFormatModalComponent,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tActionDetailModalComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tStepIndicatorComponent,\n\t\tSynchronizationConfigModalComponent,\n\t\tContextLayerModalComponent\n\t]\n})\nexport class RegistryModule { }\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport {\n\tGeoObject, GeoObjectType, Attribute, Term, MasterList, MasterListVersion, ParentTreeNode,\r\n\tChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage, MasterListByOrg\n} from '../model/registry';\r\nimport { HierarchyType } from '../model/hierarchy';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\nimport { Organization } from '../../shared/model/core';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n\tinit(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }> {\r\n\t\treturn this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }>(acp + '/cgr/init')\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\t// param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n\tgetGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\r\n\t\tif (types != null) {\r\n\t\t\tparams = params.set('types', JSON.stringify(types));\r\n\t\t}\r\n\r\n\t\tif (hierarchies != null) {\r\n\t\t\tparams = params.set('hierarchies', JSON.stringify(hierarchies));\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObjectType[]>(acp + '/cgr/geoobjecttype/get-all', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetParentGeoObjects(childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('childId', childId)\r\n\t\tparams = params.set('childTypeCode', childTypeCode)\r\n\t\tparams = params.set('parentTypes', JSON.stringify(parentTypes))\r\n\t\tparams = params.set('recursive', JSON.stringify(recursive));\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ParentTreeNode>(acp + '/cgr/geoobject/get-parent-geoobjects', { params: params })\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tgetChildGeoObjects(parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('parentId', parentId)\r\n\t\tparams = params.set('parentTypeCode', parentTypeCode)\r\n\t\tparams = params.set('childrenTypes', JSON.stringify(childrenTypes))\r\n\t\tparams = params.set('recursive', JSON.stringify(recursive));\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ChildTreeNode>(acp + '/cgr/geoobject/getchildren', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tnewGeoObjectInstance(typeCode: string): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/cgr/geoobject/newGeoObjectInstance', JSON.stringify({ 'typeCode': typeCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObjectType>(acp + '/cgr/geoobjecttype/create', JSON.stringify({ 'gtJSON': gtJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObjectType>(acp + '/cgr/geoobjecttype/update', JSON.stringify({ \"gtJSON\": gtJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteGeoObjectType(code: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/cgr/geoobjecttype/delete', JSON.stringify({ code: code }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\taddAttributeType(geoObjTypeId: string, attribute: Attribute): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/addattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateAttributeType(geoObjTypeId: string, attribute: Attribute): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/updateattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<boolean>(acp + '/cgr/geoobjecttype/deleteattribute', JSON.stringify({ 'geoObjTypeId': geoObjTypeId, 'attributeName': attributeName }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\taddAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Term>(acp + '/cgr/geoobjecttype/addterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termJSON': term }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tupdateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Term>(acp + '/cgr/geoobjecttype/updateterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termJSON': termJSON }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<Attribute> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Attribute>(acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify({ 'parentTermCode': parentTermCode, 'termCode': termCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObject(id: string, typeCode: string): Promise<GeoObject> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('id', id)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObject>(acp + '/cgr/geoobject/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<number[]>(acp + '/cgr/geoobject/get-bounds', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\t\tparams = params.set('date', date);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<number[]>(acp + '/cgr/geoobject-time/get-bounds', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tparams = params.set('code', code)\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObject>(acp + '/cgr/geoobject/get-code', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetHierarchiesForGeoObject(code: string, typeCode: string): Promise<HierarchyOverTime[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<HierarchyOverTime[]>(acp + '/cgr/geoobject/get-hierarchies-over-time', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tgetGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string, date: string): Promise<GeoObject> {\r\n\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\ttext: text,\r\n\t\t\ttype: type,\r\n\t\t} as any;\r\n\r\n\t\tif (parent != null && hierarchy != null) {\r\n\t\t\tparams.parent = parent;\r\n\t\t\tparams.hierarchy = hierarchy;\r\n\t\t}\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams.date = date;\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObject>(acp + '/cgr/geoobject/suggestions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\ttext: text,\r\n\t\t\ttype: type,\r\n\t\t} as any;\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<GeoObject>(acp + '/cgr/geoobject/suggestions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/etl/get-active', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/etl/get-completed', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set(\"historyId\", historyId);\r\n\t\tparams = params.set(\"pageSize\", pageSize.toString());\r\n\t\tparams = params.set(\"pageNumber\", pageNumber.toString())\r\n\t\tparams = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ScheduledJob>(acp + '/etl/get-import-details', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set(\"historyId\", historyId);\r\n\t\tparams = params.set(\"pageSize\", pageSize.toString());\r\n\t\tparams = params.set(\"pageNumber\", pageNumber.toString())\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<ScheduledJob>(acp + '/etl/get-export-details', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tresolveScheduledJob(historyId: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/etl/import-resolve', JSON.stringify({ historyId: historyId }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tsubmitValidationResolve(config: any): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/etl/validation-resolve', JSON.stringify({ config: config }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tsubmitErrorResolve(config: any): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/etl/error-resolve', JSON.stringify({ config: config }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>(acp + '/master-list/list-all', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListHistory(oid: string, versionType: string): Promise<MasterList> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\t\tparams = params.set('versionType', versionType);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList>(acp + '/master-list/versions', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetAllMasterListVersions(): Promise<MasterList[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList[]>(acp + '/master-list/list-all-versions', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListVersion(oid: string): Promise<MasterListVersion> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterListVersion>(acp + '/master-list/version', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetLocales(): Promise<string[]> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<string[]>(acp + '/localization/get-locales', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\t// let params: HttpParams = new HttpParams();\r\n\t\t// params = params.set( 'geoObjectCode', geoObjectCode );\r\n\t\t// params = params.set( 'geoObjectTypeCode', geoObjectTypeCode );\r\n\t\t// params = params.set( 'attributeName', attributeName );\r\n\r\n\t\t// return this.http\r\n\t\t//     .get<ValueOverTime[]>( acp + '/cgr/geoobject/getAttributeVersions', { params: params } )\r\n\t\t//     .toPromise();\r\n\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', geoObjectCode);\r\n\t\tparams = params.set('typeCode', geoObjectTypeCode);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<GeoObjectOverTime>(acp + '/cgr/geoobject-time/get-code', { params: params })\r\n\t\t\t.toPromise();\r\n\r\n\t}\r\n\r\n\tnewGeoObjectOverTime(typeCode: string): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/cgr/geoobject-time/newGeoObjectInstance', JSON.stringify({ 'typeCode': typeCode }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n\r\n\r\n\t// getAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string ): any[] {\r\n\t//     let test =[\r\n\t//         {\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":{\"localeValues\":[\r\n\t//             {\"locale\":\"defaultLocale\",\"value\":\"Anlong Veaeng\"}]}}\r\n\t//     ]\r\n\r\n\t//     // let test = [{\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":\"test\"}];\r\n\r\n\t//     return test;\r\n\t// }\r\n\r\n\r\n\tsetAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\tgeoObjectCode: geoObjectCode,\r\n\t\t\tgeoObjectTypeCode: geoObjectTypeCode,\r\n\t\t\tattributeName: attributeName,\r\n\t\t\tcollection: collection\r\n\r\n\t\t} as any;\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<Response>(acp + '/cgr/geoobject/setAttributeVersions', JSON.stringify(params), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateMasterList(list: MasterList): Promise<MasterList> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterList>(acp + '/master-list/create', JSON.stringify({ list: list }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tcreateMasterListVersion(oid: string, forDate: string): Promise<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterListVersion>(acp + '/master-list/create-version', JSON.stringify({ oid: oid, forDate: forDate }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tpublishMasterListVersions(oid: string): Promise<{ job: string }> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<{ job: string }>(acp + '/master-list/publish-versions', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdeleteMasterList(oid: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/master-list/remove', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tdeleteMasterListVersion(oid: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/master-list/remove-version', JSON.stringify({ oid: oid }), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise()\r\n\t}\r\n\r\n\tpublishMasterList(oid: string): Observable<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\treturn this.http.post<MasterListVersion>(acp + '/master-list/publish', JSON.stringify({ oid: oid }), { headers: headers });\r\n\t}\r\n\r\n\tgetMasterList(oid: string): Promise<MasterList> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<MasterList>(acp + '/master-list/get', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n\tapplyGeoObjectEdit(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string): Promise<void> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = { parentTreeNode: parentTreeNode, geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n\t\tif (notes != null) {\r\n\t\t\tparams['notes'] = notes;\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<void>(acp + '/geoobject-editor/apply', JSON.stringify(params), { headers: headers })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tdata(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid,\r\n\t\t\tsort: sort\r\n\t\t} as any;\r\n\r\n\t\tif (pageNumber != null) {\r\n\t\t\tparams.pageNumber = pageNumber;\r\n\t\t}\r\n\r\n\t\tif (pageSize != null) {\r\n\t\t\tparams.pageSize = pageSize;\r\n\t\t}\r\n\r\n\t\tif (filter.length > 0) {\r\n\t\t\tparams.filter = filter;\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<any>(acp + '/master-list/data', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tvalues(oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[]): Promise<{ label: string, value: string }[]> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid,\r\n\t\t\tattributeName: attributeName,\r\n\t\t\tvalueAttribute: valueAttribute\r\n\t\t} as any;\r\n\r\n\t\tif (filter.length > 0) {\r\n\t\t\tparams.filter = filter;\r\n\t\t}\r\n\r\n\t\tif (value != null && value.length > 0) {\r\n\t\t\tparams.value = value;\r\n\t\t}\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<{ label: string, value: string }[]>(acp + '/master-list/values', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tpublishShapefile(oid: string): Promise<MasterListVersion> {\r\n\t\tlet headers = new HttpHeaders({\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t});\r\n\r\n\t\tlet params = {\r\n\t\t\toid: oid\r\n\t\t} as any;\r\n\r\n\t\treturn this.http\r\n\t\t\t.post<MasterListVersion>(acp + '/master-list/generate-shapefile', JSON.stringify(params), { headers: headers })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tprogress(oid: string): Promise<Progress> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Progress>(acp + '/master-list/progress', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetMasterListsByOrg(): Promise<{ locales: string[], orgs: MasterListByOrg[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + '/master-list/list-org', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tgetPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('oid', oid);\r\n\t\tparams = params.set('pageSize', pageSize.toString());\r\n\t\tparams = params.set('pageNumber', pageNumber.toString());\r\n\t\tparams = params.set('sortAttr', sortAttr);\r\n\t\tparams = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<PaginationPage>(acp + '/master-list/get-publish-jobs', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n\tgetOrganizations(): Promise<Organization[]> {\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<Organization[]>(acp + '/cgr/organizations/get-all')\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from '../model/io';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    importSpreadsheet( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport( configuration: ImportConfiguration ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/cancel-import', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    importShapefile( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    listGeoObjectTypes( includeLeafTypes: boolean ): Promise<{ label: string, code: string, orgCode: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'includeLeafTypes', includeLeafTypes.toString() );\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>( acp + '/cgr/geoobjecttype/list-types', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors( code: string, hierarchyCode: string ): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'hierarchyCode', hierarchyCode );\r\n\r\n        return this.http\r\n            .get<Location[]>( acp + '/cgr/geoobjecttype/get-ancestors', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType( code: string, includeTypes: boolean ): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'includeTypes', includeTypes.toString() );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>( acp + '/cgr/geoobjecttype/get-hierarchies', { params: params } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string ): Promise<any> {\r\n        \r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym( entityId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/geo-synonym/createGeoEntitySynonym', JSON.stringify( { entityId: entityId, label: label } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym( synonymId: string, vOid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geo-synonym/deleteGeoEntitySynonym', JSON.stringify( { synonymId: synonymId, vOid: vOid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    getTermSuggestions( mdAttributeId: string, text: string, limit: string ): Promise<{ text: string, data: any }[]> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'mdAttributeId', mdAttributeId );\r\n        params = params.set( 'text', text );\r\n        params = params.set( 'limit', limit );\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>( acp + '/uploader/getClassifierSuggestions', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTermSynonym( classifierId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { classifierId: classifierId, label: label } );\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/uploader/createClassifierSynonym', data, { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym( synonymId: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { synonymId: synonymId } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/uploader/deleteClassifierSynonym', data, { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTerm( label: string, code: string, parentTermCode: string ): Promise<Term> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm( parentTermCode: string, termCode: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { 'parentTermCode': parentTermCode, 'termCode': termCode } ), { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","import { LocalizedValue, Organization } from '../../shared/model/core';\nimport { LocalizationService } from '../../shared/service/localization.service';\nimport { ImportConfiguration } from './io';\n\nexport const PRESENT: string = '5000-12-31'\n\nexport class TreeEntity {\n\tid: string;\n\tname: string;\n\thasChildren: boolean;\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\n\tconstructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n\t\tthis.code = code;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t}\n\tchildren: Term[] = [];\n\n\taddChild(term: Term) {\n\t\tthis.children.push(term);\n\t}\n}\n\nexport class GeoObject {\n\ttype: string;\n\tgeometry: any;\n\tproperties: {\n\t\tuid: string,\n\t\tcode: string,\n\t\tdisplayLabel: LocalizedValue,\n\t\ttype: string,\n\t\tstatus: string[],\n\t\tsequence: string\n\t\tcreateDate: string,\n\t\tlastUpdateDate: string,\n\t};\n}\n\nexport class GeoObjectType {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tgeometryType: string;\n\tisLeaf: boolean;\n\tisGeometryEditable: boolean;\n\torganizationCode: string;\n\tattributes: Array<Attribute | AttributeTerm | AttributeDecimal> = [];\n}\n\nexport class Task {\n\tid: string;\n\ttemplateKey: string;\n\tmsg: string;\n\ttitle: string;\n\tstatus: string;\n\tcreateDate: number;\n\tcompletedDate: number;\n}\n\n// export class Attribute {\n\n//   name: string;\n//   type: string;\n//   label: string;\n//   description: string;\n//   isDefault: boolean;\n// }\n\n// export class AttributeTerm extends Attribute {\n//     descendants: Attribute[];\n//     rootTerm: string;\n// }\n\nexport class GeoObjectOverTime {\n\n\tgeoObjectType: GeoObjectType;\n\n\tattributes: any;\n\n\tpublic constructor(geoObjectType: GeoObjectType, attributes: any) {\n\t\tthis.geoObjectType = geoObjectType;\n\t\tthis.attributes = attributes;\n\t}\n\n\tpublic getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n\t\tlet retVot = { startDate: date, endDate: null, value: null };\n\n\t\tconst time = date.getTime();\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.code === attrCode) {\n\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\tretVot.value = lService.create();\n\t\t\t\t}\n\n\t\t\t\tif (attr.isChangeOverTime) {\n\t\t\t\t\tlet values = this.attributes[attr.code].values;\n\n\t\t\t\t\tvalues.forEach(vot => {\n\n\t\t\t\t\t\tconst startDate = Date.parse(vot.startDate);\n\t\t\t\t\t\tconst endDate = Date.parse(vot.endDate);\n\n\t\t\t\t\t\tif (time >= startDate && time <= endDate) {\n\n\t\t\t\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\t\t\t\tretVot.value = JSON.parse(JSON.stringify(vot.value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (attr.type === 'term' && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n\t\t\t\t\t\t\t\tretVot.value = vot.value[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tretVot.value = vot.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tretVot.value = this.attributes[attr.code];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn retVot;\n\t}\n}\n\nexport class ValueOverTime {\n\tstartDate: string;\n\tendDate: string;\n\tvalue: any;\n\tremovable?: boolean;\n}\n\nexport class Attribute {\n\tcode: string;\n\ttype: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tisDefault: boolean;\n\trequired: boolean;\n\tunique: boolean;\n\tisChangeOverTime?: boolean;\n\tprecision?: number;\n\tscale?: number;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n\t\tthis.code = code;\n\t\tthis.type = type;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t\tthis.isDefault = isDefault;\n\t\tthis.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n\t\tthis.unique = unique;\n\t\tthis.isChangeOverTime = isChangeOverTime;\n\t}\n\n}\n\nexport class AttributeTerm extends Attribute {\n\t//descendants: Attribute[];\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n\n\trootTerm: Term = new Term(null, null, null);\n\n\ttermOptions: Term[] = [];\n\n\tsetRootTerm(term: Term) {\n\t\tthis.rootTerm = term;\n\t}\n}\n\nexport class AttributeDecimal extends Attribute {\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\n\t\tthis.precision = 32;\n\t\tthis.scale = 8;\n\t}\n}\n\nexport enum GeoObjectTypeModalStates {\n\t\"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n\t\"editAttribute\" = \"EDIT-ATTRIBUTE\",\n\t\"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n\t\"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n\t\"editTermOption\" = \"EDIT-TERM-OPTION\",\n\t\"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport class TreeNode {\n\tgeoObject: GeoObject;\n\thierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n\tchildren: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n\tparents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n\tstate: string;\n\tattribute: any;\n\ttermOption: any;\n}\n\nexport class PaginationPage {\n\tpageNumber: number;\n\tcount: number;\n\tpageSize: number;\n\tresults: any[];\n}\n\nexport class AbstractScheduledJob {\n\tjobId: string;\n\thistoryId: string;\n\tstage: string;\n\tstatus: string;\n\tauthor: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tworkProgress: number;\n\tworkTotal: number;\n\tstartDate: string;\n\tendDate: string;\n}\n\nexport class ScheduledJob extends AbstractScheduledJob {\n\timportedRecords: number;\n\tconfiguration: ImportConfiguration;\n\timportErrors: PaginationPage;\n\texportErrors: PaginationPage;\n\tproblems: PaginationPage;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n\tstepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n\texception: ServerException;\n\tobject: ImportErrorObject;\n\tobjectType: string;\n\tid: string;\n\tresolution: string;\n\tselected?: boolean;\n}\n\nexport class ServerException {\n\tattributes: ServerExceptionAttribute[];\n\ttype: string;\n\tmessage: string;\n}\n\nexport class ServerExceptionAttribute {\n\tvalue: string;\n\tkey: string;\n}\n\nexport class ImportErrorObject {\n\tgeoObject: GeoObjectOverTime;\n\tparents: HierarchyOverTime[];\n\tisNew: boolean;\n}\n\nexport class StepConfig {\n\tsteps: Step[];\n}\n\nexport class Step {\n\tlabel: string;\n\tcomplete?: boolean;\n\tenabled?: boolean;\n\tstatus?: string;\n}\n\nexport class MasterList {\n\toid: string;\n\ttypeCode: string;\n\tdisplayLabel: LocalizedValue;\n\tcode: string;\n\trepresentativityDate: Date;\n\tpublishDate: Date;\n\tlistAbstract: string;\n\tprocess: string;\n\tprogress: string;\n\taccessConstraints: string;\n\tuseConstraints: string;\n\tacknowledgements: string;\n\tdisclaimer: string;\n\tcontactName: string;\n\torganization: string;\n\ttelephoneNumber: string;\n\temail: string;\n\thierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n\tleaf: boolean;\n\tfrequency: string;\n\tisMaster: boolean;\n\tvisibility: string;\n\tadmin: boolean;\n\tversions?: MasterListVersion[]\n}\n\nexport class MasterListVersion {\n\tdisplayLabel: string;\n\toid: string;\n\ttypeCode: string;\n\tleaf: boolean;\n\tmasterlist: string;\n\tforDate: string;\n\tcreateDate: string;\n\tpublishDate: string;\n\tattributes: any[];\n\tisGeometryEditable: boolean;\n\tlocales?: string[];\n\tshapefile?: boolean;\n}\n\nexport class HierarchyOverTime {\n\tcode: string;\n\tlabel: string;\n\ttypes: {\n\t\tcode: string;\n\t\tlabel: string;\n\t}[];\n\tentries: {\n\t\tstartDate: string;\n\t\tendDate: string;\n\t\tparents: { [k: string]: { text: string; geoObject: GeoObject } };\n\t}[];\n}\n\nexport enum ImportStrategy {\n\t\"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n\t\"NEW_ONLY\" = \"NEW_ONLY\",\n\t\"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport class MasterListByOrg {\n\toid: string;\n\tlabel: string;\n\tlists: { label: string, oid: string, createDate: string, lastUpdateDate: string, admin: boolean, isMaster: boolean }[];\n}\n\nexport class SynchronizationConfig {\n\toid?: string;\n\ttype?: string;\n\tsystemLabel?: string;\n\torganization: string;\n\tsystem: string;\n\thierarchy: string;\n\tlabel: LocalizedValue;\n\tconfiguration: any;\n}\n\nexport class OrgSyncInfo {\n\tlabel: string;\n\tcode: string;\n\thierarchies: { label: string, code: string }[];\n\tsystems: { label: string, oid: string, type: string }[];\n};\n\nexport class ExportScheduledJob extends AbstractScheduledJob {\n\tstepConfig?: StepConfig;\n}\n\nexport class ContextLayer {\n\toid: string;\n\tdisplayLabel: string;\n\tactive: boolean;\n\tenabled: boolean;\n}\n\nexport class ContextLayerGroup {\n\toid: string;\n\tdisplayLabel: string;\n\tcontextLayers: ContextLayer[];\n}\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {  ManageGeoObjectTypeModalState } from '../model/registry';\r\n\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    constructor(  ) { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n        \r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { HierarchyType } from '../model/hierarchy';\nimport { TreeEntity } from '../model/registry';\nimport { EventService } from '../../shared/service/event.service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    getHierarchyTypes( types: any ): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'types', JSON.stringify(types) );\n        \n        return this.http\n            .get<HierarchyType[]>( acp + '/cgr/hierarchytype/get-all', {params: params})\n            .toPromise();\n    }\n    \n    addChildToHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n\t   let headers = new HttpHeaders( {\n           'Content-Type': 'application/json'\n       } );\n\n       this.eventService.start();\n\n       return this.http\n           .post<HierarchyType>( acp + '/cgr/hierarchytype/add', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n           .toPromise();\n    }\n    \n    removeFromHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n \t   let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/remove', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n     }\n    \n    createHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/create', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    updateHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/update', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    deleteHierarchyType( code: string ): Promise<TreeEntity> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n        \n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>( acp + '/cgr/hierarchytype/delete', { 'code': code }, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { ChangeRequest, AbstractAction } from '../model/crtable';\nimport { EventService } from '../../shared/service/event.service';\nimport { GeoObject } from '../model/registry';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\t  getAllActions( requestId: string ): Promise<AbstractAction[]> {\n        let params: HttpParams = new HttpParams();\n\n        if ( requestId != null ) {\n            params = params.set( 'requestId', requestId );\n\t\t}\n\t\t\n        this.eventService.start();\n\n        return this.http\n            .get<AbstractAction[]>( acp + '/changerequest/getAllActions', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\n//    fetchData( cb: any, requestId: string ): Promise<HttpResponse> {\n//        let params: HttpParams = new HttpParams();\n//\n//        if ( requestId != null ) {\n//            params = params.set( 'requestId', requestId );\n//        }\n//\n//        this.eventService.start();\n//\n//        return this.http\n//            .get( acp + '/changerequest/getAllActions', { params: params } )\n//            .finally(() => {\n//                this.eventService.complete();\n//            } )\n//            .toPromise()\n//            .then( response => {\n//                cb( response.json() );\n//\n//                return response;\n//            } )\n//    }\n\n    applyAction( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyAction', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\tapplyActionStatusProperties( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyActionStatusProperties', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\t\n    lockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/lockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/unlockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    getAllRequests(filter: string): Promise<ChangeRequest[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tparams = params.set('filter', filter );\n\n        return this.http.get<ChangeRequest[]>( acp + '/changerequest/get-all-requests', { params: params } )\n            .toPromise();\n    }\n\n    getRequestDetails( requestId: string ): Promise<ChangeRequest> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'requestId', requestId );\n\n        this.eventService.start();\n\n        return this.http.get<ChangeRequest>( acp + '/changerequest/get-request-details', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n\tconfirmChangeRequest( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/confirm-change-request', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n    execute( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/execute-actions', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    rejectAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/reject-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    approveAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/approve-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    submitChangeRequest( actions: string ): Promise<GeoObject> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'actions', actions )\n\n        this.eventService.start();\n\n        return this.http.post<GeoObject>( acp + '/cgr/submitChangeRequest', {actions: actions}, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'toEpochDateTime',\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n    transform(date: string): any {\n        if (!date ) {\n            return date;\n        }\n       \n        return new Date(date).getTime();\n    }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '../../shared/service/event.service'\n\nimport { PageResult } from '../../shared/model/core'\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from '../model/registry'\nimport { CustomAttributeConfig } from '../model/sync'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<SynchronizationConfig>>(acp + '/synchronization-config/get-all', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tget(oid: string): Promise<SynchronizationConfig> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<SynchronizationConfig>(acp + '/synchronization-config/get', { params: params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\t\n\tgetCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<CustomAttributeConfig[]> {\n\n    let params: HttpParams = new HttpParams();\n    params = params.set('externalId', externalId);\n    params = params.set('geoObjectTypeCode', geoObjectTypeCode);\n\n    this.eventService.start();\n\n    return this.http\n      .get<CustomAttributeConfig[]>(acp + '/synchronization-config/get-custom-attr', { params: params })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n\tapply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<SynchronizationConfig>(acp + '/synchronization-config/apply', JSON.stringify({ config: config }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tedit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tlet params = {};\n\n\t\tif (oid != null) {\n\t\t\tparams = { oid: oid };\n\t\t}\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(acp + '/synchronization-config/edit', JSON.stringify(params), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tremove(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tunlock(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/unlock', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\trun(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/synchronization-config/run', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tgetJobs(oid:string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n\n\t\tlet params: HttpParams = new HttpParams();\n\t\tparams = params.set('oid', oid);\n\t\tparams = params.set('pageNumber', pageNumber.toString());\n\t\tparams = params.set('pageSize', pageSize.toString());\n\n//\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<ExportScheduledJob>>(acp + '/synchronization-config/get-jobs', { params: params })\n//\t\t\t.pipe(finalize(() => {\n//\t\t\t\tthis.eventService.complete();\n//\t\t\t}))\n\t\t\t.toPromise();\n\t}\n}\n","import { GeoObjectType } from './registry';\n\nexport class ImportSheet {\n\tname: string;\n\tattributes: {\n\t\tboolean: string[];\n\t\tdate: string[];\n\t\tnumeric: string[];\n\t\ttext: string[];\n\t}\n}\n\nexport class Location {\n\tlabel: string;\n\tcode: string;\n\ttarget: string;\n\tmatchStrategy: string;\r\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: string;\n}\n\nexport class TermProblem {\n\tlabel: string;\n\tparentCode: string;\n\tmdAttributeId: string;\n\tattributeCode: string;\n\tattributeLabel: string;\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class LocationProblem {\n\tlabel: string;\n\ttype: string;\n\ttypeLabel: string;\n\tparent: string;\n\tcontext: { label: string, type: string }[];\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class Exclusion {\n\tcode: string;\n\tvalue: string;\n}\n\nexport class Synonym {\n\tlabel: string;\n\tsynonymId: string;\n\tvOid?: string;\n}\n\nexport class ImportConfiguration {\n\ttype: GeoObjectType;\n\tsheet: ImportSheet;\n\tdirectory: string;\n\tfilename: string;\n\thierarchy: string;\n\tpostalCode: boolean;\n\thasPostalCode: boolean;\n\tlocations: Location[];\n\tformatType: string;\n\tobjectType: string;\n\tlocationProblems: LocationProblem[];\n\ttermProblems: TermProblem[];\n\texclusions: Exclusion[];\n\thierarchies: { code: string, label: string }[];\n\tstartDate: string;\n\tendDate: string;\n\tisExternal: string;\n\texternalSystemId: string;\n\texternalIdAttributeTarget: string;\n}\n\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n\ttrigger,\n\tstate,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\n\nimport { GeoObjectType, Attribute } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component({\n\tselector: 'attribute-input',\n\ttemplateUrl: './attribute-input.component.html',\n\tstyleUrls: ['./attribute-input.css'],\n\tanimations: [\n\t\ttrigger('toggleInputs', [\n\t\t\tstate('none, void',\n\t\t\t\tstyle({ 'opacity': 0 })\n\t\t\t),\n\t\t\tstate('show',\n\t\t\t\tstyle({ 'opacity': 1 })\n\t\t\t),\n\t\t\ttransition('none => show', animate('300ms'))\n\t\t\t//   transition('show => none', animate('100ms'))\n\t\t])\n\t]\n})\nexport class AttributeInputComponent implements OnInit {\n\n\t@Input() disableCodeField: boolean = false;\n\t@Input() excludeDescription: boolean = false;\n\t@Input() isDecimal: boolean = false;\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\t@Output() attributeChange = new EventEmitter<Attribute>();\n\tmessage: string = null;\n\n\tstate: string = 'none';\n\n\tconstructor(private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef) {\n\t}\n\n\tngOnInit(): void {\n\n\t}\n\n\tngAfterViewInit() {\n\t\tthis.state = 'show';\n\t\tthis.cdr.detectChanges();\n\t}\n\n\tngOnChanges() {\n\n\t}\n\n\tngOnDestroy() {\n\n\t}\n\n\thandleOnSubmit(): void {\n\n\t}\n\n\ttoggleIsUnique(): void {\n\t\tthis.attribute.unique = !this.attribute.unique;\n\t}\n\n\tanimate(): void {\n\t\tthis.state = \"none\";\n\t}\n\n\tonAnimationDone(event: AnimationEvent): void {\n\t\tthis.state = \"show\";\n\t}\n\n\tisValid(): boolean {\n\t\tif (this.attribute.code) {\n\n\t\t\t// if code has a space\n\t\t\tif (this.attribute.code.indexOf(\" \") !== -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.attribute.label.localeValues[0].value.length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal) {\n\t\t\t\tconsole.log(this.attribute);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isDecimal && (this.attribute.precision == null || this.attribute.precision.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.isDecimal && (this.attribute.scale == null || this.attribute.scale.toString() == '')) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","<div >\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListByOrg } from '../../model/registry';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n@Component({\n\tselector: 'publish-modal',\n\ttemplateUrl: './publish-modal.component.html',\n\tstyleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\tmessage: string = null;\n\tmaster: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonMasterListChange: Subject<MasterList>;\n\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n\treadonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\tedit: boolean = false;\n\n\tisNew: boolean = false;\n\n\tconstructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n\tngOnInit(): void {\n\n\t\tthis.onMasterListChange = new Subject();\n\n\t\tif (this.master == null || !this.readonly) {\n\t\t\tthis.iService.listGeoObjectTypes(true).then(types => {\n\n\t\t\t\tvar myOrgTypes = [];\n\t\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\t\tif (this.authService.isGeoObjectTypeRM(types[i].orgCode, types[i].code)) {\n\t\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.types = myOrgTypes;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.master = {\n\t\t\t\toid: null,\n\t\t\t\ttypeCode: '',\n\t\t\t\tdisplayLabel: this.lService.create(),\n\t\t\t\tcode: '',\n\t\t\t\trepresentativityDate: null,\n\t\t\t\tpublishDate: null,\n\t\t\t\tlistAbstract: '',\n\t\t\t\tprocess: '',\n\t\t\t\tprogress: '',\n\t\t\t\taccessConstraints: '',\n\t\t\t\tuseConstraints: '',\n\t\t\t\tacknowledgements: '',\n\t\t\t\tdisclaimer: '',\n\t\t\t\tcontactName: '',\n\t\t\t\torganization: '',\n\t\t\t\ttelephoneNumber: '',\n\t\t\t\temail: '',\n\t\t\t\thierarchies: [],\n\t\t\t\tleaf: false,\n\t\t\t\tfrequency: 'ANNUAL',\n\t\t\t\tisMaster: null,\n\t\t\t\tvisibility: null\n\t\t\t};\n\t\t}\n\t}\n\n\tinit(org: MasterListByOrg): void {\n\t\tthis.master.organization = org.oid;\n\t}\n\n\tgetIsDisabled(event): boolean {\n\t\tlet elClasses = event.target.classList;\n\t\tfor (let i = 0; i < elClasses.length; i++) {\n\t\t\tlet c = elClasses[i];\n\t\t\tif (c === 'disabled') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tonChange(): void {\n\n\t\tif (this.master.typeCode != null && this.master.typeCode.length > 0) {\n\t\t\tthis.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n\t\t\t\tthis.master.hierarchies = hierarchies;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.master.hierarchies = [];\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.createMasterList(this.master).then(response => {\n\n\t\t\tthis.onMasterListChange.next(response);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCancel(): void {\n\t\tthis.bsModalRef.hide()\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h2>\n        <h2 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> ({{localeValue.locale}})\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange($event)\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-input',\n    templateUrl: './localized-input.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedInputComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { ManageVersionsModalComponent } from './manage-versions-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, PRESENT } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport Utils from '../../utility/Utils';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-shared-attribute-editor',\n    templateUrl: './geoobject-shared-attribute-editor.component.html',\n    styleUrls: ['./geoobject-shared-attribute-editor.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is shared between:\n * - crtable (create-update-geo-object action detail)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget\n * \n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    private bsModalRef: BsModalRef;\n\n    /*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    @Input() preGeoObject: GeoObjectOverTime = null;\n\n    calculatedPreObject: any = {};\n\n    /*\n\t * The state of the GeoObject being modified\n\t */\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    calculatedPostObject: any = {};\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isEditingGeometries = false;\n\n    @Input() isGeometryInlined = false;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n    isValid: boolean = true;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n    @ViewChild( \"attributeForm\" ) attributeForm;\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private datePipe: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private lService: LocalizationService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.preGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\n        if ( this.postGeoObject == null ) {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // Object.assign is a shallow copy. We want a deep copy.\n        }\n        else {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.postGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n        }\n\n        // this.attributeForm.statusChanges.subscribe( result => {\n        //     this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n        //     this.valid.emit( this.isValid );\n        // } );\n\n        if ( this.attributeExcludes != null ) {\n            this.geoObjectAttributeExcludes.push.apply( this.geoObjectAttributeExcludes, this.attributeExcludes );\n\n            if ( !this.isGeometryInlined ) {\n                this.geoObjectAttributeExcludes.push( \"geometry\" );\n            }\n        }\n\n        let geomAttr = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geomAttr = this.geoObjectType.attributes[i];\n            }\n        }\n        if ( geomAttr == null ) {\n            let geometry: Attribute = new Attribute( \"geometry\", \"geometry\", new LocalizedValue( \"Geometry\", null ), new LocalizedValue( \"Geometry\", null ), true, false, false, true );\n            this.geoObjectType.attributes.push( geometry );\n        }\n\n        this.calculate();\n    }\n\n    ngAfterViewInit() {\n         this.attributeForm.statusChanges.subscribe( result => {\n            this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n            this.valid.emit( this.isValid );\n        } );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): void {\n        this.calculatedPreObject = this.calculateCurrent( this.preGeoObject );\n        this.calculatedPostObject = this.calculateCurrent( this.postGeoObject );\n\n        if ( this.geometryEditor != null ) {\n            this.geometryEditor.reload();\n        }\n    }\n\n    calculateCurrent( goot: GeoObjectOverTime ): any {\n      const object = {};\n\n      const time = this.forDate.getTime();\n\n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n          let attr = this.geoObjectType.attributes[i];\n          object[attr.code] = null;\n\n          if ( attr.type === 'local' ) {\n              object[attr.code] = this.lService.create();\n          }\n\n          if ( attr.isChangeOverTime ) {\n            let values = goot.attributes[attr.code].values;\n\n            values.forEach( vot => {\n\n                const startDate = Date.parse( vot.startDate );\n                const endDate = Date.parse( vot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n\n                    if ( attr.type === 'local' ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: JSON.parse( JSON.stringify( vot.value ) )\n                        };\n                    }\n                    else if ( attr.type === 'term' && vot.value != null && Array.isArray( vot.value ) && vot.value.length > 0 ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value[0]\n                        };\n                    }\n                    else {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value\n                        };\n                    }\n                }\n            } );\n          }\n          else {\n              object[attr.code] = goot.attributes[attr.code];\n          }\n      }\n      \n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        let attr = this.geoObjectType.attributes[i];\n        \n        if ( attr.isChangeOverTime && object[attr.code] == null ) {\n          object[attr.code] = {\n            startDate: null,\n            endDate: null,\n            value: \"\"\n          }\n        }\n      }\n\n      return object;\n    }\n\n    formatDate( date: string ): string {\n        if ( date === PRESENT ) {\n            return this.lService.localize(\"changeovertime\", \"present\");\n        }\n\n        return date;\n    }\n\n    handleChangeCode( e: any ): void {\n        this.postGeoObject.attributes.code = this.calculatedPostObject['code'];\n        //        \n        //        console.log(this.calculatedPostObject['code'])\n        //        console.log(e)\n    }\n\n    onManageAttributeVersions( attribute: Attribute ): void {\n        this.bsModalRef = this.modalService.show( ManageVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        // TODO: sending the properties like this is wrong\n        this.bsModalRef.content.geoObjectOverTime = this.postGeoObject;\n        this.bsModalRef.content.geoObjectType = this.geoObjectType;\n        this.bsModalRef.content.isNewGeoObject = this.isNew;\n        this.bsModalRef.content.attribute = attribute;\n        this.bsModalRef.content.onAttributeVersionChange.subscribe( versionObj => {\n            this.calculate();\n        } );\n        this.bsModalRef.content.tfInit();\n    }\n\n    onManageGeometryVersions(): void {\n        let geometry = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geometry = this.geoObjectType.attributes[i];\n            }\n        }\n\n        this.onManageAttributeVersions( geometry );\n    }\n\n    isDifferentText( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null ) {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value.trim() !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    isDifferentValue( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null )\n        {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    onSelectPropertyOption( event: any, option: any ): void {\n        this.currentTermOption = JSON.parse( JSON.stringify( this.modifiedTermOption ) );\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                if ( attr.code === \"status\" ) {\n                    return Utils.removeStatuses(attrOpts);\n                }\n                else {\n                    return attrOpts;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isStatusChanged( post, pre ) {\n\n        if ( pre != null && post == null ) {\n            return true;\n        }\n\n        if ( pre == null || post == null || pre.length == 0 || post.length == 0 ) {\n            return false;\n        }\n\n        var preCompare = pre;\n        if ( Array.isArray( pre ) ) {\n            preCompare = pre[0];\n        }\n\n        var postCompare = post;\n        if ( Array.isArray( post ) ) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    getTypeDefinition( key: string ): string {\n        // let attrs = this.geoObjectType.attributes;\n\n\n        // attrs.attributes.forEach(attr => {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if ( attr.code === key ) {\n                return attr.type;\n            }\n        }\n\n        return null;\n    }\n\n    public getIsValid(): boolean {\n        return this.isValid;\n    }\n\n    public getGeoObject(): any {\n        return this.postGeoObject;\n\n        //        // The front-end uses the 'yyyy-mm-dd' date format. Our backend expects dates in epoch format.\n        //        var submitGO = JSON.parse( JSON.stringify( this.postGeoObject ) );\n        //        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        //            var attr = this.geoObjectType.attributes[i];\n        //\n        //            if ( attr.type === \"date\" && this.postGeoObject.properties[attr.code] != null ) {\n        //                var parts = this.postGeoObject.properties[attr.code].split( '-' );\n        //                var date = new Date( parts[0], parts[1] - 1, parts[2] );\n        //\n        //                submitGO.properties[attr.code] = date.getTime();\n        //            }\n        //        }\n        //\n        //        return submitGO;\n    }\n}\n","<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <!-- <div class=\"col-md-12\"> -->\n            <div *ngIf=\"preGeoObject\">\n                <div *ngIf=\"!this.isEditingGeometries\" class=\"row\"> \n                    <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    <div class=\"col-md-12\">\n                        <span class=\"text\"></span>\n                            <div class=\"panel\" style=\"box-shadow: none;\">\n                                <div class=\"panel-body\">\n                                    <ul class=\"list-group\">\n                                        <li class=\"list-group-item\" style=\"text-align:left; border: 1px solid #ddd;\" *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes\">\n                                            <h5 *ngIf=\"attr.code !== 'geometry'\">\n\n                                              <span *ngIf=\"attr.code === 'code'\">\n                                                <localize key=\"geoobject.code.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code === 'displayLabel'\">\n                                                <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\">\n                                                {{attr.label.localizedValue}}\n                                              </span>\n                                              \n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>\n                                            </h5>\n                                            \n                                            <h5 *ngIf=\"attr.code === 'geometry'\">\n                                              <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>                                              \n                                            </h5>\n                                            \n\n                                            <div *ngIf=\"attr.code === 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"calculatedPostObject[attr.code]\" (change)=\"handleChangeCode($event)\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew\" required> \n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'character' && attr.code !== 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [ngModel]=\"calculatedPostObject[attr.code].value\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n\n                                              <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentText(attr)\">\n                                                <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                              </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'local'\">\n                                              <ul class=\"list-group\" *ngIf=\"calculatedPostObject[attr.code].value != null\">\n                                                <li class=\"list-group-item\" *ngFor=\"let localeValue of calculatedPostObject[attr.code].value.localeValues; let i = index\">\n                                                  <h5>{{localeValue.locale}}</h5>\n                                                  <input disabled [required]=\"localeValue.locale === 'defaultLocale'\" type=\"text\" [ngModel]=\"localeValue.value\" [name]=\"'mod-' + attr.code + '-' + localeValue.locale\"> \n\n                                                  <p class=\"warning-text\" *ngIf=\"!isNew && calculatedPreObject[attr.code].value != null && localeValue.value != null && localeValue.value.trim() !== calculatedPreObject[attr.code].value.localeValues[i].value\">\n                                                    <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value.localeValues[i].value}}\n                                                  </p>\n                                                </li>\n                                              </ul>                                            \n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'date'\">\n                                                <input type=\"date\" [ngModel]=\"calculatedPostObject[attr.code].value | date:'yyyy-MM-dd'\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n                                                    \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value | date}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'boolean'\">\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"calculatedPostObject[attr.code].value\" disabled [value]=\"true\" id=\"mod-{{attr.code}}-true\" name=\"mod-{{attr.code}}-true\">\n                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                </label>\n\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"!calculatedPostObject[attr.code].value\" disabled [value]=\"false\" id=\"mod-{{attr.code}}-false\" name=\"mod-{{attr.code}}-false\">\n                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                </label>\n                                                \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'float'\">\n                                                <input disabled type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\"\n                                                    id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'integer'\">\n                                                <input type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\" disabled id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'term'\">\n                                                <select id=\"mod-{{attr.code}}\" name=\"mod-term-{{attr.code}}\" class=\"select-area\" style=\"float:none;\" disabled [(ngModel)]=\"calculatedPostObject[attr.code].value\">\n                                                    <option value=\"\" ></option>\n                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attr.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                </select>\n\n                                                <!-- \n                                                <p class=\"warning-text\" *ngIf=\"calculatedPreObject[attr.code].value && calculatedPostObject[attr.code].value !== calculatedPreObject[attr.code].value\">\n                                                -->\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isStatusChanged(calculatedPostObject[attr.code].value, calculatedPreObject[attr.code].value)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'geometry' && this.isGeometryInlined\">\n                                              <geoobject-editor-map #geometryEditor\n                                                [geometryType]=\"this.geoObjectType.geometryType\"\n                                                [readOnly]=\"true\"\n                                                [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                                                [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                                                [bboxCode]=\"this.preGeoObject.attributes.code\"\n                                                [bboxType]=\"this.geoObjectType.code\"\n                                                (onClickEdit)=\"this.onManageGeometryVersions()\"\n                                                [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                                              </geoobject-editor-map>\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.isChangeOverTime\" class=\"button-holder\" style=\"text-align:left;\" >\n                                              <button type=\"submit\" style=\"\" (click)=\"onManageAttributeVersions(attr)\" class=\"btn btn-primary\" role=\"button\">\n                                                <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                                              </button>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                    </div>\n                 </div>\n                 <div *ngIf=\"this.isEditingGeometries && !this.isGeometryInlined\">\n                   <!-- <div class=\"label-holder\">\n                     <label>\n                      <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                     </label>\n                   </div> -->\n                   <div class=\"\">\n                     <geoobject-editor-map #geometryEditor \n                       [geometryType]=\"this.geoObjectType.geometryType\"\n                       [readOnly]=\"true\"\n                       [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                       [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                       [bboxCode]=\"this.preGeoObject.attributes.code\"\n                       [bboxType]=\"this.geoObjectType.code\"\n                       (onClickEdit)=\"this.onManageGeometryVersions()\"\n                       [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                     </geoobject-editor-map>\n                   </div>\n                 </div>\n           </div>\n        <!-- </div> -->\n    </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-text',\n    templateUrl: './localized-text.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedTextComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n    </span>\n  </div>\n</div>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '../../../model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n      \n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.hierarchy\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"configuration.hierarchy\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of configuration.hierarchies\" value={{hierarchy.code}}>{{hierarchy.label}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild, SimpleChanges, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { Map, LngLatBounds, NavigationControl } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport * as mapboxgl from 'mapbox-gl';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor-map[geometryType]',\n    templateUrl: './geoobject-editor-map.component.html',\n    styleUrls: ['./geoobject-editor-map.component.css']\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. We will invoke this event with GeoJSON when the user makes an edit to the geometry.\n     */\n    @Output() geometryChange = new EventEmitter<any>();\n\n    /*\n     * Optional. If specified, we will diff based on this GeoJSON geometry.\n     */\n    @Input() preGeometry: any;\n\n    /*\n     * Optional. If we are read-only, this will be displayed as a layer. If we are not, it will be editable.\n     */\n    @Input() postGeometry: any;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    /*\n     * Optional. If specified, we will display an edit button on the map, and when it is clicked we will emit this event.\n     */\n    @Output() onClickEdit = new EventEmitter<void>();\n\n    @ViewChild( \"simpleEditControl\" ) simpleEditControl;\n\n    @ViewChild( \"mapDiv\" ) mapDiv;\n\n    map: Map;\n\n    editingControl: any;\n\n    constructor( private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            //this.registryService.getGeoObjectOverTime( \"22\", \"Province\" )\n            //.then( geoObject => {\n\n            ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\n\n            this.mapDiv.nativeElement.id = Math.floor( Math.random() * ( 899999 ) ) + 100000;\n\n            this.map = new Map( {\n                container: this.mapDiv.nativeElement.id,\n                style: 'mapbox://styles/mapbox/satellite-v9',\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            } );\n\n            this.map.on( 'load', () => {\n                this.initMap();\n            } );\n\n            this.map.on( 'draw.create', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.delete', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.update', () => {\n                this.onValidChange();\n            } );\n\n            //} ).catch(( err: HttpErrorResponse ) => {\n            //    this.error( err );\n            //} );\n        }, 10 );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['preGeometry'] || changes['postGeometry'] ) {\n            this.reload();\n        }\n    }\n\n    public reload(): void {\n        if ( this.map != null ) {\n            this.removeLayers();\n            this.addLayers();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    getIsValid(): boolean {\n        if ( !this.readOnly ) {\n            let isValid: boolean = false;\n\n            if ( this.editingControl != null ) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if ( featureCollection.features.length > 0 ) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    private onValidChange(): void {\n        this.geometryChange.emit( this.saveDraw() );\n    }\n\n    initMap(): void {\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            this.onValidChange();\n        } );\n\n\n        this.addLayers();\n\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.zoomToBbox();\n        }\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        if ( !this.readOnly ) {\n            this.enableEditing();\n        }\n        else {\n            this.addEditButton();\n        }\n\n        this.onValidChange();\n    }\n\n    addEditButton(): void {\n        this.simpleEditControl.editEmitter.subscribe( versionObj => {\n            this.onClickEdit.emit();\n        } );\n\n        this.map.addControl( this.simpleEditControl );\n    }\n\n    enableEditing(): void {\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: false,\n                    polygon: true,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: true,\n                    line_string: false,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: true,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        this.map.addControl( this.editingControl );\n\n        if ( this.postGeometry != null ) {\n            this.editingControl.add( this.postGeometry );\n        }\n    }\n\n    removeSource( prefix: string ): void {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.map.removeLayer( sourceName + \"-polygon\" );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.map.removeLayer( sourceName + \"-point\" );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\" ) {\n            this.map.removeLayer( sourceName + \"-line\" );\n        }\n\n        this.map.removeSource( sourceName );\n    }\n\n    removeLayers(): void {\n        if ( this.map.getSource( \"pre-geoobject\" ) ) {\n            this.removeSource( \"pre\" );\n        }\n        if ( this.map.getSource( \"post-geoobject\" ) ) {\n            this.removeSource( \"post\" );\n        }\n    }\n\n    addLayers(): void {\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.renderGeometryAsLayer( this.preGeometry, \"pre\", \"#EFA22E\" )\n        }\n        if ( this.readOnly && this.postGeometry != null && this.postGeometry !== \"\") {\n            this.renderGeometryAsLayer( this.postGeometry, \"post\", \"#3368EF\" );\n        }\n    }\n\n    renderGeometryAsLayer( geometry: any, prefix: string, color: string ) {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        this.map.addSource( sourceName, {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            // Polygon Layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-polygon\",\n                \"type\": \"fill\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7,\n                },\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            // Point layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-point\",\n                \"type\": \"circle\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": '#FFFFFF'\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.map.addLayer( {\n                \"id\": sourceName + \"-line\",\n                \"source\": sourceName,\n                \"type\": \"line\",\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            } );\n        }\n\n        ( <any>this.map.getSource( sourceName ) ).setData( geometry );\n    }\n\n    zoomToBbox(): void {\n        if ( this.bboxCode != null && this.bboxType != null ) {\n            if ( this.bboxDate == null ) {\n                this.registryService.getGeoObjectBounds( this.bboxCode, this.bboxType ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n            else {\n                this.registryService.getGeoObjectBoundsAtDate( this.bboxCode, this.bboxType, this.bboxDate ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n        }\n    }\n\n    saveDraw(): any {\n        if ( this.editingControl != null ) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if ( featureCollection.features.length > 0 ) {\n\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if ( this.geometryType === \"MULTIPOLYGON\" ) {\n                    let polygons = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPolygon' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                polygons.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            polygons.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: 'MultiPolygon'\n                    };\n                }\n                else if ( this.geometryType === \"MULTIPOINT\" ) {\n                    let points = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPoint' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                points.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            points.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: 'MultiPoint'\n                    };\n                }\n                else if ( this.geometryType === \"MULTILINE\" ) {\n                    let lines = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiLineString' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                lines.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            lines.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: 'MultiLineString'\n                    };\n                }\n                else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n\n            return this.postGeometry;\n        }\n\n        return this.postGeometry;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n        console.log( \"ERROR\", err );\n    }\n\n\n}\n","<div #mapDiv class=\"map-view-port text-left\" style=\"height:400px;\"></div>\n\n<simple-edit-control #simpleEditControl></simple-edit-control>","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ParentTreeNode, GeoObject, HierarchyOverTime } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\n\nimport { ManageParentVersionsModalComponent } from './manage-parent-versions-modal.component';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\n@Component( {\n\n    selector: 'cascading-geo-selector',\n    templateUrl: './cascading-geo-selector.html',\n} )\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n\n    @ViewChild( \"mainForm\" ) mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    constructor( private modalService: BsModalService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach( hierarchy => {\n            const object = {};\n            object['label'] = hierarchy.label;\n            object['code'] = hierarchy.code;\n\n            this.isValid = this.isValid && ( this.hierarchies.length > 0 );\n\n            hierarchy.entries.forEach( pot => {\n                const startDate = Date.parse( pot.startDate );\n                const endDate = Date.parse( pot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n                    let parents = [];\n\n                    hierarchy.types.forEach( type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if ( pot.parents[type.code] != null ) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push( parent );\n                    } );\n\n                    object['parents'] = parents;\n                }\n            } );\n\n            this.cHierarchies.push( object );\n\n        } );\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions( code: string ): void {\n\n        const hierarchy = this.hierarchies.find( h => h.code === code );\n\n        this.bsModalRef = this.modalService.show( ManageParentVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.init( hierarchy );\n        this.bsModalRef.content.onVersionChange.subscribe( hierarchy => {\n            this.calculate();\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [(ngModel)]=\"parent.geoObject.properties.displayLabel.localizedValue\" name=\"{{hierarchy.code}}-{{parent.code}}-input\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\n\nimport { DatePipe } from '@angular/common';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'submit-change-request',\n    templateUrl: './submit-change-request.component.html',\n    styleUrls: []\n} )\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    typeaheadLoading: boolean;\n\n    typeaheadNoResults: boolean;\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n\t/*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    preGeoObject: GeoObjectOverTime = null;\n\n\t/*\n\t * The state of the GeoObject after our Change Request has been approved \n\t */\n    postGeoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private localizeService: LocalizationService,\n        private authService: AuthService ) {\n\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( this.geoObjectId, this.geoObjectType.code ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes( [], null ).then( types => {\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isGeoObjectTypeRC(types[i].organizationCode, types[i].code))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n\n\n    private onValidChange( newValid: boolean ) {\n        if ( this.preGeoObject == null ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.geometryEditor != null && !this.geometryEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.attributeEditor != null && !this.attributeEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading( e: boolean ): void {\n        this.typeaheadLoading = e;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.registryService.getGeoObjectOverTime( e.item.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n                this.postGeoObject = JSON.parse( JSON.stringify( this.preGeoObject ) ); // Object.assign is a shallow copy. We want a deep copy.\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    submit(): void {\n\n        let goSubmit: GeoObjectOverTime = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            let goGeometries: GeoObjectOverTime = this.geometryEditor.saveDraw();\n//            goSubmit.geometry = goGeometries.geometry;\n        }\n\n        let actions = [{\n            \"actionType\": \"geoobject/update\", // TODO: account for create\n            \"apiVersion\": \"1.0-SNAPSHOT\", // TODO: make dynamic\n            \"createActionDate\": new Date().getTime(),\n            \"geoObject\": goSubmit,\n            \"contributorNotes\": this.reason\n        }]\n\n        this.changeRequestService.submitChangeRequest( JSON.stringify( actions ) )\n            .then( geoObject => {\n                this.cancel();\n\n                this.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"change.request.success.message\" );\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.isValid = false;\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.preGeoObject = null;\n        this.postGeoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error( err: any ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n}","<!-- <div class=\"new-admin-design-main\" style=\"height: 100vh;\">\n    <cgr-header></cgr-header> -->\n<loading-bar></loading-bar>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <div style=\"min-height:50vh;\">\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobjecttype.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\"\n                            [(ngModel)]=\"geoObjectType\" required>\n                            <!-- <option> <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize> </option> -->\n                            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}\n                            </option>\n                        </select>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\" style=\"overflow: visible;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobject.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <input type=\"text\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\"\n                            [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\"\n                            typeaheadOptionField=\"name\" class=\"form-control\" autocomplete=\"off\" required>\n\n                    </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"preGeoObject\">\n                <geoobject-shared-attribute-editor #attributeEditor (valid)=\"this.onValidChange($event)\"\n                    [geoObjectType]=\"this.geoObjectType\" [preGeoObject]=\"this.preGeoObject\"\n                    [(postGeoObject)]=\"this.postGeoObject\" [isGeometryInlined]=\"true\">\n                </geoobject-shared-attribute-editor>\n            </div>\n\n            <div class=\"row-holder\" style=\"z-index: 0;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"change.request.reason.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" name=\"reason-input\" required></textarea>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!attributeForm.valid\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError } from '../../model/registry';\n\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n\n@Component( {\n    selector: 'geoobject-editor',\n    templateUrl: './geoobject-editor.component.html',\n    styleUrls: ['./geoobject-editor.component.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n    \n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n//    /*\n//     * GeoObject Geometry Editor\n//     */\n//    @ViewChild( \"geometryEditor\" ) geometryEditor;\n//\n//    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild( \"parentSelector\" ) parentSelector;\n\n    areParentsValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n    \n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor( private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService, \n        authService: AuthService ) {\n        \n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate( votArray, startDate ): any {\n      for (let i: number = 0; i < votArray.length; ++i)\n      {\n        if (votArray[i].startDate === startDate)\n        {\n          return votArray[i];\n        }\n      }\n      \n      return null;\n    }\n\n    setMasterListId( id: string ) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    setOnSuccessCallback( func: Function ) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew( typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        } );\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError( importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean ) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n        \n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0)\n        {\n          this.hierarchies = importError.object.parents;\n          this.areParentsValid = true;\n        }\n        else\n        {\n          this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.hierarchies = retJson.hierarchies;\n          } );\n          this.areParentsValid = false;\n        }\n        \n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        \n        this.submitFunction = () => {\n          let config = {\n            historyId : historyId,\n            importErrorId: importError.id,\n            resolution: 'APPLY_GEO_OBJECT',\n            parentTreeNode: this.hierarchies,\n            geoObject: this.goSubmit,\n            isNew: importError.object.isNew\n          }\n        \n          this.registryService.submitErrorResolve( config )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting( code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject( code, typeCode );\n        this.fetchGeoObjectType( typeCode );\n        this.fetchHierarchies( code, typeCode );\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject( code: string, typeCode: string ) {\n        this.registryService.getGeoObjectOverTime( code, typeCode ).then( geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( geoObject ) ).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n            //this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n            \n            this.goSubmit = this.goPropertiesPost;\n\n//            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then( locales => {\n            this.localizeService.setLocales( locales );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchGeoObjectType( code: string ) {\n        this.registryService.getGeoObjectTypes( [code], null )\n            .then( geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n                \n                if (this.goPropertiesPre != null)\n                {\n                  this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null)\n                {\n                  this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if ( !this.geoObjectType.isGeometryEditable ) {\n//                    this.areGeometriesValid = true;\n                }\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( err );\n                //                this.error( err );\n            } );\n    }\n\n    private fetchHierarchies( code: string, typeTypeCode: string ) {\n        this.registryService.getHierarchiesForGeoObject( code, typeTypeCode )\n            .then(( hierarchies: any ) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    getTypeAheadObservable( text, typeCode ) {\n        return Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( text, typeCode ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, ptn: ParentTreeNode ): void {\n        this.registryService.getGeoObjectByCode( e.item.code, ptn.geoObject.properties.type )\n            .then( geoObject => {\n\n                ptn.geoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    private onValidChange() {\n        if ( this.attributeEditor != null ) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n//        if ( this.geometryEditor != null ) {\n//            this.areGeometriesValid = this.geometryEditor.getIsValid();\n//        }\n        if ( this.parentSelector != null ) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n        \n//        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage( nextPage: number, force: boolean = false ): void {\n        if ( nextPage === this.tabIndex && !force ) {\n            return;\n        }\n\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n        \n        if (nextPage === 2)\n        {\n          this.isEditingGeometries = true;\n        }\n        else\n        {\n          this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if ( this.attributeEditor != null ) {\n          this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if ( this.parentSelector != null ) {\n          this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n          this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n          this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    public cancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n      if ( this.isValid ) {\n        this.bsModalRef.hide();\n    \n        this.persistModelChanges();\n        \n        if (this.submitFunction == null)\n        {\n          this.registryService.applyGeoObjectEdit( this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n        else\n        {\n          this.submitFunction();\n        }\n      }\n    }\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n            \n                <div *ngIf=\"!areParentsValid\" class=\"alert alert-danger\" role=\"alert\">\n                  <localize key=\"geoobject.editor.modal.parents.must.be.assigned.message\"></localize>                \n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"changeOverTime.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { Step, StepConfig } from '../../model/registry';\n\n\n@Component( { \n    selector: 'step-indicator',\n    templateUrl: './step-indicator.component.html',\n    styleUrls: ['./step-indicator.css']\n} )\nexport class StepIndicatorComponent {\n\n    @Input('steps')\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n\n    constructor( private localizeService: LocalizationService ) {\n\n        this._stepConfig = {\"steps\": []};\n    }\n\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n       \n    }\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { Task } from '../model/registry';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    getMyTasks( pageNum: number, pageSize: number, whereStatus: string ): Promise<any> {\r\n      let params: HttpParams = new HttpParams();\r\n      \r\n      params = params.set( 'orderBy', 'createDate' );\r\n      params = params.set( 'pageNum', pageNum.toString() );\r\n      params = params.set( 'pageSize', pageSize.toString() );\r\n      params = params.set( 'whereStatus', whereStatus );\r\n    \r\n      return this.http\r\n          .get<any>( acp + '/tasks/get', { params: params } )\r\n          .toPromise();\r\n    }\r\n    \r\n    completeTask( taskId: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/complete', JSON.stringify( { 'id': taskId } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n    \r\n    setTaskStatus( taskId: string, status: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/setTaskStatus', JSON.stringify( { 'id': taskId, 'status': status } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { finalize } from 'rxjs/operators';\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\nimport { LocationInformation } from '../model/location-manager';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n\tconstructor(private http: HttpClient, private eventService: EventService) {\r\n\t\t(mapboxgl as any).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNWE5bWkwazYwNGFtb3loOGxsbjR1In0.ZNEwT-pBnGookEb-BF_jQQ';\r\n\t}\r\n\r\n\troots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\tif (typeCode != null) {\r\n\t\t\tparams = params.set('typeCode', typeCode);\r\n\t\t}\r\n\r\n\t\tif (hierarchyCode != null) {\r\n\t\t\tparams = params.set('hierarchyCode', hierarchyCode);\r\n\t\t}\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<LocationInformation>(acp + '/registrylocation/roots', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\tselect(code: string, typeCode: string, childTypeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\t\tparams = params.set('code', code);\r\n\t\tparams = params.set('typeCode', typeCode);\r\n\r\n\t\tif (date != null) {\r\n\t\t\tparams = params.set('date', date);\r\n\t\t}\r\n\r\n\t\tif (childTypeCode != null) {\r\n\t\t\tparams = params.set('childTypeCode', childTypeCode);\r\n\t\t}\r\n\r\n\t\tif (hierarchyCode != null) {\r\n\t\t\tparams = params.set('hierarchyCode', hierarchyCode);\r\n\t\t}\r\n\r\n\t\tthis.eventService.start();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<LocationInformation>(acp + '/registrylocation/select', { params: params })\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n\r\n}","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TreeNode, TreeComponent, TreeDropDirective } from 'angular-tree-component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { HierarchyType, HierarchyNode } from '../../model/hierarchy';\nimport { GeoObjectType } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal'\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\nclass Instance {\n    active: boolean;\n    label: string;\n}\n\n@Component( {\n\n    selector: 'hierarchies',\n    templateUrl: './hierarchy.component.html',\n    styleUrls: ['./hierarchy.css']\n} )\n\nexport class HierarchyComponent implements OnInit {\n\n    // isAdmin: boolean;\n    // isMaintainer: boolean;\n    // isContributor: boolean;\n\n    instance: Instance = new Instance();\n    hierarchies: HierarchyType[];\n    geoObjectTypes: GeoObjectType[] = [];\n    nodes = [] as HierarchyNode[];\n    currentHierarchy: HierarchyType = null;\n\n    hierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n    geoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild( TreeComponent )\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild( 'nodeMenu' ) public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n    @ViewChild( 'leafMenu' ) public leafMenuComponent: ContextMenuComponent;\n\n    /* \n     * Currently clicked on id for delete confirmation modal \n     */\n    current: TreeNode;\n\n\n    constructor( private hierarchyService: HierarchyService, private modalService: BsModalService,\n        private contextMenuService: ContextMenuService, private changeDetectorRef: ChangeDetectorRef,\n        private localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService ) {\n\n        // this.admin = authService.isAdmin();\n        // this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\t// this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n    }\n\n    ngOnInit(): void {\n        this.refreshAll( null );\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    isRA(): boolean {\n        return this.authService.isRA();\n    }\n\n    isOrganizationRA(orgCode: string): boolean {\n        return this.authService.isOrganizationRA(orgCode);\n    }\n\n    public refreshAll( desiredHierarchy ) {\n        this.registryService.init().then( response => {\n            this.localizeService.setLocales( response.locales );\n\n            this.geoObjectTypes = response.types;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            this.setHierarchies( response.hierarchies );\n\n            this.setNodesOnInit( desiredHierarchy );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public excludeHierarchyTypeDeletes( hierarchy: HierarchyType ) {\n        return ( this.hierarchyTypeDeleteExclusions.indexOf( hierarchy.code ) !== -1 );\n    }\n\n    public excludeGeoObjectTypeDeletes( geoObjectType: GeoObjectType ) {\n        return ( this.geoObjectTypeDeleteExclusions.indexOf( geoObjectType.code ) !== -1 );\n    }\n\n    private setNodesOnInit( desiredHierarchy ): void {\n\n        let index = -1;\n\n        if ( desiredHierarchy != null ) {\n            index = this.hierarchies.findIndex( h => h.code === desiredHierarchy.code );\n        }\n        else if ( this.hierarchies.length > 0 ) {\n            index = 0;\n        }\n\n        if ( index > -1 ) {\n            let hierarchy = this.hierarchies[index];\n\n            this.nodes = hierarchy.rootGeoObjectTypes;\n\n            this.currentHierarchy = hierarchy;\n\n            setTimeout(() => {\n                if ( this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n    }\n\n    private setNodesForHierarchy( hierarchyType: HierarchyType ): void {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let hierarchy = this.hierarchies[i];\n            if ( hierarchy.code === hierarchyType.code ) {\n                this.nodes = hierarchyType.rootGeoObjectTypes;\n                this.currentHierarchy = hierarchy;\n                break;\n            }\n        }\n\n        setTimeout(() => {\n            this.tree.treeModel.expandAll();\n        }, 1 )\n    }\n\n    private getHierarchy( hierarchyId: string ): HierarchyType {\n        let target: HierarchyType = null;\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchyId === hierarchy.code ) {\n                target = hierarchy;\n            }\n        } );\n\n        return target;\n    }\n\n    private setHierarchies( data: HierarchyType[] ): void {\n        let hierarchies: HierarchyType[] = [];\n        data.forEach(( hierarchyType, index ) => {\n\n            if ( hierarchyType.rootGeoObjectTypes.length > 0 ) {\n                hierarchyType.rootGeoObjectTypes.forEach( rootGeoObjectType => {\n                    this.processHierarchyNodes( rootGeoObjectType );\n                } )\n            }\n\n            hierarchies.push( hierarchyType );\n\n        } );\n\n        this.hierarchies = hierarchies\n\n        this.hierarchies.sort(( a, b ) => {\n            if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n            else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n            else return 0;\n        } );\n    }\n\n    private updateHierarchy( code: string, rootGeoObjectTypes: HierarchyNode[] ): void {\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchy.code === code ) {\n                hierarchy.rootGeoObjectTypes = rootGeoObjectTypes;\n            }\n        } )\n    }\n\n    /**\n     * Set properties required by angular-tree-component using recursion.\n     */\n    private processHierarchyNodes( node: HierarchyNode ) {\n        node.label = this.getHierarchyLabel( node.geoObjectType );\n\n        node.children.forEach( child => {\n            this.processHierarchyNodes( child );\n        } )\n    }\n\n    private getHierarchyLabel( geoObjectTypeCode: string ): string {\n        let label: string = null;\n        this.geoObjectTypes.forEach( function( gOT ) {\n            if ( gOT.code === geoObjectTypeCode ) {\n                label = gOT.label.localizedValue;\n            }\n        } );\n\n        return label;\n    }\n\n    public handleOnMenu( node: any, $event: any ): void {\n        if (this.isOrganizationRA(this.currentHierarchy.organizationCode))\n        {\n          this.contextMenuService.show.next( {\n              contextMenu: ( node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent ),\n              event: $event,\n              item: node,\n          } );\n          $event.preventDefault();\n          $event.stopPropagation();\n        }\n        else\n        {\n          $event.preventDefault();\n          $event.stopPropagation();\n        }\n    }\n\n    public treeNodeOnClick( node: TreeNode, $event: any ): void {\n\n        node.treeModel.setFocusedNode( node );\n\n        if ( node.treeModel.isExpanded( node ) ) {\n            node.collapse();\n        }\n        else {\n            node.treeModel.expandAll();\n        }\n    }\n\n    options = {\n        //\t\t  allowDrag: (node:TreeNode) => node.isLeaf,\n        //\t\t  allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n        // return true / false based on element, to.parent, to.index. e.g.\n        //\t\t\t    return parent.hasChildren;\n        //\t\t\t  },\n        displayField: \"label\",\n        actionMapping: {\n            mouse: {\n                click: ( tree: TreeComponent, node: TreeNode, $event: any ) => {\n                    this.treeNodeOnClick( node, $event );\n                },\n                contextMenu: ( tree: any, node: any, $event: any ) => {\n                    this.handleOnMenu( node, $event );\n                }\n            }\n        },\n        mouse: {\n            //\t            drop: (tree: TreeComponent, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n            //\t              console.log('drag', from, to); // from === {name: 'first'}\n            //\t              // Add a node to `to.parent` at `to.index` based on the data in `from`\n            //\t              // Then call tree.update()\n            //\t            }\n        }\n    };\n\n    public hierarchyOnClick( event: any, item: any ) {\n        let hierarchyId = item.code;\n\n        this.currentHierarchy = item;\n\n        this.nodes = [];\n\n        if ( this.getHierarchy( hierarchyId ).rootGeoObjectTypes.length > 0 ) {\n            // TODO: should rootGeoObjectTypes be hardcoded to only one entry in the array?\n            this.nodes.push( this.getHierarchy( hierarchyId ).rootGeoObjectTypes[0] );\n\n            setTimeout(() => {\n                if ( this && this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n\n        if ( this.tree ) {\n            this.tree.treeModel.update();\n        }\n    }\n\n    public createHierarchy(): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n\n        ( <CreateHierarchyTypeModalComponent>this.bsModalRef.content ).onHierarchytTypeCreate.subscribe( data => {\n\n            this.hierarchies.push( data );\n        } );\n    }\n\n    public deleteHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeHierarchyType( data );\n        } );\n    }\n\n    public editHierarchyType( obj: HierarchyType, readOnly: boolean ): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.edit = true;\n        this.bsModalRef.content.readOnly = readOnly;\n        this.bsModalRef.content.hierarchyType = obj;\n        this.bsModalRef.content.onHierarchytTypeCreate.subscribe( data => {\n            let pos = this.getHierarchyTypePosition( data.code );\n\n            this.hierarchies[pos].label = data.label;\n            this.hierarchies[pos].description = data.description;\n        } );\n    }\n\n    public removeHierarchyType( code: string ): void {\n        this.hierarchyService.deleteHierarchyType( code ).then( response => {\n\n            let pos = this.getHierarchyTypePosition( code );\n            this.hierarchies.splice( pos, 1 );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public createGeoObjectType(): void {\n        this.bsModalRef = this.modalService.show( CreateGeoObjTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\n        ( <CreateGeoObjTypeModalComponent>this.bsModalRef.content ).onGeoObjTypeCreate.subscribe( data => {\n            this.geoObjectTypes.push( data );\n        } );\n    }\n\n    public deleteGeoObjectType( obj: GeoObjectType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeGeoObjectType( data );\n        } );\n    }\n\n    public removeGeoObjectType( code: string ): void {\n        this.registryService.deleteGeoObjectType( code ).then( response => {\n\n            let pos = this.getGeoObjectTypePosition( code );\n            this.geoObjectTypes.splice( pos, 1 );\n\n            //          const parent = node.parent;\n            //          let children = parent.data.children;\n            //\n            //          parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            //\n            //          if ( parent.data.children.length === 0 ) {\n            //              parent.data.hasChildren = false;\n            //          }\n            //\n            //        this.tree.treeModel.update();\n            //this.setNodesOnInit();\n\n            this.refreshAll( this.currentHierarchy );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public manageGeoObjectType( geoObjectType: GeoObjectType, readOnly: boolean ): void {\n\n        this.bsModalRef = this.modalService.show( ManageGeoObjectTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'manage-geoobjecttype-modal'\n        } );\n\n        geoObjectType.attributes.sort(( a, b ) => {\n            if ( a.label.localizedValue < b.label.localizedValue ) return -1;\n            else if ( a.label.localizedValue > b.label.localizedValue ) return 1;\n            else return 0;\n        } );\n        this.bsModalRef.content.geoObjectType = geoObjectType;\n        this.bsModalRef.content.readOnly = readOnly;\n\n        ( <ManageGeoObjectTypeModalComponent>this.bsModalRef.content ).onGeoObjectTypeSubmitted.subscribe( data => {\n\n            let position = this.getGeoObjectTypePosition( data.code );\n            if ( position ) {\n                this.geoObjectTypes[position] = data;\n            }\n        } );\n    }\n\n    private getHierarchyTypePosition( code: string ): number {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let obj = this.hierarchies[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    public addChildAndRootToHierarchy(): void {\n        const that = this;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = \"ROOT\";\n        this.bsModalRef.content.toRoot = true;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public addChildToHierarchy( parent: TreeNode ): void {\n        const that = this;\n        that.current = parent;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = parent;\n        this.bsModalRef.content.toRoot = false;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n            const d = that.current.data;\n\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public deleteTreeNode( node: TreeNode ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + node.data.label + ']';\n        this.bsModalRef.content.data = node;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeTreeNode( data );\n        } );\n    }\n\n    public removeTreeNode( node: TreeNode ): void {\n        this.hierarchyService.removeFromHierarchy( this.currentHierarchy.code, node.parent.data.geoObjectType, node.data.geoObjectType ).then( data => {\n\n            if ( node.parent.data.geoObjectType == null ) {\n                this.nodes = [];\n                // this.refreshAll(null);\n                //return;\n            }\n\n            const parent = node.parent;\n            let children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            if ( parent.data.children.length === 0 ) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n\n            // Update the available GeoObjectTypes\n            this.changeDetectorRef.detectChanges()\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public isActive( item: any ) {\n        return this.currentHierarchy === item;\n    };\n\n    public onDrop( $event: any ) {\n        // Dropped $event.element\n        this.removeTreeNode( $event.element )\n    }\n\n    public allowDrop( element: Element ) {\n        // Return true/false based on element\n        return true;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <loading-bar></loading-bar>\n  \n  <div id=\"app-container\" class=\"container-fluid\">\n  \n  <!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n    \n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.types.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <!-- to filter out already assigned types use this pipe > geoobjecttype:nodes -->\n          <li class=\"list-group-item\" *ngFor=\"let type of geoObjectTypes\">\n            {{type.label.localizedValue}} <i *ngIf=\"type.isLeaf === 'true'\" class=\"fa fa-leaf\" style=\"font-size:15px;cursor:auto;margin-left:5px;\" aria-hidden=\"true\"></i> \n            \n            <span *ngIf=\"isOrganizationRA(type.organizationCode)\">\n              <i class=\"fa fa-times delete-btn clickable pull-right\" *ngIf=\"!excludeGeoObjectTypeDeletes(type)\" (click)=\"deleteGeoObjectType(type)\" [title]=\"'button.delete.helptext' | localize\"></i> \n              <i class=\"fa fa-pencil clickable pull-right\" (click)=\"manageGeoObjectType(type, false)\" [title]=\"'button.edit.helptext' | localize\"></i> \n            </span>\n            \n            <span *ngIf=\"!isOrganizationRA(type.organizationCode)\">\n              <i class=\"fa fa-eye clickable pull-right\" (click)=\"manageGeoObjectType(type, true)\" [title]=\"'button.view.helptext' | localize\"> </i> \n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createGeoObjectType()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n        \n      </div>\n    \n    \n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <li *ngFor=\"let hierarchy of hierarchies;\" class=\"list-group-item clickable\" [ngClass]=\"{active: isActive(hierarchy)}\" (click)=\"hierarchyOnClick($event,hierarchy)\">\n            <i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}} \n\n            <span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\">\n              <i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\" class=\"fa fa-times delete-btn clickable pull-right\" (click)=\"deleteHierarchyType(hierarchy)\" [title]=\"'button.delete.helptext' | localize\"></i> \n              <i class=\"fa fa-pencil pull-right clickable\" (click)=\"editHierarchyType(hierarchy, false)\" [title]=\"'button.edit.helptext' | localize\"> </i>            \n            </span>\n            \n            <span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\">\n              <i class=\"fa fa-eye pull-right clickable\" (click)=\"editHierarchyType(hierarchy, true)\" [title]=\"'button.view.helptext' | localize\"> </i>\n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createHierarchy()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <h3> \n            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n        </h3>\n        <hr>\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n          <div>\n            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n          </div>\n        </div>\n      </div>\n            \n    </div>\n    \n  </div>\n  \n  <context-menu #nodeMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"addChildToHierarchy($event.item)\">\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>\n    </ng-template>\n  </context-menu>\n  \n  <context-menu #leafMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>  {{item?.data.label.localizedValue}}\n    </ng-template>\n  </context-menu>\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { HierarchyType } from '../../../model/hierarchy';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { AuthService } from '../../../../shared/service/auth.service';\n\n\n@Component( {\n    selector: 'create-hierarchy-type-modal',\n    templateUrl: './create-hierarchy-type-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n    \n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n    \n    readOnly: boolean = false;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    constructor( private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"rootGeoObjectTypes\": [],\n            \"organizationCode\": \"\"\n        };\n        \n        this.registryService.getOrganizations().then(orgs => {\n        \n          if (!this.edit && orgs.length === 1)\n          {\n            this.hierarchyType.organizationCode = orgs[0].code;\n          }\n          \n          // Filter out organizations they're not RA's of, unless we're readOnly.\n          if (!this.readOnly)\n          {\n            this.organizations = [];\n            \n            for (var i = 0; i < orgs.length; ++i)\n            {\n              if (this.auth.isOrganizationRA(orgs[i].code))\n              {\n                this.organizations.push(orgs[i]);\n              }\n            }\n          }\n          else\n          {\n            this.organizations = orgs;\n          }\n          \n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n        \n        if (this.readOnly)\n        {\n          this.bsModalRef.hide();\n          return;\n        }\n\n        if ( this.edit ) {\n            this.hierarchyService.updateHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchyService.createHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.description.localeValues\">\n        <label for=\"descriptionInput\">\n          <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n          class=\"form-control\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { HierarchyType, HierarchyNode } from '../../../model/hierarchy';\nimport { GeoObjectType } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\n\n@Component( {\n    selector: 'add-child-to-hierarchy-modal',\n    templateUrl: './add-child-to-hierarchy-modal.component.html',\n    styleUrls: []\n} )\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n\t /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n\n    public hierarchyType: HierarchyType;\n\n    public nodes: HierarchyNode[];\n\n    public allGeoObjectTypes: GeoObjectType[];\n\n    public selectedGeoObjectType: GeoObjectType;\n\n    private selectUndefinedOptionValue: any;\n\n\tprivate toRoot: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) {\n    }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n    \n    onSelect(value: string): void {\n    \tthis.allGeoObjectTypes.forEach(gObj => {\n    \t\tif(gObj.code === value){\n    \t\t\tthis.selectedGeoObjectType = gObj;\n    \t\t}\n    \t})\n    }\n    \n    handleOnSubmit(): void {\n        this.message = null;\n        \n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy( this.hierarchyType.code, parent, this.selectedGeoObjectType.code ).then( data => {\n            this.onNodeChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n        \n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { GeoObjectType } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { Organization } from '../../../../shared/model/core';\nimport { AuthService } from '../../../../shared/service/auth.service';\n\n\n@Component( {\n    selector: 'create-geoobjtype-modal',\n    templateUrl: './create-geoobjtype-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organizations: any = [];\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    constructor( private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"geometryType\": \"MULTIPOINT\",\n            \"isLeaf\": false,\n            \"isGeometryEditable\": true,\n            \"organizationCode\": \"\",\n            \"attributes\": []\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n        \n          if (orgs.length === 1)\n          {\n            this.geoObjectType.organizationCode = orgs[0].code;\n          }\n          \n          // Filter out organizations they're not RA's of\n          this.organizations = [];\n          \n          for (var i = 0; i < orgs.length; ++i)\n          {\n            if (this.auth.isOrganizationRA(orgs[i].code))\n            {\n              this.organizations.push(orgs[i]);\n            }\n          }\n          \n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType( JSON.stringify( this.geoObjectType ) ).then( data => {\n            this.onGeoObjTypeCreate.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <!-- <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}\n      </h1>\n    </div> -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.description.localeValues\">\n          <div>\n            <label>\n              <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n            </label>\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n              class=\"form-control\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required>\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"organization\" [(ngModel)]=\"geoObjectType.organizationCode\" required>\n            <option></option>\n            <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport {  GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, GeoObjectType } from '../../../model/registry';\n\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'manage-geoobjecttype-modal',\n    templateUrl: './manage-geoobjecttype-modal.component.html',\n    styleUrls: ['./manage-geoobjecttype-modal.css']\n} )\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor( public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n      this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe( modalState => {\n            this.modalState = modalState;\n      });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy(){\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the \n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next( data );\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<form >\n     \n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n  \n  <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\"></manage-attributes-modal>\n  \n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" ></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" ></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n \n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\" ></edit-term-option-input>\n \n</form>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'geoobjecttype-input',\n    templateUrl: './geoobjecttype-input.component.html',\n    styleUrls: ['./geoobjecttype-input.css']\n} )\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange:  EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n    \n    @Input('setGeoObjectType') \n    set in(geoObjectType: GeoObjectType){\n        if(geoObjectType){\n          this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        //   this.geoObjectType = geoObjectType;\n        }\n    }\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizationService: LocalizationService, private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n    }\n\n    ngAfterViewInit() {\n    }\n\n    ngOnDestroy(){\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType( this.editGeoObjectType ).then( geoObjectType => {\n\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n        \n        // return false;\n\n        return true;\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.editGeoObjectType.title\"></localize>\n                {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.organizationCode\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group list-group-flush\">\n                                <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li>\n                            </ul>\n\n                            <button [disabled]=\"readOnly\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\">\n                                <localize key=\"modal.button.manageAttributes\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n\n@Component( {\n    selector: 'manage-attributes-modal',\n    templateUrl: './manage-attributes-modal.component.html',\n    styleUrls: ['./manage-attributes-modal.css']\n} )\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy(){\n      this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    editAttribute(attr: Attribute, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":attr, \"termOption\":\"\"})\n    }\n\n    removeAttributeType(attr: Attribute, e: any): void {\n\n      this.confirmBsModalRef = this.modalService.show( ConfirmModalComponent, {\n\t\t  animated: true,\n\t\t  backdrop: true,\n\t\t  ignoreBackdropClick: true,\n\t  } );\n\t  this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + attr.label.localizedValue + ']';\n      this.confirmBsModalRef.content.data = {'attributeType': attr, 'geoObjectType': this.geoObjectType};\n      this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n\t  ( <ConfirmModalComponent>this.confirmBsModalRef.content ).onConfirm.subscribe( data => {\n          this.deleteAttributeType( data.geoObjectType.code, data.attributeType );\n\t  } );\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: Attribute): void {\n\n          this.registryService.deleteAttributeType( geoObjectTypeCode, attr.code ).then( data => {\n            this.onDeleteAttribute.next( data );\n\n            if(data){\n              this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            title=\"<localize key='modal.button.edit'></localize>\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            title=\"<localize key='modal.button.remove'></localize>\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, AttributeTerm, AttributeDecimal, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\n \n\n@Component( {\n    selector: 'define-attribute-modal-content',\n    templateUrl: './define-attribute-modal-content.component.html',\n    styleUrls: ['./define-attribute-modal-content.css']\n} )\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    message: string = null;\n    newAttribute: Attribute = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.create.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n\n    constructor( \n\t    public bsModalRef: BsModalRef, \n        private modalStepIndicatorService: ModalStepIndicatorService, \n        private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizeService: LocalizationService,\n        private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n        if(this.attributeInputComponent){\n            this.attributeInputComponent.animate();\n        }\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.addAttributeType( this.geoObjectType.code, this.newAttribute ).then( data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    setAttribute(type:string): void {\n        if(type === 'term'){\n            this.newAttribute = new AttributeTerm(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else if(type === 'float') {\n            this.newAttribute = new AttributeDecimal(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else{\n            this.newAttribute = new Attribute(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        \n        let isAttrValid: boolean = false;\n        \n        if(this.attributeInputComponent){\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n        \n        if(isAttrValid){\n            return true;\n        }\n\n        return false;\n    }\n    \n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from '@angular/forms';\n\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator() : ValidatorFn {\n  return (c: AbstractControl) => {\n    if(c.value){\n        let isValid = c.value.indexOf(\" \") === -1;\n        \n        if(isValid) {\n            return null;\n        } else {\n            return {\n                geoObjectAttributeCode: {\n                     valid: false\n                }\n            };\n        }\n    }\n\n  }\n}\n\n\n@Directive({\n  selector: '[geoObjectAttributeCode][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n  ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n  validator: ValidatorFn;\n  \n  constructor() {\n    this.validator = validateGeoObjectAttributeCodeValidator();\n  }\n  \n  validate(c: FormControl) {\n    return this.validator(c);\n  }\n  \n}","import { Component, OnInit, ViewChild, Input } from '@angular/core';\nimport {\n\ttrigger,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\n\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\n\nimport { AttributeInputComponent } from '../geoobjecttype-management/attribute-input.component';\n\n\n\n@Component({\n\tselector: 'edit-attribute-modal-content',\n\ttemplateUrl: './edit-attribute-modal-content.component.html',\n\tstyleUrls: ['./edit-attribute-modal-content.css']\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: Attribute;\n\tmessage: string = null;\n\tmodalState: ManageGeoObjectTypeModalState = { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" };\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": true }\n\t\t]\n\t};\n\n\t@ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n\tconstructor(public bsModalRef: BsModalRef,\n\t\tprivate modalStepIndicatorService: ModalStepIndicatorService,\n\t\tprivate geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate localizeService: LocalizationService,\n\t\tprivate registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\thandleOnSubmit(): void {\n\n\t\tthis.registryService.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n\n\t\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n\t\t\t\tlet attr = this.geoObjectType.attributes[i];\n\t\t\t\tif (attr.code === data.code) {\n\t\t\t\t\tObject.assign(attr, data);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tisFormValid(): boolean {\n\n\t\t// let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n\t\t// if(isAttrValid){\n\t\t//     return true;\n\t\t// }\n\n\t\t// return false;\n\t\treturn true\n\t}\n\n\tcancel(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\tback(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageAttributes, \"attribute\": \"\", \"termOption\": \"\" })\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n            \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n                    \n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>                    \n                </div>\n                \n                \n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { GeoObjectType, AttributeTerm, GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, Term} from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component( {\n    selector: 'term-option-widget',\n    templateUrl: './term-option-widget.component.html',\n    styleUrls: ['./term-option-widget.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms')),\n              transition('show => none', animate('100ms'))\n        ]),\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    state: string = 'none';\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy(){\n    \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n            \n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n            \n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\": \"\"})\n\n    }    \n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectType, AttributeTerm, Term, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\n@Component( {\n    selector: 'manage-term-options',\n    templateUrl: './manage-term-options.component.html',\n    styleUrls: ['./manage-term-options.css'],\n    animations: [\n        trigger( 'toggleInputs', [\n            state( 'none, void',\n                style( { 'opacity': 0 } )\n            ),\n            state( 'show',\n                style( { 'opacity': 1 } )\n            ),\n            transition( 'none => show', animate( '300ms' ) ),\n            transition( 'show => none', animate( '100ms' ) )\n        ] ),\n        trigger( 'openClose',\n            [\n                transition(\n                    ':enter', [\n                        style( { 'opacity': 0 } ),\n                        animate( '500ms', style( { 'opacity': 1 } ) )\n                    ]\n                ),\n                transition(\n                    ':leave', [\n                        style( { 'opacity': 1 } ),\n                        animate( '0ms', style( { 'opacity': 0 } ) ),\n\n                    ]\n                )]\n        )\n    ]\n} )\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    termOption: Term;\n    state: string = 'none';\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        \"steps\": [\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.geoobjecttype\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.attributes\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.edit.attribute\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.term.options\" ), \"active\": true, \"enabled\": true }\n        ]\r\n    };\n\n    constructor( public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig( this.modalStepConfig );\n        this.termOption = new Term( \"\", this.localizeService.create(), this.localizeService.create() );\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone( event: AnimationEvent ): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if ( this.termOption.code && this.termOption.code.length > 0 ) {\n\n            // If code has a space\n            if ( this.termOption.code.indexOf( \" \" ) !== -1 ) {\n                return false;\n            }\n\n            // If label is only spaces\n            for(let i = 0; i < this.termOption.label.localeValues.length; i++) {\n              if ( this.termOption.label.localeValues[i].value.replace( /\\s/g, '' ).length === 0 ) {\n                return false\n              }                \n            }\n            \n\n            return true;\n        }\n        else if ( this.termOption.code && this.termOption.code.indexOf( \" \" ) !== -1 ) {\n            return false;\n        }\n\n        return false\n    }\n\n    addTermOption(): void {\n\n        this.registryService.addAttributeTermTypeOption( this.attribute.rootTerm.code, this.termOption ).then( data => {\n\n            this.attribute.rootTerm.children.push( data );\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n    deleteTermOption( termOption: Term ): void {\n\n        this.registryService.deleteAttributeTermTypeOption( this.attribute.rootTerm.code, termOption.code ).then( data => {\n\n            if ( this.attribute.rootTerm.children.indexOf( termOption ) !== -1 ) {\n                this.attribute.rootTerm.children.splice( this.attribute.rootTerm.children.indexOf( termOption ), 1 );\n            }\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    removeTermOption( termOption: Term ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + '[' + termOption.label + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.deleteTermOption( termOption );\n        } );\n    }\n\n    editTermOption( termOption: Term ): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editTermOption, \"attribute\": this.attribute, \"termOption\": termOption } )\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" } )\n    }\n\n    error( err: HttpErrorResponse ): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option, $event)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option, $event)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport {\n\ttrigger,\n\tstyle,\n\tanimate,\n\ttransition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, AttributeTerm, Term, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\n\n@Component({\n\tselector: 'edit-term-option-input',\n\ttemplateUrl: './edit-term-option-input.component.html',\n\tstyleUrls: [],\n\tanimations: [\n\t\ttrigger('openClose',\n\t\t\t[\n\t\t\t\ttransition(\n\t\t\t\t\t':enter', [\n\t\t\t\t\tstyle({ 'opacity': 0 }),\n\t\t\t\t\tanimate('500ms', style({ 'opacity': 1 }))\n\t\t\t\t]\n\t\t\t\t),\n\t\t\t\ttransition(\n\t\t\t\t\t':leave', [\n\t\t\t\t\tstyle({ 'opacity': 1 }),\n\t\t\t\t\tanimate('0ms', style({ 'opacity': 0 })),\n\n\t\t\t\t]\n\t\t\t\t)]\n\t\t)\n\t]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n\t@Input() geoObjectType: GeoObjectType;\n\t@Input() attribute: AttributeTerm;\n\t@Input() termOption: Term;\n\n\tmessage: string = null;\n\tmodalState: ManageGeoObjectTypeModalState = { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" };\n\tmodalStepConfig: StepConfig = {\n\t\t\"steps\": [\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\": true, \"enabled\": false },\n\t\t\t{ \"label\": this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), \"active\": true, \"enabled\": true }\n\n\t\t]\n\t};\n\n\tconstructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n\t\tprivate localizeService: LocalizationService, private registryService: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\t}\n\n\tngAfterViewInit() {\n\n\t}\n\n\tngOnDestroy() {\n\t}\n\n\thandleOnSubmit(): void {\n\n\t\tthis.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n\t\t\tthis.geoObjectTypeManagementService.setModalState({ \"state\": GeoObjectTypeModalStates.manageTermOption, \"attribute\": this.attribute, \"termOption\": data })\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tisFormValid(): boolean {\n\t\t// let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n\t\t// if(isAttrValid){\n\t\t//     return true;\n\t\t// }\n\n\t\t// return false;\n\t\treturn true\n\t}\n\n\tcancel(): void {\n\t\tthis.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\": this.attribute, \"termOption\": \"\" })\n\t}\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a (click)=\"toggle()\"> <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span *ngIf=\"show\">\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-page',\n    templateUrl: './data-page.component.html',\n    styleUrls: ['./data-page.css']\n} )\nexport class DataPageComponent implements OnInit {\n\n\tcontent: string = \"SPREADSHEET\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SPREADSHEET\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n\t\t}\n\t\telse if(content === \"SHAPEFILE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"shapefile.title\");\n\t\t}\n\t\telse if(content === \"EXPORT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"io.export.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">Import spreadsheet</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">Import shapefile</a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { SpreadsheetModalComponent } from './modals/spreadsheet-modal.component';\nimport { ShapefileModalComponent } from './modals/shapefile-modal.component';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { ExternalSystemService } from '../../../shared/service/external-system.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ImportStrategy } from '../../model/registry';\nimport { ExternalSystem } from '../../../shared/model/core';\n\ndeclare var acp: string;\n\n@Component({\n\n\tselector: 'dataimporter',\n\ttemplateUrl: './dataimporter.component.html',\n\tstyleUrls: ['./dataimporter.css']\n})\nexport class DataImporterComponent implements OnInit {\n\n\tshowImportConfig: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n\timportStrategy: ImportStrategy;\n\timportStrategies: any[] = [\n\t\t{ \"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n\t\t{ \"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n\t\t{ \"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n\t]\n\n    /*\n     * Currently selected code\n     */\n\tcode: string = null;\n\n    /*\n     * Currently start date\n     */\n\tstartDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n\tuploader: FileUploader;\n\n\t@ViewChild('myFile')\n\tfileRef: ElementRef;\n\n\t@Input()\n\tformat: string; // Can be SHAPEFILE or EXCEL\n\n\tisExternal: boolean = false;\n\n\t/*\n\t * List of available external systems (filtered based on user's org)\n\t */\n\texternalSystems: ExternalSystem[];\n\n\t/*\n\t * currently selected external system.\n\t */\n\texternalSystemId: string;\n\n\tisLoading: boolean = true;\n\n\tconstructor(private service: IOService,\n\t\tprivate eventService: EventService,\n\t\tprivate modalService: BsModalService,\n\t\tprivate localizationService: LocalizationService,\n\t\tprivate authService: AuthService,\n\t\tprivate sysService: ExternalSystemService\n\t) { }\n\n\tngOnInit(): void {\n\t\tthis.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n\n\t\t\tthis.externalSystems = paginatedSystems.resultSet;\n\n\t\t\tif (this.externalSystems.length === 0) {\n\t\t\t\tthis.isExternal = false;\n\t\t\t\tthis.showImportConfig = true; // Show the upload widget if there are no external systems registered\n\t\t\t}\n\n\t\t\tthis.isLoading = false;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tthis.service.listGeoObjectTypes(true).then(types => {\n\n\t\t\tvar myOrgTypes = [];\n\t\t\tfor (var i = 0; i < types.length; ++i) {\n\t\t\t\tlet type = types[i];\n\t\t\t\t\n\t\t\t\tif (this.authService.isOrganizationRA(type.orgCode) || this.authService.isGeoObjectTypeRM(type.orgCode, type.code)) {\n\t\t\t\t\tmyOrgTypes.push(types[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.types = myOrgTypes;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tvar getUrl = acp + '/excel/get-configuration';\n\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\tgetUrl = acp + '/shapefile/get-shapefile-configuration';\n\n\t\t\t//this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n\t\t}\n\n\t\tlet options: FileUploaderOptions = {\n\t\t\tqueueLimit: 1,\n\t\t\tremoveAfterUpload: true,\n\t\t\turl: getUrl\n\t\t};\n\n\t\tthis.uploader = new FileUploader(options);\n\n\t\tthis.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n\t\t\tform.append('type', this.code);\n\n\t\t\tif (this.startDate != null) {\n\t\t\t\tform.append('startDate', this.startDate);\n\t\t\t}\n\t\t\tif (this.importStrategy) {\n\t\t\t\tform.append('strategy', this.importStrategy)\n\t\t\t}\n\t\t};\n\t\tthis.uploader.onBeforeUploadItem = (fileItem: any) => {\n\t\t\tthis.eventService.start();\n\t\t};\n\t\tthis.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n\t\t\tthis.fileRef.nativeElement.value = \"\";\n\t\t\tthis.eventService.complete();\n\t\t};\n\t\tthis.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst configuration = JSON.parse(response);\n\n\t\t\tconfiguration.isExternal = this.isExternal;\n\n\t\t\tlet externalSystem: ExternalSystem = null;\n\t\t\tfor (let i = 0; i < this.externalSystems.length; ++i) {\n\t\t\t\tlet sys: ExternalSystem = this.externalSystems[i];\n\n\t\t\t\tif (sys.oid === this.externalSystemId) {\n\t\t\t\t\texternalSystem = sys;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconfiguration.externalSystemId = this.externalSystemId;\n\t\t\tconfiguration.externalSystem = externalSystem;\n\n\t\t\tif (this.format === \"SHAPEFILE\") {\n\t\t\t\tthis.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.configuration = configuration;\n\t\t};\n\t\tthis.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst error = JSON.parse(response)\n\n\t\t\tthis.error({ error: error });\n\t\t}\n\t}\n\n\tonClick(): void {\n\n\t\tif (this.uploader.queue != null && this.uploader.queue.length > 0) {\n\t\t\tthis.uploader.uploadAll();\n\t\t}\n\t\telse {\n\t\t\tthis.error({\n\t\t\t\tmessage: this.localizationService.decode('io.missing.file'),\n\t\t\t\terror: {},\n\t\t\t});\n\t\t}\n\t}\n\n\tsetImportSource(event, type): void {\n\t\tif (type === \"EXTERNAL\") {\n\t\t\tthis.isExternal = true;\n\t\t}\n\t\telse {\n\t\t\tthis.isExternal = false;\n\t\t}\n\t}\n\n\tonNext(): void {\n\t\tthis.showImportConfig = true;\n\t}\n\n\tonBack(): void {\n\t\tthis.showImportConfig = false;\n\t}\n\n\n\tpublic error(err: any): void {\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"types\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                    <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n                    <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\">\n                        <localize key=\"io.back\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListByOrg } from '../../model/registry';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { PublishModalComponent } from './publish-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-manager',\n\ttemplateUrl: './master-list-manager.component.html',\n\tstyleUrls: ['./master-list-manager.css']\n})\nexport class MasterListManagerComponent implements OnInit {\n\tmessage: string = null;\n\torgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.service.getMasterListsByOrg().then(response => {\n\t\t\tthis.orgs = response.orgs;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonCreate(org: MasterListByOrg): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.init(org);\n\t\tthis.bsModalRef.content.isNew = true;\n\t\tthis.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n\t\t\tconst obj = {\n\t\t\t\tlabel: list.displayLabel.localizedValue,\n\t\t\t\toid: list.oid,\n\t\t\t\tcreateDate: list.createDate,\n\t\t\t\tlastUpdateDate: list.lastUpdateDate,\n\t\t\t\tadmin: list.admin,\n\t\t\t\tisMaster: list.isMaster\n\t\t\t};\n\n\t\t\torg.lists.push(obj);\n\t\t});\n\t}\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-view/', code])\n\t}\n\n\tonEdit(pair: { label: string, oid: string }): void {\n\t\tthis.service.getMasterList(pair.oid).then(list => {\n\n\t\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tthis.bsModalRef.content.edit = true;\n\t\t\tthis.bsModalRef.content.master = list;\n\t\t\tthis.bsModalRef.content.isNew = false;\n\t\t\tthis.bsModalRef.content.onMasterListChange.subscribe(ret => {\n\t\t\t\tpair.label = ret.displayLabel.localizedValue;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + list.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = \"danger\";\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterList(list.oid).then(response => {\n\t\t\t\torg.lists = org.lists.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== list.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.admin\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\n\n@Component( {\n    selector: 'export-format-modal',\n    templateUrl: './export-format-modal.component.html',\n    styleUrls: []\n} )\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next( this.format );\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ChangeRequest, PageEvent, AbstractAction, AddChildAction, SetParentAction, CreateGeoObjectAction, RemoveChildAction, UpdateGeoObjectAction } from '../../model/crtable';\n\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ActionDetailModalComponent } from './action-detail/action-detail-modal.component'\n\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\n@Component( {\n\n    selector: 'request-table',\n    templateUrl: './request-table.component.html',\n    styleUrls: ['./request-table.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class RequestTableComponent {\n\n\tobjectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n\trequests: ChangeRequest[] = [];\n\n\tactions: AbstractAction[] | SetParentAction[] | AddChildAction[] | CreateGeoObjectAction[] | RemoveChildAction[] | UpdateGeoObjectAction[];\n\n\tcolumns: any[] = [];\n\t\n\ttoggleId: string;\n\n\tfilterCriteria: string = 'ALL';\n\n    constructor( private service: ChangeRequestService, private modalService: BsModalService, private localizationService: LocalizationService ) {\n        this.columns = [\n            { name: localizationService.decode( 'change.request.user' ), prop: 'createdBy', sortable: false },\n            { name: localizationService.decode( 'change.request.createDate' ), prop: 'createDate', sortable: false, width: 195 },\n            { name: localizationService.decode( 'change.request.status' ), prop: 'approvalStatus', sortable: false }\n        ];\n\n        this.refresh();\n    }\n\n    refresh(): void {\n\n            this.service.getAllRequests(\"ALL\").then( requests => {\n\n\t\t\t\tthis.requests = requests;\n\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } )\n\n    }\n\n\n    onSelect( selected: any ): void {\n\n\t\t// this.request = selected.selected;\n\n        this.service.getAllActions( selected.selected[0].oid ).then(actions => {\n\t\t\t\n\t\t\tthis.actions = actions;\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.execute( changeRequest.oid ).then( request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n\t}\n\t\n\t// onConfirmChangeRequest(request: any): void {\n\n    //     if ( request != null ) {\n    //         this.service.confirmChangeRequest( request.oid ).then( request => {\n    //             this.request = request;\n\n    //             // TODO: Determine if there is a way to update an individual record\n    //             this.refresh();\n    //         } ).catch(( response: HttpErrorResponse ) => {\n    //             this.error( response );\n    //         } );\n    //     }\n\t// }\n\t\n\tapplyActionStatusProperties(action: any ): void {\n\t\t// var action = JSON.parse(JSON.stringify(this.action));\n\t\t// action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n\t\tthis.service.applyActionStatusProperties(action).then( response => {\n\t\t\t// this.crtable.refresh()\n\t\t} ).catch(( err: HttpErrorResponse ) => {\n\t\t\tthis.error( err );\n\t\t} );\n\t}\n\n    onApproveAll(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.approveAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    onRejectAll(changeRequest: ChangeRequest): void {\n        if ( changeRequest != null ) {\n            this.service.rejectAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n\n                // TODO: Determine if there is a way to update an individual record\n                // this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\t}\n\t\n\trequestTrackBy(index: number, request: ChangeRequest) {\n    \treturn request.oid;\n\t}\n\t\n\ttoggle(event: any, oid: string): void {\n\n\t\tif(!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")){\n\t\t\tif(this.toggleId === oid){\n\t\t\t\tthis.toggleId = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggleId = oid;\n\t\t\t\tthis.onSelect({selected:[{oid:oid}]});\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(criteria: string): void {\n\n\t\t   this.service.getAllRequests(criteria).then( requests => {\n\t\t\t\tthis.requests = requests;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n\t\t\t} )\n\t\t\t\n\t\tthis.filterCriteria = criteria;\n\t}\n\n\tsetActionStatus(action: AbstractAction, status:string): void {\n\t\taction.approvalStatus = status;\n\n\t\tthis.applyActionStatusProperties(action);\n\t}\n\n\tgetActiveDetailComponent(action: AbstractAction) : any {\n      // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n      if (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\n      {\n        // return this.cuDetail;\n      }\n    //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n    //   {\n    //     return this.arDetail;\n\t//   }\n\t\n\t  return action;\n\t}\n\t\n    showActionDetail( action: any ) {\n\n\t\tthis.bsModalRef = this.modalService.show( ActionDetailModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\t\tthis.bsModalRef.content.curAction = action;\n      \n    //   var detail = this.getActiveDetailComponent();\n    //   if (detail != null)\n    //   {\n        // action.onSelect(action);\n    //   }\n    }\n\n}\n","<!-- <div class=\"row text-center\">\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"change.request.title\"></localize>\n        </h2>\n    </div>\n</div> -->\n\n<!-- <div class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            <localize key=\"change.request.table.title\"></localize>\n        </h3>\n    </div>\n</div> -->\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\t\t<div class=\"form-group button-row\">\n\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" >\n\t\t\t\t<localize key=\"change.request.all.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.pending.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.accepted.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;\" >\n\t\t\t\t<localize key=\"change.request.rejected.filter.link\"></localize>\n\t\t\t</a>\n\n\t\t</div>\n\n\t\t<hr style=\"border-top:solid 3px #6BA542\" />\n\n\t</div>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\n\t<table class=\"table\">\n\t\t<thead>\n\t\t\t<tr style=\"height: 50px;color: grey;\">\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n\t\t\t\t<!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n        <tbody>\n\t\t\t<ng-template ngFor let-req [ngForOf]=\"requests\" [ngForTrackBy]=\"requestTrackBy\">\n\t\t\t\t<tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n                \t<td class=\"col-md-4\">\n\t\t\t\t\t\t<h5><strong>{{req.createdBy}}</strong></h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n\t\t\t\t\t\t {{req.createDate}}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\">\n\t\t\t\t\t\t<h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n\t\t\t\t\t\t\t <strong>{{req.approvalStatus}}</strong>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!-- <td class=\"col-md-3\">\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onConfirmChangeRequest(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t</button>\t\n\t\t\t\t\t</td> -->\n\t\t\t\t\t<td class=\"col-md-1\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\">\n            \t\t<td colspan=\"5\" >\n\n\t\t\t\t\t\t<div class=\"row\" style=\"margin:0;\">\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\n\t\t\t\t\t\t\t\t<div *ngFor=\"let action of actions\" class=\"action-card\" [ngClass]=\"{'status-pending-container':action.approvalStatus === 'PENDING', 'status-accepted-container':action.approvalStatus === 'ACCEPTED', 'status-rejected-container':action.approvalStatus === 'REJECTED'}\" style=\"margin-bottom:10px; background-color:white;\"> \n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"margin:0; padding-top:5px; padding-bottom:5px;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-3\" style=\"border-right:2px grey solid; height:50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-circle\" style=\"float:left; line-height: 50px;\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"vertical-center\" style=\"margin:0; float:left; padding-left:20px;\">{{req.createdBy}}</h4>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" style=\"height: 50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"fa fa-refresh vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"fa fa-plus vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"fa fa-link vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"fa fa-chain-broken vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Update <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ]</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Create <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ] </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.SetParentAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set parents of <b>{{action.childCode}}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set <b>{{action.childTypeCode}}</b> as a child of <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Remove <b>{{action.childTypeCode}}</b> from <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-4\" style=\"height: 50px;text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t\t<h4 *ngIf=\"req.approvalStatus !== 'PENDING'\" class=\"vertical-center\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" style=\"margin: 0;\">{{action.approvalStatus}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'ACCEPTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'ACCEPTED')\" class=\"btn btn-primary vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.accept.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'ACCEPTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'REJECTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'REJECTED')\" class=\"btn btn-danger vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.reject.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'REJECTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'PENDING'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'PENDING')\" class=\"btn btn-warning vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.pending.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'PENDING'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"height: 150px;border-top: 1px grey solid;margin:0;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.contributorNotes\" readonly=\"true\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.maintainerNotes\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-2\" style=\"height:100%;\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" (click)=\"showActionDetail(action)\" class=\"btn btn-default vertical-center\" style=\"width:100%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.action.details.label\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> <!-- END action-card -->\n\n\t\t\t\t\t\t\t\t<!-- <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\">Change Request Notes</label>\n\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" value=\"\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t</div>\t -->\n\n\t\t\t\t\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onApproveAll(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll(req)\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\t\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.changes.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</td>\n        \t\t</tr>\n\t\t\t</ng-template>\n        </tbody>\n\t</table>\n\t</div>\t \n</div>\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component( {\n    selector: 'action-detail-modal',\n    templateUrl: './action-detail-modal.component.html',\n    styleUrls: []\n} )\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    @ViewChild( \"cuDetail\" ) cuDetail: ActionDetailComponent;\n    @ViewChild( \"arDetail\" ) arDetail: ActionDetailComponent;\n    @ViewChild( \"spDetail\" ) spDetail: ActionDetailComponent;\n\n    @Input()\n    set curAction( action: any ) {\n        this.action = action;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if ( this.cuDetail != null ) {\n            this.cuDetail.endEdit();\n        }\n\n        if ( this.arDetail != null ) {\n            this.arDetail.endEdit();\n        }\n\n        if ( this.spDetail != null ) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit, Input, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\n\nimport { GeoObjectType, Attribute, ValueOverTime, GeoObjectOverTime, AttributeTerm, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component( {\n    selector: 'manage-versions-modal',\n    templateUrl: './manage-versions-modal.component.html',\n    styleUrls: ['./manage-versions-modal.css'],\n    host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger( 'fadeInOut', [\n                transition( 'void => *', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] ),\n                transition( '* => void', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] )\n            ] )\n        ]]\n} )\nexport class ManageVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    readonly: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onAttributeVersionChange: Subject<GeoObjectOverTime>;\n\n    @Input() attribute: Attribute;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObjectOverTime: GeoObjectOverTime;\n\n    goGeometries: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    newVersion: ValueOverTime;\n\n    editingGeometry: number = -1;\n\n    hasDuplicateDate: boolean = false;\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService,\n        public bsModalRef: BsModalRef, public changeDetectorRef: ChangeDetectorRef ) { }\n\n    ngOnInit(): void {\n\n        this.onAttributeVersionChange = new Subject();        \n    }\n\n    tfInit(): void {\n      if ( this.attribute.code === 'geometry' && this.geoObjectOverTime.attributes[this.attribute.code].values.length === 1 ) {\n        this.editingGeometry = 0;\n      }\n    }\n    \n    geometryChange(vAttribute, event): void {\n      vAttribute.value = event;\n    }\n\n    onDateChange( event: any, vAttribute: ValueOverTime ): any {\n\n        //        console.log( event.currentTarget.value );\n        //\n        //        let dt = new Date( event.currentTarget.value );\n        //let dt = new Date(event);\n\n        let vAttributes = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        //        vAttribute.startDate = Utils.formatDateString( dt );\n\n        this.snapDates( vAttributes );\n\n        //        this.changeDetectorRef.detectChanges();\n    }\n\n    snapDates( votArr: ValueOverTime[] ): void {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data by start date \n        votArr.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n        for ( let i = 1; i < votArr.length; i++ ) {\n            let prev = votArr[i - 1];\n            let current = votArr[i];\n\n            if ( current.startDate ) {\n                prev.endDate = Utils.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n            }\n            else {\n                prev.endDate = PRESENT;\n            }\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( votArr.length > 0 ) {\n            votArr[votArr.length - 1].endDate = PRESENT;\n        }\n    }\n\n    onAddNewVersion(): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null;  // Utils.formatDateString(new Date());\n        vot.endDate = null;  // Utils.formatDateString(new Date());\n\n        if ( this.attribute.type === \"local\" ) {\n            //   vot.value = {\"localizedValue\":null,\"localeValues\":[{\"locale\":\"defaultLocale\",\"value\":null},{\"locale\":\"km_KH\",\"value\":null}]};\n            vot.value = this.lService.create();\n        }\n        else if ( this.attribute.type === 'geometry' ) {\n\n            if ( votArr.length > 0 ) {\n                if ( this.editingGeometry != -1 && this.editingGeometry != null ) {\n                    vot.value = votArr[this.editingGeometry].value;\n                }\n                else {\n                    vot.value = votArr[0].value;\n                }\n            }\n            else {\n                vot.value = { \"type\": this.geoObjectType.geometryType, \"coordinates\": [] };\n\n                if ( this.geoObjectType.geometryType === \"MULTIPOLYGON\" ) {\n                    vot.value.type = \"MultiPolygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POLYGON\" ) {\n                    vot.value.type = \"Polygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POINT\" ) {\n                    vot.value.type = \"Point\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTIPOINT\" ) {\n                    vot.value.type = \"MultiPoint\";\n                }\n                else if ( this.geoObjectType.geometryType === \"LINE\" ) {\n                    vot.value.type = \"Line\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTILINE\" ) {\n                    vot.value.type = \"MultiLine\";\n                }\n            }\n        }\n        else if ( this.attribute.type === 'term' ) {\n            var terms = this.getGeoObjectTypeTermAttributeOptions( this.attribute.code );\n\n            if ( terms.length > 0 ) {\n                vot.value = terms[0].code;\n            }\n        }\n\n        votArr.push( vot );\n\n        if ( this.attribute.code === 'geometry' ) {\n            this.editingGeometry = votArr.length - 1;\n        }\n\n        this.snapDates( votArr );\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    editGeometry( index: number ) {\n        this.editingGeometry = index;\n    }\n\n    getVersionData( attribute: Attribute ) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach( vAttribute => {\n            vAttribute.value.localeValues.forEach( val => {\n                versions.push( val );\n            } )\n        } )\n        return versions;\n    }\n\n    getDefaultLocaleVal( locale: any ): string {\n        let defVal = null;\n\n        locale.localeValues.forEach( locVal => {\n            if ( locVal.locale === 'defaultLocale' ) {\n                defVal = locVal.value;\n            }\n\n        } )\n\n        return defVal;\n    }\n\n    setDateAttribute( vot: ValueOverTime, val: string ): void {\n        vot.value = new Date( val ).getTime().toString()\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if ( attrOpts.length > 0 ) {\n                    if ( attr.code === \"status\" ) {\n                        return Utils.removeStatuses(attrOpts);\n                    }\n                    else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    remove( version: any ): void {\n\n        let val = this.geoObjectOverTime.attributes[this.attribute.code];\n\n        for ( let i = 0; i < val.values.length; i++ ) {\n            let vals = val.values[i];\n\n            if ( vals.startDate === version.startDate ) {\n                val.values.splice( i, 1 );\n            }\n        }\n\n        this.snapDates( val.values );\n    }\n\n    isChangeOverTime( attr: Attribute ): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach( attribute => {\n            if ( this.attribute.code === attr.code ) {\n                isChangeOverTime = attr.isChangeOverTime\n            }\n        } )\n\n        return isChangeOverTime;\n    }\n\n    onSubmit(): void {\n\n        this.onAttributeVersionChange.next( this.geoObjectOverTime );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #versionsform=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\">\n\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"width: 100%;border: none;\">\n                    <div *ngIf=\"geoObjectOverTime\" >\n\n                        <div class=\"panel\" style=\"box-shadow: none;\">\n                            <div class=\"panel-body\">\n                                <ul class=\"list-group\">\n                                    <!-- <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> -->\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        \n                                        <div *ngIf=\"attribute.type !== 'geometry'\">\n                                                <table class=\"table table-striped\"> \n                                                    <thead style=\"font-size: 14px;\"> \n                                                        <tr> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                            <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                            <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                                        </tr> \n                                                    </thead> \n\n                                                    <tbody *ngIf=\"attribute.type === 'local'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\" >\n                                                            <td >\n                                                                <table style=\"width: 100%;\">\n                                                                    <tr *ngFor=\"let loc of vAttribute.value.localeValues; let idx = index;\" > \n                                                                        <td style=\"vertical-align: bottom; width: 35%;padding: 0; padding-top:5px;\">\n                                                                            <h5>{{loc.locale}}</h5>\n                                                                            <input type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"loc.value = $event\" [required]=\"loc.locale === 'defaultLocale'\">\n                                                                            <div class=\"form-input-validation-error-message-wrapper\">\n                                                                                <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">Value is required.</p>\n                                                                            </div>\n                                                                        </td> \n                                                                    </tr>\n                                                                </table>\n                                                            </td>\n\n                                                            <td style=\"width: 35%;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate_' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                                <div class=\"form-input-validation-error-message-wrapper\">\n                                                                    <p *ngIf=\"!vAttribute.startDate\" class=\"error-message\">Start date is required.</p>\n                                                                </div>\n                                                            </td> \n                                                            <td style=\"width: 20%;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle; width: 10%;padding: 5px; text-align: center;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n\n                                                    <!-- TODO: This isn't getting the options on load -->\n                                                    <tbody *ngIf=\"attribute.type === 'term'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                <!-- <h5>{{loc.locale}}</h5> -->\n                                                                <!-- <input type=\"text\" class=\"form-control\" id=\"loc-val-{{i}}\" name=\"loc-val-{{i}}\" [(ngModel)]=\"version.value\" (ngModelChange)=\"version.value = $event\"> -->\n                                                                <select id=\"mod-{{attribute.code}}\" [name]=\"'mod-term-' + i + '-' + attribute.code\" class=\"select-area\" style=\"float:none;\" [(ngModel)]=\"vAttribute.value\">\n                                                                    <option value=\"\" ></option>\n                                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attribute.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                                </select>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'character'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'date'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"date\" class=\"form-control\" [name]=\"'char-val-' + i\" [ngModel]=\"vAttribute.value | date:'yyyy-MM-dd'\" (ngModelChange)=\"setDateAttribute(vAttribute, $event)\" required> \n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'boolean'\">\n\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === true\" [value]=\"true\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\">\n                                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                                </label>\n\n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === false\"  [value]=\"false\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\">\n                                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                                </label>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n\n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'float'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'integer'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n                                            </table>\n                                        </div> \n\n                                        <div *ngIf=\"attribute.type === 'geometry'\">\n                                           <table class=\"table table-striped\">\n                                             <thead style=\"font-size: 14px;\">\n                                               <th style=\"width:60%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                               <th style=\"width:20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                               <th style=\"width:10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                               <th style=\"width: 10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                             </thead>\n                                             <tbody style=\"text-align: center;\">\n                                               <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\">\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <button *ngIf=\"this.editingGeometry != i\" class=\"btn\" (click)=\"editGeometry(i)\" role=\"button\"><localize key=\"changeovertime.manageVersions.geometry.edit\"></localize></button>\n                                                   <geoobject-editor-map *ngIf=\"this.editingGeometry === i\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" (geometryChange)=\"this.geometryChange(vAttribute, $event);\" [readOnly]=\"!geoObjectType.isGeometryEditable\" [postGeometry]=\"vAttribute.value\" [bboxCode]=\"this.geoObjectOverTime.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"vAttribute.startDate\"></geoobject-editor-map>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <input type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                 </td>\n                                               </tr>\n                                              </tbody>\n                                          </table>\n                                        </div>\n\n                                    </li>\n\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\">\n                                            <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                                        </i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none;width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button> -->\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!versionsform.valid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n\t      var newArray = [];\n\t      \n\t      for ( var i = 0; i < arr.length; ++i ) {\n\t        if (! (arr[i].code === \"CGR:Status-New\"\n\t             || arr[i].code === \"CGR:Status-Pending\"))\n\t        {\n\t          newArray.push(arr[i]);\n\t        }\n\t      }\n\t      \n\t      return newArray;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n    \n}","\nimport { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-edit-control',\n  templateUrl: './simple-edit-control.component.html',\n})\nexport class SimpleEditControl {\n  elRef: ElementRef\n  \n  @Input() visible = false;\n  \n  @Output() editEmitter = new EventEmitter<void>();\n  \n  constructor(elRef: ElementRef) {\n    this.elRef = elRef;\n  }\n\n  onAdd(map): any {\n    this.visible = true;\n    return this.elRef.nativeElement;\n  }\n  \n  onRemove(map): void {\n    this.elRef.nativeElement.remove();\n  }\n  \n  onClick(): void {\n    this.editEmitter.emit();\n  }\n}\n","<div *ngIf=\"this.visible\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button class=\"fa fa-pencil-square-o\" style=\"color: black; font-size: 18px;\" title=\"location.management.editing | localize\" (click)=\"this.onClick();\"></button>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'geoObjectAttributeExcludesFilter',\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n       \n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { HierarchyOverTime, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\n@Component( {\n    selector: 'manage-parent-versions-modal',\n    templateUrl: './manage-parent-versions-modal.component.html',\n    styleUrls: []\n} )\nexport class ManageParentVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onVersionChange: Subject<HierarchyOverTime>;\n\n    hierarchy: HierarchyOverTime = null;\n\n    hasDuplicateDate: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onVersionChange = new Subject();\n\n    }\n\n    init( hierarchy: HierarchyOverTime ): void {\n        this.hierarchy = hierarchy;\n    }\n\n    onAddNewVersion(): void {\n\n        let parents = {};\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parents[current.code] = {};\n        }\n\n        const entry = {\n            startDate: null,\n            endDate: null,\n            parents: parents\n        }\n\n        this.hierarchy.entries.push( entry );\n    }\n\n    remove( entry: any ): void {\n\n        for ( let i = 0; i < this.hierarchy.entries.length; i++ ) {\n            let vals = this.hierarchy.entries[i];\n\n            if ( vals.startDate === entry.startDate ) {\n                this.hierarchy.entries.splice( i, 1 );\n            }\n        }\n\n        this.snapDates();\n    }\n\n    getTypeAheadObservable( date: string, type: any, entry: any, index: number ): Observable<any> {\n\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let hierarchyCode = null;\n\n        if ( index > 0 ) {\n            let pType = this.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if ( parent.geoObject != null && parent.geoObject.properties.code != null ) {\n                hierarchyCode = this.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n            }\n        }\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( entry.parents[type.code].text, geoObjectTypeCode, parentCode, hierarchyCode, date ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, type: any, entry: any, date: string ): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        let parentTypes = [];\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parentTypes.push( current.code );\n\n            if ( current.code === type.code ) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects( e.item.uid, type.code, parentTypes, true, date ).then( ancestors => {\n\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n            for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n                let current = this.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while ( ancestor != null && ancestor.geoObject.properties.type != current.code ) {\n                    if ( ancestor.parents.length > 0 ) {\n                        ancestor = ancestor.parents[0];\n                    }\n                    else {\n                        ancestor = null;\n                    }\n                }\n\n                if ( ancestor != null ) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue;\n                }\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSubmit(): void {\n\n        this.onVersionChange.next( this.hierarchy );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    onDateChange( event: any ): any {\n        this.snapDates();\n    }\n\n    snapDates() {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data\n        this.hierarchy.entries.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n\n        for ( let i = 1; i < this.hierarchy.entries.length; i++ ) {\n            let prev = this.hierarchy.entries[i - 1];\n            let current = this.hierarchy.entries[i];\n\n            prev.endDate = this.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( this.hierarchy.entries.length > 0 ) {\n            this.hierarchy.entries[this.hierarchy.entries.length - 1].endDate = PRESENT;\n        }\n    }\n\n    formatDateString( dateObj: Date ): string {\n        const day = dateObj.getUTCDate();\n\n        return dateObj.getUTCFullYear() + \"-\" + ( dateObj.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"holder\" style=\"width: 100%; border: none;\">\n                    <div class=\"panel\" style=\"box-shadow: none;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\" *ngIf=\"hierarchy != null\">\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                    <table class=\"table table-striped\">\n                                        <thead style=\"font-size: 14px;\">\n                                            <tr>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let entry of hierarchy.entries; let i = index;\">\n                                                <td>\n                                                \n                                                  <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let type of hierarchy.types; let j = index\">\n                                                    {{type.label}}\n                                                    \n                                                    <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                                      name=\"{{type.code}}-{{i}}\"\n                                                      [disabled]=\"entry.startDate == null || entry.startDate === ''\"\n                                                      [(ngModel)]=\"entry.parents[type.code].text\" \n                                                      [typeaheadAsync]=\"true\"\n                                                      [typeahead]=\"getTypeAheadObservable(entry.startDate, type, entry, j)\"\n                                                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, type, entry, entry.startDate)\" \n                                                      [typeaheadOptionsLimit]=\"7\"\n                                                      typeaheadOptionField=\"name\" \n                                                      [typeaheadMinLength]=\"0\"\n                                                      [typeaheadWaitMs]=\"300\"\n                                                      required>\n                                                  </div>\n                                                \n                                                </td>\n                                                <td style=\"vertical-align: bottom;\">\n                                                  <input style=\"width: 100%;\" type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"entry.startDate\" (blur)=\"snapDates()\" required />\n                                                </td> \n                                                <td style=\"vertical-align: bottom;\">\n                                                  <p *ngIf=\"entry.startDate != null && entry.startDate !== ''\" style=\"font-size: 14px;\"> {{entry.endDate | date:'MM-dd-yyyy'}} </p>\n                                                </td>\n                                                <td style=\"vertical-align: middle; width: 10%; padding: 5px; text-align: center;\">\n                                                  <i class=\"fa fa-times delete-btn\" (click)=\"remove(entry)\"></i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </li>\n\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                  <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"><localize key=\"changeovertime.manageVersions.newVersion\"></localize></i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none; width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\" >\n                            <localize key=\"io.cancel\"></localize>\n                        </button> -->\n                        <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid || hasDuplicateDate\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'change-request-page',\n    templateUrl: './change-request-page.component.html',\n    styleUrls: ['./change-request-page.css']\n} )\nexport class ChangeRequestPageComponent implements OnInit {\n\n\tcontent: string = \"SUBMIT\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"MANAGE\") : this.renderContent(\"SUBMIT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SUBMIT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.page.title\");\n\t\t}\n\t\telse if(content === \"MANAGE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.table.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'MANAGE'}\" (click)=\"renderContent('MANAGE')\">Manage</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isContributor\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SUBMIT'}\" (click)=\"renderContent('SUBMIT')\">Submit</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<submit-change-request *ngIf=\"content === 'SUBMIT'\"></submit-change-request>\n\t\t\t\t\t<request-table *ngIf=\"content === 'MANAGE'\"></request-table>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { interval, Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { MasterListVersion } from '../../model/registry';\n\nimport { ExportFormatModalComponent } from './export-format-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ProgressService } from '../../../shared/service/progress.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { GeoObjectEditorComponent } from '../geoobject-editor/geoobject-editor.component';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'master-list',\n\ttemplateUrl: './master-list.component.html',\n\tstyleUrls: []\n})\nexport class MasterListComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterListVersion = null;\n\tp: number = 1;\n\tcurrent: string = '';\n\tfilter: { attribute: string, value: string, label: string }[] = [];\n\tselected: string[] = [];\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 100,\n\t\tresults: []\n\t};\n\tsort = { attribute: 'code', order: 'ASC' };\n\tisPublished: boolean = true;\n\t\n\tisRefreshing: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpublic searchPlaceholder = \"\";\n\n\tprivate isAdmin: boolean;\n\tprivate isMaintainer: boolean;\n\tprivate isContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService) {\n\n\t\tthis.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\t\tthis.isPublished = (this.route.snapshot.paramMap.get('published') == \"true\");\n\n\t\tthis.service.getMasterListVersion(oid).then( version => {\n\t\t\tthis.list = version;\n\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\tattribute.isCollapsed = true;\n\t\t\t});\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.data(this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\t//    onSearch(): void {\n\t//        this.filter = this.current;\n\t//\n\t//        this.onPageChange( 1 );\n\t//    }\n\n\tonSort(attribute: { name: string, label: string }): void {\n\t\tif (this.sort.attribute === attribute.name) {\n\t\t\tthis.sort.order = (this.sort.order === 'ASC' ? 'DESC' : 'ASC');\n\t\t}\n\t\telse {\n\t\t\tthis.sort = { attribute: attribute.name, order: 'ASC' };\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tattr.search = null;\n\t\t});\n\n\t\tthis.filter = [];\n\t\tthis.selected = [];\n\n\t\tthis.onPageChange(1);\n\t}\n\n\ttoggleFilter(attribute: any): void {\n\t\tattribute.isCollapsed = !attribute.isCollapsed;\n\t}\n\n\tgetValues(attribute: any): void {\n\t\treturn Observable.create((observer: any) => {\n\t\t\tthis.message = null;\n\n\t\t\t// Get the valid values\n\t\t\tthis.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.filter).then(options => {\n\t\t\t\toptions.unshift({ label: '[' + this.localizeService.decode(\"masterlist.nofilter\") + ']', value: null });\n\n\t\t\t\tobserver.next(options);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\thandleDateChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && (attribute.value.start !== '' || attribute.value.end !== '')) {\n\n\t\t\tlet label = '[' + attribute.label + '] : [';\n\n\t\t\tif (attribute.value.start != null) {\n\t\t\t\tlabel += attribute.value.start;\n\t\t\t}\n\n\t\t\tif (attribute.value.start != null && attribute.value.end != null) {\n\t\t\t\tlabel += ' - ';\n\t\t\t}\n\n\t\t\tif (attribute.value.end != null) {\n\t\t\t\tlabel += attribute.value.end;\n\t\t\t}\n\n\t\t\tlabel += ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleInputChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && attribute.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleListChange(e: TypeaheadMatch, attribute: any): void {\n\t\tattribute.value = e.item;\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tif (attr.base === attribute.base) {\n\t\t\t\tattr.search = '';\n\t\t\t}\n\t\t});\n\n\t\tif (attribute.value.value != null && attribute.value.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value.label + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t\tattribute.search = e.item.label;\n\t\t}\n\t\telse {\n\t\t\tattribute.search = '';\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tisFilterable(attribute: any): boolean {\n\t\treturn attribute.type !== 'none' && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n\t}\n\n\tonEdit(data): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\teditModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonGoto(data): void {\n\t\tconst oid = data.code;\n\n\t\tif (oid != null && oid.length > 0) {\n\t\t\twindow.open(acp + \"/nav/management#/locations/\" + oid, '_blank');\n\t\t}\n\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\t\t\n\t\tthis.isRefreshing = true;\n\n\t\tlet subscription = interval(1000).subscribe(() => {\n\t\t\tthis.service.progress(this.list.oid).then(progress => {\n\t\t\t\tthis.pService.progress(progress);\n\t\t\t});\n\t\t});\n\n\t\tthis.service.publishMasterList(this.list.oid)\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tsubscription.unsubscribe();\n\n\t\t\t\tthis.pService.complete();\n\t\t\t})).toPromise()\n\t\t\t.then(list => {\n\t\t\t  this.isRefreshing = false;\n\t\t\t\tthis.list = list;\n\t\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\t\tattribute.isCollapsed = true;\n\t\t\t\t});\n\n\t\t\t\t// Refresh the resultSet\n\t\t\t\tthis.onPageChange(1);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\tthis.pService.start();\n\t}\n\n\tonNewGeoObject(): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t//editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n\t\teditModal.content.configureAsNew(this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonExport(): void {\n\t\tthis.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.onFormat.subscribe(format => {\n\t\t\tif (format == 'SHAPEFILE') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-shapefile?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t\telse if (format == 'EXCEL') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-spreadsheet?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <!-- <progress-bar></progress-bar> -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.publishDate\"></localize>\n                    : {{list.publishDate}}\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : {{list.forDate}}\n                </h4>\n            </div>\n        </div>\n\n\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            \n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true, 'fa-spin':isRefreshing}\" style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n\n                        <button type=\"submit\" (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                        </button>\n                        <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                            <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                        </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th *ngIf=\"!list.leaf\" style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.edit.column\"></localize></th>\n                            <th *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\" [title]=\"'button.filter.helptext' | localize\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\" [typeaheadAsync]=\"true\" [typeahead]=\"getValues(attribute)\" (typeaheadOnSelect)=\"handleListChange($event, attribute)\" [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td *ngIf=\"!list.leaf\" style=\"width: 3%; text-align: center;\" class=\"label-column\"><a class=\"fa fa-map-marker\" (click)=\"onGoto(result)\"></a></td>\n                            <td style=\"width: 3%\" class=\"label-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(result)\" [title]=\"'button.edit.helptext' | localize\"></a></td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subscription, interval } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { MasterList, MasterListVersion } from '../../model/registry';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { RegistryService } from '../../service/registry.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'published-master-list-history',\n\ttemplateUrl: './published-master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tpage: any = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresults: []\n\t};\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpollingData: Subscription;\n\n\tisAdmin: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tthis.pollingData = interval(5000).subscribe(() => {\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\t//isGeoObjectTypeRM(type: string): boolean {\n\t//\treturn this.authService.isGeoObjectTypeRM(type);\n\t//}\n\n\tonDeleteMasterListVersion(oid: string): void {\n\t\tthis.service.deleteMasterListVersion(oid).then(data => {\n\t\t\tthis.updateList();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tupdateList(): void {\n\t\t// update the list of versions. \n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\t\tif (this.list != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.updateList();\n\t\t}\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, true])\n\t}\n\n\tonPublishShapefile(version: MasterListVersion): void {\n\n\t\tthis.service.publishShapefile(version.oid).then(() => {\n\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDownloadShapefile(version: MasterListVersion): void {\n\t\twindow.location.href = acp + '/master-list/download-shapefile?oid=' + version.oid;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n     <div *ngIf=\"list && ((list.admin))\" style=\"margin-bottom: 10px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" \n                    [title]=\"'masterList.publish.help.text' | localize\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.publishDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && (list.admin)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version.oid )\" class=\"btn btn-danger\" role=\"button\">\n                                    Delete\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n\n    <div class=\"row\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span> <span style=\"display: block;\"> {{job.author}} </span> <span style=\"display: block;\"> {{job.type}} </span> <span style=\"display: block;\"> {{job.status}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '../../model/registry';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-history',\n\ttemplateUrl: './master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tforDate: string = '';\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n\t\t\tthis.list.versions.push(version);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, false])\n\t}\n\n\tonDelete(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.list.versions = this.list.versions.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== version.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && ((list.admin) || isMaintainer)\" style=\"margin-bottom: 10px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\" style=\"margin-left: 10px;\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> <input id=\"forDate\" type=\"date\" name=\"forDate\" [(ngModel)]=\"forDate\" required>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.generatedDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"isMaintainer || isAdmin\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MasterList } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\nimport { PublishModalComponent } from './publish-modal.component';\n\n@Component({\n\n\tselector: 'master-list-view',\n\ttemplateUrl: './master-list-view.component.html',\n\tstyleUrls: ['./master-list-view.component.css']\n})\nexport class MasterListViewComponent implements OnInit {\n\n\tcontent: string = \"\";\n\tlist: MasterList = null;\n\n\t/*\n\t * Reference to the modal current showing\n     */\n\tprivate bsModalRef: BsModalRef;\n\n\n\tconstructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) {\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tif (oid != null) {\n\t\t\tthis.content = \"PUB\";\n\t\t}\n\n\t\tthis.service.getMasterList(oid).then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\n\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\t}\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\">Published</a>\n                    <a *ngIf=\"list && list.admin\" style=\"margin-right: 10px; font-size: 20px;\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\">Exploratory</a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { IOService } from '../../service/io.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\n\nimport { interval } from 'rxjs';\n\n@Component({\n\tselector: 'scheduled-jobs',\n\ttemplateUrl: './scheduled-jobs.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class ScheduledJobsComponent implements OnInit {\n\tmessage: string = null;\n\n\tactiveJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tcompleteJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tactiveTimeCounter: number = 0;\n\tcompleteTimeCounter: number = 0;\n\n\tpollingData: any;\n\n\tisViewAllOpen: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.onActiveJobsPageChange(1);\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.activeTimeCounter++\n\t\t\tthis.completeTimeCounter++\n\n\t\t\tif (this.isViewAllOpen) {\n\t\t\t\tif (this.activeTimeCounter >= 4) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t\tif (this.completeTimeCounter >= 7) {\n\t\t\t\t\tthis.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.completeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.activeTimeCounter >= 2) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tformatJobStatus(job: ScheduledJobOverview) {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PaginationPage): void {\n\n\t\tpage.results.forEach(job => {\n\n\t\t\tlet stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{ \"label\": \"File Import\", \"status\": \"COMPLETE\" },\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Staging\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Validation\",\n\t\t\t\t\t\t\"status\": job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Import\",\n\t\t\t\t\t\t\"status\": job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\n\t\t\tjob = job as ScheduledJobOverview;\n\t\t\tjob.stepConfig = stepConfig;\n\t\t});\n\n\t}\n\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\tonViewAllCompleteJobs(): void {\n\t\tthis.onCompleteJobsPageChange(1);\n\n\t\tthis.isViewAllOpen = true;\n\t}\n\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-history/', code])\n\t}\n\n\tonActiveJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.activeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.activeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCompleteJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.completeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.completeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\n\tonCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\t\t\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(job.configuration).then(response => {\n\t\t\t\tthis.bsModalRef.hide()\n\n\t\t\t\tfor (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n\t\t\t\t\tlet activeJob = this.activeJobsPage.results[i];\n\n\t\t\t\t\tif (activeJob.jobId === job.jobId) {\n\t\t\t\t\t\tthis.activeJobsPage.results.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.onViewAllCompleteJobs();\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n  onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n    this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: true,\n      backdrop: true,\n      ignoreBackdropClick: true,\n    });\n\n    this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n    this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n    this.bsModalRef.content.type = ModalTypes.danger;\n\n    this.bsModalRef.content.onConfirm.subscribe(data => {\n\n      this.service.resolveScheduledJob(historyId).then(response => {\n\n        this.bsModalRef.hide()\n\n        for (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n          let activeJob = this.activeJobsPage.results[i];\n\n          if (activeJob.jobId === job.jobId) {\n            this.activeJobsPage.results.splice(i, 1);\n            break;\n          }\n        }\n\n        this.onViewAllCompleteJobs();\n\n      }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n\n    });\n  }\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{job.createDate}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.createDate}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.lastUpdateDate}}</p>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { JobConflictModalComponent } from './conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './conflict-widgets/reupload-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { ScheduledJob } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\nimport { IOService } from '../../service/io.service';\n\nimport { interval } from 'rxjs';\n\n@Component({\n\tselector: 'job',\n\ttemplateUrl: './job.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class JobComponent implements OnInit {\n\tmessage: string = null;\n\tjob: ScheduledJob;\n\tallSelected: boolean = false;\n\thistoryId: string = \"\";\n\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\ttimeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tpollingData: any;\n\tisPolling: boolean = false;\n\thasRowValidationProblem: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService,\n\t\tprivate router: Router, private route: ActivatedRoute,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.historyId = this.route.snapshot.params[\"oid\"];\n\n\t\tthis.onPageChange(1);\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.stopPolling();\n\t}\n\n\tformatAffectedRows(rows: string) {\n\t\treturn rows.replace(/,/g, \", \");\n\t}\n\n\tformatValidationResolve(obj: any) {\n\t\treturn JSON.stringify(obj);\n\t}\n\n\tonProblemResolved(problem: any): void {\n\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\tlet pageConflict = this.page.results[i];\n\n\t\t\tif (pageConflict.id === problem.id) {\n\t\t\t\tthis.page.results.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetFriendlyProblemType(probType: string): string {\n\n\t\tif (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.DataNotFoundException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n\t\t}\n\n\t\tif (\n\t\t\tprobType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n\t\t}\n\n\t\t// if(probType === \"net.geoprism.registry.io.TermValueException\"){\n\t\t//   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n\t\t// }\n\n\t\tif (\n\t\t\tprobType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n\t\t}\n\n\t\treturn probType;\n\t}\n\n\n\tonEdit(problem: any): void {\n\t\t// this.router.navigate( ['/registry/master-list-history/', code] )\n\n\t\tthis.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.problem = problem;\n\t\tthis.bsModalRef.content.job = this.job;\n\t\tthis.bsModalRef.content.onConflictAction.subscribe(data => {\n\t\t\tif (data.action === 'RESOLVED') {\n\t\t\t\tthis.onProblemResolved(data.data);\n\t\t\t}\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n\n\t\t\tthis.job = response;\n\n\t\t\tif (this.job.stage === 'IMPORT_RESOLVE') {\n\t\t\t\tthis.page = this.job.importErrors;\n\t\t\t}\n\t\t\telse if (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.page = this.job.problems;\n\n\t\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\t\tlet problem = this.page.results[i];\n\n\t\t\t\t\tif (problem.type === 'RowValidationProblem') {\n\t\t\t\t\t\tthis.hasRowValidationProblem = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.isPolling && this.job.status === 'RUNNING') {\n\t\t\t\tthis.startPolling();\n\t\t\t}\n\t\t\telse if (this.isPolling && this.job.status != 'RUNNING') {\n\t\t\t\tthis.stopPolling();\n\t\t\t}\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tstopPolling(): void {\n\t\tif (this.isPolling && this.pollingData != null) {\n\t\t\tthis.pollingData.unsubscribe();\n\t\t}\n\t}\n\n\tstartPolling(): void {\n\t\tthis.timeCounter = 0;\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.timeCounter++\n\n\t\t\tif (this.timeCounter >= 2) {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t\t\tthis.timeCounter = 0;\n\t\t\t}\n\t\t});\n\n\t\tthis.isPolling = true;\n\t}\n\n\tonViewAllActiveJobs(): void {\n\n\t}\n\n\tonViewAllCompleteJobs(): void {\n\n\t}\n\n\ttoggleAll(): void {\n\t\tthis.allSelected = !this.allSelected;\n\n\t\tthis.job.importErrors.results.forEach(row => {\n\t\t\trow.selected = this.allSelected;\n\t\t})\n\t}\n\n\tonReuploadAndResume(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.job = this.job;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t});\n\t}\n\n\tonResolveScheduledJob(historyId: string): void {\n\t\tif (this.page.results.length == 0) {\n\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs']);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\n\t\t\tif (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\n\t\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\t}\n\n\tonCancelScheduledJob(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(this.job.configuration).then(response => {\n\t\t\t\t//this.bsModalRef.hide()\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ParentReferenceProblemWidgetComponent } from './parent-reference-problem-widget.component'\nimport { TermReferenceProblemWidgetComponent } from './term-reference-problem-widget.component'\nimport { RowValidationProblemWidgetComponent } from './row-validation-problem-widget.component'\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { GeoObjectType, MasterList, ScheduledJob, ScheduledJobOverview } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\n\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'job-conflict-modal',\n    templateUrl: './job-conflict-modal.component.html',\n    styleUrls: []\n} )\nexport class JobConflictModalComponent implements OnInit {\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n    \n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) {\n      this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n      \n    }\n    \n    onProblemResolvedListener(problem: any): void {\n      this.onConflictAction.next({action:\"RESOLVED\", data: problem});\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GeoObjectType, MasterList, ScheduledJob, ImportError } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'import-problem-widget',\n    templateUrl: './import-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ImportProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        } );\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId( null );\n        editModal.content.setOnSuccessCallback(() => {\n\n          this.onProblemResolved.emit(this.problem);\n          this.bsModalRef.hide()\n            \n        } );\n    }\n\n    getFriendlyProblemType(probType: string): string {\n\n        if(probType === \"net.geoprism.registry.io.ParentCodeException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.PostalCodeLocationException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.AmbiguousParentException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.multi.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.InvalidGeometryException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.invalid.geom.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.DataNotFoundException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.datanotfound\" );\n        }\n        \n        if(\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.permission\" );\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if(\n          probType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.duplicate.data.lookup\" );\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'parent-reference-problem-widget',\n    templateUrl: './parent-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'term-reference-problem-widget',\n    templateUrl: './term-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( conflict: any ): Observable<any> {\n        return Observable.create(( observer: any ) => {\n            this.iService.getTermSuggestions( conflict.mdAttributeId, this.searchLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n    \n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        classifierId: this.termId,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'row-validation-problem-widget',\n    templateUrl: './row-validation-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class RowValidationProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    formatAffectedRows(rows: string)\n    {\n      return rows.replace(/,/g, \", \");\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { ModalTypes } from '../../../../shared/model/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService } from '../../../../shared/service/event.service'\nimport { ScheduledJob } from '../../../model/registry';\nimport { ErrorHandler } from '../../../../shared/component/error-handler/error-handler';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: ['../../../../shared/component/modals/modal.css']\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <span *ngIf=\"errorMessage\">{{errorMessage}}</span>\n\n  <span>{{message}}</span>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input, Output } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { TaskService } from '../../service/task.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { GeoObjectType, GeoObjectOverTime, Task, PaginationPage } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'task-viewer',\n    templateUrl: './task-viewer.component.html',\n    styleUrls: ['./task-viewer.component.css'],\n    providers: [DatePipe]\n} )\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    completedTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    message: string;\n    \n    isViewAllOpen: boolean = false;\n    \n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n    \n    pollingData: any;\n\n    constructor( private registryService: RegistryService,\n                 private taskService: TaskService,\n                 private localizeService: LocalizationService,\n                 private date: DatePipe,\n                 private toEpochDateTimePipe: ToEpochDateTimePipe,\n                 private authService: AuthService\n      ) {\n      //const day = this.forDate.getUTCDate();\n      //this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n      this.onInProgressTasksPageChange( 1 );\n      \n      ////\n      //\n      // We don't need polling on this page. It's better to save bandwidth for low resource environments.\n      //\n      ////\n\n      // this.pollingData = Observable.interval(1000).subscribe(() => {\n      //   this.activeTimeCounter++\n      //   this.completeTimeCounter++\n      \n      //   if (this.isViewAllOpen)\n      //   {\n      //     if (this.activeTimeCounter >= 4)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //     if (this.completeTimeCounter >= 7)\n      //     {\n      //       this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            \n      //       this.completeTimeCounter = 0;\n      //     }\n      //   }\n      //   else\n      //   {\n      //     if (this.activeTimeCounter >= 2)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //   }\n      // });\n    }\n    \n    upper(str: string): string {\n      if (str != null)\n      {\n        return str.toUpperCase();\n      }\n      else\n      {\n        return \"\";\n      }\n    }\n    \n    onInProgressTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.inProgressTasks.pageSize, 'UNRESOLVED').then( page => {\n        this.inProgressTasks = page;\n      } );\n    }\n    \n    onCompletedTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.completedTasks.pageSize, 'RESOLVED').then( page => {\n        this.completedTasks = page;\n      } );\n    }\n    \n    onCompleteTask(task: any): void {\n      // this.isViewAllOpen = true;\n    \n      this.taskService.completeTask(task.id).then( () => {\n        this.inProgressTasks.results.splice(this.inProgressTasks.results.indexOf(task), 1);\n        this.completedTasks.results.push(task);\n        // this.onCompletedTasksPageChange(1);\n      } );\n    }\n    \n    onMoveTaskToInProgress(task: any): void {\n      this.isViewAllOpen = true;\n    \n      this.taskService.setTaskStatus(task.id, 'UNRESOLVED').then( () => {\n        this.completedTasks.results.splice(this.completedTasks.results.indexOf(task), 1);\n        this.inProgressTasks.results.push(task);\n        this.onInProgressTasksPageChange(1);\n      } );\n    }\n    \n    onViewAllCompletedTasks(): void {\n      this.isViewAllOpen = true;\n      \n      this.onCompletedTasksPageChange(1);\n    }\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n  \n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span>{{task.createDate}}</span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span style=\"margin-right:30px;\">{{task.createDate}}</span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label><span>{{task.completedDate}}</span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { PageResult } from '../../../shared/model/core'\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ModalTypes } from '../../../shared/model/modal';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { SynchronizationConfig } from '../../model/registry';\nimport { SynchronizationConfigModalComponent } from './synchronization-config-modal.component';\nimport { SynchronizationConfigService } from '../../service/synchronization-config.service';\n\n@Component({\n\tselector: 'synchronization-config-manager',\n\ttemplateUrl: './synchronization-config-manager.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\tmessage: string = null;\n\n\tpage: PageResult<SynchronizationConfig> = {\n\t\tresultSet: [],\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 20\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tconstructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n\tngOnInit(): void {\n\t\tthis.onPageChange(1);\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tthis.service.getPage(pageNumber, this.page.pageSize).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcreate(): void {\n\t\tthis.service.edit(null).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(null, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonEdit(config: SynchronizationConfig): void {\n\n\t\tthis.service.edit(config.oid).then(response => {\n\n\t\t\tlet bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tbsModalRef.content.init(response.config, response.orgs)\n\t\t\tbsModalRef.content.onSuccess.subscribe(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t})\n\t\t});\n\t}\n\n\tonRemove(config: SynchronizationConfig): void {\n\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + ' [' + config.label.localizedValue + ']';\n\t\tthis.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(() => {\n\t\t\tthis.service.remove(config.oid).then(() => {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\tonView(config: SynchronizationConfig): void {\n\t\tthis.router.navigate(['/registry/synchronization-config/', config.oid])\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from '../../model/registry';\nimport { SynchronizationConfigService } from '../../service/synchronization-config.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport {CustomAttributeConfig} from '../../model/sync';\n\nexport interface LevelRow {\n  isAttributeEditor: boolean;\n  \n  level?: any;\n  levelNum?: number;\n  hasAttributes?: boolean;\n  \n  attrCfg?: GOTAttributeConfig;\n}\nexport interface GOTAttributeConfig {\n  geoObjectTypeCode?: string;\n  attrs: CustomAttributeConfig[];\n}\n\n@Component({\n  selector: 'synchronization-config-modal',\n  templateUrl: './synchronization-config-modal.component.html',\n  styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit {\n\tmessage: string = null;\n\t\n\t@ViewChild('form') form;\n\n\tconfig: SynchronizationConfig = {\n\t\torganization: null,\n\t\tsystem: null,\n\t\thierarchy: null,\n\t\tlabel: this.lService.create(),\n\t\tconfiguration: {}\n\t};\n\n\torganizations: OrgSyncInfo[] = [];\n\n\tcOrg: OrgSyncInfo = null;\n\tcSystem: { label: string, oid: string, type: string } = null;\n\n\ttypes: GeoObjectType[] = [];\n\t\n\tlevelRows: LevelRow[] = [];\n\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonSuccess: Subject<SynchronizationConfig>;\n\n\n\tconstructor(private service: SynchronizationConfigService, private registryService: RegistryService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n\tngOnInit(): void {\n\t\tthis.onSuccess = new Subject();\n\t}\n\n\tinit(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n\n\t\tthis.organizations = organizations;\n\n\t\tif (config != null) {\n\t\t\tthis.config = config;\n\n\t\t\tlet oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\t\tif (oIndex !== -1) {\n\t\t\t\tthis.cOrg = this.organizations[oIndex];\n\t\t\t}\n\n\t\t\tlet sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\t\tif (sIndex !== -1) {\n\t\t\t\tthis.cSystem = this.cOrg.systems[sIndex];\n\t\t\t}\n\n\t\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t\t// Get the types\t\n\t\t\t\tthis.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t\t\tthis.types = types;\n\t\t\t\t});\n\n\t\t\t}\n\t\t\t\n\t\t\tthis.levelRows = [];\n\t\t\tfor (var i = 0; i < this.config.configuration.levels.length; ++i)\n\t\t\t{\n\t\t\t  var level = this.config.configuration.levels[i];\n\t\t\t  \n\t\t\t  var levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor:false };\n\t\t\t  \n\t\t\t  if (level.attributes != null && Object.keys(level.attributes).length > 0)\n\t\t\t  {\n\t\t\t    levelRow.hasAttributes = true;\n\t\t\t  }\n\t\t\t  \n\t\t\t  this.levelRows.push(levelRow);\n\t\t\t}\n\t\t}\n\t}\n\n\tonOrganizationSelected(): void {\n\t\tlet index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cOrg = this.organizations[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cOrg = null;\n\t\t\tthis.cSystem = null;\n\t\t}\n\t}\n\n\tonChange(): void {\n\t\tlet index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n\t\tif (index !== -1) {\n\t\t\tthis.cSystem = this.cOrg.systems[index];\n\t\t}\n\t\telse {\n\t\t\tthis.cSystem = null;\n\t\t}\n\n\n\t\tif (this.cSystem != null && this.cSystem.type === 'DHIS2ExternalSystem') {\n\t\t\t// Get the types\t\n\t\t\tthis.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n\t\t\t\tthis.types = types;\n\t\t\t});\n\n\t\t\tif (this.config.configuration['levels'] == null) {\n\t\t\t  var lvl = {\n          type: null,\n          geoObjectType: null,\n          level: 0\n        };\n\t\t\t\tthis.config.configuration['levels'] = [lvl];\n\t\t\t\tthis.levelRows.push({level:lvl, levelNum: 0, isAttributeEditor:false});\n\t\t\t}\n\n\t\t}\n\t\telse {\n\t\t\tthis.types = [];\n\t\t}\n\t}\n\n\taddLevel(): void {\n\t  var lvl = {\n      type: null,\n      geoObjectType: null,\n      level: this.config.configuration.levels.length\n    };\n\t\tvar len = this.config.configuration['levels'].push(lvl);\n\t\tthis.levelRows.push({ level: lvl, levelNum: len-1, isAttributeEditor:false });\n\t}\n\n\tremoveLevel(levelNum: number, levelRowIndex: number): void {\n\t\tif (levelNum < this.config.configuration['levels'].length) {\n\t\t\tvar editorIndex = this.getEditorIndex();\n\t\t\tif (editorIndex === levelRowIndex+1)\n\t\t\t{\n\t\t\t  this.levelRows.splice(editorIndex, 1);\n\t\t\t}\n\t\t\t\n\t\t\tthis.levelRows.splice(levelRowIndex, 1);\n\t\t\t\n\t\t\tvar newLevelNum = 0;\n\t\t\tfor (var i = 0; i < this.levelRows.length; ++i)\n\t\t\t{\n\t\t\t  var levelRow: LevelRow = this.levelRows[i];\n\t\t\t  \n\t\t\t  levelRow.levelNum = newLevelNum;\n\t\t\t  \n\t\t\t  if (!levelRow.isAttributeEditor)\n\t\t\t  {\n\t\t\t    newLevelNum = newLevelNum + 1;\n\t\t\t  }\n\t\t\t}\n\t\t\t\n\t\t\tthis.config.configuration['levels'].splice(levelNum, 1);\n\t\t}\n\t}\n\t\n\tgetEditorIndex(): number {\n\t  for (var i = 0; i < this.levelRows.length; ++i)\n    {\n      var levelRow = this.levelRows[i];\n      \n      if (levelRow.isAttributeEditor)\n      {\n        return i;\n      }\n    }\n    \n    return -1;\n\t}\n\t\n\tconfigureAttributes(levelRow: any): void {\n\t  var editorIndex = this.getEditorIndex();\n    \n    if (editorIndex != -1)\n    {\n      this.levelRows.splice(editorIndex, 1);\n      \n      if (editorIndex == levelRow.levelNum + 1)\n      {\n        return;\n      }\n    }\n\t\n    this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n  }\n  \n  getTermOptions(attr: CustomAttributeConfig, dhis2Id: string)\n  {\n    for (var i = 0; i < attr.dhis2Attrs.length; ++i)\n    {\n      var dhis2Attr = attr.dhis2Attrs[i];\n      \n      if (dhis2Attr.dhis2Id === dhis2Id)\n      {\n        return dhis2Attr.options;\n      }\n    }\n  }\n\t\n\tonChangeAttrMapping(attr: any, newValue: string, levelRow: LevelRow)\n\t{\n\t  if (newValue == null || newValue === \"\")\n\t  {\n\t    if (attr.terms != null)\n\t    {\n\t      attr.terms = {};\n\t    }\n\t  \n\t    return;\n\t  }\n\t\n\t  for (var j = 0; j < levelRow.attrCfg.attrs.length; j++)\n\t  {\n\t    if (levelRow.attrCfg.attrs[j].name === attr.name)\n\t    {\n    \t  var attrCfgAttr: any = levelRow.attrCfg.attrs[j];\n    \t\n    \t  if (attrCfgAttr.terms != null)\n    \t  {\n    \t    attr.terms = {};\n    \t  \n    \t    for (var i = 0; i < attrCfgAttr.terms.length; ++i)\n    \t    {\n    \t      var term = attrCfgAttr.terms[i];\n    \t    \n    \t      attr.terms[term.code] = null;\n    \t    }\n    \t  }\n    \t  \n    \t  return;\n  \t  }\n\t  }\n\t}\n\t\n\tonSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n    if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null)\n    {\n      var levelRow: LevelRow = this.levelRows[levelRowIndex];\n      \n      levelRow.hasAttributes = false;\n      levelRow.attrCfg = null;\n      levelRow.level.attributes = {};\n      \n      var editorIndex = this.getEditorIndex();\n      \n      if (editorIndex != -1 && editorIndex === levelRowIndex+1)\n      {\n        this.levelRows.splice(editorIndex, 1);\n      }\n      \n      return;\n    }\n    \n    var attrCfg = this.levelRows[levelRowIndex].attrCfg;\n    if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode)\n    {\n      // Resume an editing session on attributes that we fetched previously\n      \n      var editorIndex = this.getEditorIndex();\n      \n      if (editorIndex != -1 && editorIndex !== levelRowIndex + 1)\n      {\n        this.levelRows.splice(editorIndex, 1);\n        \n        if (editorIndex < levelRowIndex)\n        {\n          levelRowIndex = levelRowIndex - 1;\n        }\n      }\n      \n      this.levelRows.splice(levelRowIndex+1, 0, {isAttributeEditor:true, attrCfg:attrCfg});\n    }\n    else\n    {\n  \t  this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then( (attrs: CustomAttributeConfig[]) => {\n  \t    var editorIndex = this.getEditorIndex();\n  \t    var levelRow: LevelRow = this.levelRows[levelRowIndex];\n  \t    var level = levelRow.level;\n  \t    \n  \t    if (isDifferentGot)\n  \t    {\n  \t      level.attributes = {};\n  \t    }\n  \t    \n  \t    levelRow.attrCfg = {geoObjectTypeCode: geoObjectTypeCode, attrs:attrs};\n  \t    \n  \t    if (editorIndex != -1 && (editorIndex === levelRowIndex+1 || attrs.length > 0))\n        {\n          this.levelRows.splice(editorIndex, 1);\n          \n          if (editorIndex < levelRowIndex)\n          {\n            levelRowIndex = levelRowIndex - 1;\n          }\n        }\n  \t  \n  \t    if (attrs.length > 0)\n  \t    {\n  \t      levelRow.hasAttributes = true;\n  \t      \n  \t      for (var i = 0; i < attrs.length; ++i)\n  \t      {\n  \t        var attr = attrs[i];\n  \t        \n  \t        if (isDifferentGot || level.attributes[attr.name] == null)\n  \t        { \n    \t        level.attributes[attr.name] = {\n    \t          name: attr.name,\n    \t          externalId: null\n    \t        };\n    \t        \n    \t        if ( attr.terms != null && attr.terms.length > 0 )\n    \t        {\n    \t          level.attributes[attr.name].terms = {};\n    \t        \n    \t          for (var j = 0; j < attr.terms.length; ++j)\n                {\n                  var term = attr.terms[j];\n                  \n                  level.attributes[attr.name].terms[term.code] = null;\n                }\n    \t        }\n  \t        }\n  \t      }\n  \t      \n  \t      this.levelRows.splice(levelRowIndex+1, 0, {isAttributeEditor:true, attrCfg:{geoObjectTypeCode: geoObjectTypeCode, attrs:attrs}});\n  \t    }\n  \t    else\n  \t    {\n  \t      levelRow.hasAttributes = false;\n  \t    }\n  \t  }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n      });\n    }\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.apply(this.config).then(cfg => {\n\n\t\t\tthis.onSuccess.next(cfg);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tcancel(): void {\n\n\t\tif (this.config.oid != null) {\n\t\t\tthis.service.unlock(this.config.oid).then(() => {\n\t\t\t\tthis.bsModalRef.hide();\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef.hide();\n\t\t}\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> ({{localeValue.locale}})\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.hierarchy\" name=\"hierarchy\" [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"config.hierarchy != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChange()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div class=\"row-holder\" *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.units\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n              <thead>\n                <tr>\n                  <th style=\"width:20%\">\n                    <localize key=\"settings.external.synchronization.level.label\"></localize>\n                  </th>\n                  <th style=\"width:30%\">\n                    <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                  </th>\n                  <th style=\"width:30%\">\n                    <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                  </th>\n                  <th style=\"width:20%; text-align: center;\">\n                    <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                  <td style=\"width:20%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <label style=\"padding: 10px 0; margin: 0;\">Level {{levelRow.levelNum + 1}}</label>\n                  </td>\n                  <td style=\"width:30%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                    </select>\n                  </td>\n                  <td style=\"width:30%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                    <select type=\"text\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                      <option></option>\n                      <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                      <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                      <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                    </select>\n                  </td>\n                  <td style=\"width:20%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n\t\t\t\t\t\t\t\t\t  <div>\n\t\t\t\t\t\t\t\t\t    <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n\t\t\t\t\t\t\t\t\t      <icon class=\"fa fa-trash-o ico-remove\"></icon>\n\t\t\t\t\t\t\t\t\t      <label style=\"cursor:pointer; margin-left:9px;\">Delete</label>\n\t\t\t\t\t\t\t\t\t    </a> \n\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t  <div>\n                      <a *ngIf=\"levelRow.hasAttributes\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                        <icon class=\"fa fa-edit\"></icon>\n                        <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.configureAttributes\"></localize></label>\n                      </a> \n                    </div>\n\t\t\t\t\t\t\t\t\t</td>\n                  <td colspan=\"4\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                    <h4>Attributes</h4>\n\t                  <table class=\"table\">\n\t                    <thead>\n\t                      <tr>\n\t                        <th></th>\n\t                      </tr>\n\t                    </thead>\n\t                    <tbody>\n\t                      <tr *ngFor=\"let attr of levelRow.attrCfg.attrs\">\n\t                        <td class=\"row-holder\">\n\t                          <table class=\"row\" style=\"width:80%; margin-left:80px; margin-top:15px; margin-bottom: 10px;\">\n\t                            <thead>\n\t                              <tr>\n\t                                <th style=\"width:25%\">\n\t                                  <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n\t                                </th>\n\t                                <th style=\"width:25%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:25%\">\n                                    <!-- To -->\n                                  </th>\n                                  <th style=\"width:25%\">\n                                    <label><localize key=\"sync.attr.targetAttribute\"></localize></label>\n                                  </th>\n\t                              </tr>\n\t                            </thead>\n\t                            <tbody>\n\t                              <tr>\n\t                                <td><label style=\"color:#999;\">{{attr.label}}</label></td>\n\t                                <td><label style=\"color:#999;\">{{attr.typeLabel}}</label></td>\n\t                                <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n\t                                <td>\n\t                                  <select *ngIf=\"attr.dhis2Attrs.length > 0\" [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].externalId\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeAttrMapping(levelRows[i-1].level.attributes[attr.name], levelRows[i-1].level.attributes[attr.name].externalId, levelRow)\">\n\t                                    <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                    <option [value]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of attr.dhis2Attrs\">\n\t                                      {{dhis2Attr.name}}\n\t                                    </option>\n\t                                  </select>\n\t                                  <label *ngIf=\"attr.dhis2Attrs.length == 0\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n\t                                </td>\n\t                              </tr>\n\t                            </tbody>\n\t                          </table>\n\t                          <div *ngIf=\"levelRows[i-1].level.attributes[attr.name].externalId != null && levelRows[i-1].level.attributes[attr.name].externalId.length > 0\">\n\t\t                          <table *ngFor=\"let term of attr.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n\t                              <thead>\n\t                                <tr>\n\t                                  <th style=\"width:25%\">\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <!-- To -->\n\t                                  </th>\n\t                                  <th style=\"width:25%\">\n\t                                    <label><localize key=\"sync.attr.term.dhis2Option\"></localize></label>\n\t                                  </th>\n\t                                </tr>\n\t                              </thead>\n\t                              <tbody>\n\t                                <tr>\n\t                                  <td></td>\n\t                                  <td><label style=\"color:#999;\">{{term.label}}</label></td>\n\t                                  <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n\t                                  <td>\n\t                                    <select [(ngModel)]=\"levelRows[i-1].level.attributes[attr.name].terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n\t                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n\t                                      <option *ngFor=\"let option of getTermOptions(attr, levelRows[i-1].level.attributes[attr.name].externalId)\" [value]=\"option.code\">\n\t                                        {{option.name}}\n\t                                      </option>\n\t                                    </select>\n\t                                  </td>\n\t                                </tr>\n\t                              </tbody>\n\t                            </table>\n                            </div>\n\t                        </td>\n\t                      </tr>\n\t                    </tbody>\n\t                  </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          \n          </div>\n      </div>\n\n\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Subscription, interval } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PageResult } from '../../../shared/model/core'\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { SynchronizationConfig, ExportScheduledJob } from '../../model/registry';\nimport { SynchronizationConfigService } from '../../service/synchronization-config.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'synchronization-config',\n\ttemplateUrl: './synchronization-config.component.html',\n\tstyleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\tmessage: string = null;\n\n\tconfig: SynchronizationConfig = null;\n\n\tpage: PageResult<ExportScheduledJob> = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresultSet: []\n\t};\n\n\tpollingData: Subscription;\n\n\tconstructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tthis.service.get(oid).then(config => {\n\t\t\tthis.config = config;\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tthis.pollingData = interval(10000).subscribe(() => {\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tonRun(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.run(this.config.oid).then(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\t\tif (this.config != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n\n\t\t\t\tthis.formatStepConfig(response);\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t}\n\n\tformatJobStatus(job: ExportScheduledJob) {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.lService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PageResult<ExportScheduledJob>): void {\n\n\t\tpage.resultSet.forEach((job: ExportScheduledJob) => {\n\n\t\t\tjob.stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Queued\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Connecting\",\n\t\t\t\t\t\t\"status\": job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Export\",\n\t\t\t\t\t\t\"status\": job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\t}\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ExportScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t\tthis.message = ErrorHandler.getMessageFromError(err);\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label> \n              <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\" style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i> \n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <form #myForm=\"ngForm\">\n                <div class=\"form-group text-right\" style=\"margin: 0;\">\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n                <h4>\n                    <localize key=\"synchronization.config.units\"></localize>\n                </h4>\n                <table class=\"table\">\n                    <thead>\n                      <tr>\n                        <th>\n                          <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th>\n                          <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                        </th>\n                        <th style=\"text-align: right;\">\n                          <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\" >\n                        <td style=\"vertical-align: middle;\">\n                          <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                        </td>\n                        <td style=\"\">\n                          {{level.geoObjectType}}\n                        </td>\n                        <td style=\"text-align: right;\">\n                          <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                          <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                          <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                        </td>\n                      </tr>\n                    </tbody>\n                </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\" style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\" [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a *ngIf=\"job.status === 'FAILURE'\" [routerLink]=\"'/registry/sync/details/' + job.historyId\" routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                           </div>\n                         </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\nimport { ScheduledJob } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\nimport { IOService } from '../../service/io.service';\n\nimport { interval } from 'rxjs';\n\n@Component({\n  selector: 'job',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.css']\n})\nexport class SyncDetailsComponent implements OnInit {\n  message: string = null;\n  job: ScheduledJob;\n  historyId: string = \"\";\n\n  page: any = {\n    count: 0,\n    pageNumber: 1,\n    pageSize: 10,\n    results: []\n  };\n\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n\n  constructor(public service: RegistryService,\n    private router: Router, private route: ActivatedRoute,\n    private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n    this.isAdmin = authService.isAdmin();\n    this.isMaintainer = this.isAdmin || authService.isMaintainer();\n    this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n  }\n\n  ngOnInit(): void {\n\n    this.historyId = this.route.snapshot.params[\"oid\"];\n\n    this.onPageChange(1);\n\n  }\n\n  ngOnDestroy() {\n  }\n\n  formatAffectedRows(rows: string) {\n    return rows.replace(/,/g, \", \");\n  }\n\n  formatValidationResolve(obj: any) {\n    return JSON.stringify(obj);\n  }\n\n  onPageChange(pageNumber: any): void {\n\n    this.message = null;\n\n    this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n\n      this.job = response;\n      \n      this.page = this.job.exportErrors;\n\n    }).catch((err: HttpErrorResponse) => {\n      this.error(err);\n    });\n\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';\nimport { Map, LngLatBounds, LngLatBoundsLike, NavigationControl, MapboxEvent, AttributionControl } from 'mapbox-gl';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { AllGeoJSON } from '@turf/helpers'\nimport bbox from '@turf/bbox';\n\nimport { Subject } from 'rxjs';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { GeoObject, MasterList, ContextLayer, ContextLayerGroup } from '../../model/registry';\nimport { LocationInformation } from '../../model/location-manager';\n\nimport { ContextLayerModalComponent } from './context-layer-modal.component';\n\nimport { MapService } from '../../service/map.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { timeout } from 'rxjs/operators';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'location-manager',\n\ttemplateUrl: './location-manager.component.html',\n\tstyleUrls: ['./location-manager.css']\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n\tprivate bsModalRef: BsModalRef;\n\n    /* \n     * Root nodes of the tree\n     */\n\tdata: LocationInformation = {\n\t\ttypes: [],\n\t\thierarchies: [],\n\t\tgeojson: { type: 'MultiPolygon', features: [] },\n\t};\n\n\tchildType: string = null;\n\thierarchy: string = null;\n\n    /*\n     * Date of data for explorer\n     */\n\tdateStr: string = null;\n\n    /* \n     * Breadcrumb of previous children clicked on\n     */\n\tbreadcrumbs = [] as GeoObject[];\n\n    /* \n     * Root nodes of the tree\n     */\n\tcurrent: GeoObject;\n\n    /* \n     * mapbox-gl map\n     */\n\tmap: Map;\n\n    /* \n     * Flag denoting the draw control is active\n     */\n\tactive: boolean = false;\n\n\tvectorLayers: string[] = [];\n\n\tcontextLayerGroups: ContextLayerGroup[] = [];\n\n\tlists: MasterList[] = [];\n\n    /* \n     * List of base layers\n     */\n\tbaseLayers: any[] = [\n\t\t{\n\t\t\tname: 'Satellite',\n\t\t\tlabel: 'Satellite',\n\t\t\tid: 'satellite-v9',\n\t\t\tsprite: 'mapbox://sprites/mapbox/satellite-v9',\n\t\t\turl: 'mapbox://mapbox.satellite',\n\t\t\tselected: true\n\t\t},\n\t\t// {\n\t\t// \tname: 'Streets',\n\t\t// \tlabel: 'Streets',\n\t\t// \tid: 'streets-v9',\n\t\t// \tsprite: 'mapbox://sprites/mapbox/basic-v9',\n\t\t// \turl: 'mapbox://mapbox.basic-v9'\n\t\t// }\n\t];\n\n\tbaselayerIconHover = false;\n\n\thoverFeatureId: string;\n\n\tpreventSingleClick: boolean = false;\n\n\t/* \n     * Timer for determining double click vs single click\n     */\n\ttimer: any;\n\n\t/* \n     * debounced subject for map extent change events\n     */\n\tsubject: Subject<MapboxEvent<MouseEvent | TouchEvent | WheelEvent>>;\n\n\tconstructor(private modalService: BsModalService, private mapService: MapService, public service: RegistryService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getAllMasterListVersions().then(lists => {\n\t\t\tthis.lists = lists;\n\n\t\t\tthis.convertListsToContextLayers(lists);\n\t\t});\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis.map.remove();\n\t}\n\n\tngAfterViewInit() {\n\n\t\tconst layer = this.baseLayers[0];\n\n\t\tthis.map = new Map({\n\t\t\tcontainer: 'map',\n\t\t\tstyle: {\n\t\t\t\t\"version\": 8,\n\t\t\t\t\"name\": layer.name,\n\t\t\t\t\"metadata\": {\n\t\t\t\t\t\"mapbox:autocomposite\": true\n\t\t\t\t},\n\t\t\t\t\"sources\": {\n\t\t\t\t\t\"mapbox\": {\n\t\t\t\t\t\t\"type\": \"raster\",\n\t\t\t\t\t\t\"url\": layer.url,\n\t\t\t\t\t\t\"tileSize\": 256\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"sprite\": layer.sprite,\n\t\t\t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t\t\t\t\"layers\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": layer.id,\n\t\t\t\t\t\t\"type\": 'raster',\n\t\t\t\t\t\t\"source\": 'mapbox',\n\t\t\t\t\t\t// \"source-layer\": \"mapbox_satellite_full\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\tzoom: 2,\n\t\t\tattributionControl: false,\n\t\t\tcenter: [-78.880453, 42.897852]\n\t\t});\n\n\t\tthis.map.on('load', () => {\n\t\t\tthis.initMap();\n\t\t});\n\n\t}\n\n\tconvertListsToContextLayers(lists: MasterList[]): void {\n\t\tlists.forEach(list => {\n\t\t\tlet thisList = { oid: list.oid, displayLabel: list.displayLabel.localizedValue, contextLayers: [] };\n\t\t\tthis.contextLayerGroups.push(thisList);\n\t\t\tlist.versions.forEach(version => {\n\t\t\t\tlet thisContextLayer = { oid: version.oid, displayLabel: version.forDate, active: false, enabled: false };\n\t\t\t\tthisList.contextLayers.push(thisContextLayer);\n\t\t\t});\n\t\t});\n\t}\n\n\thandleDateChange(): void {\n\t\tthis.back(null);\n\t}\n\n\tinitMap(): void {\n\n\t\tthis.map.on('style.load', () => {\n\t\t\tthis.addLayers();\n\t\t\tthis.refresh();\n\t\t});\n\n\t\tthis.addLayers();\n\n\n\t\tthis.refresh();\n\n\t\t// Add zoom and rotation controls to the map.\n\t\tthis.map.addControl(new NavigationControl({ 'visualizePitch': true }));\n\t\tthis.map.addControl(new AttributionControl({ compact: true }), 'bottom-right');\n\n\t\tthis.map.on('dblclick', 'children-points', (event: any) => {\n\t\t\tthis.handleMapClickEvent(event);\n\t\t});\n\n\t\tthis.map.on('dblclick', 'children-polygon', (event: any) => {\n\t\t\tthis.handleMapClickEvent(event);\n\t\t});\n\t}\n\n\taddLayers(): void {\n\n\t\tconst source = 'children';\n\n\t\tthis.map.addSource(source, {\n\t\t\ttype: 'geojson',\n\t\t\tdata: {\n\t\t\t\t\"type\": \"FeatureCollection\",\n\t\t\t\t\"features\": []\n\t\t\t}\n\t\t});\n\n\t\t// Point layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": source,\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 10,\n\t\t\t\t\"circle-color\": '#a6611a',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n\t\t\t]\n\t\t});\n\n\t\t// Polygon layer\n\t\tthis.map.addLayer({\n\t\t\t'id': source + '-polygon',\n\t\t\t'type': 'fill',\n\t\t\t'source': source,\n\t\t\t'layout': {},\n\t\t\t'paint': {\n\t\t\t\t'fill-color': '#a6611a',\n\t\t\t\t'fill-opacity': 0.8,\n\t\t\t\t'fill-outline-color': 'black'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n\t\t\t]\n\t\t});\n\n\n\t\t// Label layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-label\",\n\t\t\t\"source\": source,\n\t\t\t\"type\": \"symbol\",\n\t\t\t\"paint\": {\n\t\t\t\t\"text-color\": \"black\",\n\t\t\t\t\"text-halo-color\": \"#fff\",\n\t\t\t\t\"text-halo-width\": 2\n\t\t\t},\n\t\t\t\"layout\": {\n\t\t\t\t\"text-field\": ['get', 'localizedValue', ['get', 'displayLabel']],\n\t\t\t\t\"text-font\": [\"NotoSansRegular\"],\n\t\t\t\t\"text-offset\": [0, 0.6],\n\t\t\t\t\"text-anchor\": \"top\",\n\t\t\t\t\"text-size\": 12,\n\t\t\t}\n\t\t});\n\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\tthis.addVectorLayer(cLayer.oid);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t}\n\n\trefresh(): void {\n\t\tconsole.log(this.hierarchy);\n\n\t\tif (this.current == null) {\n\t\t\tthis.mapService.roots(this.childType, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.mapService.select(this.current.properties.code, this.current.properties.type, this.childType, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t}\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\thandleBasemapStyle(layer: any): void {\n\t\t// this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n\t\tthis.baseLayers.forEach(baseLayer => {\n\t\t\tbaseLayer.selected = false;\n\t\t});\n\n\t\tlayer.selected = true;\n\n\t\tthis.map.setStyle({\n\t\t\t\"version\": 8,\n\t\t\t\"name\": layer.name,\n\t\t\t\"metadata\": {\n\t\t\t\t\"mapbox:autocomposite\": true\n\t\t\t},\n\t\t\t\"sources\": {\n\t\t\t\t\"mapbox\": {\n\t\t\t\t\t\"type\": \"raster\",\n\t\t\t\t\t\"url\": layer.url,\n\t\t\t\t\t\"tileSize\": 256\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"sprite\": layer.sprite,\n\t\t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t\t\t\"layers\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": layer.id,\n\t\t\t\t\t\"type\": 'raster',\n\t\t\t\t\t\"source\": 'mapbox',\n\t\t\t\t\t// \"source-layer\": \"mapbox_satellite_full\"\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\n\t// handleStyle(layer: any): void {\n\n\t// \tthis.baseLayers.forEach(baseLayer => {\n\t// \t\tbaseLayer.selected = false;\n\t// \t});\n\n\t// \tlayer.selected = true;\n\n\t// \tthis.map.setStyle({\n\t// \t\t\"version\": 8,\n\t// \t\t\"name\": layer.name,\n\t// \t\t\"metadata\": {\n\t// \t\t\t\"mapbox:autocomposite\": true\n\t// \t\t},\n\t// \t\t\"sources\": {\n\t// \t\t\t\"mapbox\": {\n\t// \t\t\t\t\"type\": \"raster\",\n\t// \t\t\t\t\"url\": layer.url,\n\t// \t\t\t\t\"tileSize\": 256\n\t// \t\t\t}\n\t// \t\t},\n\t// \t\t\"sprite\": layer.sprite,\n\t// \t\t\"glyphs\": window.location.protocol + '//' + window.location.host + acp + '/glyphs/{fontstack}/{range}.pbf',\n\t// \t\t\"layers\": [\n\t// \t\t\t{\n\t// \t\t\t\t\"id\": \"background\",\n\t// \t\t\t\t\"type\": \"background\",\n\t// \t\t\t\t\"paint\": {\n\t// \t\t\t\t\t\"background-color\": \"rgb(4,7,14)\"\n\t// \t\t\t\t}\n\t// \t\t\t},\n\t// \t\t\t{\n\t// \t\t\t\t\"id\": layer.id,\n\t// \t\t\t\t\"type\": \"raster\",\n\t// \t\t\t\t\"source\": \"mapbox\",\n\t// \t\t\t\t\"source-layer\": \"mapbox_satellite_full\"\n\t// \t\t\t}\n\t// \t\t]\n\t// \t});\n\t// }\n\n\taddContextLayerModal(): void {\n\t\tthis.bsModalRef = this.modalService.show(ContextLayerModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t\t'class': 'context-layer-modal'\n\t\t});\n\t\tthis.bsModalRef.content.contextLayerGroups = this.contextLayerGroups;\n\n\t\t(<ContextLayerModalComponent>this.bsModalRef.content).onSubmit.subscribe(cLayerGroups => {\n\n\t\t\t// cLayerGroups.forEach(cLayerGroup => {\n\t\t\t// \tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t// \t\tthis.toggleContextLayer(cLayer.oid)\n\t\t\t// \t});\n\t\t\t// })\n\n\t\t});\n\t}\n\n\thighlightMapFeature(id: string): void {\n\n\t\t//\t\tthis.map.setFilter('hover-points', ['all',\n\t\t//\t\t\t['==', 'oid', id]\n\t\t//\t\t])\n\n\t}\n\n\tclearHighlightMapFeature(): void {\n\n\t\t//\t\tthis.map.setFilter('hover-points', ['all',\n\t\t//\t\t\t['==', 'oid', \"NONE\"]\n\t\t//\t\t])\n\n\t}\n\n\tonListEntityHover(event: GeoObject, site: GeoObject): void {\n\t\tif (this.current == null) {\n\t\t\tthis.highlightMapFeature(site.properties.code);\n\t\t}\n\t}\n\n\tonListEntityHoverOff(): void {\n\t\tthis.clearHighlightMapFeature();\n\t}\n\n\t//\thighlightListItem(id: string): void {\n\t//\t\tthis.nodes.forEach(node => {\n\t//\t\t\tif (node.properties.code === id) {\n\t//\t\t\t\tthis.hoverFeatureId = id;\n\t//\t\t\t}\n\t//\t\t})\n\t//\t}\n\t//\n\t//\tclearHighlightListItem(): void {\n\t//\t\tif (this.hoverFeatureId) {\n\t//\t\t\tthis.nodes.forEach(node => {\n\t//\t\t\t\tif (node.properties.code === this.hoverFeatureId) {\n\t//\t\t\t\t\tthis.hoverFeatureId = null;\n\t//\t\t\t\t}\n\t//\t\t\t})\n\t//\t\t}\n\t//\t}\n\n\tzoomToFeature(node: GeoObject, event: MouseEvent): void {\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tthis.preventSingleClick = false;\n\t\tconst delay = 200;\n\n\t\tthis.timer = setTimeout(() => {\n\t\t\tif (!this.preventSingleClick) {\n\t\t\t\tif (node.geometry != null) {\n\t\t\t\t\tconst bounds = bbox(node as AllGeoJSON) as LngLatBoundsLike;\n\n\t\t\t\t\tthis.map.fitBounds(bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}, delay);\n\t}\n\n\tselect(node: GeoObject, event: MouseEvent): void {\n\n\t\tif (event != null) {\n\t\t\tevent.stopPropagation();\n\t\t}\n\n\t\tthis.preventSingleClick = true;\n\t\tclearTimeout(this.timer);\n\n\t\tthis.drillDown(node);\n\t}\n\n\thandleMapClickEvent(event: any): void {\n\t\tif (event.features != null && event.features.length > 0) {\n\t\t\tconst feature = event.features[0];\n\n\t\t\tconst index = this.data.geojson.features.findIndex(node => { return node.properties.code === feature.properties.code });\n\n\t\t\tif (index !== -1) {\n\t\t\t\tthis.drillDown(this.data.geojson.features[index]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\tdrillDown(node: GeoObject): void {\n\t\tthis.mapService.select(node.properties.code, node.properties.type, null, this.hierarchy, this.dateStr).then(data => {\n\t\t\tthis.current = node;\n\n\t\t\tthis.addBreadcrumb(node);\n\n\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\tthis.setData(data);\n\t\t});\n\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\taddBreadcrumb(node: GeoObject): void {\n\n\t\tif (this.breadcrumbs.length == 0 || this.breadcrumbs[this.breadcrumbs.length - 1].properties.code !== node.properties.code) {\n\t\t\tthis.breadcrumbs.push(node);\n\t\t}\n\t}\n\n\tback(node: GeoObject): void {\n\n\t\tif (node != null) {\n\t\t\tthis.mapService.select(node.properties.code, node.properties.type, null, this.hierarchy, this.dateStr).then(data => {\n\t\t\t\tvar indexOf = this.breadcrumbs.findIndex(i => i.properties.code === node.properties.code);\n\n\t\t\t\tthis.current = node;\n\t\t\t\tthis.breadcrumbs.splice(indexOf + 1);\n\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\t\t\t});\n\t\t}\n\t\telse if (this.breadcrumbs.length > 0) {\n\t\t\tthis.mapService.roots(null, null, this.dateStr).then(data => {\n\t\t\t\t(<any>this.map.getSource('children')).setData(data.geojson);\n\n\t\t\t\tthis.setData(data);\n\n\t\t\t\tthis.current = null;\n\t\t\t\tthis.breadcrumbs = [];\n\t\t\t});\n\t\t}\n\n\t\tthis.hierarchy = null;\n\t\tthis.childType = null;\n\t}\n\n\texpand(node: GeoObject) {\n\t\tthis.current = node;\n\t}\n\n\tsetNodes(nodes: GeoObject[]): void {\n\t\tthis.data.geojson.features = [];\n\n\t\tnodes.forEach(node => {\n\t\t\tthis.data.geojson.features.push(node);\n\t\t})\n\t}\n\n\tsetData(data: LocationInformation): void {\n\t\tthis.data = data;\n\n\t\tthis.hierarchy = data.hierarchy;\n\t\tthis.childType = data.childType;\n\t}\n\n\n\tgroupHasEnabledContextLayers(group: string): boolean {\n\t\tlet hasEnabled = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tif (cLayerGroup.oid === group) {\n\t\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\t\thasEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn hasEnabled;\n\t}\n\n\thasEnabledContextLayers(): boolean {\n\t\tlet hasEnabled = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.enabled) {\n\t\t\t\t\thasEnabled = true;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn hasEnabled;\n\t}\n\n\tremoveContextLayer(cLayer: ContextLayer): void {\n\t\tif (cLayer.active) {\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-points\");\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-polygon\");\n\t\t\tthis.map.removeLayer(cLayer.oid + \"-label\");\n\t\t\tthis.map.removeSource(cLayer.oid);\n\n\t\t\tcLayer.active = false;\n\t\t}\n\n\t\tcLayer.enabled = false;\n\t}\n\n\ttoggleContextLayer(source: string): void {\n\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tcLayerGroup.contextLayers.forEach(cLayer => {\n\t\t\t\tif (cLayer.oid === source) {\n\n\t\t\t\t\t// WARNING: the boolean component returns the value already switched (false --> true). \n\t\t\t\t\t// I'm reversing that value here so the logic below is more intuitive.\n\t\t\t\t\t// cLayer.active = !cLayer.active \n\t\t\t\t\t//\n\n\t\t\t\t\tif (cLayer.active) {\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-points\");\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-polygon\");\n\t\t\t\t\t\tthis.map.removeLayer(source + \"-label\");\n\t\t\t\t\t\tthis.map.removeSource(source);\n\n\t\t\t\t\t\tcLayer.active = false;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.addVectorLayer(source);\n\n\t\t\t\t\t\tcLayer.active = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\taddVectorLayer(source: string): void {\n\t\tconst prevLayer = 'children-points';\n\n\t\t// console.log(navigator.language.toLowerCase());\n\n\t\tvar protocol = window.location.protocol;\n\t\tvar host = window.location.host;\n\n\t\tthis.map.addSource(source, {\n\t\t\ttype: 'vector',\n\t\t\ttiles: [protocol + '//' + host + acp + '/master-list/tile?x={x}&y={y}&z={z}&config=' + encodeURIComponent(JSON.stringify({ oid: source }))]\n\t\t});\n\n\t\t// Point layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-points\",\n\t\t\t\"type\": \"circle\",\n\t\t\t\"source\": source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t\"paint\": {\n\t\t\t\t\"circle-radius\": 10,\n\t\t\t\t\"circle-color\": '#800000',\n\t\t\t\t\"circle-stroke-width\": 2,\n\t\t\t\t\"circle-stroke-color\": '#FFFFFF'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n\t\t\t]\n\t\t}, prevLayer);\n\n\t\t// Polygon layer\n\t\tthis.map.addLayer({\n\t\t\t'id': source + '-polygon',\n\t\t\t'type': 'fill',\n\t\t\t'source': source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t'layout': {},\n\t\t\t'paint': {\n\t\t\t\t'fill-color': '#80cdc1',\n\t\t\t\t'fill-opacity': 0.8,\n\t\t\t\t'fill-outline-color': 'black'\n\t\t\t},\n\t\t\tfilter: ['all',\n\t\t\t\t[\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n\t\t\t]\n\t\t}, prevLayer);\n\n\n\t\t// Label layer\n\t\tthis.map.addLayer({\n\t\t\t\"id\": source + \"-label\",\n\t\t\t\"source\": source,\n\t\t\t\"source-layer\": 'context',\n\t\t\t\"type\": \"symbol\",\n\t\t\t\"paint\": {\n\t\t\t\t\"text-color\": \"black\",\n\t\t\t\t\"text-halo-color\": \"#fff\",\n\t\t\t\t\"text-halo-width\": 2\n\t\t\t},\n\t\t\t\"layout\": {\n\t\t\t\t\"text-field\": [\"case\",\n\t\t\t\t\t[\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n\t\t\t\t\t[\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n\t\t\t\t\t[\"string\", [\"get\", \"displayLabel\"]]\n\t\t\t\t],\n\t\t\t\t\"text-font\": [\"NotoSansRegular\"],\n\t\t\t\t\"text-offset\": [0, 0.6],\n\t\t\t\t\"text-anchor\": \"top\",\n\t\t\t\t\"text-size\": 12,\n\t\t\t}\n\t\t}, prevLayer);\n\n\t}\n}\n","<div class=\"\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n\n  <div id=\"app-container\" class=\"container-fluid\">\n\n    <div class=\"row\">\n      <div id=\"navigator-left-sidebar\" class=\"col-md-3 lw-inner-col\">\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n\n            <div class=\"row\">\n              <div class=\"col-md-12\" style=\"height: 56px; overflow: auto;\">\n                <ul class=\"breadcrumb\">\n                  <li *ngIf=\"current != null\">\n                    <!-- <i class=\"fa fa-angle-left breadcrumb-back-ico\" aria-hidden=\"true\"></i> -->\n                    <a (click)=\"back(null)\" style=\"color: #007276;\"><localize key=\"explorer.root.label\"></localize></a>\n                  </li>\n                  <li *ngFor=\"let entity of breadcrumbs; last as isLast\" [ngClass]=\"{'active':isLast}\">\n                    <a *ngIf=\"!isLast\" (click)=\"back(entity)\" style=\"color: #007276;\"> {{entity.properties.displayLabel.localizedValue}}</a>\n                    <span *ngIf=\"isLast\">\n                      <b>{{entity.properties.displayLabel.localizedValue}}</b>\n                    </span>\n                  </li>\n                </ul>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.date.label\"></localize>\n                  </label>\n                  <input style=\"width: 100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n                </div>\n              </div>\n            </div>\n\n            <!-- Search bar -->\n            <!-- <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\"> -->\n                  <!-- \n                        <input class=\"form-control search-input\" type=\"text\" placeholder=\"Search...\" [(ngModel)]=\"search\"\n                          [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"handleClick($event)\"\n                          [typeaheadOptionsLimit]=\"10\" [typeaheadItemTemplate]=\"bsItemTemplate\" typeaheadOptionField=\"label\"\n                          [ngModelOptions]=\"{standalone: true}\" (keydown.enter)=\"$event.preventDefault()\" />\n -->\n                <!-- </div>\n              </div>\n            </div> -->\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.hierarchy.label\"></localize>\n                  </label>\n                  <select id=\"hierarchy\" name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" (change)=\"refresh()\"  required>\n                    <option></option>\n                    <option *ngFor=\"let hierarchy of data.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label.localizedValue}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"location-management-widget-section\">\n                  <label>\n                    <localize key=\"explorer.hierarchy.branch.label\"></localize>\n                  </label>\n                  <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"childType\" (change)=\"refresh()\" required>\n                    <option></option>\n                    <option *ngFor=\"let type of data.types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n                  <div class=\"list-group\">\n\n                    <div *ngFor=\"let node of data.geojson.features; let i = index\" class=\"list-group-item\">\n                      <!-- Single column card -->\n                      <div class=\"card card-default\" (click)=\"zoomToFeature(node, $event)\" >\n                        <div class=\"card-body\">\n                          <i class=\"fa fa-level-down clickable\" style=\"float: right;\" aria-hidden=\"true\" (click)=\"select(node, $event)\" title=\"Drill into location\"></i>\n                          <h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"Zoom to location\">{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n                        </div>\n                      </div>\n                    </div>\n\n                <!-- <tab heading=\"Context Layers\"> \n                  <div class=\"list-group\">\n                    <div *ngFor=\"let list of lists; let i = index\" class=\"list-group-item\">\n                      {{ list.displayLabel.localizedValue }}\n                      <div class=\"list-group\">\n                        <div *ngFor=\"let version of list.versions\" class=\"list-group-item\">\n                          <input type=\"checkbox\" (click)=\"toggleContextLayer(version.oid)\"> {{ version.forDate }}\n                        </div>\n                      </div>\n                    </div>\n                  </div>              \n                </tab>  -->\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-md-9\" id=\"site-explorer-map\">\n        <div class=\"row\">\n          \n          <article class=\"base-layer-panel\">\n            <div class=\"layer-toggle\" (mouseenter)=\"baselayerIconHover = true\" (mouseleave)=\"baselayerIconHover = false\">\n              \n              <i class=\"fa fa-bars\" *ngIf=\"!baselayerIconHover\" style=\"vertical-align: middle; font-size: 18px; color: black;\"></i>\n              <div *ngIf=\"baselayerIconHover\">\n\n                <div style=\"margin-bottom: 10px;\">\n                  <h4>\n                    <localize key=\"explorer.base.layers.label\"></localize>\n                  </h4>\n                  <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n                    <input class=\"layer-toggle-input\" type='radio' name='rtoggle' [value]='baseLayer.id' [checked]=\"baseLayer.selected\" (change)=\"handleBasemapStyle(baseLayer)\"> \n                    <label class=\"layer-toggle-label\">{{baseLayer.label}}</label>\n                  </div>\n                </div>\n\n                <div *ngIf=\"hasEnabledContextLayers()\">\n                  <h4>\n                    <localize key=\"explorer.context.layers.label\"></localize>\n                  </h4>\n                  <div class=\"list-group\">\n                    <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                      <div *ngIf=\"groupHasEnabledContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border:none;\">\n                        <label>{{ cLayerGroup.displayLabel }}</label>\n                        <div class=\"list-group\">\n                          <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                            <div class=\"list-group-item\" style=\"border:none;\" *ngIf=\"cLayer.enabled\">\n                              <input type=\"checkbox\" [checked]=\"cLayer.active\" (click)=\"toggleContextLayer(cLayer.oid)\"> \n                         \n                              <!-- <boolean-field [(value)]=\"cLayer.active\" [label]=\"cLayer.displayLabel\" (change)=\"toggleContextLayer(cLayer.oid)\"></boolean-field> -->\n\n\n                              {{ cLayer.displayLabel }}\n                              <i class=\"fa fa-times delete-btn clickable\" aria-hidden=\"true\" (click)=\"removeContextLayer(cLayer)\"></i>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                  </div>\n                </div>\n\n                <button class=\"btn btn-primary\" (click)=\"addContextLayerModal()\" >+ Add Context Layer</button>\n              </div>\n\n            </div>\n          </article>\n\n          <div id=\"map\" class=\"map-view-port\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nimport { MasterList, ContextLayer, ContextLayerGroup } from '../../model/registry';\n\n\n@Component( {\n    selector: 'context-layer-modal',\n    templateUrl: './context-layer-modal.component.html',\n    styleUrls: ['./location-manager.css']\n} )\nexport class ContextLayerModalComponent {\n\n    contextLayerGroups: ContextLayerGroup[];\n\n\n    /*\n     * Called on confirm\n     */\n    public onSubmit: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onSubmit = new Subject();\n    }\n\n    groupHasContextLayers(group:string): boolean {\n\t\tlet hasCLayers = false;\n\t\tthis.contextLayerGroups.forEach(cLayerGroup => {\n\t\t\tif(cLayerGroup.oid === group && cLayerGroup.contextLayers.length > 0){\n\t\t\t\thasCLayers = true;\n\t\t\t}\n\t\t});\n\t\t\n\t\treturn hasCLayers;\n\t}\n\n    confirm(): void {\n        this.onSubmit.next( this.contextLayerGroups );\n        this.bsModalRef.hide();\n    }\n\n}\n","<div class=\"modal-body\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"explorer.add.context.layers.modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"list-group\">\n                        <div *ngFor=\"let cLayerGroup of contextLayerGroups;\" >\n                            <div *ngIf=\"groupHasContextLayers(cLayerGroup.oid)\" class=\"list-group-item\" style=\"border: none;\">\n                                <h4>{{ cLayerGroup.displayLabel }}</h4>\n                                <div class=\"list-group\">\n                                    <div *ngFor=\"let cLayer of cLayerGroup.contextLayers\">\n                                        <input type=\"checkbox\" [checked]=\"cLayer.enabled\" (change)=\"cLayer.enabled = !cLayer.enabled\" style=\"margin-left: 10px;\"> {{ cLayer.displayLabel }}\n                                        \n                                        <!-- <boolean-field [(value)]=\"cLayer.enabled\" [label]=\"cLayer.displayLabel\"></boolean-field> -->\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>  \n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { GeoObjectOverTime, GeoObjectType } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\nimport { ErrorHandler } from '../../../../../shared/component/error-handler/error-handler';\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-create-geo-object',\n    templateUrl: './detail.component.html',\n    styleUrls: ['./crtable-detail-create-geo-object.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    readOnly: boolean = true;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if ( this.isNew() ) {\n            this.preGeoObject = this.postGeoObject;\n        }\n\n        this.onSelect( this.action );\n    }\n\n    isNew(): boolean {\n        return ( this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\" );\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n        }\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSelect( action: AbstractAction ) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n            this.registryService.getGeoObjectOverTime( this.postGeoObject.attributes.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( \"Error\", err );\n                this.error( err );\n            } );\n        }\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( true );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( false );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading\">\n        <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <div>\n        <label class=\"detail-label\">GeoObjectType : </label>\n        <label class=\"detail-value\">{{action.geoObjectType.code}}</label>\n      </div>\n    \n      <div>\n        <localize key=\"changeOverTime.forDate\"></localize>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n        <!-- \n\t  <label class=\"detail-label\">Label : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.displayLabel\">\n\t  \n\t  <label class=\"detail-label\">Code : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.code\">\n\t  -->\n\n        <geoobject-shared-attribute-editor \n          #attributeEditor\n          *ngIf=\"preGeoObject\"\n          [readOnly]=\"readOnly\"\n          [geoObjectType]=\"geoObjectType\"\n          [postGeoObject]=\"postGeoObject\"\n          [preGeoObject]=\"preGeoObject\"\n          [forDate]=\"forDate\"\n          [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n<!-- \n\t      <geoobject-editor-map #geometryEditor *ngIf=\"this.preGeoObject != null && this.postGeoObject != null && this.geoObjectType.isGeometryEditable\" [readOnly]=\"readOnly || !geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [isNew]=\"isNew()\"></geoobject-editor-map>\n -->\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\n\nimport { AddChildAction } from '../../../../model/crtable';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\nimport { ErrorHandler } from '../../../../../shared/component/error-handler/error-handler';\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-add-remove-child',\n    templateUrl: './detail.component.html',\n    styleUrls: []\n} )\nexport class AddRemoveChildDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: AddChildAction;\n\n    original: AddChildAction;\n\n    readOnly: boolean = true;\n\n\n    private bsModalRef: BsModalRef;\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.original = Object.assign( {}, this.action );\n    }\n\n    applyAction() {\n        this.changeRequestService.applyAction( this.action ).then( response => {\n            this.original = Object.assign( {}, this.action );\n\n            this.unlockAction();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n\n            this.action = this.original;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n\n    onSelect( action: AddChildAction ) {\n        this.action = action;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    <div class=\"detail-content\">\n\n        <label class=\"detail-label\">Child UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childId\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Child TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childTypeCode\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentId\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Hierarchy Code : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.hierarchyTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">\n            <localize key=\"change.request.status\"></localize> :\n        </label>\n        <select style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=action.approvalStatus   [disabled]=\"readOnly\">\n            <option value=\"REJECTED\">\n                <localize key=\"change.request.status.rejected\"></localize>\n            </option>\n            <option value=\"ACCEPTED\">\n                <localize key=\"change.request.status.accepted\"></localize>\n            </option>\n            <option value=\"PENDING\">\n                <localize key=\"change.request.status.pending\"></localize>\n            </option>\n        </select>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n        \n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n        \n    </div>\n</div>","import { GeoObjectOverTime, HierarchyOverTime } from './registry';\n\nexport class ChangeRequest {\n  oid: string;\n  createdBy: string;\n  createDate: Date;\n  approvalStatus: string;\n  statusCode: string;\n  total: number;\n  pending: number;\n}\n\nexport class AbstractAction {\n  approvalStatus: string;\n  createActionDate: Date;\n  label: string;\n  oid: string;\n  actionType: string;\n  actionLabel: string;\n}\n\nexport class UpdateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class AddChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyTypeCode: string;\n  contributorNotes: string;\n  maintainerNotes: string;\n}\n\nexport class RemoveChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyCode: string;\n}\n\nexport class GovernanceStatus {\n  key: string;\n  label: string;\n}\n\nexport class PageEvent {\n  type:string;\n  data:any;\n}\n\nexport class SetParentAction extends AbstractAction {\n  childCode: string;\n  childTypeCode: string;\n  json: HierarchyOverTime[];\n}\n\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { HierarchyOverTime } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\nimport { ErrorHandler } from '../../../../../shared/component/error-handler/error-handler';\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'set-parent-detail',\n    templateUrl: './set-parent-detail.component.html',\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class SetParentDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    hierarchies: HierarchyOverTime[] = [];\n    readOnly: boolean = true;\n\n    bsModalRef: BsModalRef;\n    \n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;    \n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.hierarchies = this.action.json;\n\n        this.onSelect( this.action );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }    \n\n    onSelect( action: AbstractAction ) {\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n        <div>\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n        </div>    \n    \n        <cascading-geo-selector #parentSelector \n          [hierarchies]=\"this.hierarchies\"\n          [forDate]=\"this.forDate\">\n        </cascading-geo-selector>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.status\"></localize> :\n            </label>\n            <select [disabled]=\"readOnly\" style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=\"action.approvalStatus\">\n                <option value=\"REJECTED\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </option>\n                <option value=\"ACCEPTED\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </option>\n                <option value=\"PENDING\">\n                    <localize key=\"change.request.status.pending\"></localize>\n                </option>\n            </select>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ErrorHandler } from '../../../shared/component/error-handler/error-handler';\n\nimport { IOService } from '../../service/io.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-export',\n    templateUrl: './data-export.component.html',\n    styleUrls: []\n} )\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n\n    constructor( private service: IOService, private modalService: BsModalService, private authService: AuthService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( false ).then( types => {\n        \n            //this.types = types;\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isOrganizationRA(types[i].orgCode))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.types = myOrgTypes;\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onChange( code: string ): void {\n\n        if ( code != null && code.length > 0 ) {\n            this.service.getHierarchiesForType( code, false ).then( hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n\n    }\n\n    onExport(): void {\n\n        if ( this.format == 'SHAPEFILE' ) {\n            window.location.href = acp + '/shapefile/export-shapefile?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n        else if ( this.format == 'EXCEL' ) {\n            window.location.href = acp + '/excel/export-spreadsheet?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { HierarchyNode } from '../model/hierarchy';\nimport { GeoObjectType } from '../model/registry';\n\n@Pipe({\n  name: 'geoobjecttype',\n  pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n  transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n\t  if (!items || !filter) {\n          return items;\n      }\n\t  \n\t  let unassignedGeoObjTypes:string[] = [];\n      this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n      \n      // filter items array, items which match and return true will be\n      // kept, false will be filtered out\n      return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n  }\n  \n  buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void{\n\t  filter.forEach(f => {\n\t\t  this.processHierarchyNodes(f, unassignedGeoObjTypes);\n\t  })\n  }\n  \n  processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]){\n\t  unassignedGeoObjTypes.push(node.geoObjectType)\n\t  \n\t  node.children.forEach(child => {\n\t\t  this.processHierarchyNodes(child, unassignedGeoObjTypes);\n\t  })\n  }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '../../shared/service/event.service';\n\nimport { AllLocaleInfo } from '../model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\nimport { SynchronizationConfigManagerComponent } from './component/synchronization-config/synchronization-config-manager.component';\nimport { SynchronizationConfigComponent } from './component/synchronization-config/synchronization-config.component';\nimport { SyncDetailsComponent } from './component/synchronization-config/details.component';\nimport { LocationManagerComponent } from './component/location-manager/location-manager.component';\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'hierarchies',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'data',\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'change-requests',\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-lists',\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'scheduled-jobs',\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'job/:oid',\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'master-list/:oid/:published',\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'master-list-view/:oid',\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'change-request',\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'tasks',\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'synchronization-configs',\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'synchronization-config/:oid',\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'location-manager',\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'sync/details/:oid',\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class RegistryRoutingModule { }"],"sourceRoot":""}