{"version":3,"sources":["webpack:///./node_modules/moment/locale sync ^\\.\\/.*$","webpack:///./src/app/registry/service/index.ts","webpack:///./src/app/registry/service/list-type.service.ts","webpack:///./src/app/registry/service/business-type.service.ts","webpack:///./src/app/registry/service/classification.service.ts","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/service/classification-type.service.ts","webpack:///./src/app/registry/service/registry-cache.service.ts","webpack:///./src/app/registry/service/transition-event.service.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/shared/component/web-sockets/web-sockets.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-editor.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/synchronization-config.service.ts","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field.component.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-util.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-visualizer.component.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-visualizer.component.html","webpack:///./src/app/registry/service/relationship-visualization.service.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/location-manager/layer-panel.component.ts","webpack:///./src/app/registry/component/location-manager/layer-panel.component.html","webpack:///./src/app/registry/component/location-manager/feature-panel.component.ts","webpack:///./src/app/registry/component/location-manager/feature-panel.component.html","webpack:///./src/app/registry/model/list-type.ts","webpack:///./src/app/registry/component/list-type/publish-modal.component.ts","webpack:///./src/app/registry/component/list-type/publish-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/import-types-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field-modal.component.ts","webpack:///./src/app/registry/component/form-fields/classification-field/classification-field-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-type.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/dataimporter.component.ts","webpack:///./src/app/registry/component/importer/dataimporter.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/change-request-change-over-time-attribute-editor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-export-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/dhis2-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-manager.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config-modal.component.html","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/fhir-import-synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.ts","webpack:///./src/app/registry/component/synchronization-config/synchronization-config.component.html","webpack:///./src/app/registry/component/synchronization-config/details.component.ts","webpack:///./src/app/registry/component/synchronization-config/details.component.html","webpack:///./src/app/registry/component/location-manager/location-manager.component.ts","webpack:///./src/app/registry/component/location-manager/location-manager.component.html","webpack:///./src/app/registry/model/location-manager.ts","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.ts","webpack:///./src/app/registry/component/location-manager/select-type-modal.component.html","webpack:///./src/app/registry/component/location-manager/record-panel.component.ts","webpack:///./src/app/registry/component/location-manager/record-panel.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-table.component.html","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.ts","webpack:///./src/app/registry/component/transition-event/transition-event-modal.component.html","webpack:///./src/app/registry/component/business-type/business-type-manager.component.ts","webpack:///./src/app/registry/component/business-type/business-type-manager.component.html","webpack:///./src/app/registry/component/business-type/modals/create-business-type-modal.component.ts","webpack:///./src/app/registry/component/business-type/modals/create-business-type-modal.component.html","webpack:///./src/app/registry/component/business-type/modals/manage-business-type-modal.component.ts","webpack:///./src/app/registry/component/business-type/modals/manage-business-type-modal.component.html","webpack:///./src/app/registry/component/business-table/business-table.component.ts","webpack:///./src/app/registry/component/business-table/business-table.component.html","webpack:///./src/app/registry/component/business-importer/business-importer.component.ts","webpack:///./src/app/registry/component/business-importer/business-importer.component.html","webpack:///./src/app/registry/component/historical-report/historical-report.component.ts","webpack:///./src/app/registry/component/historical-report/historical-report.component.html","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.ts","webpack:///./src/app/registry/component/historical-event-module/historical-event-module.component.html","webpack:///./src/app/registry/component/list-type/list-type-manager.component.ts","webpack:///./src/app/registry/component/list-type/list-type-manager.component.html","webpack:///./src/app/registry/component/list-type/lists-for-type.component.ts","webpack:///./src/app/registry/component/list-type/lists-for-type.component.html","webpack:///./src/app/registry/component/list-type/list-type.component.ts","webpack:///./src/app/registry/component/list-type/list-type.component.html","webpack:///./src/app/registry/component/list-type/publish-version.component.ts","webpack:///./src/app/registry/component/list-type/publish-version.component.html","webpack:///./src/app/registry/component/list-type/list.component.ts","webpack:///./src/app/registry/component/list-type/list.component.html","webpack:///./src/app/registry/component/list-type/export-format-modal.component.ts","webpack:///./src/app/registry/component/list-type/export-format-modal.component.html","webpack:///./src/app/registry/component/curation/curation-job.component.ts","webpack:///./src/app/registry/component/curation/curation-job.component.html","webpack:///./src/app/registry/component/classification-type/classification-type-manager.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type-manager.component.html","webpack:///./src/app/registry/component/classification-type/classification-type-publish-modal.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type-publish-modal.component.html","webpack:///./src/app/registry/component/classification-type/classification-type.component.ts","webpack:///./src/app/registry/component/classification-type/classification-type.component.html","webpack:///./src/app/registry/component/classification-type/classification-publish-modal.component.ts","webpack:///./src/app/registry/component/classification-type/classification-publish-modal.component.html","webpack:///./src/app/registry/component/hierarchy/d3/svg-hierarchy-node.ts","webpack:///./src/app/registry/component/relationship-visualizer/relationship-viz-layout.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/HierarchyCREditor.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/StandardAttributeCRModel.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-model.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/stability-period.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/standard-attribute-editor.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.ts","webpack:///./src/app/registry/component/tree-geo-selector/tree-geo-selector.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.ts","webpack:///./src/app/registry/component/location-manager/geometry-panel.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/registry-routing.module.ts","webpack:///./src/app/registry/model/classification-type.ts","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.ts","webpack:///./src/app/registry/component/curation/curation-problem-modal.component.html","webpack:///./src/app/registry/service/geometry.service.ts","webpack:///./src/app/registry/registry.module.ts"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","services","ChangeRequestService","HierarchyService","IOService","LocalizationManagerService","MapService","RegistryService","SynchronizationConfigService","TaskService","GeometryService","http","eventService","listForType","typeCode","params","HttpParams","set","this","start","get","registry","contextPath","pipe","finalize","complete","toPromise","entries","oid","versions","getVersion","apply","list","headers","HttpHeaders","post","JSON","stringify","createEntries","remove","createVersion","entry","metadata","applyVersion","removeVersion","page","criteria","pageConfig","showInvalid","record","uid","showOverlay","values","value","attributeName","filters","length","publishList","getAllLists","getPublicVersions","append","getGeospatialVersions","startDate","endDate","getBounds","getCurationInfo","version","onlyUnresolved","pageNumber","pageSize","curation","curationId","toString","getCurationPage","createCurationJob","listTypeVersionId","submitErrorResolve","config","setResolution","problem","resolution","problemId","getJob","historyOid","ListTypeService","Injectable","getByOrganization","getAll","type","edit","unlock","addAttributeType","attribute","attributeType","updateAttributeType","deleteAttributeType","BusinessTypeService","classificationCode","parentCode","classification","isNew","move","getChildren","getAncestorTree","rootCode","search","text","ClassificationService","SummaryKey","Document","Geometry","ValueOverTimeDiff","AbstractAction","actionType","ActionTypes","CREATEGEOOBJECTACTION","CreateGeoObjectAction","UPDATEATTRIBUTETACTION","attributeDiff","valuesOverTime","UpdateAttributeOverTimeAction","UpdateAttributeAction","ChangeRequestCurrentObject","UpdateChangeRequestCurrentObject","getActionsForAttribute","cr","hierarchyCode","actions","newActions","i","action","updateAttrAction","push","ChangeRequest","GovernanceStatus","PageEvent","implementDecisions","request","update","setActionStatus","actionOid","status","getAllRequests","filter","sort","rejectChangeRequest","delete","requestId","deleteFile","crOid","fileId","vfOid","classificationType","ClassificationTypeService","service","subscription","typeCache","GeoObjectTypeCache","baseUrl","WebSockets","buildBaseUrl","notifier","webSocket","subscribe","message","refresh","getTypeCache","RegistryCacheService","getPage","attrConditions","getDetails","event","eventId","getHistoricalReport","TransitionEventService","key","disabled","inlinelayout","valueChange","EventEmitter","LocalizedTextComponent","Component","selector","templateUrl","styleUrls","Input","Output","ImportSheet","Location","Term","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","changeRequestEditor","lService","geomService","authService","dateService","registryService","postGeoObject","showAllInstances","tabIndex","attributeExcludes","readOnly","isGeometryInlined","modifiedTermOption","currentTermOption","requestedDate","calculatedDate","calculatedDateChange","forDate","datasetId","geoObjectAttributeExcludes","showStabilityPeriods","ngOnInit","geometryAttributeType","getAttribute","AttributeType","LocalizedValue","parentAttributeType","changeRequest","createNewChangeRequest","ChangeRequestEditor","geoObjectType","hierarchies","shouldForceSetExist","changePage","got","current","orgCode","organizationCode","isSRA","isOrganizationRA","isGeoObjectTypeOrSuperRM","isGeoObjectTypeOrSuperRC","setFilterDate","date","manageVersions","forEach","manageVersion","emit","getChangeRequestEditor","approvalStatus","createAction","geoObjectJson","parentJson","attributes","undefined","name","nextPage","destroy","hasChanges","len","hasErrors","attributeEditors","getEditors","filteredEditors","editor","indexOf","isValid","hierarchy","getEditorForAttribute","invalid","existsAttribute","GeoObjectType","existsEditor","prototype","hasOwnProperty","call","allValid","att","validate","getActions","GeoObjectSharedAttributeEditorComponent","ManageVersionsComponent","DatePipe","trigger","transition","style","opacity","animate","state","left","providers","animations","attributeForm","ViewChild","ViewChildren","LocalizedInputComponent","cdr","excludeDescription","attributeChange","classifications","ngAfterViewInit","detectChanges","ngOnChanges","changes","then","resultSet","ngOnDestroy","handleOnSubmit","toggleIsUnique","unique","onAnimationDone","label","localeValues","precision","scale","AttributeInputComponent","window","location","protocol","hostname","port","TREE_SCALE_FACTOR_X","TREE_SCALE_FACTOR_Y","DEFAULT_NODE_FILL","DEFAULT_NODE_BANNER_COLOR","INHERITED_NODE_FILL","INHERITED_NODE_BANNER_COLOR","RELATED_NODE_BANNER_COLOR","Instance","hierarchyService","modalService","contextMenuService","localizeService","userOrganization","currentHierarchy","instance","geoObjectTypes","hierarchiesByOrg","typesByOrg","filteredHierarchiesByOrg","filteredTypesByOrg","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","_opened","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","fromEvent","searchInput","nativeElement","Boolean","debounceTime","distinctUntilChanged","tap","onFilterChange","localize","decode","renderTree","rootGeoObjectTypes","d3","select","canDrag","overflowDiv","scrollLeft","scrollRight","svg","attr","primarySvgHierarchy","SvgHierarchyType","render","calculateSvgViewBox","overflowDiv2","calculateCanDrag","getBBox","x","y","width","height","xPadding","yPadding","hierarchyComponent","getNodeByCode","isAbstract","child","superTypeCode","calculateRelatedHierarchies","relatedHiers","hierarchyType","descendants","find","data","inheritedHierarchyCode","registerDragHandlers","deltaX","deltaY","that","dropTargets","dropSelector","onDrag","dragEl","dropEl","emptyHierarchyDropZone","closest","onDrop","addChild","mouseTarget","clearDropZones","lastDropEl","svgMousePoint","svgPoint","sourceEvent","pageX","pageY","getD3Tree","isPointWithin","dropZoneBbox","activeDropZones","parent","gotRectW","gotRectH","clearGhostNodes","isDragGroup","classed","dropNode","isDropGroup","findGeoObjectTypeByCode","dropElX","parseInt","dropElY","childW","childH","dzg","dropTargetHasChildren","children","isChildDZActive","childDzBacker","childDz","addChildLabel","childDzText","calculateTextWidth","parentDzBacker","gotHeaderH","parentDz","addParentLabel","parentDzText","ghostCode","parentIndex","addSiblingLabel","splice","ghostingCode","siblingGhostBody","getBboxFromSelection","activeDz","dragGot","youngest","insertBetweenTypes","ghostNode","drag","on","rect","getBoundingClientRect","top","selThis","target","document","elementFromPoint","selectAll","each","sidebarDragHandler","registerSvgHandlers","startPoint","svgGot","getPos","setPos","split","svgDragHandler","findHierarchyByCode","ht","findOrganizationByCode","organizations","org","parentGeoObjectTypeCode","childGeoObjectTypeCode","addChildToHierarchy","index","relatedHierarchies","refreshPrimaryHierarchy","catch","err","error","middleGeoObjectTypeCode","youngestGeoObjectTypeCode","isRA","dropZone","getTypesByOrg","orgTypes","getHierarchiesByOrg","orgHierarchies","desiredHierarchy","init","response","setLocales","locales","setGeoObjectTypes","types","getMyOrganizations","findIndex","arrayMove","pos","getGeoObjectTypePosition","setHierarchies","setNodesOnInit","updateViewDatastructures","setAbstractTypes","a","b","localizedValue","toLowerCase","setType","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","h","setCurrentHierarchy","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","getHierarchyLabel","geoObjectTypeCode","gOT","show","next","childType","nodeMenuComponent","leafMenuComponent","item","preventDefault","stopPropagation","treeModel","setFocusedNode","isExpanded","collapse","expandAll","hierarchyOnClick","createHierarchy","bsModalRef","CreateHierarchyTypeModalComponent","animated","backdrop","ignoreBackdropClick","class","content","onHierarchytTypeCreate","nameA","toUpperCase","nameB","deleteHierarchyType","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","description","progress","acknowledgement","disclaimer","useConstraints","accessConstraints","contact","phoneNumber","email","isPrimaryHierarchy","createGeoObjectType","groupSuperType","CreateGeoObjTypeModalComponent","onGeoObjTypeCreate","deleteGeoObjectType","ModalTypes","danger","removeGeoObjectType","errCallback","manageGeoObjectType","ManageGeoObjectTypeModalComponent","onGeoObjectTypeSubmitted","position","removeFromHierarchy","parentGotCode","gotCode","isActive","filtered","setTimeout","handleInheritHierarchy","hierarchyTypeCode","inheritedHierarchyTypeCode","setInheritedHierarchy","handleUninheritHierarchy","removeInheritedHierarchy","importTypes","ImportTypesModalComponent","onNodeChange","ErrorHandler","showErrorAsDialog","HierarchyComponent","static","geoObject","localizationService","onChangeSubject","Subject","generateAttributeEditors","editors","attrs","slice","isChangeOverTime","ChangeRequestChangeOverTimeAttributeEditor","StandardAttributeCRModel","attributeEditor","_isValid","skipExists","findExistingValueOverTimeByOid","attributeCode","vot","onChange","existsAtDate","existEditors","valLen","j","isDelete","between","isNewGeoObject","submitFunction","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","masterListId","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","dateStr","isGeometryEditable","fetchGeoObjectType","fetchLocales","newGeoObjectOverTime","retJson","GeoObjectOverTime","configureFromImportError","importError","historyId","object","parents","importErrorId","parentTreeNode","configureAsExisting","fetchGeoObject","fetchHierarchies","getGeoObjectOverTime","parse","getLocales","getGeoObjectTypes","console","log","typeTypeCode","getHierarchiesForGeoObject","getTypeAheadObservable","Observable","create","observer","getGeoObjectSuggestionsTypeAhead","results","typeaheadOnSelect","ptn","getGeoObjectByCode","properties","canSubmit","cancel","hide","submit","GeoObjectEditorComponent","getHierarchyTypes","getHierarchyGroupedTypes","createHierarchyType","htJSON","updateHierarchyType","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeAbstractTypes","getTypeAncestors","includeInheritedTypes","includeChild","getHierarchiesForType","includeTypes","getHierarchiesForSubtypes","getGeoObjectSuggestions","createGeoObjectSynonym","entityId","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","parentTermCode","termJSON","removeTerm","termCode","getNewLocaleInfo","installLocale","language","country","variant","mapboxgl","accessToken","mapboxAccessToken","roots","getParentGeoObjects","childCode","childTypeCode","parentTypes","recursive","getChildGeoObjects","parentTypeCode","childrenTypes","doesGeoObjectExistAtRange","newGeoObjectInstance","gtJSON","updateGeoObjectType","geoObjTypeId","addAttributeTermTypeOption","term","updateAttributeTermTypeOption","deleteAttributeTermTypeOption","getGeoObject","getGeoObjectBounds","getGeoObjectBoundsAtDate","getScheduledJobs","sortAttr","isAscending","getCompletedScheduledJobs","getScheduledJob","getExportDetails","resolveScheduledJob","submitValidationResolve","geoObjectCode","setAttributeVersions","collection","applyGeoObjectEdit","notes","applyGeoObjectCreate","prop","val","Date","getTime","getDatasetBounds","getOrganizations","getCustomAttrCfg","externalId","getConfigForES","externalSystemId","run","getJobs","getFhirExportImplementations","getFhirImportImplementations","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","modalStepIndicatorService","stateChange","geoObjectTypeChange","newAttribute","modalStepConfig","steps","active","enabled","modalState","GeoObjectTypeModalStates","defineAttribute","termOption","setAttribute","setStepConfig","attributeInputComponent","AttributeTermType","AttributeDecimalType","isFormValid","isAttrValid","getMessageFromError","DefineAttributeModalContentComponent","customStyles","classNames","container","loading","typeahead","unsubscribe","match","displayLabel","setValue","onViewTree","ClassificationFieldModalComponent","onTextChange","ClassificationFieldComponent","editAttribute","assign","onModalStateChange","back","EditAttributeModalContentComponent","enableTermOptionForm","replace","addTermOption","rootTerm","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","openAddTermOptionForm","close","ManageTermOptionsComponent","t","manageTermOption","EditTermOptionInputComponent","point","bbox","fontSize","pt","createSVGPoint","matrixTransform","getScreenCTM","inverse","bbox1","bbox2","selection","DRAW_SCALE_MULTIPLIER","SELECTED_NODE_COLOR","GRAPH_GO_LABEL_COLOR","GRAPH_CIRCLE_FILL","GRAPH_LINE_COLOR","COLLAPSE_ANIMATION_TIME","DIMENSIONS","NODE","WIDTH","HEIGHT","LABEL","FONTSIZE","PADDING","BETWEEN_NODES","NODE_LABEL","NODE_EDGE","spinner","vizService","cacheService","CONSTANTS","OVERLAY","OverlayerIdentifier","VISUALIZER_PANEL","ORIENTATION","Orientation","graphOid","relationship","changeGeoObject","changeRelationship","svgHeight","svgWidth","panToNode$","update$","layout","DagreNodesOnlyLayout","curve","shape","curveLinear","colorSchema","previousValue","currentValue","relationships","fetchRelationships","fetchData","panelOpen","resizeDimensions","graphContainer","getElementById","clientHeight","clientWidth","getHexagonPoints","isHierarchy","relation","radius","n","angleDeg","angleRad","Math","PI","cos","sin","p","join","rel","onSelectRelationship","finally","calculateColorSchema","verticies","vertex","substring","ColorGen","hexString","collapseAnimation","Promise","reject","activeEl","all","querySelectorAll","el","animateTransform","createElementNS","appendChild","beginElement","includeTransform","cloned","cloneNode","newParent","querySelector","onClickNode","doIt","RelationshipVisualizerComponent","relationshipType","graphTypeCode","RelationshipVisualizationService","configurationChange","onNext","onCancel","AttributesPageComponent","property","locations","onBack","LocationPageComponent","hasProblems","locationProblems","resolved","handleError","exclusions","exclusion","LocationProblemPageComponent","termProblems","TermProblemPageComponent","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","navigate","SpreadsheetModalComponent","changeRequestService","geoObjectId","reason","dataSource","myOrgTypes","isGeoObjectTypeRC","handleDateChange","onValidChange","newValid","geometryEditor","getIsValid","changeTypeaheadLoading","SubmitChangeRequestComponent","_stepConfig","StepIndicatorComponent","GRAPH_LAYER","route","draggable","effectAllowed","disable","handle","LAYER_PANEL","includeGraphLayer","layerChange","baseLayerChange","reorder","zoomTo","panelSize","PANEL_SIZE_STATE","MINIMIZED","panelSizeChange","listOrgGroups","layers","graphList","form","currentStartDate","currentEndDate","baseLayers","sprite","url","selected","queryParams","handleParams","graphLayer","versionNumber","open","toggleLayerShowOnLegend","setPanelSize","size","WINDOWED","FULLSCREEN","relativeTo","layersPanelSize","queryParamsHandling","togglePanelOpen","isSearchRequired","layer","findVersionById","handleSearch","lists","reverse","toggleLayersWithCondition","l","isEqual","showOnLegend","listOrgGroup","listTypeGroup","v","condition","clickToggleLayerRendered","toggleLayerRendered","clickToggleLayerShowOnLegend","unshift","rendered","color","prevLayer","onGotoBounds","onCreate","toggleBaseLayer","bl","moveLayerIncrementally","offset","moveLayer","oldLayers","drop","moveItemInArray","previousIndex","currentIndex","LayerPanelComponent","visualizeMode","geometryService","MODE","VERSIONS","ATTRIBUTES","HIERARCHY","GEOMETRY","FEATURE_PANEL","forDateChange","featureChange","modeChange","panelCancel","panelSubmit","mode","isEdit","setValid","valid","updateCode","preGeoObject","setEditMode","editorForDateChange","onCancelInternal","trim","onSubmit","applyInfo","isChangeRequest","stopEditing","onManageAttributeVersion","onManageHiearchyVersion","onEditAttributes","FeaturePanelComponent","VersionMetadata","ListVersionMetadata","ListTypeVersion","ListTypeEntry","ListMetadata","ListType","ListTypeByType","ContextLayer","ContextList","ListTypeGroup","ListOrgGroup","LayerRecord","CurationProblem","CurationJob","iService","currentDate","onListTypeChange","tab","readonly","gap","listByType","write","cache","waitOnTypes","getTypeByCode","listType","organization","typeLabel","floor","random","subtypeHierarchies","listMetadata","originator","collectionDate","process","acknowledgements","contactName","telephoneNumber","geospatialMetadata","topicCategories","placeKeywords","updateFrequency","lineage","languages","scaleResolution","spatialRepresentation","referenceSystem","reportSpecification","distributionFormat","geometryType","includeLatLong","intervalJson","interval","PRESENT","getIsDisabled","elClasses","classList","getAttributeForFilter","onNewFilter","operation","removeFilter","onNewInterval","removeInterval","validOn","publishingStartDate","after","reduce","element","future","s1","e1","s2","e2","dateRangeOverlaps","hasGap","getGeoObjectTypeTermAttributeOptions","termAttributeCode","handleTab","ListTypePublishModalComponent","queueLimit","removeAfterUpload","uploader","FileUploader","onBuildItemForm","fileItem","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","onErrorItem","onSelect","onClick","queue","uploadAll","auth","orgs","organizationLabel","getOrganizationLabelFromCode","isLeaf","isPrivate","toggleIsLeaf","toggleIsGeometryEditable","toggleIsAbstract","confirmBsModalRef","onGeoObjectTypeChange","editGeoObjectType","fetchOrganizationLabel","defineAttributeModal","manageAttributes","removeAttributeType","GeoObjectTypeInputComponent","in","validator","c","geoObjectAttributeCode","GeoObjectAttributeCodeValidator","provide","NG_VALIDATORS","useExisting","multi","Directive","NodeType","nodes","idField","allowDrag","allowDrop","animateExpand","scrollOnActivate","animateSpeed","animateAcceleration","ancestor","build","timeout","getNodeById","setActiveAndVisible","CLASSIFICATION","hasChildren","treeNode","createNodes","concat","ex","cNode","count","LINK","expand","TreeComponent","TermOptionWidgetComponent","svgEl","isPrimary","d3Hierarchy","d3Tree","nodeSize","separation","getCode","SvgHierarchyNode","renderHierarchyHeader","hg","colHeaderLabel","colHeader","headerg","hierarchyLabelW","hierarchyLabelH","headerFontSize","hierarchyLabelY","lineWidth","textWidth","html","d","headerGBbox","getRelatedHierarchies","nodeMouseover","nodeMousemove","nodeTooltipBbox","documentElement","scrollHeight","scrollWidth","nodeMouseleave","descends","insert","gtree","links","source","gHeader","gotHeaderW","MOUSE_HOVER_EVENT_ENTER","MOUSE_HOVER_EVENT_MOVE","MOUSE_HOVER_EVENT_EXIT","gotHeaderFontSize","arrowRectD","gArrow","gotBodyFontSize","gotOptionsButtonFontSize","renderRelatedHierarchiesMenu","cancelText","ShapefileModalComponent","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","LocationProblemComponent","termLabel","termId","createOption","ignoreValue","TermProblemComponent","renderContent","pageTitle","DataPageComponent","sysService","changeDetectorRef","showImportConfig","importStrategies","strategy","ImportStrategy","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","isExternal","isLoading","copyBlank","getExternalSystems","paginatedSystems","externalSystems","views","allHierarchyViews","allTypeViews","len0","view","len2","len9","view2","findType","findHier","filteredHierarchyViews","filteredTypeViews","getUrl","format","importStrategy","externalSystem","sys","onSelectHierarchy","onSelectType","checkDates","setImportSource","checkDateFieldValidity","startDateField","dateFields","dateFieldComponentsArray","toArray","field","inputName","setInvalid","DataImporterComponent","today","todayString","getDateString","objectKeys","requests","columns","filterCriteria","ascending","hasBaseDropZoneOver","isEditing","sortable","snapshot","paramMap","toggleId","uploadRequest","doc","documents","isSorting","onSort","getGOTLabel","onUpload","onDownloadFile","fileOid","href","onDeleteFile","fileOverBase","pageChange","onExecute","getFirstGeoObjectInActions","pageContext","onReject","onDelete","deletedRequestId","onUpdate","applyActionStatusProperties","decisionMaker","getUsername","requestTrackBy","toggle","replaceState","parentElement","className","includes","getActiveDetailComponent","endsWith","isRequestTooOld","firstAction","UPDATEGEOOBJECTACTION","canEdit","permissions","RequestTableComponent","encapsulation","ViewEncapsulation","None","getEditAction","hierarchyEntry","generateEditors","editAction","validEditors","validateEditors","hasTimeConflict","checkRanges","hasExistConflict","checkExistRanges","includeUnmodified","diff","HierarchyCREditor","ValueOverTimeCREditor","valueOverTime","votDiff","createNewVersion","original","createEmptyHierarchyEntry","hierarchyOverTime","ValueOverTime","constructNewDiff","createEmptyGeometryValue","terms","ChangeType","ADD","changeRequestAttributeEditor","getGeoObjectTimeRangeStorage","getValueFromGeoObjectForDiff","conflictMessages","Set","validateDate","getDateFromDateString","end","validateUpdateReference","missingReference","add","getStartDate","setStartDate","newStartDate","oldStartDate","goRange","oldEndDate","getEndDate","oldValue","newEndDate","removeEmptyDiff","END_DATE","START_DATE","newValue","coordinates","coordinate","Number","parseFloat","toFixed","areValuesEqual","VALUE","setLocalizedValue","diffs","val1","val2","localeValue","lv2","getValueAtLocale","locale","lv1","lv","getValue","updateAction","REMOVE","votc","requestService","elementRef","isValidChange","filterDate","viewModels","isRootOfHierarchy","isInitialized","calculateViewModels","onAddNewVersion","vm","hasLocalizationChanged","viewModel","onDateChange","summaryKey","NEW","reload","VersionDiffView","onApprove","ACCEPTED","REJECTED","onPending","PENDING","pType","loopI","goCode","ancestors","setParentValue","toggleGeometryEditing","setEditing","newLayer","toggleGeometryView","mapRowHeight","getElementsByClassName","offsetHeight","getOrCreateLayer","setRendering","isRendering","toggleOldGeometryView","context","Layer","zindex","LayerColor","geojson","editPropagator","oldLayer","OLD","manualCoordinateChange","newCoordinateX","newCoordinateY","newX","newY","num","latValid","isFinite","abs","longValid","isLongitude","setPointCoordinates","ControlContainer","NgForm","host","viewProviders","isContributorOnly","isContributerOnly","urlSubscriber","highlightOid","ChangeRequestPageComponent","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","pollingData","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","order","jobPos","onViewAllCompleteJobs","onView","onCancelScheduledJob","jobId","onResolveScheduledJob","ScheduledJobsComponent","allSelected","timeCounter","isPolling","hasRowValidationProblem","onPageChange","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onEdit","JobConflictModalComponent","onConflictAction","importErrors","problems","exception","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","ReuploadModalComponent","JobComponent","onProblemResolvedListener","onEditGeoObject","editModal","ImportProblemWidgetComponent","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","title","warning","confirm","errorMessage","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onToggleCompletedTasks","TaskViewerComponent","rService","implementations","reset","fieldChange","levels","level","onSelectMasterList","addLevel","versionId","removeLevel","FhirExportSynchronizationConfigComponent","DEFAULT_MAPPING_STRATEGY","cOrg","levelRows","orgUnitGroups","levelRow","levelNum","isAttributeEditor","system","esConfig","clearMappingData","onChangeHierarchy","buildDefaultMappings","attributeMappingStrategy","isOrgUnitGroup","cgrAttrName","dhis2Id","dhis2AttrName","lvl","mappings","orgUnitGroupId","onSelectLevelType","attrCfg","editorIndex","getEditorIndex","mapping","attrConfigInfos","info","cgrAttr","deleteMapping","addNewMapping","levelRowIndex","newLevelNum","configureAttributes","onSelectGeoObjectType","getTermOptions","dhis2Attrs","dhis2Attr","onChangeDHIS2Attr","isDifferentGot","infos","mapCgrAttr","attributeMappingStrategies","onChangeTargetType","Dhis2SynchronizationConfigComponent","SynchronizationConfigModalComponent","onSuccess","onRemove","SynchronizationConfigManagerComponent","isImport","cSystem","oIndex","sIndex","systems","handleFieldChange","onOrganizationSelected","onChangeExternalSystem","implementation","FhirImportSynchronizationConfigComponent","onRun","onGenerateFile","encodeURIComponent","stepLabel","SynchronizationConfigComponent","configService","configOid","exportErrors","SyncDetailsComponent","listService","mapService","pageMode","longitude","latitude","SEARCH","VIEW","currentText","visualizingRelationship","graphPanelOpen","showPanel","preventSingleClick","ready","searchEnabled","graphVisualizerEnabled","windowWidth","innerWidth","windowHeight","innerHeight","handleParameterChange","isRC","isRM","initializeMap","resizeWindow","mapConfig","sources","mapbox","tileSize","glyphs","zoom","attributionControl","bounds","defaultMapBounds","LngLatBounds","logoPosition","Map","initMap","simpleEditControl","addControl","onChangeGeoObject","closeEditSessionSafeguard","geoObj","setData","handleSelect","feature","handleRecord","attrPanelOpen","changeMode","setPanel","resize","togglePanel","removeFeatureState","onModeChange","addLayers","AttributionControl","compact","NavigationControl","visualizePitch","handleMapClickEvent","array","createUrlTree","go","zoomToFeature","onZoomTo","Array","isArray","llb","fitBounds","calculateZoomConfig","SelectTypeModalComponent","result","subsription","cancelEditingSession","resolver","rejecter","features","queryRenderedFeatures","onPanelCancel","clearRecord","onPanelSubmit","saveEdits","backReference","SuccessModalComponent","changeRequestId","cLayer","addLayer","handleBasemapStyle","baseLayer","setStyle","getGeoObjectTypeLabel","getSource","geometry","timer","padding","maxZoom","bottom","round","right","sourceLayer","lFind","setFeatureState","hover","recordType","initialize","featurePanel","featurePanelForDateChange","onLayerChange","findLayer","removeLayer","onReorderLayers","removeSource","otherLayer","addSource","promoteId","paint","addVectorLayer","tiles","navigator","onFeatureSelect","featureText","toggleGraphPanel","LocationManagerComponent","HostListener","LocationInformation","ModalState","onClose","RecordPanelComponent","dateCondition","beforeTypeCondition","filterTypesBasedOnMyOrg","myOrgs","filterChange","TransitionEventModalComponent","onEventChange","deleteEvent","jsEvent","transitionEvent","TransitionEventTableComponent","VIEWPORT_SCALE_FACTOR_X","VIEWPORT_SCALE_FACTOR_Y","GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR","changeDetector","activeTransition","afterTypes","beforeTypes","isGeoObjectTypeRM","beforeTypeCode","afterTypeCode","eventDate","transitions","setActiveTransition","highlight","trans","sourceCode","targetCode","uuid","v4","sourceType","targetType","transitionType","impact","calculateDerivedAttributes","renderVisual","mouseEvent","transitionOid","validChange","isSource","addDay","pair","targetText","sourceText","clear","localizeTransitionImpact","localizeTransitionType","stats","sourceStats","targetStats","updown","typeUpdown","typePart","onChangeTypeUpdown","onDragStart","onDragEnd","onDragged","onDraggableCopied","onDraggableLinked","onDraggableMoved","onDragCanceled","onDragover","newIndex","root","appData","generateAppData","renderingData","generateRenderingData","depth","linkDataMappings","multipleParentLinks","link","d3Data","dx","dy","d3RenderingData","parentNode","childNode","grandChild","isChildOfOtherNode","typeaheadParent","CreateBusinessTypeModalComponent","onBusinessTypeChange","ManageBusinessTypeModalComponent","tt","BusinessTypeManagerComponent","createAttribute","onTypeChange","cols","businessType","header","BusinessTableComponent","styles","businessService","businessTypes","businessTypeCode","BusinessImporterComponent","exportToExcel","HistoricalReportComponent","HistoricalEventModuleComponent","noQueryParams","listId","orgTypesNoGroupMembers","groupTypes","gType","group","groupType","members","grpT","grp","typesByOrgIterEls","els","firstChild","ListTypeManagerComponent","groups","single","incremental","arr","ListsForTypeComponent","collapsed","toggleVersions","showAll","PublishVersionComponent","onCreateEntries","onViewConfiguration","onGotoMap","ListTypeComponent","working","visibility","master","pService","isRefreshing","isWritable","progressSubscription","jobSubscription","refreshColumns","refreshProgress","handleProgressChange","progressNotifier","jobNotifier","handleJobChange","isMember","orderedArray","customAttrs","otherAttrs","coords","onComplete","handleShowInvalidChange","total","setListId","onPublish","jobOid","onNewGeoObject","onExport","matchMode","ExportFormatModalComponent","onFormat","onWheel","onRunCuration","onFilter","ListComponent","goUid","toggleResolution","CurationJobComponent","querySubscription","ClassificationTypePublishModalComponent","ClassificationTypeManagerComponent","onClassificationTypeChange","onMoveNode","getFirstRoot","ClassificationPublishModalComponent","classificationNode","removeTreeNode","from","TREE_ACTIONS","MOVE_NODE","ClassificationTypeComponent","onClassificationChange","svgHierarchyType","dragging","getBbox","inheritNode","heritX","heritY","inheritBbox","uninheritNode","uninheritBbox","getTreeNode","hideRelatedHierarchy","existingSecondary","existingMenu","contextMenuGroup","hasActionsPermissions","titleLabel","actionsTitle","removeFromHierarchyLabel","noRelatedHierLabel","hideRelatedHierarchyLabel","uninheritLabel","inheritLabel","isSecondaryHierarchyRendered","numActions","removeWidth","hideRelatedWidth","uninheritWidth","existingSecondaryCode","secondaryHierarchy","relatedGotHasParents","inheritWidth","relatedHierarchyCode","relatedHierarchy","relatedHierarchyLabel","noHierLabelWidth","heightAdditions","widthPadding","renderSecondaryHierarchy","removeGotFromHierarchy","onClickUninheritHierarchy","onClickInheritHierarchy","myBbox","primaryHierBbox","gSecondary","paddingLeft","secondaryGot","secondaryGotBbox","gConnector","Alignment","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","curveDistance","multigraph","compound","settings","graph","createDagreGraph","dagre","dagreGraph","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","_nodes","dimension","edges","edge","updateEdge","sourceNode","targetNode","rankAxis","orderAxis","rankDimension","dir","startingPoint","endingPoint","points","edgeLabelId","matchingEdgeLabel","graphlib","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","dagreNodes","dagreEdges","linkId","newLink","setNode","setEdge","toRoot","allGeoObjectTypes","gObj","selectedGeoObjectType","AddChildToHierarchyModalComponent","onDeleteAttribute","ManageAttributesModalComponent","existRangeStale","immediateParent","invalidParent","parentDoesNotExist","exists","directParent","currentDirectParent","getLowestLevelFromHierarchyEntry","oldParents","newValueStrConcat","removeType","newParents","parentType","HierarchyOverTimeEntry","currentImmediateParent","findAction","component","populate","_value","convertValueForDisplay","calculateSummaryKey","convertDateForDisplay","convertOldValueForDisplay","formatDateForDisplay","attrOpts","hasTime","hasValue","UPDATE","TIME_CHANGE","VALUE_CHANGE","UNMODIFIED","DELETE","summaryKeyData","newKey","localizeSummaryKey","summaryKeyLocalized","conflictMessagesHasSeverity","severity","has","msg","hasError","hasWarning","day","getUTCDate","getUTCFullYear","getUTCMonth","applyAction","saveDraw","startEdit","endEdit","CreateUpdateGeoObjectDetailComponent","latestPeriodIsActive","periods","activeEntry","forDateEntry","infinityDayPadding","dataTimeSpan","_showHint","showHint","generate","timeline","timelines","period","setActiveTimelineEntry","forDateIndex","navigateRelative","amount","nextIndex","sharedAttributeEditor","generatePeriods","generateTimelines","calculateDataTimeSpan","endDay","startDay","displayStartDate","displayEndDate","span","currentTimeline","daysLeft","daysInPeriod","daysInFirstEntry","timelineEntry1","timelineEntry2","timelineEntry","boundaries","startIndex","boundary","isStart","isEnd","endIndex","dlen","formatDate","StabilityPeriodComponent","calculateView","newVal","onValueChange","StandardAttributeEditorComponent","_mapHeight","mapDiv","center","zoomToBbox","zoomToLayersExtent","GeoObjectEditorMapComponent","mapHeight","bboxCode","bboxType","bboxDate","elRef","editEmitter","visible","editSessionEnabled","save","onAdd","SimpleEditControl","customEvent","onManageVersion","cHierarchies","parentMap","calculate","time","pot","getHierarchies","onManageVersions","CascadingGeoSelector","mainForm","isExpandedField","expanded","TreeGeoSelector","curAction","cuDetail","arDetail","spDetail","ActionDetailModalComponent","DataExportComponent","hasConflict","onCloneGeometry","hasDuplicateDate","originalGeoObjectOverTime","geoObjectOverTime","vAttributes","isVersionForHighlight","votArr","getVersionData","vAttribute","getDefaultLocaleVal","defVal","locVal","setDateAttribute","moment","localeData","longDateFormat","setInfinity","onCloneGeometryToNewVersion","GeometryPanelComponent","geoObjectOverTimeInput","transform","items","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","f","GeoObjectTypePipe","Pipe","pure","GeoObjectAttributeExcludesPipe","ToEpochDateTimePipe","routes","path","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","RegistryRoutingModule","LocationStrategy","useClass","HashLocationStrategy","RouterModule","forChild","NgModule","imports","ClassificationType","Classification","ClassificationNode","callback","CurationProblemModalComponent","editingControl","geometryChange","onbeforeunload","destroyMap","removeControl","removeLayers","editingLayer","startEditing","enableEditing","addEditingLayers","rerender","deleteAll","lat","long","featureIds","geoJson","getDrawGeometry","existingIndex","getLayers","getRenderedLayers","setLayers","MapboxDraw","controls","line_string","polygon","trash","combine_features","uncombine_features","userProperties","prefix","sourceName","getLayer","renderGeometryAsLayer","finalSourceName","featureCollection","polygons","lines","coord","extend","getCenter","LngLat","lng","flyTo","essential","polys","subpoly","subline","RegistryModule","CommonModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","TabsModule","CollapseModule","NgxPaginationModule","SharedModule","DndModule","NgxGraphModule","DragDropModule","AccordionModule","forRoot","NgxSpinnerModule","declarations","entryComponents"],"mappings":"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,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,WACA,UAEA,UAEA,OAEA,cACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WAEA,W,8FAEA,4B,wCAyLa4mE,I,iCAAAA,I,sCA1DE,CACP,GAAAhyE,WACA,GAAAH,iBACA,GAAA66B,iCACA,GAAA36B,2BACA,GAAAH,qBACA,GAAAE,UACA,GAAAG,gBACA,GAAAgK,qBACA,GAAA9J,YACA,EAAA4Q,SACA,GAAA88D,oBACA,GAAA1wC,uBACA,GAAAj9B,6BACA,GAAAsK,uBACA,GAAA9E,oBACA,GAAAZ,gBACA,GAAAqE,0BACA,GAAA9C,uBACH,SAjJQ,CACL,EAAA4rE,aACA,EAAAzD,aACA,EAAA0D,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAA1E,sBACA,EAAA2E,UACA,GAAAC,eACA,EAAAC,eACA,GAAAC,gBAAgBC,UAChB,EAAAC,qB,EAtBR,GAyLa,EAAApB,mB,iEAAAA,GAAc,eAhKnB,EAAAtsD,mBACA,EAAA6U,gCACA,EAAAwc,sBACA,EAAA4vB,qCACA,EAAArhD,0BACA,GAAA+/B,yCACA,GAAA0D,yCACA,GAAAd,oCACA,EAAAjmC,kCACA,EAAAshD,kCACA,EAAAx/C,+BACA,EAAA0/C,+BACA,EAAAxxC,qCACA,EAAA+d,wBACA,EAAAjV,wBACA,EAAAI,sBACA,EAAAO,6BACA,EAAA8U,yBACA,EAAA5U,yBACA,EAAAiV,qBACA,EAAAxU,0BACA,GAAAqxC,kBACA,GAAAziC,gCACA,EAAA9X,mCACA,EAAA6Z,0BACA,EAAA/5B,wBACA,EAAAihB,6BACA,EAAA3P,kCACA,EAAAqmB,4BACA,EAAA7W,2BACA,EAAAliB,wBACA,EAAA9G,uBACA,EAAA+F,wCACA,EAAAw4D,yBACA,EAAAv4D,wBACA,EAAA24D,iCACA,EAAAxsC,6BACA,GAAAxS,yBACA,GAAAmjD,+BACA,GAAAC,oBACA,GAAA9D,4BACA,GAAAW,kBACA,EAAA35B,kBACA,EAAA6O,2BACA,GAAAwrB,qBACA,GAAAI,gBACA,GAAAK,2BACA,GAAAj4B,sBACA,GAAAk4B,oBAEA,GAAA3Q,2BACA,GAAA7Z,uBACA,GAAAuB,aACA,GAAAV,0BACA,GAAAS,uBACA,GAAAc,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAAzmB,uBACA,GAAA8lB,6BACA,GAAAyB,oBAEA,GAAA2D,sCACA,GAAAH,oCACA,GAAAkB,+BACA,GAAAI,qBAEA,GAAA0H,yBACA,GAAArvB,oBACA,GAAA+B,sBACA,GAAAspC,uBACA,GAAAhb,8BACA,GAAAL,8BAEA,GAAAgF,6BACA,GAAAJ,iCACA,GAAAE,iCACA,GAAAa,0BACA,GAAAL,uBAEA,GAAAO,0BACA,GAAAC,+BACA,GAAApG,qBACA,GAAAzD,yBAEA,GAAA2K,yBACA,GAAA9vB,8BACA,GAAAmwB,sBACA,GAAAQ,kBACA,GAAAkC,cACA,GAAAtC,wBAEA,GAAAyC,qBACA,GAAAqT,8BAEA,GAAAlT,mCACA,GAAAD,wCACA,GAAAW,4BACA,GAAAN,oCACA,GAAArpC,6BACA,GAAAF,mCAAiC,SA3HjC,EAAAs/C,aACA,EAAAzD,aACA,EAAA0D,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAA1E,sBACA,EAAA2E,UACA,GAAAC,eACA,EAAAC,eAAc,mBAEd,EAAAG,qB,gEAmKKpB,GAAc,E,KAzL1B,EAAAtD,S,MAAS,CACNC,QAAS,CACL,EAAAsD,aACA,EAAAzD,aACA,EAAA0D,YACA,EAAAC,oBACA,EAAAC,iBACA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,WACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAA1E,sBACA,EAAA2E,UACA,GAAAC,eACA,EAAAC,eACA,GAAAC,gBAAgBC,UAChB,EAAAC,kBAEJC,aAAc,CACV,EAAA3tD,mBACA,EAAA6U,gCACA,EAAAwc,sBACA,EAAA4vB,qCACA,EAAArhD,0BACA,GAAA+/B,yCACA,GAAA0D,yCACA,GAAAd,oCACA,EAAAjmC,kCACA,EAAAshD,kCACA,EAAAx/C,+BACA,EAAA0/C,+BACA,EAAAxxC,qCACA,EAAA+d,wBACA,EAAAjV,wBACA,EAAAI,sBACA,EAAAO,6BACA,EAAA8U,yBACA,EAAA5U,yBACA,EAAAiV,qBACA,EAAAxU,0BACA,GAAAqxC,kBACA,GAAAziC,gCACA,EAAA9X,mCACA,EAAA6Z,0BACA,EAAA/5B,wBACA,EAAAihB,6BACA,EAAA3P,kCACA,EAAAqmB,4BACA,EAAA7W,2BACA,EAAAliB,wBACA,EAAA9G,uBACA,EAAA+F,wCACA,EAAAw4D,yBACA,EAAAv4D,wBACA,EAAA24D,iCACA,EAAAxsC,6BACA,GAAAxS,yBACA,GAAAmjD,+BACA,GAAAC,oBACA,GAAA9D,4BACA,GAAAW,kBACA,EAAA35B,kBACA,EAAA6O,2BACA,GAAAwrB,qBACA,GAAAI,gBACA,GAAAK,2BACA,GAAAj4B,sBACA,GAAAk4B,oBAEA,GAAA3Q,2BACA,GAAA7Z,uBACA,GAAAuB,aACA,GAAAV,0BACA,GAAAS,uBACA,GAAAc,sCACA,GAAAC,oCACA,GAAAC,oCACA,GAAAzmB,uBACA,GAAA8lB,6BACA,GAAAyB,oBAEA,GAAA2D,sCACA,GAAAH,oCACA,GAAAkB,+BACA,GAAAI,qBAEA,GAAA0H,yBACA,GAAArvB,oBACA,GAAA+B,sBACA,GAAAspC,uBACA,GAAAhb,8BACA,GAAAL,8BAEA,GAAAgF,6BACA,GAAAJ,iCACA,GAAAE,iCACA,GAAAa,0BACA,GAAAL,uBAEA,GAAAO,0BACA,GAAAC,+BACA,GAAApG,qBACA,GAAAzD,yBAEA,GAAA2K,yBACA,GAAA9vB,8BACA,GAAAmwB,sBACA,GAAAQ,kBACA,GAAAkC,cACA,GAAAtC,wBAEA,GAAAyC,qBACA,GAAAqT,8BAEA,GAAAlT,mCACA,GAAAD,wCACA,GAAAW,4BACA,GAAAN,oCACA,GAAArpC,6BACA,GAAAF,mCAEJphB,UAAW,CACP,GAAAvR,WACA,GAAAH,iBACA,GAAA66B,iCACA,GAAA36B,2BACA,GAAAH,qBACA,GAAAE,UACA,GAAAG,gBACA,GAAAgK,qBACA,GAAA9J,YACA,EAAA4Q,SACA,GAAA88D,oBACA,GAAA1wC,uBACA,GAAAj9B,6BACA,GAAAsK,uBACA,GAAA9E,oBACA,GAAAZ,gBACA,GAAAqE,0BACA,GAAA9C,uBAEJitE,gBAAiB,CACb,EAAAhQ,kCACA,EAAAx/C,+BACA,EAAA0/C,+BACA,EAAAxxC,qCACA,EAAAkB,mCACA,EAAAlR,kCACA,EAAA+tB,wBACA,EAAA3T,0BACA,EAAA2Q,0BACA,EAAA/5B,wBACA,EAAAihB,6BACA,EAAA3P,kCACA,EAAAqmB,4BACA,EAAA7W,2BACA,EAAAjjB,wCACA,EAAAosB,6BACA,GAAAxS,yBACA,GAAA0wC,2BACA,EAAApqB,kBACA,EAAA6O,2BACA,GAAAisB,2BACA,GAAA1pB,0BACA,GAAAS,uBACA,GAAAzlB,uBACA,GAAA+qB,oCACA,GAAAuO,iCACA,GAAAE,iCACA,GAAA9E,8BACA,GAAAlpB,8BACA,GAAAuwB,wBACA,GAAApL,yBACA,GAAAkhB,8BACA,GAAAnT,wCACA,GAAAK,oCACA,GAAAvpC,uC,kCA7HA,EAAA9hB,wCAAuC,SACvC,EAAAw4D,yBAAwB,0IACxB,EAAAv4D,wBAAuB,2EACvB,EAAA24D,kCAAgC,CAGhC,GAAAmE,iC,uBAJA,EAAA98D,wBAAuB,sTAiEvB,GAAA+hB,6BAA4B,gGA3D5B,GAAAk3C,6BAA2B,mB,uBAM3B,GAAA8B,2BAA0B,SA3C1B,EAAAlF,qCAAoC","file":"1.chunk.js","sourcesContent":["var map = {\n\t\"./af\": 868,\n\t\"./af.js\": 868,\n\t\"./ar\": 869,\n\t\"./ar-dz\": 870,\n\t\"./ar-dz.js\": 870,\n\t\"./ar-kw\": 871,\n\t\"./ar-kw.js\": 871,\n\t\"./ar-ly\": 872,\n\t\"./ar-ly.js\": 872,\n\t\"./ar-ma\": 873,\n\t\"./ar-ma.js\": 873,\n\t\"./ar-sa\": 874,\n\t\"./ar-sa.js\": 874,\n\t\"./ar-tn\": 875,\n\t\"./ar-tn.js\": 875,\n\t\"./ar.js\": 869,\n\t\"./az\": 876,\n\t\"./az.js\": 876,\n\t\"./be\": 877,\n\t\"./be.js\": 877,\n\t\"./bg\": 878,\n\t\"./bg.js\": 878,\n\t\"./bm\": 879,\n\t\"./bm.js\": 879,\n\t\"./bn\": 880,\n\t\"./bn-bd\": 881,\n\t\"./bn-bd.js\": 881,\n\t\"./bn.js\": 880,\n\t\"./bo\": 882,\n\t\"./bo.js\": 882,\n\t\"./br\": 883,\n\t\"./br.js\": 883,\n\t\"./bs\": 884,\n\t\"./bs.js\": 884,\n\t\"./ca\": 885,\n\t\"./ca.js\": 885,\n\t\"./cs\": 886,\n\t\"./cs.js\": 886,\n\t\"./cv\": 887,\n\t\"./cv.js\": 887,\n\t\"./cy\": 888,\n\t\"./cy.js\": 888,\n\t\"./da\": 889,\n\t\"./da.js\": 889,\n\t\"./de\": 890,\n\t\"./de-at\": 891,\n\t\"./de-at.js\": 891,\n\t\"./de-ch\": 892,\n\t\"./de-ch.js\": 892,\n\t\"./de.js\": 890,\n\t\"./dv\": 893,\n\t\"./dv.js\": 893,\n\t\"./el\": 894,\n\t\"./el.js\": 894,\n\t\"./en-au\": 895,\n\t\"./en-au.js\": 895,\n\t\"./en-ca\": 896,\n\t\"./en-ca.js\": 896,\n\t\"./en-gb\": 897,\n\t\"./en-gb.js\": 897,\n\t\"./en-ie\": 898,\n\t\"./en-ie.js\": 898,\n\t\"./en-il\": 899,\n\t\"./en-il.js\": 899,\n\t\"./en-in\": 900,\n\t\"./en-in.js\": 900,\n\t\"./en-nz\": 901,\n\t\"./en-nz.js\": 901,\n\t\"./en-sg\": 902,\n\t\"./en-sg.js\": 902,\n\t\"./eo\": 903,\n\t\"./eo.js\": 903,\n\t\"./es\": 904,\n\t\"./es-do\": 905,\n\t\"./es-do.js\": 905,\n\t\"./es-mx\": 906,\n\t\"./es-mx.js\": 906,\n\t\"./es-us\": 907,\n\t\"./es-us.js\": 907,\n\t\"./es.js\": 904,\n\t\"./et\": 908,\n\t\"./et.js\": 908,\n\t\"./eu\": 909,\n\t\"./eu.js\": 909,\n\t\"./fa\": 910,\n\t\"./fa.js\": 910,\n\t\"./fi\": 911,\n\t\"./fi.js\": 911,\n\t\"./fil\": 912,\n\t\"./fil.js\": 912,\n\t\"./fo\": 913,\n\t\"./fo.js\": 913,\n\t\"./fr\": 914,\n\t\"./fr-ca\": 915,\n\t\"./fr-ca.js\": 915,\n\t\"./fr-ch\": 916,\n\t\"./fr-ch.js\": 916,\n\t\"./fr.js\": 914,\n\t\"./fy\": 917,\n\t\"./fy.js\": 917,\n\t\"./ga\": 918,\n\t\"./ga.js\": 918,\n\t\"./gd\": 919,\n\t\"./gd.js\": 919,\n\t\"./gl\": 920,\n\t\"./gl.js\": 920,\n\t\"./gom-deva\": 921,\n\t\"./gom-deva.js\": 921,\n\t\"./gom-latn\": 922,\n\t\"./gom-latn.js\": 922,\n\t\"./gu\": 923,\n\t\"./gu.js\": 923,\n\t\"./he\": 924,\n\t\"./he.js\": 924,\n\t\"./hi\": 925,\n\t\"./hi.js\": 925,\n\t\"./hr\": 926,\n\t\"./hr.js\": 926,\n\t\"./hu\": 927,\n\t\"./hu.js\": 927,\n\t\"./hy-am\": 928,\n\t\"./hy-am.js\": 928,\n\t\"./id\": 929,\n\t\"./id.js\": 929,\n\t\"./is\": 930,\n\t\"./is.js\": 930,\n\t\"./it\": 931,\n\t\"./it-ch\": 932,\n\t\"./it-ch.js\": 932,\n\t\"./it.js\": 931,\n\t\"./ja\": 933,\n\t\"./ja.js\": 933,\n\t\"./jv\": 934,\n\t\"./jv.js\": 934,\n\t\"./ka\": 935,\n\t\"./ka.js\": 935,\n\t\"./kk\": 936,\n\t\"./kk.js\": 936,\n\t\"./km\": 937,\n\t\"./km.js\": 937,\n\t\"./kn\": 938,\n\t\"./kn.js\": 938,\n\t\"./ko\": 939,\n\t\"./ko.js\": 939,\n\t\"./ku\": 940,\n\t\"./ku.js\": 940,\n\t\"./ky\": 941,\n\t\"./ky.js\": 941,\n\t\"./lb\": 942,\n\t\"./lb.js\": 942,\n\t\"./lo\": 943,\n\t\"./lo.js\": 943,\n\t\"./lt\": 944,\n\t\"./lt.js\": 944,\n\t\"./lv\": 945,\n\t\"./lv.js\": 945,\n\t\"./me\": 946,\n\t\"./me.js\": 946,\n\t\"./mi\": 947,\n\t\"./mi.js\": 947,\n\t\"./mk\": 948,\n\t\"./mk.js\": 948,\n\t\"./ml\": 949,\n\t\"./ml.js\": 949,\n\t\"./mn\": 950,\n\t\"./mn.js\": 950,\n\t\"./mr\": 951,\n\t\"./mr.js\": 951,\n\t\"./ms\": 952,\n\t\"./ms-my\": 953,\n\t\"./ms-my.js\": 953,\n\t\"./ms.js\": 952,\n\t\"./mt\": 954,\n\t\"./mt.js\": 954,\n\t\"./my\": 955,\n\t\"./my.js\": 955,\n\t\"./nb\": 956,\n\t\"./nb.js\": 956,\n\t\"./ne\": 957,\n\t\"./ne.js\": 957,\n\t\"./nl\": 958,\n\t\"./nl-be\": 959,\n\t\"./nl-be.js\": 959,\n\t\"./nl.js\": 958,\n\t\"./nn\": 960,\n\t\"./nn.js\": 960,\n\t\"./oc-lnc\": 961,\n\t\"./oc-lnc.js\": 961,\n\t\"./pa-in\": 962,\n\t\"./pa-in.js\": 962,\n\t\"./pl\": 963,\n\t\"./pl.js\": 963,\n\t\"./pt\": 964,\n\t\"./pt-br\": 965,\n\t\"./pt-br.js\": 965,\n\t\"./pt.js\": 964,\n\t\"./ro\": 966,\n\t\"./ro.js\": 966,\n\t\"./ru\": 967,\n\t\"./ru.js\": 967,\n\t\"./sd\": 968,\n\t\"./sd.js\": 968,\n\t\"./se\": 969,\n\t\"./se.js\": 969,\n\t\"./si\": 970,\n\t\"./si.js\": 970,\n\t\"./sk\": 971,\n\t\"./sk.js\": 971,\n\t\"./sl\": 972,\n\t\"./sl.js\": 972,\n\t\"./sq\": 973,\n\t\"./sq.js\": 973,\n\t\"./sr\": 974,\n\t\"./sr-cyrl\": 975,\n\t\"./sr-cyrl.js\": 975,\n\t\"./sr.js\": 974,\n\t\"./ss\": 976,\n\t\"./ss.js\": 976,\n\t\"./sv\": 977,\n\t\"./sv.js\": 977,\n\t\"./sw\": 978,\n\t\"./sw.js\": 978,\n\t\"./ta\": 979,\n\t\"./ta.js\": 979,\n\t\"./te\": 980,\n\t\"./te.js\": 980,\n\t\"./tet\": 981,\n\t\"./tet.js\": 981,\n\t\"./tg\": 982,\n\t\"./tg.js\": 982,\n\t\"./th\": 983,\n\t\"./th.js\": 983,\n\t\"./tk\": 984,\n\t\"./tk.js\": 984,\n\t\"./tl-ph\": 985,\n\t\"./tl-ph.js\": 985,\n\t\"./tlh\": 986,\n\t\"./tlh.js\": 986,\n\t\"./tr\": 987,\n\t\"./tr.js\": 987,\n\t\"./tzl\": 988,\n\t\"./tzl.js\": 988,\n\t\"./tzm\": 989,\n\t\"./tzm-latn\": 990,\n\t\"./tzm-latn.js\": 990,\n\t\"./tzm.js\": 989,\n\t\"./ug-cn\": 991,\n\t\"./ug-cn.js\": 991,\n\t\"./uk\": 992,\n\t\"./uk.js\": 992,\n\t\"./ur\": 993,\n\t\"./ur.js\": 993,\n\t\"./uz\": 994,\n\t\"./uz-latn\": 995,\n\t\"./uz-latn.js\": 995,\n\t\"./uz.js\": 994,\n\t\"./vi\": 996,\n\t\"./vi.js\": 996,\n\t\"./x-pseudo\": 997,\n\t\"./x-pseudo.js\": 997,\n\t\"./yo\": 998,\n\t\"./yo.js\": 998,\n\t\"./zh-cn\": 999,\n\t\"./zh-cn.js\": 999,\n\t\"./zh-hk\": 1000,\n\t\"./zh-hk.js\": 1000,\n\t\"./zh-mo\": 1001,\n\t\"./zh-mo.js\": 1001,\n\t\"./zh-tw\": 1002,\n\t\"./zh-tw.js\": 1002\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1003;","import { ChangeRequestService } from './change-request.service';\nimport { HierarchyService } from './hierarchy.service';\nimport { IOService } from './io.service';\nimport { LocalizationManagerService } from './localization-manager.service';\nimport { MapService } from './map.service';\nimport { RegistryService } from './registry.service';\nimport { SynchronizationConfigService } from './synchronization-config.service';\nimport { TaskService } from './task.service';\nimport { GeometryService} from './geometry.service';\n\nexport const services: any[] = [\n\tChangeRequestService,\n\tHierarchyService,\n\tIOService,\n\tLocalizationManagerService,\n\tMapService,\n\tRegistryService,\n\tSynchronizationConfigService,\n\tTaskService,\n\tGeometryService\n];\n\nexport * from './change-request.service';\nexport * from './hierarchy.service';\nexport * from './io.service';\nexport * from './localization-manager.service';\nexport * from './map.service';\nexport * from './registry.service';\nexport * from './synchronization-config.service';\nexport * from './task.service';\nexport * from './geometry.service';","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\nimport { FilterMetadata } from \"primeng/api\";\n\nimport { EventService } from \"@shared/service\";\nimport { CurationJob, CurationProblem, LayerRecord, ListOrgGroup, ListType, ListTypeByType, ListTypeEntry, ListTypeVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { Observable } from \"rxjs\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { ScheduledJob } from \"@registry/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ListTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    listForType(typeCode: string): Promise<ListTypeByType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeByType>(registry.contextPath + \"/list-type/list-for-type\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    entries(oid: string): Promise<ListType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListType>(registry.contextPath + \"/list-type/entries\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    versions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion[]>(registry.contextPath + \"/list-type/versions\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getVersion(oid: string): Promise<ListTypeVersion> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<ListTypeVersion>(registry.contextPath + \"/list-type/version\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/apply\", JSON.stringify({ list: list }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createEntries(oid: string): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/create-entries\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(list: ListType): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createVersion(entry: ListTypeEntry, metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/create-version\", JSON.stringify({ oid: entry.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    applyVersion(metadata: ListVersionMetadata): Promise<ListTypeVersion> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListTypeVersion>(registry.contextPath + \"/list-type/apply-version\", JSON.stringify({ oid: metadata.oid, metadata: metadata }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeVersion(list: ListTypeVersion): Promise<ListType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ListType>(registry.contextPath + \"/list-type/remove-version\", JSON.stringify({ oid: list.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object, pageConfig: any): Promise<PageResult<Object>> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: pageConfig.oid,\n            showInvalid: pageConfig.showInvalid,\n            criteria: criteria\n        } as any;\n\n        return this.http.post<PageResult<Object>>(registry.contextPath + \"/list-type/data\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    // data(oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string }): Promise<any> {\n    //     let headers = new HttpHeaders({\n    //         \"Content-Type\": \"application/json\"\n    //     });\n\n    //     let params = {\n    //         oid: oid,\n    //         sort: sort\n    //     } as any;\n\n    //     if (pageNumber != null) {\n    //         params.pageNumber = pageNumber;\n    //     }\n\n    //     if (pageSize != null) {\n    //         params.pageSize = pageSize;\n    //     }\n\n    //     if (filter.length > 0) {\n    //         params.filter = filter;\n    //     }\n\n    //     return this.http\n    //         .post<any>(registry.contextPath + \"/list-type/data\", JSON.stringify(params), { headers: headers })\n    //         .toPromise();\n    // }\n\n    record(oid: string, uid: string, showOverlay: boolean = true): Promise<LayerRecord> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            uid: uid\n        };\n\n        if (showOverlay) {\n            this.eventService.start();\n        }\n\n        return this.http\n            .post<LayerRecord>(registry.contextPath + \"/list-type/record\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                if (showOverlay) {\n                    this.eventService.complete();\n                }\n            }))\n            .toPromise();\n    }\n\n    values(oid: string, value: string, attributeName: string, filters: { [s: string]: FilterMetadata }): Promise<string[]> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            oid: oid,\n            attributeName: attributeName\n        } as any;\n\n        if (filters != null) {\n            params.criteria = { filters: filters };\n        }\n\n        if (value != null && value.length > 0) {\n            params.value = value;\n        }\n\n        return this.http\n            .post<string[]>(registry.contextPath + \"/list-type/values\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    publishList(oid: string): Observable<{ jobOid: string }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http.post<{ jobOid: string }>(registry.contextPath + \"/list-type/publish\", JSON.stringify({ oid: oid }), { headers: headers });\n    }\n\n    getAllLists(): Promise<{ label: string, oid: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<{ label: string, oid: string }[]>(registry.contextPath + \"/list-type/list-all\", { params: params })\n            .toPromise();\n    }\n\n    getPublicVersions(oid: string): Promise<ListTypeVersion[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        return this.http\n            .get<ListTypeVersion[]>(registry.contextPath + \"/list-type/get-public-versions\", { params: params })\n            .toPromise();\n    }\n\n    getGeospatialVersions(startDate: string, endDate: string): Promise<ListOrgGroup[]> {\n        let params: HttpParams = new HttpParams();\n\n        if (startDate != null && startDate.length > 0) {\n            params = params.append(\"startDate\", startDate);\n        }\n\n        if (endDate != null && endDate.length > 0) {\n            params = params.append(\"endDate\", endDate);\n        }\n\n        return this.http\n            .get<ListOrgGroup[]>(registry.contextPath + \"/list-type/get-geospatial-versions\", { params: params })\n            .toPromise();\n    }\n\n    getBounds(oid: string, uid?: string): Promise<number[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        if (uid != null) {\n            params = params.append(\"uid\", uid);\n        }\n\n        return this.http\n            .get<number[]>(registry.contextPath + \"/list-type/bounds\", { params: params })\n            .toPromise();\n    }\n\n    getCurationInfo(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<CurationJob> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        return this.http.get<CurationJob>(registry.contextPath + \"/curation/details\", { params: params })\n            .toPromise();\n    }\n\n    getCurationPage(version: ListTypeVersion, onlyUnresolved: boolean, pageNumber: number, pageSize: number): Promise<PageResult<any>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"historyId\", version.curation.curationId);\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<any>>(registry.contextPath + \"/curation/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createCurationJob(version: ListTypeVersion): Promise<CurationJob> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<CurationJob>(registry.contextPath + \"/curation/curate\", JSON.stringify({ listTypeVersionId: version.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    submitErrorResolve(config: any): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/problem-resolve\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setResolution(problem: CurationProblem, resolution: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params: any = { problemId: problem.id };\n\n        if (resolution != null) {\n            params.resolution = resolution;\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/curation/set-resolution\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJob(historyOid: string): Promise<ScheduledJob> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"historyOid\", historyOid);\n\n        return this.http\n            .get<ScheduledJob>(registry.contextPath + \"/list-type/get-publish-job\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { BusinessType, BusinessTypeByOrg } from \"@registry/model/business-type\";\nimport { AttributeType } from \"@registry/model/registry\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { PageResult } from \"@shared/model/core\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class BusinessTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getByOrganization(): Promise<BusinessTypeByOrg[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http.get<BusinessTypeByOrg[]>(registry.contextPath + \"/business-type/get-by-org\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAll(): Promise<BusinessType[]> {\n        let params: HttpParams = new HttpParams();\n\n        this.eventService.start();\n\n        return this.http.get<BusinessType[]>(registry.contextPath + \"/business-type/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<BusinessType> {\n        let params: HttpParams = new HttpParams();\n        params = params.append(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<BusinessType>(registry.contextPath + \"/business-type/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(type: BusinessType): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/apply\", JSON.stringify({ type: type }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(type: BusinessType): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/remove\", JSON.stringify({ oid: type.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/edit\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<BusinessType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<BusinessType>(registry.contextPath + \"/business-type/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    addAttributeType(typeCode: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<AttributeType>(registry.contextPath + \"/business-type/add-attribute\", JSON.stringify({ typeCode: typeCode, attributeType: attribute }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateAttributeType(typeCode: string, attribute: AttributeType): Promise<AttributeType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<AttributeType>(registry.contextPath + \"/business-type/update-attribute\", JSON.stringify({ typeCode: typeCode, attributeType: attribute }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteAttributeType(typeCode: string, attributeName: string): Promise<boolean> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<boolean>(registry.contextPath + \"/business-type/remove-attribute\", JSON.stringify({ typeCode: typeCode, attributeName: attributeName }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object, pageConfig: any): Promise<PageResult<Object>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"criteria\", JSON.stringify(criteria));\n        params = params.set(\"typeCode\", pageConfig.typeCode);\n\n        return this.http\n            .get<PageResult<Object>>(registry.contextPath + \"/business-type/data\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { Classification, ClassificationNode } from \"@registry/model/classification-type\";\nimport { PageResult } from \"@shared/model/core\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ClassificationService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    apply(classificationCode: string, parentCode: string, classification: Classification, isNew: boolean): Promise<Classification> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            classification: classification,\n            isNew: isNew\n        };\n\n        if (parentCode != null) {\n            params[\"parentCode\"] = parentCode;\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<Classification>(registry.contextPath + \"/classification/apply\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(classificationCode: string, code: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            code: code\n        };\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/classification/remove\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    move(classificationCode: string, code: string, parentCode: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        const params = {\n            classificationCode: classificationCode,\n            code: code,\n            parentCode: parentCode\n        };\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/classification/move\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getChildren(classificationCode: string, code: string, pageNumber: number, pageSize: number): Promise<PageResult<Classification>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        if (code != null) {\n            params = params.set(\"code\", code);\n        }\n\n        return this.http.get<PageResult<Classification>>(registry.contextPath + \"/classification/get-children\", { params: params })\n            .toPromise();\n    }\n\n    getAncestorTree(classificationCode: string, rootCode: string, code: string, pageSize: number): Promise<ClassificationNode> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"code\", code);\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        if (rootCode != null) {\n            params = params.set(\"rootCode\", rootCode);\n        }\n\n        return this.http.get<ClassificationNode>(registry.contextPath + \"/classification/get-ancestor-tree\", { params: params })\n            .toPromise();\n    }\n\n    search(classificationCode: string, rootCode: string, text: string): Promise<Classification[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n\n        if (rootCode != null) {\n            params = params.set(\"rootCode\", rootCode);\n        }\n\n        if (text != null) {\n            params = params.set(\"text\", text);\n        }\n\n        return this.http.get<Classification[]>(registry.contextPath + \"/classification/search\", { params: params })\n            .toPromise();\n    }\n\n    get(classificationCode: string, code: string): Promise<Classification> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n        params = params.set(\"code\", code);\n\n        return this.http.get<Classification>(registry.contextPath + \"/classification/get\", { params: params })\n            .toPromise();\n    }\n\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable padded-blocks */\nimport { GeoObjectOverTime, HierarchyOverTime, GeoObjectType, AttributeType } from \"./registry\";\nimport { ActionTypes } from \"./constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\nexport enum SummaryKey {\n    NEW = \"NEW\",\n    UNMODIFIED = \"UNMODIFIED\",\n    DELETE = \"DELETE\",\n    UPDATE = \"UPDATE\",\n    TIME_CHANGE = \"TIME_CHANGE\",\n    VALUE_CHANGE = \"VALUE_CHANGE\",\n}\n\nexport class Document {\n    fileName: string;\n    oid: string;\n}\n\nexport class Geometry {\n    type: string;\n    coordinates: number[][] | number[];\n}\n\nexport class ValueOverTimeDiff {\n    oid: string;\n    action: string; // Can be one of DELETE, UPDATE, CREATE\n    oldValue: any;\n    newValue: any;\n    newStartDate: string;\n    newEndDate: string;\n    oldStartDate: string;\n    oldEndDate: string;\n    parents?: any;\n    oldParents?: any;\n}\n\n// export class AbstractAction {\n//    approvalStatus: string;\n//    createActionDate: Date;\n//    label: string;\n//    oid: string;\n//    actionType: string;\n//    actionLabel: string;\n//    decisionMaker?: string;\n//    documents: Document[];\n// }\n\nexport class AbstractAction {\n    oid: string;\n    actionType: ActionTypes;\n    actionLabel: string;\n    createActionDate: string;\n    contributorNotes?: string;\n    maintainerNotes?: string;\n    additionalNotes?: string;\n    approvalStatus: string;\n    statusLabel: string;\n    createdBy: string;\n    documents: any[];\n    permissions: string[];\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n    geoObjectJson: GeoObjectOverTime;\n    parentJson: HierarchyOverTime[];\n\n    constructor() {\n        super();\n        this.actionType = ActionTypes.CREATEGEOOBJECTACTION;\n    }\n}\n\nexport class UpdateAttributeOverTimeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { \"valuesOverTime\": ValueOverTimeDiff[], hierarchyCode?: string };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = { valuesOverTime: [] };\n    }\n}\n\nexport class UpdateAttributeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { oldValue?: any, newValue?: any };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = {};\n    }\n}\n\nexport class ChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n}\n\nexport class UpdateChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n    geoObject: GeoObjectOverTime;\n}\n\nexport class ChangeRequest {\n    oid: string;\n    createdBy: string;\n    createDate: Date;\n    approvalStatus: string;\n    total: number;\n    pending: number;\n    documents: Document[];\n    actions: AbstractAction[];\n    current?: ChangeRequestCurrentObject & UpdateChangeRequestCurrentObject;\n    type: string; // Can be one of [\"CreateGeoObject\", \"UpdateGeoObject\"]\n    statusLabel?: string;\n    phoneNumber?: string;\n    email?: string;\n    permissions?: string[];\n    isNew?: boolean;\n\n    constructor() {\n        this.isNew = true;\n    }\n\n    public static getActionsForAttribute(cr: ChangeRequest, attributeName: string, hierarchyCode: string): AbstractAction[] {\n        if (cr.type === \"CreateGeoObject\") {\n            return cr.actions;\n        } else {\n            let newActions = [];\n\n            for (let i = 0; i < cr.actions.length; ++i) {\n                let action = cr.actions[i];\n\n                if (action.actionType === \"UpdateAttributeAction\") {\n                    let updateAttrAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === attributeName &&\n                      (attributeName !== \"_PARENT_\" || updateAttrAction.attributeDiff.hierarchyCode === hierarchyCode)) {\n                        newActions.push(cr.actions[i]);\n                    }\n                }\n            }\n\n            return newActions;\n        }\n    }\n}\n\n// export class UpdateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class CreateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class AddChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyTypeCode: string;\n//    contributorNotes: string;\n//    maintainerNotes: string;\n//    createdBy: string;\n// }\n\n// export class RemoveChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyCode: string;\n// }\n\n// export class SetParentAction extends AbstractAction {\n//    childCode: string;\n//    childTypeCode: string;\n//    json: HierarchyOverTime[];\n// }\n\nexport class GovernanceStatus {\n    key: string;\n    label: string;\n}\n\nexport class PageEvent {\n    type: string;\n    data: any;\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { ImportConfiguration } from \"@registry/model/io\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    implementDecisions(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/implement-decisions\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    update(request: ChangeRequest): Promise<ChangeRequest> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ChangeRequest>(registry.contextPath + \"/changerequest/update\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setActionStatus(actionOid: String, status: String): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>(registry.contextPath + \"/changerequest/set-action-status\", JSON.stringify({ actionOid: actionOid, status: status }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getAllRequests(pageSize: number, pageNumber: number, filter: string, sort: any[], oid:string): Promise<PageResult<ChangeRequest>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"filter\", filter);\n        params = params.set(\"sort\", JSON.stringify(sort));\n\n        if (oid != null) {\n            params = params.set(\"oid\", oid);\n        }\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<ChangeRequest>>(registry.contextPath + \"/changerequest/get-all-requests\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    rejectChangeRequest(request: ChangeRequest): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<void>(registry.contextPath + \"/changerequest/reject\", JSON.stringify({ request: request }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(requestId: string): Promise<string> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http.post<string>(registry.contextPath + \"/changerequest/delete\", JSON.stringify({ requestId: requestId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteFile(crOid: string, fileId: string): Promise<ImportConfiguration> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ImportConfiguration>(registry.contextPath + \"/changerequest/delete-file-cr\", JSON.stringify({ crOid: crOid, vfOid: fileId }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { GenericTableService } from \"@shared/model/generic-table\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ClassificationTypeService implements GenericTableService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    apply(classificationType: ClassificationType): Promise<ClassificationType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ClassificationType>(registry.contextPath + \"/classification-type/apply\", JSON.stringify({ classificationType: classificationType }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(type: ClassificationType): Promise<ClassificationType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ClassificationType>(registry.contextPath + \"/classification-type/remove\", JSON.stringify({ oid: type.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    page(criteria: Object): Promise<PageResult<ClassificationType>> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {\n            criteria: criteria\n        } as any;\n\n        return this.http.post<PageResult<ClassificationType>>(registry.contextPath + \"/classification-type/page\", JSON.stringify(params), { headers: headers })\n            .toPromise();\n    }\n\n    get(classificationCode: string): Promise<ClassificationType> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"classificationCode\", classificationCode);\n\n        return this.http.get<ClassificationType>(registry.contextPath + \"/classification-type/get\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\nimport { RegistryService } from \".\";\n\n@Injectable()\nexport class RegistryCacheService {\n\n    typeCache: GeoObjectTypeCache;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n\n    subscription: Subscription = null;\n\n    constructor(private service: RegistryService) {\n        this.typeCache = new GeoObjectTypeCache(this.service);\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"TYPE_CACHE_CHANGE\") {\n                this.typeCache.refresh();\n            }\n        });\n    }\n\n/*\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n    */\n\n    public getTypeCache(): GeoObjectTypeCache {\n        return this.typeCache;\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\nimport { HistoricalRow, TransitionEvent } from \"@registry/model/transition-event\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class TransitionEventService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageSize: number, pageNumber: number, attrConditions: any): Promise<PageResult<TransitionEvent>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"attrConditions\", JSON.stringify(attrConditions));\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<TransitionEvent>>(registry.contextPath + \"/transition-event/page\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getDetails(oid: string): Promise<TransitionEvent> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http.get<TransitionEvent>(registry.contextPath + \"/transition-event/get-details\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/apply\", JSON.stringify({ event: event }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    delete(event: TransitionEvent): Promise<TransitionEvent> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TransitionEvent>(registry.contextPath + \"/transition-event/delete\", JSON.stringify({ eventId: event.oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getHistoricalReport(typeCode: string, startDate: string, endDate: string, pageSize: number, pageNumber: number): Promise<PageResult<HistoricalRow>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", typeCode.toString());\n        params = params.set(\"startDate\", startDate.toString());\n        params = params.set(\"endDate\", endDate.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n        params = params.set(\"pageNumber\", pageNumber.toString());\n\n        this.eventService.start();\n\n        return this.http.get<PageResult<HistoricalRow>>(registry.contextPath + \"/transition-event/historical-report\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-text\",\n    templateUrl: \"./localized-text.component.html\",\n    styleUrls: [\"./localized-text.css\"],\n})\nexport class LocalizedTextComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Input() public inlinelayout: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","\n<div *ngFor=\"let localeValue of value.localeValues\">\n  <div [ngClass]=\"{'row' : inlinelayout, 'row-holder' : !inlinelayout}\" >\n    <div [ngClass]=\"{'col-md-12' : inlinelayout}\">\n      <div class=\"form-group\">\n        <div [ngClass]=\"{'label-holder' : !inlinelayout}\" >\n          <label>\n            <localize [key]=\"key\"></localize>\n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n        </div>\n        <div [ngClass]=\"{'holder' : !inlinelayout}\">\n          <span class=\"text\">\n            <textarea [(ngModel)]=\"localeValue.value\" [disabled]=\"disabled\" [name]=\"'description-' + localeValue.locale\"></textarea>\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/* eslint-disable padded-blocks */\nimport { GeoObjectType } from \"./registry\";\n\nexport class ImportSheet {\n    name: string;\n    attributes: {\n        boolean: string[];\n        date: string[];\n        numeric: string[];\n        text: string[];\n    }\n}\n\nexport class Location {\n    label: string;\n    code: string;\n    target: string;\n    matchStrategy: string;\r\n}\n\nexport class Term {\n    code: string;\n    label: string;\n}\n\nexport class TermProblem {\n    label: string;\n    parentCode: string;\n    mdAttributeId: string;\n    attributeCode: string;\n    attributeLabel: string;\n    action: any;\n    resolved: boolean;\n}\n\nexport class LocationProblem {\n    label: string;\n    type: string;\n    typeLabel: string;\n    parent: string;\n    context: { label: string, type: string }[];\n    action: any;\n    resolved: boolean;\n}\n\nexport class Exclusion {\n    code: string;\n    value: string;\n}\n\nexport class Synonym {\n    label: string;\n    synonymId: string;\n    vOid?: string;\n}\n\nexport class ImportConfiguration {\n    type: GeoObjectType;\n    sheet: ImportSheet;\n    directory: string;\n    filename: string;\n    hierarchy: string;\n    postalCode: boolean;\n    hasPostalCode: boolean;\n    locations: Location[];\n    formatType: string;\n    objectType: string;\n    locationProblems: LocationProblem[];\n    termProblems: TermProblem[];\n    exclusions: Exclusion[];\n    hierarchies: { code: string, label: string }[];\n    startDate: string;\n    endDate: string;\n    isExternal: string;\n    externalSystemId: string;\n    externalSystem?: any;\n    revealGeometryColumn?: any;\n    onValidChange: any;\n    externalIdAttributeTarget: string;\n}\n\n","import { Component, OnInit, ViewChild, Input, ViewChildren, QueryList, Output, EventEmitter } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { GeometryService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, Term, HierarchyOverTime } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, CreateGeoObjectAction, ChangeRequest } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\n\n@Component({\n    selector: \"geoobject-shared-attribute-editor\",\n    templateUrl: \"./geoobject-shared-attribute-editor.component.html\",\n    styleUrls: [\"./geoobject-shared-attribute-editor.css\"],\n    providers: [DatePipe],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"slide\", [\n                state(\"left\", style({ left: 0 })),\n                state(\"right\", style({ left: \"100%\" })),\n                transition(\"* => *\", animate(200))\n            ])\n        ]]\n})\n\n/**\n * IMPORTANT\n * This component is shared between:\n * - crtable (request-table.component.ts)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget (feature-panel.component.ts)\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    // The changed state of the GeoObject in the GeoRegistry\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    showAllInstances: boolean = false;\n\n    tabIndex: number = 0;\n\n    // The current state of the GeoObject in the GeoRegistry\n    //    @Input() action: Action = null;\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isGeometryInlined = false;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n\n    @Input() requestedDate: string = null;\n\n    calculatedDate: string = null;\n\n    @Output() calculatedDateChange = new EventEmitter<string>();\n\n    // used in context of a list where reference back to the list forDate is needed\n    @Input() forDate: string = null;\n    @Input() datasetId: string = null;\n\n    // TODO : This was copy / pasted into manage-versions.component::onDateChange and ChangeRequestEditor::generateAttributeEditors\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"invalid\", \"exists\"];\n\n    @ViewChild(\"attributeForm\") attributeForm;\n\n    @ViewChildren(ManageVersionsComponent) manageVersions: QueryList<any>;\n\n    public parentAttributeType: AttributeType;\n\n    public geometryAttributeType: AttributeType;\n\n    showStabilityPeriods = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private geomService: GeometryService, private authService: AuthService, private dateService: DateService, private registryService: RegistryService) {\n\n    }\n\n    ngOnInit(): void {\n        if (this.attributeExcludes != null) {\n            this.geoObjectAttributeExcludes.push.apply(this.geoObjectAttributeExcludes, this.attributeExcludes);\n\n            if (!this.isGeometryInlined) {\n                this.geoObjectAttributeExcludes.push(\"geometry\");\n            }\n        }\n\n        this.geometryAttributeType = this.getAttribute(\"geometry\");\n        if (this.geometryAttributeType == null) {\n            this.geometryAttributeType = new AttributeType(\"geometry\", \"geometry\", new LocalizedValue(\"Geometry\", null), new LocalizedValue(\"Geometry\", null), true, false, false, true);\n        }\n\n        this.parentAttributeType = new AttributeType(\"_PARENT_\", \"_PARENT_\", new LocalizedValue(\"Parents\", null), new LocalizedValue(\"Parents\", null), true, false, false, true);\n\n        if (this.changeRequest == null) {\n            this.changeRequest = this.createNewChangeRequest();\n        } else {\n            if (!this.changeRequest.actions) {\n                this.changeRequest.actions = [];\n            }\n\n            if (this.changeRequest.actions.length === 0 && this.isNew) {\n                this.changeRequest.actions = this.createNewChangeRequest().actions;\n            }\n        }\n\n        this.changeRequestEditor = new ChangeRequestEditor(this.changeRequest, this.postGeoObject, this.geoObjectType, this.hierarchies, this.geometryAttributeType, this.parentAttributeType, this.lService, this.dateService, this.registryService);\n\n        if (this.shouldForceSetExist()) {\n            this.changePage(3);\n        }\n\n        if (this.isNew) {\n            this.calculatedDate = null;\n        }\n\n        let got = this.changeRequest.current ? this.changeRequest.current.geoObjectType : this.postGeoObject.geoObjectType;\n        let orgCode = got.organizationCode;\n\n        // Don't show the stability bar on the Change Requests page.\n        // Change Requests don't have oid when the page is loaded for non-change request use cases.\n        if (!this.changeRequest.oid) {\n            this.showStabilityPeriods = (this.authService.isSRA() || this.authService.isOrganizationRA(orgCode) || this.authService.isGeoObjectTypeOrSuperRM(got) || this.authService.isGeoObjectTypeOrSuperRC(got));\n        }\n\n        this.showAllInstances = (this.changeRequestEditor.changeRequest.isNew || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\");\n    }\n\n    setFilterDate(date: string, refresh: boolean = true) {\n        this.calculatedDate = date;\n\n        if (this.manageVersions != null) {\n            this.manageVersions.forEach(manageVersion => manageVersion.setFilterDate(this.calculatedDate, refresh));\n        }\n\n        this.calculatedDateChange.emit(this.calculatedDate);\n    }\n\n    getChangeRequestEditor(): ChangeRequestEditor {\n        return this.changeRequestEditor;\n    }\n\n    createNewChangeRequest(): ChangeRequest {\n        let cr = new ChangeRequest();\n        cr.approvalStatus = \"PENDING\";\n        cr.actions = [];\n\n        if (this.isNew) {\n            cr.type = \"CreateGeoObject\";\n\n            let createAction: CreateGeoObjectAction = new CreateGeoObjectAction();\n            createAction.geoObjectJson = this.postGeoObject;\n            createAction.parentJson = this.hierarchies;\n            cr.actions[0] = createAction;\n        } else {\n            cr.type = \"UpdateGeoObject\";\n        }\n\n        return cr;\n    }\n\n    shouldForceSetExist() {\n        if (!this.readOnly) {\n            if (this.isNew) {\n                const action: CreateGeoObjectAction = this.changeRequestEditor.changeRequest.actions[0] as CreateGeoObjectAction;\n\n                let values = action.geoObjectJson.attributes[\"exists\"].values;\n\n                if (values && values.length > 0) {\n                    let value = values[0];\n\n                    return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                }\n            } else {\n                let isNew = this.changeRequestEditor.changeRequest.isNew;\n\n                if (isNew && !this.readOnly && this.postGeoObject.attributes[\"exists\"]) {\n                    let values = this.postGeoObject.attributes[\"exists\"].values;\n\n                    if (values && values.length > 0) {\n                        let value = values[0];\n\n                        return value.startDate == null || value.endDate == null || value.value === undefined || value.value === null;\n                    }\n                }\n\n                return isNew && !this.readOnly;\n            }\n        }\n\n        return !this.readOnly;\n    }\n\n    getAttribute(name: string): AttributeType {\n        if (name === \"_PARENT_\") {\n            return this.parentAttributeType;\n        } else if (name === \"geometry\") {\n            return this.geometryAttributeType;\n        }\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            if (this.geoObjectType.attributes[i].code === name) {\n                return this.geoObjectType.attributes[i];\n            }\n        }\n\n        return null;\n    }\n\n    changePage(nextPage: number): void {\n        if (this.shouldForceSetExist() && nextPage !== 3) {\n            return;\n        }\n\n        this.geomService.destroy(false);\n\n        this.tabIndex = nextPage;\n    }\n\n    hasChanges(tabIndex: number) {\n        let len = this.changeRequest.actions.length;\n\n        if (len > 0) {\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.changeRequest.actions[i];\n\n                if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                    return true;\n                } else if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeOverTimeAction = action as UpdateAttributeOverTimeAction;\n\n                    if (updateAttrAction.attributeName === \"_PARENT_\" && tabIndex === 1) {\n                        return true;\n                    } else if (updateAttrAction.attributeName === \"geometry\" && tabIndex === 2) {\n                        return true;\n                    } else if ((updateAttrAction.attributeName === \"invalid\" || updateAttrAction.attributeName === \"exists\") && tabIndex === 3) {\n                        return true;\n                    } else if (tabIndex === 0 && updateAttrAction.attributeName !== \"_PARENT_\" && updateAttrAction.attributeName !== \"geometry\" && updateAttrAction.attributeName !== \"exists\" && updateAttrAction.attributeName !== \"invalid\") {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    hasErrors(tabIndex: number) {\n        let attributeEditors = this.changeRequestEditor.getEditors();\n\n        if (tabIndex === 0) {\n            let filter = [\"invalid\", \"exists\", \"_PARENT_\", \"geometry\"];\n            let filteredEditors = attributeEditors.filter(editor => filter.indexOf(editor.attribute.code) === -1);\n\n            for (let i = 0; i < filteredEditors.length; ++i) {\n                let editor = filteredEditors[i];\n\n                if (!editor.isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 1) {\n            for (let i = 0; i < this.hierarchies.length; ++i) {\n                let hierarchy = this.hierarchies[i];\n\n                if (!this.changeRequestEditor.getEditorForAttribute(this.parentAttributeType, hierarchy).isValid()) {\n                    return true;\n                }\n            }\n        } else if (tabIndex === 2) {\n            return !this.changeRequestEditor.getEditorForAttribute(this.geometryAttributeType).isValid();\n        } else if (tabIndex === 3) {\n            let invalid = this.getAttribute(\"invalid\");\n\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existsEditor = this.changeRequestEditor.getEditorForAttribute(existsAttribute);\n\n            return (Object.prototype.hasOwnProperty.call(invalid, \"isValid\") && !invalid.isValid) ||\n                !existsEditor.isValid();\n        }\n\n        return false;\n    }\n\n    public isValid(): boolean {\n        let allValid: boolean = true;\n\n        this.geoObjectType.attributes.forEach(att => {\n            if (att.isValid != null && !att.isValid) {\n                allValid = false;\n            }\n        });\n\n        if (this.parentAttributeType.isValid != null && !this.parentAttributeType.isValid) {\n            allValid = false;\n        }\n\n        if (this.geometryAttributeType.isValid != null && !this.geometryAttributeType.isValid) {\n            allValid = false;\n        }\n\n        return allValid && this.changeRequestEditor.validate();\n    }\n\n    public getActions(): AbstractAction[] {\n        return this.changeRequestEditor.changeRequest.actions;\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <stability-period *ngIf=\"showStabilityPeriods\" [showHint]=\"!readOnly\" [changeRequestEditor]=\"changeRequestEditor\" [sharedAttributeEditor]=\"this\" [forDate]=\"forDate\" [context]=\"datasetId == null ? 'EXPLORER' : 'LIST'\" [filterDate]=\"requestedDate\" [latestPeriodIsActive]=\"requestedDate == null && changeRequestEditor.changeRequest.isNew\"></stability-period>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <boolean-field *ngIf=\"changeRequestEditor && !changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject'\" [(value)]=\"showAllInstances\" label=\"Show all instances\" [disable]=\"false\"></boolean-field>\n  </div>\n</div>\n\n<div class=\"row\">\n  <!-- <div class=\"label-holder\"></div> -->\n  <div class=\"col-md-12\">\n    <div class=\"btn-group geobject-editor-tab-holder\">\n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 0, disabled: shouldForceSetExist()}\" (click)=\"changePage(0);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabZero\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(0)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(0)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 1, disabled: shouldForceSetExist()}\" (click)=\"changePage(1);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabOne\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(1)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(1)\" class=\"tabHasChanges\"></span></span>\n      </label> \n      <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: tabIndex === 2, disabled: shouldForceSetExist()}\" (click)=\"changePage(2);\"> \n        <span style=\"display:inline-block; width:90%;\"><localize key=\"geoobject.editor.tabTwo\"></localize></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(2)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(2)\" class=\"tabHasChanges\"></span></span>\n      </label>\n      <label class=\"btn full-width-radio-button settings\" [ngClass]=\"{active: tabIndex === 3}\" (click)=\"changePage(3);\"> \n        <span style=\"display:inline-block; width:90%;\"><i class=\"fa fa-cog\"></i></span>\n        <div class=\"errorSpan\"><span *ngIf=\"hasErrors(3)\" class=\"tabHasErrors\"></span></div>\n        <span class=\"changeSpan\"><span *ngIf=\"hasChanges(3)\" class=\"tabHasChanges\"></span></span>\n      </label>\n    </div>\n  </div>\n</div>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n  <fieldset>\n    <!-- <div class=\"col-md-12\"> -->\n    <div *ngIf=\"changeRequestEditor && changeRequestEditor.geoObject\">\n      <div *ngIf=\"tabIndex === 0\" class=\"row\">\n        <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    \n        <div class=\"col-md-12\">\n\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes; let i = index\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n              <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(attr).hasChanges()\" class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span *ngIf=\"attr.code === 'code'\"> \n                      <localize key=\"geoobject.code.alternate.label\"></localize>\n                    </span> \n                    <span *ngIf=\"attr.code === 'displayLabel'\"> \n                      <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                    </span>\n                    <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\"> {{attr.label.localizedValue}} </span> \n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <div *ngIf=\"attr.code !== 'code' && attr.isChangeOverTime\">\n                    <manage-versions\n                        [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"attr\"\n                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"calculatedDate\" [showAllInstances]=\"showAllInstances\" >\n                    </manage-versions>\n                  </div>\n\n                  <div *ngIf=\"!attr.isChangeOverTime\">\n                    <input *ngIf=\"changeRequestEditor.geoObject && attr.code === 'code'\" type=\"text\" [(ngModel)]=\"changeRequestEditor.getEditorForAttribute(attr).value\" id=\"mod-{{attr.code}}\" \n                        name=\"mod-{{attr.code}}\" [disabled]=\"readOnly || (attr.code === 'code' && !isNew)\" [style]=\"(readOnly || (attr.code === 'code' && !isNew)) ? '' : 'color:#333'\" required>\n\n                    <div *ngIf=\"attr.code !== 'code'\">\n                        <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"attr\" [geoObject]=\"changeRequestEditor.geoObject\"\n                          [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div *ngIf=\"tabIndex === 1\" class=\"row\">\n        <div class=\"col-md-12\">\n\t        <ul class=\"list-group\">\n\t\t        <li *ngFor=\"let hierarchy of hierarchies\" class=\"list-group-item\" style=\"text-align:left;border:none;padding:0;\">\n\t\t          <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(parentAttributeType, hierarchy).hasChanges()\" class=\"panel panel-default\">\n\t              <div class=\"panel-heading\">\n\t                <h4 style=\"margin:0;\">\n\t                  <span> {{hierarchy.label}} </span> \n\t                </h4>\n\t              </div>\n\t\t\t\t      \n\t\t\t\t        <div class=\"panel-body\">\n\t\t\t\t          <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"parentAttributeType\"\n\t                        [readonly]=\"readOnly\" [isNew]=\"isNew\" [filterDate]=\"filterDate\" [hierarchy]=\"hierarchy\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n\t\t\t\t        </div>\n\t\t\t        </div>\n\t\t        </li>\n\t        </ul>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 2\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(geometryAttributeType).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span> <localize key=\"shared.attributes.attribute.geometry.label\"></localize> </span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"geometryAttributeType\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"tabIndex === 3\">\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('exists')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <span>{{getAttribute('exists').label.localizedValue}}</span> \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <manage-versions [geoObjectType]=\"geoObjectType\" [changeRequestEditor]=\"changeRequestEditor\" [attributeType]=\"getAttribute('exists')\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\" [isGeometryInlined]=\"isGeometryInlined\" [filterDate]=\"filterDate\" [showAllInstances]=\"showAllInstances\"></manage-versions>\n          </div>\n        </div>\n        <div *ngIf=\"showAllInstances || changeRequestEditor.getEditorForAttribute(getAttribute('invalid')).hasChanges()\" class=\"panel panel-default\">\n          <div class=\"panel-heading\">\n            <h4 style=\"margin:0;\">\n              <!-- <span>{{getAttribute('invalid').label.localizedValue}}</span>  -->\n                <localize key=\"geoobject.invalid.alternate.label\"></localize>\n              \n            </h4>\n          </div>\n            \n          <div class=\"panel-body\">\n            <standard-attribute-editor [changeRequestEditor]=\"changeRequestEditor\" [geoObjectType]=\"geoObjectType\" [changeRequest]=\"changeRequest\" [attributeType]=\"getAttribute('invalid')\" [geoObject]=\"changeRequestEditor.geoObject\"\n              [readonly]=\"readOnly\" [isNew]=\"isNew\"></standard-attribute-editor>\n          </div>\n        </div>\n      </div>\n    </div>\n    <!-- </div> -->\n  </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n    selector: \"localized-input\",\n    templateUrl: \"./localized-input.component.html\",\n    styleUrls: []\n})\nexport class LocalizedInputComponent {\n\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Input() public disabled: boolean = false;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"disabled\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnChanges, SimpleChanges } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { GeoObjectType, AttributeType } from \"@registry/model/registry\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\n\n@Component({\n    selector: \"attribute-input\",\n    templateUrl: \"./attribute-input.component.html\",\n    styleUrls: [\"./attribute-input.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\"))\n            // transition('show => none', animate('100ms'))\n        ])\n    ]\n})\nexport class AttributeInputComponent implements OnChanges {\n\n    @Input() isNew: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() type: string = null;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType;\n    @Output() attributeChange = new EventEmitter<AttributeType>();\n    message: string = null;\n\n    state: string = \"none\";\n    classifications: ClassificationType[] = [];\n\n    constructor(private service: ClassificationTypeService, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.type != null && this.attribute.type === \"classification\") {\n            this.service.page({}).then((page) => {\n                this.classifications = page.resultSet;\n            });\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    toggleIsUnique(): void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.attribute.code) {\n            // if code has a space\n            if (this.attribute.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            if (this.attribute.label.localeValues[0].value.length === 0) {\n                return false;\n            }\n\n            if (this.type === \"float\" && (this.attribute.precision == null || this.attribute.precision.toString() === \"\")) {\n                return false;\n            }\n\n            if (this.type === \"float\" && (this.attribute.scale == null || this.attribute.scale.toString() === \"\")) {\n                return false;\n            }\n\n            if (this.type === \"classification\" && (this.attribute.classificationType == null || this.attribute.classificationType.length === 0)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n}\n","<div>\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"!isNew\" [(ngModel)]=\"attribute.code\" name=\"code\" required\n          geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\">\n  </localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"type === 'float'\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"type === 'float'\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"type === 'classification'\">\n    <div class=\"row-holder\">\n      <div class=\"label-holder\">\n        <label>\n          <localize key=\"data.type.label.classification\"></localize>\n        </label>\n      </div>\n      <div class=\"holder\">\n        <select class=\"select-area\" name=\"classificationType\" [(ngModel)]=\"attribute.classificationType\" required\n          [disabled]=\"!isNew\">\n          <option></option>\n          <option *ngFor=\"let classification of classifications\" [value]=\"classification.code\">\n            {{classification.displayLabel.localizedValue}}\n          </option>\n        </select>\n      </div>\n    </div>\n\n    <div class=\"row-holder\" style=\"overflow: initial;\" *ngIf=\"attribute.classificationType != null && attribute.classificationType.length > 0\">\n      <div class=\"label-holder\">\n        <label>\n          Root Term\n        </label>\n      </div>\n      <div class=\"holder\">\n        <classification-field\n        [classificationType]=\"attribute.classificationType\"\n        name=\"classification-root\"\n        container=\"body\"\n        [(value)]=\"attribute.rootTerm\" \n        [disabled]=\"!isNew\">\n       </classification-field>\n      </div>\n    </div>\n\n  </ng-container>\n</div>","\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\nexport class WebSockets {\n\n    static buildBaseUrl(): string {\n        let protocol = \"wss\";\n\n        if (window.location.protocol.indexOf(\"https\") !== -1) {\n            protocol = \"wss\"; // Web Socket Secure\n        } else {\n            protocol = \"ws\";\n        }\n\n        let baseUrl = protocol + \"://\" + window.location.hostname + (window.location.port ? \":\" + window.location.port : \"\") + registry.contextPath;\n\n        return baseUrl;\n    }\n\n}\n","import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { debounceTime, distinctUntilChanged, filter, tap } from \"rxjs/operators\";\nimport { fromEvent } from \"rxjs\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ContextMenuService, ContextMenuComponent } from \"ngx-contextmenu\";\nimport * as d3 from \"d3\";\n\nimport { CreateHierarchyTypeModalComponent } from \"./modals/create-hierarchy-type-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./modals/create-geoobjtype-modal.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./modals/manage-geoobjecttype-modal.component\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { Organization } from \"@shared/model/core\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { SvgHierarchyType } from \"./d3/svg-hierarchy-type\";\nimport { svgPoint, isPointWithin, calculateTextWidth, getBboxFromSelection } from \"./d3/svg-util\";\nimport { SvgHierarchyNode } from \"./d3/svg-hierarchy-node\";\nimport { ImportTypesModalComponent } from \"./modals/import-types-modal.component\";\nimport Utils from \"@registry/utility/Utils\";\n\nexport const TREE_SCALE_FACTOR_X: number = 1.8;\nexport const TREE_SCALE_FACTOR_Y: number = 1.8;\n\nexport const DEFAULT_NODE_FILL = \"#e6e6e6\";\nexport const DEFAULT_NODE_BANNER_COLOR = \"#A29BAB\";\nexport const INHERITED_NODE_FILL = \"#d4d4d4\";\nexport const INHERITED_NODE_BANNER_COLOR = \"#a0a0a0\";\nexport const RELATED_NODE_BANNER_COLOR = INHERITED_NODE_BANNER_COLOR;\n\nexport class Instance {\n\n  active: boolean;\n  label: string;\n\n}\n\nexport interface DropTarget {\n  dropSelector: string;\n  onDrag(dragEl: Element, dropEl: Element, event: any): void;\n  onDrop(dragEl: Element, event: any): void;\n  [others: string]: any;\n}\n\n@Component({\n\n    selector: \"hierarchies\",\n    templateUrl: \"./hierarchy.component.html\",\n    styleUrls: [\"./hierarchy.css\"]\n})\nexport class HierarchyComponent implements OnInit {\n\n  userOrganization: string = null;\n\n  primarySvgHierarchy: SvgHierarchyType;\n  currentHierarchy: HierarchyType = null;\n\n  instance: Instance = new Instance();\n  hierarchies: HierarchyType[];\n  organizations: Organization[];\n  geoObjectTypes: GeoObjectType[] = [];\n\n  hierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n  filter: string = \"\";\n  filteredHierarchiesByOrg: { org: Organization, hierarchies: HierarchyType[] }[] = [];\n  filteredTypesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n  @ViewChild(\"searchInput\", { static: true }) searchInput: ElementRef;\n\n  hierarchyTypeDeleteExclusions: string[] = [\"AllowedIn\", \"IsARelationship\"];\n  geoObjectTypeDeleteExclusions: string[] = [\"ROOT\"];\n\n  _opened: boolean = false;\n\n  /*\n   * Reference to the modal current showing\n  */\n  private bsModalRef: BsModalRef;\n\n  /*\n   * Template for tree node menu\n   */\n  @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n  /*\n   * Template for leaf menu\n   */\n  @ViewChild(\"leafMenu\") public leafMenuComponent: ContextMenuComponent;\n\n  /*\n   * Currently clicked on id for delete confirmation modal\n   */\n  current: any;\n\n  isSRA: boolean = false;\n\n  hierarchyService: HierarchyService;\n\n  localizeService: LocalizationService;\n\n  options = {\n    //      allowDrag: (any) => node.isLeaf,\n    //      allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n    // return true / false based on element, to.parent, to.index. e.g.\n    //          return parent.hasChildren;\n    //        },\n      displayField: \"label\",\n      actionMapping: {\n          mouse: {\n              click: (tree: any, node: any, $event: any) => {\n                  this.treeNodeOnClick(node, $event);\n              },\n              contextMenu: (tree: any, node: any, $event: any) => {\n                  this.handleOnMenu(node, $event);\n              }\n          }\n      },\n      mouse: {\n      //              drop: (tree: any, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n      //                console.log('drag', from, to); // from === {name: 'first'}\n      //                // Add a node to `to.parent` at `to.index` based on the data in `from`\n      //                // Then call tree.update()\n      //              }\n      }\n  };\n\n  constructor(hierarchyService: HierarchyService, private modalService: BsModalService,\n    private contextMenuService: ContextMenuService,\n    localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService) {\n      this.isSRA = authService.isSRA();\n\n      this.hierarchyService = hierarchyService;\n      this.localizeService = localizeService;\n  }\n\n  ngOnInit(): void {\n      this.refreshAll(null);\n\n      fromEvent(this.searchInput.nativeElement, \"keyup\").pipe(\n\n      // get value\n          filter(Boolean),\n          debounceTime(500),\n          distinctUntilChanged(),\n          tap(() => {\n              this.onFilterChange();\n          })\n      // subscription for response\n      ).subscribe();\n  }\n\n  localize(key: string): string {\n      return this.localizeService.decode(key);\n  }\n\n  private renderTree(): void {\n      if (this.currentHierarchy == null || this.currentHierarchy.rootGeoObjectTypes == null || this.currentHierarchy.rootGeoObjectTypes.length == 0) {\n          d3.select(\"#svg\").remove();\n\n          let canDrag = false;\n          if (this.currentHierarchy != null) {\n              canDrag = (this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode));\n          }\n\n          this.geoObjectTypes.forEach((got: GeoObjectType) => {\n              got.canDrag = canDrag;\n          });\n          return;\n      }\n\n      d3.select(\".g-context-menu\").remove();\n      d3.select(\".hierarchy-inherit-button\").remove();\n      d3.select(\".g-hierarchy-got-connector\").remove();\n\n      let overflowDiv: any = d3.select(\"#overflow-div\").node();\n      let scrollLeft = overflowDiv.scrollLeft;\n      let scrollRight = overflowDiv.scrollRight;\n\n      let svg = d3.select(\"#svg\");\n\n      if (svg.node() == null) {\n          svg = d3.select(\"#svgHolder\").append(\"svg\");\n          svg.attr(\"id\", \"svg\");\n      }\n\n      this.primarySvgHierarchy = new SvgHierarchyType(this, svg, this.currentHierarchy, true, this.localizeService, this.modalService, this.authService);\n      this.primarySvgHierarchy.render();\n\n      this.calculateSvgViewBox();\n\n      let overflowDiv2: any = d3.select(\"#overflow-div\").node();\n      overflowDiv2.scrollLeft = scrollLeft;\n      overflowDiv2.scrollRight = scrollRight;\n\n    // this.registerSvgHandlers();\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n          got.canDrag = this.calculateCanDrag(got);\n      });\n  }\n\n  calculateSvgViewBox(): void {\n      let svg: any = d3.select(\"#svg\");\n      let svgNode: any = svg.node();\n\n      let { x, y, width, height } = svgNode.getBBox();\n\n      const xPadding = 30;\n      const yPadding = 40;\n      svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) + \" \" + (height + yPadding * 2));\n\n      width = (width + xPadding * 2) * TREE_SCALE_FACTOR_X;\n      height = (height + yPadding * 2) * TREE_SCALE_FACTOR_Y;\n\n      d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n    // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n  }\n\n  calculateCanDrag(got: GeoObjectType): boolean {\n      let hierarchyComponent = this;\n\n      if (this.primarySvgHierarchy != null) {\n      // Check permissions against GOT and Hierarchy org\n          if (!(this.authService.isSRA() || this.authService.isOrganizationRA(this.currentHierarchy.organizationCode))) {\n              return false;\n          }\n\n      // If the child is already on the graph, they cannot drag.\n          if (this.primarySvgHierarchy.getNodeByCode(got.code) != null) {\n              return false;\n          }\n\n      // If we are abstract, and one of our children is on the graph, they cannot drag.\n          if (got.isAbstract) {\n              let isChildOnGraph = false;\n\n              this.geoObjectTypes.forEach((child: GeoObjectType) => {\n                  if (child.superTypeCode === got.code) {\n                      if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(child.code) != null) {\n                          isChildOnGraph = true;\n                      }\n                  }\n              });\n\n              if (isChildOnGraph) {\n                  return false;\n              }\n          }\n      // If we are a child of an abstract type, and our abstract type is on the graph, we cannot drag.\n          else if (got.superTypeCode != null) {\n              if (hierarchyComponent.primarySvgHierarchy.getNodeByCode(got.superTypeCode) != null) {\n                  return false;\n              }\n          }\n      } else {\n      // If there is no selected hierarchy, they cannot drag.\n          return false;\n      }\n\n      return true;\n  }\n\n  calculateRelatedHierarchies(got: GeoObjectType): string[] {\n      let relatedHiers = [];\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchyType = this.hierarchies[i];\n\n          if (hierarchyType.rootGeoObjectTypes != null && hierarchyType.rootGeoObjectTypes.length > 0) {\n              let d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]).descendants();\n\n              let found = d3Hierarchy.find((node) => {\n                  return node.data.geoObjectType === got.code && node.data.inheritedHierarchyCode == null;\n              });\n\n              if (found) {\n                  relatedHiers.push(hierarchyType.code);\n              }\n          }\n      }\n\n      return relatedHiers;\n  }\n\n  private registerDragHandlers(): any {\n      let that = this;\n\n      let dropTargets: DropTarget[] = [];\n\n    // Empty Hierarchy Drop Zone\n      dropTargets.push({\n          dropSelector: \".drop-box-container\",\n          onDrag: function(dragEl: Element, dropEl: Element) {\n              if (this.dropEl != null) {\n                  this.dropEl.style(\"border-color\", null);\n                  this.dropEl = null;\n              }\n\n              if (dropEl != null) {\n                  let emptyHierarchyDropZone = dropEl.closest(\".drop-box-container\");\n\n                  if (emptyHierarchyDropZone != null) {\n                      this.dropEl = d3.select(emptyHierarchyDropZone).style(\"border-color\", \"#6BA542\");\n                  }\n              }\n          },\n          onDrop: function(dragEl: Element) {\n              if (this.dropEl != null) {\n                  this.dropEl.style(\"border-color\", null);\n                  that.addChild(that.currentHierarchy.code, \"ROOT\", d3.select(dragEl).attr(\"id\"));\n                  this.dropEl = null;\n              }\n          }\n      });\n\n    // SVG GeoObjectType Drop Zone\n      dropTargets.push({\n          dropSelector: \".svg-got-body-rect\",\n          onDrag: function(dragEl: Element, mouseTarget: Element, event: any) {\n              this.clearDropZones();\n\n              let lastDropEl = this.dropEl;\n\n        // translate page to SVG co-ordinate\n              let svg: any = d3.select(\"#svg\").node();\n\n              if (svg == null) {\n                  return;\n              }\n              let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n        // Find out if we've dragged the GeoObjectType inside of a HierarchyNode. If we have, then\n        // we need to expand the HierarchyNode's BoundingBox to accomodate our new drop zones.\n              that.primarySvgHierarchy.getD3Tree().descendants().forEach((node: any) => {\n                  if (node.data.geoObjectType !== \"GhostNode\" && isPointWithin(svgMousePoint, node.data.dropZoneBbox)) {\n                      this.dropEl = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + node.data.geoObjectType + \"\\\"]\");\n                      node.data.activeDropZones = true;\n\n                      if (node.parent == null) {\n                          node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH * 4 };\n                      }\n                  } else {\n                      node.data.activeDropZones = false;\n\n                      if (node.parent == null) {\n                          node.data.dropZoneBbox = { x: node.x - SvgHierarchyType.gotRectW / 2, y: node.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                      }\n                  }\n              });\n\n              if (this.dropEl == null || (lastDropEl != null && this.dropEl != null && lastDropEl.attr(\"data-gotCode\") != this.dropEl.attr(\"data-gotCode\"))) {\n                  this.clearGhostNodes(true);\n              }\n\n              if (this.dropEl != null) {\n                  let isDragGroup = d3.select(dragEl).classed(\"got-group-parent\");\n                  const gotCode = this.dropEl.attr(\"data-gotCode\");\n                  let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n                  let isDropGroup = that.findGeoObjectTypeByCode(gotCode).isAbstract;\n\n                  this.dropEl.attr(\"stroke\", \"blue\");\n\n                  const dropElX = parseInt(this.dropEl.attr(\"x\"));\n                  const dropElY = parseInt(this.dropEl.attr(\"y\"));\n\n          // Add drop zones\n                  const childW: number = SvgHierarchyType.gotRectW;\n                  const childH: number = SvgHierarchyType.gotRectH;\n\n                  let dzg = d3.select(\"#svg\").append(\"g\").classed(\"svg-dropZone-g\", true);\n\n          // Render Child Drop Zone\n                  let dropTargetHasChildren = !(dropNode.children == null || dropNode.children.length == 0);\n                  let isChildDZActive = !isDropGroup && (!isDragGroup || !dropTargetHasChildren);\n                  if (isChildDZActive) {\n                      this.childDzBacker = dzg.append(\"rect\").classed(\"svg-got-child-dz-backer\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"white\");\n\n                      this.childDz = dzg.append(\"rect\").classed(\"svg-got-child-dz\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"none\")\n                          .attr(\"stroke\", \"black\")\n                          .attr(\"stroke-width\", \"1\")\n                          .attr(\"stroke-dasharray\", \"5,5\");\n\n                      let addChildLabel = dropTargetHasChildren ? that.localizeService.decode(\"hierarchy.content.intersectChild\") : that.localizeService.decode(\"hierarchy.content.addChild\");\n                      this.childDzText = dzg.append(\"text\").classed(\"svg-got-child-dz-text\", true)\n                          .attr(\"font-family\", \"sans-serif\")\n                          .attr(\"font-size\", 10)\n                          .attr(\"fill\", \"black\")\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addChildLabel, 10) / 2)\n                          .attr(\"y\", dropElY + SvgHierarchyType.gotRectH + 10 + childH / 2 + 2)\n                          .text(addChildLabel);\n                  }\n\n          // Render Parent Drop Zone\n                  if (!isDragGroup) // Don't render it if we're a group\n                  {\n                      this.parentDzBacker = dzg.append(\"rect\").classed(\"svg-got-parent-dz-backer\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"white\");\n\n                      this.parentDz = dzg.append(\"rect\").classed(\"svg-got-parent-dz\", true)\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - (childW / 2))\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH)\n                          .attr(\"width\", childW)\n                          .attr(\"height\", childH)\n                          .attr(\"fill\", \"none\")\n                          .attr(\"stroke\", \"black\")\n                          .attr(\"stroke-width\", \"1\")\n                          .attr(\"stroke-dasharray\", \"5,5\");\n\n                      d3.select(\".svg-got-parent-dz-text\").remove();\n                      let addParentLabel = dropNode.parent == null ? that.localizeService.decode(\"hierarchy.content.addParent\") : that.localizeService.decode(\"hierarchy.content.intersectParent\");\n                      this.parentDzText = dzg.append(\"text\").classed(\"svg-got-parent-dz-text\", true)\n                          .attr(\"font-family\", \"sans-serif\")\n                          .attr(\"font-size\", 10)\n                          .attr(\"fill\", \"black\")\n                          .attr(\"x\", dropElX + (SvgHierarchyType.gotRectW / 2) - calculateTextWidth(addParentLabel, 10) / 2)\n                          .attr(\"y\", dropElY - SvgHierarchyType.gotHeaderH - childH / 2 + 2)\n                          .text(addParentLabel);\n                  }\n\n          // Render Sibling Drop Zone\n                  if (this.ghostCode != gotCode) {\n                      if (this.ghostCode != null) {\n                          this.clearGhostNodes(dropNode.parent == null);\n                      }\n\n                      if (dropNode.parent != null) {\n                          let parentIndex = null;\n                          for (let i = 0; i < dropNode.parent.data.children.length; ++i) {\n                              let hn: any = dropNode.parent.data.children[i];\n\n                              if (hn.geoObjectType === gotCode) {\n                                  parentIndex = i + 1;\n                              }\n                          }\n\n                          let addSiblingLabel = that.localizeService.decode(\"hierarchy.content.addChild\");\n                          dropNode.parent.data.children.splice(parentIndex, 0, { ghostingCode: gotCode, geoObjectType: \"GhostNode\", label: addSiblingLabel, children: [] });\n\n                          that.renderTree();\n                          this.ghostCode = gotCode;\n                      }\n                  }\n\n                  let siblingGhostBody = d3.select(\".svg-sibling-ghost-body-dz\");\n\n                  if (!isDragGroup && isPointWithin(svgMousePoint, getBboxFromSelection(this.parentDz))) {\n                      this.parentDz.attr(\"stroke\", \"blue\");\n                      this.parentDzText.attr(\"fill\", \"blue\");\n                      isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                      isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                      siblingGhostBody.attr(\"stroke\", \"black\");\n                      this.activeDz = this.parentDz;\n                  } else if (isChildDZActive && isPointWithin(svgMousePoint, getBboxFromSelection(this.childDz))) {\n                      !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                      !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                      this.childDz.attr(\"stroke\", \"blue\");\n                      this.childDzText.attr(\"fill\", \"blue\");\n                      siblingGhostBody.attr(\"stroke\", \"black\");\n                      this.activeDz = this.childDz;\n                  } else if (siblingGhostBody.node() != null && isPointWithin(svgMousePoint, getBboxFromSelection(siblingGhostBody))) {\n                      !isDragGroup && this.parentDz.attr(\"stroke\", \"black\");\n                      !isDragGroup && this.parentDzText.attr(\"fill\", \"black\");\n                      isChildDZActive && this.childDz.attr(\"stroke\", \"black\");\n                      isChildDZActive && this.childDzText.attr(\"fill\", \"black\");\n                      siblingGhostBody.attr(\"stroke\", \"blue\");\n                      this.activeDz = \"sibling\";\n                  }\n              }\n          },\n          onDrop: function(dragEl: Element) {\n              if (this.dropEl != null && this.activeDz != null) {\n                  let dropGot = this.dropEl.attr(\"data-gotCode\");\n                  let dropNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.geoObjectType === dropGot; });\n                  let dragGot = d3.select(dragEl).attr(\"id\");\n\n                  if (this.activeDz === this.childDz) {\n                      if (dropNode.data.children.length == 0) {\n                          that.addChild(that.currentHierarchy.code, dropGot, dragGot);\n                      } else {\n                          let youngest = \"\";\n\n                          for (let i = 0; i < dropNode.data.children.length; ++i) {\n                              youngest = youngest + dropNode.data.children[i].geoObjectType;\n\n                              if (i < dropNode.data.children.length - 1) {\n                                  youngest = youngest + \",\";\n                              }\n                          }\n\n                          that.insertBetweenTypes(that.currentHierarchy.code, dropGot, dragGot, youngest);\n                      }\n                  } else if (this.activeDz === this.parentDz) {\n                      if (dropNode.parent == null) {\n                          that.insertBetweenTypes(that.currentHierarchy.code, \"ROOT\", dragGot, dropGot);\n                      } else {\n                          that.insertBetweenTypes(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, dragGot, dropGot);\n                      }\n                  } else if (this.activeDz === \"sibling\") {\n                      that.addChild(that.currentHierarchy.code, dropNode.parent.data.geoObjectType, d3.select(dragEl).attr(\"id\"));\n                  }\n              }\n              this.clearDropZones();\n              this.clearGhostNodes(true);\n          },\n          clearDropZones: function() {\n              if (this.dropEl != null) {\n                  this.dropEl.attr(\"stroke\", null);\n              }\n\n              this.dropEl = null;\n              this.activeDz = null;\n\n              this.childDz = null;\n              this.parentDz = null;\n\n              d3.select(\".svg-dropZone-g\").remove();\n          },\n          clearGhostNodes: function(renderTree: boolean) {\n              if (this.ghostCode != null) {\n                  let ghostNode = that.primarySvgHierarchy.getD3Tree().find((node) => { return node.data.ghostingCode === this.ghostCode; });\n\n                  if (ghostNode != null) {\n                      let parentIndex = null;\n                      for (let i = 0; i < ghostNode.parent.data.children.length; ++i) {\n                          let hn: any = ghostNode.parent.data.children[i];\n\n                          if (hn.ghostingCode === this.ghostCode) {\n                              parentIndex = i;\n                          }\n                      }\n\n                      if (parentIndex != null) {\n                          ghostNode.parent.data.children.splice(parentIndex, 1);\n                          if (renderTree) {\n                              that.renderTree();\n                          }\n                      }\n                  }\n\n                  this.ghostCode = null;\n              }\n          }\n      });\n\n    // GeoObjectTypes and Hierarchies\n      let deltaX: number, deltaY: number, width: number;\n      let sidebarDragHandler = d3.drag()\n          .on(\"start\", function(event: any) {\n              let canDrag = d3.select(this).attr(\"data-candrag\");\n              if (canDrag === \"false\") {\n                  return;\n              }\n\n              let rect = this.getBoundingClientRect();\n              deltaX = rect.left - event.sourceEvent.pageX;\n              deltaY = rect.top - event.sourceEvent.pageY;\n              width = rect.width;\n          })\n          .on(\"drag\", function(event: any) {\n              let canDrag = d3.select(this).attr(\"data-candrag\");\n              if (canDrag === \"false\") {\n                  return;\n              }\n\n              d3.select(\".g-context-menu\").remove();\n\n              let selThis = d3.select(this);\n\n        // Kind of a dumb hack, but if we hide our drag element for a sec, then we can check what's underneath it.\n              selThis.style(\"display\", \"none\");\n\n              let target = document.elementFromPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n              selThis.style(\"display\", null);\n\n              for (let i = 0; i < dropTargets.length; ++i) {\n                  dropTargets[i].onDrag(this, target, event);\n              }\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n              selThis\n                  .classed(\"dragging\", true)\n                  .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                  .style(\"top\", (event.sourceEvent.pageY + deltaY) + \"px\")\n                  .style(\"width\", width + \"px\");\n\n        // If they are moving a GOT group then we have to move the children as well\n              if (selThis.classed(\"got-group-parent\")) {\n                  let index = 1;\n                  d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                      let li: any = this;\n                      let child = d3.select(li);\n\n                      child\n                          .classed(\"dragging\", true)\n                          .style(\"left\", (event.sourceEvent.pageX + deltaX) + \"px\")\n                          .style(\"top\", (event.sourceEvent.pageY + deltaY + (li.getBoundingClientRect().height + 2) * index) + \"px\")\n                          .style(\"width\", width + \"px\");\n\n                      index++;\n                  });\n              }\n          }).on(\"end\", function(event: any) {\n              let selThis = d3.select(this)\n                  .classed(\"dragging\", false)\n                  .style(\"left\", null)\n                  .style(\"top\", null)\n                  .style(\"width\", null);\n\n        // If they are moving a GOT group then we have to reset the children as well\n              if (selThis.classed(\"got-group-parent\")) {\n                  d3.selectAll(\".got-group-child[data-superTypeCode=\\\"\" + selThis.attr(\"id\") + \"\\\"]\").each(function() {\n                      let child = d3.select(this);\n\n                      child\n                          .classed(\"dragging\", false)\n                          .style(\"left\", null)\n                          .style(\"top\", null)\n                          .style(\"width\", null);\n                  });\n              }\n\n              for (let i = 0; i < dropTargets.length; ++i) {\n                  dropTargets[i].onDrop(this, event);\n              }\n          });\n\n      sidebarDragHandler(d3.selectAll(\".sidebar-section-content ul.list-group li.got-li-item\"));\n  }\n\n  private registerSvgHandlers(): void {\n      let hierarchyComponent = this;\n\n    // SVG Drag Handler\n      let deltaX: number, deltaY: number, width: number;\n      let startPoint: any;\n      let svgGot: SvgHierarchyNode;\n      let svgDragHandler = d3.drag()\n          .on(\"start\", function(event: any) {\n              let svgMousePoint: any = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n        // let select = d3.select(this);\n\n              svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n        // d3.selectAll(\".svg-got-relatedhiers-button\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        //   d3.selectAll(\".svg-got-body-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     return -1\n        //   }\n        //   else {\n        //     return 1\n        //   }\n        // });\n\n        // d3.selectAll(\".svg-got-header-rect\").sort(function (a: any, b: any) {\n        //   if (a.data.geoObjectType !== event.subject.data.geoObjectType) {\n        //     console.log(\"no --> \",a.data.geoObjectType)\n        //     return -1\n        //   }\n        //   else {\n        //     console.log(\"yes --> \",a.data.geoObjectType)\n        //     return 1\n        //   }\n        // });\n\n              startPoint = svgGot.getPos();\n\n              deltaX = startPoint.x - svgMousePoint.x;\n              deltaY = startPoint.y - svgMousePoint.y;\n          })\n          .on(\"drag\", function(event: any) {\n              d3.select(\".g-context-menu\").remove();\n\n              let svgMousePoint = svgPoint(event.sourceEvent.pageX, event.sourceEvent.pageY);\n\n              svgGot = hierarchyComponent.primarySvgHierarchy.getNodeByCode(d3.select(this).attr(\"data-gotCode\"));\n\n              svgGot.setPos(svgMousePoint.x + deltaX, svgMousePoint.y + deltaY, true);\n          }).on(\"end\", function(event: any) {\n              let bbox: string[] = d3.select(\"#svg\").attr(\"viewBox\").split(\" \");\n\n              svgGot.setPos(startPoint.x, startPoint.y, false);\n\n        // if (!isBboxPartiallyWithin(svgGot.getBbox(), { x: parseInt(bbox[0]), y: parseInt(bbox[1]), width: parseInt(bbox[2]), height: parseInt(bbox[3]) })) {\n\n        //   if (hierarchyComponent.isOrganizationRA(hierarchyComponent.currentHierarchy.organizationCode)) {\n        //     let obj = hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        //     hierarchyComponent.bsModalRef = hierarchyComponent.modalService.show(ConfirmModalComponent, {\n        //       animated: true,\n        //       backdrop: true,\n        //       ignoreBackdropClick: true,\n        //     });\n\n        //     let message = hierarchyComponent.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        //     message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        //     hierarchyComponent.bsModalRef.content.message = message;\n        //     hierarchyComponent.bsModalRef.content.data = obj.code;\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onConfirm.subscribe(data => {\n        //       let treeNode = svgGot.getTreeNode();\n        //       let parent = null;\n        //       if (treeNode.parent == null) {\n        //         parent = \"ROOT\";\n        //       }\n        //       else {\n        //         if (treeNode.parent.data.inheritedHierarchyCode != null) {\n        //           parent = \"ROOT\";\n        //         }\n        //         else {\n        //           parent = treeNode.parent.data.geoObjectType;\n        //         }\n        //       }\n\n        //       hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { svgGot.setPos(startPoint.x, startPoint.y, false); });\n        //     });\n\n        //     (<ConfirmModalComponent>hierarchyComponent.bsModalRef.content).onCancel.subscribe(data => {\n        //       svgGot.setPos(startPoint.x, startPoint.y, false);\n        //     });\n        //   }\n        //   else {\n        //     svgGot.setPos(startPoint.x, startPoint.y, false);\n        //   }\n\n        // }\n        // else {\n        //   svgGot.setPos(startPoint.x, startPoint.y, false);\n        // }\n          });\n\n      svgDragHandler(d3.selectAll(\".svg-got-body-rect[data-inherited=false],.svg-got-label-text[data-inherited=false],.svg-got-header-rect[data-inherited=false]\"));\n  }\n\n  public findGeoObjectTypeByCode(code: string): GeoObjectType {\n      for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n          let got: GeoObjectType = this.geoObjectTypes[i];\n\n          if (got.code === code) {\n              return got;\n          }\n      }\n  }\n\n  public findHierarchyByCode(code: string): HierarchyType {\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let ht: HierarchyType = this.hierarchies[i];\n\n          if (ht.code === code) {\n              return ht;\n          }\n      }\n  }\n\n  public findOrganizationByCode(code: string): Organization {\n      for (let i = 0; i < this.organizations.length; ++i) {\n          let org: Organization = this.organizations[i];\n\n          if (org.code === code) {\n              return org;\n          }\n      }\n  }\n\n  private addChild(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): void {\n      this.hierarchyService.addChildToHierarchy(hierarchyCode, parentGeoObjectTypeCode, childGeoObjectTypeCode).then((ht: HierarchyType) => {\n          let got = this.findGeoObjectTypeByCode(childGeoObjectTypeCode);\n\n          let index = null;\n          for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n              if (got.relatedHierarchies[i] === hierarchyCode) {\n                  index = i;\n                  break;\n              }\n          }\n\n          if (index == null) {\n              got.relatedHierarchies.push(hierarchyCode);\n          }\n\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  private insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): void {\n      this.hierarchyService.insertBetweenTypes(hierarchyCode, parentGeoObjectTypeCode, middleGeoObjectTypeCode, youngestGeoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  ngAfterViewInit() {\n\n  }\n\n  isRA(): boolean {\n      return this.authService.isRA();\n  }\n\n  isOrganizationRA(orgCode: string, dropZone: boolean = false): boolean {\n      return this.isSRA || this.authService.isOrganizationRA(orgCode);\n  }\n\n  getTypesByOrg(org: Organization): GeoObjectType[] {\n      let orgTypes: GeoObjectType[] = [];\n\n      for (let i = 0; i < this.geoObjectTypes.length; ++i) {\n          let geoObjectType: GeoObjectType = this.geoObjectTypes[i];\n\n          if (geoObjectType.organizationCode === org.code) {\n              orgTypes.push(geoObjectType);\n          }\n      }\n\n      return orgTypes;\n  }\n\n  getHierarchiesByOrg(org: Organization): HierarchyType[] {\n      let orgHierarchies: HierarchyType[] = [];\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchy: HierarchyType = this.hierarchies[i];\n\n          if (hierarchy.organizationCode === org.code) {\n              orgHierarchies.push(hierarchy);\n          }\n      }\n\n      return orgHierarchies;\n  }\n\n  public refreshAll(desiredHierarchy: HierarchyType) {\n    // Clear the types to then refresh\n      this.geoObjectTypes = [];\n\n      this.registryService.init().then(response => {\n          this.localizeService.setLocales(response.locales);\n\n          this.setGeoObjectTypes(response.types);\n\n          this.organizations = response.organizations;\n\n          this.organizations.forEach(org => {\n              if (this.isOrganizationRA(org.code)) {\n                  this.userOrganization = org.code;\n              }\n          });\n\n          if (!this.authService.isSRA()) {\n              let myorg = this.authService.getMyOrganizations();\n\n              let pos = response.organizations.findIndex(org => {\n                  return org.code === myorg[0];\n              });\n\n              if (pos >= 0) {\n                  Utils.arrayMove(response.organizations, pos, 0);\n              }\n          }\n\n          let pos = this.getGeoObjectTypePosition(\"ROOT\");\n          if (pos) {\n              this.geoObjectTypes.splice(pos, 1);\n          }\n\n          this.setHierarchies(response.hierarchies);\n\n          this.setNodesOnInit(desiredHierarchy);\n\n          this.updateViewDatastructures();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public setGeoObjectTypes(types: GeoObjectType[]): void {\n    // Set group parent types\n      this.setAbstractTypes(types);\n\n    // Set GeoObjectTypes that aren't part of a group.\n      types.forEach(type => {\n          if (!type.isAbstract) {\n              if (!type.superTypeCode) {\n                  this.geoObjectTypes.push(type);\n              }\n          }\n      });\n\n    // Sort aphabetically because all other types to add will be children in a group.\n      this.geoObjectTypes.sort((a, b) => {\n          if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n          else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n          else return 0;\n      });\n\n    // Add group children\n      types.forEach(type => {\n          if (!type.isAbstract) {\n              if (type.superTypeCode && type.superTypeCode.length > 0) {\n                  for (let i = 0; i < this.geoObjectTypes.length; i++) {\n                      let setType = this.geoObjectTypes[i];\n                      if (type.superTypeCode === setType.code) {\n                          this.geoObjectTypes.splice(i + 1, 0, type);\n                      }\n                  }\n              }\n          }\n      });\n  }\n\n  private setAbstractTypes(types: GeoObjectType[]): void {\n      types.forEach(type => {\n          if (type.isAbstract) {\n              this.geoObjectTypes.push(type);\n          }\n      });\n  }\n\n  public updateViewDatastructures(): void {\n      this.hierarchiesByOrg = [];\n      this.typesByOrg = [];\n\n      for (let i = 0; i < this.organizations.length; ++i) {\n          let org: Organization = this.organizations[i];\n\n          this.hierarchiesByOrg.push({ org: org, hierarchies: this.getHierarchiesByOrg(org) });\n          this.typesByOrg.push({ org: org, types: this.getTypesByOrg(org) });\n      }\n\n      this.geoObjectTypes.forEach((got: GeoObjectType) => {\n          got.canDrag = this.calculateCanDrag(got);\n          got.relatedHierarchies = this.calculateRelatedHierarchies(got);\n      });\n\n      this.onFilterChange();\n  }\n\n  public excludeHierarchyTypeDeletes(hierarchy: HierarchyType) {\n      return (this.hierarchyTypeDeleteExclusions.indexOf(hierarchy.code) !== -1);\n  }\n\n  public excludeGeoObjectTypeDeletes(geoObjectType: GeoObjectType) {\n      return (this.geoObjectTypeDeleteExclusions.indexOf(geoObjectType.code) !== -1);\n  }\n\n  private setNodesOnInit(desiredHierarchy: HierarchyType): void {\n      let index = -1;\n\n      if (desiredHierarchy != null) {\n          index = this.hierarchies.findIndex(h => h.code === desiredHierarchy.code);\n      } else if (this.hierarchies.length > 0) {\n          index = 0;\n      }\n\n      if (index > -1) {\n          const hierarchy = this.hierarchies[index];\n\n          this.setCurrentHierarchy(hierarchy);\n\n          this.renderTree();\n      }\n  }\n\n  private getHierarchy(hierarchyId: string): HierarchyType {\n      let target: HierarchyType = null;\n      this.hierarchies.forEach(hierarchy => {\n          if (hierarchyId === hierarchy.code) {\n              target = hierarchy;\n          }\n      });\n\n      return target;\n  }\n\n  private setHierarchies(data: HierarchyType[]): void {\n      let hierarchies: HierarchyType[] = [];\n      data.forEach((hierarchyType, index) => {\n          if (hierarchyType.rootGeoObjectTypes.length > 0) {\n              hierarchyType.rootGeoObjectTypes.forEach(rootGeoObjectType => {\n                  this.processHierarchyNodes(rootGeoObjectType);\n              });\n          }\n\n          hierarchies.push(hierarchyType);\n      });\n\n      this.hierarchies = hierarchies;\n\n      this.hierarchies.sort((a, b) => {\n          if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n          else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n          else return 0;\n      });\n  }\n\n  private processHierarchyNodes(node: HierarchyNode) {\n      if (node != null) {\n          node.label = this.getHierarchyLabel(node.geoObjectType);\n\n          node.children.forEach(child => {\n              this.processHierarchyNodes(child);\n          });\n      }\n  }\n\n  private getHierarchyLabel(geoObjectTypeCode: string): string {\n      let label: string = null;\n      this.geoObjectTypes.forEach(function(gOT) {\n          if (gOT.code === geoObjectTypeCode) {\n              label = gOT.label.localizedValue;\n          }\n      });\n\n      return label;\n  }\n\n  public handleOnMenu(node: any, $event: any): void {\n      if (this.isOrganizationRA(this.currentHierarchy.organizationCode)) {\n          this.contextMenuService.show.next({\n              contextMenu: (node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent),\n              event: $event,\n              item: node\n          });\n          $event.preventDefault();\n          $event.stopPropagation();\n      } else {\n          $event.preventDefault();\n          $event.stopPropagation();\n      }\n  }\n\n  public treeNodeOnClick(node: any, $event: any): void {\n      node.treeModel.setFocusedNode(node);\n\n      if (node.treeModel.isExpanded(node)) {\n          node.collapse();\n      } else {\n          node.treeModel.expandAll();\n      }\n  }\n\n  public hierarchyOnClick(event: any, item: HierarchyType) {\n      this.setCurrentHierarchy(item);\n      this.renderTree();\n  }\n\n  public createHierarchy(): void {\n      this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n\n      (<CreateHierarchyTypeModalComponent> this.bsModalRef.content).onHierarchytTypeCreate.subscribe(data => {\n          this.hierarchies.push(data);\n\n          this.hierarchies.sort((a: HierarchyType, b: HierarchyType) => {\n              let nameA = a.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n              let nameB = b.label.localizedValue.toUpperCase(); // ignore upper and lowercase\n\n              if (nameA < nameB) {\n                  return -1; // nameA comes first\n              }\n\n              if (nameA > nameB) {\n                  return 1; // nameB comes first\n              }\n\n              return 0; // names must be equal\n          });\n\n          this.updateViewDatastructures();\n      });\n  }\n\n  public deleteHierarchyType(obj: HierarchyType): void {\n      this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true\n      });\n      this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n      this.bsModalRef.content.data = obj.code;\n      this.bsModalRef.content.type = \"DANGER\";\n      this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n      (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n          this.removeHierarchyType(data);\n      });\n  }\n\n  public editHierarchyType(obj: HierarchyType, readOnly: boolean): void {\n      this.bsModalRef = this.modalService.show(CreateHierarchyTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n      this.bsModalRef.content.edit = true;\n      this.bsModalRef.content.readOnly = readOnly;\n      this.bsModalRef.content.hierarchyType = obj;\n      this.bsModalRef.content.onHierarchytTypeCreate.subscribe(data => {\n          let pos = this.getHierarchyTypePosition(data.code);\n\n          this.hierarchies[pos].label = data.label;\n          this.hierarchies[pos].description = data.description;\n          this.hierarchies[pos].progress = data.progress;\n          this.hierarchies[pos].acknowledgement = data.acknowledgement;\n          this.hierarchies[pos].disclaimer = data.disclaimer;\n          this.hierarchies[pos].useConstraints = data.useConstraints;\n          this.hierarchies[pos].accessConstraints = data.accessConstraints;\n          this.hierarchies[pos].contact = data.contact;\n          this.hierarchies[pos].phoneNumber = data.phoneNumber;\n          this.hierarchies[pos].email = data.email;\n\n          this.updateViewDatastructures();\n\n          if (this.currentHierarchy.code === data.code) {\n              this.setCurrentHierarchy(this.hierarchies[pos]);\n\n              this.renderTree();\n          }\n      });\n  }\n\n  setCurrentHierarchy(hierarchyType: HierarchyType): void {\n      this.currentHierarchy = hierarchyType;\n  }\n\n  isPrimaryHierarchy(hierarchy: HierarchyType): boolean {\n    // return hierarchy.isPrimary;\n      return hierarchy.code === this.currentHierarchy.code;\n  }\n\n  public removeHierarchyType(code: string): void {\n      this.hierarchyService.deleteHierarchyType(code).then(response => {\n          let pos = this.getHierarchyTypePosition(code);\n          this.hierarchies.splice(pos, 1);\n          this.updateViewDatastructures();\n\n          if (this.hierarchies.length > 0) {\n              this.setCurrentHierarchy(this.hierarchies[0]);\n          } else {\n              this.currentHierarchy = null;\n          }\n\n          this.renderTree();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public createGeoObjectType(groupSuperType: GeoObjectType, isAbstract: boolean, org: Organization): void {\n      this.bsModalRef = this.modalService.show(CreateGeoObjTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n      this.bsModalRef.content.init(org, this.geoObjectTypes, groupSuperType, isAbstract);\n\n      this.bsModalRef.content.onGeoObjTypeCreate.subscribe(data => {\n          data.relatedHierarchies = this.calculateRelatedHierarchies(data);\n\n          this.refreshAll(this.currentHierarchy);\n      });\n  }\n\n  public deleteGeoObjectType(obj: GeoObjectType): void {\n      this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true\n      });\n      this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + obj.label.localizedValue + \"]\";\n      this.bsModalRef.content.data = obj.code;\n      this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.bsModalRef.content.type = ModalTypes.danger;\n\n      (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n          this.removeGeoObjectType(data);\n      });\n  }\n\n  public removeGeoObjectType(code: string, errCallback: (err: HttpErrorResponse) => void = null): void {\n      this.registryService.deleteGeoObjectType(code).then(response => {\n          let pos = this.getGeoObjectTypePosition(code);\n          this.geoObjectTypes.splice(pos, 1);\n\n          this.refreshAll(this.currentHierarchy);\n      }).catch((err: HttpErrorResponse) => {\n          if (errCallback != null) {\n              errCallback(err);\n          }\n          this.error(err);\n      });\n  }\n\n  public manageGeoObjectType(geoObjectType: GeoObjectType, readOnly: boolean): void {\n      this.bsModalRef = this.modalService.show(ManageGeoObjectTypeModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"manage-geoobjecttype-modal\"\n      });\n\n      geoObjectType.attributes.sort((a, b) => {\n          if (a.label.localizedValue < b.label.localizedValue) return -1;\n          else if (a.label.localizedValue > b.label.localizedValue) return 1;\n          else return 0;\n      });\n      this.bsModalRef.content.geoObjectType = geoObjectType;\n      this.bsModalRef.content.readOnly = readOnly;\n\n      (<ManageGeoObjectTypeModalComponent> this.bsModalRef.content).onGeoObjectTypeSubmitted.subscribe(data => {\n          if (data.isAbstract) {\n              this.refreshAll(this.currentHierarchy);\n          } else {\n              const position = this.getGeoObjectTypePosition(data.code);\n\n              if (position !== -1) {\n                  this.geoObjectTypes[position] = data;\n              }\n\n        // Update all of the hierarchies for the new geo object type\n              this.updateViewDatastructures();\n\n              this.hierarchies.forEach((hierarchyType: HierarchyType) => {\n                  this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n              });\n\n        // Update the current hierarchy view\n              if (this.currentHierarchy != null) {\n                  this.processHierarchyNodes(this.currentHierarchy.rootGeoObjectTypes[0]);\n              }\n\n              this.renderTree();\n          }\n      });\n  }\n\n  private getHierarchyTypePosition(code: string): number {\n      for (let i = 0; i < this.hierarchies.length; i++) {\n          let obj = this.hierarchies[i];\n          if (obj.code === code) {\n              return i;\n          }\n      }\n  }\n\n  private getGeoObjectTypePosition(code: string): number {\n      for (let i = 0; i < this.geoObjectTypes.length; i++) {\n          let obj = this.geoObjectTypes[i];\n          if (obj.code === code) {\n              return i;\n          }\n      }\n\n      return null;\n  }\n\n  public refreshPrimaryHierarchy(hierarchyType: HierarchyType) {\n      this.processHierarchyNodes(hierarchyType.rootGeoObjectTypes[0]);\n\n      for (let i = 0; i < this.hierarchies.length; ++i) {\n          let hierarchy = this.hierarchies[i];\n\n          if (hierarchy.code === hierarchyType.code) {\n              this.hierarchies[i] = hierarchyType;\n\n              this.setCurrentHierarchy(hierarchyType);\n          }\n      }\n\n      this.updateViewDatastructures();\n\n      this.renderTree();\n  }\n\n  public removeFromHierarchy(parentGotCode, gotCode, errCallback: (err: HttpErrorResponse) => void = null): void {\n      const that = this;\n\n      this.hierarchyService.removeFromHierarchy(this.currentHierarchy.code, parentGotCode, gotCode).then(hierarchyType => {\n          let got = that.findGeoObjectTypeByCode(gotCode);\n\n          let index = null;\n          for (let i = 0; i < got.relatedHierarchies.length; ++i) {\n              if (got.relatedHierarchies[i] === hierarchyType.code) {\n                  index = i;\n                  break;\n              }\n          }\n\n          if (index != null) {\n              got.relatedHierarchies.splice(index, 1);\n          }\n\n          that.refreshPrimaryHierarchy(hierarchyType);\n      }).catch((err: HttpErrorResponse) => {\n          if (errCallback != null) {\n              errCallback(err);\n          }\n\n          this.error(err);\n      });\n  }\n\n  public isActive(item: HierarchyType) {\n      return this.currentHierarchy === item;\n  }\n\n  onFilterChange(): void {\n      const label = this.filter.toLowerCase();\n\n      this.filteredHierarchiesByOrg = [];\n      this.filteredTypesByOrg = [];\n\n      this.hierarchiesByOrg.forEach((item: { org: Organization, hierarchies: HierarchyType[] }) => {\n          const filtered = item.hierarchies.filter((hierarchy: HierarchyType) => {\n              const index = hierarchy.label.localizedValue.toLowerCase().indexOf(label);\n\n              return (index !== -1);\n          });\n\n          this.filteredHierarchiesByOrg.push({ org: item.org, hierarchies: filtered });\n      });\n\n      this.typesByOrg.forEach((item: { org: Organization, types: GeoObjectType[] }) => {\n          const filtered = item.types.filter((type: GeoObjectType) => {\n              const index = type.label.localizedValue.toLowerCase().indexOf(label);\n\n              return (index !== -1);\n          });\n\n          this.filteredTypesByOrg.push({ org: item.org, types: filtered });\n      });\n\n      setTimeout(() => { this.registerDragHandlers(); }, 500);\n  }\n\n  handleInheritHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string) {\n      this.hierarchyService.setInheritedHierarchy(hierarchyTypeCode, inheritedHierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  handleUninheritHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string) {\n      this.hierarchyService.removeInheritedHierarchy(hierarchyTypeCode, geoObjectTypeCode).then((ht: HierarchyType) => {\n          this.refreshPrimaryHierarchy(ht);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  public importTypes(): void {\n      this.bsModalRef = this.modalService.show(ImportTypesModalComponent, {\n          animated: true,\n          backdrop: true,\n          ignoreBackdropClick: true,\n          class: \"upload-modal\"\n      });\n\n      this.bsModalRef.content.init(this.organizations);\n\n      this.bsModalRef.content.onNodeChange.subscribe(data => {\n      // Reload the page\n          this.refreshAll(null);\n      });\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n\t<cgr-header></cgr-header>\n\n\t<loading-bar></loading-bar>\n\n\t<div id=\"app-container\" class=\"container-fluid\">\n\n\t\t<!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n\t\t<div class=\"row\">\n\n\t\t\t<nav class=\"col-md-3 hierarchy-sidebar\">\n\n\t\t\t\t<div class=\"row\" style=\"padding: 5px 5px;\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" #searchInput\n\t\t\t\t\t\t\t[placeholder]=\"'hierarchy.sidebar.searchAll' | localize\" [(ngModel)]=\"filter\">\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<accordion [isAnimated]=\"true\" [closeOthers]=\"false\">\n\t\t\t\t\t<accordion-group [panelClass]=\"'hierarchy-sidebar-content'\" style=\"border-radius: 0;\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i style=\"margin-right:10px;\" class=\"fa fa-circle\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.geoObjectTypes\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let typeByOrg of filteredTypesByOrg;\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{typeByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || typeByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createGeoObjectType(null, false, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newGeoObjectType\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n                                        \n                                        <button (click)=\"createGeoObjectType(null, true, typeByOrg.org)\" type=\"button\" class=\"btn btn-primary\"\n                                            style=\"margin-bottom:20px;margin-left:10px;min-width:45%;\">\n                                            <localize key=\"hierarchies.add.group.button.label\"></localize>\n                                        </button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li class=\"list-group-item got-li-item\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-superTypeCode]=\"(type.superTypeCode && type.superTypeCode.length > 0) ? type.superTypeCode : null\"\n\t\t\t\t\t\t\t\t\t                  *ngFor=\"let type of typeByOrg.types\" [id]=\"type.code\"\n\t\t\t\t\t\t\t\t\t                  [attr.data-canDrag]=\"type.canDrag\"\n                                    [ngClass]=\"{'got-group-parent' : (type.isAbstract), 'got-group-child' : type.superTypeCode && type.superTypeCode.length > 0}\" >\n\t\t\t\t\t\t\t\t\t\t{{type.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"type.permissions.includes('WRITE')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n                                            \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t*ngIf=\"!excludeGeoObjectTypeDeletes(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteGeoObjectType(type)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\">\n                                            </i>\n                                                \n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\">\n                                            </i>\n                                            \n                                            <i *ngIf=\"(type.isAbstract)\" class=\"fa fa-plus clickable pull-right\"\n                                                (click)=\"createGeoObjectType(type, false, typeByOrg.org)\"\n                                                title=\"add\">\n                                            </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!type.permissions.includes('WRITE') && type.permissions.includes('READ')\" style=\"position:absolute;right:10px;background:rgba(255,255,255,.7);top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"manageGeoObjectType(type, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t\t<accordion-group [isOpen]='true' class=\"sidebar-section\" style=\"border-radius: 0;\" [panelClass]=\"'hierarchy-sidebar-content'\">\n\t\t\t\t\t\t<div accordion-heading style=\"padding: 10px 15px;\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.hierarchies\"></localize>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"sidebar-section-content\">\n\t\t\t\t\t\t\t<ul *ngFor=\"let hierarchyByOrg of filteredHierarchiesByOrg\" class=\"list-group\">\n\t\t\t\t\t\t\t\t<div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"got-org-label-wrapper\">\n\t\t\t\t\t\t\t\t\t\t<label>{{hierarchyByOrg.org.label.localizedValue}}</label>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div *ngIf=\"isSRA || hierarchyByOrg.org.code === userOrganization\" style=\"text-align: center;padding: 10px 0;\">\n\t\t\t\t\t\t\t\t\t\t<button (click)=\"createHierarchy()\" type=\"button\" class=\"btn btn-primary\"\n\t\t\t\t\t\t\t\t\t\t\tstyle=\"margin-bottom:20px;min-width:45%;\">\n\t\t\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.sidebar.newHierarchy\"></localize>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<li *ngFor=\"let hierarchy of hierarchyByOrg.hierarchies;\" [id]=\"hierarchy.code\"\n\t\t\t\t\t\t\t\t\t\tclass=\"list-group-item hier-li-item clickable\"\n\t\t\t\t\t\t\t\t\t\t[ngClass]=\"{'primary': (currentHierarchy != null && hierarchy.code === currentHierarchy.code), 'active': isActive(hierarchy)}\"\n\t\t\t\t\t\t\t\t\t\t(click)=\"hierarchyOnClick($event,hierarchy)\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}}\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-times delete-btn clickable pull-right\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"deleteHierarchyType(hierarchy)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.delete.helptext' | localize\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-pencil pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, false)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.edit.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t\t\t\t\t<span *ngIf=\"!isOrganizationRA(hierarchy.organizationCode)\" style=\"position:absolute;right:10px;background:inherit;top:50%;transform:translateY(-50%);\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-eye pull-right clickable\"\n\t\t\t\t\t\t\t\t\t\t\t\t(click)=\"editHierarchyType(hierarchy, true)\"\n\t\t\t\t\t\t\t\t\t\t\t\t[title]=\"'button.view.helptext' | localize\"> </i>\n\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</accordion-group>\n\t\t\t\t</accordion>\n        <div *ngIf=\"isSRA\" style=\"text-align: center;padding: 10px 0;\">\n          <button (click)=\"importTypes()\" type=\"button\" class=\"btn btn-primary\" style=\"margin-bottom:20px;min-width:45%;\">\n            <localize key=\"hierarchy.sidebar.importTypes\"></localize>\n          </button>                \n        </div>                \n\t\t\t</nav>\n\n\t\t\t<div class=\"col-md-9 hierarchy-content\">\n\t\t\t\t<div id=\"overflow-div\">\n\n\t\t\t\t\t<div *ngIf=\"currentHierarchy != null && (currentHierarchy.rootGeoObjectTypes == null || currentHierarchy.rootGeoObjectTypes.length == 0)\">\n                      <div *ngIf=\"isOrganizationRA(currentHierarchy.organizationCode, true)\" id=\"emptyHierarchyDropzone\" class=\"drop-box-container\">\n\t\t\t\t\t\t<div class=\"hierarchy-drop-box\">\n\t\t\t\t\t\t\t<div class=\"inner-drop-box\">\n\t\t\t\t\t\t\t\t<p class=\"upload-text\">\n\t\t\t\t\t\t\t\t\t<localize key=\"hierarchy.content.dragGotToHierarchy\"></localize>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n                      </div>\n                      <div *ngIf=\"!isOrganizationRA(currentHierarchy.organizationCode, true)\">\n                          <p class=\"upload-text\">\n                              <localize key=\"hierarchy.content.emptyHierarchy\"></localize>\n                          </p>\n                      </div>\n                    </div>\n\n\t\t\t\t\t<div id=\"svgHolder\">\n\t\t\t\t\t\t<!-- <svg id=\"graph\" style=\"width:1200px; height:750px\"></svg> -->\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"NodeTooltip\" class=\"modal-dialog\">\n              <div class=\"modal-content\">\n                <div class=\"modal-form\">\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.geoObjectTypeOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"geoObjectTypeOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                      <label>\n                        <localize key=\"hierarchy.nodeTooltip.hierarchy\"></localize>\n                      </label>\n                    </div>\n                    <div class=\"holder\">\n                      <label id=\"hierarchyLabel\"></label>\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyCode\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyCodeLabel\"></label>\n                     </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                       <label>\n                         <localize key=\"hierarchy.nodeTooltip.hierarchyOrganization\"></localize>\n                       </label>\n                     </div>\n                     <div class=\"holder\">\n                       <label id=\"hierarchyOrganizationLabel\"></label>\n                     </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n\t\t\t\t\t<!-- \n\t      <div class=\"col-md-4\">\n\t        <h3> \n\t            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n\t            <span *ngIf=\"currentHierarchy\"> {{currentHierarchy.label.localizedValue}}</span>\n\t        </h3>\n\t        <hr>\n\t        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n\t          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n\t        </div>\n\t        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n\t          <div>\n\t            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n\t          </div>\n\t        </div>\n\t      </div>\n\t      -->\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n","import { ChangeType } from \"@registry/model/constants\";\nimport { ChangeRequest } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime, GeoObjectType, HierarchyOverTime, ValueOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\nimport { DateService, LocalizationService } from \"@shared/service\";\nimport { Subject } from \"rxjs\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\n\nexport class ChangeRequestEditor {\n\n    changeRequest: ChangeRequest;\n\n    // eslint-disable-next-line no-undef\n    attributeEditors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[];\n\n    geometryAttributeType: AttributeType;\n\n    parentAttributeType: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    geoObjectType: GeoObjectType;\n\n    hierarchies: HierarchyOverTime[];\n\n    private _isValid: boolean;\n\n    onChangeSubject : Subject<ChangeType> = new Subject<ChangeType>();\n\n    localizationService: LocalizationService;\n\n    dateService: DateService;\n\n    registryService: RegistryService;\n\n    constructor(changeRequest: ChangeRequest, geoObject: GeoObjectOverTime, geoObjectType: GeoObjectType, hierarchies: HierarchyOverTime[], geometryAttributeType: AttributeType, parentAttributeType: AttributeType, localizationService: LocalizationService, dateService: DateService, registryService: RegistryService) {\n        this.changeRequest = changeRequest;\n        this.geoObject = geoObject;\n        this.geoObjectType = geoObjectType;\n        this.geometryAttributeType = geometryAttributeType;\n        this.parentAttributeType = parentAttributeType;\n        this.hierarchies = hierarchies;\n        this.localizationService = localizationService;\n        this.dateService = dateService;\n        this.registryService = registryService;\n\n        this.attributeEditors = this.generateAttributeEditors();\n        this.validate();\n    }\n\n    private generateAttributeEditors() {\n        let geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n        let editors = [];\n\n        let attrs = this.geoObjectType.attributes.slice(); // intentionally a shallow copy\n        attrs = attrs.filter(attr => geoObjectAttributeExcludes.indexOf(attr.code) === -1);\n        attrs.push(this.geometryAttributeType);\n        attrs.push(this.parentAttributeType);\n\n        attrs.forEach(attr => {\n            if (attr.code !== \"_PARENT_\") {\n                if (attr.isChangeOverTime) {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, null);\n\n                    editors.push(editor);\n                } else {\n                    let editor = new StandardAttributeCRModel(attr, this.geoObject, this.changeRequest);\n\n                    editors.push(editor);\n                }\n            } else {\n                this.hierarchies.forEach(hierarchy => {\n                    let editor = new ChangeRequestChangeOverTimeAttributeEditor(this, attr, hierarchy);\n\n                    editors.push(editor);\n                });\n            }\n        });\n\n        return editors;\n    }\n\n    public hasChanges(): boolean {\n        let hasChanges = false;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (attributeEditor.hasChanges()) {\n                hasChanges = true;\n            }\n        });\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    public validate(skipExists: boolean = false): boolean {\n        this._isValid = true;\n\n        this.attributeEditors.forEach(attributeEditor => {\n            if (!skipExists || attributeEditor.attribute.code !== \"exists\") {\n                attributeEditor.validate(true);\n\n                if (!attributeEditor.isValid()) {\n                    this._isValid = false;\n                }\n            }\n        });\n\n        return this._isValid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.geoObject.attributes[attributeCode]) {\n            let index = this.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditorForAttribute(attribute: AttributeType, hierarchy: HierarchyOverTime = null): ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel {\n        let indexOf = this.attributeEditors.findIndex(editor => (!editor.attribute.isChangeOverTime || (hierarchy == null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy == null) || ((editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy != null && (editor as ChangeRequestChangeOverTimeAttributeEditor).hierarchy.code === hierarchy.code)) && editor.attribute.code === attribute.code);\n\n        if (indexOf === -1) {\n            return null;\n        } else {\n            return this.attributeEditors[indexOf];\n        }\n    }\n\n    public getEditors(): (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] {\n        return this.attributeEditors;\n    }\n\n    public onChange(type: ChangeType) {\n        this.onChangeSubject.next(type);\n    }\n\n    public existsAtDate(date: string) {\n        let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.geoObjectType, \"exists\");\n        let existEditors = (this.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n\n        let valLen = existEditors.length;\n        for (let j = 0; j < valLen; ++j) {\n            let editor: ValueOverTimeCREditor = existEditors[j];\n\n            if (editor.startDate != null && editor.endDate != null && !editor.isDelete() && editor.value === true && this.dateService.between(date, editor.startDate, editor.endDate)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}\n","import { Component, OnInit, ViewChild, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { DatePipe } from \"@angular/common\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError, ValueOverTime } from \"@registry/model/registry\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\n@Component({\n    selector: \"geoobject-editor\",\n    templateUrl: \"./geoobject-editor.component.html\",\n    styleUrls: [\"./geoobject-editor.component.css\"],\n    providers: [DatePipe]\n})\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n\n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    geoObject: GeoObjectOverTime;\n\n    //    /*\n    //     * GeoObject Geometry Editor\n    //     */\n    //    @ViewChild( \"geometryEditor\" ) geometryEditor;\n    //\n    //    areGeometriesValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    constructor(private modalService: BsModalService, public bsModalRef: BsModalRef,\n        private registryService: RegistryService, private localizeService: LocalizationService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate(votArray: ValueOverTime[], startDate: string): any {\n        for (let i: number = 0; i < votArray.length; ++i) {\n            if (votArray[i].startDate === startDate) {\n                return votArray[i];\n            }\n        }\n\n        return null;\n    }\n\n    setMasterListId(id: string) {\n        this.masterListId = id;\n    }\n\n    setOnSuccessCallback(func: Function) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew(typeCode: string, dateStr: string, isGeometryEditable: boolean) {\n        this.isNewGeoObject = true;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.hierarchies = retJson.hierarchies;\n        });\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError(importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType(typeCode);\n        this.fetchLocales();\n\n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0) {\n            this.hierarchies = importError.object.parents;\n        } else {\n            this.registryService.newGeoObjectOverTime(typeCode).then(retJson => {\n                this.hierarchies = retJson.hierarchies;\n            });\n        }\n\n        this.geoObject = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n\n        this.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n            let config = {\n                historyId: historyId,\n                importErrorId: importError.id,\n                resolution: \"APPLY_GEO_OBJECT\",\n                parentTreeNode: hierarchies,\n                geoObject: geoObject,\n                isNew: importError.object.isNew\n            };\n\n            this.registryService.submitErrorResolve(config)\n                .then(() => {\n                    if (this.onSuccessCallback != null) {\n                        this.onSuccessCallback();\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n        };\n    }\n\n\n\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting(code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean): void {\n        this.isNewGeoObject = false;\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject(code, typeCode);\n        this.fetchGeoObjectType(typeCode);\n        this.fetchHierarchies(code, typeCode);\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject(code: string, typeCode: string) {\n        this.registryService.getGeoObjectOverTime(code, typeCode).then(geoObject => {\n            this.geoObject = new GeoObjectOverTime(this.geoObjectType, JSON.parse(JSON.stringify(geoObject)).attributes);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then(locales => {\n            this.localizeService.setLocales(locales);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    private fetchGeoObjectType(code: string) {\n        this.registryService.getGeoObjectTypes([code], null)\n            .then(geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n\n                if (this.geoObject != null) {\n                    this.geoObject.geoObjectType = this.geoObjectType;\n                }\n\n                if (!this.geoObjectType.isGeometryEditable) {\n                    //                    this.areGeometriesValid = true;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                // eslint-disable-next-line no-console\n                console.log(err);\n            });\n    }\n\n    private fetchHierarchies(code: string, typeTypeCode: string) {\n        this.registryService.getHierarchiesForGeoObject(code, typeTypeCode)\n            .then((hierarchies: any) => {\n                this.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    getTypeAheadObservable(text, typeCode) {\n        return Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(text, typeCode).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, ptn: ParentTreeNode): void {\n        this.registryService.getGeoObjectByCode(e.item.code, ptn.geoObject.properties.type)\n            .then(geoObject => {\n                ptn.geoObject = geoObject;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n    }\n\n    canSubmit(): boolean {\n        return this.attributeEditor && this.attributeEditor.isValid() &&\n            (this.isNewGeoObject || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    public cancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n        this.bsModalRef.hide();\n\n        if (this.submitFunction == null) {\n            /*\n                this.registryService.applyGeoObjectEdit(this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes)\n                    .then(() => {\n    \n                        if (this.onSuccessCallback != null) {\n                            this.onSuccessCallback();\n                        }\n    \n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                    */\n        } else {\n            this.submitFunction(this.geoObject, this.hierarchies, this.attributeEditor);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\">\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"this.geoObjectType && geoObject && hierarchies\"\n            #attributeEditor \n            [geoObjectType]=\"this.geoObjectType\"\n            [postGeoObject]=\"this.geoObject\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isGeometryInlined]=\"true\"\n            [hierarchies]=\"hierarchies\"\n            [readOnly]=\"false\">\n        </geoobject-shared-attribute-editor>\n\n        <!--\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n        -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"!canSubmit()\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { HierarchyType, HierarchyGroupedTypeView } from \"@registry/model/hierarchy\";\nimport { TreeEntity } from \"@registry/model/registry\";\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class HierarchyService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getHierarchyTypes(types: any): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"types\", JSON.stringify(types));\n\n        return this.http\n            .get<HierarchyType[]>(registry.contextPath + \"/cgr/hierarchytype/get-all\", { params: params })\n            .toPromise();\n    }\n\n    getHierarchyGroupedTypes(): Promise<HierarchyGroupedTypeView[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<HierarchyGroupedTypeView[]>(registry.contextPath + \"/hierarchy/groupedTypes\", { params: params })\n            .toPromise();\n    }\n\n    addChildToHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/add\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    insertBetweenTypes(hierarchyCode: string, parentGeoObjectTypeCode: string, middleGeoObjectTypeCode: string, youngestGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/insertBetweenTypes\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, middleGeoObjectTypeCode: middleGeoObjectTypeCode, youngestGeoObjectTypeCode: youngestGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeFromHierarchy(hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/remove\", JSON.stringify({ hierarchyCode: hierarchyCode, parentGeoObjectTypeCode: parentGeoObjectTypeCode, childGeoObjectTypeCode: childGeoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    createHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/create\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateHierarchyType(htJSON: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/cgr/hierarchytype/update\", JSON.stringify({ htJSON: htJSON }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    deleteHierarchyType(code: string): Promise<TreeEntity> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>(registry.contextPath + \"/cgr/hierarchytype/delete\", { code: code }, { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    setInheritedHierarchy(hierarchyTypeCode: string, inheritedHierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/setInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, inheritedHierarchyTypeCode: inheritedHierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeInheritedHierarchy(hierarchyTypeCode: string, geoObjectTypeCode: string): Promise<HierarchyType> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>(registry.contextPath + \"/hierarchy/removeInherited\", JSON.stringify({ hierarchyTypeCode: hierarchyTypeCode, geoObjectTypeCode: geoObjectTypeCode }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from \"@registry/model/io\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    importSpreadsheet(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport(configuration: ImportConfiguration): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/cancel-import\", JSON.stringify({ configuration: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    importShapefile(configuration: ImportConfiguration): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>(registry.contextPath + \"/etl/import\", JSON.stringify({ json: configuration }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    listGeoObjectTypes(includeAbstractTypes: boolean): Promise<{ label: string, code: string, orgCode: string, superTypeCode?: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"includeAbstractTypes\", includeAbstractTypes.toString());\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>(registry.contextPath + \"/cgr/geoobjecttype/list-types\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors(code: string, hierarchyCode: string, includeInheritedTypes: boolean, includeChild: boolean = false): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        params = params.set(\"includeInheritedTypes\", includeInheritedTypes.toString());\r\n        params = params.set(\"includeChild\", includeChild.toString());\r\n\r\n        return this.http\r\n            .get<Location[]>(registry.contextPath + \"/cgr/geoobjecttype/get-ancestors\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForSubtypes(code: string, includeTypes: boolean): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"includeTypes\", includeTypes.toString());\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>(registry.contextPath + \"/cgr/geoobjecttype/get-subtype-hierarchies\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, hierarchy: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym(entityId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/geo-synonym/createGeoEntitySynonym\", JSON.stringify({ entityId: entityId, label: label }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym(synonymId: string, vOid: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geo-synonym/deleteGeoEntitySynonym\", JSON.stringify({ synonymId: synonymId, vOid: vOid }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getTermSuggestions(mdAttributeId: string, text: string, limit: string): Promise<{ text: string, data: any }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"mdAttributeId\", mdAttributeId);\r\n        params = params.set(\"text\", text);\r\n        params = params.set(\"limit\", limit);\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>(registry.contextPath + \"/uploader/getClassifierSuggestions\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    createTermSynonym(classifierId: string, label: string): Promise<Synonym> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ classifierId: classifierId, label: label });\r\n\r\n        return this.http\r\n            .post<Synonym>(registry.contextPath + \"/uploader/createClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym(synonymId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let data = JSON.stringify({ synonymId: synonymId });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/uploader/deleteClassifierSynonym\", data, { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    createTerm(label: string, code: string, parentTermCode: string): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm(parentTermCode: string, termCode: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from \"@shared/service\";\n\nimport { AllLocaleInfo } from \"@registry/model/localization-manager\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>(registry.contextPath + \"/localization/getNewLocaleInformation\")\n            .toPromise();\n    }\n\n    installLocale(language: string, country: string, variant: string): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if (language != null) {\n            params = params.set(\"language\", language);\n        }\n\n        if (country != null) {\n            params = params.set(\"country\", country);\n        }\n\n        if (variant != null) {\n            params = params.set(\"variant\", variant);\n        }\n\n        return this.http\n            .get<void>(registry.contextPath + \"/localization/installLocale\", { params: params })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\nimport * as mapboxgl from \"mapbox-gl\";\r\n\r\nimport { LocationInformation } from \"@registry/model/location-manager\";\r\nimport { EventService } from \"@shared/service\";\r\nimport { GeoObject } from \"@registry/model/registry\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\r\ndeclare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor(private http: HttpClient, private eventService: EventService) {\r\n        (mapboxgl as any).accessToken = registry.mapboxAccessToken;\r\n    }\r\n\r\n    roots(typeCode: string, hierarchyCode: string, date: string): Promise<LocationInformation> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (typeCode != null) {\r\n            params = params.set(\"typeCode\", typeCode);\r\n        }\r\n\r\n        if (hierarchyCode != null) {\r\n            params = params.set(\"hierarchyCode\", hierarchyCode);\r\n        }\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<LocationInformation>(registry.contextPath + \"/registrylocation/roots\", { params: params })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    search(text: string, date: string, showOverlay: boolean = true): Promise<{ type: string, features: GeoObject[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"text\", text);\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<{ type: string, features: GeoObject[] }>(registry.contextPath + \"/registrylocation/search\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport {\r\n    GeoObject, GeoObjectType, AttributeType, Term, ParentTreeNode,\r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob\r\n} from \"@registry/model/registry\";\r\n\r\nimport { HierarchyType } from \"@registry/model/hierarchy\";\r\nimport { Progress } from \"@shared/model/progress\";\r\n\r\nimport { Organization, LocaleView, PageResult } from \"@shared/model/core\";\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\r\n\r\nexport interface AttributeTypeService {\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType>;\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType>;\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean>;\r\n}\r\n\r\n@Injectable()\r\nexport class RegistryService implements AttributeTypeService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], organizations: Organization[], locales: LocaleView[] }>(registry.contextPath + \"/cgr/init\")\r\n            .toPromise();\r\n    }\r\n\r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes(types: string[], hierarchies: string[]): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        if (types != null) {\r\n            params = params.set(\"types\", JSON.stringify(types));\r\n        }\r\n\r\n        if (hierarchies != null) {\r\n            params = params.set(\"hierarchies\", JSON.stringify(hierarchies));\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>(registry.contextPath + \"/cgr/geoobjecttype/get-all\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects(childCode: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"childCode\", childCode);\r\n        params = params.set(\"childTypeCode\", childTypeCode);\r\n        params = params.set(\"parentTypes\", JSON.stringify(parentTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        if (date != null) {\r\n            params = params.set(\"date\", date);\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>(registry.contextPath + \"/cgr/geoobject/get-parent-geoobjects\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getChildGeoObjects(parentCode: string, parentTypeCode: string, childrenTypes: any, recursive: boolean): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"parentCode\", parentCode);\r\n        params = params.set(\"parentTypeCode\", parentTypeCode);\r\n        params = params.set(\"childrenTypes\", JSON.stringify(childrenTypes));\r\n        params = params.set(\"recursive\", JSON.stringify(recursive));\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>(registry.contextPath + \"/cgr/geoobject/getchildren\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    doesGeoObjectExistAtRange(startDate: string, endDate: string, typeCode: string, code: string): Promise<{ exists: boolean, invalid: boolean }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"startDate\", startDate);\r\n        params = params.set(\"endDate\", endDate);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"code\", code);\r\n\r\n        return this.http\r\n            .get<{ exists: boolean, invalid: boolean }>(registry.contextPath + \"/geoobject/exists-at-range\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance(typeCode: string): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType(gtJSON: string): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/create\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType(gtJSON: GeoObjectType): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>(registry.contextPath + \"/cgr/geoobjecttype/update\", JSON.stringify({ gtJSON: gtJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType(code: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/cgr/geoobjecttype/delete\", JSON.stringify({ code: code }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/addattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType(geoObjTypeId: string, attribute: AttributeType): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/updateattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeType: attribute }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType(geoObjTypeId: string, attributeName: string): Promise<boolean> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<boolean>(registry.contextPath + \"/cgr/geoobjecttype/deleteattribute\", JSON.stringify({ geoObjTypeId: geoObjTypeId, attributeName: attributeName }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption(parentTermCode: string, term: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/addterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: term }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption(parentTermCode: string, termJSON: Term): Promise<Term> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Term>(registry.contextPath + \"/cgr/geoobjecttype/updateterm\", JSON.stringify({ parentTermCode: parentTermCode, termJSON: termJSON }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption(parentTermCode: string, termCode: string): Promise<AttributeType> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<AttributeType>(registry.contextPath + \"/cgr/geoobjecttype/deleteterm\", JSON.stringify({ parentTermCode: parentTermCode, termCode: termCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject(id: string, typeCode: string, showOverlay: boolean = true): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"id\", id);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds(code: string, typeCode: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBoundsAtDate(code: string, typeCode: string, date: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n        params = params.set(\"date\", date);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/cgr/geoobject-time/get-bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode(code: string, typeCode: string): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        return this.http\r\n            .get<GeoObject>(registry.contextPath + \"/cgr/geoobject/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject(code: string, typeCode: string, showOverlay: boolean = true): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", code);\r\n        params = params.set(\"typeCode\", typeCode);\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>(registry.contextPath + \"/cgr/geoobject/get-hierarchies-over-time\", { params: params })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions(text: string, type: string, parent: string, parentTypeCode: string, hierarchy: string, startDate: string, endDate: string): Promise<{ id: string, code: string, name: string, typeCode: string, uid: string }[]> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        if (parent != null && hierarchy != null) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if (parentTypeCode != null) {\r\n            params.parentTypeCode = parentTypeCode;\r\n        }\r\n\r\n        if (startDate != null && endDate != null) {\r\n            params.startDate = startDate;\r\n            params.endDate = endDate;\r\n        }\r\n\r\n        return this.http\r\n            .post<{ id: string, code: string, name: string, typeCode: string, uid: string }[]>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead(text: string, type: string): Promise<GeoObject> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>(registry.contextPath + \"/cgr/geoobject/suggestions\", JSON.stringify(params), { headers: headers })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-active\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"sortAttr\", sortAttr);\r\n        params = params.set(\"isAscending\", isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/etl/get-completed\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-import-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getExportDetails(historyId: string, pageSize: number, pageNumber: number): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>(registry.contextPath + \"/etl/get-export-details\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/etl/import-resolve\", JSON.stringify({ historyId: historyId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitValidationResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/validation-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    submitErrorResolve(config: any): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/etl/error-resolve\", JSON.stringify({ config: config }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<LocaleView[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<LocaleView[]>(registry.contextPath + \"/localization/get-locales\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime(geoObjectCode: string, geoObjectTypeCode: string): Promise<GeoObjectOverTime> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"code\", geoObjectCode);\r\n        params = params.set(\"typeCode\", geoObjectTypeCode);\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>(registry.contextPath + \"/cgr/geoobject-time/get-code\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectOverTime(typeCode: string, showOverlay: boolean = true): Promise<any> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/cgr/geoobject-time/newGeoObjectInstance\", JSON.stringify({ typeCode: typeCode }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setAttributeVersions(geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[]): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>(registry.contextPath + \"/cgr/geoobject/setAttributeVersions\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit(geoObjectCode: string, geoObjectTypeCode: string, actions: string, masterListId: string, notes: string, showOverlay: boolean = true): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        // TODO\r\n        // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n        // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        // for(const prop in geoObject.attributes) {\r\n        //\tlet attr = geoObject.attributes[prop];\r\n        //\tif(attr.type === \"date\"){\r\n        //\t\tattr.values.forEach( val => {\r\n        //\t\t\tval.value = new Date(val.value).getTime().toString();\r\n        //\t\t})\r\n        //\t}\r\n        // }\r\n\r\n        let params = { geoObjectCode: geoObjectCode, geoObjectTypeCode: geoObjectTypeCode, actions: actions };\r\n\r\n        if (masterListId != null) {\r\n            params[\"masterListId\"] = masterListId;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/updateGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n    * Not really part of the RegistryService\r\n    */\r\n    applyGeoObjectCreate(parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string, showOverlay: boolean = true): Promise<void> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        // Custom attributes of Date type need to be encoded to date/time. The Date picker requires this format to be yyyy-mm-dd.\r\n        // This conversion allows the date picker to work while ensuring the server recieves the correct format.\r\n        for (const prop in geoObject.attributes) {\r\n            let attr = geoObject.attributes[prop];\r\n            if (attr.type === \"date\") {\r\n                attr.values.forEach(val => {\r\n                    val.value = new Date(val.value).getTime().toString();\r\n                });\r\n            }\r\n        }\r\n\r\n        let params = { geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if (parentTreeNode != null) {\r\n            params[\"parentTreeNode\"] = parentTreeNode;\r\n        }\r\n        if (notes != null) {\r\n            params[\"notes\"] = notes;\r\n        }\r\n\r\n        if (showOverlay) {\r\n            this.eventService.start();\r\n        }\r\n\r\n        return this.http\r\n            .post<void>(registry.contextPath + \"/geoobject-editor/createGeoObject\", JSON.stringify(params), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                if (showOverlay) {\r\n                    this.eventService.complete();\r\n                }\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    progress(oid: string): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<Progress>(registry.contextPath + \"/master-list/progress\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getDatasetBounds(oid: string): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"oid\", oid);\r\n\r\n        return this.http\r\n            .get<number[]>(registry.contextPath + \"/master-list/bounds\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    getOrganizations(): Promise<Organization[]> {\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(registry.contextPath + \"/cgr/organizations/get-all\")\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { SynchronizationConfig, OrgSyncInfo, ExportScheduledJob } from \"@registry/model/registry\";\nimport { AttributeConfigInfo } from \"@registry/model/sync\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class SynchronizationConfigService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getPage(pageNumber: number, pageSize: number): Promise<PageResult<SynchronizationConfig>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<SynchronizationConfig>>(registry.contextPath + \"/synchronization-config/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    get(oid: string): Promise<SynchronizationConfig> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getCustomAttrCfg(geoObjectTypeCode: string, externalId: string): Promise<AttributeConfigInfo[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalId\", externalId);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<AttributeConfigInfo[]>(registry.contextPath + \"/synchronization-config/get-custom-attr\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getConfigForES(externalSystemId: string, hierarchyTypeCode: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"externalSystemId\", externalSystemId);\n        params = params.set(\"hierarchyTypeCode\", hierarchyTypeCode);\n\n        this.eventService.start();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-config-for-es\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    apply(config: SynchronizationConfig): Promise<SynchronizationConfig> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SynchronizationConfig>(registry.contextPath + \"/synchronization-config/apply\", JSON.stringify({ config: config }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    edit(oid: string): Promise<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        let params = {};\n\n        if (oid != null) {\n            params = { oid: oid };\n        }\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ config: SynchronizationConfig, orgs: OrgSyncInfo[] }>(registry.contextPath + \"/synchronization-config/edit\", JSON.stringify(params), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    remove(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    run(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/synchronization-config/run\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getJobs(oid: string, pageNumber: number, pageSize: number): Promise<PageResult<ExportScheduledJob>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        //        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExportScheduledJob>>(registry.contextPath + \"/synchronization-config/get-jobs\", { params: params })\n            //            .pipe(finalize(() => {\n            //                this.eventService.complete();\n            //            }))\n            .toPromise();\n    }\n\n    getFhirExportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-export-implementations\", { params: params })\n            .toPromise();\n    }\n\n    getFhirImportImplementations(): Promise<{ className: string, label: string }[]> {\n        let params: HttpParams = new HttpParams();\n\n        return this.http\n            .get<any[]>(registry.contextPath + \"/synchronization-config/get-fhir-import-implementations\", { params: params })\n            .toPromise();\n    }\n\n}\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from \"@angular/core\";\r\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { finalize } from \"rxjs/operators\";\r\n\r\nimport { EventService } from \"@shared/service\";\r\n\r\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";import { PageResult } from \"@shared/model/core\";\r\n declare let registry: GeoRegistryConfiguration;\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(private http: HttpClient, private eventService: EventService) { }\r\n\r\n    getMyTasks(pageNum: number, pageSize: number, whereStatus: string): Promise<PageResult<any>> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set(\"orderBy\", \"createDate\");\r\n        params = params.set(\"pageNum\", pageNum.toString());\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"whereStatus\", whereStatus);\r\n\r\n        return this.http\r\n            .get<PageResult<any>>(registry.contextPath + \"/tasks/get\", { params: params })\r\n            .toPromise();\r\n    }\r\n\r\n    completeTask(taskId: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/complete\", JSON.stringify({ id: taskId }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n    setTaskStatus(taskId: string, status: string): Promise<Response> {\r\n        let headers = new HttpHeaders({\r\n            \"Content-Type\": \"application/json\"\r\n        });\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>(registry.contextPath + \"/tasks/setTaskStatus\", JSON.stringify({ id: taskId, status: status }), { headers: headers })\r\n            .pipe(finalize(() => {\r\n                this.eventService.complete();\r\n            }))\r\n            .toPromise();\r\n    }\r\n\r\n}\r\n","import { Component, OnInit, ViewChild, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { AttributeType, AttributeTermType, AttributeDecimalType, ManageGeoObjectTypeModalState, AttributedType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { AttributeTypeService } from \"@registry/service\";\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"define-attribute-modal-content\",\n    templateUrl: \"./define-attribute-modal-content.component.html\",\n    styleUrls: [\"./define-attribute-modal-content.css\"]\n})\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: AttributedType;\n    @Input() service: AttributeTypeService;\n\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n    @Output() geoObjectTypeChange: EventEmitter<AttributedType> = new EventEmitter<AttributedType>();\n\n    message: string = null;\n    newAttribute: AttributeType = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.create.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit(): void {\n        if (this.attributeInputComponent) {\n            this.attributeInputComponent.animate();\n        }\n    }\n\n    handleOnSubmit(): void {\n        this.service.addAttributeType(this.geoObjectType.code, this.newAttribute).then(data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    setAttribute(type: string): void {\n        if (type === \"term\") {\n            this.newAttribute = new AttributeTermType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else if (type === \"float\") {\n            this.newAttribute = new AttributeDecimalType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        } else {\n            this.newAttribute = new AttributeType(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        let isAttrValid: boolean = false;\n\n        if (this.attributeInputComponent) {\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n\n        if (isAttrValid) {\n            return true;\n        }\n\n        return false;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'classification'}\" (click)=\"setAttribute('classification')\">\n                                <localize key=\"data.type.label.classification\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [isNew]=\"true\" [excludeDescription]=\"false\" [type]=\"newAttribute.type\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from \"@angular/core\";\nimport { Classification } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { Observable, Observer, Subscription } from \"rxjs\";\nimport { ClassificationFieldModalComponent } from \"./classification-field-modal.component\";\n\n@Component({\n    selector: \"classification-field\",\n    templateUrl: \"./classification-field.component.html\",\n    styleUrls: []\n})\nexport class ClassificationFieldComponent implements OnInit, OnDestroy {\n\n    @Input() classificationType: string;\n    @Input() rootCode: string;\n\n    @Input() name: string;\n    @Input() disabled: boolean = false;\n    @Input() customStyles: string = \"\";\n    @Input() classNames: string = \"\";\n    @Input() container: string = null;\n\n    @Input() value: { code: string, label: LocalizedValue } = null;\n\n    @Output() valueChange = new EventEmitter<{ code: string, label: LocalizedValue }>();\n\n    loading: boolean = false;\n    text: string = \"\";\n\n    typeahead: Observable<Object> = null;\n    subscription: Subscription = null;\n\n    constructor(\n        private modalService: BsModalService,\n        private service: ClassificationService) { }\n\n    ngOnInit(): void {\n        this.typeahead = new Observable((observer: Observer<Object>) => {\n            this.service.search(this.classificationType, this.rootCode, this.text).then(results => {\n                observer.next(results);\n            });\n        });\n\n        if (this.value != null) {\n            this.text = this.value.label.localizedValue;\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    typeaheadOnSelect(match: TypeaheadMatch): void {\n        if (match != null) {\n            const item: Classification = match.item;\n            this.text = item.displayLabel.localizedValue;\n\n            if (this.value == null || this.value.code !== item.code) {\n                this.setValue({ code: item.code, label: item.displayLabel });\n            }\n        } else if (this.value != null) {\n            this.setValue(null);\n        }\n    }\n\n    setValue(value: { code: string, label: LocalizedValue }): void {\n        this.value = value;\n        this.valueChange.emit(this.value);\n    }\n\n    onViewTree(): void {\n        const bsModalRef = this.modalService.show(ClassificationFieldModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = bsModalRef.content.init(this.classificationType, this.rootCode, this.disabled, this.value, classification => {\n            this.text = classification.displayLabel.localizedValue;\n            this.setValue({ code: classification.code, label: classification.displayLabel });\n        });\n    }\n\n    onTextChange(): void {\n        if (this.value != null && (this.text == null || this.text.length === 0)) {\n            this.setValue(null);\n        }\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.displayLabel.localizedValue }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"input-group\">\n\n  <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n    [style]=\"customStyles\" [name]=\"name\" [disabled]=\"disabled\" [(ngModel)]=\"text\"\n    [class]=\"classNames\"    \n    [typeaheadAsync]=\"true\"\n    [typeahead]=\"typeahead\"\n    (change)=\"onTextChange()\"\n    (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" (typeaheadLoading)=\"loading = $event\"\n    [ngClass]=\"{'inline-loading':loading}\" [typeaheadOptionsLimit]=\"7\"\n    [typeaheadItemTemplate]=\"customItemTemplate\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\"\n    [container]=\"container\"\n    >\n\n  <span class=\"input-group-addon clickable addon-alert\" (click)=\"onViewTree()\">\n    <i class=\"fa fa-ellipsis-v\" aria-hidden=\"true\"></i>\n  </span>\n</div>","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState, AttributedType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { StepConfig } from \"@shared/model/modal\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { AttributeTypeService, RegistryService } from \"@registry/service\";\n\nimport { AttributeInputComponent } from \"../geoobjecttype-management/attribute-input.component\";\n\n@Component({\n    selector: \"edit-attribute-modal-content\",\n    templateUrl: \"./edit-attribute-modal-content.component.html\",\n    styleUrls: [\"./edit-attribute-modal-content.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]]\n})\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: AttributedType;\n    @Input() attribute: AttributeType = null;\n    @Input() service: AttributeTypeService;\n\n    @Output() geoObjectTypeChange: EventEmitter<AttributedType> = new EventEmitter<AttributedType>();\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: true }\n        ]\n    };\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent: AttributeInputComponent;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.service.updateAttributeType(this.geoObjectType.code, this.attribute).then(data => {\n            for (let i = 0; i < this.geoObjectType.attributes.length; i++) {\n                let attr = this.geoObjectType.attributes[i];\n                if (attr.code === data.code) {\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.stateChange.emit(state);\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    back(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>:\n                        {{attribute.label.localizedValue}}\n                    </h1>\n\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.text\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.integer\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.float\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.boolean\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.date\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.term\"></localize>\n                    </h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'classification'\">\n                        <localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize\n                            key=\"data.type.label.classification\"></localize>\n                    </h4>\n\n                </div>\n\n\n\n                <fieldset>\n\n                    <attribute-input [isNew]=\"false\"\n                        [excludeDescription]=\"attribute.type === 'term' ? true : false\" [type]=\"attribute.type\"\n                        [(attribute)]=\"attribute\">\n                    </attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\"\n                        [geoObjectType]=\"geoObjectType\" (stateChange)=\"onModalStateChange($event)\"></term-option-widget>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <!-- <div class=\"label-holder\"> \n                        </div> -->\n                            <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"manage-term-options\",\n    templateUrl: \"./manage-term-options.component.html\",\n    styleUrls: [\"./manage-term-options.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                    style({ opacity: 0 }),\n                    animate(\"500ms\", style({ opacity: 1 }))\n                ]\n                ),\n                transition(\n                    \":leave\", [\n                    style({ opacity: 1 }),\n                    animate(\"0ms\", style({ opacity: 0 }))\n\n                ]\n                )]\n        )\n    ]\n})\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType;\n\n    @Output() attributeChange = new EventEmitter<AttributeTermType>();\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    termOption: Term;\n    state: string = \"none\";\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.termOption = new Term(\"\", this.localizeService.create(), this.localizeService.create());\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if (this.termOption.code && this.termOption.code.length > 0) {\n            // If code has a space\n            if (this.termOption.code.indexOf(\" \") !== -1) {\n                return false;\n            }\n\n            // If label is only spaces\n            for (let i = 0; i < this.termOption.label.localeValues.length; i++) {\n                if (this.termOption.label.localeValues[i].value.replace(/\\s/g, \"\").length === 0) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (this.termOption.code && this.termOption.code.indexOf(\" \") !== -1) {\n            return false;\n        }\n\n        return false;\n    }\n\n    addTermOption(): void {\n        this.registryService.addAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            this.attribute.rootTerm.children.push(data);\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    deleteTermOption(termOption: Term): void {\n        this.registryService.deleteAttributeTermTypeOption(this.attribute.rootTerm.code, termOption.code).then(data => {\n            if (this.attribute.rootTerm.children.indexOf(termOption) !== -1) {\n                this.attribute.rootTerm.children.splice(this.attribute.rootTerm.children.indexOf(termOption), 1);\n            }\n\n            this.attributeChange.emit(this.attribute);\n\n            this.clearTermOption();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    removeTermOption(termOption: Term): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + termOption.label + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteTermOption(termOption);\n        });\n    }\n\n    editTermOption(termOption: Term): void {\n        const state = {\n            state: GeoObjectTypeModalStates.editTermOption,\n            attribute: this.attribute,\n            termOption: JSON.parse(JSON.stringify(termOption))\n        };\n\n        this.stateChange.emit(state);\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from \"@shared/model/modal\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObjectType, AttributeTermType, Term, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"edit-term-option-input\",\n    templateUrl: \"./edit-term-option-input.component.html\",\n    styleUrls: [],\n    animations: [\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                    style({ opacity: 0 }),\n                    animate(\"500ms\", style({ opacity: 1 }))\n                ]\n                ),\n                transition(\n                    \":leave\", [\n                    style({ opacity: 1 }),\n                    animate(\"0ms\", style({ opacity: 0 }))\n                ]\n                )]\n        )\n    ]\n})\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType = null;\n    @Input() termOption: Term;\n\n    @Output() stateChange: EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.editAttribute, attribute: this.attribute, termOption: \"\" };\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), active: true, enabled: true }\n\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService,\n                private localizeService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    ngOnDestroy() {\n    }\n\n    handleOnSubmit(): void {\n        this.registryService.updateAttributeTermTypeOption(this.attribute.rootTerm.code, this.termOption).then(data => {\n            // Update the term definition on the attribute\n            const index = this.attribute.rootTerm.children.findIndex(t => t.code === data.code);\n\n            if (index !== -1) {\n                this.attribute.rootTerm.children[index] = data;\n            }\n\n            this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    isFormValid(): boolean {\n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n\n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true;\n    }\n\n    cancel(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: null });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #tForm=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"!tForm.invalid && handleOnSubmit()\">\n    \n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\">\n                            </span>\n                        </div>\n                    </div>\n                    \n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"tForm.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import * as d3 from \"d3\";\n\nexport function calculateTextWidth(text: string, fontSize: number): number {\n    let svg = d3.select(\"#svg\");\n\n    let textCalcGroup = svg.append(\"g\").classed(\"g-text-calc\", true);\n\n    let textEl = textCalcGroup.append(\"text\")\n        .attr(\"x\", -5000)\n        .attr(\"y\", -5000)\n        .attr(\"font-size\", fontSize)\n        .text(text);\n\n    let bbox = textEl.node().getBBox();\n\n    d3.select(\".g-text-calc\").remove();\n\n    return bbox.width + 2; // +2 is for padding. I caught this truncating just ever so slightly\n}\n\nexport function svgPoint(x: number, y: number) {\n    let svg: any = d3.select(\"#svg\").node();\n    let pt = svg.createSVGPoint();\n\n    pt.x = x;\n    pt.y = y;\n\n    return pt.matrixTransform(svg.getScreenCTM().inverse());\n}\n\nexport function isPointWithin(point: { x: number, y: number }, bbox: { x: number, y: number, width: number, height: number }) {\n    return point.y > bbox.y && point.y < (bbox.y + bbox.height) && point.x > bbox.x && point.x < (bbox.x + bbox.width);\n}\n\nexport function isBboxPartiallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) ||\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) || isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function isBboxTotallyWithin(bbox1: { x: number, y: number, width: number, height: number }, bbox2: { x: number, y: number, width: number, height: number }) {\n    return isPointWithin({ x: bbox1.x, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y + bbox1.height }, bbox2) &&\n        isPointWithin({ x: bbox1.x + bbox1.width, y: bbox1.y }, bbox2) && isPointWithin({ x: bbox1.x, y: bbox1.y + bbox1.height }, bbox2);\n}\n\nexport function getBboxFromSelection(selection: any) {\n    return { x: parseInt(selection.attr(\"x\")), y: parseInt(selection.attr(\"y\")), width: parseInt(selection.attr(\"width\")), height: parseInt(selection.attr(\"height\")) };\n}\n\n","/* eslint-disable indent */\nimport { Component, OnInit, Input, Output, SimpleChanges, EventEmitter } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { GeoObject, GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { Subject } from \"rxjs\";\nimport { RelationshipVisualizationService } from \"@registry/service/relationship-visualization.service\";\nimport { Layout, Orientation } from \"@swimlane/ngx-graph\";\n\nimport { DagreNodesOnlyLayout } from \"./relationship-viz-layout\";\n\nimport * as shape from \"d3-shape\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport * as ColorGen from \"color-generator\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const SELECTED_NODE_COLOR: string = \"#4287f5\";\n\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\nexport const COLLAPSE_ANIMATION_TIME: number = 500; // in ms\n\nexport interface Relationship {\n    oid: string,\n    label: LocalizedValue,\n    isHierarchy: boolean,\n    code: string,\n    type?: string\n}\n\nexport const DIMENSIONS = {\n    NODE: { WIDTH: 30, HEIGHT: 30 },\n    LABEL: { WIDTH: 100, HEIGHT: 60, FONTSIZE: 14 },\n    PADDING: {\n        BETWEEN_NODES: 0,\n        NODE_LABEL: 5,\n        NODE_EDGE: 5\n    }\n};\n\nexport interface Vertex {\n    code: string,\n    typeCode: string,\n    id: string,\n    label: string,\n    relation: \"PARENT\" | \"CHILD\" | \"SELECTED\"\n}\n\nexport interface Edge {\n    id: string,\n    label: string,\n    source: string,\n    target: string\n}\n\n@Component({\n\n    selector: \"relationship-visualizer\",\n    templateUrl: \"./relationship-visualizer.component.html\",\n    styleUrls: [\"./relationship-visualizer.css\"]\n})\nexport class RelationshipVisualizerComponent implements OnInit {\n\n    // Hack to allow the constant to be used in the html\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.VISUALIZER_PANEL,\n        ORIENTATION: Orientation\n    }\n\n    @Input() params: { geoObject: GeoObject, graphOid: string, date: string } = null;\n\n    @Input() panelOpen: boolean;\n\n    geoObject: GeoObject = null;\n\n    graphOid: string = null;\n\n    relationship: Relationship = null;\n\n    @Output() changeGeoObject = new EventEmitter<{ id: string, code: string, typeCode: string, doIt: any }>();\n\n    @Output() changeRelationship = new EventEmitter<string>();\n\n    private data: {edges: Edge[], verticies: Vertex[]} = null;\n\n    public DIMENSIONS = DIMENSIONS;\n\n    public SELECTED_NODE_COLOR = SELECTED_NODE_COLOR;\n\n    relationships: Relationship[];\n\n    public svgHeight: number = null;\n    public svgWidth: number = null;\n\n    panToNode$: Subject<string> = new Subject();\n\n    update$: Subject<boolean> = new Subject();\n\n    public layout: Layout = new DagreNodesOnlyLayout();\n\n    public curve = shape.curveLinear;\n\n    public colorSchema: any = {};\n\n    public typeCache: GeoObjectTypeCache;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService,\n        private spinner: NgxSpinnerService,\n        private vizService: RelationshipVisualizationService,\n        private cacheService: RegistryCacheService) { }\n\n    ngOnInit(): void {\n        this.typeCache = this.cacheService.getTypeCache();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.params && changes.params.previousValue !== changes.params.currentValue) {\n            this.graphOid = this.params.graphOid;\n            this.geoObject = this.params.geoObject;\n\n            if (this.relationships == null ||\n                changes.params.previousValue == null ||\n                changes.params.previousValue.geoObject.properties.type !== changes.params.currentValue.geoObject.properties.type) {\n                this.fetchRelationships();\n            } else if (this.relationships != null && this.relationship) {\n                this.fetchData();\n            }\n        }\n\n        if (changes.panelOpen != null) {\n            window.setTimeout(() => {\n                this.resizeDimensions();\n            }, 1);\n        }\n    }\n\n    resizeDimensions():void {\n        let graphContainer = document.getElementById(\"graph-container\");\n\n        if (graphContainer) {\n            this.svgHeight = graphContainer.clientHeight - 50;\n            this.svgWidth = graphContainer.clientWidth;\n        }\n    }\n\n    // Thanks to https://stackoverflow.com/questions/52172067/create-svg-hexagon-points-with-only-only-a-length\n    public getHexagonPoints(node: { dimension: { width: number, height: number }, relation: string }): string {\n        let y = (this.DIMENSIONS.LABEL.HEIGHT / 2) - this.DIMENSIONS.NODE.HEIGHT / 2;\n        let x = this.relationship.isHierarchy\n            ? (node.relation === \"CHILD\" ? (this.DIMENSIONS.LABEL.WIDTH / 2 - this.DIMENSIONS.NODE.WIDTH / 2) : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 - this.DIMENSIONS.NODE.WIDTH / 2)\n            : node.relation === \"PARENT\" ? (this.DIMENSIONS.LABEL.WIDTH + this.DIMENSIONS.PADDING.NODE_LABEL - this.DIMENSIONS.PADDING.NODE_EDGE) : 0;\n\n        let radius = this.DIMENSIONS.NODE.WIDTH / 2;\n        let height = this.DIMENSIONS.NODE.HEIGHT;\n        let width = this.DIMENSIONS.NODE.WIDTH;\n\n        let points = [0, 1, 2, 3, 4, 5, 6].map((n, i) => {\n            let angleDeg = 60 * i - 30;\n            let angleRad = Math.PI / 180 * angleDeg;\n            return [(width / 2 + radius * Math.cos(angleRad)) + x, (height / 2 + radius * Math.sin(angleRad)) + y];\n        }).map((p) => p.join(\",\"))\n            .join(\" \");\n\n        return points;\n    }\n\n    private fetchRelationships(): void {\n        if (this.geoObject != null) {\n            this.relationships = [];\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.vizService.relationships(this.geoObject.properties.type).then(relationships => {\n                this.relationships = relationships;\n\n                if (this.relationships && this.relationships.length > 0) {\n                    if (!this.graphOid || this.relationships.findIndex(rel => rel.oid === this.graphOid) === -1) {\n                        this.relationship = this.relationships[0];\n                        this.graphOid = this.relationship.oid;\n                        this.onSelectRelationship();\n                    } else {\n                        this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.graphOid)];\n                        this.fetchData();\n                    }\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n    }\n\n    private onSelectRelationship() {\n        this.relationship = this.relationships[this.relationships.findIndex(rel => rel.oid === this.graphOid)];\n\n        //   this.fetchData();\n        this.changeRelationship.emit(this.graphOid);\n    }\n\n    private fetchData(): void {\n        if (this.relationship != null) {\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.vizService.tree(this.relationship.type, this.relationship.code, this.geoObject.properties.code, this.geoObject.properties.type, this.params.date).then(data => {\n                this.data = null;\n\n                window.setTimeout(() => {\n                    this.data = data;\n\n                    this.resizeDimensions();\n                    this.calculateColorSchema();\n                }, 0);\n\n                this.resizeDimensions();\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n    }\n\n    calculateColorSchema() {\n        this.colorSchema = {};\n\n        this.data.verticies.forEach(vertex => {\n            if (vertex.id.substring(2) !== this.geoObject.properties.uid && !this.colorSchema[vertex.typeCode]) {\n                this.colorSchema[vertex.typeCode] = ColorGen().hexString();\n            }\n        });\n\n        this.colorSchema[this.geoObject.properties.type] = SELECTED_NODE_COLOR;\n    }\n\n    collapseAnimation(id: string): Promise<void> {\n        if (!this.geoObject) { return new Promise<void>((resolve, reject) => { resolve(); }); }\n\n        let activeEl = document.getElementById(id) as unknown as SVGGraphicsElement;\n        if (!activeEl) { return new Promise<void>((resolve, reject) => { resolve(); }); }\n\n        let bbox = this.getBBox(activeEl, true);\n\n        let all = document.querySelectorAll(\"g.nodes > g\");\n\n        all.forEach((el: SVGGraphicsElement) => {\n            if (el.id !== activeEl.id) {\n                let bbox2 = this.getBBox(el, false);\n\n                // let translate = \"translate(\" + (bbox.x - bbox2.x) + \",\" + (bbox.y - bbox2.y) + \")\";\n                // el.setAttribute(\"transform\", translate);\n\n                let animateTransform = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animateTransform\") as unknown as SVGAnimateTransformElement;\n\n                animateTransform.setAttribute(\"attributeName\", \"transform\");\n                animateTransform.setAttribute(\"attributeType\", \"XML\");\n                animateTransform.setAttribute(\"type\", \"translate\");\n                animateTransform.setAttribute(\"fill\", \"freeze\");\n                // animateTransform.setAttribute(\"from\", 0 + \" \" + 0);\n                animateTransform.setAttribute(\"to\", (bbox.x - bbox2.x) + \" \" + (bbox.y - bbox2.y));\n                animateTransform.setAttribute(\"begin\", \"indefinite\");\n                animateTransform.setAttribute(\"additive\", \"replace\");\n                animateTransform.setAttribute(\"dur\", COLLAPSE_ANIMATION_TIME + \"ms\");\n                animateTransform.setAttribute(\"repeatCount\", \"0\");\n\n                el.appendChild(animateTransform);\n\n                (animateTransform as any).beginElement(); // Tells the element to animate now\n            }\n        });\n\n        document.querySelectorAll(\"g.links > g\").forEach(el => {\n            el.remove();\n        });\n\n        let promise = new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                all.forEach((el: SVGGraphicsElement) => {\n                    if (el.id !== activeEl.id) {\n                        el.remove();\n                    }\n                });\n\n                resolve();\n            }, COLLAPSE_ANIMATION_TIME);\n        });\n\n        return promise;\n    }\n\n    private getBBox(el: SVGGraphicsElement, includeTransform: boolean = true): DOMRect {\n        if (!includeTransform) {\n            return el.getBBox();\n        }\n\n        let cloned = el.cloneNode(true) as unknown as SVGGraphicsElement;\n\n        let newParent = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\") as unknown as SVGGraphicsElement;\n        document.querySelector(\"svg\").appendChild(newParent);\n\n        newParent.appendChild(cloned);\n        let bbox = newParent.getBBox();\n        cloned.remove();\n        newParent.remove();\n\n        return bbox;\n    }\n\n    /*\n     * We can't predict when the graph will be finished loading and it will be ready to pan. So we're just telling it to\n     * pan over and over again just in case it takes a little while to load. To my knowledge there is no way to fix this,\n     * because:\n     *  1. ngx graph does not provide any sort of \"on ready\" event we can listen to\n     *  2. Checking if the element exists first in the dom before we call pan to node does not work. The graph might still\n     *     not be ready, even if the element exists.\n     */\n    /*\n    private panToNode(uid: string, retryNum: number = 10) {\n        window.setTimeout(() => {\n            if (document.getElementById(\"g-\" + uid) != null) {\n                this.panToNode$.next(\"g-\" + uid);\n                this.update$.next(); // https://github.com/swimlane/ngx-graph/issues/319\n\n                if (retryNum > 0) {\n                    this.panToNode(uid, retryNum - 1);\n                }\n            }\n        }, 50);\n    }\n    */\n\n    public onClickNode(node: any): void {\n        if (node.code !== this.params.geoObject.properties.code &&\n            node.typeCode !== this.params.geoObject.type) {\n            let doIt = (resolve) => {\n                this.collapseAnimation(node.id).then(() => {\n                    resolve();\n                });\n            };\n\n            this.changeGeoObject.emit({ id: node.id.substring(2), code: node.code, typeCode: node.typeCode, doIt: doIt });\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div id=\"relationship-visualizer-root-node\" *ngIf=\"geoObject\">\n\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\">\n  </ngx-spinner>\n\n  <div>\n\n    <select *ngIf=\"relationships\" id=\"relationshipId\" name=\"relationshipId\" class=\"select-area\" [(ngModel)]=\"graphOid\"\n      (change)=\"onSelectRelationship()\" required style=\"margin:10px;width:auto;min-width:200px;\">\n      <option *ngIf=\"relationships.length === 0\"></option>\n      <option *ngFor=\"let loopRel of relationships\" [value]=\"loopRel.oid\">{{loopRel.label.localizedValue}}</option>\n    </select>\n    \n    <div class=\"legend\">\n      <div class=\"legend-item\" *ngFor=\"let item of colorSchema | keyvalue\">\n        <div class=\"square\" [ngStyle]=\"{ background: item.value }\"></div>\n        \n        <label>{{typeCache.getTypeByCode(item.key).label.localizedValue}}</label>\n      </div>\n    </div>\n\n    <div *ngIf=\"relationships\" style=\"height:100%; width:100%;\">\n      <div class=\"hierarchy-content\" style=\"height:100%; width:100%;\">\n        <div id=\"graph-container\" style=\"height:100%; width:100%;\">\n          <ngx-graph *ngIf=\"data\" class=\"chart-container\" [view]=\"[svgWidth, svgHeight]\" [links]=\"data.edges\"\n            [nodes]=\"data.verticies\" [animate]=\"false\" [autoZoom]=\"true\" [autoCenter]=\"true\" [layout]=\"layout\"\n            [layoutSettings]=\"{orientation: relationship.isHierarchy ? CONSTANTS.ORIENTATION.TOP_TO_BOTTOM : CONSTANTS.ORIENTATION.LEFT_TO_RIGHT}\"\n            [curve]=\"curve\" [draggingEnabled]=\"false\" [panToNode$]=\"panToNode$\" [update$]=\"update$\"\n          >\n            <!-- Draw an arrow on relationships for directed graph types -->\n            <ng-template #defsTemplate>\n              <ng-container *ngIf=\"relationship.type !== 'UndirectedGraphType'\">\n                <svg:marker id=\"arrow\" viewBox=\"0 -5 10 10\" refX=\"8\" refY=\"0\" markerWidth=\"4\" markerHeight=\"4\" orient=\"auto\">\n                  <svg:path d=\"M0,-5L10,0L0,5\" class=\"arrow-head\" />\n                </svg:marker>\n              </ng-container>\n            </ng-template>\n\n            <!-- Node Template -->\n            <ng-template #nodeTemplate let-node>\n              <svg:g (click)=\"onClickNode(node)\" class=\"node\" [style.cursor]=\"'g-' + geoObject.properties.uid === node.id ? 'default' : 'pointer'\" >\n                <svg:polygon [attr.points]=\"getHexagonPoints(node)\"\n                  [attr.fill]=\"geoObject == null ? node.data.color : (('g-' + geoObject.properties.uid) === node.id ? SELECTED_NODE_COLOR : this.colorSchema[node.typeCode])\"\n                  >\n                  </polygon>\n\n                  <foreignObject\n                    [attr.x]=\"relationship.isHierarchy ? (node.relation === 'CHILD' ? 0 : (this.DIMENSIONS.LABEL.WIDTH + DIMENSIONS.PADDING.NODE_LABEL + this.DIMENSIONS.NODE.WIDTH) / 2 + this.DIMENSIONS.NODE.WIDTH / 2 + DIMENSIONS.PADDING.NODE_LABEL) : (node.relation === 'PARENT' ? -DIMENSIONS.PADDING.NODE_LABEL : (node.relation === 'SELECTED' ? 15 : (DIMENSIONS.NODE.WIDTH + DIMENSIONS.PADDING.NODE_LABEL)))\"\n                    [attr.y]=\"relationship.isHierarchy ? (node.relation === 'CHILD' ? DIMENSIONS.NODE.HEIGHT + DIMENSIONS.PADDING.NODE_LABEL: 0) : node.relation === 'SELECTED' ? -10 : 0\"\n                    [attr.width]=\"DIMENSIONS.LABEL.WIDTH\" [attr.height]=\"DIMENSIONS.LABEL.HEIGHT\">\n                    <span [style]=\"'width:' + DIMENSIONS.LABEL.WIDTH + 'px; height:' + DIMENSIONS.LABEL.HEIGHT + 'px; overflow:hidden; display: inline-block;'\">\n                      <p xmlns=\"http://www.w3.org/1999/xhtml\" text-anchor=\"start\"\n                        [ngStyle]=\"{'text-align': relationship.isHierarchy ? (node.relation === 'CHILD' ? 'center' : 'left') : node.relation === 'SELECTED' ? 'center' : (node.relation === 'PARENT' ? 'right' : 'left')}\"\n                        [style]=\"'font-size: ' + DIMENSIONS.LABEL.FONTSIZE + 'px; display: table-cell; vertical-align: middle; height:' + DIMENSIONS.LABEL.HEIGHT + 'px; width:' + DIMENSIONS.LABEL.WIDTH + 'px; line-height:' + DIMENSIONS.LABEL.FONTSIZE + 'px;'\">\n                        {{node.label}}</p>\n                    </span>\n                  </foreignObject>\n              </svg:g>\n            </ng-template>\n\n            <!-- Link Template -->\n            <ng-template #linkTemplate let-link>\n              <svg:g class=\"edge\">\n                <svg:path class=\"line\" stroke-width=\"2\" marker-end=\"url(#arrow)\"></svg:path>\n              </svg:g>\n            </ng-template>\n          </ngx-graph>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n</div>","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\nimport { LocalizedValue } from \"@shared/model/core\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class RelationshipVisualizationService {\n\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    tree(relationshipType: string, graphTypeCode: string, geoObjectCode: string, geoObjectTypeCode: string, date: string): Promise<any> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"graphTypeCode\", graphTypeCode);\n        params = params.set(\"geoObjectCode\", geoObjectCode);\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        if (relationshipType != null) {\n            params = params.set(\"relationshipType\", relationshipType);\n        }\n\n        if (date) {\n            params = params.set(\"date\", date);\n        }\n\n        // this.eventService.start();\n\n        return this.http\n            .get<any>(registry.contextPath + \"/relationship-visualization/tree\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    relationships(geoObjectTypeCode: string): Promise<{ oid:string, code: string, label: LocalizedValue, isHierarchy: boolean, type?: string }[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"geoObjectTypeCode\", geoObjectTypeCode);\n\n        // this.eventService.start();\n\n        return this.http\n            .get<any>(registry.contextPath + \"/relationship-visualization/relationships\", { params: params })\n            .pipe(finalize(() => {\n                // this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.code === 'invalid' ? false : attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n      \n      <div *ngIf=\"configuration.isExternal\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.modal.external\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"externalId\" class=\"select-area\"\n              [(ngModel)]=\"configuration.externalIdAttributeTarget\" [required]=\"true\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div *ngIf=\"configuration.externalSystem.type === 'RevealExternalSystem' && configuration.formatType === 'EXCEL'\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\"><localize key=\"io.import.revealGeometryAttribute\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"revealGeometryColumn\" class=\"select-area\"\n              [(ngModel)]=\"configuration.revealGeometryColumn\" [required]=\"false\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes['text']\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!--\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n              <option value=\"EXTERNAL\">\n                <localize key=\"io.modal.external\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n      -->\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component({\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n})\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() property: string = 'type';\n    @Input() includeChild: boolean = false;\n\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor(private service: IOService) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors(this.configuration[this.property].code, this.configuration.hierarchy, true, this.includeChild).then(locations => {\n            this.configuration.locations = locations;\n        });\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit(this.configuration);\n        this.stateChange.emit('NEXT');\n    }\n\n    onBack(): void {\n        this.stateChange.emit('BACK');\n    }\n\n    onCancel(): void {\n        this.stateChange.emit('CANCEL');\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\"><label> {{location.label}} </label></div>\n            <div class=\"panel-body\">\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.source\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n                  <option value=\"\"></option>\n                  <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n                </select>\n              </div>\n              <div class=\"label-holder\">\n                <label><localize key=\"io.import.modal.parent.matchStrategy\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <select [name]=\"i + '-matchStrategy'\" class=\"select-area\" [(ngModel)]=\"location.matchStrategy\" [required]=\"location.target != null && location.target !== ''\">\n\t\t\t            <option></option>\n\t\t\t            <option value=\"ALL\"><localize key=\"io.modal.all\"></localize></option>\n\t\t\t            <option value=\"CODE\"><localize key=\"io.modal.code\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal\" value=\"EXTERNAL\"><localize key=\"io.modal.external\"></localize></option>\n\t\t\t            <option *ngIf=\"configuration.isExternal && configuration.externalSystem.type === 'DHIS2ExternalSystem'\" value=\"DHIS2_PATH\"><localize key=\"io.modal.dhis2path\"></localize></option>\n\t\t\t          </select>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { ErrorHandler } from '@shared/component';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component({\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n})\nexport class SpreadsheetModalComponent {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n    property: string;\n    includeChild: boolean;\n\n    constructor(private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router) {\n    }\n\n    init(configuration: ImportConfiguration, property: string = 'type', includeChild: boolean = false): void {\n        this.configuration = configuration;\n        this.property = property;\n        this.includeChild = includeChild;\n    }\n\n    onStateChange(event: string): void {\n        if (event === 'BACK') {\n            this.handleBack();\n        }\n        else if (event === 'NEXT') {\n            this.handleNext();\n        }\n        else if (event === 'CANCEL') {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if (this.state === 'LOCATION') {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if (this.state === 'MAP') {\n            if (!this.configuration.postalCode) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if (this.state === 'LOCATION') {\n            this.handleSubmit();\n        }\n        else if (this.state === 'LOCATION-PROBLEM') {\n\n            if (this.configuration.termProblems != null) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if (this.state === 'TERM-PROBLEM') {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet(this.configuration).then(config => {\n\n            if (config.locationProblems != null) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if (config.termProblems != null) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                });\n                this.bsModalRef.content.message = this.localizeService.decode(\"data.import.go.to.scheduled.jobs.confirm.message\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"data.import.go.to.scheduled.jobs.button\");\n\n                (<ConfirmModalComponent>this.bsModalRef.content).onConfirm.subscribe(data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                });\n\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport(this.configuration).then(response => {\n            this.bsModalRef.hide()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" [property]=\"property\" [includeChild]=\"includeChild\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ErrorHandler, ErrorModalComponent, SuccessModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\nimport { GeoObjectType, GeoObjectOverTime } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"submit-change-request\",\n    templateUrl: \"./submit-change-request.component.html\",\n    styleUrls: [\"./submit-change-request.css\"]\n})\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    dateStr: string = null;\n\n    forDate: Date = null;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    geoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    loading: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor(private modalService: BsModalService, private registryService: RegistryService,\n        private changeRequestService: ChangeRequestService, private localizeService: LocalizationService, private authService: AuthService) {\n        this.dataSource = Observable.create((observer: any) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead(this.geoObjectId, this.geoObjectType.code).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes([], null).then(types => {\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                const type = types[i];\n                const orgCode = type.organizationCode;\n                const typeCode = type.superTypeCode != null && type.superTypeCode != \"\" ? type.superTypeCode : type.code;\n\n                if (this.authService.isGeoObjectTypeRC(orgCode, typeCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort((a, b) => {\n                if (a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase()) return -1;\n                else if (a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase()) return 1;\n                else return 0;\n            });\n\n            let pos = this.getGeoObjectTypePosition(\"ROOT\");\n            if (pos) {\n                this.geoObjectTypes.splice(pos, 1);\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public handleDateChange() {\n        if (this.dateStr != null) {\n            this.forDate = new Date(Date.parse(this.dateStr));\n        } else {\n            this.forDate = null;\n        }\n    }\n\n    public onValidChange(newValid: boolean) {\n        if (this.geoObject == null) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.geometryEditor != null && !this.geometryEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        if (this.attributeEditor != null && !this.attributeEditor.getIsValid()) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition(code: string): number {\n        for (let i = 0; i < this.geoObjectTypes.length; i++) {\n            let obj = this.geoObjectTypes[i];\n            if (obj.code === code) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading(e: boolean): void {\n        this.loading = e;\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.registryService.getGeoObjectOverTime(e.item.code, this.geoObjectType.code).then(geoObject => {\n            this.geoObject = geoObject;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.geoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div style=\"margin-top:50px;margin-bottom:50px;background:#f7f7f7;width:100%;padding:10px;\">\n      <h3 style=\"margin-bottom: 20px;\"><localize key=\"change.request.search.for.geoobject.header\"></localize></h3>\n      <div class=\"row\">\n\n        <div class=\"col-md-3\">\n          <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>\n          <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\" [(ngModel)]=\"geoObjectType\" required>\n            <option>  </option>\n            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}</option>\n          </select>\n        </div>\n        \n        <div class=\"col-md-3\">\n          <localize key=\"changeOverTime.forDate\"></localize>\n          <date-field [(value)]=\"dateStr\" label=\"\" [inputName]=\"'dateStr'\" (change)=\"handleDateChange()\" [disable]=\"!geoObjectType\" \n            [allowInfinity]=\"false\" [allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" customStyles=\"width:100%\"></date-field>\n        </div>\n        \n        <div class=\"col-md-4\">\n          <localize key=\"change.request.search.for.geoobject.search.label\"></localize>\n          <input type=\"text\" [ngClass]=\"{'inline-loading':loading}\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" (typeaheadLoading)=\"changeTypeaheadLoading($event)\" [placeholder]=\"('masterlist.search' | localize) + '...'\" class=\"form-control\" autocomplete=\"off\">\n        </div>\n        \n        <div class=\"col-md-2\">\n          <label></label>\n           <!-- We cannot use the dataset-location-manager here because it pulls the tiles from the dataset (list) and we don't have a dataset. -->\n           <!-- <a *ngIf=\"preGeoObject && forDate\" [routerLink]=\"['/registry/dataset-location-manager', '123', preGeoObject.attributes.type, 'false', dateStr, preGeoObject.attributes.code, 'true']\" -->\n          \n           <a *ngIf=\"geoObject\" [routerLink]=\"['/registry/location-manager']\" [queryParams]=\"{type:geoObject.attributes.type, code:geoObject.attributes.code, pageContext:'DATA'}\">\n            <button class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n          </a>\n          <button *ngIf=\"!(geoObject)\" disabled=\"true\" class=\"btn btn-primary\" style=\"width:100%;\"><localize key=\"change.request.open.geoobject.in.editor.link.btn\"></localize></button>\n        </div>\n\n      </div>\n      \n    </div>\n  </div>\n</div>","import { Component, Input } from \"@angular/core\";\n\nimport { Step, StepConfig } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"step-indicator\",\n    templateUrl: \"./step-indicator.component.html\",\n    styleUrls: [\"./step-indicator.css\"]\n})\nexport class StepIndicatorComponent {\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"steps\")\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n    constructor() {\n        this._stepConfig = { steps: [] };\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n\n    }\n\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, Input, Output, EventEmitter, OnInit, OnChanges, SimpleChanges, OnDestroy } from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\nimport { ContextLayer, ContextList, ListOrgGroup } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { LocalizationService } from \"@shared/service\";\nimport * as ColorGen from \"color-generator\";\nimport { Subscription } from \"rxjs\";\n\nimport { CdkDragDrop, moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport { PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\n\nexport const GRAPH_LAYER = \"graph\";\n\nexport interface LayerEvent {\n\n    layer: ContextLayer;\n    prevLayer?: ContextLayer;\n\n}\n\nexport interface BaseLayer {\n    name: string,\n    label: string,\n    id: string,\n    sprite: string,\n    url: string,\n    selected: boolean\n}\n\n@Component({\n    selector: \"layer-panel\",\n    templateUrl: \"./layer-panel.component.html\",\n    styleUrls: [\"./location-manager.css\", \"./layer-panel.css\"]\n})\nexport class LayerPanelComponent implements OnInit, OnDestroy, OnChanges {\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: false\n    };\n\n    // Hack to allow the constant to be used in the html\n    CONSTANTS = {\n        GRAPH_LAYER: GRAPH_LAYER,\n        OVERLAY: OverlayerIdentifier.LAYER_PANEL\n    }\n\n    @Input() filter: string[] = [];\n    @Input() includeGraphLayer: boolean = false;\n    @Input() visualizeMode: number;\n\n    @Output() layerChange = new EventEmitter<LayerEvent>();\n    @Output() baseLayerChange = new EventEmitter<BaseLayer>();\n    @Output() reorder = new EventEmitter<ContextLayer[]>();\n    @Output() zoomTo = new EventEmitter<ContextLayer>();\n    @Output() create = new EventEmitter<ContextLayer>();\n\n    @Input() panelSize: number = PANEL_SIZE_STATE.MINIMIZED;\n    @Output() panelSizeChange = new EventEmitter<number>();\n\n    listOrgGroups: ListOrgGroup[] = [];\n    // lists: ContextList[] = [];\n    layers: ContextLayer[] = [];\n\n    graphList: ContextList = null;\n\n    form: { startDate: string, currentStartDate: string, endDate: string, currentEndDate: string } = {\n        startDate: \"\",\n        currentStartDate: \"\",\n        endDate: \"\",\n        currentEndDate: \"\"\n    };\n\n    /*\n     * List of base layers\n     */\n    baseLayers: BaseLayer[] = [\n        {\n            name: \"Satellite\",\n            label: \"baselayer.satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n        //         {\n        //             name: 'Streets',\n        //             label: 'baselayer.streets',\n        //             id: 'streets-v11',\n        //             sprite: 'mapbox://sprites/mapbox/streets-v11',\n        //             url: 'mapbox://styles/mapbox/streets-v11'\n        //         }\n    ];\n\n    subscription: Subscription;\n\n    params: Params = null;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private spinner: NgxSpinnerService,\n        private service: ListTypeService,\n        private lService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.subscription = this.route.queryParams.subscribe(params => {\n            this.params = params;\n\n            this.handleParams();\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.subscription.unsubscribe();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.includeGraphLayer != null) {\n            if (changes.includeGraphLayer.currentValue) {\n                let graphLayer = {\n                    oid: GRAPH_LAYER,\n                    forDate: this.form.endDate,\n                    versionNumber: -1\n                };\n\n                this.graphList = {\n                    oid: GRAPH_LAYER,\n                    label: this.lService.decode(\"explorer.search.layer\"),\n                    versions: [graphLayer],\n                    open: undefined\n                };\n\n                this.toggleLayerShowOnLegend(graphLayer, this.graphList);\n            } else {\n                if (this.graphList != null) {\n                    this.toggleLayerShowOnLegend(this.graphList.versions[0], this.graphList);\n                }\n            }\n        }\n    }\n\n    setPanelSize(size: number) {\n        this.panelSize = size;\n\n        if (this.layers.length === 0 && this.panelSize === PANEL_SIZE_STATE.WINDOWED) {\n            this.panelSize = PANEL_SIZE_STATE.FULLSCREEN;\n        }\n        if (this.panelSize > PANEL_SIZE_STATE.FULLSCREEN) {\n            this.panelSize = 0;\n        }\n\n        this.panelSizeChange.emit(this.panelSize);\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { layersPanelSize: this.panelSize },\n            queryParamsHandling: \"merge\"\n        });\n    }\n\n    togglePanelOpen() {\n        this.setPanelSize(this.panelSize === 0 ? 1 : 0);\n    }\n\n    /**\n     *\n     * Method responsible for parsing the state from the URL parameters and determining if\n     * the model of the widget needs to be updated or not.\n     *\n     * */\n    handleParams(): void {\n        let isSearchRequired = false;\n\n        if (this.params.startDate != null && this.params.startDate !== this.form.currentStartDate) {\n            this.form.startDate = this.params.startDate;\n\n            isSearchRequired = true;\n        }\n\n        if (this.params.endDate != null && this.params.endDate !== this.form.currentEndDate) {\n            this.form.endDate = this.params.endDate;\n\n            isSearchRequired = true;\n        }\n\n        const layers = this.params.layers != null ? JSON.parse(this.params.layers) : [];\n\n        layers.forEach(layer => {\n            if (layer !== GRAPH_LAYER && this.findVersionById(layer) == null) {\n                isSearchRequired = true;\n            }\n        });\n\n        if (isSearchRequired) {\n            // One of the enabled layers specified in the URL is not currently in the list/versions data model\n            // As such we must do a new search for the valid list/versions in order to populate the option\n            // into the data model.\n            // OR the search dates have been updated, so a new search must be performed.\n\n            this.handleSearch().then(lists => {\n                layers.reverse().forEach(oid => {\n                    this.toggleLayersWithCondition(layer => layer.oid === oid);\n                });\n            });\n        } else {\n            // Determine if an existing version in the data model needs to be toggled on based on the state\n            // of the URL 'layers' parameters\n            layers.forEach(layer => {\n                const index = this.layers.findIndex(l => l.oid === layer);\n\n                if (index === -1) {\n                    this.toggleLayersWithCondition(l => l.oid === layer);\n                }\n            });\n\n            // Determine if any existing layers which need to be toggled off based on the state of the URL ''\n            this.layers.filter(l => l.oid !== GRAPH_LAYER && layers.indexOf(l.oid) === -1).forEach(layer => {\n                this.toggleLayersWithCondition(l => l.oid === layer.oid);\n            });\n        }\n\n        // Determine if the order of the layers has changed\n        if (this.params.layers != null) {\n            let isEqual = true;\n            for (let i = 0; i < this.layers.length; i++) {\n                if (this.layers[i].oid !== layers[i]) {\n                    isEqual = false;\n                }\n            }\n\n            if (!isEqual) {\n                const indecies = {};\n                for (let i = 0; i < layers.length; i++) {\n                    indecies[layers[i]] = i;\n                }\n\n                this.layers = this.layers.sort((a, b) => {\n                    return indecies[a.oid] - indecies[b.oid];\n                });\n\n                this.reorder.emit(this.layers);\n            }\n        }\n    }\n\n    onConfirm(): void {\n        if (this.params.startDate == null && this.params.endDate == null && this.params.layers == null && this.form.startDate === null && this.form.endDate === null) {\n            // A new search should null out any currently select layers and any record which has been clicked on\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { layers: null, version: null },\n                queryParamsHandling: \"merge\"\n            });\n\n            this.handleSearch();\n        } else {\n            // A new search should null out any currently select layers and any record which has been clicked on\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { startDate: this.form.startDate, endDate: this.form.endDate, layers: null, version: null },\n                queryParamsHandling: \"merge\"\n            });\n        }\n    }\n\n    handleSearch(): Promise<ListOrgGroup[]> {\n        this.spinner.show(this.CONSTANTS.OVERLAY);\n\n        return this.service.getGeospatialVersions(this.form.startDate, this.form.endDate).then(listOrgGroups => {\n            // Remove all current lists\n            this.toggleLayersWithCondition(layer => layer.showOnLegend && layer.oid !== GRAPH_LAYER);\n\n            this.form.currentStartDate = this.form.startDate;\n            this.form.currentEndDate = this.form.endDate;\n\n            this.listOrgGroups = listOrgGroups;\n\n            this.listOrgGroups.forEach(listOrgGroup => {\n                listOrgGroup.types.forEach(listTypeGroup => {\n                    listTypeGroup.lists.forEach(list => {\n                        list.versions = list.versions.filter(v => this.filter.indexOf(v.oid) === -1);\n                    });\n                });\n            });\n\n            return listOrgGroups;\n        }).finally(() => {\n            this.spinner.hide(this.CONSTANTS.OVERLAY);\n        });\n    }\n\n    findVersionById(id: string): ContextLayer {\n        let response: ContextLayer = null;\n\n        this.listOrgGroups.forEach(listOrgGroup => {\n            listOrgGroup.types.forEach(listTypeGroup => {\n                listTypeGroup.lists.forEach(list => {\n                    list.versions.forEach(version => {\n                        if (version.oid === id) {\n                            response = version;\n                        }\n                    });\n                });\n            });\n        });\n\n        return response;\n    }\n\n    toggleLayersWithCondition(condition: (layer: ContextLayer) => boolean) {\n        this.listOrgGroups.forEach(listOrgGroup => {\n            listOrgGroup.types.forEach(listTypeGroup => {\n                listTypeGroup.lists.forEach(list => {\n                    list.versions.filter(condition).forEach(v => {\n                        this.toggleLayerShowOnLegend(v, list);\n                    });\n                });\n            });\n        });\n    }\n\n    clickToggleLayerRendered(layer: ContextLayer, list: ContextList) {\n        this.toggleLayerRendered(layer);\n    }\n\n    clickToggleLayerShowOnLegend(layer: ContextLayer, list: ContextList): void {\n        const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n        let layers = this.layers.filter(l => l.oid !== GRAPH_LAYER).map(l => l.oid);\n\n        if (index === -1) {\n            layers.unshift(layer.oid);\n        } else {\n            layers = layers.filter(l => l !== layer.oid);\n        }\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { layers: JSON.stringify(layers) },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    toggleLayerShowOnLegend(layer: ContextLayer, list: ContextList): void {\n        layer.showOnLegend = !layer.showOnLegend;\n        layer.rendered = layer.showOnLegend;\n\n        if (layer.rendered && layer.color == null) {\n            layer.color = ColorGen().hexString();\n            layer.label = list.label;\n        }\n\n        let index: number = 0;\n\n        if (layer.showOnLegend) {\n            if (layer.oid === GRAPH_LAYER && this.params && this.params.layers != null) {\n                const i = JSON.parse(this.params.layers).indexOf(GRAPH_LAYER);\n\n                if (i !== -1) {\n                    index = i;\n                }\n            }\n\n            this.layers.splice(index, 0, layer);\n\n            list.open = true;\n        } else {\n            const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n            if (index !== -1) {\n                this.layers.splice(index, 1);\n            }\n        }\n\n        this.layerChange.emit({ layer: layer });\n\n        if (index !== 0) {\n            this.reorder.emit(this.layers);\n        }\n    }\n\n    toggleLayerRendered(layer: ContextLayer): void {\n        layer.rendered = !layer.rendered;\n\n        const event: LayerEvent = {\n            layer: layer\n        };\n\n        if (layer.rendered) {\n            const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n            // Find the first rendered layer\n            for (let i = (index - 1); i >= 0; i--) {\n                if (event.prevLayer == null && this.layers[i].rendered) {\n                    event.prevLayer = this.layers[i];\n                }\n            }\n        }\n\n        this.layerChange.emit(event);\n    }\n\n    onGotoBounds(layer: ContextLayer): void {\n        this.zoomTo.emit(layer);\n    }\n\n    onCreate(layer: ContextLayer): void {\n        this.create.emit(layer);\n    }\n\n    toggleBaseLayer(layer: BaseLayer): void {\n        this.baseLayers.forEach(bl => {\n            bl.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.baseLayerChange.emit(layer);\n    }\n\n    moveLayerIncrementally(layer: ContextLayer, offset: number): void {\n        const index = this.layers.findIndex(l => l.oid === layer.oid);\n        const target = (index + offset);\n\n        if (index !== -1 && target > -1 && target <= this.layers.length - 1) {\n            let layers = this.layers.map(l => l.oid);\n\n            const a = layers[index];\n            layers[index] = layers[index + offset];\n            layers[index + offset] = a;\n\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { layers: JSON.stringify(layers) },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            });\n        }\n    }\n\n    moveLayer(oldLayers: ContextLayer[]): void {\n        let layers = oldLayers.map(l => l.oid);\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { layers: JSON.stringify(layers) },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    drop(event: CdkDragDrop<string[]>) {\n        let oldLayers = JSON.parse(JSON.stringify(this.layers));\n        moveItemInArray(oldLayers, event.previousIndex, event.currentIndex);\n        this.moveLayer(oldLayers);\n    }\n\n}\n","<ng-template #versionDetail let-layer='layer'>\n  (\n  <a *ngIf=\"layer.versionNumber !== 0\" [routerLink]=\"'/registry/master-list/' + layer.oid\" routerLinkActive=\"active\">\n    <localize key=\"list.type.version\"></localize>\n    {{layer.versionNumber}}\n  </a>\n  \n  <a *ngIf=\"layer.versionNumber === 0\" [routerLink]=\"'/registry/master-list/' + layer.oid\" routerLinkActive=\"active\">\n    <localize *ngIf=\"layer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n  </a>\n  )\n</ng-template>\n\n<ng-template #listView let-list='list'>\n  <div *ngIf=\"list.versions.length > 0\" class=\"list-group-item\" style=\"border: none; padding-top:0; padding-bottom:0;\">\n    <h4><a (click)=\"list.open = !list.open\"><i class=\"fa fa-chevron-right\" [ngClass]=\"{'fa-chevron-down' : list.open, 'fa-chevron-right' : !list.open}\" style=\"font-size:14px;\"></i>{{ list.label }}</a></h4>\n  \n    <div *ngIf=\"list.open\" class=\"list-group\">\n      <div *ngFor=\"let version of list.versions\">\n        <div class=\"layer-toggle-wrapper\">\n\t\t\t      <a *ngIf=\"version.oid !== CONSTANTS.GRAPH_LAYER\" class=\"fa\" style=\"padding-right: 10px;\" [ngClass]='{\"fa-minus\" : version.showOnLegend, \"fa-plus\" : !version.showOnLegend}' [title]=\"(version.showOnLegend ? 'explorer.layerPanel.removeFromLegend' : 'explorer.layerPanel.addToLegend') | localize\" (click)=\"clickToggleLayerShowOnLegend(version, list)\"></a>\n\t\t\t      <boolean-field *ngIf=\"version.showOnLegend\" [value]=\"version.rendered\" label=\"\" [disable]=\"false\" (change)=\"clickToggleLayerRendered(version, list)\" style=\"line-height:0;\"></boolean-field>\n\t\t\t  \n\t\t\t      <div class=\"label-wrapper\">\n              \t\t<date-text [date]=\"version.forDate\"></date-text>\n\t\t\t        <ng-container *ngIf=\"version.oid !== CONSTANTS.GRAPH_LAYER\" [ngTemplateOutlet]=\"versionDetail\"\n\t\t\t          [ngTemplateOutletContext]=\"{layer:version}\">\n\t\t\t        </ng-container>\n\t\t\t        <div *ngIf=\"version.color != null\" class=\"layer-legend-square\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"\n\t\t\t          [ngStyle]=\"{'background-color': version.color}\"> </div>\n\t\t\t      </div>\n\t\t\t  </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n<div class=\"layer-toggle\">\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>  \n\n  <div class=\"row\">\n  \t<div class=\"col-md-12\">\n      <span [title]=\"(panelSize === 0 ? 'explorer.resize.openLayerPanel' : 'explorer.resize.closeLayerPanel') | localize\" class=\"clickable\" style=\"width:27px; height:27px; float: right;margin:5px;\" (click)=\"togglePanelOpen()\">\n        <svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 122.88 105.02\" style=\"enable-background:new 0 0 122.88 105.02\" xml:space=\"preserve\"><g><path d=\"M97.25,40.58l23.85,10.28c1.48,0.64,2.17,2.36,1.53,3.85c-0.32,0.75-0.93,1.3-1.63,1.57l-23.19,9.39l23.29,10.04 c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57l-58.52,23.69c-0.73,0.3-1.52,0.27-2.2,0L1.83,81.05 c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67l22.97-9.96l-23.12-9.4c-1.5-0.61-2.22-2.31-1.61-3.81 c0.33-0.82,0.99-1.4,1.76-1.67l23.53-10.21L1.83,30.9c-1.5-0.61-2.22-2.31-1.61-3.81c0.33-0.82,0.99-1.4,1.76-1.67L60.02,0.24 c0.77-0.33,1.6-0.31,2.31,0l0-0.01l58.77,25.32c1.48,0.64,2.17,2.36,1.53,3.84c-0.32,0.75-0.93,1.3-1.63,1.57L97.25,40.58 L97.25,40.58z M112.36,53.47l-22.73-9.79L62.49,54.66c-0.73,0.3-1.52,0.27-2.2,0L33.08,43.6L10.47,53.4L61.39,74.1L112.36,53.47 L112.36,53.47z M90.19,68.75l-27.7,11.21c-0.73,0.3-1.52,0.27-2.2,0L32.52,68.68l-22.05,9.56l50.92,20.69l50.97-20.63L90.19,68.75 L90.19,68.75z M61.17,6.1l-50.7,21.99l50.92,20.69l50.97-20.63L61.17,6.1L61.17,6.1z\"/></g></svg>\n      </span>\n      \n      <i *ngIf=\"(panelSize === 2 && this.layers.length > 0) || (panelSize === 1)\" (click)=\"setPanelSize( (panelSize === 2 ? 1 : 2) )\" class=\"clickable fa\" [ngClass]=\"{'fa-compress' : panelSize === 2, 'fa-expand' : panelSize === 1}\" \n      \t\t[title]=\"(panelSize === 2 ? 'explorer.resize.collapseLayerPanel' : 'explorer.resize.expandLayerPanel') | localize\" style=\"width:30px;height:30px;margin-right:5px;font-size:25px;padding:5px;\"></i>\n  \t</div>\n  </div>\n\n  <div *ngIf=\"panelSize === 1 && layers.length > 0\">\n    <div style=\"margin-bottom: 10px;\">\n      <!--\n      <h4>\n        <localize key=\"explorer.layers\"></localize>\n      </h4>\n      -->\n      <div class=\"list-group\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n        <div *ngFor=\"let layer of layers\" class=\"list-group-item\" style=\"padding:5px;\" cdkDrag>\n\n            <div class=\"layer-toggle-wrapper\" style=\"cursor:move;\">\n            \n              <div class=\"custom-placeholder\" *cdkDragPlaceholder></div>\n              \n              <!-- <i class=\"fa fa-arrows\" style=\"font-size:15px;color: grey;margin-right: 3px;\" aria-hidden=\"true\"></i> -->\n              <boolean-field [value]=\"layer.rendered\" label=\"\" [disable]=\"false\" (change)=\"toggleLayerRendered(layer)\" style=\"line-height:0;\" ></boolean-field>\n              \n              <div class=\"label-wrapper\">\n                {{layer.label}}\n                <span *ngIf=\"layer.oid !== CONSTANTS.GRAPH_LAYER\">- {{ layer.forDate }}</span>\n                <ng-container *ngIf=\"layer.oid !== CONSTANTS.GRAPH_LAYER\" [ngTemplateOutlet]=\"versionDetail\"\n                  [ngTemplateOutletContext]=\"{layer:layer}\">\n                </ng-container>\n                <div class=\"layer-legend-square\" [ngStyle]=\"{'background-color': layer.color}\" style=\"width:15px;height:15px;display:inline-block;vertical-align:middle;\"> </div>\n<!--                 <i class=\"fa fa-arrow-up\" aria-hidden=\"true\" (click)=\"moveLayer(layer, -1)\"></i> -->\n<!--                 <i class=\"fa fa-arrow-down\" aria-hidden=\"true\" (click)=\"moveLayer(layer, 1)\"></i> -->\n                <i *ngIf=\"layer.oid !== CONSTANTS.GRAPH_LAYER\" [title]=\"'explorer.layerPanel.zoomToFeature' | localize\" class=\"fa fa-eye\" aria-hidden=\"true\" (click)=\"onGotoBounds(layer)\"></i>\n                <i *ngIf=\"layer.versionNumber === 0 && !layer.isAbstract\" [title]=\"'explorer.layerPanel.addNewGeoObject' | localize\" class=\"fa fa-plus\" aria-hidden=\"true\"\n                  (click)=\"onCreate(layer)\"></i>\n              </div>\n            </div>\n        </div>\n      </div>\n      \n    </div>\n  </div>\n\n  <div *ngIf=\"panelSize === 2\" style=\"margin-top: 10px;\">\n\n    <div *ngIf=\"baseLayers.length > 1\" style=\"margin-bottom: 10px;\">\n      <h4>\n        <localize key=\"explorer.base.layers.label\"></localize>\n      </h4>\n      <div class=\"row-form\" *ngFor=\"let baseLayer of baseLayers\">\n        <input class=\"layer-toggle-input\" type='radio' name='baselayers' [value]='baseLayer.id'\n          [checked]=\"baseLayer.selected\" (change)=\"toggleBaseLayer(baseLayer)\">\n        <label class=\"layer-toggle-label\">\n          <localize [key]=\"baseLayer.label\"></localize>\n        </label>\n      </div>\n    </div>\n    \n    <form class=\"modal-form\" name=\"export-form\" style=\"overflow:visible;\">\n    \n      <fieldset style=\"padding:10px;\">\n        <div class=\"row\">\n          <div class=\"col-md-4\" style=\"padding-left:10px;padding-right:0;\">\n            <label><localize key=\"io.startDate\"></localize></label>\n          </div>\n          <div class=\"col-md-4\" style=\"padding-left:5px;padding-right:0;\">\n            <label><localize key=\"io.endDate\"></localize></label>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-4\" style=\"padding-left:10px;padding-right:0;\">\n            <date-field [(value)]=\"form.startDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"startDate\"\n              [allowFutureDates]=\"false\" name=\"startDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\" style=\"padding-left:5px;padding-right:0;\">\n            <date-field [(value)]=\"form.endDate\" [classNames]=\"['form-control']\" label=\"\" inputName=\"endDate\"\n              [allowFutureDates]=\"false\" name=\"endDate\"></date-field>\n          </div>\n          <div class=\"col-md-4\" style=\"text-align:center;padding-left:5px;\">\n            <button type=\"button\" (click)=\"onConfirm()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n              <span>\n                <localize key=\"explorer.find.layers.by.date.range.button\"></localize>\n              </span>\n            </button>\n          </div>\n        </div>\n        <div *ngIf=\"listOrgGroups.length > 0\" class=\"row\">\n          <div class=\"col-md-12\">\n            <p style=\"font-style:italic;color:grey;\"><localize key=\"explorer.search.note\"></localize></p>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <!--\n            <h3>\n              <localize key=\"explorer.layers\"></localize>\n            </h3>\n            -->\n            \n            <p *ngIf=\"listOrgGroups.length < 1\" style=\"font-style: italic; color: grey;\"><localize key=\"explorer.find.layers.no.layers.found.message\"></localize></p>\n            \n            <div class=\"list-group\">\n              <ng-container *ngIf=\"graphList\" [ngTemplateOutlet]=\"listView\"\n                [ngTemplateOutletContext]=\"{list:graphList}\">\n              </ng-container>\n            \n              <div *ngFor=\"let listOrgGroup of listOrgGroups\">\n                <div *ngIf=\"listOrgGroup.types.length > 0\" class=\"list-group-item\" style=\"border: none;\">\n                \n                  <h3>{{ listOrgGroup.orgLabel.localizedValue }}</h3>\n                  \n                  <div *ngFor=\"let listTypeGroup of listOrgGroup.types\">\n                    <div *ngIf=\"listTypeGroup.lists.length > 0\" class=\"list-group-item\" style=\"border: none;\">\n                    \n                      <h4>{{ listTypeGroup.typeLabel.localizedValue }}</h4>\n                      \n                      <div *ngFor=\"let list of listTypeGroup.lists\">\n                        <ng-container *ngIf=\"list\" [ngTemplateOutlet]=\"listView\"\n                          [ngTemplateOutletContext]=\"{list:list}\">\n                        </ng-container>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n\n\n  </div>\n  </div>\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ViewChild, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\n\nimport { GeoObjectType, GeoObjectOverTime, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { CreateGeoObjectAction } from \"@registry/model/crtable\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"feature-panel\",\n    templateUrl: \"./feature-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class FeaturePanelComponent implements OnInit, OnChanges {\n\n    MODE = {\n        VERSIONS: \"VERSIONS\",\n        ATTRIBUTES: \"ATTRIBUTES\",\n        HIERARCHY: \"HIERARCHY\",\n        GEOMETRY: \"GEOMETRY\"\n    };\n\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.FEATURE_PANEL,\n    };\n\n    @Input() datasetId: string;\n\n    @Input() type: GeoObjectType;\n\n    @Input() forDate: Date = new Date();\n\n    @Output() forDateChange = new EventEmitter<string>();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() code: string;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @Output() featureChange = new EventEmitter<GeoObjectOverTime>();\n    @Output() modeChange = new EventEmitter<boolean>();\n    @Output() panelCancel = new EventEmitter<void>();\n    @Output() panelSubmit = new EventEmitter<{ isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }>();\n\n    _isValid: boolean = true;\n\n    bsModalRef: BsModalRef;\n\n    mode: string = null;\n\n    isMaintainer: boolean;\n\n    // The current state of the GeoObject in the GeoRegistry\n    preGeoObject: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    postGeoObject: GeoObjectOverTime;\n\n    attribute: AttributeType = null;\n\n    isNew: boolean = false;\n\n    isEdit: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    hierarchy: HierarchyOverTime = null;\n\n    // Flag indicating if the component is communicating with the server\n    // inProgress: number = 0;\n\n    reason: string = \"\";\n\n    constructor(\n        public service: RegistryService,\n        private spinner: NgxSpinnerService,\n        private modalService: BsModalService,\n        private authService: AuthService,\n        private geometryService: GeometryService) { }\n\n    ngOnInit(): void {\n        this.isMaintainer = this.authService.isSRA() || this.authService.isOrganizationRA(this.type.organizationCode) || this.authService.isGeoObjectTypeOrSuperRM(this.type);\n        this.mode = \"ATTRIBUTES\";\n\n        //        this.isEdit = !this.readOnly;\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.type != null || changes.code != null) {\n            this.refresh();\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this._isValid = valid;\n    }\n\n    isValid(): boolean {\n        return this._isValid && this.attributeEditor && this.attributeEditor.isValid();\n    }\n\n    updateCode(code: string): void {\n        this.code = code;\n    }\n\n    refresh(): void {\n        this.postGeoObject = null;\n        this.preGeoObject = null;\n        this.hierarchies = null;\n\n        if (this.code != null && this.type != null) {\n            if (this.code !== \"__NEW__\") {\n                this.isNew = false;\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.getGeoObjectOverTime(this.code, this.type.code).then(geoObject => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(geoObject)).attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.getHierarchiesForGeoObject(this.code, this.type.code, false).then((hierarchies: HierarchyOverTime[]) => {\n                    this.hierarchies = hierarchies;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n            } else {\n                this.isNew = true;\n\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.newGeoObjectOverTime(this.type.code, false).then(retJson => {\n                    this.preGeoObject = new GeoObjectOverTime(this.type, retJson.geoObject.attributes);\n                    this.postGeoObject = new GeoObjectOverTime(this.type, JSON.parse(JSON.stringify(this.preGeoObject)).attributes);\n\n                    this.hierarchies = retJson.hierarchies;\n                    this.setEditMode(true);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n            }\n        }\n    }\n\n    editorForDateChange(date: string) {\n        this.forDateChange.emit(date);\n    }\n\n    onCancelInternal(): void {\n        this.panelCancel.emit();\n\n        // if (this.code === '__NEW__') {\n        //    this.updateCode(null);\n        // }\n        // else {\n        //    this.updateCode(this.code);\n        // }\n    }\n\n    canSubmit(): boolean {\n        return this.isValid() &&\n            (this.isMaintainer || (this.reason && this.reason.trim().length > 0)) &&\n            (this.isNew || (this.attributeEditor && this.attributeEditor.getChangeRequestEditor().hasChanges()));\n    }\n\n    onSubmit(): void {\n        if (this.isNew) {\n            const action: CreateGeoObjectAction = this.attributeEditor.getActions()[0];\n\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.service.applyGeoObjectCreate(action.parentJson, action.geoObjectJson, this.isNew, this.datasetId, this.reason, false).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n\n            // this.service.applyGeoObjectCreate(this.hierarchies, this.postGeoObject, this.isNew, this.datasetId, this.reason).then((applyInfo: any) => {\n            //     if (!applyInfo.isChangeRequest) {\n            //         this.featureChange.emit(this.postGeoObject);\n            //     }\n            //     this.panelSubmit.emit(applyInfo);\n            // }).catch((err: HttpErrorResponse) => {\n            //     this.error(err);\n            // });\n        } else {\n            this.spinner.show(this.CONSTANTS.OVERLAY);\n\n            this.service.applyGeoObjectEdit(this.postGeoObject.attributes.code, this.type.code, this.attributeEditor.getActions(), this.datasetId, this.reason, false).then((applyInfo: any) => {\n                if (!applyInfo.isChangeRequest) {\n                    this.featureChange.emit(this.postGeoObject);\n                }\n                this.panelSubmit.emit(applyInfo);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            }).finally(() => {\n                this.spinner.hide(this.CONSTANTS.OVERLAY);\n            });\n        }\n\n        this.geometryService.stopEditing();\n    }\n\n    onManageAttributeVersion(attribute: AttributeType): void {\n        this.attribute = attribute;\n        this.mode = this.MODE.VERSIONS;\n    }\n\n    onManageHiearchyVersion(hierarchy: HierarchyOverTime): void {\n        this.hierarchy = hierarchy;\n        this.mode = this.MODE.HIERARCHY;\n    }\n\n    onEditAttributes(): void {\n        this.setEditMode(!this.isEdit);\n\n        // window.document.getElementById(\"navigator-left-sidebar\").scroll({\n        //     top: 0,\n        //     behavior: \"smooth\"\n        // });\n    }\n\n    setEditMode(value: boolean): void {\n        this.isEdit = value;\n        this.reason = null;\n\n        this.modeChange.emit(this.isEdit);\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div *ngIf=\"type\">\n  <ngx-spinner [fullScreen]=\"false\" [name]=\"CONSTANTS.OVERLAY\" type=\"ball-clip-rotate-multiple\" size=\"medium\"></ngx-spinner>  \n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{type.label.localizedValue}}</h3>\n    </div>      \n  </div>\n  <div *ngIf=\"mode == MODE.ATTRIBUTES && postGeoObject != null\">\n    <!-- Attributes tab -->\n    <geoobject-shared-attribute-editor  *ngIf=\"hierarchies && postGeoObject\"\n      #attributeEditor \n      [geoObjectType]=\"type\" \n      [postGeoObject]=\"postGeoObject\" \n      [isNew]=\"isNew\" \n      [isGeometryInlined]=\"false\"\n      [hierarchies]=\"hierarchies\"\n      [readOnly]=\"!isEdit\"\n      (valid)=\"setValid($event)\"\n      [requestedDate]=\"forDate\"\n      (filterDateChange)=\"editorForDateChange($event)\"\n      [forDate]=\"forDate\"\n      [datasetId]=\"datasetId\"\n      > \n    </geoobject-shared-attribute-editor>\n    \n    <div *ngIf=\"isEdit && !isMaintainer\" class=\"form-group\" style=\"z-index: 0;\">\n      <label> \n        <localize key=\"change.request.reason.label\"></localize>\n      </label>\n      <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" class=\"form-control\" name=\"reason-input\" required></textarea>\n    </div>\n\n    <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n    \n      <button *ngIf=\"!readOnly && !isEdit\" type=\"submit\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" style=\"width:100%;\" role=\"button\">\n        <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n      </button>\n      \n      <button *ngIf=\"isEdit\" type=\"button\" class=\"btn btn-default\" (click)=\"onCancelInternal()\">\n        <localize key=\"modal.button.cancel\"></localize>\n      </button>\n      <button *ngIf=\"isEdit\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!canSubmit()\">\n        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n      </button>\n\n    </div>\n  </div>\n</div>","import { LocalizedValue, PageResult } from \"@shared/model/core\";\nimport { GeoObject, GeoObjectType } from \"./registry\";\n\nexport class VersionMetadata {\n\n    master: boolean;\n    visibility: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n\n}\n\nexport class ListVersionMetadata {\n\n    oid?: string;\n    listMetadata?: VersionMetadata;\n    geospatialMetadata?: VersionMetadata;\n\n}\n\nexport class ListTypeVersion extends ListVersionMetadata {\n\n    displayLabel: string;\n    typeCode: string;\n    orgCode: string;\n    listEntry: string;\n    listType: string;\n    forDate: string;\n    createDate: string;\n    publishDate: string;\n    attributes: any[];\n    isGeometryEditable: boolean;\n    locales?: string[];\n    shapefile?: boolean;\n    isAbstract?: boolean;\n    superTypeCode?: string;\n    refreshProgress?: any;\n    working: boolean;\n    isMember?: boolean;\n    versionNumber: number;\n    subtypes?: { label: string, code: string }[];\n    collapsed?: boolean;\n    curation?: any;\n    period?: {\n        type: string,\n        value: any\n    };\n\n}\n\nexport class ListTypeEntry {\n\n    displayLabel: string;\n    oid: string;\n    typeCode: string;\n    orgCode: string;\n    listType: string;\n    forDate: string;\n    period?: {\n        type: string,\n        value: any\n    };\n\n    working: ListTypeVersion;\n    versions?: ListTypeVersion[];\n    showAll?: boolean;\n\n}\n\nexport class ListMetadata {\n\n    label: LocalizedValue;\n    description: LocalizedValue;\n    process: LocalizedValue;\n    progress: LocalizedValue;\n    accessConstraints: LocalizedValue;\n    useConstraints: LocalizedValue;\n    acknowledgements: LocalizedValue;\n    disclaimer: LocalizedValue;\n    collectionDate: string;\n    originator: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n\n    topicCategories?: string;\n    placeKeywords?: string;\n    updateFrequency?: string;\n    lineage?: string;\n    languages?: string;\n    scaleResolution?: string;\n    spatialRepresentation?: string;\n    referenceSystem?: string;\n    reportSpecification?: string;\n    distributionFormat?: string;\n\n}\n\nexport class ListType {\n\n    oid?: string;\n    code: string;\n    organization: string;\n    listType: string;\n    write?: boolean;\n    read?: boolean;\n    exploratory?: boolean;\n    typeCode: string;\n    superTypeCode?: string;\n    typeLabel?: string;\n    typePrivate?: boolean;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n    subtypes?: { label: string, code: string }[];\n    subtypeHierarchies?: any[];\n    hierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n    includeLatLong?: boolean;\n\n    listMetadata: ListMetadata;\n    geospatialMetadata: ListMetadata;\n\n    // Attributes for the subtypes\n    validOn?: string;\n    publishingStartDate?: string;\n    frequency?: string;\n    intervalJson?: { startDate: string, endDate: string, readonly?: string, oid?: string }[]\n\n    entries?: ListTypeEntry[];\n    filter?: {\n        attribute: string,\n        operation: string,\n        value: any,\n        id: string\n    }[];\n\n}\n\nexport class ListTypeByType {\n\n    orgCode: string;\n    orgLabel: string;\n    typeCode: string;\n    typeLabel: string;\n    geometryType: string;\n    write: boolean;\n    private: boolean;\n    lists: ListType[];\n\n}\n\nexport class ContextLayer {\n\n    oid: string;\n    forDate: string;\n    versionNumber: number;\n    rendered?: boolean;\n    showOnLegend?: boolean;\n    color?: string;\n    label?: string;\n\n}\n\nexport class ContextList {\n\n    oid: string;\n    label: string;\n    versions: ContextLayer[];\n    open?: boolean;\n\n}\n\nexport class ListTypeGroup {\n\n    typeCode: string;\n    typeLabel: LocalizedValue;\n    lists: ContextList[];\n\n}\n\nexport class ListOrgGroup {\n\n    orgCode: string;\n    orgLabel: LocalizedValue;\n    types: ListTypeGroup[];\n\n}\n\nexport class LayerRecord {\n\n    recordType: string;\n\n    // Attributes required for the geo object properties panel\n    type?: GeoObjectType;\n    code?: string;\n    forDate?: string;\n\n    // Attributes required for the list row properties panel\n    typeLabel?: LocalizedValue;\n    version?: string;\n    attributes?: any[];\n    data?: any;\n\n    geoObject?: GeoObject;\n    bbox?: any;\n\n}\n\nexport class CurationProblem {\n\n    resolution: string;\n    historyId: string;\n    type: string;\n    id: string;\n    typeCode?: string;\n    goCode?: string;\n    goUid?: string;\n    selected?: boolean;\n\n}\n\nexport class CurationJob {\n\n    status: string;\n    lastRun: string;\n    lastRunBy: string;\n    historyId: string;\n    jobId: string;\n    workTotal: number;\n    workProgress: number;\n    exception?: {\n        type: string,\n        message: string\n    };\n\n    page?: PageResult<CurationProblem>\n\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { v4 as uuid } from \"uuid\";\n\nimport { IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { AttributeType, GeoObjectType, PRESENT } from \"@registry/model/registry\";\nimport Utils from \"@registry/utility/Utils\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\n\n@Component({\n    selector: \"list-type-publish-modal\",\n    templateUrl: \"./publish-modal.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypePublishModalComponent implements OnInit {\n\n    currentDate: Date = new Date();\n    message: string = null;\n    onListTypeChange: Subject<ListType> = null;\n\n    list: ListType = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    tab: string = \"LIST\";\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    gap: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private iService: IOService,\n        private lService: LocalizationService,\n        private cacheService: RegistryCacheService,\n        private bsModalRef: BsModalRef,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    init(listByType: ListTypeByType, onListTypeChange: Subject<ListType>, list?: ListType): void {\n        this.onListTypeChange = onListTypeChange;\n        this.readonly = !listByType.write;\n\n        const cache = this.cacheService.getTypeCache();\n\n        cache.waitOnTypes().then(types => {\n            this.geoObjectType = cache.getTypeByCode(listByType.typeCode);\n        });\n\n        if (list == null) {\n            this.isNew = true;\n            this.list = {\n                oid: null,\n                listType: \"single\",\n                organization: \"\",\n                typeCode: \"\",\n                typeLabel: \"\",\n                displayLabel: this.lService.create(),\n                description: this.lService.create(),\n                code: listByType.typeCode + \"_\" + Math.floor(Math.random() * 999999),\n                hierarchies: [],\n                subtypeHierarchies: [],\n                listMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: \"\",\n                    collectionDate: \"\",\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: \"\",\n                    organization: \"\",\n                    telephoneNumber: \"\",\n                    email: \"\"\n                },\n                geospatialMetadata: {\n                    label: this.lService.create(),\n                    description: this.lService.create(),\n                    originator: \"\",\n                    collectionDate: \"\",\n                    process: this.lService.create(),\n                    progress: this.lService.create(),\n                    accessConstraints: this.lService.create(),\n                    useConstraints: this.lService.create(),\n                    acknowledgements: this.lService.create(),\n                    disclaimer: this.lService.create(),\n                    contactName: \"\",\n                    organization: \"\",\n                    telephoneNumber: \"\",\n                    email: \"\",\n                    topicCategories: \"\",\n                    placeKeywords: \"\",\n                    updateFrequency: \"\",\n                    lineage: \"\",\n                    languages: \"\",\n                    scaleResolution: \"\",\n                    spatialRepresentation: \"vector\",\n                    referenceSystem: \"EPSG4326\",\n                    reportSpecification: \"\",\n                    distributionFormat: \"SHAPEFILE\"\n                }\n\n            };\n\n            this.list.typeCode = listByType.typeCode;\n            this.list.typeLabel = listByType.typeLabel;\n            this.list.organization = listByType.orgCode;\n\n            if (listByType.geometryType === \"MULTIPOINT\" || listByType.geometryType === \"POINT\") {\n                this.list.includeLatLong = true;\n            }\n\n            this.iService.getHierarchiesForType(this.list.typeCode, true).then(hierarchies => {\n                this.list.hierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n\n            this.iService.getHierarchiesForSubtypes(this.list.typeCode, false).then(hierarchies => {\n                this.list.subtypeHierarchies = hierarchies;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.list = list;\n            this.isNew = false;\n\n            if (this.list.listType === \"interval\") {\n                this.list.intervalJson.forEach(interval => {\n                    interval.readonly = interval.endDate !== PRESENT ? \"BOTH\" : \"START\";\n                    interval.oid = uuid();\n                });\n            }\n        }\n    }\n\n    getIsDisabled(event): boolean {\n        let elClasses = event.target.classList;\n        for (let i = 0; i < elClasses.length; i++) {\n            let c = elClasses[i];\n            if (c === \"disabled\") {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.list).then(response => {\n            this.onListTypeChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getAttributeForFilter(filter: { attribute: string, comparator: string, value: any }): AttributeType {\n        if (filter.attribute != null && filter.attribute !== \"\") {\n            const attributeType = this.geoObjectType.attributes.find(attributeType => attributeType.code === filter.attribute);\n\n            return attributeType;\n        }\n\n        return null;\n    }\n\n    onNewFilter(): void {\n        if (this.list.filter == null) {\n            this.list.filter = [];\n        }\n\n        this.list.filter.push({\n            attribute: \"\",\n            operation: \"EQ\",\n            value: null,\n            id: uuid()\n        });\n    }\n\n    removeFilter(index: number): void {\n        this.list.filter.splice(index, 1);\n    }\n\n    onNewInterval(): void {\n        if (this.list.intervalJson == null) {\n            this.list.intervalJson = [];\n        }\n\n        this.list.intervalJson.push({\n            startDate: \"\",\n            endDate: \"\",\n            oid: uuid()\n        });\n    }\n\n    removeInterval(index: number): void {\n        this.list.intervalJson.splice(index, 1);\n\n        this.handleDateChange();\n    }\n\n    handleDateChange(): void {\n        if (this.list.listType === \"single\") {\n            this.valid = (this.list.validOn != null && this.list.validOn.length > 0);\n        } else if (this.list.listType === \"incremental\") {\n            this.valid = (this.list.publishingStartDate != null && this.list.publishingStartDate.length > 0);\n        } else if (this.list.listType === \"interval\") {\n            this.valid = this.list.intervalJson.map(interval => {\n                return ((interval.startDate != null && interval.startDate.length > 0) &&\n                    (interval.endDate != null && interval.endDate.length > 0) &&\n                    !this.dateService.after(interval.startDate, interval.endDate));\n            }).reduce((a, b) => a && b);\n\n            // Sort the entries\n            this.list.intervalJson = this.list.intervalJson.sort((a, b) => {\n                const d1: Date = new Date(a.startDate);\n                const d2: Date = new Date(b.startDate);\n\n                return d1 < d2 ? 1 : -1;\n            });\n\n            // Check for overlaps\n            this.list.intervalJson.forEach((element, index) => {\n                if (index > 0) {\n                    const future = this.list.intervalJson[index - 1];\n\n                    if (future.startDate && future.endDate && element.startDate && element.endDate) {\n                        let s1: any = new Date(future.startDate);\n                        let e1: any = new Date(future.endDate);\n                        let s2: any = new Date(element.startDate);\n                        let e2: any = new Date(element.endDate);\n\n                        if (Utils.dateRangeOverlaps(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                            this.valid = false;\n                        }\n                    }\n                }\n            });\n\n            if (this.valid) {\n                // Check for gap\n                this.gap = false;\n\n                this.list.intervalJson.forEach((element, index) => {\n                    if (index > 0) {\n                        const future = this.list.intervalJson[index - 1];\n\n                        if (future.startDate && element.endDate) {\n                            let e1: any = new Date(element.endDate);\n                            let s2: any = new Date(future.startDate);\n\n                            if (Utils.hasGap(e1.getTime(), s2.getTime())) {\n                                this.gap = true;\n                            }\n                        }\n                    }\n                });\n            }\n        } else {\n            this.valid = true;\n        }\n    }\n\n    getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-type=\"type\">\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.metadata.title\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n<!--\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.collection.date\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <date-field [(value)]=\"metadata.collectionDate\" [classNames]=\"['form-control']\" label=\"\"\n                [inputName]=\"'collectionDate'\" [allowFutureDates]=\"false\" name=\"collectionDate\" [disable]=\"readonly\">\n            </date-field>\n        </div>\n    </div>\n-->    \n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"true\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"list != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <!--         <div class=\"heading text-center\"> -->\n        <!--             <h1 *ngIf=\"isNew\"> -->\n        <!--                 <localize key=\"type.publish.title\"></localize> -->\n        <!--             </h1> -->\n        <!--             <h1 *ngIf=\"!isNew\"> -->\n        <!--                 {{list.displayLabel.localizedValue}} -->\n        <!--                 <localize key=\"type.publish.view.title\"></localize> -->\n        <!--             </h1> -->\n        <!--         </div> -->\n\n        <div class=\"text-center\">\n            <h2>\n                <localize key=\"type.publish.configuration.header\"></localize>\n            </h2>\n            <hr>\n        </div>\n\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\" style=\"text-align: center;\">\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'single'\"\n                            [value]=\"'single'\" [(ngModel)]=\"list.listType\" name=\"single\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.single.date\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'incremental'\"\n                            [value]=\"'incremental'\" [(ngModel)]=\"list.listType\" name=\"incremental\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.incremental.series\"></localize>\n                        </span>\n                    </label>\n\n                    <label class=\"radio radio-inline\" style=\"padding-left:0;\">\n                        <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"list.listType === 'interval'\"\n                            [value]=\"'interval'\" [(ngModel)]=\"list.listType\" name=\"interval\"\n                            [disabled]=\"readonly || !isNew\">\n                        <span>\n                            <localize key=\"list.type.interval.series\"></localize>\n                        </span>\n                    </label>\n\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.metadata.title\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of list.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"masterlist.listAbstract\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeLabel\" name=\"typeLabel\" type=\"text\" class=\"form-control\"\n                            disabled />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"hierarchy.nodeTooltip.geoObjectTypeCode\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"list.typeCode\" name=\"typeCode\" type=\"text\" class=\"form-control\" disabled />\n                    </div>\n                </div>\n\n                <div *ngIf=\"list.includeLatLong !== undefined\" class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label for=\"typeCode\">\n                            <localize key=\"list.type.includeLatLong\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <boolean-field [(value)]=\"list.includeLatLong\" label=\"\" [disable]=\"false\"></boolean-field>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.hierarchies.length > 0\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\">\n                        <localize key=\"masterlist.parents\"></localize>\n                    </div>\n                </div>\n\n                <div *ngFor=\"let hierarchy of list.hierarchies\">\n                    <ng-container *ngIf=\"hierarchy.parents.length > 0\">\n                        <div class=\"row-holder\">\n                            <div class=\"label-holder\">\n                                <label> {{hierarchy.label}} </label>\n                            </div>\n                            <div class=\"holder\">\n                                <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                                    <!-- <div class=\"holder\"> -->\n\n                                    <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                        <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                        <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\"\n                                            [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly}\"\n                                            style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                            <span></span>\n                                        </div>\n\n                                        <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                        <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                                    </div>\n                                    <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                                    <!-- </div> -->\n                                </div>\n                            </div>\n                        </div>\n                    </ng-container>\n                </div>\n\n                <div *ngIf=\"list.subtypeHierarchies.length > 0\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"listlist.subtypeHierarchies\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"row\" *ngFor=\"let hierarchy of list.subtypeHierarchies\">\n                                <!-- <div class=\"holder\"> -->\n\n                                <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                    <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                    <div (click)=\"getIsDisabled($event) ? null : hierarchy.selected = !hierarchy.selected\"\n                                        [ngClass]=\"{'chk-checked' : hierarchy.selected, 'disabled' : readonly}\"\n                                        style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                        <span></span>\n                                    </div>\n\n                                    <label style=\"margin: 3px 10px;\">{{hierarchy.label}}</label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\" *ngIf=\"list.listType === 'single'\">\n                    <div class=\"label-holder\">\n                        <label for=\"validOn\">\n                            <localize key=\"list.type.valid.on\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <date-field [(value)]=\"list.validOn\" [classNames]=\"['form-control']\" label=\"\"\n                            [inputName]=\"'validOn'\" [allowFutureDates]=\"false\" name=\"listValidOn\" [required]=\"true\"\n                            [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n                    </div>\n                </div>\n\n                <ng-container *ngIf=\"list.listType === 'incremental'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.frequency\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"list.frequency\"\n                                [disabled]=\"readonly || !isNew\" required #frequency=\"ngModel\">\n                                <option></option>\n                                <option value=\"ANNUAL\">\n                                    <localize key=\"georegistry.frequency.annual\"></localize>\n                                </option>\n                                <option value=\"BIANNUAL\">\n                                    <localize key=\"georegistry.frequency.biannual\"></localize>\n                                </option>\n                                <option value=\"QUARTER\">\n                                    <localize key=\"georegistry.frequency.quarter\"></localize>\n                                </option>\n                                <option value=\"MONTHLY\">\n                                    <localize key=\"georegistry.frequency.monthly\"></localize>\n                                </option>\n                            </select>\n                            <small *ngIf=\"(frequency.dirty)\" class=\"form-text text-danger\">\n                                <localize key=\"listlist.change.frequency\"></localize>\n                            </small>\n                        </div>\n                    </div>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.publishingStartDate\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                                <date-text [date]=\"list.publishingStartDate\"></date-text>\n                            </span>\n                            <date-field *ngIf=\"!readonly\" [(value)]=\"list.publishingStartDate\"\n                                [classNames]=\"['form-control']\" label=\"\" [inputName]=\"'publishingStartDate'\"\n                                [allowFutureDates]=\"false\" name=\"listPublishingStartDate\" [required]=\"true\"\n                                [disable]=\"readonly || !isNew\" (valueChange)=\"handleDateChange()\"></date-field>\n\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container *ngIf=\"list.listType === 'interval'\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"list.type.intervals\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div *ngFor=\"let interval of list.intervalJson; let i = index;\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-5\">\n                                        <label>\n                                            <localize key=\"io.startDate\"></localize>\n                                        </label>\n                                    </div>\n                                    <div class=\"col-md-5\">\n                                        <label>\n                                            <localize key=\"io.endDate\"></localize>\n                                        </label>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-5\">\n                                        <date-field [(value)]=\"interval.startDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'startDate-' + interval.oid\"\n                                            [allowFutureDates]=\"false\" [required]=\"true\"\n                                            [disable]=\"readonly || (!isNew && interval.readonly != null)\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                    <div class=\"col-md-5\">\n                                        <date-field [(value)]=\"interval.endDate\" [classNames]=\"['form-control']\"\n                                            label=\"\" [inputName]=\"'endDate-' + interval.oid\" [allowInfinity]=\"true\"\n                                            [required]=\"true\"\n                                            [disable]=\"readonly || (!isNew && interval.readonly == 'BOTH')\"\n                                            (valueChange)=\"handleDateChange()\"></date-field>\n\n                                    </div>\n                                    <div class=\"col-md-2\">\n                                        <i class=\"fa fa-times delete-btn clickable\"\n                                            *ngIf=\"(isNew || interval.readonly == null)\" (click)=\"removeInterval(i)\"\n                                            [title]=\"'button.delete.helptext' | localize\">\n                                        </i>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\" *ngIf=\"!readonly\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\" (click)=\"onNewInterval()\" class=\"btn btn-primary\"\n                                        role=\"button\" style=\"margin:15px 0;\">\n                                        <localize key=\"changeovertime.manageVersions.summaryKey.NEW\"></localize>\n                                    </button>\n                                    <div *ngIf=\"!valid\" style=\"float:none;\" class=\"error-message\">\n                                        <localize key=\"list.type.bad.interval.dates\"></localize>\n                                    </div>\n                                    <div *ngIf=\"gap\" style=\"float:none;\" class=\"warning-text\">\n                                        <localize key=\"manage.versions.gap.message\"></localize>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n                <ng-container\n                    *ngIf=\"geoObjectType != null && (isNew || (list.filter != null  && list.filter.length > 0))\">\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"button.filter.helptext\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <div *ngFor=\"let filter of list.filter; let j = index;\">\n\n                                <div class=\"row\">\n                                    <div class=\"col-md-3\">\n                                        <select class=\"select-area\" [name]=\"'filter' + filter.id\"\n                                            [(ngModel)]=\"filter.attribute\" [disabled]=\"readonly || !isNew\" required>\n                                            <option></option>\n                                            <ng-container *ngFor=\"let attribute of geoObjectType.attributes;\">\n                                                <option *ngIf=\"attribute.isChangeOverTime && attribute.type !== 'local'\"\n                                                    [value]=\"attribute.code\">\n                                                    {{attribute.label.localizedValue}}\n                                                </option>\n                                            </ng-container>\n                                        </select>\n                                    </div>\n                                    <ng-container *ngIf=\"getAttributeForFilter(filter) as attributeType\">\n                                        <div class=\"col-md-3\">\n                                            <select class=\"select-area\" [name]=\"'filter-operation' + filter.id\"\n                                                [(ngModel)]=\"filter.operation\" [disabled]=\"readonly || !isNew\" required>\n                                                <option value=\"EQ\">\n                                                    <localize key=\"list.type.equals\"></localize>\n                                                </option>\n                                                <option *ngIf=\"attributeType.type === 'classification'\" value=\"EXACT\">\n                                                    <localize key=\"list.type.exact\"></localize>\n                                                </option>\n                                            </select>\n                                        </div>\n\n                                        <div class=\"col-md-4\">\n                                            <ng-container [ngSwitch]=\"attributeType.type\">\n                                                <ng-container *ngSwitchCase=\"'classification'\">\n                                                    <classification-field\n                                                        [classificationType]=\"attributeType.classificationType\"\n                                                        [name]=\"'filter-value' + filter.id\" container=\"body\"\n                                                        [(value)]=\"filter.value\" [disabled]=\"!isNew\">\n                                                    </classification-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'term'\">\n                                                    <select [name]=\"'filter-value' + filter.id\" class=\"select-area\"\n                                                        [(ngModel)]=\"filter.value\" [disabled]=\"!isNew\">\n                                                        <option value=\"\"></option>\n                                                        <option\n                                                            *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\"\n                                                            [value]=\"option.code\">{{option.label.localizedValue}}\n                                                        </option>\n                                                    </select>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'boolean'\">\n                                                    <boolean-field [disable]=\"!isNew\" [(value)]=\"filter.value\"\n                                                        localizeLabelKey=\"change.request.boolean.option.true\">\n                                                    </boolean-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'date'\">\n                                                    <date-field [(value)]=\"filter.value\" [classNames]=\"['form-control']\"\n                                                        label=\"\" [inputName]=\"'filter-value' + filter.id\"\n                                                        [disable]=\"!isNew\">\n                                                    </date-field>\n                                                </ng-container>\n                                                <ng-container *ngSwitchCase=\"'float'\">\n                                                    <input [(ngModel)]=\"filter.value\"\n                                                        [name]=\"'filter-value' + filter.id\" type=\"number\"\n                                                        class=\"form-control\" [disabled]=\"!isNew\" [required]=\"false\" />\n                                                </ng-container>\n                                                <ng-container *ngSwitchDefault>\n                                                    <input [(ngModel)]=\"filter.value\"\n                                                        [name]=\"'filter-value' + filter.id\" type=\"text\"\n                                                        class=\"form-control\" [disabled]=\"!isNew\" [required]=\"false\" />\n                                                </ng-container>\n\n                                            </ng-container>\n                                        </div>\n                                    </ng-container>\n                                    <div class=\"col-md-2\">\n                                        <i class=\"fa fa-times delete-btn clickable\" *ngIf=\"isNew\"\n                                            (click)=\"removeFilter(i)\" [title]=\"'button.delete.helptext' | localize\">\n                                        </i>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\" *ngIf=\"isNew && !readonly\">\n                                <div class=\"col-md-12\">\n                                    <button type=\"button\" (click)=\"onNewFilter()\" class=\"btn btn-primary\" role=\"button\"\n                                        style=\"margin:15px 0;\">\n                                        <localize key=\"changeovertime.manageVersions.summaryKey.NEW\"></localize>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n\n\n                <div class=\"inner-col-content-wrapper\" *ngIf=\"isNew\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n\n                            <div class=\"text-center\">\n                                <h2>\n                                    <localize key=\"type.publish.metadata.header\"></localize>\n                                </h2>\n                                <hr>\n                            </div>\n\n                            <div class=\"label-holder\"></div>\n\n                            <div class=\"holder\">\n                                <div class=\"form-group\" style=\"text-align: center;\">\n\n                                    <div class=\"btn-group geobject-editor-tab-holder\">\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.list\"></localize>\n                                            </span>\n                                        </label>\n                                        <label class=\"btn full-width-radio-button\" style=\"width:50%;\"\n                                            [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\"\n                                            (click)=\"handleTab('GEOSPATIAL')\">\n                                            <span style=\"display:inline-block; width:90%;\">\n                                                <localize key=\"list.type.geospatial\"></localize>\n                                            </span>\n                                        </label>\n                                    </div>\n\n                                </div>\n                            </div>\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.listMetadata, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:list.geospatialMetadata, type:'geospatial'}\">\n                            </ng-container>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { ErrorHandler } from '@shared/component';\nimport { Organization } from '@shared/model/core';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService, LocalizationService } from '@shared/service';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n  selector: 'import-types-modal',\n  templateUrl: './import-types-modal.component.html',\n  styleUrls: []\n})\nexport class ImportTypesModalComponent implements OnInit {\n\n  public organizations: Organization[] = [];\n  public orgCode: string;\n\n\n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n\n  @ViewChild('myFile')\n  fileRef: ElementRef;\n\n  message: string = null;\n\n  public onNodeChange: Subject<boolean>;\n\n  constructor(private eventService: EventService, private localizationService: LocalizationService, public bsModalRef: BsModalRef) {\n  }\n\n  ngOnInit(): void {\n    this.onNodeChange = new Subject();\n  }\n\n  init(organizations: Organization[]): void {\n    this.organizations = organizations;\n\n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/cgr/import-types'\n    };\n\n    this.uploader = new FileUploader(options);\n\n    this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n      form.append('orgCode', this.orgCode);\n    };\n    this.uploader.onBeforeUploadItem = (fileItem: any) => {\n      this.eventService.start();\n    };\n    this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n      this.fileRef.nativeElement.value = \"\";\n      this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n      this.onNodeChange.next(true);\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n      const error = JSON.parse(response)\n\n      this.error({ error: error });\n    }\n\n  }\n\n  onSelect(orgCode: string): void {\n    this.orgCode = orgCode;\n  }\n\n  onClick(): void {\n\n    if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error({\n        message: this.localizationService.decode('io.missing.file'),\n        error: {},\n      });\n    }\n  }\n\n\n  public error(err: any): void {\n    this.message = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1> <localize key=\"hierarchy.sidebar.importTypes\"></localize> </h1>\n    </div> \n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"attribute.organization.label\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <select (change)=\"onSelect($event.target.value)\">\n              <option></option>\n              <option *ngFor=\"let organization of organizations\" value={{organization.code}}>{{organization.label.localizedValue}}</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> <localize key=\"hierarchy.sidebar.xmlFile\"></localize> </label>\n          </div>\n          <div class=\"holder\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xml\" required /> \n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\"></div>\n          <div class=\"holder\">\n            <div class=\"button-holder\">\n              <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.cancel\"></localize>\n                </span>\n              </button>\n              <button type=\"submit\" (click)=\"onClick()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n                <span>\n                  <localize key=\"modal.button.ok\"></localize>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { RegistryService, HierarchyService } from \"@registry/service\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n    selector: \"create-hierarchy-type-modal\",\n    templateUrl: \"./create-hierarchy-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n\n    edit: boolean = false; // if true, we are updating an existing. If false, we are creating new\n\n    readOnly: boolean = false;\n\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            rootGeoObjectTypes: [],\n            organizationCode: \"\"\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n            // Filter out organizations they're not RA's of, unless we're readOnly.\n            if (!this.readOnly) {\n                this.organizations = [];\n\n                for (var i = 0; i < orgs.length; ++i) {\n                    if (this.auth.isOrganizationRA(orgs[i].code)) {\n                        this.organizations.push(orgs[i]);\n                    }\n                }\n            } else {\n                this.organizations = orgs;\n            }\n\n            if (!this.edit && this.organizations.length === 1) {\n                this.hierarchyType.organizationCode = this.organizations[0].code;\n                this.organizationLabel = this.organizations[0].label.localizedValue;\n            } else if (this.edit || this.readOnly) {\n                this.organizationLabel = this.getOrganizationLabelFromCode(this.hierarchyType.organizationCode);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    getOrganizationLabelFromCode(orgCode: string) {\n        for (var i = 0; i < this.organizations.length; ++i) {\n            if (this.organizations[i].code === orgCode) {\n                return this.organizations[i].label.localizedValue;\n            }\n        }\n\n        console.log(\"Did not find org with code [\" + orgCode + \"]\");\n        return orgCode;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if (this.readOnly) {\n            this.bsModalRef.hide();\n            return;\n        }\n\n        if (this.edit) {\n            this.hierarchyService.updateHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchyService.createHierarchyType(JSON.stringify(this.hierarchyType)).then(data => {\n                this.onHierarchytTypeCreate.next(data);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n      <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n          <h1>\n            <localize *ngIf=\"!edit\" key=\"hierarchy.management.create.hierarchy.title\"></localize>\n            <localize *ngIf=\"edit\" key=\"hierarchy.management.update.hierarchy.title\"></localize> \n          </h1>\n        </div> \n        \n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit || readOnly\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> \n          <span  style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n        </label>\n        <input [disabled]=\"readOnly\" [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      \n      <localized-text [(value)]=\"hierarchyType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\" [disabled]=\"readOnly\"></localized-text>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select *ngIf=\"!edit && organizations.length > 1\" [disabled]=\"edit || readOnly\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n        <span *ngIf=\"!edit && organizations.length == 1\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n        <span *ngIf=\"edit\" class=\"text\"><input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.progress\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.progress\" name=\"progress\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.acknowledgement\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.acknowledgement\" name=\"acknowledgement\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.disclaimer\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.disclaimer\" name=\"disclaimer\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.accessConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.useConstraints\"></localize></label>\n        <textarea [(ngModel)]=\"hierarchyType.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\"></textarea>\n      </div>\n      \n      <hr/>\n      \n      <div class=\"form-group\">\n        <h4>\n          <localize key=\"masterlist.contact\"></localize>\n        </h4>\n      </div>\n      \n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.contact\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.contact\" name=\"contact\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.phoneNumber\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.phoneNumber\" name=\"phoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>\n\n      <div class=\"form-group\">\n        <label><localize key=\"data.property.label.email\"></localize></label>\n        <input [(ngModel)]=\"hierarchyType.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readOnly\">\n      </div>      \n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"submit\" [disabled]=\"hierarchyType.code.length < 1 || form.invalid\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\n@Component({\n    selector: \"create-geoobjtype-modal\",\n    templateUrl: \"./create-geoobjtype-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organization: Organization = null;\n    message: string = null;\n    parents: GeoObjectType[];\n    hierarchyType: HierarchyType;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, private auth: AuthService, private registryService: RegistryService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            code: \"\",\n            label: this.lService.create(),\n            description: this.lService.create(),\n            geometryType: \"MULTIPOINT\",\n            isLeaf: false,\n            isGeometryEditable: true,\n            organizationCode: \"\",\n            attributes: []\n        };\n    }\n\n    init(organization: Organization, parents: GeoObjectType[], groupSuperType: GeoObjectType, isAbstract: boolean) {\n        this.geoObjectType.isAbstract = isAbstract ? isAbstract : false;\n\n        if (groupSuperType) {\n            this.geoObjectType.superTypeCode = groupSuperType.code;\n            this.geoObjectType.geometryType = groupSuperType.geometryType;\n            this.geoObjectType.isPrivate = groupSuperType.isPrivate;\n        }\n\n        // Filter out parents that are not abstract\n        this.parents = parents.filter(parent => parent.isAbstract);\n\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n        this.geoObjectType.organizationCode = this.organization.code;\n        this.organizationLabel = this.organization.label.localizedValue;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType(JSON.stringify(this.geoObjectType)).then(data => {\n            this.onGeoObjTypeCreate.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    toggleIsAbstract(): void {\n        this.geoObjectType.isAbstract = !this.geoObjectType.isAbstract;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize *ngIf=\"geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.group.title\"></localize> \n        <localize *ngIf=\"!geoObjectType.isAbstract\" key=\"hierarchy.management.create.geoobjecttype.title\"></localize> \n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"geoObjectType.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n    \n    <div class=\"row\" *ngIf=\"!geoObjectType.superTypeCode\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <label style=\"display: block;\">\n            <localize key=\"attribute.group.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n        \n          <label style=\"display: block;\">\n            <localize key=\"geoObjectType.attr.visibility.label\"></localize> \n          </label>\n          <div class=\"check-block\">\n            <boolean-field [disable]=\"geoObjectType.superTypeCode != null\" [(value)]=\"geoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required [disabled]=\"geoObjectType.superTypeCode != null && geoObjectType.superTypeCode != ''\">\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MIXED\">\n              <localize key=\"georegistry.geometry.mixed\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { ManageGeoObjectTypeModalState, GeoObjectType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-geoobjecttype-modal\",\n    templateUrl: \"./manage-geoobjecttype-modal.component.html\",\n    styleUrls: [\"./manage-geoobjecttype-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    message: string = null;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n    readOnly: boolean = false;\n\n    constructor(private service: RegistryService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the\n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next(data);\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form>\n\n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" [readOnly]=\"readOnly\"\n    [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></geoobjecttype-input>\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\"\n    [service]=\"service\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\"></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\"\n    [attribute]=\"modalState.attribute\" [service]=\"service\" (stateChange)=\"onModalStateChange($event)\"\n    (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\">\n  </edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    (stateChange)=\"onModalStateChange($event)\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    [termOption]=\"modalState.termOption\" (stateChange)=\"onModalStateChange($event)\">\n  </edit-term-option-input>\n\n</form>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, AttributeType } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"geoobjecttype-input\",\n    templateUrl: \"./geoobjecttype-input.component.html\",\n    styleUrls: [\"./geoobjecttype-input.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() readOnly: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    \n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    editGeoObjectType: GeoObjectType;\n\n    organizationLabel: string;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"setGeoObjectType\")\n    set in(geoObjectType: GeoObjectType) {\n        if (geoObjectType) {\n            this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        }\n    }\n\n    message: string = null;\n\n    // modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: true }\n        ]\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService,\n        private modalStepIndicatorService: ModalStepIndicatorService,\n        private localizationService: LocalizationService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n\n        // this.geoObjectTypeManagementService.setModalState(this.modalState);\n\n        this.fetchOrganizationLabel();\n    }\n\n    defineAttributeModal(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    fetchOrganizationLabel(): void {\n        this.registryService.getOrganizations().then(orgs => {\n            for (let i = 0; i < orgs.length; ++i) {\n                if (orgs[i].code === this.editGeoObjectType.organizationCode) {\n                    this.organizationLabel = orgs[i].label.localizedValue;\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    manageAttributes(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageAttributes, attribute: \"\", termOption: \"\" });\n    }\n\n    // onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n    //     this.modalState = state;\n    // }\n\n    update(): void {\n        this.registryService.updateGeoObjectType(this.editGeoObjectType).then(geoObjectType => {\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n\n        // return false;\n\n        return true;\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading text-center\">\n            <h1>\n                <localize key=\"hierarchy.management.edit.geoobjecttype.title\"></localize>\n                : {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n            \n            <localized-input [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [disabled]=\"readOnly\" [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"attribute.group.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"true\" [(value)]=\"geoObjectType.isAbstract\" [localizeLabelKey]=\"'attribute.isAbstract.label'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"geoObjectType.attr.visibility.label\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <boolean-field [disable]=\"readOnly || geoObjectType.superTypeCode\" [(value)]=\"editGeoObjectType.isPrivate\" [localizeLabelKey]=\"'geoObjectType.attr.isPrivate'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\" *ngIf=\"!geoObjectType.isAbstract && geoObjectType.superTypeCode\">\n                <div class=\"label-holder\">\n                    <localize key=\"attribute.parentType.label\"></localize>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> \n                        {{geoObjectType.superTypeCode}}\n                    </span>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MIXED\"><localize key=\"georegistry.geometry.mixed\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [disable]=\"readOnly\" [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"organizationLabel\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n<!--                             <ul class=\"list-group list-group-flush\"> -->\n<!--                                 <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li> -->\n<!--                             </ul> -->\n\n<!--                             <button [disabled]=\"readOnly || geoObjectType.superTypeCode\" type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\"> -->\n<!--                                 <localize key=\"modal.button.manageAttributes\"></localize> -->\n<!--                             </button> -->\n\n                        <div class=\"table-responsive\">\n                              <table class=\"table\">\n<!--                                   <thead> -->\n<!--                                       <tr> -->\n<!--                                           <th> -->\n<!--                                               <localize key=\"data.property.label.label\"></localize> -->\n<!--                                           </th> -->\n<!--                                           <th class=\"button-column-header\"> -->\n<!--                                               <localize key=\"data.property.label.actions\"></localize> -->\n<!--                                           </th> -->\n<!--                                       </tr> -->\n<!--                                   </thead> -->\n                                  <tbody>\n                                      <tr *ngFor=\"let attr of geoObjectType.attributes\" >\n                                          <td>{{attr.label.localizedValue}}</td>\n                                          <td class=\"button-column\" style=\"width: 60px;\">\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                                  [title]=\"'modal.button.edit' | localize\"></a>\n                                              <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                                  [title]=\"'modal.button.remove' | localize\"></a>\n                                          </td>\n                                      </tr>\n                                  </tbody>\n                              </table>\n                          </div>\n                          \n                          <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                              <localize key=\"modal.button.add\"></localize>\n                          </i>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Directive } from \"@angular/core\";\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from \"@angular/forms\";\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator(): ValidatorFn {\n    return (c: AbstractControl) => {\n        if (c.value) {\n            let isValid = c.value.indexOf(\" \") === -1;\n\n            if (isValid) {\n                return null;\n            } else {\n                return {\n                    geoObjectAttributeCode: {\n                        valid: false\n                    }\n                };\n            }\n        }\n    };\n}\n\n@Directive({\n    selector: \"[geoObjectAttributeCode][ngModel]\",\n    providers: [\n        // eslint-disable-next-line no-use-before-define\n        { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n    ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n\n    validator: ValidatorFn;\n\n    constructor() {\n        this.validator = validateGeoObjectAttributeCodeValidator();\n    }\n\n    validate(c: FormControl) {\n        return this.validator(c);\n    }\n\n}\n","import { Component, OnDestroy, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { TreeComponent, TreeNode } from \"@circlon/angular-tree-component\";\nimport { ContextMenuComponent, ContextMenuService } from \"ngx-contextmenu\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { Classification, ClassificationNode } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { PageResult } from \"@shared/model/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { timeout } from \"d3\";\n\nconst PAGE_SIZE: number = 100;\n\n// eslint-disable-next-line no-unused-vars\nenum NodeType {\n    // eslint-disable-next-line no-unused-vars\n    CLASSIFICATION = 0, LINK = 1\n}\n\nclass ClassificationTreeNode {\n\n    name: string;\n    code: string;\n    type: NodeType;\n    classification?: Classification;\n    hasChildren: boolean;\n    children?: ClassificationTreeNode[];\n    parent?: ClassificationTreeNode;\n    pageNumber?: number;\n\n}\n\n@Component({\n    selector: \"classification-field-modal\",\n    templateUrl: \"./classification-field-modal.component.html\",\n    styleUrls: []\n})\nexport class ClassificationFieldModalComponent implements OnDestroy {\n\n    message: string = null;\n\n    classificationType: string = null;\n    rootCode: string = null;\n\n    disabled: boolean = false;\n\n    select: Subject<Classification> = new Subject<Classification>();\n\n    nodes: ClassificationTreeNode[] = [];\n\n    /*\n     * Tree component\n     */\n    @ViewChild(TreeComponent)\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    options = {\n        idField: \"code\",\n        getChildren: (node: TreeNode) => {\n            return this.getChildren(node);\n        },\n        actionMapping: {\n            mouse: {\n                click: (tree: TreeComponent, node: TreeNode, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: TreeNode, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                }\n            }\n        },\n        allowDrag: false,\n        allowDrop: false,\n        animateExpand: true,\n        scrollOnActivate: true,\n        animateSpeed: 2,\n        animateAcceleration: 1.01\n    }\n\n    constructor(\n        private bsModalRef: BsModalRef,\n        private contextMenuService: ContextMenuService,\n        private service: ClassificationService\n    ) { }\n\n    init(classificationType: string, rootCode: string, disabled: boolean, value: { code: string }, observer: Observer<Classification>): Subscription {\n        this.classificationType = classificationType;\n        this.rootCode = rootCode;\n        this.disabled = disabled;\n\n        if (value != null) {\n            this.service.getAncestorTree(this.classificationType, this.rootCode, value.code, PAGE_SIZE).then(ancestor => {\n                this.nodes = [this.build(null, ancestor)];\n\n                timeout(() => {\n                    const node: TreeNode = this.tree.treeModel.getNodeById(value.code);\n\n                    if (node != null) {\n                        node.setActiveAndVisible();\n                    }\n                }, 100);\n            });\n        } else if (this.rootCode != null) {\n            this.service.get(this.classificationType, this.rootCode).then(classification => {\n                this.nodes = [{\n                    code: classification.code,\n                    name: classification.displayLabel.localizedValue,\n                    type: NodeType.CLASSIFICATION,\n                    classification: classification,\n                    hasChildren: true\n                }];\n            });\n        } else {\n            this.getChildren(null).then(nodes => {\n                this.nodes = nodes;\n            });\n        }\n\n        return this.select.subscribe(observer);\n    }\n\n    ngOnDestroy(): void {\n        this.select.unsubscribe();\n    }\n\n    getChildren(treeNode: TreeNode): Promise<ClassificationTreeNode[]> {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        const code = node != null ? node.classification.code : null;\n\n        return this.service.getChildren(this.classificationType, code, 1, PAGE_SIZE).then(page => {\n            const nodes = this.createNodes(node, page);\n\n            if (node != null) {\n                if (node.children == null) {\n                    node.children = [];\n                }\n\n                node.children.concat(nodes);\n            }\n\n            return nodes;\n        }).catch(ex => {\n            return [];\n        });\n    }\n\n    build(parent: ClassificationTreeNode, cNode: ClassificationNode): ClassificationTreeNode {\n        const node: ClassificationTreeNode = {\n            code: cNode.classification.code,\n            name: cNode.classification.displayLabel.localizedValue,\n            type: NodeType.CLASSIFICATION,\n            classification: cNode.classification,\n            hasChildren: true\n        };\n\n        if (cNode.children != null) {\n            const nodes: ClassificationTreeNode[] = cNode.children.resultSet.map(child => this.build(parent, child));\n\n            const page = cNode.children;\n\n            // Add page node if needed\n            if (page.count > page.pageNumber * page.pageSize) {\n                nodes.push({\n                    code: \"...\",\n                    name: \"...\",\n                    type: NodeType.LINK,\n                    hasChildren: false,\n                    pageNumber: page.pageNumber + 1,\n                    parent: parent\n                } as ClassificationTreeNode);\n            }\n\n            node.children = nodes;\n        }\n\n        return node;\n    }\n\n    createNodes(parent: ClassificationTreeNode, page: PageResult<Classification>): ClassificationTreeNode[] {\n        const nodes = page.resultSet.map(child => {\n            return {\n                code: child.code,\n                name: child.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: child,\n                hasChildren: true\n            } as ClassificationTreeNode;\n        });\n\n        // Add page node if needed\n        if (page.count > page.pageNumber * page.pageSize) {\n            nodes.push({\n                code: \"...\",\n                name: \"...\",\n                type: NodeType.LINK,\n                hasChildren: false,\n                pageNumber: page.pageNumber + 1,\n                parent: parent\n            } as ClassificationTreeNode);\n        }\n\n        return nodes;\n    }\n\n    handleOnMenu(node: TreeNode, $event: any): void {\n        if (!this.disabled) {\n            this.contextMenuService.show.next({\n                contextMenu: this.nodeMenuComponent,\n                event: $event,\n                item: node\n            });\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n    }\n\n    treeNodeOnClick(treeNode: TreeNode, $event: any): void {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        if (node != null && node.type === NodeType.LINK) {\n            if (treeNode.parent != null) {\n                const parentNode: ClassificationTreeNode = treeNode.parent.data;\n                const code = parentNode.classification.code;\n                const pageNumber = node.pageNumber;\n\n                this.service.getChildren(this.classificationType, code, pageNumber, PAGE_SIZE).then(page => {\n                    const nodes = this.createNodes(parentNode, page);\n\n                    parentNode.children = parentNode.children.filter(node => node.code !== \"...\");\n                    parentNode.children = parentNode.children.concat(nodes);\n\n                    this.tree.treeModel.update();\n                }).catch(ex => {\n                });\n            }\n        } else {\n            if (treeNode.isExpanded) {\n                treeNode.collapse();\n            } else {\n                treeNode.expand();\n            }\n\n            treeNode.setActiveAndVisible();\n        }\n    }\n\n    onSelect(treeNode: TreeNode): void {\n        const node: ClassificationTreeNode = treeNode != null ? treeNode.data : null;\n\n        if (node.type === NodeType.CLASSIFICATION) {\n            this.select.next(node.classification);\n\n            this.bsModalRef.hide();\n        }\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<context-menu #nodeMenu menuClass=\"top-level\">\n    <ng-template contextMenuItem let-item (execute)=\"onSelect($event.item)\">\n        Select\n    </ng-template>\n</context-menu>\n\n<div class=\"modal-body\">\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <tree-root #tree [options]=\"options\" [nodes]=\"nodes\"></tree-root>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"button-holder\">\n                    <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                        <localize key=\"io.back\"></localize>\n                    </button>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from \"@angular/core\";\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { AttributeTermType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\n@Component({\n    selector: \"term-option-widget\",\n    templateUrl: \"./term-option-widget.component.html\",\n    styleUrls: [\"./term-option-widget.css\"],\n    animations: [\n        trigger(\"toggleInputs\", [\n            state(\"none, void\",\n                style({ opacity: 0 })\n            ),\n            state(\"show\",\n                style({ opacity: 1 })\n            ),\n            transition(\"none => show\", animate(\"300ms\")),\n            transition(\"show => none\", animate(\"100ms\"))\n        ]),\n        trigger(\"openClose\",\n            [\n                transition(\n                    \":enter\", [\n                        style({ opacity: 0 }),\n                        animate(\"500ms\", style({ opacity: 1 }))\n                    ]\n                ),\n                transition(\n                    \":leave\", [\n                        style({ opacity: 1 }),\n                        animate(\"0ms\", style({ opacity: 0 }))\n\n                    ]\n                )]\n        )\n    ]\n})\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() attribute: AttributeTermType = null;\n\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    state: string = \"none\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef) { }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = \"show\";\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n\n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n\n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageTermOption, attribute: this.attribute, termOption: \"\" });\n    }\n\n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\n\nimport { HierarchyType } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { SvgHierarchyNode } from \"./svg-hierarchy-node\";\nimport { calculateTextWidth } from \"./svg-util\";\nimport { INHERITED_NODE_BANNER_COLOR, DEFAULT_NODE_BANNER_COLOR, RELATED_NODE_BANNER_COLOR, DEFAULT_NODE_FILL, INHERITED_NODE_FILL, HierarchyComponent, TREE_SCALE_FACTOR_X, TREE_SCALE_FACTOR_Y } from \"../hierarchy.component\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { BsModalService } from \"ngx-bootstrap/modal\";\n\nexport class SvgHierarchyType {\n\n    public static gotRectW: number = 150;\n    public static gotRectH: number = 25;\n    public static gotBodyFontSize: number = 8;\n    public static gotOptionsButtonFontSize: number = 12;\n\n    public static gotHeaderW: number = 150;\n    public static gotHeaderH: number = 14;\n    public static gotHeaderFontSize: number = 8;\n\n    public static MOUSE_HOVER_EVENT_ENTER = \"mouseenter\";\n\n    public static MOUSE_HOVER_EVENT_MOVE = \"mousemove\";\n\n    public static MOUSE_HOVER_EVENT_EXIT = \"mouseleave\";\n\n    hierarchyComponent: HierarchyComponent;\n\n    hierarchyType: HierarchyType;\n\n    svgEl: any;\n\n    d3Hierarchy: any;\n\n    d3Tree: any;\n\n    isPrimary: boolean;\n\n    tooltip: any;\n\n    public constructor(hierarchyComponent: HierarchyComponent, svgEl: any, ht: HierarchyType, isPrimary: boolean, public localizationService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        const hierarchyType = ht;\n\n        this.hierarchyComponent = hierarchyComponent;\n        this.hierarchyType = hierarchyType;\n        this.svgEl = svgEl;\n\n        this.d3Hierarchy = d3.hierarchy(hierarchyType.rootGeoObjectTypes[0]);\n        this.isPrimary = isPrimary;\n\n        this.d3Tree = d3.tree().nodeSize([SvgHierarchyType.gotRectW * TREE_SCALE_FACTOR_X, (SvgHierarchyType.gotRectH + SvgHierarchyType.gotHeaderH) * TREE_SCALE_FACTOR_Y]).separation((a, b) => 0.8)(this.d3Hierarchy);\n    }\n\n    public getD3Tree() {\n        return this.d3Tree;\n    }\n\n    public getCode(): string {\n        return this.hierarchyType.code;\n    }\n\n    public getNodeByCode(gotCode: string): SvgHierarchyNode {\n        let treeNode = this.getD3Tree().find((node) => { return node.data.geoObjectType === gotCode; });\n\n        if (treeNode == null) {\n            return null;\n        }\n\n        return new SvgHierarchyNode(this.hierarchyComponent, this, this.hierarchyComponent.findGeoObjectTypeByCode(gotCode), treeNode, this.localizationService, this.modalService, this.authService);\n    }\n\n    public renderHierarchyHeader(hg: any, colHeaderLabel: string) {\n        let bbox = hg.node().getBBox();\n\n        let colHeader = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        let headerg = hg.append(\"g\").classed(\"g-hierarchy-header\", true);\n\n        const headerFontSize: number = 10;\n        const iconWidth: number = 20;\n        const maxHierarchyLabelLength = 200;\n\n        let hierarchyLabelW: number = calculateTextWidth(this.hierarchyType.label.localizedValue, headerFontSize);\n        let hierarchyLabelH:number = headerFontSize * 2;\n        let hierarchyLabelY:number = bbox.y + headerFontSize * 1.6;\n        if (hierarchyLabelW > maxHierarchyLabelLength) {\n            hierarchyLabelW = maxHierarchyLabelLength;\n            hierarchyLabelH = headerFontSize * 3;\n            hierarchyLabelY = bbox.y + headerFontSize;\n        }\n\n        let lineWidth = bbox.width;\n        let textWidth = hierarchyLabelW + iconWidth;\n\n        if (textWidth > lineWidth) {\n            lineWidth = textWidth;\n        }\n\n        // Hierarchy icon (font awesome)\n        headerg.append(\"text\").classed(\"hierarchy-header-icon\", true)\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .style(\"font-family\", \"FontAwesome\")\n            .attr(\"fill\", \"grey\")\n            .attr(\"font-size\", 12)\n            .text(\"\\uf0e8\");\n\n        // Hierarchy display label\n        colHeader.append(\"foreignObject\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"x\", bbox.x + iconWidth)\n            .attr(\"y\", hierarchyLabelY)\n            .attr(\"width\", hierarchyLabelW)\n            .attr(\"height\", hierarchyLabelH)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"gray\")\n            // .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => this.hierarchyType.label.localizedValue);\n\n        // Line underneath the header\n        headerg.append(\"line\").classed(\"hierarchy-header-line\", true)\n            .attr(\"x1\", bbox.x)\n            .attr(\"y1\", bbox.y + headerFontSize)\n            .attr(\"x2\", bbox.x + lineWidth)\n            .attr(\"y2\", bbox.y + headerFontSize)\n            .attr(\"stroke\", \"grey\")\n            .attr(\"stroke-width\", .5);\n\n        let headerGBbox = headerg.node().getBBox();\n        headerg.attr(\"transform\", \"translate(0 -\" + headerGBbox.height + \")\");\n\n        // Col header label\n        colHeader.append(\"text\").classed(\"hierarchy-header-label\", true)\n            .attr(\"font-size\", headerFontSize + 2)\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"fill\", \"grey\")\n            .attr(\"x\", bbox.x)\n            .attr(\"y\", bbox.y)\n            .text(colHeaderLabel);\n\n        colHeader.attr(\"transform\", \"translate(0 -\" + headerGBbox.height * 2.5 + \")\");\n\n        return headerg;\n    }\n\n    getRelatedHierarchies(gotCode: string): string[] {\n        let got: GeoObjectType = this.hierarchyComponent.findGeoObjectTypeByCode(gotCode);\n\n        if (got.relatedHierarchies == null) {\n            got.relatedHierarchies = this.hierarchyComponent.calculateRelatedHierarchies(got);\n        }\n\n        let relatedHiers: string[] = got.relatedHierarchies;\n\n        let index = null;\n        for (let i = 0; i < relatedHiers.length; ++i) {\n            if (relatedHiers[i] === this.getCode()) {\n                index = i;\n            }\n        }\n\n        if (index != null) {\n            relatedHiers.splice(index, 1);\n        }\n\n        return relatedHiers;\n    }\n\n    private nodeMouseover(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 1);\n    }\n\n    private nodeMousemove(event: any, element: any, data:any) {\n        d3.select(\"#hierarchyLabel\").html(this.hierarchyType.label.localizedValue);\n        d3.select(\"#hierarchyCodeLabel\").html(this.hierarchyType.code);\n\n        d3.select(\"#geoObjectTypeLabel\").html(data.data.label);\n        d3.select(\"#geoObjectTypeCodeLabel\").html(data.data.geoObjectType);\n\n        d3.select(\"#hierarchyOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyType.organizationCode).label.localizedValue);\n        d3.select(\"#geoObjectTypeOrganizationLabel\").html(this.hierarchyComponent.findOrganizationByCode(this.hierarchyComponent.findGeoObjectTypeByCode(data.data.geoObjectType).organizationCode).label.localizedValue);\n\n        let nodeTooltip: any = d3.select(\"#NodeTooltip\").node();\n        let nodeTooltipBbox: DOMRect = nodeTooltip.getBoundingClientRect();\n\n        let pos = { x: event.pageX, y: event.pageY };\n        const yPointerOffset: number = 50;\n        const xPointerOffset: number = 0;\n\n    // If overflow off bottom of page\n        if ((event.pageY + nodeTooltipBbox.height + yPointerOffset) > document.documentElement.scrollHeight) {\n      // render above mouse pointer\n            pos.y = event.pageY - nodeTooltipBbox.height - yPointerOffset;\n        }\n\n    // If overflow off right side of page\n        if ((event.pageX + nodeTooltipBbox.width + xPointerOffset) > document.documentElement.scrollWidth) {\n      // render to the left of the mouse pointer\n            pos.x = event.pageX - nodeTooltipBbox.width - xPointerOffset;\n        }\n\n        d3.select(\"#NodeTooltip\")\n            .style(\"left\", pos.x + \"px\")\n            .style(\"top\", pos.y + \"px\");\n    }\n\n    private nodeMouseleave(d: any, element: any, data:any) {\n        d3.select(\"#NodeTooltip\")\n            .style(\"opacity\", 0)\n            .style(\"left\", \"-10000px\")\n            .style(\"top\", \"-10000px\");\n    }\n\n    public render() {\n        let that = this;\n        let descends: any = this.d3Tree.descendants();\n\n        d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").remove();\n        if (this.isPrimary) {\n            d3.select(\".g-hierarchy[data-primary=\\\"true\\\"]\").remove();\n        }\n\n        let hg = this.svgEl.insert(\"g\", \".g-hierarchy\").classed(\"g-hierarchy\", true).attr(\"data-code\", this.hierarchyType.code).attr(\"data-primary\", this.isPrimary);\n        hg.attr(\"font-family\", \"sans-serif\");\n\n        let gtree = hg.append(\"g\").classed(\"g-hierarchy-tree\", true).attr(\"data-code\", this.hierarchyType.code);\n\n        // Edge\n        gtree.append(\"g\").classed(\"g-got-edge\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-width\", 1.5)\n            .selectAll(\"path\")\n            .data(this.d3Tree.links())\n            .join(\"path\")\n            // .attr(\"d\", d3.linkVertical().x(function(d:any) { return d.x; }).y(function(d:any) { return d.y; })); // draws edges as curved lines\n            .attr(\"d\", (d: any, i) => { // draws edges as square bracket lines\n                return \"M\" + d.source.x + \",\" + (d.source.y) +\n                    \"V\" + ((d.source.y + d.target.y) / 2) +\n                    \"H\" + d.target.x +\n                    \"V\" + (d.target.y);\n            });\n\n        // Header on square which denotes which hierarchy it's a part of\n        let gHeader = gtree.append(\"g\").classed(\"g-got-header\", true);\n        gHeader.selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"rx\", 3)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) =>\n                d.data.inheritedHierarchyCode != null\n            )\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Write the name of the hierarchy on the header\n        gHeader.selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-header-rect\", true)\n            .attr(\"x\", (d: any) =>\n                d.x - (SvgHierarchyType.gotHeaderW / 2)\n            )\n            .attr(\"y\", (d: any) => d.y - SvgHierarchyType.gotRectH / 2 - SvgHierarchyType.gotHeaderH + 4)\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-weight\", \"bold\")\n            .attr(\"font-size\", SvgHierarchyType.gotHeaderFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .attr(\"width\", SvgHierarchyType.gotHeaderW)\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"fill\", \"white\")\n            .attr(\"height\", SvgHierarchyType.gotHeaderH - 4)\n            .style(\"text-align\", \"center\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"color\", \"white\")\n            .style(\"height\", (SvgHierarchyType.gotHeaderH - 4) + \"px\")\n            .style(\"width\", SvgHierarchyType.gotHeaderW + \"px\")\n            .html(function(d: any) {\n                let name = d.data.inheritedHierarchyCode != null ? that.hierarchyComponent.findHierarchyByCode(d.data.inheritedHierarchyCode).label.localizedValue : that.hierarchyType.label.localizedValue;\n                // eslint-disable-next-line no-unused-expressions\n                calculateTextWidth(name, SvgHierarchyType.gotHeaderFontSize) > (SvgHierarchyType.gotHeaderW - 5) ? name = name.substring(0, 34) + \"...\" : true;\n                return name;\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // GeoObjectType Body Square\n        gtree.append(\"g\").classed(\"g-got\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType !== \"GhostNode\"; })\n            .classed(\"svg-got-body-rect\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"fill\", (d: any) => d.data.inheritedHierarchyCode != null ? INHERITED_NODE_FILL : DEFAULT_NODE_FILL)\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"rx\", 3)\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .each(function(d: any) {\n                if (d.data.geoObjectType !== \"GhostNode\") {\n                    if (d.data.activeDropZones) {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH * 2, width: SvgHierarchyType.gotRectW * 2 + 100, height: SvgHierarchyType.gotRectH * 4 };\n                    } else {\n                        d.data.dropZoneBbox = { x: d.x - SvgHierarchyType.gotRectW / 2, y: d.y - SvgHierarchyType.gotRectH / 2, width: SvgHierarchyType.gotRectW, height: SvgHierarchyType.gotRectH };\n                    }\n                }\n            })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        // Arrows on Edges\n        const arrowRectD = { height: 7, width: 10 };\n        let gArrow = gtree.append(\"g\").classed(\"g-got-connector-arrow\", true);\n        gArrow.selectAll(\"rect\").data(this.d3Tree.links()).join(\"rect\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-rect\", true)\n            .attr(\"x\", (d: any) => d.source.x - arrowRectD.width / 2)\n            .attr(\"y\", (d: any) => d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", (d: any) => this.isPrimary ? (d.source.data.inheritedHierarchyCode != null ? INHERITED_NODE_BANNER_COLOR : DEFAULT_NODE_BANNER_COLOR) : RELATED_NODE_BANNER_COLOR);\n        gArrow.selectAll(\"path\").data(this.d3Tree.links()).join(\"path\") // .filter(function(d:any){return d.data.geoObjectType !== \"GhostNode\";})\n            .classed(\"got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", (d: any) => \"M\" + (d.source.x - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (d.source.x) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 - arrowRectD.height / 2 + (arrowRectD.height / 3)) +\n                \"L\" + (d.source.x - arrowRectD.width / 2 + (arrowRectD.width / 3)) + \",\" + (d.source.y + SvgHierarchyType.gotRectH / 2 + arrowRectD.height / 2 - arrowRectD.height / 3)\n            );\n\n        // Ghost Drop Zone (Sibling) Backer\n        gtree.append(\"g\").classed(\"g-sibling-ghost-backer\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-backer-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"white\");\n\n        // Ghost Drop Zone (Sibling) Body Rectangle\n        gtree.append(\"g\").classed(\"g-sibling-ghost-body\", true)\n            .selectAll(\"rect\")\n            .data(descends)\n            .join(\"rect\")\n            .filter(function(d: any) { return d.data.geoObjectType === \"GhostNode\"; })\n            .classed(\"svg-sibling-ghost-body-dz\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2))\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2))\n            .attr(\"width\", SvgHierarchyType.gotRectW)\n            .attr(\"height\", SvgHierarchyType.gotRectH)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#6BA542\")\n            .attr(\"stroke-width\", \"1\")\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType);\n\n        // GeoObjectType label\n        gtree.append(\"g\").classed(\"g-got-codelabel\", true)\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", SvgHierarchyType.gotBodyFontSize)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-width\", 3)\n            .selectAll(\"foreignObject\")\n            .data(descends)\n            .join(\"foreignObject\")\n            .classed(\"svg-got-label-text\", true)\n            .attr(\"x\", (d: any) => d.x - (SvgHierarchyType.gotRectW / 2) + 5)\n            .attr(\"y\", (d: any) => d.y - (SvgHierarchyType.gotRectH / 2) + 2)\n            .attr(\"width\", SvgHierarchyType.gotRectW - 32 + 5)\n            .attr(\"height\", SvgHierarchyType.gotRectH - 4)\n            // .filter(function(d: any) {\n            //     return calculateTextWidth(d.data.label, 10) > SvgHierarchyType.gotRectW - 32 + 5;\n            // })\n            // .style(\"height\", SvgHierarchyType.gotRectH + 20 + \"px\")\n            .attr(\"cursor\", (d: any) => this.isPrimary ? (d.data.inheritedHierarchyCode != null ? null : \"grab\") : null)\n            .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n            .attr(\"data-inherited\", (d: any) => d.data.inheritedHierarchyCode != null)\n            .append(\"xhtml:p\")\n            .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n            .attr(\"text-anchor\", \"start\")\n            .attr(\"text-align\", \"left\")\n            .style(\"vertical-align\", \"middle\")\n            .style(\"display\", \"table-cell\")\n            .style(\"width\", SvgHierarchyType.gotRectW - 32 + 5 + \"px\")\n            .style(\"height\", SvgHierarchyType.gotRectH - 4 + \"px\")\n            .html((d: any) => d.data.label)\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_ENTER, function(event: any, data: any) { that.nodeMouseover(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_MOVE, function(event: any, data: any) { that.nodeMousemove(event, this, data); })\n            .on(SvgHierarchyType.MOUSE_HOVER_EVENT_EXIT, function(event: any, data: any) { that.nodeMouseleave(event, this, data); });\n\n        let headerg;\n        if (this.isPrimary) {\n            gtree.append(\"g\").classed(\"g-got-relatedhiers-button\", true)\n                .selectAll(\"text\")\n                .data(descends)\n                .join(\"text\")\n                .filter(function(d: any) {\n                    return (d.data.geoObjectType === \"GhostNode\" ? false : true) && d.data.inheritedHierarchyCode == null;\n                })\n                .classed(\"svg-got-relatedhiers-button\", true)\n                .attr(\"data-gotCode\", (d: any) => d.data.geoObjectType)\n                .attr(\"x\", (d: any) => d.x + (SvgHierarchyType.gotRectW / 2) - (SvgHierarchyType.gotOptionsButtonFontSize) - 3)\n                .attr(\"y\", (d: any) => d.y + (SvgHierarchyType.gotOptionsButtonFontSize * 0.8) - SvgHierarchyType.gotOptionsButtonFontSize / 2)\n                .style(\"font-family\", \"FontAwesome\")\n                .style(\"cursor\", \"pointer\")\n                .style(\"fill\", \"#767676\")\n                .style(\"font-size\", SvgHierarchyType.gotOptionsButtonFontSize + \"px\")\n                .text(\"\\uf013\")\n                .on(\"click\", function(event, node) { that.getNodeByCode(node.data.geoObjectType).renderRelatedHierarchiesMenu(); });\n\n            headerg = this.renderHierarchyHeader(hg, \"Selected Hierarchy\");\n        } else {\n            headerg = this.renderHierarchyHeader(hg, \"Related Hierarchy\");\n        }\n\n\n        // let paddingTop = (headerg.node().getBBox().height + 20);\n        // gtree.attr(\"transform\", \"translate(0 \" + paddingTop + \")\");\n    }\n}\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '@shared/service';\nimport { ErrorHandler, SuccessModalComponent, ConfirmModalComponent } from '@shared/component';\n\nimport { ImportConfiguration } from '@registry/model/io';\n\nimport { IOService } from '@registry/service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n            this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" property=\"type\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a> \n          <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> \n          <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> \n          <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span>\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '@registry/model/io';\nimport { IOService } from '@registry/service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm(this.problem.parentCode, action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"data-page\",\n    templateUrl: \"./data-page.component.html\",\n    styleUrls: [\"./data-page.css\"]\n})\nexport class DataPageComponent implements OnInit {\n\n    content: string = \"SPREADSHEET\";\n    pageTitle: string;\n    bsModalRef: BsModalRef;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n    }\n\n    ngOnInit(): void {\n    }\n\n    renderContent(content: string): void {\n        this.content = content;\n\n        if (content === \"SPREADSHEET\") {\n            this.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n        } else if (content === \"SHAPEFILE\") {\n            this.pageTitle = this.localizationService.decode(\"shapefile.title\");\n        } else if (content === \"EXPORT\") {\n            this.pageTitle = this.localizationService.decode(\"io.export.title\");\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">\n                      <localize key=\"import-spreadsheet-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">\n                      <localize key=\"import-shapefile-localization-manager.menu\"></localize>\n                    </a> \n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SPREADSHEET'\" [format]=\"'EXCEL'\"></dataimporter>\n\t\t\t\t\t<dataimporter *ngIf=\"content === 'SHAPEFILE'\" [format]=\"'SHAPEFILE'\"></dataimporter>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, Input, ViewChild, ViewChildren, ElementRef, QueryList, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService, EventService, ExternalSystemService } from \"@shared/service\";\nimport { HierarchyService, IOService } from \"@registry/service\";\nimport { ExternalSystem } from \"@shared/model/core\";\n\nimport { SpreadsheetModalComponent } from \"./modals/spreadsheet-modal.component\";\nimport { ShapefileModalComponent } from \"./modals/shapefile-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"dataimporter\",\n    templateUrl: \"./dataimporter.component.html\",\n    styleUrls: [\"./dataimporter.css\"]\n})\nexport class DataImporterComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray:QueryList<DateFieldComponent>;\n\n    currentDate : Date = new Date();\n\n    showImportConfig: boolean = false;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Start date\n     */\n    startDate: Date = null;\n\n    /*\n     * End date\n     */\n    endDate: Date | string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string; // Can be SHAPEFILE or EXCEL\n\n    isExternal: boolean = false;\n\n    /*\n     * List of available external systems (filtered based on user's org)\n     */\n    externalSystems: ExternalSystem[];\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    isLoading: boolean = true;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService,\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private authService: AuthService,\n        private sysService: ExternalSystemService,\n        private hierarchyService: HierarchyService,\n        private changeDetectorRef: ChangeDetectorRef\n    ) { }\n\n    ngOnInit(): void {\n        this.sysService.getExternalSystems(1, 100).then(paginatedSystems => {\n            this.externalSystems = paginatedSystems.resultSet;\n\n            if (this.externalSystems.length === 0) {\n                this.isExternal = false;\n                this.showImportConfig = true; // Show the upload widget if there are no external systems registered\n            }\n\n            this.isLoading = false;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = registry.contextPath + \"/excel/get-configuration\";\n        if (this.format === \"SHAPEFILE\") {\n            getUrl = registry.contextPath + \"/shapefile/get-shapefile-configuration\";\n\n            // this.showImportConfig = true; // show the upload widget if shapefile because external system from shapefile isn't supported\n        }\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.typeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.startDate != null) {\n                form.append(\"startDate\", this.startDate);\n            }\n            if (this.endDate != null) {\n                form.append(\"endDate\", this.endDate);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.isExternal = this.isExternal;\n            configuration.hierarchy = this.hierarchyCode;\n\n            let externalSystem: ExternalSystem = null;\n            for (let i = 0; i < this.externalSystems.length; ++i) {\n                let sys: ExternalSystem = this.externalSystems[i];\n\n                if (sys.oid === this.externalSystemId) {\n                    externalSystem = sys;\n                }\n            }\n\n            configuration.externalSystemId = this.externalSystemId;\n            configuration.externalSystem = externalSystem;\n\n            if (this.format === \"SHAPEFILE\") {\n                this.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true, ignoreBackdropClick: true });\n                this.bsModalRef.content.configuration = configuration;\n            } else {\n                this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n                this.bsModalRef.content.init(configuration);\n            }\n\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n\n        this.checkDates();\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    setImportSource(event, type): void {\n        if (type === \"EXTERNAL\") {\n            this.isExternal = true;\n        } else {\n            this.isExternal = false;\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n//    setInfinity(endDate: any): void {\n//\n//        if(endDate === PRESENT){\n//            this.endDate = null;\n//        }\n//        else{\n//            this.endDate = PRESENT;\n//        }\n//    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = this.checkDateFieldValidity();\n        }, 0);\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        let startDateField: DateFieldComponent;\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n\n            if (field.inputName === \"startDate\") {\n                // set startDateField so we can use it in the next check\n                startDateField = field;\n            }\n\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        if (this.startDate > this.endDate) {\n            startDateField.setInvalid(this.localizationService.decode(\"date.input.startdate.after.enddate.error.message\"));\n\n            this.changeDetectorRef.detectChanges();\n        }\n\n        return true;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<div *ngIf=\"!isLoading && !showImportConfig && externalSystems.length > 0\">\n  <div>\n    <div class=\"row\">\n\n        <div class=\"col-xs-1\"></div>\n        <div class=\"col-xs-9 radio-btn-wrapper\">\n\n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"true\" [checked]=\"!isExternal\" (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : !isExternal}\">\n                    <localize key=\"importer.import.from-file.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-file.description\"></localize>\n                </p>\n            </label>\n            \n            <label class=\"radio\">\n                <input type=\"checkbox\" [value]=\"false\" [checked]=\"isExternal\" (change)=\"setImportSource($event, 'EXTERNAL')\" name=\"import-source\">\n                <span [ngClass]=\"{'active' : isExternal}\">\n                    <localize key=\"importer.import.from-external.label\"></localize>\n                </span>\n                <p class=\"radio-label-description\">\n                    <localize key=\"importer.import.from-external.description\"></localize>\n                </p>\n            </label>\n\n            <div class=\"button-holder\">\n                <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                    <localize key=\"io.next\"></localize>\n                </button>\n            </div>\n        </div>\n        <div class=\"col-xs-2\"></div>\n\t  </div>\n  </div>\n</div>\n\n<div *ngIf=\"!isLoading && isExternal !== null && showImportConfig\">\n    <div >\n        <form #form=\"ngForm\" autocomplete=\"off\">\n            <div *ngIf=\"isExternal\" class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"externalSystem\">\n                    <localize key=\"io.import.externalSystems\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"externalSystem\" name=\"externalSystem\" class=\"select-area\" [(ngModel)]=\"externalSystemId\" required>\n                        <option *ngFor=\"let externalSystem of externalSystems\" value={{externalSystem.oid}}>{{externalSystem.label.localizedValue}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                <label class=\"col-md-2 text-right\" for=\"hierarchyCode\"> <localize key=\"io.modal.hierarchy\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\" [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                        <option></option>\n                        <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>{{view.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                <label class=\"col-md-2 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n                <div class=\"col-md-8\">\n                    <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\" (change)=\"onSelectType()\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>{{type.super ? type.super.label + \" : \" + type.label : type.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"strategy\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"spreadsheet.import.import.strategy\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"shapefile.import.import.strategy\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" (change)=\"checkDates()\" required>\n                        <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"startDate\" label=\"\" [inputName]=\"'startDate'\" (change)=\"checkDates()\" [allowFutureDates]=\"true\"></date-field>\n                </div>\n                \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"endDate\"><localize key=\"io.endDate\"></localize></label>\n                <div class=\"col-md-8\">\n                  <date-field #dateFieldComponents [(value)]=\"endDate\" label=\"\" [inputName]=\"'endDate'\" (change)=\"checkDates()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" ></date-field>\n                </div>\n                                      \n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                \n                <label class=\"col-md-2 text-right\" for=\"copyBlank\"><localize key=\"dataimporter.importblankcells\"></localize></label>\n                <div class=\"col-md-8\">\n                   <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n            <div class=\"form-group row\">\n                <label class=\"col-md-2 text-right\" for=\"file\">\n                    <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                    <localize *ngIf=\"this.format === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n                </label>\n                <div class=\"col-md-8\">\n                    <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n                    <input *ngIf=\"this.format === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect\n                        [uploader]=\"uploader\" accept=\".zip\" required />\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n\n            <div class=\"form-group row\">\n                <div class=\"col-md-2\"></div>\n                <div class=\"button-holder col-md-8 text-right\">\n<!--                     <button type=\"submit\" class=\"btn btn-default\" (click)=\"onBack()\"> -->\n<!--                         <localize key=\"io.back\"></localize> -->\n<!--                     </button> -->\n                    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"onClick()\">\n                        <localize key=\"io.submit\"></localize>\n                    </button>\n                </div>\n                <div class=\"col-md-2\"></div>\n            </div>\n        </form>\n    </div>\n</div>\n","import { Component, ViewEncapsulation, ViewChild, ElementRef, Input } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Location } from \"@angular/common\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\n\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\n\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { ActionTypes } from \"@registry/model/constants\";\nimport { GeoObjectOverTime } from \"@registry/model/registry\";\n\nimport { ChangeRequestService, GeometryService } from \"@registry/service\";\nimport { LocalizationService, AuthService, EventService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"request-table\",\n    templateUrl: \"./request-table.component.html\",\n    styleUrls: [\"./request-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class RequestTableComponent {\n\n    today: Date = new Date();\n    todayString: string = this.dateService.getDateString(new Date());\n\n    objectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n    page: any = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    requests: ChangeRequest[] = [];\n\n    actions: AbstractAction[];\n\n    columns: any[] = [];\n\n    @Input() toggleId: string;\n\n    uploadRequest: ChangeRequest;\n\n    filterCriteria: string = \"ALL\";\n\n    sort: any[] = [{ attribute: \"createDate\", ascending: false }];\n\n    hasBaseDropZoneOver: boolean = false;\n\n    // Restrict page to the specified oid\n    oid: string = null;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    isValid: boolean = true;\n\n    isEditing: boolean = false;\n\n    constructor(private service: ChangeRequestService, private geomService: GeometryService, private modalService: BsModalService, private authService: AuthService, private localizationService: LocalizationService,\n        private eventService: EventService, private route: ActivatedRoute, private router: Router, private dateService: DateService, private location: Location) {\n        this.columns = [\n            { name: localizationService.decode(\"change.request.user\"), prop: \"createdBy\", sortable: false },\n            { name: localizationService.decode(\"change.request.createDate\"), prop: \"createDate\", sortable: false, width: 195 },\n            { name: localizationService.decode(\"change.request.status\"), prop: \"approvalStatus\", sortable: false }\n        ];\n    }\n\n    ngOnInit(): void {\n        this.oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.route.paramMap.subscribe(params => {\n            this.oid = params.get(\"oid\");\n            this.refresh();\n        });\n\n        if (this.oid != null) {\n            this.toggleId = this.oid;\n        }\n\n        let getUrl = registry.contextPath + \"/changerequest/upload-file-cr\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"crOid\", this.uploadRequest.oid);\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: any, status: number, headers: any) => {\n            const doc = JSON.parse(response);\n\n            const index = this.requests.findIndex(request => request.oid === doc.requestId);\n\n            if (index !== -1) {\n                this.requests[index].documents.push(doc);\n            }\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n\n        this.refresh();\n    }\n\n    isSorting(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].attribute === attribute;\n    }\n\n    isAscending(attribute: string) {\n        return this.sort.length > 0 && this.sort[0].ascending;\n    }\n\n    onSort(attribute: string) {\n        let index = this.sort.findIndex(item => item.attribute === attribute);\n\n        if (index !== -1) {\n            let item = this.sort[index];\n\n            item.ascending = !item.ascending;\n        } else {\n            this.sort = [{\n                attribute: attribute,\n                ascending: true\n            }];\n        }\n\n        this.refresh();\n    }\n\n    getGOTLabel(action: any): string {\n        if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.displayLabel && action.geoObjectJson.attributes.displayLabel.values &&\n            action.geoObjectJson.attributes.displayLabel.values[0] && action.geoObjectJson.attributes.displayLabel.values[0].value && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues &&\n            action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0] && action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value) {\n            return action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value;\n        } else if (action.geoObjectJson && action.geoObjectJson.attributes && action.geoObjectJson.attributes.code) {\n            return action.geoObjectJson.attributes.code;\n        } else {\n            return this.localizationService.decode(\"geoObject.label\");\n        }\n    }\n\n    setValid(valid: boolean): void {\n        this.isValid = valid;\n    }\n\n    onUpload(request: ChangeRequest): void {\n        this.uploadRequest = request;\n\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onDownloadFile(request: ChangeRequest, fileOid: string): void {\n        window.location.href = registry.contextPath + \"/changerequest/download-file-cr?crOid=\" + request.oid + \"&\" + \"vfOid=\" + fileOid;\n    }\n\n    onDeleteFile(request: ChangeRequest, fileOid: string): void {\n        this.service.deleteFile(request.oid, fileOid).then(() => {\n            const index = request.documents.findIndex(doc => doc.oid === fileOid);\n\n            if (index !== -1) {\n                request.documents.splice(index, 1);\n            }\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    public fileOverBase(e: any): void {\n        this.hasBaseDropZoneOver = e;\n    }\n\n    pageChange(pageNumber: number = 1): void {\n        this.oid = null;\n        this.refresh(pageNumber);\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, pageNumber, this.filterCriteria, this.sort, this.oid).then(requests => {\n            this.page = requests;\n            this.requests = requests.resultSet;\n\n            // Copying the Geo-Object to add consistency for template processing\n            this.requests.forEach((req) => {\n                if (!req.current.geoObject) {\n                    for (let i = 0; i < req.actions.length; i++) {\n                        if (req.actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                            // This is the state of the Geo-Object as the Registry Contributor configured it.\n                            req.current.geoObject = JSON.parse(JSON.stringify((req.actions[0] as CreateGeoObjectAction).geoObjectJson));\n                        }\n                    }\n                }\n            });\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    onSelect(selected: any): void {\n        // this.request = selected.selected;\n\n        this.geomService.destroy();\n\n        this.service.getAllRequests(this.page.pageSize, 1, \"ALL\", this.sort, this.oid).then(requests => {\n            this.requests = requests.resultSet;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.implementDecisions(changeRequest).then(request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n\n                const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true\n                });\n\n                bsModalRef.content.submitText = this.localizationService.decode(\"change.requests.more.geoobject.updates.submit.btn\");\n                bsModalRef.content.cancelText = this.localizationService.decode(\"change.requests.more.geoobject.updates.cancel.btn\");\n                bsModalRef.content.message = this.localizationService.decode(\"change.requests.more.geoobject.updates.message\");\n\n                bsModalRef.content.onConfirm.subscribe(() => {\n                    const object = this.getFirstGeoObjectInActions(request);\n\n                    if (object != null) {\n                        this.router.navigate([\"/registry/location-manager\"], {\n                            queryParams: { text: object.attributes.code, date: this.todayString, type: object.geoObjectType.code, code: object.attributes.code, uid: object.attributes.uid, pageContext: 'DATA' }\n                        });\n                        // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, object.geoObjectType.code, this.todayString, true]);\n                    } else {\n                        let object = request.current.geoObject;\n                        let type = request.current.geoObjectType;\n\n                        if (object != null && type != null) {\n                            this.router.navigate([\"/registry/location-manager\"], {\n                                queryParams: { text: object.attributes.code, date: this.todayString, type: type.code, code: object.attributes.code, uid: object.attributes.uid, pageContext: 'DATA' }\n                            });\n\n                            // this.router.navigate([\"/registry/location-manager\", object.attributes.uid, type.code, this.todayString, true]);\n                        }\n                    }\n                });\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    onReject(cr: ChangeRequest): void {\n        this.service.rejectChangeRequest(cr).then(() => {\n            // TODO: Determine if there is a way to update an individual record\n            // TODO : cr.statusLabel needs to be updated...\n            /*\n            cr.approvalStatus = \"REJECTED\";\n\n            let len = this.actions.length;\n            for (let i = 0; i < len; ++i) {\n                let action: AbstractAction = this.actions[i];\n\n                action.approvalStatus = \"REJECTED\";\n            }\n            */\n\n            this.refresh();\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    getFirstGeoObjectInActions(request: ChangeRequest): GeoObjectOverTime {\n        for (let i = 0; i < request.actions.length; i++) {\n            let action = request.actions[i];\n\n            // eslint-disable-next-line no-prototype-builtins\n            if (action.hasOwnProperty(\"geoObjectJson\")) {\n                return action[\"geoObjectJson\"];\n            }\n        }\n\n        return null;\n    }\n\n    onDelete(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            bsModalRef.content.type = \"danger\";\n            bsModalRef.content.submitText = this.localizationService.decode(\"change.request.delete.request.confirm.btn\");\n            bsModalRef.content.message = this.localizationService.decode(\"change.request.delete.request.message\");\n\n            bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.delete(changeRequest.oid).then(deletedRequestId => {\n                    let pos = -1;\n                    for (let i = 0; i < this.requests.length; i++) {\n                        let req = this.requests[i];\n                        if (req.oid === deletedRequestId) {\n                            pos = i;\n                            break;\n                        }\n                    }\n\n                    if (pos > -1) {\n                        this.requests.splice(pos, 1);\n                    }\n\n                    this.refresh();\n                }).catch((response: HttpErrorResponse) => {\n                    this.error(response);\n                });\n            });\n        }\n    }\n\n    onUpdate(changeRequest: ChangeRequest): void {\n        if (changeRequest != null) {\n            this.service.update(changeRequest).then(request => {\n                this.refresh();\n\n                this.isEditing = false;\n            }).catch((response: HttpErrorResponse) => {\n                this.error(response);\n            });\n        }\n    }\n\n    applyActionStatusProperties(action: any): void {\n        // var action = JSON.parse(JSON.stringify(this.action));\n        // action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        this.service.setActionStatus(action.oid, action.approvalStatus).then(response => {\n            action.decisionMaker = (action.approvalStatus !== \"PENDING\") ? this.authService.getUsername() : \"\";\n\n            // this.crtable.refresh()\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    requestTrackBy(index: number, request: ChangeRequest) {\n        return request.oid;\n    }\n\n    toggle(event: any, oid: string): void {\n        this.location.replaceState(\"/registry/change-requests/\" + oid);\n\n        if (!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")) {\n            if (this.toggleId === oid) {\n                this.toggleId = null;\n            } else {\n                this.toggleId = oid;\n                //                this.onSelect({ selected: [{ oid: oid }] });\n                this.requests.forEach(req => {\n                    if (req.oid === oid) {\n                        this.actions = req.actions;\n                    }\n                });\n            }\n        }\n    }\n\n    filter(criteria: string): void {\n        this.filterCriteria = criteria;\n\n        this.refresh(1);\n    }\n\n    setActionStatus(action: CreateGeoObjectAction | UpdateAttributeAction, status: string): void {\n        const bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        bsModalRef.content.onConfirm.subscribe(data => {\n            action.approvalStatus = status;\n\n            this.applyActionStatusProperties(action);\n        });\n    }\n\n    getActiveDetailComponent(action: CreateGeoObjectAction | UpdateAttributeAction): any {\n        // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n        if (action.actionType.endsWith(\"CreateGeoObjectAction\") || action.actionType.endsWith(\"UpdateGeoObjectAction\")) {\n            // return this.cuDetail;\n        }\n        //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n        //   {\n        //     return this.arDetail;\n        //   }\n\n        return action;\n    }\n\n    getUsername(): string {\n        return this.authService.getUsername();\n    }\n\n    isRequestTooOld(request: ChangeRequest): boolean {\n        if (request.actions && request.actions.length > 0) {\n            let firstAction = request.actions[0];\n\n            if (firstAction.actionType === ActionTypes.UPDATEGEOOBJECTACTION) {\n                return true;\n            } else if (firstAction.actionType === ActionTypes.CREATEGEOOBJECTACTION && !(firstAction as CreateGeoObjectAction).geoObjectJson.attributes[\"exists\"]) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    }\n\n    onEditAttributes(): void {\n        this.isEditing = !this.isEditing;\n    }\n\n    canEdit(request: ChangeRequest): boolean {\n        return (request.permissions.includes(\"WRITE_DETAILS\") && this.isEditing);\n    }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-12\">\n    <div class=\"form-group button-row\">\n\n      <a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" style=\"border-bottom: 1px solid;\" >\n        <localize key=\"change.request.all.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.pending.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;border-bottom:1px solid;\">\n        <localize key=\"change.request.accepted.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('PARTIAL')\" [ngClass]=\"filterCriteria === 'PARTIAL' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.partial.filter.link\"></localize>\n      </a>\n      <a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;border-bottom:1px solid;\" >\n        <localize key=\"change.request.rejected.filter.link\"></localize>\n      </a>\n\n    </div>\n    <hr style=\"border-top:solid 3px #6BA542\" />\n\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"col-md-12\">\n    <table class=\"table\">\n      <thead>\n        <tr style=\"height: 50px;color: grey;\">\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createdBy')\"><localize key=\"change.request.contributor.label\"></localize></a><i *ngIf=\"isSorting('createdBy')\" [ngClass]=\"isAscending('createdBy') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectTypeLabel')\"><localize key=\"geoObjectType.label\"></localize></a><i *ngIf=\"isSorting('geoObjectTypeLabel')\" [ngClass]=\"isAscending('geoObjectTypeLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('geoObjectLabel')\"><localize key=\"geoObject.label\"></localize></a><i *ngIf=\"isSorting('geoObjectLabel')\" [ngClass]=\"isAscending('geoObjectLabel') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('createDate')\"><localize key=\"change.request.date.contributed.label\"></localize></a><i *ngIf=\"isSorting('createDate')\" [ngClass]=\"isAscending('createDate') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('approvalStatus')\"><localize key=\"change.request.status.label\"></localize></a><i *ngIf=\"isSorting('approvalStatus')\" [ngClass]=\"isAscending('approvalStatus') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <th style=\"vertical-align: middle;\"><a (click)=\"onSort('oid')\"><localize key=\"change.request.id.label\"></localize></a><i *ngIf=\"isSorting('oid')\" [ngClass]=\"isAscending('oid') ? 'fa-arrow-down' : 'fa-arrow-up'\" class=\"fa cr-sort-arrow\"></i></th>\n          <!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <ng-template ngFor let-req [ngForOf]=\"requests | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" [ngForTrackBy]=\"requestTrackBy\">\n        \n          <tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n            <td class=\"col-md-1\">\n              <h5><strong>{{req.createdBy}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObjectType.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.geoObject.label}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align: middle; color:grey;\">\n               <span class=\"date-string-display\">\n                 <date-text [date]=\"req.createDate\"></date-text>\n               </span>\n            </td>\n            <td class=\"col-md-1\">\n              <h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-partial':req.approvalStatus === 'PARTIAL', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n                 <strong>{{req.statusLabel}}</strong>\n              </h5>\n            </td>\n            <td class=\"col-md-2\">\n              <h5><strong>{{req.oid}}</strong></h5>\n            </td>\n            <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:right;padding-right:25px;\">\n              <i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n            </td>\n          </tr>\n          \n          <!-- Action panel only shows when activated with click -->\n          <tr [@fadeInOut] *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\" [ngClass]=\"{'status-pending-container':req.approvalStatus === 'PENDING', 'status-accepted-container':req.approvalStatus === 'ACCEPTED', 'status-partial-container':req.approvalStatus === 'PARTIAL', 'status-rejected-container':req.approvalStatus === 'REJECTED'}\">\n            \n            <td colspan=\"7\">\n              <div class=\"geoobject-panel-header\">\n              \n                    <div>\n                        <h3 style=\"margin-top: 10px;\">{{req.geoObject.label}}</h3>\n                        <h4 style=\"font-style: italic;\">{{req.geoObject.code}}</h4>\n                        \n                        <h4 *ngIf=\"req.type === 'UpdateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.update.geoobject.label\"></localize></h4>\n                        <h4 *ngIf=\"req.type === 'CreateGeoObject'\" style=\"font-style: italic;\"><localize key=\"change.request.type.create.geoobject.label\"></localize></h4>\n                    </div>\n              </div>\n                  \n              <div class=\"row\" style=\"margin:0;background: white;\">\n                <!-- <div class=\"col-md-1\"></div> -->\n                <div class=\"col-md-12\">\n                \n                  <div *ngIf=\"!isRequestTooOld(req) && req.approvalStatus === 'INVALID'\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.invalid\"></localize>\n                  </div>\n                  <div *ngIf=\"isRequestTooOld(req)\" class=\"cr-details-invalid error-message\">\n                    <localize key=\"change.request.tooOld\"></localize>\n                  </div>\n                \n                  <div *ngIf=\"req.permissions.includes('READ_CONTRIBUTOR_NOTES')\" class=\"form-group\" style=\"margin-top:20px;\">\n                     <label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n                     <textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;\" [(ngModel)]=\"req.contributorNotes\" [disabled]=\"!req.permissions.includes('WRITE_DETAILS')\"></textarea>\n                  </div>  \n                  \n                  <div>\n                    <p><localize key=\"change.request.contributor.prefix.label\"></localize>&nbsp;<strong>{{req.createdBy}}</strong></p>\n                    <p><localize key=\"change.request.contributor.email.prefix.label\"></localize>&nbsp;<strong>{{req.email}}</strong></p>\n                    <p><localize key=\"change.request.contributor.phone.prefix.label\"></localize>&nbsp;<strong>{{req.phoneNumber}}</strong></p>\n                  </div>\n  \n                  <div *ngIf=\"req.approvalStatus !== 'INVALID' && !isRequestTooOld(req)\" class=\"cr-details\">\n\t                  <div class=\"action-card\" style=\"margin-bottom:10px; background-color:white;\"> \n\t                    <div class=\"row\" style=\"background: white;\">\n\t                      <div class=\"col-md-12\">\n\t                      \n\t                         <geoobject-shared-attribute-editor *ngIf=\"req\"\n\t                              #attributeEditor\n\t                              [readOnly]=\"!canEdit(req)\"  \n\t                              [geoObjectType]=\"req.current.geoObjectType\"\n                                [postGeoObject]=\"req.type == 'UpdateGeoObject' ? req.current.geoObject : req.actions[0].geoObjectJson\" \n\t                              [changeRequest]=\"req\"\n\t                              [hierarchies]=\"req.type == 'UpdateGeoObject' ? req.current.hierarchies : req.actions[0].parentJson\"\n\t                              [isGeometryInlined]=\"true\"\n                                [isNew]=\"req.type === 'CreateGeoObject'\"\n                                (valid)=\"setValid($event)\">\n\t                         </geoobject-shared-attribute-editor>\n\t                         \n\t                       </div>\n\t                    </div>\n\t  \n\t                    <div class=\"row\" style=\"border-top: 1px grey solid;margin:0;padding: 10px 0;\">\n\t                      <div class=\"col-md-6\" >\n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                          <label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t                          <textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height:90px;max-width:100%;margin:0\" [(ngModel)]=\"req.maintainerNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\"></textarea>\n\t                        </div>  \n\t                        \n\t                        <div *ngIf=\"req.permissions.includes('READ_MAINTAINER_NOTES')\" class=\"form-group\">\n\t                              <label for=\"additionalNotes-{{req.oid}}\"> <localize key=\"change.request.action.detail.additionalNotes\"></localize> </label>\n\t                              <input type=\"text\" id=\"additionalNotes-{{req.oid}}\" class=\"form-control\" style=\"width:100%;\" [(ngModel)]=\"req.additionalNotes\" [disabled]=\"!req.permissions.includes('WRITE_MAINTAINER_NOTES')\">\n\t                        </div>  \n\t                      </div>\n\t                      \n\t                      <div class=\"col-md-6\" >\n\t                        <div>\n\t                          <label><localize key=\"change.request.reference.documents.label\"></localize></label>\n\t                          <div *ngIf=\"req.documents.length > 0\" style=\"border:1px solid #ccc;border-radius: 4px;\">\n\t                            <ul style=\"padding:10px;margin:0;\">\n\t                                <li *ngFor=\"let doc of req.documents\" class=\"list-group-item\" style=\"padding:0;font-size:inherit;\">\n\t                                  <a (click)=\"onDownloadFile(req, doc.oid)\" >{{doc.fileName}}</a>\n\t                                  <i (click)=\"onDeleteFile(req, doc.oid)\" class=\"fa fa-times ico-remove\" style=\"margin-left:10px;\" aria-hidden=\"true\"></i>\n\t                                </li>\n\t                            </ul>\n\t                          </div>\n\t                          <p *ngIf=\"req.documents.length === 0\" style=\"color:grey;font-style:italic;\">\n\t                            <localize key=\"change.request.no.documents.label\"></localize>\n\t                          </p>\n\t                        \n\t                          <div *ngIf=\"req.permissions.includes('WRITE_DOCUMENTS') && isEditing\" style=\"padding:10px 0;\">\n\t                              <!-- Limit file types with: accept=\".xls, .xlsx, .pdf, .doc\" -->\n\t                              <input class=\"ghost-input\" style=\"display:inline-block;padding:0;height:auto;border-radius:0;margin-top:10px;\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" required />\n\t                              \n\t                              <button class=\"btn btn-primary pull-right\" style=\"margin:0;\" (click)=\"onUpload(req)\" [title]=\"'change.request.upload.document.btn.hover' | localize\">\n\t                                <localize key=\"change.request.reference.document.upload\"></localize>\n\t                              </button>\n\t                          </div>\n\t                        </div>\n\t  \n\t                      </div>\n\t                    </div>\n\t                  </div> \n\t  \n\t  \n\t                  <div *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS') || req.permissions.includes('DELETE')\" class=\"button-holder\" style=\"margin-bottom:20px;min-height:40px;\">\n\t                    <span *ngIf=\"req.permissions.includes('WRITE_APPROVAL_STATUS')\">\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\" [title]=\"'change.request.implement.decisions.btn.hover' | localize\">\n\t                        <localize [key]=\"req.type === 'UpdateGeoObject' ? 'change.request.accept.changes.btn' : 'change.request.accept.newGeoObject.btn'\"></localize>\n\t                      </button>\n\t                      <button [disabled]=\"req.approvalStatus !== 'PENDING'\" *ngIf=\"req.type === 'CreateGeoObject'\" type=\"submit\" (click)=\"onReject(req)\" class=\"btn btn-danger\" style=\"margin:0 10px;\" role=\"button\" [title]=\"'change.request.reject.all.btn.hover' | localize\">\n                            <localize key=\"change.request.reject.all.btn\"></localize>\n                          </button>\n\t                    </span>\n\n                        <span *ngIf=\"isValid && req.permissions.includes('WRITE_DETAILS') && req.createdBy === getUsername()\">\n                          <button type=\"submit\" *ngIf=\"!isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                          </button>\n                          <button type=\"submit\" *ngIf=\"isEditing\" (click)=\"onEditAttributes()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                          </button>\n                          <button type=\"submit\" role=\"button\" class=\"btn btn-primary\" *ngIf=\"isEditing\" (click)=\"onUpdate(req)\" [title]=\"'modal.button.update' | localize\" >\n                            <localize key=\"modal.button.update\"></localize>\n                          </button>\n                          \n                          <button type=\"submit\" role=\"button\" class=\"btn btn-danger pull-right\" [disabled]=\"!isEditing\" *ngIf=\"req.permissions.includes('DELETE') && req.createdBy === getUsername()\" (click)=\"onDelete(req)\" [title]=\"'change.request.delete.request.hover' | localize\" >\n                            <localize key=\"change.request.delete.request.btn\"></localize>\n                          </button>\n                        </span>\n\t                  </div>\n                  </div>\n                </div>\n                <!-- <div class=\"col-md-1\"></div> -->\n              </div>\n  \n            </td>\n          </tr> <!-- END Action panel -->\n          \n        </ng-template>\n      </tbody>\n    </table>\n    <div class=\"solid-table-footer\">\n\t    <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n        <pagination-controls (pageChange)=\"pageChange($event)\"></pagination-controls>\n\t    </div>\n    </div>\n  </div>   \n</div>\n","import { ActionTypes, ChangeType } from \"@registry/model/constants\";\nimport { AbstractAction, ChangeRequest, CreateGeoObjectAction, UpdateAttributeOverTimeAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectType, HierarchyOverTime, HierarchyOverTimeEntry, ValueOverTime } from \"@registry/model/registry\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { v4 as uuid } from \"uuid\";\nimport { GeometryService } from \"@registry/service\";\nimport { Subject } from \"rxjs\";\n\nexport class ChangeRequestChangeOverTimeAttributeEditor {\n\n    changeRequestEditor: ChangeRequestEditor;\n\n    attribute: AttributeType;\n\n    editAction: AbstractAction;\n\n    hierarchy: HierarchyOverTime;\n\n    editors: ValueOverTimeCREditor[];\n\n    private _isValid: boolean;\n\n    onChangeSubject: Subject<any> = new Subject<any>();\n\n    constructor(changeRequestEditor: ChangeRequestEditor, attribute: AttributeType, hierarchy: HierarchyOverTime) {\n        this.changeRequestEditor = changeRequestEditor;\n        this.attribute = attribute;\n        this.hierarchy = hierarchy;\n\n        this.getEditAction();\n\n        if (hierarchy != null) {\n            for (let j = 0; j < this.hierarchy.entries.length; j++) {\n                let hierarchyEntry = this.hierarchy.entries[j];\n\n                if (hierarchyEntry.parents == null) {\n                    hierarchyEntry.parents = {};\n                }\n                if (hierarchyEntry.loading == null) {\n                    hierarchyEntry.loading = {};\n                }\n\n                for (let i = 0; i < this.hierarchy.types.length; i++) {\n                    let current = this.hierarchy.types[i];\n\n                    if (hierarchyEntry.parents[current.code] == null) {\n                        hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n                    }\n                }\n            }\n        }\n\n        this.editors = this.generateEditors();\n    }\n\n    getEditAction() {\n        if (this.editAction == null) {\n            let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n            if (actions.length === 0) {\n                this.editAction = new UpdateAttributeOverTimeAction(this.attribute.code);\n\n                if (this.attribute.code === \"_PARENT_\") {\n                    (this.editAction as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchy.code;\n                }\n            } else {\n                this.editAction = actions[actions.length - 1];\n            }\n        }\n\n        return this.editAction;\n    }\n\n    onChange(type: ChangeType) {\n        // If our attribute action has changes it needs to be added to the ChangeRequest actions. Otherwise we can remove it.\n        let hasChanges: boolean = this.hasChanges();\n\n        let index = this.changeRequestEditor.changeRequest.actions.findIndex(action => this.editAction === action);\n\n        if (index !== -1 && !hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.splice(index, 1);\n        } else if (index === -1 && hasChanges) {\n            this.changeRequestEditor.changeRequest.actions.push(this.editAction);\n        }\n\n        this.validate();\n\n        this.onChangeSubject.next(type);\n        this.changeRequestEditor.onChange(type);\n    }\n\n    hasChanges(): boolean {\n        let hasChanges: boolean = true;\n\n        if (this.editAction.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n            let updateAction: UpdateAttributeOverTimeAction = this.editAction as UpdateAttributeOverTimeAction;\n\n            if (updateAction.attributeDiff.valuesOverTime.length === 0) {\n                hasChanges = false;\n            }\n        }\n\n        return hasChanges;\n    }\n\n    public isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(skipExists: boolean = false): boolean {\n        let validEditors = this.validateEditors();\n        let hasTimeConflict = this.changeRequestEditor.dateService.checkRanges(this.attribute, this.editors);\n\n        let hasExistConflict = false;\n        if (this.attribute.code !== \"exists\") {\n            let existsAttribute: AttributeType = GeoObjectType.getAttribute(this.changeRequestEditor.geoObjectType, \"exists\");\n            let existEditors = (this.changeRequestEditor.getEditorForAttribute(existsAttribute) as ChangeRequestChangeOverTimeAttributeEditor).getEditors();\n            hasExistConflict = this.changeRequestEditor.dateService.checkExistRanges(this.editors, existEditors);\n        } else if (!skipExists) {\n            this.changeRequestEditor.validate(true); // If the exists attribute has changed we must revalidate all other attributes\n        }\n\n        this._isValid = validEditors && !hasTimeConflict && !hasExistConflict;\n\n        return this._isValid;\n    }\n\n    private validateEditors(): boolean {\n        let valid: boolean = true;\n\n        this.editors.forEach(editor => {\n            if (!editor.validate()) {\n                valid = false;\n            }\n        });\n\n        return valid;\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    public getEditors(includeUnmodified: boolean = true): ValueOverTimeCREditor[] {\n        return this.editors.filter(editor => includeUnmodified || editor.diff != null);\n    }\n\n    generateEditors(): ValueOverTimeCREditor[] {\n        let actions = ChangeRequest.getActionsForAttribute(this.changeRequestEditor.changeRequest, this.attribute.code, this.hierarchy == null ? null : this.hierarchy.code);\n\n        let editors: ValueOverTimeCREditor[] = [];\n\n        // First, we have to create a view for every ValueOverTime object. This is done to simply display what's currently\n        // on the GeoObject\n        if (this.attribute.code === \"_PARENT_\") {\n            this.hierarchy.entries.forEach((entry: HierarchyOverTimeEntry) => {\n                let editor = new HierarchyCREditor(this, this.attribute, this.editAction, entry, this.hierarchy);\n\n                editors.push(editor);\n            });\n        } else {\n            if (this.changeRequestEditor.geoObject.attributes[this.attribute.code]) {\n                this.changeRequestEditor.geoObject.attributes[this.attribute.code].values.forEach((vot: ValueOverTime) => {\n                    let editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n\n                    editor.valueOverTime = vot;\n\n                    editors.push(editor);\n                });\n            }\n        }\n\n        // Next, we must apply all changes which may exist in the actions.\n        if (this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            let len = actions.length;\n            for (let i = 0; i < len; ++i) {\n                let updateAttrAction: UpdateAttributeOverTimeAction = actions[i] as UpdateAttributeOverTimeAction;\n\n                updateAttrAction.attributeDiff.valuesOverTime.forEach((votDiff: ValueOverTimeDiff) => {\n                    let index = editors.findIndex(editor => editor.oid === votDiff.oid);\n                    let editor = (index === -1) ? null : editors[index];\n\n                    if (editor == null) {\n                        if (this.attribute.code === \"_PARENT_\") {\n                            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n                        } else {\n                            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n                        }\n\n                        editor.diff = votDiff;\n\n                        editors.push(editor);\n                    } else {\n                        editor.diff = votDiff;\n\n                        if (this.attribute.code === \"_PARENT_\") {\n                            (editor as HierarchyCREditor).hierarchyEntry.parents = votDiff.parents;\n                        }\n                    }\n                });\n            }\n        }\n\n        return editors;\n    }\n\n    public createNewVersion(original?: ValueOverTimeCREditor): ValueOverTimeCREditor {\n        let editor: ValueOverTimeCREditor;\n\n        // Create an instance of the appropriate editor object\n        if (this.attribute.code === \"_PARENT_\") {\n            editor = new HierarchyCREditor(this, this.attribute, this.editAction, null, this.hierarchy);\n        } else {\n            editor = new ValueOverTimeCREditor(this, this.attribute, this.editAction);\n        }\n\n        // If we're creating a new GeoObject, add it to that GeoObject\n        if (this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            if (this.attribute.code === \"_PARENT_\") {\n                (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n                (editor as HierarchyCREditor).hierarchyOverTime.entries.push((editor as HierarchyCREditor).hierarchyEntry);\n            } else {\n                let vot = new ValueOverTime();\n                vot.oid = uuid();\n\n                (this.editAction as CreateGeoObjectAction).geoObjectJson.attributes[this.attribute.code].values.push(vot);\n\n                editor.valueOverTime = vot;\n            }\n        } else {\n            editor.constructNewDiff(\"CREATE\");\n        }\n\n        // Set any default values\n        if (this.attribute.type === \"local\") {\n            editor.value = this.changeRequestEditor.localizationService.create();\n        } else if (this.attribute.type === \"geometry\") {\n            let editors = this.getEditors(true);\n\n            if (editors.length > 0) {\n\n                if (original != null) {\n                    editor.value = JSON.parse(JSON.stringify(original.value));\n                }\n                else {\n                    editor.value = JSON.parse(JSON.stringify(editors[editors.length - 1].value));\n                }\n            } else {\n                editor.value = GeometryService.createEmptyGeometryValue(this.changeRequestEditor.geoObjectType.geometryType);\n            }\n        } else if (this.attribute.type === \"term\") {\n            let terms = GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.changeRequestEditor.geoObjectType, this.attribute.code);\n\n            if (terms && terms.length > 0) {\n                editor.value = terms[0].code;\n            }\n        } else if (this.attribute.code === \"_PARENT_\" && this.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\") {\n            (editor as HierarchyCREditor).hierarchyEntry = (editor as HierarchyCREditor).createEmptyHierarchyEntry();\n        } else if (this.attribute.code !== \"_PARENT_\") {\n            editor.value = null;\n        }\n\n        this.editors.push(editor);\n\n        this.onChange(ChangeType.ADD);\n\n        return editor;\n    }\n\n    public remove(editor: ValueOverTimeCREditor) {\n        if ((editor.diff != null && editor.diff.action === \"CREATE\") || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            let index = this.editors.findIndex(find => find.oid === editor.oid);\n\n            if (index !== -1) {\n                this.editors.splice(index, 1);\n            }\n        }\n\n        editor.remove();\n\n        this.validate();\n    }\n\n}\n","import { ValueOverTime, AttributeType, TimeRangeEntry, ConflictMessage } from \"@registry/model/registry\";\nimport { CreateGeoObjectAction, UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GeometryService } from \"@registry/service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { Subject } from \"rxjs\";\nimport { ChangeType, ConflictType } from \"@registry/model/constants\";\n\nexport class ValueOverTimeCREditor implements TimeRangeEntry {\n\n    diff?: ValueOverTimeDiff; // Any existing diff which may be associated with this object.\n    valueOverTime?: ValueOverTime; // Represents a vot on an existing GeoObject. If this is set and the action is UpdateAttribute, we must be doing an UPDATE, and valueOverTime represents the original value in the DB.\n    action: AbstractAction;\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n    attr: AttributeType;\n    conflictMessages: Set<ConflictMessage>;\n\n    onChangeSubject : Subject<any> = new Subject<any>();\n\n    _isValid: boolean = true;\n\n    constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction) {\n        this.attr = attr;\n        this.changeRequestAttributeEditor = changeRequestAttributeEditor;\n        this.action = action;\n    }\n\n    onChange(type: ChangeType) {\n        this.changeRequestAttributeEditor.onChange(type);\n        this.onChangeSubject.next(type);\n    }\n\n    getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n        return this.valueOverTime;\n    }\n\n    getValueFromGeoObjectForDiff(): any {\n        return this.valueOverTime.value;\n    }\n\n    validate(): boolean {\n        if (!this.conflictMessages) {\n            this.conflictMessages = new Set();\n        }\n\n        let dateService = this.changeRequestAttributeEditor.changeRequestEditor.dateService;\n        let start = dateService.validateDate(this.startDate == null ? null : dateService.getDateFromDateString(this.startDate), true, true);\n        let end = dateService.validateDate(this.endDate == null ? null : dateService.getDateFromDateString(this.endDate), true, true);\n        this._isValid = true;\n\n        if (!start.valid || !end.valid) {\n            this._isValid = false;\n        }\n\n        this.validateUpdateReference();\n\n        return this._isValid;\n    }\n\n    /**\n     * If we're referencing an existing value over time, that object should exist on our GeoObject (which represents the current state of the database)\n     */\n    validateUpdateReference() {\n        let missingReference = this.changeRequestAttributeEditor.changeRequestEditor.dateService.missingReference;\n\n        this.conflictMessages.delete(missingReference);\n\n        if (this.changeRequestAttributeEditor.changeRequestEditor.changeRequest.type === \"UpdateGeoObject\" && this.diff != null && this.diff.action !== \"CREATE\") {\n            let existingVot = this.findExistingValueOverTimeByOid(this.diff.oid, this.attr.code);\n\n            if (existingVot == null) {\n                this._isValid = false;\n\n                this.conflictMessages.add(missingReference);\n            }\n        }\n    }\n\n    findExistingValueOverTimeByOid(oid: string, attributeCode: string) {\n        if (this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode]) {\n            let index = this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values.findIndex((vot: ValueOverTime) => vot.oid === oid);\n\n            if (index !== -1) {\n                return this.changeRequestAttributeEditor.changeRequestEditor.geoObject.attributes[attributeCode].values[index];\n            }\n        }\n\n        return null;\n    }\n\n    set oid(oid: string) {\n        if (this.diff != null) {\n            this.diff.oid = oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            this.getGeoObjectTimeRangeStorage().oid = oid;\n        }\n    }\n\n    get oid(): string {\n        if (this.diff != null) {\n            return this.diff.oid;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().oid;\n        }\n\n        return null;\n    }\n\n    get startDate(): string {\n        return this.getStartDate();\n    }\n\n    public getStartDate(): string {\n        if (this.diff != null && this.diff.newStartDate !== undefined) {\n            return this.diff.newStartDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldStartDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().startDate;\n        }\n\n        return null;\n    }\n\n    constructNewDiff(action: string): void {\n        this.diff = new ValueOverTimeDiff();\n        this.diff.action = action;\n        (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n\n        if (action === \"CREATE\") {\n            this.diff.oid = uuid();\n        } else {\n            let goRange = this.getGeoObjectTimeRangeStorage();\n\n            this.diff.oid = goRange.oid;\n            this.diff.oldStartDate = goRange.startDate;\n            this.diff.oldEndDate = goRange.endDate;\n        }\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        if (this.diff != null) {\n            this.diff.oldStartDate = oldStartDate;\n        }\n    }\n\n    get oldStartDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldStartDate;\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        return this.getEndDate();\n    }\n\n    public getEndDate(): string {\n        if (this.diff != null && this.diff.newEndDate !== undefined) {\n            return this.diff.newEndDate;\n        } else if (this.diff != null && this.diff.oldStartDate !== undefined) {\n            return this.diff.oldEndDate;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().endDate;\n        }\n\n        return null;\n    }\n\n    set startDate(startDate: string) {\n        this.setStartDate(startDate);\n    }\n\n    public setStartDate(startDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.startDate === startDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (startDate === this.diff.oldStartDate) {\n                delete this.diff.newStartDate;\n            } else {\n                this.diff.newStartDate = startDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.startDate = startDate;\n        }\n\n        this.onChange(ChangeType.START_DATE);\n    }\n\n    set endDate(endDate: string) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        let goRange = this.getGeoObjectTimeRangeStorage();\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (goRange == null) {\n                    this.constructNewDiff(\"CREATE\");\n                } else {\n                    if (goRange.endDate === endDate) {\n                        return;\n                    }\n\n                    this.constructNewDiff(\"UPDATE\");\n\n                    this.diff.oldValue = this.getValueFromGeoObjectForDiff();\n                }\n            }\n\n            if (endDate === this.diff.oldEndDate) {\n                delete this.diff.newEndDate;\n            } else {\n                this.diff.newEndDate = endDate;\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            goRange.endDate = endDate;\n        }\n\n        this.onChange(ChangeType.END_DATE);\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        if (this.diff != null) {\n            this.diff.oldEndDate = oldEndDate;\n        }\n    }\n\n    get oldEndDate(): string {\n        if (this.diff != null) {\n            return this.diff.oldEndDate;\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        if (this.diff != null && this.diff.newValue !== undefined) {\n            return this.diff.newValue;\n        } else if (this.diff != null && this.diff.oldValue !== undefined) {\n            return this.diff.oldValue;\n        } else if (this.getGeoObjectTimeRangeStorage() != null) {\n            return this.getGeoObjectTimeRangeStorage().value;\n        }\n\n        return null;\n    }\n\n    set value(value: any) {\n        if (this.isDelete()) {\n            return; // There are various view components (like the date widgets) which will invoke this method\n        }\n\n        if (value != null) {\n            if (this.attr.type === \"term\") {\n                value = [value];\n            } else if (this.attr.type === \"date\") {\n                value = new Date(value).getTime();\n            } else if (this.attr.type === \"geometry\") {\n                // Limit max precision for point geometries\n                let maxCoordinatePrecision = 6;\n\n                if (value.type === \"MultiPoint\") {\n                    for (let i = 0; i < value.coordinates.length; ++i) {\n                        let coordinate: number[] = value.coordinates[i];\n\n                        coordinate[0] = Number.parseFloat(coordinate[0].toFixed(maxCoordinatePrecision));\n                        coordinate[1] = Number.parseFloat(coordinate[1].toFixed(maxCoordinatePrecision));\n                    }\n                } else if (value.type === \"Point\") {\n                    value.coordinates = [Number.parseFloat(value.coordinates[0].toFixed(maxCoordinatePrecision)), Number.parseFloat(value.coordinates[1].toFixed(maxCoordinatePrecision))];\n                }\n            }\n        } else if (value == null) {\n            if (this.attr.type === \"geometry\") {\n                value = GeometryService.createEmptyGeometryValue(this.changeRequestAttributeEditor.changeRequestEditor.geoObjectType.geometryType);\n            } else if (this.attr.type === \"character\") {\n                value = \"\";\n            }\n        }\n\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff == null) {\n                if (this.getGeoObjectTimeRangeStorage() == null) {\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.oid = uuid();\n                    this.diff.action = \"CREATE\";\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                } else {\n                    if (this.areValuesEqual(this.valueOverTime.value, value)) {\n                        return;\n                    }\n\n                    this.diff = new ValueOverTimeDiff();\n                    this.diff.action = \"UPDATE\";\n                    this.diff.oid = this.getGeoObjectTimeRangeStorage().oid;\n                    this.diff.oldValue = this.valueOverTime.value;\n                    this.diff.oldStartDate = this.getGeoObjectTimeRangeStorage().startDate;\n                    this.diff.oldEndDate = this.getGeoObjectTimeRangeStorage().endDate;\n                    (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n                }\n            }\n\n            if (this.diff.action !== \"CREATE\" && this.areValuesEqual(this.diff.oldValue, value)) {\n                delete this.diff.newValue;\n            } else {\n                this.diff.newValue = JSON.parse(JSON.stringify(value));\n            }\n\n            // If no changes have been made then remove the diff\n            this.removeEmptyDiff();\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            this.valueOverTime.value = value;\n        }\n\n        this.onChange(ChangeType.VALUE);\n    }\n\n    set oldValue(oldValue: any) {\n        if (this.diff != null) {\n            this.diff.oldValue = oldValue;\n        }\n    }\n\n    get oldValue(): any {\n        if (this.diff != null) {\n            return this.diff.oldValue;\n        }\n\n        return null;\n    }\n\n    public setLocalizedValue(localizedValue: LocalizedValue) {\n        this.value = JSON.parse(JSON.stringify(localizedValue));\n    }\n\n    removeEmptyDiff(): void {\n        if (this.diff != null && this.diff.newValue === undefined && this.diff.newStartDate === undefined && this.diff.newEndDate === undefined) {\n            const diffs = (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime;\n\n            const index = diffs.findIndex(d => d.oid === this.diff.oid);\n\n            if (index !== -1) {\n                diffs.splice(index, 1);\n            }\n\n            this.diff = null;\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attr.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (this.attr.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (this.attr.type === \"geometry\") {\n            return turf_booleanequal(val1, val2);\n        } else if (this.attr.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (this.attr.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        return val1 === val2;\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public remove(): void {\n        if (this.action.actionType === \"UpdateAttributeAction\") {\n            if (this.diff != null && this.diff.action === \"CREATE\") {\n                // Its a new entry, just remove the diff from the diff array\n                let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n                const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n                if (index > -1) {\n                    updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n                }\n            } else if (this.diff != null) {\n                delete this.diff.newValue;\n                delete this.diff.newStartDate;\n                delete this.diff.newEndDate;\n                this.removeEmptyDiff();\n                this.onChange(ChangeType.REMOVE);\n                return;\n            } else if (this.valueOverTime != null && this.diff == null) {\n                this.diff = new ValueOverTimeDiff();\n                this.diff.action = \"DELETE\";\n                this.diff.oid = this.valueOverTime.oid;\n                this.diff.oldValue = this.valueOverTime.value;\n                this.diff.oldStartDate = this.valueOverTime.startDate;\n                this.diff.oldEndDate = this.valueOverTime.endDate;\n                (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n            }\n        } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n            let votc = (this.action as CreateGeoObjectAction).geoObjectJson.attributes[this.attr.code].values;\n\n            let index = votc.findIndex((vot) => { return vot.oid === this.valueOverTime.oid; });\n\n            if (index !== -1) {\n                votc.splice(index, 1);\n            }\n        }\n\n        this.onChange(ChangeType.REMOVE);\n    }\n\n    public isDelete() {\n        return this.diff != null && this.diff.action === \"DELETE\";\n    }\n\n}\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    SimpleChanges,\n    OnDestroy\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, HierarchyOverTime } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GovernanceStatus, LayerColor } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService, GeometryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { VersionDiffView, Layer } from \"./manage-versions-model\";\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { Observable, Observer } from \"rxjs\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\nimport { HierarchyCREditor } from \"./HierarchyCREditor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\n\n@Component({\n    selector: \"manage-versions\",\n    templateUrl: \"./manage-versions.component.html\",\n    styleUrls: [\"./manage-versions.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class ManageVersionsComponent implements OnInit, OnDestroy {\n\n    // height (as number) in pixels\n    mapRowHeight: number;\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    message: string = null;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() isGeometryInlined: boolean = false;\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() hierarchy: HierarchyOverTime = null;\n\n    @Input() filterDate: string = null;\n\n    @Input() showAllInstances: boolean = true;\n\n    viewModels: VersionDiffView[] = [];\n\n    isRootOfHierarchy: boolean = false;\n\n    isInitialized: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public geomService: GeometryService, public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, this.hierarchy) as ChangeRequestChangeOverTimeAttributeEditor;\n\n        this.calculateViewModels();\n        this.isRootOfHierarchy = this.attributeType.type === \"_PARENT_\" && (this.hierarchy == null || this.hierarchy.types == null || this.hierarchy.types.length === 0);\n        this.isInitialized = true;\n    }\n\n    ngAfterViewInit() {\n        if (this.isNew && this.attributeType.code === \"exists\" && this.viewModels.length === 0) {\n            this.onAddNewVersion();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.isInitialized && changes.showAllInstances && changes.showAllInstances.previousValue !== changes.showAllInstances.currentValue) {\n            this.calculateViewModels();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.viewModels.forEach(vm => vm.destroy(this));\n    }\n\n    setFilterDate(filterDate: string, refresh: boolean = true): void {\n        this.filterDate = filterDate;\n        if (refresh) {\n            this.calculateViewModels();\n        }\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    hasLocalizationChanged(viewModel: VersionDiffView, locale: string): boolean {\n        return viewModel.editor.oldValue != null && this.getValueAtLocale(viewModel.editor.oldValue, locale) !== this.getValueAtLocale(viewModel.editor.value, locale);\n    }\n\n    onDateChange(): any {\n        setTimeout(() => {\n            this.isValid = this.changeRequestAttributeEditor.validate() && this.checkDateFieldValidity();\n\n            this.isValidChange.emit(this.isValid);\n        }, 0);\n    }\n\n    remove(view: VersionDiffView): void {\n        if (this.geomService.isEditing()) {\n            this.geomService.stopEditing();\n        }\n\n        this.changeRequestAttributeEditor.remove(view.editor);\n\n        if (view.summaryKey === SummaryKey.NEW || this.changeRequestEditor.changeRequest.type === \"CreateGeoObject\") {\n            const index = this.viewModels.findIndex(v => v.editor.oid === view.editor.oid);\n\n            if (index > -1) {\n                this.viewModels.splice(index, 1);\n            }\n        }\n\n        if (this.attributeType.type === \"geometry\") {\n            this.geomService.reload();\n        }\n    }\n\n    onAddNewVersion(original?: ValueOverTimeCREditor): void {\n        let editor = this.changeRequestAttributeEditor.createNewVersion(original);\n\n        if (this.isNew && this.changeRequestEditor.geoObject.attributes[\"exists\"]) {\n            let values = this.changeRequestEditor.geoObject.attributes[\"exists\"].values;\n\n            if (values && values.length > 0) {\n                let value = values[0];\n\n                editor.startDate = value.startDate;\n                editor.endDate = value.endDate;\n            }\n        }\n\n        this.viewModels.push(new VersionDiffView(this, editor));\n    }\n\n    getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return lv == null ? null : new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    public getGeoObjectTypeTermAttributeOptions(termAttributeCode: string) {\n        return GeoObjectType.getGeoObjectTypeTermAttributeOptions(this.geoObjectType, termAttributeCode);\n    }\n\n    calculateViewModels(): void {\n        let viewModels: VersionDiffView[] = [];\n\n        this.viewModels.forEach(viewModel => viewModel.destroy(this));\n\n        let editors = this.changeRequestAttributeEditor.getEditors(this.showAllInstances);\n        editors.forEach((editor: ValueOverTimeCREditor) => {\n            if (this.filterDate == null || this.dateService.between(this.filterDate, editor.startDate, editor.endDate)) {\n                let view = new VersionDiffView(this, editor);\n                viewModels.push(view);\n            }\n        });\n\n        this.viewModels = viewModels;\n    }\n\n    onApprove(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        this.requestService.setActionStatus(this.changeRequestAttributeEditor.editAction.oid, GovernanceStatus.PENDING).then(results => {\n            this.changeRequestAttributeEditor.editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n    /**\n     * Hierarchy Editing\n     */\n\n    getTypeAheadObservable(editor: HierarchyCREditor, startDate: string, endDate: string, type: any, entry: any, index: number): Observable<any> {\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let parentTypeCode = null;\n        let hierarchyCode = null;\n\n        if (index > 0) {\n            let pType = editor.changeRequestAttributeEditor.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n                parentTypeCode = parent.geoObject.properties.type;\n            }\n        }\n\n        return new Observable((observer: Observer<Object>) => {\n            if (parentCode == null) {\n                let loopI = index;\n\n                while (parentCode == null && loopI > 0) {\n                    loopI = loopI - 1;\n\n                    let parent = entry.parents[editor.changeRequestAttributeEditor.hierarchy.types[loopI].code];\n\n                    if (parent != null) {\n                        if (parent.geoObject != null && parent.geoObject.properties.code != null) {\n                            parentCode = parent.geoObject.properties.code;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        } else if (parent.goCode != null) {\n                            parentCode = parent.goCode;\n                            hierarchyCode = editor.changeRequestAttributeEditor.hierarchy.code;\n                            parentTypeCode = editor.changeRequestAttributeEditor.hierarchy.types[loopI].code;\n                        }\n                    }\n                }\n            }\n\n            this.service.getGeoObjectSuggestions(entry.parents[type.code].text, geoObjectTypeCode, parentCode, parentTypeCode, hierarchyCode, startDate, endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(editor: HierarchyCREditor, e: TypeaheadMatch, type: any, entry: any, date: string): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        entry.parents[type.code].text = e.item.name + \" : \" + e.item.code;\n        entry.parents[type.code].goCode = e.item.code;\n\n        let parentTypes = [];\n\n        for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n            let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n\n            parentTypes.push(current.code);\n\n            if (current.code === type.code) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects(e.item.code, type.code, parentTypes, true, date).then(ancestors => {\n            // First filter the response for ancestors of only the correct hierarchy\n            ancestors.parents = ancestors.parents.filter(p => p.hierarchyType === editor.changeRequestAttributeEditor.hierarchy.code);\n\n            delete entry.parents[type.code].goCode;\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestors.geoObject.properties.code;\n\n            for (let i = 0; i < editor.changeRequestAttributeEditor.hierarchy.types.length; i++) {\n                let current = editor.changeRequestAttributeEditor.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while (ancestor != null && ancestor.geoObject.properties.type !== current.code) {\n                    if (ancestor.parents.length > 0) {\n                        ancestor = ancestor.parents[0];\n                    } else {\n                        ancestor = null;\n                    }\n                }\n\n                if (ancestor != null) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue + \" : \" + ancestor.geoObject.properties.code;\n                }\n            }\n\n            editor.setParentValue(type, entry.parents);\n        });\n    }\n\n    /**\n     * GEOMETRY EDITING\n     */\n\n    toggleGeometryEditing(view: VersionDiffView) {\n        this.geomService.setEditing(!view.newLayer.isEditing, view.newLayer);\n\n        if (this.geoObjectType.geometryType === \"POINT\" || this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            view.coordinate = {};\n        }\n    }\n\n    toggleGeometryView(view: VersionDiffView) {\n        // Using setTimeout() to pull the calc out of the animation stack so the dom can finish mutating before getting final height.\n        setTimeout(() => {\n            this.mapRowHeight = this.elementRef.nativeElement.children[0].getElementsByClassName(\"attribute-element-wrapper\")[0].offsetHeight;\n        }, 0);\n\n        let layer: Layer = this.getOrCreateLayer(view, \"NEW\");\n\n        if (layer.isEditing) {\n            this.geomService.stopEditing();\n        }\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    toggleOldGeometryView(view: VersionDiffView) {\n        let layer: Layer = this.getOrCreateLayer(view, \"OLD\");\n\n        this.geomService.setRendering(!layer.isRendering, layer);\n    }\n\n    getOrCreateLayer(view: VersionDiffView, context: string): Layer {\n        if (context === \"NEW\") {\n            if (view.newLayer != null) {\n                return view.newLayer;\n            }\n\n            view.newLayer = new Layer();\n            view.newLayer.oid = \"NEW_\" + view.editor.oid;\n            view.newLayer.isEditing = false;\n            view.newLayer.isRendering = false;\n            view.newLayer.zindex = 1;\n            view.newLayer.color = LayerColor.NEW;\n            view.newLayer.geojson = view.editor.value;\n            view.newLayer.editPropagator = view.editor;\n\n            return view.newLayer;\n        } else {\n            if (view.oldLayer != null) {\n                return view.oldLayer;\n            }\n\n            view.oldLayer = new Layer();\n            view.oldLayer.oid = \"OLD_\" + view.editor.oid;\n            view.oldLayer.isEditing = false;\n            view.oldLayer.isRendering = false;\n            view.oldLayer.zindex = 0;\n            view.oldLayer.color = LayerColor.OLD;\n            view.oldLayer.geojson = view.editor.oldValue;\n            view.oldLayer.editPropagator = null;\n\n            return view.oldLayer;\n        }\n    }\n\n    manualCoordinateChange(view: VersionDiffView): void {\n        if (view.newCoordinateX || view.newCoordinateY) {\n            let newX = view.newCoordinateX;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newX = view.value.coordinates[0];\n            }\n            let newY = view.newCoordinateY;\n            if (view.value.coordinates && view.value.coordinates[0]) {\n                newY = view.value.coordinates[1];\n            }\n            view.value.coordinates = [[newX || 0, newY || 0]];\n            delete view.newCoordinateX;\n            delete view.newCoordinateY;\n            return;\n        }\n\n        const isLatitude = num => isFinite(num) && Math.abs(num) <= 90;\n        const isLongitude = num => isFinite(num) && Math.abs(num) <= 180;\n\n        view.coordinate.latValid = isLatitude(view.value.coordinates[0][1]);\n        view.coordinate.longValid = isLongitude(view.value.coordinates[0][0]);\n\n        if (!view.coordinate.latValid || !view.coordinate.longValid) {\n            // outside EPSG bounds\n            this.isValid = false;\n            this.isValidChange.emit(this.isValid);\n            return;\n        }\n\n        this.geomService.setPointCoordinates(view.value.coordinates[0][1], view.value.coordinates[0][0]);\n    }\n\n}\n","<div>\n  <ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n  </ng-template>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form name=\"manage-versions-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div [ngStyle]=\"{'width' : (isGeometryInlined && geomService.getRenderedLayers().length > 0) ? '45%' : '100%'}\" style=\"display:inline-block;\" class=\"col\">\n          <div *ngIf=\"changeRequestEditor.geoObject\" class=\"attribute-version-wrapper\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                <div *ngIf=\"attributeType\">\n                  <table class=\"table table-striped\">\n                    <tbody class=\"attribute-element-wrapper\" >\n                      <p class=\"message\" *ngIf=\"!isRootOfHierarchy && viewModels.length === 0\">\n                        <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize> \n                      </p>\n                      <div *ngIf=\"isRootOfHierarchy\">\n                        <localize key=\"changeovertime.manageVersions.rootOfHierarchy.message\"></localize>\n                      </div>\n                      \n                      <ng-container *ngIf=\"!isRootOfHierarchy\">\n                        <!-- TODO : Fade in out disabled because it doesn't work all that well with stability periods   @fadeInOut -->\n                        <tr  *ngFor=\"let viewModel of viewModels; let i = index;\" class=\"version-row\"\n                            [ngClass]=\"{ 'geometry-edit-active' : (viewModel.newLayer && viewModel.newLayer.isEditing) }\">\n                            <td class=\"version-column-wrapper\" [ngClass]=\"{'error-border': viewModel.hasError(),\n                            'warning-border': viewModel.hasWarning(),\n                            'warning' : viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'}\" >\n                            <div *ngIf=\"viewModel.summaryKey && viewModel.summaryKey !== 'UNMODIFIED'\" class=\"version-column-indicator\">\n                                {{viewModel.summaryKeyLocalized}}\n                              </div>\n                            \n                            <table>\n                            \n                              <!-- \n                                Local Type \n                              -->\n                              <ng-container *ngIf=\"attributeType.type === 'local' && viewModel.value\">\n                               <tr *ngFor=\"let loc of viewModel.value.localeValues; let idx = index;\" class=\"attribute-value-row\">\n                                 <td colspan=\"2\">\n                                   <h5><convert-key-label [key]=\"loc.locale\"></convert-key-label></h5>\n                                   \n                                   <input [ngClass]=\"{'has-changed': (hasLocalizationChanged(viewModel, loc.locale) && !isNew)}\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"viewModel.editor.setLocalizedValue(viewModel.value)\" [required]=\"loc.locale === 'defaultLocale'\">\n                                   \n                                   <div class=\"form-input-validation-error-message-wrapper\">\n                                     <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">\n                                       <localize key=\"manage.versions.value.required.message\"></localize>\n                                     </p>\n                                   </div>\n                                   \n                                   <div *ngIf=\"hasLocalizationChanged(viewModel, loc.locale) && !isNew\">\n                                     <p class=\"warning-text display-current-value\" style=\"padding: 5px 0;margin-bottom:0;\">\n                                       <localize key=\"change.request.changed.value.prefix\"></localize>\n                                       {{ getValueAtLocale(viewModel.oldValue, loc.locale) }}\n                                     </p>\n                                   </div>\n                                 </td>\n                               </tr>\n                              </ng-container>\n\n                              <tr *ngIf=\"attributeType.type === 'geometry' || attributeType.type === '_PARENT_' || attributeType.type === 'term' || attributeType.type === 'classification' || attributeType.type === 'character' || attributeType.type === 'date' || attributeType.type === 'integer' || attributeType.type === 'float' || attributeType.type === 'boolean'\" class=\"attribute-value-row\">\n                               <td colspan=\"2\">\n                               \n                                 <div *ngIf=\"attributeType.type === 'term'\">\n                                   <select [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" id=\"mod-{{attributeType.code}}\" [name]=\"'mod-term-' + i + '-' + attributeType.code\" class=\"select-area\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                       <option value=\"\"></option>\n                                       <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attributeType.code)\" [value]=\"option.code\">{{option.label.localizedValue}}</option>\n                                   </select>\n                                 </div>\n\n                                 <div *ngIf=\"attributeType.type === 'classification'\">\n                                   <classification-field\n                                    [classificationType]=\"attributeType.classificationType\"\n                                    [rootCode]=\"attributeType.rootTerm != null ? attributeType.rootTerm.code : null\"\n                                    [classNames]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"\n                                    [name]=\"'mod-term-' + i + '-' + attributeType.code\"\n                                    [(value)]=\"viewModel.value\" \n                                    [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\">\n                                   </classification-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'character'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'date'\">\n                                   <date-field [customStyles]=\"(viewModel.oldValue && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.value\" label=\"\" [inputName]=\"'date-val-' + i\" [allowInfinity]=\"false\" [allowFutureDates]=\"true\" \n                                       [required]=\"true\" [placement]=\"'right'\" [(valid)]=\"isValid\" [disable]=\"readonly\" ></date-field>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'integer' || attributeType.type === 'float'\">\n                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" type=\"number\" class=\"form-control\" [name]=\"'int-val-' + i\" [(ngModel)]=\"viewModel.value\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\" required>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === 'boolean'\">\n\t                                 <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t                                   <input class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === true\" [value]=\"true\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.true\"></localize></span>\n\t                                 </label> \n\t                                 <label class=\"radio radio-inline\"> \n\t                                   <input [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\" class=\"inline-radio-input\" type=\"radio\" [checked]=\"viewModel.value === false\" [value]=\"false\" [(ngModel)]=\"viewModel.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\" [disabled]=\"readonly || viewModel.summaryKey === 'DELETE'\"> \n\t                                   <span [ngClass]=\"{'has-changed': (viewModel.oldValue && !isNew)}\"><localize key=\"change.request.boolean.option.false\"></localize></span>\n\t                                 </label>\n                                 </div>\n                                 \n                                 <div *ngIf=\"attributeType.type === '_PARENT_'\">\n                                   <ng-container *ngIf=\"hierarchy != null && hierarchy.types != null && hierarchy.types.length > 0\">\n                                     <div style=\"float:left;width:100%;\" *ngFor=\"let type of hierarchy.types; let j = index\"> \n                                       {{type.label}}\n                                       <div class=\"input-group\">\n                                          <input style=\"width:100%;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"type.code + '-' + i\"\n                                            [disabled]=\"readonly || viewModel.summaryKey === 'DELETE' || viewModel.startDate == null || viewModel.startDate === ''\"\n                                            [(ngModel)]=\"viewModel.value.parents[type.code].text\" \n                                            [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(viewModel.editor, viewModel.startDate, viewModel.endDate, type, viewModel.value, j)\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect(viewModel.editor, $event, type, viewModel.value, viewModel.startDate)\" \n                                            (typeaheadLoading)=\"viewModel.value.loading[type.code] = $event\"\n                                            [ngClass]=\"{'inline-loading':viewModel.value.loading[type.code], 'has-changed': (viewModel.oldValue && !isNew)}\"                                                                \n                                            [typeaheadOptionsLimit]=\"7\"\n                                            [typeaheadItemTemplate]=\"customItemTemplate\" \n                                            [typeaheadMinLength]=\"0\"\n                                            [typeaheadWaitMs]=\"300\">\n                                          \n                                            <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\" (click)=\"viewModel.editor.removeType(type)\"> \n                                              <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                            </span>\n                                                  \n                                            <!-- Hack: This is needed for formatting  -->\n                                            <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\"> \n                                            </span>\n                                        </div>\n                                     </div>\n                                   </ng-container>\n                                 </div> \n                                 <div *ngIf=\"viewModel.oldValue && !isNew && attributeType.type !== 'geometry'\">\n                                   <p class=\"warning-text display-current-value\">\n                                     <localize key=\"change.request.changed.value.prefix\"></localize>\n                                     \n                                     <ng-container ng-switch=\"attributeType.type\">\n                                      <ng-container ng-switch-when=\"'boolean'\">\n                                        <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === false) : (viewModel.oldValue === true)\" style=\"padding-left:3px;\">\n                                          <localize key=\"change.request.boolean.option.true\"></localize>\n                                        </span>\n                                        <span *ngIf=\"attributeType.code === 'invalid' ? (viewModel.oldValue === true) : (viewModel.oldValue === false)\" style=\"padding-left:3px;\">\n                                          <localize key=\"change.request.boolean.option.false\"></localize>\n                                        </span>\n                                      </ng-container> \n<!--\n\n  <ng-container ng-switch-when=\"'classification'\">\n    {{viewModel.oldValue}}\n  </ng-container> \n-->                                      \n                                      <ng-container ng-switch-default>\n                                        {{ viewModel.oldValue }}\n                                      </ng-container> \n                                     </ng-container>\n                                   </p>\n                                 </div>\n                                 \n                                 <table *ngIf=\"attributeType.type === 'geometry'\" style=\"padding:0;\">\n                                 <!-- \n                                    Geometry \n                                 -->\n<!--                                   <div *ngIf=\"attributeType.type === 'geometry'\"> -->\n  \n<!--                                     <td style=\"vertical-align: middle;padding-left:0;\"> -->\n                                      <tr>\n                                        <td colspan=\"2\" style=\"padding-left:0;\">\n                                        \n                                          <button *ngIf=\"viewModel.oldValue && viewModel.newLayer\" class=\"btn btn-primary\" (click)=\"toggleOldGeometryView(viewModel)\" role=\"button\" [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                           <localize *ngIf=\"!viewModel.oldLayer || !viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.viewOld\"></localize>\n                                           <localize *ngIf=\"viewModel.oldLayer && viewModel.oldLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hideOld\"></localize>\n                                          </button>\n                                          <button class=\"btn btn-primary\" style=\"margin-left:0;\" (click)=\"toggleGeometryView(viewModel)\" role=\"button\"\n                                            [disabled]=\"viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"!viewModel.newLayer || !viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.view\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering\" key=\"changeovertime.manageVersions.geometry.hide\"></localize>\n                                          </button>\n                                          <button *ngIf=\"viewModel.newLayer && viewModel.newLayer.isRendering && geoObjectType.isGeometryEditable\" class=\"btn btn-primary\" (click)=\"toggleGeometryEditing(viewModel)\" role=\"button\"\n                                            [disabled]=\"readonly || viewModel.coordinate && ( (viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid) || (viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid) )\">\n                                            <localize *ngIf=\"viewModel.newLayer && !viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                            <localize *ngIf=\"viewModel.newLayer && viewModel.newLayer.isEditing\" key=\"changeovertime.manageVersions.geometry.save\"></localize>\n                                          </button>\n\n                                          <i *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"fa fa-copy clickable\" (click)=\"onAddNewVersion(viewModel.editor)\"></i>                                          \n                                        </td>\n                                      </tr>\n  \n                                      <tr *ngIf=\"(viewModel.newLayer && viewModel.newLayer.isRendering) && (geoObjectType.geometryType === 'POINT' || geoObjectType.geometryType === 'MULTIPOINT') && viewModel.value && viewModel.value.coordinates && (viewModel.value.coordinates.length == 1 || viewModel.value.coordinates.length == 0)\">\n                                        \n                                        <td style=\"width:50%;padding-left:0;padding-right:5px;\" >\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.latitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][1]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'latitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateY\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.latValid != null && !viewModel.coordinate.latValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLatitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n                                        <td style=\"width:50%;\">\n                                          <h5>\n                                            <localize key=\"geoobject.editor.geometry.longitude.label\"></localize>\n                                          </h5>\n                                          <div class=\"text-left\">\n                                              <input *ngIf=\"viewModel.value.coordinates && viewModel.value.coordinates[0]\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.value.coordinates[0][0]\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                              <input *ngIf=\"viewModel.value.coordinates == null || viewModel.value.coordinates[0] == null\" [readonly]=\"readonly || !(viewModel.newLayer && viewModel.newLayer.isEditing) || viewModel.summaryKey === 'DELETE'\" [name]=\"'longitude-' + i\" type=\"number\" class=\"form-control\" [(ngModel)]=\"viewModel.newCoordinateX\"\n                                                (change)=\"manualCoordinateChange(viewModel)\" required />\n                                          </div>\n                                          <div *ngIf=\"viewModel.coordinate && viewModel.coordinate.longValid != null && !viewModel.coordinate.longValid\">\n                                              <p class=\"error-message\">\n                                                <localize key=\"change.request.geometry.invalidLongitude\"></localize>\n                                              </p>\n                                          </div>\n                                        </td>\n  \n                                      </tr>\n<!--                                     </td> -->\n<!--                                   </div> -->\n                                  </table>\n                              </td>\n\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5>\n                              \n                                  <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldStartDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"true\" [required]=\"true\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate && !readonly ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                                  \n                                  <div *ngIf=\"viewModel.oldStartDate && !isNew\">\n                                    <p class=\"warning-text display-current-value\">\n                                      <localize key=\"change.request.changed.value.prefix\"></localize>\n                                      {{ viewModel.oldStartDate }}\n                                    </p>\n                                  </div>\n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                    <h5>\n                                      <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                    </h5>\n                                    <date-field #dateFieldComponents [customStyles]=\"(viewModel.oldEndDate && !isNew) ? 'color: orange;' : ''\" [(value)]=\"viewModel.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"viewModel.summaryKey !== 'DELETE' && !readonly\" [allowFutureDates]=\"true\" \n                                        [required]=\"true\" [placement]=\"'bottom'\" [oldDate]=\"(viewModel.oldEndDate && !isNew) ? viewModel.oldEndDate : null\" [disable]=\"readonly || viewModel.summaryKey === 'DELETE' || filterDate != null\" [title]=\"(filterDate != null ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : '') | localize\" ></date-field>\n                      \n                                    <!--\n                                    <div *ngIf=\"viewModel.oldEndDate && !isNew\">\n                                      <p class=\"warning-text\">\n                                        <localize key=\"change.request.changed.value.prefix\"></localize>\n                                        {{ viewModel.oldEndDate }}\n                                      </p>\n                                    </div>\n                                    -->\n                                  </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"viewModel.editor.conflictMessages && viewModel.editor.conflictMessages.size > 0\">\n                                <p *ngFor=\"let msg of viewModel.editor.conflictMessages\" [ngClass]=\"{'error-message': msg.severity === 'ERROR', 'warning-message': msg.severity === 'WARNING'}\" >\n                                  {{msg.message}}\n                                </p>\n                              </tr>\n                            </table>\n                            \n                          </td>\n                          \n                          \n<!--                             <td *ngIf=\"!readonly && (!this.isNew || attributeType.code !== 'exists') && (filterDate == null || (viewModel.summaryKey !== 'UNMODIFIED' && viewModel.summaryKey !== 'NEW'))\" (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" [title]=\"(viewModel.summaryKey === 'UNMODIFIED' ? 'changeovertime.manageVersions.remove.version' : 'changeovertime.manageVersions.revert.version') | localize\"> -->\n\n              \n                            <!-- Remove button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && (viewModel.summaryKey === 'UNMODIFIED' && viewModel.summaryKey !== 'NEW')\"\n                                [attr.disabled]=\"attributeType.code === 'exists' || filterDate != null\" \n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"(filterDate ? 'changeovertime.manageVersions.date.editing.needs.fullview.message' : 'changeovertime.manageVersions.remove.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-times\" ></i> \n                            </td>\n                            <!-- Revert button -->\n                            <td *ngIf=\"!readonly && (!isNew || attributeType.code !== 'exists') && viewModel.summaryKey !== 'UNMODIFIED'\"\n                                (click)=\"remove(viewModel)\" class=\"manage-version-button clickable\" \n                                [title]=\"('changeovertime.manageVersions.revert.version') | localize\">\n                                <i class=\"fa\" class=\"fa fa-undo\" ></i> \n                            </td>\n                        </tr>\n                      </ng-container>\n                    </tbody>\n                  </table>\n                </div>\n              </li>\n              \n              <li *ngIf=\"!readonly && !isRootOfHierarchy && (!this.isNew || attributeType.code !== 'exists') && filterDate == null\" class=\"list-group-item\" style=\"text-align: left;\">\n                <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"> \n                  <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                </i>\n              </li>\n              \n            </ul>\n            \n            <!-- TODO : This code copy/pasted into standard-attribute-editor.component.html -->\n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.type !== 'CreateGeoObject' && changeRequestEditor.changeRequest.approvalStatus === 'PENDING' && changeRequestEditor.changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.hasChanges()\" style=\"margin-left: 15px;\">\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'}\"\n                    type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n                <localize key=\"change.request.accept.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'}\" \n                    type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n                <localize key=\"change.request.reject.btn\"></localize>\n              </button>\n              <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" [ngClass]=\"{'active': changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'}\" \n                    type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n                <localize key=\"change.request.pending.btn\"></localize>\n              </button>\n            </div>              \n            <div *ngIf=\"!changeRequestEditor.changeRequest.isNew && changeRequestEditor.changeRequest.approvalStatus !== 'PENDING'\" style=\"margin-left:15px;\">\n              <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n                  <localize key=\"change.request.status.accepted\"></localize>\n              </strong>\n              <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n                  <localize key=\"change.request.status.rejected\"></localize>\n              </strong>\n            </div>\n            \n          </div>\n        </div>\n        <geoobject-editor-map style=\"width:55%;display:inline-block;vertical-align:top;margin-top:15px;\" *ngIf=\"isGeometryInlined && geomService.getRenderedLayers().length > 0\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" \n          [mapHeight]=\"mapRowHeight\" [readOnly]=\"!geoObjectType.isGeometryEditable && readonly\"\n          [bboxCode]=\"this.changeRequestEditor.geoObject.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"geomService.getRenderedLayers()[0].startDate\">\n        </geoobject-editor-map>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute } from \"@angular/router\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"change-request-page\",\n    templateUrl: \"./change-request-page.component.html\",\n    styleUrls: [\"./change-request-page.css\"]\n})\nexport class ChangeRequestPageComponent implements OnInit {\n\n  pageTitle: string;\n  bsModalRef: BsModalRef;\n  isAdmin: boolean;\n  isMaintainer: boolean;\n  isContributor: boolean;\n  isContributorOnly: boolean;\n\n  urlSubscriber: any;\n\n  highlightOid: string;\n\n  constructor(private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService, private route: ActivatedRoute) {\n      this.isAdmin = service.isAdmin();\n      this.isMaintainer = this.isAdmin || service.isMaintainer();\n      this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n      this.isContributorOnly = service.isContributerOnly();\n  }\n\n  ngOnInit(): void {\n      this.urlSubscriber = this.route.params.subscribe(params => {\n          this.highlightOid = params[\"oid\"];\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.urlSubscriber.unsubscribe();\n  }\n\n  public error(err: HttpErrorResponse): void {\n      this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>{{pageTitle}}</h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <request-table [toggleId]=\"highlightOid\"></request-table>\n            \n            <submit-change-request *ngIf=\"isContributorOnly\"></submit-change-request>\n            \n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { interval } from \"rxjs\";\n\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { ScheduledJob, ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"scheduled-jobs\",\n    templateUrl: \"./scheduled-jobs.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class ScheduledJobsComponent implements OnInit {\n\n    message: string = null;\n\n    activeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completeJobsPage: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    isViewAllOpen: boolean = false;\n\n    constructor(public service: RegistryService,\n        private modalService: BsModalService,\n        private router: Router,\n        private localizeService: LocalizationService,\n        private ioService: IOService,\n        authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.onActiveJobsPageChange(1);\n\n        this.pollingData = interval(1000).subscribe(() => {\n            this.activeTimeCounter++;\n            this.completeTimeCounter++;\n\n            if (this.isViewAllOpen) {\n                if (this.activeTimeCounter >= 4) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n                if (this.completeTimeCounter >= 7) {\n                    this.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n                    this.completeTimeCounter = 0;\n                }\n            } else {\n                if (this.activeTimeCounter >= 2) {\n                    this.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n                    this.activeTimeCounter = 0;\n                }\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.pollingData.unsubscribe();\n    }\n\n    formatJobStatus(job: ScheduledJobOverview) {\n        if (job.status === \"FEEDBACK\") {\n            return this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n        } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        } else if (job.status === \"QUEUED\") {\n            return this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n        } else if (job.status === \"SUCCESS\") {\n            return this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n        } else if (job.status === \"CANCELED\") {\n            return this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n        } else if (job.status === \"FAILURE\") {\n            return this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n        } else {\n            return this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n        }\n    }\n\n    formatStepConfig(page: PageResult<any>): void {\n        page.resultSet.forEach(job => {\n            let stepConfig = {\n                steps: [\n                    { label: this.localizeService.decode(\"scheduler.step.fileImport\"), status: \"COMPLETE\" },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.staging\"),\n                        status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.validation\"),\n                        status: job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n                    },\n\n                    {\n                        label: this.localizeService.decode(\"scheduler.step.databaseImport\"),\n                        status: job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n                    }\n                ]\n            };\n\n            job = job as ScheduledJobOverview;\n            job.stepConfig = stepConfig;\n        });\n    }\n\n    getCompletedStatus(jobStage: string, targetStage: string): string {\n        let order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n        let jobPos = order.indexOf(jobStage);\n        let targetPos = order.indexOf(targetStage);\n        if (targetPos < jobPos) {\n            return \"COMPLETE\";\n        } else {\n            return \"\";\n        }\n    }\n\n    getJobStatus(job: ScheduledJob): string {\n        if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n            return \"WORKING\";\n        } else if (job.status === \"FEEDBACK\") {\n            return \"STUCK\";\n        }\n\n        return \"\";\n    }\n\n    onViewAllCompleteJobs(): void {\n        this.onCompleteJobsPageChange(1);\n\n        this.isViewAllOpen = true;\n    }\n\n    onView(code: string): void {\n        this.router.navigate([\"/registry/master-list-history/\", code]);\n    }\n\n    onActiveJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.activeJobsPage = response;\n            this.formatStepConfig(this.activeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCompleteJobsPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n            this.completeJobsPage = response;\n            this.formatStepConfig(this.completeJobsPage);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(job.configuration).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onResolveScheduledJob(historyId: string, job: ScheduledJob): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.bsModalRef.hide();\n\n                for (let i = 0; i < this.activeJobsPage.resultSet.length; ++i) {\n                    let activeJob = this.activeJobsPage.resultSet[i];\n\n                    if (activeJob.jobId === job.jobId) {\n                        this.activeJobsPage.resultSet.splice(i, 1);\n                        break;\n                    }\n                }\n\n                this.onViewAllCompleteJobs();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.resultSet | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    <span class=\"date-string-display\">\n                                                      <date-text [date]=\"job.createDate\"></date-text>\n                                                    </span>\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                            <button *ngIf=\"job.stage === 'IMPORT_RESOLVE'\" type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t                    </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.resultSet.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.resultSet | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                              <span class=\"date-string-display\">\n                                <date-text [date]=\"job.createDate\"></date-text>\n                              </span>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <span class=\"date-string-display\">\n                              <date-text [date]=\"job.lastUpdateDate\"></date-text>\n                            </span>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.resultSet.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router, ActivatedRoute } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { JobConflictModalComponent } from \"./conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./conflict-widgets/reupload-modal.component\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ScheduledJob } from \"@registry/model/registry\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { Subscription } from \"rxjs\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./job.component.html\",\n    styleUrls: [\"./scheduled-jobs.css\"]\n})\nexport class JobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    job: ScheduledJob;\n    allSelected: boolean = false;\n    historyId: string = \"\";\n\n    page: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(public service: RegistryService, private modalService: BsModalService,\n        private router: Router, private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        this.onPageChange(1);\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"IMPORT_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: any): void {\n        for (let i = 0; i < this.page.resultSet.length; ++i) {\n            let pageConflict = this.page.resultSet[i];\n\n            if (pageConflict.id === problem.id) {\n                this.page.resultSet.splice(i, 1);\n            }\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (probType === \"net.geoprism.registry.geoobject.ImportOutOfRangeException\") {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.importOutOfRange\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: any): void {\n        // this.router.navigate( ['/registry/master-list-history/', code] )\n\n        this.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.problem = problem;\n        this.bsModalRef.content.job = this.job;\n        this.bsModalRef.content.onConflictAction.subscribe(data => {\n            if (data.action === \"RESOLVED\") {\n                this.onProblemResolved(data.data);\n            }\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n            this.job = response;\n\n            if (this.job.stage === \"IMPORT_RESOLVE\") {\n                this.page = this.job.importErrors;\n            } else if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.page = this.job.problems;\n\n                for (let i = 0; i < this.page.resultSet.length; ++i) {\n                    let problem = this.page.resultSet[i];\n\n                    if (problem.type === \"RowValidationProblem\") {\n                        this.hasRowValidationProblem = true;\n                    }\n                }\n            }\n\n            if (response.exception) {\n                this.error(response.exception);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onViewAllActiveJobs(): void {\n\n    }\n\n    onViewAllCompleteJobs(): void {\n\n    }\n\n    toggleAll(): void {\n        this.allSelected = !this.allSelected;\n\n        this.job.importErrors.resultSet.forEach(row => {\n            row.selected = this.allSelected;\n        });\n    }\n\n    onReuploadAndResume(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.job = this.job;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.router.navigate([\"/registry/scheduled-jobs\"]);\n        });\n    }\n\n    onResolveScheduledJob(historyId: string): void {\n        if (this.page.resultSet.length === 0) {\n            this.service.resolveScheduledJob(historyId).then(response => {\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n\n            if (this.job.stage === \"VALIDATION_RESOLVE\") {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n            } else {\n                this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n                this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n            }\n\n            this.bsModalRef.content.type = ModalTypes.danger;\n\n            this.bsModalRef.content.onConfirm.subscribe(data => {\n                this.service.resolveScheduledJob(historyId).then(response => {\n                    this.router.navigate([\"/registry/scheduled-jobs\"]);\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            });\n        }\n    }\n\n    onCancelScheduledJob(historyId: string): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        this.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.ioService.cancelImport(this.job.configuration).then(response => {\n                // this.bsModalRef.hide()\n                this.router.navigate([\"/registry/scheduled-jobs\"]);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              <span class=\"date-string-display\">\n                                <date-text [date]=\"job.createDate\"></date-text>\n                              </span>\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.resultSet.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.resultSet != null && page.resultSet.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJobOverview } from \"@registry/model/registry\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"job-conflict-modal\",\n    templateUrl: \"./job-conflict-modal.component.html\",\n    styleUrls: []\n})\nexport class JobConflictModalComponent implements OnInit {\n\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public bsModalRef: BsModalRef) {\n        this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    onProblemResolvedListener(problem: any): void {\n        this.onConflictAction.next({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener(problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ScheduledJob, ImportError } from \"@registry/model/registry\";\n\nimport { GeoObjectEditorComponent } from \"../../geoobject-editor/geoobject-editor.component\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"import-problem-widget\",\n    templateUrl: \"./import-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ImportProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId(null);\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolved.emit(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n        }\n\n        if (probType === \"net.geoprism.registry.DataNotFoundException\") {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.datanotfound\");\n        }\n\n        if (\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\" ||\n            probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.permission\");\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if (\n            probType === \"com.runwaysdk.dataaccess.DuplicateDataException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectException\" ||\n            probType === \"net.geoprism.registry.DuplicateGeoObjectCodeException\"\n        ) {\n            return this.lService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>:\n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div *ngIf=\"problem.object != null && problem.object.geoObject != null\" style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"parent-reference-problem-widget\",\n    templateUrl: \"./parent-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return new Observable((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.code, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Observable } from \"rxjs\";\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\n@Component({\n    selector: \"term-reference-problem-widget\",\n    templateUrl: \"./term-reference-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n    ) { }\n\n    ngOnInit(): void {\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(conflict: any): Observable<any> {\n        return Observable.create((observer: any) => {\n            this.iService.getTermSuggestions(conflict.mdAttributeId, this.searchLabel, \"20\").then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch): void {\n        this.termId = e.item.value;\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            classifierId: this.termId,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { Observable } from \"rxjs\";\n\nimport { TypeaheadMatch } from \"ngx-bootstrap/typeahead\";\n\nimport { ScheduledJob } from \"@registry/model/registry\";\nimport { RegistryService, IOService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"row-validation-problem-widget\",\n    templateUrl: \"./row-validation-problem-widget.component.html\",\n    styleUrls: []\n})\nexport class RowValidationProblemWidgetComponent implements OnInit {\n\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful\n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: RegistryService, private iService: IOService, private dateService: DateService,\n        private lService: LocalizationService, public bsModalRef: BsModalRef\n    ) { }\n\n    ngOnInit(): void {\n        // this.onConflictAction = new Subject();\n\n        // this.searchLabel = this.problem.label;\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n    }\n\n    getString(conflict: any): string {\n        return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n        return conflict.type;\n    }\n\n    getTypeAheadObservable(typeCode: string, conflict: any): Observable<any> {\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return new Observable((observer: any) => {\n            this.service.getGeoObjectSuggestions(this.searchLabel, typeCode, parentCode, null, hierarchyCode, this.job.startDate, this.job.endDate).then(results => {\n                observer.next(results);\n            });\n        });\n    }\n\n    typeaheadOnSelect(e: TypeaheadMatch, conflict: any): void {\n        this.service.getParentGeoObjects(e.item.code, conflict.typeCode, [], false, this.job.startDate).then(ancestors => {\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onIgnore(): void {\n        let cfg = {\n            resolution: \"IGNORE\",\n            validationProblemId: this.problem.id\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    onCreateSynonym(): void {\n        let cfg = {\n            validationProblemId: this.problem.id,\n            resolution: \"SYNONYM\",\n            code: this.problem.parent.properties.code,\n            typeCode: this.problem.parent.properties.type,\n            label: this.problem.label\n        };\n\n        this.service.submitValidationResolve(cfg).then(response => {\n            this.onProblemResolved.emit(this.problem);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        <localize key=\"importproblem.started.date.label\"></localize>: \n                        <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                            <date-text [date]=\"job.createDate\"></date-text>\n                        </span>\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { FileUploader, FileUploaderOptions } from 'ng2-file-upload';\n\nimport { ModalTypes } from '@shared/model/modal';\nimport { LocalizationService, EventService } from '@shared/service';\nimport { ErrorHandler } from '@shared/component';\n\nimport { ScheduledJob } from '@registry/model/registry';\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: []\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: registry.contextPath + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    this.errorMessage = ErrorHandler.getMessageFromError(err);\n  }\n}\n","<div class=\"modal-body\">\n\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\" role=\"alert\">{{errorMessage}}</div>\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <div>{{message}}</div>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport { DatePipe } from \"@angular/common\";\n\nimport { TaskService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"task-viewer\",\n    templateUrl: \"./task-viewer.component.html\",\n    styleUrls: [\"./task-viewer.component.css\"],\n    providers: [DatePipe]\n})\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    completedTasks: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    isViewAllOpen: boolean = false;\n\n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n\n    pollingData: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private taskService: TaskService, private localizeService: LocalizationService, private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onInProgressTasksPageChange(1);\n    }\n\n    onInProgressTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.inProgressTasks.pageSize, \"UNRESOLVED\").then(page => {\n            this.inProgressTasks = page;\n        });\n    }\n\n    onCompletedTasksPageChange(pageNumber: any): void {\n        this.taskService.getMyTasks(pageNumber, this.completedTasks.pageSize, \"RESOLVED\").then(page => {\n            this.completedTasks = page;\n        });\n    }\n\n    onCompleteTask(task: any): void {\n        // this.isViewAllOpen = true;\n\n        this.taskService.completeTask(task.id).then(() => {\n            const index = this.inProgressTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.inProgressTasks.resultSet.splice(index, 1);\n            }\n\n            if(this.isViewAllOpen) {\n                this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            }\n        });\n    }\n\n    onMoveTaskToInProgress(task: any): void {\n        this.isViewAllOpen = true;\n\n        this.taskService.setTaskStatus(task.id, \"UNRESOLVED\").then(() => {\n            const index = this.completedTasks.resultSet.findIndex(t => t.id === task.id);\n\n            if (index !== -1) {\n                this.completedTasks.resultSet.splice(index, 1);\n            }\n\n            this.completedTasks.resultSet.splice(index, 1);\n            this.inProgressTasks.resultSet.push(task);\n        });\n    }\n\n    onToggleCompletedTasks(): void {\n        this.isViewAllOpen = !this.isViewAllOpen;\n\n        if (this.isViewAllOpen) {\n            this.onCompletedTasksPageChange(1);\n        }\n    }\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <div id=\"app-container\" class=\"container\">\n\n    <message></message>\n\n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n\n    <div class=\"row\" *ngIf=\"inProgressTasks.resultSet.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n          <div\n            *ngFor=\"let task of inProgressTasks.resultSet | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    <date-text [date]=\"task.createDate\"></date-text>\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked\n                      id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\"\n                      (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\"\n                      name=\"{{task.id}}-completed\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"inProgressTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <h2 class=\"col-md-9\">\n        <localize key=\"tasks.completedTasksTitle\"></localize>\n      </h2>\n      <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onToggleCompletedTasks()\"\n        class=\"btn btn-default pull-right\" role=\"button\">\n        <localize *ngIf=\"!isViewAllOpen\" key=\"tasks.viewCompletedTasksButton\"></localize>\n        <localize *ngIf=\"isViewAllOpen\" key=\"tasks.hideCompletedTasksButton\"></localize>\n      </button>\n    </div>\n    <hr>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.resultSet.length > 0\">\n          <div\n            *ngFor=\"let task of completedTasks.resultSet | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\"\n            class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{task.title}}</h4>\n            </div>\n\n            <div class=\"panel-body\">\n              <div class=\"row\">\n                <div class=\"col-md-9\">\n                  <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.createDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\" style=\"margin-right:30px;\">\n                    <date-text [date]=\"task.createDate\"></date-text>\n                  </span>\n                  <label style=\"margin-right:20px;\">\n                    <localize key=\"tasks.completeDateLabel\"></localize>\n                  </label>\n                  <span class=\"date-string-display\">\n                    <date-text [date]=\"task.completedDate\"></date-text>\n                  </span>\n                </div>\n                <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\"\n                      (click)=\"onMoveTaskToInProgress(task)\" [id]=\"task.id+ '-inProgress'\" [name]=\"task.id+ '-inProgress'\"\n                      value=\"true\">\n                    <span>\n                      <localize key=\"tasks.open\"></localize>\n                    </span>\n                  </label>\n                  <label class=\"radio-inline radio\">\n                    <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\"\n                    [id]=\"task.id+ '-completed'\" [name]=\"task.id+ '-completed'\" value=\"false\">\n                    <span>\n                      <localize key=\"tasks.complete\"></localize>\n                    </span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.resultSet.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\">\n            </pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.resultSet.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\">\n            <localize key=\"tasks.no.completed.tasks.message\"></localize>\n          </p>\n        </div>\n      </div>\n    </div>\n\n\n  </div>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\nimport { ListTypeService } from '@registry/service/list-type.service';\nimport { ListTypeVersion } from '@registry/model/list-type';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-export-synchronization-config',\n  templateUrl: './fhir-export-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirExportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  subscription: Subscription = null;\n  versions: { [key: string]: ListTypeVersion[] } = {};\n  implementations: { className: string, label: string }[] = [];\n  lists: {label:string, oid:string}[] = [];\n\n  constructor(private service: SynchronizationConfigService, private rService: ListTypeService) { }\n\n  ngOnInit(): void {\n\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirExportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        levels: [],\n        hierarchy: null\n      }\n    }\n\n    if (this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        var level = this.config.configuration.levels[i];\n\n        // Get version options\n        this.onSelectMasterList(level);\n      }\n    }\n    else {\n      this.config.configuration.levels = [];\n    }\n\n    // Get \n    this.rService.getAllLists().then(response => {\n      this.lists = response;\n    });\n  }\n\n  onSelectMasterList(level: FhirSyncLevel): void {\n\n    if (level.masterListId != null && level.masterListId.length > 0) {\n\n      this.rService.getPublicVersions(level.masterListId).then(list => {\n        this.versions[level.masterListId] = list;\n      });\n    }\n    else {\n      this.versions[level.masterListId] = null;\n    }\n  }\n\n  addLevel(): void {\n    var level = {\n      masterListId: null,\n      versionId: null,\n      level: this.config.configuration.levels.length,\n    };\n\n    this.config.configuration.levels.push(level);\n  }\n\n  removeLevel(i: number): void {\n    this.config.configuration.levels.splice(i, 1);\n\n    // Reorder the level\n    if (this.config.configuration != null && this.config.configuration.levels != null) {\n      for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n        this.config.configuration.levels[i].level = i;\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.units\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <div class=\"list-table-wrapper\">\n            <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 3%\">\n                            <localize key=\"settings.external.synchronization.level.label\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.field\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"masterlist.forDate\"></localize>\n                        </th>\n                        <th style=\"width: 25%\">\n                            <localize key=\"synchronization.config.implementation\"></localize>\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let level of config.configuration.levels; let i = index;\"\n                        [style.background-color]=\"'#F7F7F7'\">\n                        <td style=\"width: 3%\">\n                            <label style=\"padding: 10px 0; margin: 0;\">\n                                <localize key=\"sync.level.label\"></localize> {{level.level + 1}}\n                            </label>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.masterListId\" (change)=\"onSelectMasterList(level)\"\n                                [name]=\"'masterList' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let list of lists\" [value]=\"list.oid\">{{list.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select *ngIf=\"versions[level.masterListId] != null\" [(ngModel)]=\"level.versionId\"\n                                [name]=\"'version' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let version of versions[level.masterListId]\" [value]=\"version.oid\">\n                                    {{version.forDate}} (<localize key=\"list.type.version\"></localize> {{version.versionNumber}})\n                                </option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <select [(ngModel)]=\"level.implementation\" [name]=\"'implementation' + level.level\" required>\n                                <option></option>\n                                <option *ngFor=\"let implementation of implementations\"\n                                    [value]=\"implementation.className\">{{implementation.label}}</option>\n                            </select>\n                        </td>\n                        <td style=\"width: 20%\">\n                            <div>\n                                <a style=\"padding: 10px;\" (click)=\"removeLevel(i)\"\n                                    [title]=\"'button.delete.helptext' | localize\">\n                                    <i class=\"fa fa-trash-o ico-remove\"></i> <label\n                                        style=\"cursor: pointer; margin-left: 9px;\">\n                                        <localize key=\"sync.level.delete\"></localize>\n                                    </label>\n                                </a>\n                            </div>\n                        </td>\n                    </tr>\n                    <tr>\n                        <td class=\"button-column\"><a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\"\n                                (click)=\"addLevel()\"></a></td>\n                    </tr>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SynchronizationConfig, OrgSyncInfo, GeoObjectType } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { AttributeConfigInfo, DHIS2AttributeMapping, SyncLevel } from \"@registry/model/sync\";\n\nlet DEFAULT_MAPPING_STRATEGY = \"net.geoprism.registry.etl.DHIS2AttributeMapping\";\n\nexport interface GOTAttributeConfig {\n  geoObjectTypeCode?: string;\n  mappings: DHIS2AttributeMapping[];\n  attrConfigInfos: AttributeConfigInfo[];\n}\nexport interface LevelRow {\n  isAttributeEditor: boolean;\n\n  level?: SyncLevel;\n  levelNum?: number;\n\n  attrCfg?: GOTAttributeConfig;\n}\n\n@Component({\n\n    selector: \"dhis2-synchronization-config\",\n    templateUrl: \"./dhis2-synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class Dhis2SynchronizationConfigComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() cOrg: OrgSyncInfo = null;\n\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n\n  organizations: OrgSyncInfo[] = [];\n\n  types: GeoObjectType[] = [];\n\n  levelRows: LevelRow[] = [];\n\n  orgUnitGroups: any[] = [];\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    // Get the types\n    // this.registryService.getGeoObjectTypes(null, [this.config.hierarchy]).then(types => {\n    //   this.types = types;\n    // });\n\n      if (this.config.configuration == null) {\n          this.config.configuration = {\n              levels: [],\n              hierarchyCode: null\n          }\n      }\n\n      this.levelRows = [];\n\n      if (this.config.configuration.levels != null) {\n          for (var i = 0; i < this.config.configuration.levels.length; ++i) {\n              var level = this.config.configuration.levels[i];\n\n              var levelRow: LevelRow = { level: level, levelNum: i, isAttributeEditor: false };\n\n              this.levelRows.push(levelRow);\n          }\n      } else {\n          this.config.configuration.levels = [];\n      }\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      this.fieldChange.subscribe(() => {\n          this.clearMappingData();\n      });\n  }\n\n  ngOnDestroy(): void {\n      this.fieldChange.unsubscribe();\n  }\n\n  onChangeHierarchy(): void {\n      this.clearMappingData();\n  }\n\n  buildDefaultMappings(): DHIS2AttributeMapping[] {\n      return [\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"name\",\n              dhis2AttrName: \"name\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"displayLabel\",\n              externalId: null,\n              dhis2Id: \"shortName\",\n              dhis2AttrName: \"shortName\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"code\",\n              dhis2Id: \"code\",\n              externalId: null,\n              dhis2AttrName: \"code\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"openingDate\",\n              dhis2AttrName: \"openingDate\"\n          }\n          /*\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"createDate\",\n              externalId: null,\n              dhis2Id: \"created\",\n              dhis2AttrName: \"created\"\n          },\n          {\n              attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n              isOrgUnitGroup: false,\n              cgrAttrName: \"lastUpdateDate\",\n              externalId: null,\n              dhis2Id: \"lastUpdated\",\n              dhis2AttrName: \"lastUpdated\"\n          },\n          */\n      ];\n  }\n\n  clearMappingData(): void {\n      this.types = [];\n      this.levelRows = [];\n      this.config.configuration[\"levels\"] = [];\n\n      if (this.config.configuration.hierarchyCode != null) {\n          this.service.getConfigForES(this.config.system, this.config.configuration.hierarchyCode).then(esConfig => {\n              this.types = esConfig.types;\n              this.orgUnitGroups = esConfig.orgUnitGroups;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n\n      let lvl = {\n          type: null,\n          geoObjectType: null,\n          level: 0,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      this.config.configuration[\"levels\"] = [lvl];\n      this.levelRows.push({ level: lvl, levelNum: 0, isAttributeEditor: false });\n  }\n\n  onSelectLevelType(levelRow: LevelRow): void {\n      if (levelRow.level.type === \"RELATIONSHIPS\") {\n          levelRow.attrCfg.mappings = [];\n          levelRow.level.mappings = [];\n\n          let editorIndex = this.getEditorIndex();\n          if (editorIndex !== -1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n      } else {\n          if (levelRow.attrCfg.mappings.length === 0) {\n              levelRow.attrCfg.mappings = this.buildDefaultMappings();\n              levelRow.level.mappings = levelRow.attrCfg.mappings;\n\n              let len = levelRow.level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = levelRow.level.mappings[i];\n\n                  levelRow.attrCfg.attrConfigInfos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n          }\n      }\n  }\n\n  deleteMapping(levelRow: LevelRow, index: number): void {\n      levelRow.attrCfg.mappings.splice(index, 1);\n  }\n\n  addNewMapping(levelRow: LevelRow): void {\n      levelRow.attrCfg.mappings.push({\n          attributeMappingStrategy: DEFAULT_MAPPING_STRATEGY,\n          cgrAttrName: null,\n          dhis2AttrName: null,\n          externalId: null,\n          terms: []\n      });\n  }\n\n  addLevel(): void {\n      var lvl = {\n          type: null,\n          geoObjectType: null,\n          level: this.config.configuration.levels.length,\n          mappings: [],\n          orgUnitGroupId: null\n      };\n      var len = this.config.configuration[\"levels\"].push(lvl);\n      this.levelRows.push({ level: lvl, levelNum: len - 1, isAttributeEditor: false });\n  }\n\n  removeLevel(levelNum: number, levelRowIndex: number): void {\n      if (levelNum < this.config.configuration[\"levels\"].length) {\n          var editorIndex = this.getEditorIndex();\n          if (editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          this.levelRows.splice(levelRowIndex, 1);\n\n          var newLevelNum = 0;\n          for (var i = 0; i < this.levelRows.length; ++i) {\n              var levelRow: LevelRow = this.levelRows[i];\n\n              levelRow.levelNum = newLevelNum;\n\n              if (!levelRow.isAttributeEditor) {\n                  newLevelNum = newLevelNum + 1;\n              }\n          }\n\n          this.config.configuration[\"levels\"].splice(levelNum, 1);\n      }\n  }\n\n  getEditorIndex(): number {\n      for (var i = 0; i < this.levelRows.length; ++i) {\n          var levelRow = this.levelRows[i];\n\n          if (levelRow.isAttributeEditor) {\n              return i;\n          }\n      }\n\n      return -1;\n  }\n\n  configureAttributes(levelRow: any): void {\n      var editorIndex = this.getEditorIndex();\n\n      if (editorIndex !== -1) {\n          this.levelRows.splice(editorIndex, 1);\n\n          if (editorIndex === levelRow.levelNum + 1) {\n              return;\n          }\n      }\n\n      this.onSelectGeoObjectType(levelRow.level.geoObjectType, levelRow.levelNum, false);\n  }\n\n  getTermOptions(info: AttributeConfigInfo, dhis2Id: string) {\n      for (var i = 0; i < info.dhis2Attrs.length; ++i) {\n          var dhis2Attr = info.dhis2Attrs[i];\n\n          if (dhis2Attr.dhis2Id === dhis2Id) {\n              return dhis2Attr.options;\n          }\n      }\n  }\n\n  onChangeDHIS2Attr(mapping: DHIS2AttributeMapping) {\n      if (mapping.dhis2Id == null || mapping.dhis2Id === \"\") {\n          if (mapping.terms != null) {\n              mapping.terms = {};\n          }\n\n          mapping.dhis2AttrName = null;\n\n          return;\n      }\n\n      mapping.terms = {};\n\n      let len = mapping.info.dhis2Attrs.length;\n      for (let i = 0; i < len; ++i) {\n          if (mapping.info.dhis2Attrs[i].dhis2Id === mapping.dhis2Id) {\n              if (mapping.info.dhis2Attrs[i].dhis2Id !== mapping.info.dhis2Attrs[i].name) {\n                  mapping.externalId = mapping.info.dhis2Attrs[i].dhis2Id;\n              } else {\n                  mapping.externalId = null;\n              }\n              mapping.dhis2AttrName = mapping.info.dhis2Attrs[i].name;\n          }\n      }\n  }\n\n  onSelectGeoObjectType(geoObjectTypeCode: string, levelRowIndex: number, isDifferentGot: boolean = true) {\n      if (geoObjectTypeCode === \"\" || geoObjectTypeCode == null) {\n          var levelRow: LevelRow = this.levelRows[levelRowIndex];\n\n          levelRow.attrCfg = null;\n          levelRow.level.mappings = [];\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex === levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n          }\n\n          return;\n      }\n\n      var attrCfg = this.levelRows[levelRowIndex].attrCfg;\n      if (attrCfg != null && attrCfg.geoObjectTypeCode === geoObjectTypeCode) {\n          // Resume an editing session on attributes that we fetched previously\n\n          var editorIndex = this.getEditorIndex();\n\n          if (editorIndex !== -1 && editorIndex !== levelRowIndex + 1) {\n              this.levelRows.splice(editorIndex, 1);\n\n              if (editorIndex < levelRowIndex) {\n                  levelRowIndex = levelRowIndex - 1;\n              }\n          }\n\n          this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: attrCfg });\n      } else {\n          this.service.getCustomAttrCfg(geoObjectTypeCode, this.config.system).then((infos: AttributeConfigInfo[]) => {\n              var editorIndex = this.getEditorIndex();\n              var levelRow: LevelRow = this.levelRows[levelRowIndex];\n              var level = levelRow.level;\n\n              if (level.mappings == null) {\n                  level.mappings = [];\n              }\n\n              if (level.mappings.length === 0 || isDifferentGot) {\n                  level.mappings = this.buildDefaultMappings();\n              }\n\n              let len = level.mappings.length;\n              for (let i = 0; i < len; ++i) {\n                  let mapping = level.mappings[i];\n\n                  infos.forEach((info) => {\n                      if (info.cgrAttr.name === mapping.cgrAttrName) {\n                          mapping.info = info;\n                      }\n                  });\n              }\n\n              levelRow.attrCfg = { geoObjectTypeCode: geoObjectTypeCode, mappings: level.mappings, attrConfigInfos: infos };\n\n              if (editorIndex !== -1 && (editorIndex === levelRowIndex + 1 || infos.length > 0)) {\n                  this.levelRows.splice(editorIndex, 1);\n\n                  if (editorIndex < levelRowIndex) {\n                      levelRowIndex = levelRowIndex - 1;\n                  }\n              }\n\n              if (!isDifferentGot) {\n                  this.levelRows.splice(levelRowIndex + 1, 0, { isAttributeEditor: true, attrCfg: levelRow.attrCfg, level: levelRow.level, levelNum: levelRow.levelNum });\n              }\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  mapCgrAttr(info: AttributeConfigInfo, mapping: DHIS2AttributeMapping) {\n      if (info == null) {\n          mapping.cgrAttrName = null;\n          mapping.info = null;\n          mapping.dhis2AttrName = null;\n          mapping.externalId = null;\n          mapping.terms = null;\n          mapping.isOrgUnitGroup = null;\n          return;\n      }\n\n      mapping.cgrAttrName = info.cgrAttr.name;\n      mapping.info = info;\n      mapping.dhis2AttrName = null;\n      mapping.externalId = null;\n      mapping.terms = {};\n      mapping.isOrgUnitGroup = false;\n      mapping.attributeMappingStrategy = info.attributeMappingStrategies[0];\n  }\n\n  onChangeTargetType(mapping: DHIS2AttributeMapping): void {\n      mapping.externalId = null;\n\n      for (const key in mapping.terms) {\n          if (mapping.terms.hasOwnProperty(key)) {\n              mapping.terms[key] = null;\n          }\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.onError.emit(err);\n  }\n\n}\n","      <div>\n        <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.hierarchy\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"select\">\n              <select type=\"text\" [(ngModel)]=\"config.configuration.hierarchyCode\" name=\"hierarchy\" (change)='onChangeHierarchy()' [disabled]=\"config.oid != null\" required>\n                <option></option>\n                <option *ngFor=\"let hierarchy of cOrg.hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n              </select>\n            </span>\n          </div>\n        </div>\n        \n        <div *ngIf=\"config.configuration.hierarchyCode != null\" class=\"row-holder\" >\n      \n          <div class=\"label-holder\">\n            <label><localize key=\"synchronization.config.units\"></localize></label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"list-table-wrapper\">\n              <table id=\"manage-systems-table\" class=\"list-table table table-bordered\">\n                <thead>\n                  <tr>\n                    <th style=\"width:3%\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"width:25%\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                    <th style=\"width:17%\">\n                      <localize key=\"synchronization.config.orgUnitGroup\"></localize>\n                    </th>\n                    <th style=\"width:25%; text-align: center;\">\n                      <localize key=\"settings.external.synchronization.actions.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let levelRow of levelRows; let i = index;\" [style.background-color]=\"levelRow.isAttributeEditor === false ? '#F7F7F7' : ''\">\n                    <td style=\"width:3%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <label style=\"padding: 10px 0; margin: 0;\"><localize key=\"sync.level.label\"></localize> {{levelRow.levelNum + 1}}</label>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.geoObjectType\" (change)=\"onSelectGeoObjectType(levelRow.level.geoObjectType, i)\" [name]=\"'geoObjectType' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label.localizedValue}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <select type=\"text\" (change)=\"onSelectLevelType(levelRow)\" [(ngModel)]=\"levelRow.level.type\" [name]=\"'type' + levelRow.levelNum\" required>\n                        <option></option>\n                        <option value=\"ORG_UNITS\"><localize key=\"synchronization.config.units\"></localize></option>\n                        <option value=\"RELATIONSHIPS\"><localize key=\"synchronization.config.relationships\"></localize></option>\n                        <option value=\"ALL\"><localize key=\"synchronization.config.all\"></localize></option>\n                         <option value=\"NONE\"><localize key=\"synchronization.config.none\"></localize></option>\n                      </select>\n                    </td>\n                    <td style=\"width:17%\" *ngIf=\"levelRow.isAttributeEditor === false && orgUnitGroups.length > 0\">\n                      <select type=\"text\" [(ngModel)]=\"levelRow.level.orgUnitGroupId\" [name]=\"'group' + levelRow.levelNum\">\n                        <option></option>\n                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                      </select>\n                    </td>\n                    <td style=\"width:25%\" *ngIf=\"levelRow.isAttributeEditor === false\">\n                      <div>\n                        <a style=\"padding: 10px;\" (click)=\"removeLevel(levelRow.levelNum, i)\" [title]=\"'button.delete.helptext' | localize\">\n                          <i class=\"fa fa-trash-o ico-remove\"></i>\n                          <label style=\"cursor:pointer; margin-left:9px;\"><localize key=\"sync.level.delete\"></localize></label>\n                        </a> \n                      </div>\n                      <div>\n                        <a *ngIf=\"levelRow.level.geoObjectType && (levelRow.level.type === 'ORG_UNITS' || levelRow.level.type === 'ALL')\" style=\"padding: 10px;\" (click)=\"configureAttributes(levelRow)\" [title]=\"'sync.attr.configureAttributes.helptext' | localize\">\n                          <i class=\"fa fa-edit\"></i>\n                          <label style=\"cursor:pointer; margin-left:3px;\"><localize key=\"sync.attr.attributes.editButton\"></localize></label>\n                        </a> \n                      </div>\n                    </td>\n                    <td colspan=\"5\" *ngIf=\"levelRow.isAttributeEditor === true\">\n                      <h4><localize key=\"sync.attr.attributes.title\"></localize></h4>\n                      <table class=\"table table-bordered table-striped\" style=\"margin-left:80px; width: calc(100% - 80px)\">\n\n                        <colgroup>\n                          <col width=\"5%\">\n                          <col width=\"95%\">\n                        </colgroup>\n                        <tbody>\n                          <tr *ngFor=\"let mapping of levelRow.attrCfg.mappings; let mappingIndex = index;\">\n                            <td colspan=\"2\" class=\"row-holder\">\n                              <table style=\"width:80%; margin-top:15px; margin-bottom: 10px;\">\n                                <thead>\n                                <tr>\n                                  <th style=\"width:5%\"></th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.sourceAttribute\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label><localize key=\"sync.attr.type\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\"><localize key=\"sync.attr.targetTypeHeader\"></localize></label>\n                                  </th>\n                                  <th style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\">\n                                      <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.targetAttribute\"></localize>\n                                    </label>\n                                  </th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                <tr>\n                                  <td style=\"width:5%\">\n                                    <i (click)=\"deleteMapping(levelRow, mappingIndex)\" class=\"fa fa-times\"></i>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <select style=\"width:95%\" [(ngModel)]=\"mapping.cgrAttrName\" (change)=\"mapCgrAttr($event.target.selectedIndex == 0 ? null : levelRow.attrCfg.attrConfigInfos[$event.target.selectedIndex-1], mapping)\" [name]=\"'sourceAttrSelect' + i + '-' + mappingIndex + (mapping.cgrAttrName ? mapping.cgrAttrName : '')\">\n                                      <option [ngValue]=\"null\"></option>\n                                      <option *ngFor=\"let info of levelRow.attrCfg.attrConfigInfos\" [ngValue]=\"info.cgrAttr.name\">\n                                        <label style=\"color:#999;\">{{info.cgrAttr.label}}</label>\n                                      </option>\n                                    </select>\n                                  </td>\n                                  <td style=\"width:23%\">\n                                    <label *ngIf=\"mapping.info\" style=\"color:#999;\">{{mapping.info.cgrAttr.typeLabel}}</label>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type === 'term'\" style=\"margin-right:20px; width:23%\">\n                                    <select style=\"width:95%\" *ngIf=\"mapping.info.cgrAttr.type === 'term'\" [(ngModel)]=\"mapping.isOrgUnitGroup\" (change)=\"onChangeTargetType(mapping)\" [name]=\"'isOrgUnitGroup' + i + mapping.info.cgrAttr.name\">\n                                      <option [ngValue]=\"false\"><localize key=\"sync.attr.targetTypeOptionSet\"></localize></option>\n                                      <option [ngValue]=\"true\"><localize key=\"sync.attr.targetTypeOrgUnitGroup\"></localize></option>\n                                    </select>\n                                  </td>\n                                  <td *ngIf=\"mapping.info && mapping.info.cgrAttr.type !== 'term' && mapping.info.cgrAttr.name\" style=\"float:right; margin-right:20px; width:23%\">\n                                    <label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label>\n                                  </td>\n                                  <td style=\"width:23%\" *ngIf=\"mapping.info\">\n                                    <select *ngIf=\"mapping.info.dhis2Attrs.length > 0 && !mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.dhis2Id\" [ngModelOptions]=\"{standalone: true}\" (change)=\"onChangeDHIS2Attr(mapping)\">\n                                      <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                      <option [ngValue]=\"dhis2Attr.dhis2Id\" *ngFor=\"let dhis2Attr of mapping.info.dhis2Attrs\">\n                                        {{dhis2Attr.name}}\n                                      </option>\n                                    </select>\n                                    <label *ngIf=\"mapping.info.dhis2Attrs.length == 0 && !mapping.isOrgUnitGroup\" style=\"color:#999;\"><localize key=\"sync.noValid\"></localize></label>\n                                  </td>\n                                </tr>\n                              </tbody>\n                            </table>\n                            <div *ngIf=\"mapping.info && ((mapping.externalId != null && mapping.externalId.length > 0) || mapping.isOrgUnitGroup)\">\n                              <table *ngFor=\"let term of mapping.info.terms\" class=\"row\" style=\"width:80%; margin-left:80px;\">\n                                <thead>\n                                  <tr>\n                                    <th style=\"width:25%\">\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label><localize key=\"sync.attr.term.cgrTerm\"></localize></label>\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <!-- To -->\n                                    </th>\n                                    <th style=\"width:25%\">\n                                      <label>\n                                        <localize *ngIf=\"!mapping.isOrgUnitGroup\" key=\"sync.attr.term.dhis2Option\"></localize>\n                                        <localize *ngIf=\"mapping.isOrgUnitGroup\" key=\"sync.attr.term.targetOrgUnitGroup\"></localize>\n                                      </label>\n                                    </th>\n                                  </tr>\n                                </thead>\n                                <tbody>\n                                  <tr>\n                                    <td></td>\n                                    <td><label style=\"color:#999;\">{{term.label}}</label></td>\n                                    <td style=\"float:right; margin-right:20px;\"><label style=\"color:#999;\"><localize key=\"sync.attr.to\"></localize></label></td>\n                                    <td>\n                                      <select *ngIf=\"!mapping.isOrgUnitGroup\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let option of getTermOptions(mapping.info, mapping.externalId)\" [value]=\"option.code\">\n                                          {{option.name}}\n                                        </option>\n                                      </select>\n                                      <select *ngIf=\"mapping.isOrgUnitGroup\" type=\"text\" [(ngModel)]=\"mapping.terms[term.code]\" [ngModelOptions]=\"{standalone: true}\">\n                                        <option [ngValue]=\"null\"><localize key=\"sync.notMapped\"></localize></option>\n                                        <option *ngFor=\"let group of orgUnitGroups\" [value]=\"group.id\">{{group.name}}</option>\n                                      </select>\n                                    </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </div>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td class=\"button-column\">\n                            <a class=\"fa fa-plus\" (click)=\"addNewMapping(levelRow)\" [title]=\"'sync.attr.attributes.add.tooltip' | localize\"></a>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </td>\n                </tr>\n                <tr>\n                  <td class=\"button-column\">\n                    <a class=\"fa fa-plus\" [title]=\"'sync.levels.add.tooltip' | localize\" (click)=\"addLevel()\"></a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>         \n        </div>\n      </div>\n    </div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\n\nimport { SynchronizationConfig } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { SynchronizationConfigModalComponent } from \"./synchronization-config-modal.component\";\n\n@Component({\n    selector: \"synchronization-config-manager\",\n    templateUrl: \"./synchronization-config-manager.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigManagerComponent implements OnInit {\n\n    message: string = null;\n\n    page: PageResult<SynchronizationConfig> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 20\n    };\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: SynchronizationConfigService, private lService: LocalizationService, private router: Router, private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.onPageChange(1);\n    }\n\n    onPageChange(pageNumber: number): void {\n        this.service.getPage(pageNumber, this.page.pageSize).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    create(): void {\n        this.service.edit(null).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(null, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onEdit(config: SynchronizationConfig): void {\n        this.service.edit(config.oid).then(response => {\n            let bsModalRef = this.modalService.show(SynchronizationConfigModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            bsModalRef.content.init(response.config, response.orgs);\n            bsModalRef.content.onSuccess.subscribe(() => {\n                this.onPageChange(this.page.pageNumber);\n            });\n        });\n    }\n\n    onRemove(config: SynchronizationConfig): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + config.label.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(config.oid).then(() => {\n                this.onPageChange(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(config: SynchronizationConfig): void {\n        this.router.navigate([\"/registry/synchronization-config/\", config.oid]);\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div class=\"heading\">\n      <h2>\n        <localize key=\"synchronization.config.manager\"></localize>\n      </h2>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th style=\"width: 70%;\"><localize key=\"synchronization.config.label\"></localize></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let config of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"clickable\">\n              <td style=\"width: 70%; vertical-align: middle;\">\n                <a [routerLink]=\"'/registry/synchronization-config/' + config.oid\" routerLinkActive=\"active\"> {{config.label.localizedValue}} </a>\n              </td>\n              <td style=\"width: 30%; text-align: right;\">\n                <button type=\"submit\" (click)=\"onView(config)\" class=\"btn btn-primary\" role=\"button\">\n                  <localize key=\"modal.button.view\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onEdit(config)\" class=\"btn btn-default\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.edit\"></localize>\n                </button>\n                <button type=\"submit\" (click)=\"onRemove(config)\" class=\"btn btn-danger\" role=\"button\" style=\"margin-left: 5px;\">\n                  <localize key=\"modal.button.delete\"></localize>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n        <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n          <div class=\"col-md-6\">\n            <button type=\"submit\" (click)=\"create()\" class=\"btn btn-primary\" role=\"button\">\n              <localize key=\"hierarchy.management.button.create\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { SynchronizationConfig, OrgSyncInfo } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\n\n@Component({\n    selector: \"synchronization-config-modal\",\n    templateUrl: \"./synchronization-config-modal.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigModalComponent implements OnInit, OnDestroy {\n\n  message: string = null;\n\n  config: SynchronizationConfig = {\n      organization: null,\n      system: null,\n      hierarchy: null,\n      isImport: false,\n      label: this.lService.create(),\n      configuration: {}\n  };\n\n  organizations: OrgSyncInfo[] = [];\n\n  cOrg: OrgSyncInfo = null;\n  cSystem: { label: string, oid: string, type: string } = null;\n\n  fieldChange: Subject<string>;\n\n  /*\n   * Observable subject for MasterList changes.  Called when an update is successful\n   */\n  onSuccess: Subject<SynchronizationConfig>;\n\n  // eslint-disable-next-line no-useless-constructor\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private bsModalRef: BsModalRef) { }\n\n  ngOnInit(): void {\n      this.onSuccess = new Subject();\n      this.fieldChange = new Subject();\n  }\n\n  ngOnDestroy(): void {\n      this.onSuccess.unsubscribe();\n      this.fieldChange.unsubscribe();\n  }\n\n  init(config: SynchronizationConfig, organizations: OrgSyncInfo[]): void {\n      this.organizations = organizations;\n\n      if (config != null) {\n          this.config = config;\n\n          let oIndex = this.organizations.findIndex(org => org.code === this.config.organization);\n\n          if (oIndex !== -1) {\n              this.cOrg = this.organizations[oIndex];\n          }\n\n          let sIndex = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n          if (sIndex !== -1) {\n              this.cSystem = this.cOrg.systems[sIndex];\n          }\n      }\n  }\n\n  handleFieldChange(field: string): void {\n      this.fieldChange.next(field);\n  }\n\n  onOrganizationSelected(): void {\n      let index = this.organizations.findIndex(org => org.code === this.config.organization);\n\n      if (index !== -1) {\n          this.cOrg = this.organizations[index];\n      } else {\n          this.cOrg = null;\n      }\n\n      this.cSystem = null;\n\n      this.handleFieldChange(\"organization\");\n  }\n\n  onChangeExternalSystem(): void {\n      let index = this.cOrg.systems.findIndex(system => system.oid === this.config.system);\n\n      if (index !== -1) {\n          this.cSystem = this.cOrg.systems[index];\n      } else {\n          this.cSystem = null;\n      }\n\n      this.handleFieldChange(\"system\");\n  }\n\n  onSubmit(): void {\n    /*\n    let levelIndex = 0;\n    let len = this.levelRows.length;\n    for (let i = 0; i < len; ++i)\n    {\n      let levelRow: LevelRow = this.levelRows[i];\n\n      if (levelRow.isAttributeEditor)\n      {\n        continue;\n      }\n      else if (levelRow.attrCfg == null)\n      {\n        levelIndex++;\n        continue;\n      }\n\n      let mappings = this.config.configuration.levels[levelIndex].mappings;\n      let mappingsLen = levelRow.attrCfg.mappings.length;\n      for (let j = 0; j < mappingsLen; ++j)\n      {\n        let mapping = JSON.parse(JSON.stringify(levelRow.attrCfg.mappings[j]));\n        delete mapping.info;\n        mappings.push(mapping);\n      }\n\n      levelIndex++;\n    }\n    */\n\n      this.service.apply(this.config).then(cfg => {\n          this.onSuccess.next(cfg);\n          this.bsModalRef.hide();\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  cancel(): void {\n      if (this.config.oid != null) {\n          this.service.unlock(this.config.oid).then(() => {\n              this.bsModalRef.hide();\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      } else {\n          this.bsModalRef.hide();\n      }\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"synchronization.config.title\"></localize>\n    </h2>\n  </div>\n  <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && onSubmit()\">\n\n    <fieldset>\n      <div class=\"row-holder\" *ngFor=\"let localeValue of config.label.localeValues\">\n        <div class=\"label-holder\">\n          <label> <localize key=\"synchronization.config.label\"></localize> (<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n          </label>\n        </div>\n        <div class=\"holder\">\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.organization\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.organization\" name=\"organization\" (change)='onOrganizationSelected()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n      \n      <div *ngIf=\"cOrg != null\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label><localize key=\"synchronization.config.system\"></localize></label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"select\">\n            <select type=\"text\" [(ngModel)]=\"config.system\" name=\"system\" (change)='onChangeExternalSystem()' [disabled]=\"config.oid != null\" required>\n              <option></option>\n              <option *ngFor=\"let system of cOrg.systems\" [value]=\"system.oid\">{{system.label}}</option>\n            </select>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"cSystem != null && cSystem.type === 'DHIS2ExternalSystem'\">\n        <dhis2-synchronization-config [(config)]=\"config\" [cOrg]=\"cOrg\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></dhis2-synchronization-config>\n      </div>\n      <div *ngIf=\"cSystem != null && cSystem.type === 'FhirExternalSystem'\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>Synchronization Type</label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"col-md-3\" style=\"display: flex; align-items: center;\">\n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"!config.isImport\" name=\"isImport\" [value]=\"false\">\n                <span>Export</span>\n              </label>                \n              <label class=\"radio-inline radio\">\n                <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" [(ngModel)]=\"config.isImport\" [checked]=\"config.isImport\" name=\"isImport\" [value]=\"true\">\n                <span>Import</span>\n              </label>                \n            </div>          \n          </div>\n        </div>\n      \n        <fhir-export-synchronization-config *ngIf=\"config.isImport !== true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-export-synchronization-config>\n        <fhir-import-synchronization-config *ngIf=\"config.isImport === true\" [(config)]=\"config\" [fieldChange]=\"fieldChange\" (onError)=\"error($event)\"></fhir-import-synchronization-config>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>","import { Component, OnInit, Input, OnDestroy, EventEmitter, Output } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SynchronizationConfig } from '@registry/model/registry';\nimport { SynchronizationConfigService } from '@registry/service';\n\ninterface FhirSyncLevel {\n  masterListId: string;\n  versionId: string;\n  level: number;\n}\n\n@Component({\n  selector: 'fhir-import-synchronization-config',\n  templateUrl: './fhir-import-synchronization-config.component.html',\n  styleUrls: []\n})\nexport class FhirImportSynchronizationConfigComponent implements OnInit, OnDestroy {\n  message: string = null;\n\n  @Input() config: SynchronizationConfig;\n  @Input() fieldChange: Subject<string>;\n  @Output() onError = new EventEmitter<HttpErrorResponse>();\n  subscription: Subscription = null;\n\n  implementations: { className: string, label: string }[] = [];\n\n  constructor(private service: SynchronizationConfigService) { }\n\n  ngOnInit(): void {\n    this.reset();\n\n    this.subscription = this.fieldChange.subscribe((field: string) => {\n      if (field === 'organization' || field === 'system') {\n        this.reset();\n      }\n    });\n\n    this.service.getFhirImportImplementations().then(implementations => {\n      this.implementations = implementations;\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription != null) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  reset(): void {\n\n    if (this.config.configuration == null) {\n      this.config.configuration = {\n        implementation: null\n      }\n    }\n  }\n\n  error(err: HttpErrorResponse): void {\n    this.onError.emit(err);\n  }\n\n}\n","<div class=\"row-holder\">\n    <div class=\"label-holder\">\n        <label>\n            <localize key=\"synchronization.config.implementation\"></localize>\n        </label>\n    </div>\n    <div class=\"holder\">\n        <select [(ngModel)]=\"config.configuration.implementation\" name=\"implementation\" required>\n            <option></option>\n            <option *ngFor=\"let implementation of implementations\" [value]=\"implementation.className\">\n                {{implementation.label}}\n            </option>\n        </select>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\n\nimport { SynchronizationConfig, ExportScheduledJob } from \"@registry/model/registry\";\nimport { SynchronizationConfigService } from \"@registry/service\";\nimport { ErrorHandler } from \"@shared/component/error-handler/error-handler\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { Subscription } from \"rxjs\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"synchronization-config\",\n    templateUrl: \"./synchronization-config.component.html\",\n    styleUrls: []\n})\nexport class SynchronizationConfigComponent implements OnInit {\n\n  message: string = null;\n\n  config: SynchronizationConfig = null;\n\n  page: PageResult<ExportScheduledJob> = {\n      pageSize: 10,\n      pageNumber: 1,\n      count: 1,\n      resultSet: []\n  };\n\n  notifier: WebSocketSubject<{ type: string, content: any }>;\n  subscription: Subscription = null;\n\n  constructor(private service: SynchronizationConfigService, private lService: LocalizationService, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n      const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n      this.service.get(oid).then(config => {\n          this.config = config;\n          this.onPageChange(1);\n      });\n\n      let baseUrl = WebSockets.buildBaseUrl();\n\n      this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n      this.subscription = this.notifier.subscribe(message => {\n          if (message.type === \"DATA_EXPORT_JOB_CHANGE\") {\n              this.onPageChange(this.page.pageNumber);\n          }\n      });\n  }\n\n  ngOnDestroy() {\n      if (this.subscription != null) {\n          this.subscription.unsubscribe();\n      }\n\n      if (this.notifier != null) {\n          this.notifier.complete();\n      }\n  }\n\n  onRun(): void {\n      this.message = null;\n\n      this.service.run(this.config.oid).then(() => {\n      // Refresh the page\n          this.onPageChange(this.page.pageNumber);\n      }).catch((err: HttpErrorResponse) => {\n          this.error(err);\n      });\n  }\n\n  onGenerateFile(): void {\n      window.open(registry.contextPath + \"/synchronization-config/generate-file?oid=\" + encodeURIComponent(this.config.oid));\n  }\n\n  onPageChange(pageNumber: number): void {\n      if (this.config != null) {\n          this.message = null;\n\n          this.service.getJobs(this.config.oid, pageNumber, this.page.pageSize).then(response => {\n              this.formatStepConfig(response);\n              this.page = response;\n          }).catch((err: HttpErrorResponse) => {\n              this.error(err);\n          });\n      }\n  }\n\n  formatJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"FEEDBACK\") {\n          return this.lService.decode(\"etl.JobStatus.FEEDBACK\");\n      } else if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      } else if (job.status === \"QUEUED\") {\n          return this.lService.decode(\"etl.JobStatus.QUEUED\");\n      } else if (job.status === \"SUCCESS\") {\n          return this.lService.decode(\"etl.JobStatus.SUCCESS\");\n      } else if (job.status === \"CANCELED\") {\n          return this.lService.decode(\"etl.JobStatus.CANCELED\");\n      } else if (job.status === \"FAILURE\") {\n          return this.lService.decode(\"etl.JobStatus.FAILURE\");\n      } else {\n          return this.lService.decode(\"etl.JobStatus.RUNNING\");\n      }\n  }\n\n  formatStepConfig(page: PageResult<ExportScheduledJob>): void {\n      page.resultSet.forEach((job: ExportScheduledJob) => {\n          const steps = [\n              {\n                  label: this.lService.decode(\"synchronization.step.Queued\"),\n                  status: job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n              },\n\n              {\n                  label: this.lService.decode(\"synchronization.step.Connecting\"),\n                  status: job.stage === \"CONNECTING\" || job.stage === \"CONNECTION_FAILED\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"CONNECTION_FAILED\")\n              }\n          ];\n\n          const stepLabel = this.config.isImport ? \"Importing\" : this.lService.decode(\"synchronization.step.DatabaseExport\");\n\n          steps.push({\n              label: stepLabel,\n              status: job.stage === \"EXPORT\" || job.stage === \"EXPORT_RESOLVE\" || job.stage === \"RESUME_EXPORT\" ? this.getJobStatus(job) : \"\"\n          });\n\n          job.stepConfig = {\n              steps: steps\n          };\n      });\n  }\n\n  getCompletedStatus(jobStage: string, targetStage: string): string {\n      let order = [\"CONNECTING\", \"CONNECTION_FAILED\", \"EXPORT\", \"EXPORT_RESOLVE\", \"RESUME_EXPORT\"];\n\n      let jobPos = order.indexOf(jobStage);\n      let targetPos = order.indexOf(targetStage);\n\n      if (targetPos < jobPos) {\n          return \"COMPLETE\";\n      } else {\n          return \"\";\n      }\n  }\n\n  getJobStatus(job: ExportScheduledJob): string {\n      if (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n          return \"WORKING\";\n      } else if (job.status === \"FEEDBACK\" || job.status === \"FAILURE\") {\n          return \"STUCK\";\n      }\n\n      return \"\";\n  }\n\n  error(err: HttpErrorResponse): void {\n      this.message = ErrorHandler.getMessageFromError(err);\n  }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div class=\"container-fluid\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"row\">\n      <div *ngIf=\"config != null\" class=\"col-md-12\">\n\n        <div class=\"row\">\n          <div class=\"col-md-12\">\n            <h3>{{config.label.localizedValue}}</h3>\n          </div>\n        </div>\n\n        <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n          <div class=\"row\">\n            <div class=\"col-md-8\">\n              <label style=\"vertical-align: middle;\">CGR</label>\n              <i class=\"fa\"\n                [ngClass]=\"{'fa-long-arrow-right' : !config.isImport, 'fa-long-arrow-left' : config.isImport}\"\n                aria-hidden=\"true\"\n                style=\"font-size: 23px;padding: 0 7px;vertical-align: middle; color: #bdbdbd;margin-bottom: 4px;\"></i>\n              <label style=\"vertical-align: middle;\">{{config.systemLabel}}</label>\n            </div>\n            <div class=\"col-md-4\">\n              <div class=\"form-group text-right\" style=\"margin: 0;\">\n                <form>\n                  <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onRun()\" class=\"btn btn-primary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.run\"></localize>\n                  </button>\n                  <button *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\"\n                    type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onGenerateFile()\" class=\"btn btn-secondary\"\n                    role=\"button\" [title]=\"'synchronization.config.run' | localize\">\n                    <localize key=\"synchronization.config.generateBundle\"></localize>\n                  </button>\n                </form>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'DHIS2ExternalSystem'\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"settings.external.synchronization.geoobjecttype.label\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"settings.external.synchronization.dhis2.synch.type.label\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.geoObjectType}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      <localize *ngIf=\"level.type === 'ORG_UNITS'\" key=\"synchronization.config.units\"></localize>\n                      <localize *ngIf=\"level.type === 'RELATIONSHIPS'\" key=\"synchronization.config.relationships\"></localize>\n                      <localize *ngIf=\"level.type === 'ALL'\" key=\"synchronization.config.all\"></localize>\n                      <localize *ngIf=\"level.type === 'NONE'\" key=\"synchronization.config.none\"></localize>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"config != null && config.type === 'FhirExternalSystem' && !config.isImport\">\n            <div class=\"col-md-12\">\n\n              <h4>\n                <localize key=\"synchronization.config.units\"></localize>\n              </h4>\n              <table class=\"table\">\n                <thead>\n                  <tr>\n                    <th>\n                      <localize key=\"settings.external.synchronization.level.label\"></localize>\n                    </th>\n                    <th>\n                      <localize key=\"masterlist.field\"></localize>\n                    </th>\n                    <th style=\"text-align: right;\">\n                      <localize key=\"masterlist.forDate\"></localize>\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr *ngFor=\"let level of this.config.configuration['levels']; let i = index;\">\n                    <td style=\"vertical-align: middle;\">\n                      <localize key=\"settings.external.synchronization.level.label\"></localize> {{i + 1}}\n                    </td>\n                    <td style=\"\">\n                      {{level.typeLabel}}\n                    </td>\n                    <td style=\"text-align: right;\">\n                      {{level.forDate}}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n\n            </div>\n          </div>\n\n\n          <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n              <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                  <table class=\"table table-striped\">\n                    <thead>\n                      <tr style=\"height: 56px;\">\n                        <th style=\"vertical-align: middle;\">\n                          <localize key=\"masterlist.jobs\"></localize>\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                      <tr\n                        *ngFor=\"let job of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                        <td style=\"vertical-align: middle;\">\n                          <div class=\"wrapper\">\n                            <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                              <span style=\"display: block;\"> {{job.fileName}} </span>\n                              <span style=\"display: block;\"> {{job.createDate}} </span>\n                              <span style=\"display: block;\"> {{formatJobStatus(job)}} </span>\n                              <span *ngIf=\"job.exception != null && job.exception.type != 'java.lang.RuntimeException'\"\n                                style=\"display: block;\">\n                                {{job.exception.message}}\n                              </span>\n                            </p>\n\n                            <step-indicator\n                              *ngIf=\"job.status !== 'SUCCESS' && job.status !== 'FAILURE' && job.status !== 'CANCELED'\"\n                              [steps]=\"job.stepConfig\"></step-indicator>\n\n                          </div>\n                        </td>\n                        <td style=\"text-align: right; vertical-align: middle;\">\n                          <div class=\"button-holder\" style=\"float: right;\">\n                            <a\n                              [routerLink]=\"'/registry/sync/details/' + config.oid + '/' + job.historyId\"\n                              routerLinkActive=\"active\">\n                              <button class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"scheduledjobs.detail.button\"></localize>\n                              </button>\n                            </a>\n                          </div>\n                        </td>\n                      </tr>\n\n                    </tbody>\n                  </table>\n                  <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                    <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                  </div>\n                </div>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { RegistryService, IOService, SynchronizationConfigService } from \"@registry/service\";\nimport { ScheduledJob, SynchronizationConfig } from \"@registry/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\n\n@Component({\n    selector: \"job\",\n    templateUrl: \"./details.component.html\",\n    styleUrls: [\"./details.css\"]\n})\nexport class SyncDetailsComponent implements OnInit {\n\n    message: string = null;\n    job: ScheduledJob;\n    historyId: string = \"\";\n\n    config: SynchronizationConfig = null;\n\n    page: PageResult<any> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    constructor(private configService: SynchronizationConfigService, public service: RegistryService, private route: ActivatedRoute, public ioService: IOService) {\n    }\n\n    ngOnInit(): void {\n        this.historyId = this.route.snapshot.params[\"oid\"];\n\n        const configOid = this.route.snapshot.paramMap.get(\"config\");\n\n        this.configService.get(configOid).then(config => {\n            this.config = config;\n\n            this.onPageChange(1);\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onPageChange(pageNumber: any): void {\n        this.message = null;\n\n        this.service.getExportDetails(this.historyId, this.page.pageSize, pageNumber).then(response => {\n            this.job = response;\n\n            this.page = this.job.exportErrors;\n\n            if (response.exception && response.exception.type && response.exception.type.indexOf(\"ExportJobHasErrors\") === -1) {\n                this.error(response.exception);\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.exportedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.exportedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n            </div>\n            <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead>\n                                <tr>\n\t                                <th class=\"label-column\">\n                                    <span *ngIf=\"config == null || !config.isImport\">\n\t                                    <localize key=\"geoObject.label\"></localize>&nbsp;<localize key=\"geoObjectType.attr.code\"></localize>\n                                    </span>\n                                    <span *ngIf=\"config != null && config.isImport\">Resource</span>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n                                  </th>\n\t                                <th *ngIf=\"config == null || !config.isImport\" class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                <tr *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.code}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.message}}</p>\n                                    </td>\n                                    <td  *ngIf=\"config == null || !config.isImport\" class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy, AfterViewInit, ViewChild, HostListener } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport { Map, LngLatBoundsLike, NavigationControl, AttributionControl, IControl, LngLatBounds } from \"mapbox-gl\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport bbox from \"@turf/bbox\";\n\nimport { GeoObject, GeoObjectType, GeoObjectTypeCache } from \"@registry/model/registry\";\nimport { ModalState, PANEL_SIZE_STATE } from \"@registry/model/location-manager\";\n\nimport { MapService, RegistryService, GeometryService } from \"@registry/service\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler, ConfirmModalComponent, SuccessModalComponent } from \"@shared/component\";\n\nimport { AuthService, LocalizationService } from \"@shared/service\";\nimport { ContextLayer, LayerRecord } from \"@registry/model/list-type\";\nimport { GRAPH_LAYER, LayerEvent } from \"./layer-panel.component\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { timeout } from \"d3-timer\";\nimport { Observable, Subscription } from \"rxjs\";\nimport { SelectTypeModalComponent } from \"./select-type-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { OverlayerIdentifier } from \"@registry/model/constants\";\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { FeaturePanelComponent } from \"./feature-panel.component\";\nimport { RegistryCacheService } from \"@registry/service/registry-cache.service\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\nconst SELECTED_COLOR = \"#800000\";\n\n@Component({\n    selector: \"location-manager\",\n    providers: [Location],\n    templateUrl: \"./location-manager.component.html\",\n    styleUrls: [\"./location-manager.css\"]\n})\nexport class LocationManagerComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    pageMode: string = \"\";\n\n    coordinate: {\n        longitude: number,\n        latitude: number\n    } = { longitude: null, latitude: null };\n\n    MODE: ModalState = {\n        SEARCH: 0,\n        VIEW: 1\n    };\n\n    CONSTANTS = {\n        OVERLAY: OverlayerIdentifier.FEATURE_PANEL\n    };\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Search results from the server\n     */\n    data: GeoObject[] = [];\n\n    state: {\n        text: string,\n        currentText: string,\n        date: string,\n        currentDate: string,\n        featureText?: string\n    } = { text: \"\", currentText: \"\", date: \"\", currentDate: \"\" }\n\n    /*\n     * Currently selected record\n     */\n    record: LayerRecord;\n\n    /*\n     * If we're visualizing relationships of a Geo-Object then this is that GO.\n     */\n    current: GeoObject;\n\n    requestedDate: string = null;\n\n    calculatedDate: string = null;\n\n    /*\n     * Currently highlighted feature\n     */\n    feature: any;\n\n    /*\n     * Flag denoting if an object is currently being editted\n     */\n    isEdit: boolean = false;\n\n    /*\n     * mapbox-gl map\n     */\n    map: Map;\n\n    /*\n     *  Mode used to determine what is being show on the left hand panel\n     */\n    mode: number = this.MODE.SEARCH;\n\n    visualizingRelationship: string = null;\n\n    graphPanelOpen: boolean = false;\n\n    /*\n    *  Flag to indicate if the left handle panel should be displayed or not\n     */\n    showPanel: boolean = true;\n\n    layers: ContextLayer[] = [];\n\n    backReference: string;\n\n    /*\n     * List of base layers\n     */\n    baseLayers: any[] = [\n        {\n            name: \"Satellite\",\n            label: \"Satellite\",\n            id: \"satellite-v9\",\n            sprite: \"mapbox://sprites/mapbox/satellite-v9\",\n            url: \"mapbox://mapbox.satellite\",\n            selected: true\n        }\n    ];\n\n    preventSingleClick: boolean = false;\n\n    /*\n     * Timer for determining double click vs single click\n     */\n    timer: any;\n\n    /*\n     * URL pamaters of the component\n     */\n    params: any = null;\n\n    /*\n    * Subscription for changes to the URL parameters\n    */\n    subscription: Subscription;\n\n    // Flag denoting if the map in loaded and initialized\n    ready: boolean = false;\n\n    // Flag denoting if the search and results panel is enabled at all\n    searchEnabled: boolean = true;\n\n    graphVisualizerEnabled: boolean = false;\n\n    typeahead: Observable<any> = null;\n\n    typeCache: GeoObjectTypeCache;\n\n    public layersPanelSize: number = PANEL_SIZE_STATE.MINIMIZED;\n\n    @ViewChild(\"simpleEditControl\") simpleEditControl: IControl;\n\n    @ViewChild(\"FeaturePanel\") featurePanel: FeaturePanelComponent;\n\n    windowWidth: number;\n    windowHeight: number;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private modalService: BsModalService,\n        private spinner: NgxSpinnerService,\n        private service: RegistryService,\n        private cacheService: RegistryCacheService,\n        private listService: ListTypeService,\n        private mapService: MapService,\n        private geomService: GeometryService,\n        private lService: LocalizationService,\n        private authService: AuthService,\n        private location: Location) {\n        this.location = location;\n    }\n\n    ngOnInit(): void {\n        this.windowWidth = window.innerWidth;\n        this.windowHeight = window.innerHeight;\n\n        this.subscription = this.route.queryParams.subscribe(params => {\n            this.handleParameterChange(params);\n        });\n\n        this.searchEnabled = registry.searchEnabled && (this.authService.isRC(false) || this.authService.isRM() || this.authService.isRA());\n        this.graphVisualizerEnabled = registry.graphVisualizerEnabled || false;\n\n        this.typeCache = this.cacheService.getTypeCache();\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n        this.subscription.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n        this.initializeMap();\n    }\n\n    @HostListener(\"window:resize\", [\"$event\"])\n    resizeWindow() {\n        this.windowWidth = window.innerWidth;\n        this.windowHeight = window.innerHeight;\n    }\n\n    initializeMap() {\n        const layer = this.baseLayers[0];\n\n        const mapConfig: any = {\n            container: \"map\",\n            style: {\n                version: 8,\n                name: layer.name,\n                metadata: {\n                    \"mapbox:autocomposite\": true\n                },\n                sources: {\n                    mapbox: {\n                        type: \"raster\",\n                        url: layer.url,\n                        tileSize: 256\n                    }\n                },\n                sprite: layer.sprite,\n                glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n                layers: [\n                    {\n                        id: layer.id,\n                        type: \"raster\",\n                        source: \"mapbox\"\n                        // \"source-layer\": \"mapbox_satellite_full\"\n                    }\n                ]\n            },\n            zoom: 2,\n            attributionControl: false,\n            bounds: registry.defaultMapBounds\n        };\n\n        if (this.params.bounds != null && this.params.bounds.length > 0) {\n            mapConfig.bounds = new LngLatBounds(JSON.parse(this.params.bounds));\n        }\n\n        mapConfig.logoPosition = \"bottom-right\";\n\n        this.map = new Map(mapConfig);\n\n        this.map.on(\"load\", () => {\n            this.ready = true;\n\n            this.initMap();\n        });\n\n        if (this.simpleEditControl) {\n            this.map.addControl(this.simpleEditControl);\n        }\n    }\n\n    onChangeGeoObject(event: { id: string, code: string, typeCode: string, doIt: any }): void {\n        this.closeEditSessionSafeguard().then(() => {\n            event.doIt(() => {\n                this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                this.service.getGeoObject(event.id, event.typeCode, false).then(geoObj => {\n                    this.setData([geoObj]);\n                    this.changeGeoObject(event.typeCode, event.code, event.id, geoObj);\n\n                    this.router.navigate([], {\n                        relativeTo: this.route,\n                        queryParams: { type: event.typeCode, code: event.code, uid: event.id, version: null, text: event.code },\n                        queryParamsHandling: \"merge\" // remove to replace all query params by provided\n                    });\n\n                    this.current = geoObj;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                }).finally(() => {\n                    this.spinner.hide(this.CONSTANTS.OVERLAY);\n                });\n            });\n        });\n    }\n\n    /**\n    *\n    * Method responsible for parsing the state from the URL parameters and determining if\n    * the model of the widget needs to be updated or not.\n    *\n    * */\n    handleParameterChange(params: Params): void {\n        this.params = params;\n\n        if (this.ready) {\n            let mode = this.MODE.SEARCH;\n            let showPanel = this.showPanel;\n\n            if (this.params != null) {\n                // Handle parameters for searching for a geo object\n                if (this.params.text != null) {\n                    if (this.params.text !== this.state.currentText || this.params.date !== this.state.currentDate) {\n                        this.state.text = this.params.text;\n                        this.state.date = this.params.date;\n\n                        this.handleSearch(this.params.text, this.params.date);\n                    }\n\n                    showPanel = true;\n                }\n\n                // Handle parameters for selecting a geo object\n                if (this.params.type != null && this.params.code != null) {\n                    if (this.record == null || this.record.type == null || this.record.type.code !== this.params.type || this.record.code !== this.params.code) {\n                        this.handleSelect(this.params.type, this.params.code, this.params.uid);\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                // Handle parameters for select a record from a context layer\n                if (this.params.version != null && this.params.uid != null) {\n                    if (this.record == null || this.feature == null || this.feature.source !== this.params.version || this.feature.id !== this.params.uid) {\n                        this.handleRecord(this.params.version, this.params.uid);\n                    }\n\n                    showPanel = true;\n                    mode = this.MODE.VIEW;\n                }\n\n                if (this.params.pageContext) {\n                    this.pageMode = this.params.pageContext;\n                }\n\n                if (this.params.layersPanelSize) {\n                    this.layersPanelSize = Number.parseInt(this.params.layersPanelSize);\n                } else {\n                    this.layersPanelSize = (this.pageMode === \"EXPLORER\") ? PANEL_SIZE_STATE.FULLSCREEN : this.layersPanelSize;\n                }\n\n                if (this.params.attrPanelOpen) {\n                    showPanel = this.params.attrPanelOpen === \"true\";\n                }\n\n                if (this.params.graphPanelOpen) {\n                    this.graphPanelOpen = this.params.graphPanelOpen === \"true\";\n                }\n            }\n\n            this.changeMode(mode);\n            this.setPanel(showPanel);\n        }\n    }\n\n    setPanel(showPanel: boolean): void {\n        if (this.showPanel !== showPanel) {\n            this.showPanel = showPanel;\n\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { attrPanelOpen: this.showPanel },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            });\n\n            timeout(() => {\n                this.map.resize();\n            }, 1);\n        }\n    }\n\n    togglePanel(): void {\n        this.setPanel(!this.showPanel);\n    }\n\n    changeMode(mode: number): void {\n        this.mode = mode;\n\n        if (this.isEdit) {\n            this.geomService.destroy(false);\n        }\n\n        if (this.mode === this.MODE.SEARCH) {\n            this.isEdit = false;\n\n            if (this.feature != null) {\n                this.map.removeFeatureState(this.feature);\n            }\n\n            this.record = null;\n            this.feature = null;\n        }\n    }\n\n    onModeChange(value: boolean): void {\n        this.isEdit = value;\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            this.addLayers();\n        });\n\n        this.addLayers();\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new AttributionControl({ compact: true }), \"bottom-right\");\n        this.map.addControl(new NavigationControl({ visualizePitch: true }), \"bottom-right\");\n\n        this.map.on(\"click\", (event: any) => {\n            this.handleMapClickEvent(event);\n        });\n\n        this.map.on(\"moveend\", (event: any) => {\n            const bounds: LngLatBounds = this.map.getBounds();\n            const array = bounds.toArray();\n\n            let url = this.router.createUrlTree([], {\n                relativeTo: this.route,\n                queryParams: { bounds: JSON.stringify(array) },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            }).toString();\n\n            this.location.go(url);\n        });\n\n        // if (this.params.bounds != null && this.params.bounds.length > 0) {\n        //     const bounds = JSON.parse(this.params.bounds);\n\n        //     this.map.fitBounds(new LngLatBounds(bounds), { animate: false });\n        // }\n\n        this.handleParameterChange(this.params);\n\n        if (this.current) {\n            this.zoomToFeature(this.current, null);\n        } else if (this.layers.length > 0 && this.layers[0].oid !== GRAPH_LAYER) {\n            this.onZoomTo(this.layers[0].oid);\n        }\n    }\n\n    onZoomTo(oid: string): void {\n        this.listService.getBounds(oid).then(bounds => {\n            if (bounds && Array.isArray(bounds)) {\n                let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                this.map.fitBounds(llb, this.calculateZoomConfig(null));\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(layer: ContextLayer): void {\n        this.closeEditSessionSafeguard().then(() => {\n            this.listService.getVersion(layer.oid).then(version => {\n                if (!version.isAbstract) {\n                    this.select({\n                        properties: {\n                            type: version.typeCode,\n                            code: \"__NEW__\"\n                        }\n                    }, null);\n                } else {\n                    this.bsModalRef = this.modalService.show(SelectTypeModalComponent, {\n                        animated: true,\n                        backdrop: true,\n                        ignoreBackdropClick: true\n                    });\n                    this.bsModalRef.content.init(version, typeCode => {\n                        this.select({\n                            properties: {\n                                type: typeCode,\n                                code: \"__NEW__\"\n                            }\n                        }, null);\n                    });\n                }\n            });\n        });\n    }\n\n    closeEditSessionSafeguard(): Promise<void> {\n        if (!this.isEdit) {\n            return new Promise((resolve, reject) => { resolve(); });\n        }\n\n        let confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        confirmBsModalRef.content.message = this.lService.decode(\"explorer.edit.loseAllChanges\");\n        confirmBsModalRef.content.data = {};\n        confirmBsModalRef.content.submitText = this.lService.decode(\"modal.button.ok\");\n        confirmBsModalRef.content.type = ModalTypes.danger;\n\n        let resolver = (subsription: Subscription, resolve: Function, result: void) => { this.cancelEditingSession(); resolve(result); subsription.unsubscribe(); };\n        let rejecter = (subsription: Subscription, reject: Function, error: any) => { reject(error); subsription.unsubscribe(); };\n\n        return new Promise((resolve, reject) => {\n            let subscription = confirmBsModalRef.content.onConfirm.subscribe(\n                result => { resolver(subscription, resolve, result); },\n                error => { rejecter(subscription, reject, error); }\n            );\n        });\n    }\n\n    handleMapClickEvent(e: any): void {\n        const features = this.map.queryRenderedFeatures(e.point);\n\n        if (features != null && features.length > 0) {\n            const feature = features[0];\n\n            if (feature.properties.uid != null && (this.current == null || this.current.properties.uid !== feature.properties.uid)) {\n                this.closeEditSessionSafeguard().then(() => {\n                    if (feature.source === GRAPH_LAYER) {\n                        this.select(feature, null);\n                    } else {\n                        this.router.navigate([], {\n                            relativeTo: this.route,\n                            queryParams: { type: null, code: null, version: feature.source, uid: feature.properties.uid },\n                            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n                        });\n                    }\n                });\n            }\n        }\n    }\n\n    onPanelCancel(): void {\n        this.clearRecord();\n    }\n\n    onPanelSubmit(applyInfo: { isChangeRequest: boolean, geoObject?: any, changeRequestId?: string }): void {\n        // Save everything first\n        this.geomService.saveEdits();\n\n        if (applyInfo.isChangeRequest) {\n            if (this.backReference != null && this.backReference.length >= 2 && this.backReference.substring(0, 2) === \"CR\") {\n                this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n            } else {\n                this.bsModalRef = this.modalService.show(ConfirmModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n                this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.changerequest.submitted\");\n                this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.changerequest.view\");\n                this.bsModalRef.content.cancelText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n                this.bsModalRef.content.onConfirm.subscribe(() => {\n                    this.router.navigate([\"/registry/change-requests\", applyInfo.changeRequestId]);\n                });\n                this.bsModalRef.content.onCancel.subscribe(() => {\n                    this.clearRecord();\n                });\n            }\n        } else {\n            this.bsModalRef = this.modalService.show(SuccessModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n            this.bsModalRef.content.message = this.lService.decode(\"geoobject-editor.edit.submitted\");\n            this.bsModalRef.content.submitText = this.lService.decode(\"geoobject-editor.cancel.returnExplorer\");\n\n            this.bsModalRef.content.onConfirm.subscribe(() => {\n                this.onPanelCancel();\n            });\n        }\n    }\n\n    addLayers(): void {\n        this.layers.forEach(cLayer => {\n            this.addLayer(cLayer);\n        });\n    }\n\n    handleBasemapStyle(layer: any): void {\n        // this.map.setStyle('mapbox://styles/mapbox/' + layer.id);\n\n        this.baseLayers.forEach(baseLayer => {\n            baseLayer.selected = false;\n        });\n\n        layer.selected = true;\n\n        this.map.setStyle({\n            version: 8,\n            name: layer.name,\n            metadata: {\n                \"mapbox:autocomposite\": true\n            },\n            sources: {\n                mapbox: {\n                    type: \"raster\",\n                    url: layer.url,\n                    tileSize: 256\n                }\n            },\n            sprite: layer.sprite,\n            glyphs: window.location.protocol + \"//\" + window.location.host + registry.contextPath + \"/glyphs/{fontstack}/{range}.pbf\",\n            layers: [\n                {\n                    id: layer.id,\n                    type: \"raster\",\n                    source: \"mapbox\"\n                    // \"source-layer\": \"mapbox_satellite_full\"\n                }\n            ]\n        });\n    }\n\n    getGeoObjectTypeLabel(geoObject: GeoObject) {\n        const type: GeoObjectType = this.typeCache.getTypeByCode(geoObject.properties.type);\n\n        return type == null ? \"\" : type.label.localizedValue;\n    }\n\n    search(): void {\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { text: this.state.text, date: this.state.date, type: null, code: null, version: null, uid: null },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    handleSearch(text: string, date: string): void {\n        this.geomService.destroy(false);\n        this.mapService.search(text, date, false).then(data => {\n            this.state.currentText = text;\n            this.state.currentDate = date;\n\n            if (this.data.length > 0) {\n                let source = (<any> this.map.getSource(GRAPH_LAYER));\n\n                if (source != null) {\n                    source.setData(data);\n                }\n            }\n\n            this.setData(data.features);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    zoomToFeature(geoObject: GeoObject, event: MouseEvent): void {\n        if (event != null) {\n            event.stopPropagation();\n        }\n\n        this.preventSingleClick = false;\n        const delay = 200;\n\n        let geometry = geoObject.geometry;\n\n        this.timer = setTimeout(() => {\n            if (!this.preventSingleClick) {\n                if (geometry != null) {\n                    const bounds = bbox(geometry) as LngLatBoundsLike;\n\n                    this.map.fitBounds(bounds, this.calculateZoomConfig(geometry.type));\n                }\n            }\n        }, delay);\n    }\n\n    calculateZoomConfig(geometryType: string): any {\n        let padding = 50;\n        let maxZoom = 20;\n\n        // Zoom level was requested to be reduced when displaying point types as per #420\n        if (geometryType === \"Point\" || geometryType === \"MultiPoint\") {\n            padding = 100;\n            maxZoom = 12;\n        }\n\n        let config: any = { padding: padding, animate: true, maxZoom: maxZoom };\n\n        if (this.graphPanelOpen && !this.showPanel) {\n            config.padding = {\n                top: (this.layersPanelSize !== PANEL_SIZE_STATE.MINIMIZED ? ((37 * this.layers.length) + 45) : 0) + 10,\n                bottom: 10,\n                left: (Math.round(this.windowWidth / 2) + 10),\n                right: 10\n            };\n        }\n\n        return config;\n    }\n\n    handleRecord(list: string, uid: string): void {\n        // Get the feature data from the server and populate the left-hand panel\n        this.listService.record(list, uid, false).then(record => {\n            if (this.feature != null) {\n                this.map.removeFeatureState(this.feature);\n            }\n\n            // Highlight the feature on the map\n            this.feature = {\n                source: list,\n                sourceLayer: \"context\",\n                id: uid\n            };\n            if (this.layers.findIndex(lFind => this.feature.source === lFind.oid) !== -1) {\n                this.map.setFeatureState(this.feature, {\n                    hover: true\n                });\n            }\n\n            this.mode = this.MODE.VIEW;\n\n            if (record.forDate === \"\") {\n                record.forDate = null;\n            }\n\n            this.record = record;\n\n            if (this.record.recordType === \"GEO_OBJECT\") { // this happens when list type is working\n                this.geomService.destroy(false);\n\n                this.geomService.initialize(this.map, record.type.geometryType, false);\n\n                this.current = this.record.geoObject;\n                this.zoomToFeature(this.record.geoObject, null);\n            } else if (this.record.recordType === \"LIST\") { // this happens when list type is NOT working\n                const bounds = this.record.bbox;\n\n                this.requestedDate = this.record.forDate === \"\" || this.record.forDate === undefined ? null : this.record.forDate;\n\n                if (bounds && Array.isArray(bounds)) {\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                    this.map.fitBounds(llb, { padding: 50, animate: true, maxZoom: 20 });\n                }\n            }\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    cancelEditingSession() {\n        if (this.isEdit) {\n            this.geomService.destroy(false);\n        }\n\n        this.isEdit = false;\n\n        if (this.feature != null) {\n            this.map.removeFeatureState(this.feature);\n        }\n\n        this.featurePanel.setEditMode(false);\n        this.feature = null;\n    }\n\n    clearRecord() {\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { type: null, code: null, version: null, uid: null },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    featurePanelForDateChange(date: string) {\n        if (date !== null) {\n            this.geomService.destroy(false);\n        }\n    }\n\n    select(node: any, event: MouseEvent): void {\n        if (!this.isEdit) {\n            this.router.navigate([], {\n                relativeTo: this.route,\n                queryParams: { type: node.properties.type, code: node.properties.code, uid: node.properties.uid, version: null },\n                queryParamsHandling: \"merge\" // remove to replace all query params by provided\n            });\n\n            this.zoomToFeature(node, null);\n        }\n    }\n\n    handleSelect(typeCode: string, code: string, uid: string, geoObject: GeoObject = null) {\n        this.mode = this.MODE.VIEW;\n\n        this.changeGeoObject(typeCode, code, uid, geoObject);\n    }\n\n    changeGeoObject(typeCode: string, code: string, uid: string, geoObject: GeoObject = null) {\n        // Highlight the feature on the map\n        if (this.feature != null) {\n            this.map.removeFeatureState(this.feature);\n        }\n\n        // Highlight the feature on the map\n        if (this.feature && code !== \"__NEW__\") {\n            this.map.setFeatureState(this.feature = {\n                source: GRAPH_LAYER,\n                id: uid\n            }, {\n                hover: true\n            });\n        }\n\n        this.typeCache.waitOnTypes().then(() => {\n            const type: GeoObjectType = this.typeCache.getTypeByCode(typeCode);\n\n            this.record = {\n                recordType: \"GEO_OBJECT\",\n                type: type,\n                code: code,\n                forDate: this.state.currentDate === \"\" ? null : this.state.currentDate\n            };\n\n            this.geomService.destroy(false);\n            this.geomService.initialize(this.map, this.record.type.geometryType, false);\n\n            if (geoObject == null) {\n                if (code !== \"__NEW__\") {\n                    this.spinner.show(this.CONSTANTS.OVERLAY);\n\n                    this.service.getGeoObjectByCode(code, type.code).then(geoObject => {\n                        this.current = geoObject;\n                        this.requestedDate = this.record.forDate === \"\" ? null : this.record.forDate;\n                        this.zoomToFeature(this.current, null);\n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    }).finally(() => {\n                        this.spinner.hide(this.CONSTANTS.OVERLAY);\n                    });\n                }\n            } else {\n                this.current = geoObject;\n                this.requestedDate = this.record.forDate === \"\" ? null : this.record.forDate;\n                this.zoomToFeature(this.current, null);\n            }\n        });\n    }\n\n    setData(data: GeoObject[]): void {\n        this.data = data;\n    }\n\n    onLayerChange(event: LayerEvent): void {\n        const layer = event.layer;\n\n        if (layer.rendered) {\n            let existingIndex = this.layers.findIndex((findLayer: any) => { return findLayer.oid === layer.oid; });\n\n            if (existingIndex !== -1) {\n                this.removeLayer(layer);\n            }\n\n            this.addLayer(layer, event.prevLayer);\n        } else {\n            this.removeLayer(layer);\n        }\n    }\n\n    onReorderLayers(layers: ContextLayer[]): void {\n        for (let i = layers.length - 1; i > -1; i--) {\n            const layer = layers[i];\n\n            this.map.moveLayer(layer.oid + \"-polygon\");\n            this.map.moveLayer(layer.oid + \"-points\");\n            this.map.moveLayer(layer.oid + \"-line\");\n            this.map.moveLayer(layer.oid + \"-label\");\n        }\n    }\n\n    removeLayer(layer: ContextLayer): void {\n        const index = this.layers.findIndex(l => l.oid === layer.oid);\n\n        if (index !== -1) {\n            const source = layer.oid;\n\n            this.map.removeLayer(source + \"-polygon\");\n            this.map.removeLayer(source + \"-points\");\n            this.map.removeLayer(source + \"-line\");\n            this.map.removeLayer(source + \"-label\");\n            this.map.removeSource(source);\n\n            this.layers.splice(index, 1);\n        }\n    }\n\n    addLayer(layer: ContextLayer, otherLayer?: ContextLayer): void {\n        if (layer.oid === GRAPH_LAYER) {\n            if (this.ready) {\n                const source = layer.oid;\n                const prevLayer = otherLayer != null ? otherLayer.oid + \"-polygon\" : null;\n\n                this.map.addSource(source, {\n                    type: \"geojson\",\n                    data: {\n                        type: \"FeatureCollection\",\n                        features: this.data as any\n                    },\n                    promoteId: \"uid\"\n                });\n\n                // Polygon layer\n                this.map.addLayer({\n                    id: source + \"-polygon\",\n                    type: \"fill\",\n                    source: source,\n                    layout: {},\n                    paint: {\n                        \"fill-color\": [\n                            \"case\",\n                            [\"boolean\", [\"feature-state\", \"hover\"], false],\n                            SELECTED_COLOR,\n                            layer.color\n                        ],\n                        \"fill-opacity\": 0.8,\n                        \"fill-outline-color\": \"black\"\n                    },\n                    filter: [\"all\",\n                        [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                    ]\n                }, prevLayer);\n\n                // Line layer\n                this.map.addLayer({\n                    id: source + \"-line\",\n                    type: \"line\",\n                    source: source,\n                    paint: {\n                        \"line-width\": 3,\n                        \"line-color\": [\n                            \"case\",\n                            [\"boolean\", [\"feature-state\", \"hover\"], false],\n                            SELECTED_COLOR,\n                            layer.color\n                        ]\n                    },\n                    filter: [\"all\",\n                        [\"match\", [\"geometry-type\"], [\"LineString\", \"MultiLineString\"], true, false]\n                    ]\n                }, prevLayer);\n\n                // Point layer\n                this.map.addLayer({\n                    id: source + \"-points\",\n                    type: \"circle\",\n                    source: source,\n                    paint: {\n                        \"circle-radius\": 10,\n                        \"circle-color\": [\n                            \"case\",\n                            [\"boolean\", [\"feature-state\", \"hover\"], false],\n                            SELECTED_COLOR,\n                            layer.color\n                        ],\n                        \"circle-stroke-width\": 2,\n                        \"circle-stroke-color\": \"#FFFFFF\"\n                    },\n                    filter: [\"all\",\n                        [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                    ]\n                }, prevLayer);\n\n                // Label layer\n                this.map.addLayer({\n                    id: source + \"-label\",\n                    source: source,\n                    type: \"symbol\",\n                    paint: {\n                        \"text-color\": \"black\",\n                        \"text-halo-color\": \"#fff\",\n                        \"text-halo-width\": 2\n                    },\n                    layout: {\n                        \"text-field\": [\"get\", \"localizedValue\", [\"get\", \"displayLabel\"]],\n                        \"text-font\": [\"NotoSansRegular\"],\n                        \"text-offset\": [0, 0.6],\n                        \"text-anchor\": \"top\",\n                        \"text-size\": 12\n                    }\n                }, prevLayer);\n            }\n\n            if (this.layers.findIndex(lFind => layer.oid === lFind.oid) === -1) {\n                this.layers.push(layer);\n            }\n        } else {\n            this.addVectorLayer(layer, otherLayer);\n        }\n    }\n\n    addVectorLayer(layer: ContextLayer, otherLayer?: ContextLayer): void {\n        if (this.ready) {\n            const source = layer.oid;\n            const prevLayer = otherLayer != null ? otherLayer.oid + \"-polygon\" : null;\n\n            let protocol = window.location.protocol;\n            let host = window.location.host;\n\n            this.map.addSource(source, {\n                type: \"vector\",\n                tiles: [protocol + \"//\" + host + registry.contextPath + \"/list-type/tile?x={x}&y={y}&z={z}&config=\" + encodeURIComponent(JSON.stringify({ oid: source }))],\n                promoteId: \"uid\"\n            });\n\n            // Polygon layer\n            this.map.addLayer({\n                id: source + \"-polygon\",\n                type: \"fill\",\n                source: source,\n                \"source-layer\": \"context\",\n                layout: {},\n                paint: {\n                    \"fill-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"hover\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"fill-opacity\": 0.8,\n                    \"fill-outline-color\": \"black\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Polygon\", \"MultiPolygon\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Line layer\n            this.map.addLayer({\n                id: source + \"-line\",\n                type: \"line\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"line-width\": 3,\n                    \"line-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"hover\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ]\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"LineString\", \"MultiLineString\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Point layer\n            this.map.addLayer({\n                id: source + \"-points\",\n                type: \"circle\",\n                source: source,\n                \"source-layer\": \"context\",\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": [\n                        \"case\",\n                        [\"boolean\", [\"feature-state\", \"hover\"], false],\n                        SELECTED_COLOR,\n                        layer.color\n                    ],\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                },\n                filter: [\"all\",\n                    [\"match\", [\"geometry-type\"], [\"Point\", \"MultiPont\"], true, false]\n                ]\n            }, prevLayer);\n\n            // Label layer\n            this.map.addLayer({\n                id: source + \"-label\",\n                source: source,\n                \"source-layer\": \"context\",\n                type: \"symbol\",\n                paint: {\n                    \"text-color\": \"black\",\n                    \"text-halo-color\": \"#fff\",\n                    \"text-halo-width\": 2\n                },\n                layout: {\n                    \"text-field\": [\"case\",\n                        [\"has\", \"displayLabel_\" + navigator.language.toLowerCase()],\n                        [\"coalesce\", [\"string\", [\"get\", \"displayLabel_\" + navigator.language.toLowerCase()]], [\"string\", [\"get\", \"displayLabel\"]]],\n                        [\"string\", [\"get\", \"displayLabel\"]]\n                    ],\n                    \"text-font\": [\"NotoSansRegular\"],\n                    \"text-offset\": [0, 0.6],\n                    \"text-anchor\": \"top\",\n                    \"text-size\": 12\n                }\n            }, prevLayer);\n\n            // Highlight\n            if (this.feature && this.feature.source === source) {\n                this.map.setFeatureState(this.feature, {\n                    hover: true\n                });\n            }\n        }\n\n        if (this.layers.findIndex(lFind => layer.oid === lFind.oid) === -1) {\n            this.layers.push(layer);\n        }\n    }\n\n    onFeatureSelect(event: any): void {\n        if (!this.isEdit) {\n            this.state.featureText = event.item.name;\n\n            const feature = event.item.feature;\n\n            if (feature.properties.uid != null) {\n                this.listService.getBounds(feature.source, feature.properties.uid).then(bounds => {\n                    if (bounds && Array.isArray(bounds)) {\n                        let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n\n                        this.map.fitBounds(llb, { padding: 50, animate: true, maxZoom: 20 });\n                    }\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            }\n\n            if (feature.properties.uid != null) {\n                this.router.navigate([], {\n                    relativeTo: this.route,\n                    queryParams: { type: null, code: null, version: feature.source, uid: feature.properties.uid },\n                    queryParamsHandling: \"merge\" // remove to replace all query params by provided\n                });\n            }\n        }\n    }\n\n    toggleGraphPanel(): void {\n        this.graphPanelOpen = !this.graphPanelOpen;\n\n        // window.setTimeout(() => {\n        //     let graphContainer = document.getElementById(\"graph-container\");\n\n        //     if (graphContainer) {\n        //         this.svgHeight = graphContainer.clientHeight;\n        //         this.svgWidth = graphContainer.clientWidth;\n        //         // this.panToNode(this.geoObject.properties.uid);\n        //     }\n        // }, 10);\n\n        this.router.navigate([], {\n            relativeTo: this.route,\n            queryParams: { graphPanelOpen: this.graphPanelOpen },\n            queryParamsHandling: \"merge\" // remove to replace all query params by provided\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n\t<h5>{{model.name }} : {{ model.code }}</h5>\n\t<h6>\n\t\t{{model.layer.label}} - {{ model.layer.forDate }} ( <span *ngIf=\"model.layer.versionNumber !== 0\"> <localize\n\t\t\t\tkey=\"list.type.version\"></localize> {{model.layer.versionNumber}}\n\t\t</span>\n\t\t<localize *ngIf=\"model.layer.versionNumber === 0\" key=\"list.type.working.version\"></localize>\n\t\t)\n\t</h6>\n</ng-template>\n\n\n<cgr-header></cgr-header>\n<loading-bar></loading-bar>\n\n\n<div id=\"app-container\" class=\"container-fluid\">\n\n\t<!-- Floating search panel-->\n\t<div style=\"position: absolute; top: 0; bottom: 0; left: 10px; right: 10px; height: 100%;\">\n\t\t<div class=\"row\" style=\"margin-top: 50px;\">\n\t\t\n\t\t\t<div class=\"col-md-4\" style=\"z-index: 999;\" [hidden]=\"!showPanel\">\n\t\t\t\t<div class=\"row\" *ngIf=\"searchEnabled\">\n\t\t\t\t\t<!-- \n                    \t\tSearch features from the working versions of lists\n                \t-->\n                \t<article class=\"panel-toggle\" [ngClass]=\"{'detached' : data.length === 0 && !record}\">\n\t\t\t\t\t\t<ng-container>\n<!-- \t\t\t\t\t\t\t<div class=\"col-md-4\"> -->\n<!-- \t\t\t\t\t\t\t\t<date-field [(value)]=\"state.date\" label=\"\" [inputName]=\"'date'\" [allowInfinity]=\"false\" -->\n<!-- \t\t\t\t\t\t\t\t\t[allowFutureDates]=\"false\" [required]=\"false\" [placement]=\"'right'\" style=\"display:inline-grid;\"> </date-field> -->\n<!-- \t\t\t\t\t\t\t</div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\" >\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t\t\t\t<date-field [(value)]=\"state.date\" label=\"\" [inputName]=\"'date'\" [allowInfinity]=\"false\"\n\t\t\t\t\t\t\t\t\t[allowFutureDates]=\"false\" [required]=\"false\" style=\"display:table-cell;vertical-align:middle;width:175px;\"> </date-field>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" [placeholder]=\"'explorer.search.placeholder' | localize\"\n\t\t\t\t\t\t\t\t\t\t(keyup.enter)=\"search()\" [(ngModel)]=\"state.text\" name=\"text\"> <span class=\"input-group-btn\">\n\t\t\t\t\t\t\t\t\t\t<button [disabled]=\"isEdit\" class=\"btn btn-primary\" type=\"button\" (click)=\"search()\">\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-search\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</article>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\t\t<ng-container *ngIf=\"mode === MODE.SEARCH && searchEnabled\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-12\" [ngClass]=\"{'full-height-sidebar' : data.length > 0 }\">\n\t\t\t\t\t\t\t\t\t<div id=\"hierarchy-tree-container\" class=\"location-management-widget-section location-management-list-container\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"list-group\">\n\t\t\n\t\t\t\t\t\t\t\t\t\t\t<div *ngFor=\"let node of data; let i = index\" class=\"list-group-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"card card-default\" (click)=\"select(node, $event)\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"card-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t  <!--\n\t\t\t\t\t\t                              <i class=\"fa fa-map-marker clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\"\n\t\t\t\t\t\t                                (click)=\"zoomToFeature(node, $event)\" [title]=\"'explorer.zoom.label' | localize\"></i>\n\t\t\t\t\t\t                              <i class=\"fa fa-sitemap clickable\" style=\"float:right;font-size:25px;\" aria-hidden=\"true\" (click)=\"visualizeRelationships(node, VISUALIZE_MODE.GRAPH, $event)\" [title]=\"'hierarchyVisualizer.tooltip' | localize\"></i>\n\t\t\t\t\t\t                              -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"clickable\" style=\"word-break: break-all;\" title=\"View Geo-Object details\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{{node.properties.code}} - {{node.properties.displayLabel.localizedValue}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ng-container>\n\t\n\t\t\t\t\t\t<ng-container *ngIf=\"mode === MODE.VIEW && record != null\">\n\t\t\t\t\t\t\t<div *ngIf=\"record.recordType === 'GEO_OBJECT'\" class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-12\" [ngClass]=\"{'full-height-sidebar' : record, 'max-height' : !searchEnabled }\">\n\t\t\t\t\t\t\t\t\t<feature-panel #FeaturePanel [type]=\"record.type\" [code]=\"record.code\" [forDate]=\"record.forDate\"\n\t\t\t\t\t\t\t\t\t\t(forDateChange)=\"featurePanelForDateChange($event)\" [readOnly]=\"false\" (modeChange)=\"onModeChange($event)\"\n\t\t\t\t\t\t\t\t\t\t(panelCancel)=\"clearRecord()\" (panelSubmit)=\"onPanelSubmit($event)\"> </feature-panel>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div *ngIf=\"record.recordType === 'LIST'\" class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-12\" [ngClass]=\"{'full-height-sidebar' : record}\">\n\t\t\t\t\t\t\t\t\t<record-panel [record]=\"record\" (close)=\"clearRecord()\"></record-panel>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t</div> <!--  END sidebar panel -->\n\t\n\t\t\t<div [ngClass]=\"{'col-md-6':!showPanel, 'col-md-8':showPanel}\" style=\"z-index:4;padding-top:10px;\">\n\t\t\t\n\t\t\t\t<div style=\"z-index:999;padding-top:10px;overflow-y:auto;position:absolute;top:0;overflow:visible;\">\n\t\t\t\t\t<div *ngIf=\"searchEnabled || record\" class=\"map-button clickable\" style=\"padding-bottom: 5px;\" (click)=\"!isEdit && togglePanel()\">\n\t\t\t\t\t\t<div class=\"map-button-icon\">\n\t\t\t\t\t\t\t<span class=\"fa clickable\" style=\"font-size: 35px;\"\n\t\t\t\t\t\t\t\t[title]=\"(showPanel ? 'explorer.resize.closeAttributePanel' : 'explorer.resize.openAttributePanel') | localize\"\n\t\t\t\t\t\t\t\t[ngClass]=\"{'fa-angle-double-left': showPanel, 'fa-angle-double-right': !showPanel}\" aria-hidden=\"true\">\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<span *ngIf=\"current && graphVisualizerEnabled\" class=\"map-button visualize-mode-toggle\"> \n\t\t\t\t\t\t<i style=\"margin-right: initial\" class=\"visualize-mode-hierarchy clickable fa fa-share-alt\" aria-hidden=\"true\"\n\t\t\t\t\t\t[title]=\"(graphPanelOpen ? 'explorer.resize.closeGraphViz' : 'explorer.resize.openGraphViz') | localize\"\n\t\t\t\t\t\t(click)=\"toggleGraphPanel()\"></i>\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div *ngIf=\"graphPanelOpen\" id=\"graph-container\" style=\"height: calc(100vh - 74px);padding-left: 58px;\">\n\t\t\t\t\t<div style=\"background-color: white; opacity: 100%; width: 100%; height: 100%;\">\n\t\t\t\t\t\t<relationship-visualizer *ngIf=\"record && record.recordType === 'GEO_OBJECT'\"\n\t\t\t\t\t\t\t[params]=\"{geoObject: current, graphOid: visualizingRelationship, date: calculatedDate}\" [panelOpen]=\"showPanel\"\n\t\t\t\t\t\t\t(changeGeoObject)=\"onChangeGeoObject($event)\" (changeRelationship)=\"visualizingRelationship = $event\">\n\t\t\t\t\t\t</relationship-visualizer>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<!-- Full screen map-->\n\t<div class=\"row\">\n\t\t<div class=\"col-md-12\">\n\t\t\t<div class=\"row\">\n\t\t\t\t\n\t\t\t\t<article id=\"navigator-layer-panel\" class=\"base-layer-panel\"\n\t\t\t\t\t[ngClass]=\"{'second-map-button' : searchEnabled && !showPanel}\"\n\t\t\t\t\t[ngStyle]=\"{'max-width': layersPanelSize === 2 ? '50%' : 'unset', 'padding-left': layersPanelSize === 2 ? '10px' : 'unset'}\">\n\t\t\t\t\t<layer-panel (layerChange)=\"onLayerChange($event)\" (reorder)=\"onReorderLayers($event)\"\n\t\t\t\t\t\t(zoomTo)=\"onZoomTo($event.oid)\" (create)=\"onCreate($event)\" [panelSize]=\"layersPanelSize\"\n\t\t\t\t\t\t[includeGraphLayer]=\"data != null && data.length > 0\"> </layer-panel>\n\t\t\t\t</article>\n\n\t\t\t\t<div id=\"map\" class=\"map-view-port\"></div>\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>","/* eslint-disable padded-blocks */\nimport { GeoObjectType, GeoObject } from \"./registry\";\nimport { HierarchyType } from \"./hierarchy\";\n\nexport class LocationInformation {\n    types: GeoObjectType[];\n    hierarchies: HierarchyType[];\n    hierarchy?: string;\n    entity?: GeoObject;\n    childType?: string;\n    geojson: {\n        type: string;\n        features: GeoObject[]\n    }\n}\n\nexport class ModalState {\n    SEARCH: number;\n    VIEW: number;\n}\n\nexport const PANEL_SIZE_STATE = {\n    MINIMIZED: 0,\n    WINDOWED: 1,\n    FULLSCREEN: 2\n};\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\n\n\n@Component({\n    selector: \"select-type-modal\",\n    templateUrl: \"./select-type-modal.component.html\",\n    styleUrls: []\n})\nexport class SelectTypeModalComponent implements OnInit, OnDestroy {\n\n    version: ListTypeVersion;\n\n    type: string;\n\n    /*\n     * Called on confirm\n     */\n    onCreate: Subject<string>;\n\n    subscription: Subscription;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onCreate = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.onCreate.unsubscribe();\n    }\n\n    init(version: ListTypeVersion, observer: Observer<string>): void {\n        this.version = version;\n        this.subscription = this.onCreate.subscribe(observer);\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onCreate.next(this.type);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize>                        \n        </h1>\n    </div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" name=\"export-form\">\n        <fieldset *ngIf=\"version != null\">\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n\n                    <select id=\"type\" name=\"type\" class=\"select-area\" [(ngModel)]=\"type\" required>\n                        <option></option>\n                        <option *ngFor=\"let subtype of version.subtypes\" [value]=\"subtype.code\">\n                            {{subtype.label}}                            \n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"form.invalid\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\nimport { LayerRecord } from \"@registry/model/list-type\";\n\n@Component({\n    selector: \"record-panel\",\n    templateUrl: \"./record-panel.component.html\",\n    styleUrls: [\"./dataset-location-manager.css\"]\n})\nexport class RecordPanelComponent {\n\n    @Input() record: LayerRecord\n    @Output() close = new EventEmitter<void>();\n\n    onClose(): void {\n        this.close.emit();\n    }\n\n}\n","<div>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <h3>{{record.typeLabel.localizedValue}}</h3>\n    </div>      \n  </div>\n\n  <form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <span class=\"text\"></span>\n          <ul class=\"list-group\">\n            <li *ngFor=\"let attr of record.attributes let i = index\" class=\"list-group-item\"\n              style=\"text-align:left;border:none;padding:0;\">\n              <div class=\"panel panel-default\">\n                <div class=\"panel-heading\">\n                  <h4 style=\"margin:0;\">\n                    <span>\n                      {{attr.label}}\n                    </span>\n                  </h4>\n                </div>\n\n                <div class=\"panel-body\">\n                  <input type=\"text\" [(ngModel)]=\"record.data[attr.name]\" [name]=\"'mod-' + attr.name\" disabled=\"true\">\n                </div>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n  <div class=\"button-holder text-right\" style=\"margin-bottom: 20px;\">\n\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"onClose()\">\n      <localize key=\"modal.button.cancel\"></localize>\n    </button>\n  </div>\n\n</div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventModalComponent } from \"./transition-event-modal.component\";\nimport { AuthService, DateService, LocalizationService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\n@Component({\n\n    selector: \"transition-event-table\",\n    templateUrl: \"./transition-event-table.component.html\",\n    styleUrls: [\"./transition-event-table.css\"],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class TransitionEventTableComponent {\n\n    page: PageResult<TransitionEvent> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    attrConditions: any = [];\n\n    dateCondition = {\n        attribute: \"eventDate\",\n        startDate: \"\",\n        endDate: \"\"\n    };\n\n    beforeTypeCondition = {\n        attribute: \"beforeTypeCode\",\n        value: \"\"\n    };\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[] = [];\n\n    bsModalRef: BsModalRef;\n\n    readOnly: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private modalService: BsModalService, private iService: IOService, public dateService: DateService, private authService: AuthService, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.readOnly = !this.authService.isSRA() && !this.authService.isRA() && !this.authService.isRM();\n        this.refresh();\n\n        this.attrConditions.push(this.dateCondition);\n        this.attrConditions.push(this.beforeTypeCondition);\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            this.types = this.filterTypesBasedOnMyOrg(types);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    filterTypesBasedOnMyOrg(types) {\n        let isSRA = this.authService.isSRA();\n        let myOrgTypes = [];\n        let myOrgs: string[] = this.authService.getMyOrganizations();\n\n        for (let i = 0; i < types.length; ++i) {\n            const type = types[i];\n            const orgCode = type.orgCode;\n            let myOrgIndex = myOrgs.indexOf(orgCode);\n\n            if (myOrgIndex !== -1 || isSRA) {\n                myOrgTypes.push(type);\n            }\n        }\n\n        return myOrgTypes;\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getPage(this.page.pageSize, pageNumber, this.attrConditions).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    filterChange(): void {\n        this.refresh(this.page.pageNumber);\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(false);\n        this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n            this.refresh(this.page.pageNumber);\n        });\n    }\n\n    deleteEvent(jsEvent, transitionEvent: TransitionEvent): void {\n        jsEvent.stopPropagation();\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + transitionEvent.eventId + \"]\";\n        this.bsModalRef.content.data = transitionEvent;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            this.service.delete(transitionEvent).then(response => {\n                this.refresh(this.page.pageNumber);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onView(event: TransitionEvent): void {\n        this.service.getDetails(event.oid).then(response => {\n            this.bsModalRef = this.modalService.show(TransitionEventModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(false, response);\n            this.bsModalRef.content.onEventChange.subscribe((event: TransitionEvent) => {\n                this.refresh(this.page.pageNumber);\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n  <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n\n<div>\n  <div class=\"row\" style=\"padding-top:10px; padding-bottom: 10px;\">\n    <span class=\"col-md-4\">\n      <label for=\"beforeTypeFilter\">\n        <localize key=\"transition.event.beforeType\"></localize>\n      </label>\n      <select id=\"beforeTypeFilter\" name=\"beforeTypeFilter\" class=\"select-area\" [(ngModel)]=\"beforeTypeCondition.value\"\n        (change)=\"filterChange()\">\n        <option></option>\n        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n      </select>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"startDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.startDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'startDateFilter'\" [allowFutureDates]=\"false\" name=\"startDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\">\n      </date-field>\n    </span>\n    <span class=\"col-md-4\">\n      <label for=\"endDateFilter\">\n        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n      </label>\n      <date-field [(value)]=\"dateCondition.endDate\" [classNames]=\"['form-control']\" label=\"\" (change)=\"filterChange()\"\n        [inputName]=\"'endDateFilter'\" [allowFutureDates]=\"false\" name=\"endDateFilter\" [required]=\"false\" customStyles=\"width:100%; height:40px;\"></date-field>\n    </span>\n  </div>\n  <div class=\"row\">\n    <span class=\"col-md-4\"></span>\n    <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(dateCondition.startDate, dateCondition.endDate)\">\n      <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n    </span>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.actions\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.date\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"transition.event.id\"></localize>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-event\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td class=\"col-md-1\" style=\"vertical-align:middle;text-align:left;\">\n                <a *ngIf=\"event.permissions.includes('READ')\" (click)=\"onView(event)\" [ngClass]=\"{'fa-pencil' : event.permissions.indexOf('WRITE') !== -1, 'fa-eye' : event.permissions.indexOf('WRITE') === -1}\" class=\"fa\" aria-hidden=\"true\"></a>\n                <a *ngIf=\"event.permissions.includes('DELETE')\" (click)=\"deleteEvent($event, event)\" class=\"fa fa-trash\" aria-hidden=\"true\"></a>\n              </td>\n              <td class=\"col-md-1\">\n                <h5><strong><date-text [date]=\"event.eventDate\"></date-text></strong></h5>\n              </td>\n              <td class=\"col-md-4\">\n                <h5><strong>{{event.description.localizedValue}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.beforeTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.afterTypeLabel}}</strong></h5>\n              </td>\n              <td class=\"col-md-2\">\n                <h5><strong>{{event.eventId}}</strong></h5>\n              </td>\n            </tr>\n          </ng-template>\n        </tbody>\n      </table>\n      <div *ngIf=\"!this.readOnly\" style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n          <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n            <localize key=\"hierarchy.management.button.create\"></localize>\n          </button>\n        </div>\n      </div>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","/* eslint-disable indent */\n/* eslint-disable quotes */\nimport { Component, OnDestroy, OnInit, ViewChild, ChangeDetectorRef } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observable, Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { IOService, RegistryService } from \"@registry/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { Transition, TransitionEvent } from \"@registry/model/transition-event\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\n\nimport { DndDropEvent } from \"ngx-drag-drop\";\nimport * as uuid from \"uuid\";\n\n/* D3 Stuffs */\nimport * as d3 from \"d3\";\n\nexport const DRAW_SCALE_MULTIPLIER: number = 1.0;\n\nexport const VIEWPORT_SCALE_FACTOR_X: number = 1.0;\nexport const VIEWPORT_SCALE_FACTOR_Y: number = 1.0;\n\nexport const GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR: string = \"#6BA542\"; // #3E2A5A or \"purple\"\nexport const GRAPH_GO_LABEL_COLOR: string = \"black\";\nexport const GRAPH_CIRCLE_FILL: string = \"#999\";\nexport const GRAPH_LINE_COLOR: string = \"#999\";\n\n@Component({\n    selector: \"transition-event-modal\",\n    templateUrl: \"./transition-event-modal.component.html\",\n    styleUrls: [\"./transition-event-modal.component.css\"]\n})\nexport class TransitionEventModalComponent implements OnInit, OnDestroy {\n\n    @ViewChild(\"typeaheadParent\") typeaheadParent;\n\n    message: string = null;\n\n    event: TransitionEvent = null;\n\n    activeTransition: Transition = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    onEventChange: Subject<TransitionEvent>;\n\n    afterTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    beforeTypes: { label: string, code: string, orgCode: string, superTypeCode?: string }[] = [];\n\n    /*\n     * List of geo object types from the system\n     */\n    readonly: boolean = false;\n\n    valid: boolean = false;\n\n    draggable = {\n        // note that data is handled with JSON.stringify/JSON.parse\n        // only set simple data or POJO's as methods will be lost\n        data: \"myDragData\",\n        effectAllowed: \"all\",\n        disable: false,\n        handle: true\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private changeDetector: ChangeDetectorRef, public rService: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService,\n        private dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.onEventChange = new Subject();\n\n        this.iService.listGeoObjectTypes(false).then(types => {\n            let myOrgs: string[] = this.authService.getMyOrganizations();\n            let myOrgTypes = [];\n            let afterTypes = [];\n            let isSRA = this.authService.isSRA();\n            for (let i = 0; i < types.length; ++i) {\n                const orgCode = types[i].orgCode;\n                const typeCode = types[i].superTypeCode != null ? types[i].superTypeCode : types[i].code;\n\n                let myOrgIndex = myOrgs.indexOf(orgCode);\n\n                if (myOrgIndex !== -1 || isSRA) {\n                    afterTypes.push(types[i]);\n\n                    if (this.authService.isGeoObjectTypeRM(orgCode, typeCode)) {\n                        myOrgTypes.push(types[i]);\n                    }\n                }\n            }\n            this.beforeTypes = myOrgTypes;\n            this.afterTypes = afterTypes;\n\n            this.readonly = this.readonly || this.event.permissions.indexOf(\"WRITE\") === -1;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.onEventChange.unsubscribe();\n    }\n\n    init(readonly: boolean, event?: TransitionEvent): void {\n        this.readonly = readonly;\n\n        if (event != null) {\n            this.event = event;\n        } else {\n            this.event = {\n                beforeTypeCode: \"\",\n                afterTypeCode: \"\",\n                eventDate: \"\",\n                permissions: [\"WRITE\", \"READ\", \"DELETE\", \"CREATE\"],\n                description: this.lService.create(),\n                transitions: []\n            };\n        }\n\n        setTimeout(() => {\n            this.onChange();\n        }, 0);\n    }\n\n    setActiveTransition(transition: Transition) {\n        let highlight = (active: boolean, trans: Transition) => {\n            let colorable = d3.selectAll('#svgHolder p[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],p[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            colorable.style(\"color\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_GO_LABEL_COLOR);\n\n            let fillable = d3.selectAll('#svgHolder circle[data-goCode=\"' + trans.sourceCode + '\"][data-depth=\"1\"],circle[data-goCode=\"' + trans.targetCode + '\"][data-depth=\"2\"]');\n            fillable.attr(\"fill\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_CIRCLE_FILL);\n\n            let strokeable = d3.selectAll('#svgHolder path[data-transOid=\"' + trans.oid + '\"]');\n            strokeable.attr(\"stroke\", active ? GRAPH_ACTIVE_TRANSITION_HIGHLIGHT_COLOR : GRAPH_LINE_COLOR);\n        };\n\n        if (this.activeTransition != null) {\n            highlight(false, this.activeTransition);\n        }\n\n        this.activeTransition = transition;\n\n        if (transition != null) {\n            highlight(true, transition);\n        }\n    }\n\n    onCreate(): void {\n        this.event.transitions.push({\n            oid: uuid.v4(),\n            isNew: true,\n            sourceCode: \"\",\n            sourceType: \"\",\n            targetCode: \"\",\n            targetType: \"\",\n            transitionType: \"\",\n            impact: \"\",\n            order: this.event.transitions.length\n        });\n    }\n\n    onChange(): void {\n        this.calculateDerivedAttributes();\n        this.renderVisual();\n\n        // Register highlight event listeners\n        let that = this;\n\n        setTimeout(() => {\n            d3.selectAll(\".transition\").on(\"mouseover\", function(mouseEvent) {\n                let d3This: any = this;\n                let transitionOid = d3This.getAttribute(\"data-transOid\");\n\n                let index = that.event.transitions.findIndex(trans => trans.oid === transitionOid);\n\n                that.setActiveTransition(that.event.transitions[index]);\n            });\n            d3.select(\"#transition-container\").on(\"mouseleave\", function(mouseEvent) {\n                that.setActiveTransition(null);\n            });\n        }, 0);\n\n        this.validChange();\n    }\n\n    getTypeAheadObservable(isSource: boolean, transition: Transition, typeCode: string, property: string): Observable<any> {\n        let date = isSource ? this.dateService.addDay(-1, this.event.eventDate) : this.event.eventDate;\n        return new Observable((observer: any) => {\n            this.rService.getGeoObjectSuggestions(transition[property], typeCode, null, null, null, date, date).then(results => {\n                let filtered = results.filter(result => {\n                  let pair = {\n                    sourceCode: isSource ? result.code : transition.sourceCode,\n                    targetCode: isSource ? transition.targetCode : result.code\n                  };\n\n                  for (let i = 0; i < this.event.transitions.length; ++i) {\n                      let transition = this.event.transitions[i];\n\n                      if (transition.sourceCode === pair.sourceCode && transition.targetCode === pair.targetCode) {\n                          return false;\n                      }\n                  }\n\n                  return true;\n                });\n\n                observer.next(filtered);\n            });\n        });\n    }\n\n    typeaheadOnSelect(selection: any, transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = selection.item.code;\n            transition.targetType = selection.item.typeCode;\n            transition.targetText = selection.item.name + \" (\" + selection.item.code + \")\";\n        } else {\n            transition.sourceCode = selection.item.code;\n            transition.sourceType = selection.item.typeCode;\n            transition.sourceText = selection.item.name + \" (\" + selection.item.code + \")\";\n        }\n\n        this.onChange();\n    }\n\n    clear(transition: Transition, property: string): void {\n        if (property === \"targetText\") {\n            transition.targetCode = \"\";\n            transition.targetType = \"\";\n            transition.targetText = \"\";\n        } else {\n            transition.sourceCode = \"\";\n            transition.sourceType = \"\";\n            transition.sourceText = \"\";\n        }\n\n        this.onChange();\n    }\n\n    localizeTransitionImpact(impact: string): string {\n        return this.lService.decode(\"transition.event.\" + impact.toLowerCase());\n    }\n\n    localizeTransitionType(type: string): string {\n        return type == null ? null : this.lService.decode(\"transition.event.type.\" + type.toLowerCase());\n    }\n\n    validChange() {\n        setTimeout(() => {\n            this.valid = (this.event.eventDate != null && this.event.eventDate.length > 0) &&\n                this.event.transitions.length > 0 &&\n                this.event.afterTypeCode != null &&\n                this.event.beforeTypeCode != null;\n        }, 0);\n    }\n\n    remove(index: number): void {\n        this.event.transitions.splice(index, 1);\n        this.onChange();\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.event).then(response => {\n            this.onEventChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n    calculateDerivedAttributes(): void {\n        let stats = {};\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                if (stats[trans.sourceCode] == null) {\n                    stats[trans.sourceCode] = {\n                        source: 1,\n                        target: 0\n                    };\n                } else {\n                    stats[trans.sourceCode].source++;\n                }\n\n                if (stats[trans.targetCode] == null) {\n                    stats[trans.targetCode] = {\n                        source: 0,\n                        target: 1\n                    };\n                } else {\n                    stats[trans.targetCode].target++;\n                }\n            }\n        });\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let sourceStats = stats[trans.sourceCode];\n                let targetStats = stats[trans.targetCode];\n\n                let updown = \"UPGRADE\";\n                if (trans.transitionType != null && trans.transitionType.indexOf(\"DOWNGRADE\") !== -1) {\n                    updown = \"DOWNGRADE\";\n                }\n\n                if (sourceStats.source === 1 && targetStats.target === 1) {\n                    trans.transitionType = \"REASSIGN\";\n                    trans.impact = \"FULL\";\n                } else if (sourceStats.source > 1) {\n                    trans.impact = \"PARTIAL\";\n\n                    if (targetStats.target > 1) {\n                        trans.transitionType = \"MERGE\";\n                    } else {\n                        trans.transitionType = \"SPLIT\";\n                    }\n                } else if (targetStats.target > 1) {\n                    trans.impact = \"FULL\";\n                    trans.transitionType = \"MERGE\";\n                }\n\n                if (trans.sourceType !== trans.targetType) {\n                    if (trans.transitionType === \"REASSIGN\") {\n                        trans.typeUpdown = updown;\n                        delete trans.typePart;\n                        trans.transitionType = trans.typeUpdown;\n                    } else {\n                        trans.typeUpdown = updown;\n                        trans.typePart = trans.transitionType;\n                        trans.transitionType = trans.typeUpdown + \"_\" + trans.typePart;\n                    }\n                } else {\n                    delete trans.typePart;\n                }\n            }\n        });\n    }\n\n    onChangeTypeUpdown(transition: any): void {\n        if (transition.typePart) {\n            transition.transitionType = transition.typeUpdown + \"_\" + transition.typePart;\n        } else {\n            transition.transitionType = transition.typeUpdown;\n        }\n    }\n\n    /* Drag Drop Transitions */\n    onDragStart(event:DragEvent) {\n        // console.log(\"drag started\", JSON.stringify(event, null, 2));\n    }\n\n    onDragEnd(event:DragEvent) {\n        // console.log(\"drag ended\", JSON.stringify(event, null, 2));\n    }\n\n    onDragged(item: any, type: string) {\n        // console.log(\"onDragged\", item, type);\n    }\n\n    onDraggableCopied(event:DragEvent) {\n        // console.log(\"draggable copied\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableLinked(event:DragEvent) {\n        // console.log(\"draggable linked\", JSON.stringify(event, null, 2));\n    }\n\n    onDraggableMoved(event:DragEvent) {\n        // console.log(\"draggable moved\", JSON.stringify(event, null, 2));\n    }\n\n    onDragCanceled(event:DragEvent) {\n        // console.log(\"drag cancelled\", JSON.stringify(event, null, 2));\n    }\n\n    onDragover(event:DragEvent) {\n        // console.log(\"dragover\", JSON.stringify(event, null, 2));\n    }\n\n    onDrop(event:DndDropEvent) {\n        let transition: Transition = event.data;\n        let index: number = event.index;\n\n        // Remove from array\n        this.event.transitions.splice(transition.order, 1);\n\n        // Calculate new index, which may have shifted due to us removing the transition.\n        let newIndex = (index > transition.order) ? index - 1 : index;\n\n        // Insert us back into the array at newIndex\n        this.event.transitions.splice(newIndex, 0, transition);\n\n        // Update order for all transitions as elements have shifted\n        for (let i = 0; i < this.event.transitions.length; ++i) {\n            this.event.transitions[i].order = i;\n        }\n\n        window.setTimeout(() => { this.onChange(); }, 0);\n    }\n\n    /* D3 Stuff */\n    private renderVisual(): void {\n        if (this.event.transitions == null || this.event.transitions.length === 0) {\n            d3.select(\"#svg\").remove();\n            return;\n        }\n        d3.select(\"#svg\").remove();\n\n        let svg = d3.select(\"#svg\");\n\n        if (svg.node() == null) {\n            svg = d3.select(\"#svgHolder\").append(\"svg\");\n            svg.attr(\"id\", \"svg\");\n        }\n\n        let appData = this.generateAppData();\n        let renderingData = this.generateRenderingData(appData);\n\n        /*\n        let autoBox = function autoBox() {\n            document.body.appendChild(this);\n            const { x, y, width, height } = svg.node().getBBox();\n            document.body.removeChild(this);\n            return [x, y, width, height];\n        };\n        */\n\n        let chart = () => {\n            const root = renderingData.d3;\n\n            let links = svg.append(\"g\")\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", GRAPH_LINE_COLOR)\n                .attr(\"stroke-opacity\", 0.4)\n                .attr(\"stroke-width\", 0.4 * DRAW_SCALE_MULTIPLIER);\n            links.selectAll(\"path\")\n                .data(root.links())\n                .join(\"path\")\n                    .style(\"display\", function(d: any) {\n                        return d.source.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"d\", (d: any) => `\n                      M${d.target.y},${d.target.x}\n                       ${d.source.y},${d.source.x}\n                    `)\n                    .attr(\"data-transOid\", (d: any) => d.source.data.name === \"root\" ? null : appData.linkDataMappings[d.source.data.code + \":\" + d.target.data.code]);\n\n            svg.append(\"g\")\n                .selectAll(\"circle\")\n                .data(root.descendants())\n                .join(\"circle\")\n                    .style(\"display\", function(d: any) {\n                        return d.depth === 0 ? \"none\" : null;\n                    })\n                    .attr(\"cx\", (d: any) => d.y)\n                    .attr(\"cy\", (d: any) => d.x)\n                    .attr(\"fill\", (d: any) => GRAPH_CIRCLE_FILL)\n                    .attr(\"r\", 0.9 * DRAW_SCALE_MULTIPLIER)\n                    .attr(\"data-goCode\", (d: any) => d.data.code)\n                    .attr(\"data-depth\", (d: any) => d.depth);\n\n            svg.append(\"g\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-size\", 2 * DRAW_SCALE_MULTIPLIER)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"stroke-width\", 3)\n              .selectAll(\"foreignObject\")\n              .data(root.descendants())\n              .join(\"foreignObject\")\n                .style(\"display\", function(d: any) {\n                    return d.depth === 0 ? \"none\" : null;\n                })\n                .attr(\"x\", (d: any) => (d.y + ((d.depth === 1) ? -13 : 1)))\n                .attr(\"y\", (d: any) => (d.x) + ((d.depth === 1) ? -2 : -3))\n                .attr(\"font-size\", \"0.7em\")\n                .attr(\"font-family\", \"sans-serif\")\n                .attr(\"font-weight\", \"bold\")\n                .attr(\"width\", 12)\n                .attr(\"height\", 8)\n              .append(\"xhtml:p\")\n                .attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\n                .attr(\"data-goCode\", (d: any) => d.data.code)\n                .attr(\"data-depth\", (d: any) => d.depth)\n                .style(\"margin\", \"0.5px\")\n                .style(\"vertical-align\", \"middle\")\n                .style(\"line-height\", 1.5)\n                .style(\"color\", GRAPH_GO_LABEL_COLOR)\n                .style(\"padding-left\", \"0.4px\")\n                .style(\"padding-top\", \"0.2px\")\n                .html((d: any) => d.data.name)\n              .filter((d: any) => d.depth === 1)\n                .style(\"text-align\", \"right\");\n\n            renderingData.multipleParentLinks.forEach(function(link) {\n                links.append(\"path\")\n                    .attr(\"d\", () => `\n                      M${link.parent.y},${link.parent.x}\n                       ${link.child.y},${link.child.x}\n                    `)\n                    .attr(\"data-transOid\", () => link.oid);\n            });\n\n            // return svg.attr(\"viewBox\", autoBox).node();\n        };\n\n        chart();\n\n        this.calculateSvgViewBox();\n    }\n\n    generateRenderingData(appData: any): any {\n        let width = 100;\n\n        const root: any = d3.hierarchy(appData.d3Data).sort((a, b) => d3.ascending(a.data.order, b.data.order));\n        root.dx = 5 * DRAW_SCALE_MULTIPLIER;\n        root.dy = width / (root.height + 1);\n        let d3RenderingData = d3.tree().nodeSize([root.dx, root.dy]).separation(() => 1.5)(root);\n\n        let multipleParentLinks = [];\n        appData.multipleParentLinks.forEach(function(link) {\n            let parentNode = root.find(node => node.data.isSource && node.data.code === link.parent.code);\n            let childNode = root.find(node => !node.data.isSource && node.data.code === link.child.code);\n\n            if (parentNode != null && childNode != null) {\n                multipleParentLinks.push({\n                    parent: parentNode,\n                    child: childNode,\n                    oid: link.oid\n                });\n            }\n        });\n\n        return {\n            d3: d3RenderingData,\n            multipleParentLinks: multipleParentLinks\n        };\n    }\n\n    generateAppData(): any {\n        let children = [];\n        let multipleParentLinks = []; // D3 can't handle multiple parents so we have to draw them ourselves.\n        let linkDataMappings = {}; // D3 doesn't allow us to put data on the link itself. Our link needs an oid. So this is a hack to store data on a link.\n\n        let isChildOfOtherNode = (code: string) => {\n            for (let i = 0; i < children.length; ++i) {\n                let child = children[i];\n\n                if (child.children) {\n                    for (let j = 0; j < child.children.length; ++j) {\n                        let grandChild = child.children[j];\n\n                        if (grandChild.code === code) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        };\n\n        this.event.transitions.forEach(trans => {\n            if (trans.sourceCode != null && trans.sourceCode !== \"\" && trans.targetCode != null && trans.targetCode !== \"\") {\n                let index = children.findIndex(child => child.code === trans.sourceCode);\n                linkDataMappings[trans.sourceCode + \":\" + trans.targetCode] = trans.oid;\n\n                let childExists = isChildOfOtherNode(trans.targetCode);\n                let grandChild = null;\n                if (!childExists) {\n                    grandChild = {\n                        name: trans.targetText,\n                        code: trans.targetCode,\n                        isSource: false,\n                        children: []\n                    };\n                } else {\n                    multipleParentLinks.push({\n                        oid: trans.oid,\n                        child: {\n                            code: trans.targetCode,\n                            text: trans.targetText,\n                            type: trans.targetType\n                        },\n                        parent: {\n                            code: trans.sourceCode,\n                            text: trans.sourceText,\n                            type: trans.sourceType\n                        }\n                    });\n                }\n\n                if (index !== -1) {\n                    let child = children[index];\n\n                    let index2 = child.children.findIndex(child => child.code === trans.targetCode);\n\n                    if (index2 != null && grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n                } else {\n                    let child: any = {\n                        name: trans.sourceText,\n                        code: trans.sourceCode,\n                        children: [],\n                        isSource: true\n                    };\n\n                    if (grandChild != null) {\n                        child.children.push(grandChild);\n                    }\n\n                    children.push(child);\n                }\n            }\n        });\n\n        return {\n            d3Data: {\n                name: \"root\",\n                children: children\n            },\n            multipleParentLinks: multipleParentLinks,\n            linkDataMappings: linkDataMappings\n        };\n    }\n\n    calculateSvgViewBox(): void {\n        let svg: any = d3.select(\"#svg\");\n        let svgNode: any = svg.node();\n\n        let { x, y, width, height } = svgNode.getBBox();\n\n        const xPadding = 0;\n        const yPadding = 2;\n        svg.attr(\"viewBox\", (x - xPadding) + \" \" + (y - yPadding) + \" \" + (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X + \" \" + (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y);\n\n        // width = (width + xPadding * 2) * VIEWPORT_SCALE_FACTOR_X;\n        // height = (height + yPadding * 2) * VIEWPORT_SCALE_FACTOR_Y;\n\n        // d3.select(\"#svgHolder\").style(\"width\", width + \"px\");\n        // d3.select(\"#svgHolder\").style(\"height\", height + \"px\");\n    }\n\n}\n","<ng-template #customItemTemplate let-model=\"item\" let-index=\"index\">\n    <h5>{{model.name }} : {{ model.code }}</h5>\n</ng-template>\n\n<div class=\"modal-body row\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n        <fieldset *ngIf=\"event != null\">\n            <div class=\"col-md-6\">\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label>\n\t\t                        <localize key=\"transition.event.date\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <span *ngIf=\"readonly\" style=\"line-height: 40px;\" class=\"date-string-display\">\n                            <date-text [date]=\"event.eventDate\"></date-text>                            \n\t\t                    </span>\n\t\t                    <date-field *ngIf=\"!readonly\" [(value)]=\"event.eventDate\" [classNames]=\"['form-control']\" label=\"\"\n\t\t                        [inputName]=\"'eventDate'\" [allowFutureDates]=\"false\" name=\"eventDate\" [required]=\"true\" (validChange)=\"validChange($event)\"\n\t\t                        [disable]=\"readonly || event.transitions.length > 0\"></date-field>\n\t\t                </div>\n\t\t            </div>\n\t\t        \n\t\t            <div class=\"row-holder\" *ngFor=\"let localeValue of event.description.localeValues\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label> <localize style=\"display:block;\" key=\"transition.event.description\"></localize>\n\t\t                        <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n\t\t                            </convert-key-label>)</span>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div class=\"holder\">\n\t\t                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n\t\t                        class=\"form-control\" [disabled]=\"readonly\"\n\t\t                        [required]=\"false\" />\n\t\t                </div>\n\t\t            </div>\n\t\t\n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"beforeTypeCode\">\n\t\t                        <localize key=\"transition.event.beforeType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && beforeTypes != null\" class=\"holder\">\n\t\t                    <select id=\"beforeTypeCode\" name=\"beforeTypeCode\" class=\"select-area\" [(ngModel)]=\"event.beforeTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of beforeTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.beforeTypeLabel\" name=\"beforeType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n\t\t            \n\t\t            <div class=\"row-holder\">\n\t\t                <div class=\"label-holder\">\n\t\t                    <label for=\"afterTypeCode\">\n\t\t                        <localize key=\"transition.event.afterType\"></localize>\n\t\t                    </label>\n\t\t                </div>\n\t\t                <div *ngIf=\"!readonly && afterTypes != null\" class=\"holder\">\n\t\t                    <select id=\"afterTypeCode\" name=\"afterTypeCode\" class=\"select-area\" [(ngModel)]=\"event.afterTypeCode\"\n\t\t                        (change)=\"onChange()\" [disabled]=\"event.transitions.length > 0\" required>\n\t\t                        <option></option>\n\t\t                        <option *ngFor=\"let type of afterTypes\" [value]=\"type.code\">{{type.label}}</option>\n\t\t                    </select>\n\t\t                </div>\n\t\t                <div *ngIf=\"readonly\" class=\"holder\">\n\t\t                    <input [(ngModel)]=\"event.afterTypeLabel\" name=\"afterType\" type=\"text\" class=\"form-control\"\n\t\t                        disabled />\n\t\t                </div>\n\t\t            </div>\n            </div>\n            \n            <div class=\"col-md-6\">\n\t\t\t\t      <div class=\"row\" style=\"text-align: center;\">\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.before\"></localize></label>\n\t\t\t\t        <label class=\"col-md-6\"><localize key=\"transition.event.after\"></localize></label>\n\t\t\t\t      </div>\n\t\t\t\t    \n\t\t\t\t      <div style=\"margin-top: 10px;\" id=\"svgHolder\"></div>\n\t\t\t\t    </div>\n\t\t\t\t    \n            <div class=\"row-holder\" *ngIf=\"event.beforeTypeCode != null && event.beforeTypeCode !== '' && event.afterTypeCode != null && event.afterTypeCode !== '' && event.eventDate != null && event.eventDate !== ''\">\n                    <table class=\"table\" style=\"border-collapse: separate;\">\n                        <thead>\n\t                        <tr style=\"height: 50px;color: grey;\">\n\t\t                        <th *ngIf=\"!readonly\"></th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.before\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.impact\"></localize> </th>\n\t\t                        <th style=\"width: 35%; vertical-align: middle;\"> <localize key=\"transition.event.after\"></localize> </th>\n\t\t                        <th style=\"width: 10%; vertical-align: middle;\"> <localize key=\"transition.event.type\"></localize> </th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\"></th>\n\t\t                        <th style=\"width: 5%; vertical-align: middle;\" *ngIf=\"!readonly\"></th>\n\t                        </tr>\n                        </thead>\n                        <tbody class=\"dndList\" id=\"transition-container\"\n                          [dndDropzone]=\"readonly ? null : true\"\n                          [dndEffectAllowed]=\"readonly ? null : 'copyMove'\"\n                          (dndDrop)=\"readonly ? null : onDrop($event)\"\n                        >\n                            <tr *ngIf=\"!readonly\" class=\"dndPlaceholder\" dndPlaceholderRef>\n                              <td colspan=\"7\"></td>\n                            </tr>\n                        \n                            <tr *ngFor=\"let transition of event.transitions; let i = index;\" class=\"transition\" style=\"height: 50px;\" [attr.data-transOid]=\"transition.oid\"\n                                [dndDraggable]=\"readonly ? null : transition\"\n                                [dndEffectAllowed]=\"readonly ? null : draggable.effectAllowed\"\n                                [dndDisableIf]=\"readonly ? null : draggable.disable\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndStart)=\"readonly ? null : onDragStart($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCopied)=\"readonly ? null : onDraggableCopied($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndLinked)=\"readonly ? null : onDraggableLinked($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndMoved)=\"readonly ? null : onDraggableMoved($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndCanceled)=\"readonly ? null : onDragCanceled($event)\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t      (dndEnd)=\"readonly ? null : onDragEnd($event)\"\n                            >\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle; text-align: center;\">\n                                  <a style=\"font-size:25px; color: #969696; cursor: move;\" class=\"fa fa-bars\"></a>\n                                </td>\n                                <td>\n                                    <div class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.source-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.sourceText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(true, transition, this.event.beforeTypeCode, 'sourceText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'sourceText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentS-' + i\">\n\n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentS-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'sourceText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td style=\"vertical-align:middle;\">\n                                    <label>{{localizeTransitionImpact(transition.impact)}}</label>\n                                </td>\n                                <td>\n                                    <div  class=\"input-group\">\n                                        <input type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                            [name]=\"'transition.target-' + transition.oid + '-' + i\" [disabled]=\"readonly\" required\n                                            [(ngModel)]=\"transition.targetText\" [typeaheadAsync]=\"true\"\n                                            [typeahead]=\"getTypeAheadObservable(false, transition, this.event.afterTypeCode, 'targetText')\"\n                                            (typeaheadOnSelect)=\"typeaheadOnSelect($event, transition, 'targetText')\"\n                                            [typeaheadOptionsLimit]=\"7\" [typeaheadItemTemplate]=\"customItemTemplate\"\n                                            [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" [container]=\"'#typeaheadParentT-' + i\">\n                                        \n                                        <div style=\"position: absolute;\">\n                                            <div [id]=\"'typeaheadParentT-' + i\" style=\"position: fixed; z-index: 10;\">\n                                            </div>\n                                        </div>\n\n                                        <span *ngIf=\"!readonly\" class=\"input-group-addon clickable addon-alert\"\n                                            (click)=\"clear(transition, 'targetText')\">\n                                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i>\n                                        </span>\n\n                                        <!-- Hack: This is needed for formatting  -->\n                                        <span *ngIf=\"readonly\" class=\"input-group-addon addon-alert\">\n                                        </span>\n                                    </div>\n                                </td>\n                                <td *ngIf=\"transition.typePart || !transition.typeUpdown\" style=\"vertical-align:middle;\">\n                                    <label *ngIf=\"!transition.typeUpdown\">{{localizeTransitionType(transition.transitionType)}}</label>\n                                    <label *ngIf=\"transition.typePart\" style=\"min-width:80px;\">{{localizeTransitionType(transition.typePart)}}</label>\n                                </td>\n                                <td *ngIf=\"transition.typeUpdown\">\n                                    <select style=\"min-width:80px;\" *ngIf=\"transition.typeUpdown\" [name]=\"'transition.transitionType-updown-' + transition.oid + '-' + i\" class=\"select-area\"\n                                        [(ngModel)]=\"transition.typeUpdown\" (change)=\"onChangeTypeUpdown(transition)\" [disabled]=\"readonly\" required>\n                                        <option value=\"UPGRADE\"><localize key=\"transition.event.type.upgrade\"></localize></option>\n                                        <option value=\"DOWNGRADE\"><localize key=\"transition.event.type.downgrade\"></localize></option>\n                                    </select>\n                                </td>\n                                <td *ngIf=\"!readonly\" style=\"vertical-align: middle;\">\n                                    <span class=\"clickable\" (click)=\"remove(i)\">\n                                        <a class=\"fa fa-trash\" style=\"font-size:30px;\" aria-hidden=\"true\"></a>\n                                    </span>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"!readonly\" style=\"margin-left: 6px; margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                        <div class=\"col-md-6\">\n                            <i class=\"fa fa-plus clickable\" (click)=\"onCreate()\"> \n                                <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                            </i>\n                        </div>\n                    </div>\n\n                </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                            role=\"button\" [disabled]=\"form.invalid || !valid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType, BusinessTypeByOrg } from \"@registry/model/business-type\";\nimport { CreateBusinessTypeModalComponent } from \"./modals/create-business-type-modal.component\";\nimport { ManageBusinessTypeModalComponent } from \"./modals/manage-business-type-modal.component\";\n\n@Component({\n    selector: \"business-type-manager\",\n    templateUrl: \"./business-type-manager.component.html\",\n    styleUrls: [\"./business-type-manager.css\"]\n})\nexport class BusinessTypeManagerComponent implements OnInit {\n\n    message: string = null;\n    orgs: BusinessTypeByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public service: BusinessTypeService, private modalService: BsModalService, private router: Router, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.service.getByOrganization().then(orgs => {\n            this.orgs = orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCreate(org: BusinessTypeByOrg): void {\n        this.bsModalRef = this.modalService.show(CreateBusinessTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(org);\n        this.bsModalRef.content.onBusinessTypeChange.subscribe((type: BusinessType) => {\n            org.types.push(type);\n        });\n    }\n\n    onView(type: BusinessType): void {\n        this.service.edit(type.oid).then(t => {\n            this.bsModalRef = this.modalService.show(ManageBusinessTypeModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(t, true);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onEdit(org: BusinessTypeByOrg, type: BusinessType): void {\n        this.service.edit(type.oid).then(t => {\n            this.bsModalRef = this.modalService.show(ManageBusinessTypeModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true\n            });\n            this.bsModalRef.content.init(t, false);\n\n            this.bsModalRef.content.onBusinessTypeChange.subscribe(t => {\n                const index = org.types.findIndex((tt) => type.code === tt.code);\n\n                if (index !== -1) {\n                    org.types[index] = t;\n                }\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onDelete(org: BusinessTypeByOrg, type: BusinessType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + type.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.remove(type).then(() => {\n                org.types = org.types.filter((t) => {\n                    return t.code !== type.code;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"settings.organizations.heading\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.types && org.types.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"business.data.noTypes\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.types && org.types.length > 0\" class=\"type-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"business.data.types\"></localize></th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let type of org.types; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/business-type/' + type.oid\" routerLinkActive=\"active\">\n                                    {{type.displayLabel.localizedValue}}\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(type)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onEdit(org, type)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"modal.button.edit\"></localize>\n                                    </button>\n                                    <button type=\"submit\" (click)=\"onDelete(org, type)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.write\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { LocalizationService } from \"@shared/service\";\nimport { Organization } from \"@shared/model/core\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType } from \"@registry/model/business-type\";\n\n@Component({\n    selector: \"create-business-type-modal\",\n    templateUrl: \"./create-business-type-modal.component.html\",\n    styleUrls: []\n})\nexport class CreateBusinessTypeModalComponent implements OnInit {\n\n    type: BusinessType;\n    organization: Organization = null;\n    message: string = null;\n    organizationLabel: string;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onBusinessTypeChange: Subject<BusinessType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: BusinessTypeService, private lService: LocalizationService, public bsModalRef: BsModalRef) {\n        this.onBusinessTypeChange = new Subject<BusinessType>();\n    }\n\n    ngOnInit(): void {\n        this.type = {\n            code: \"\",\n            organization: \"\",\n            displayLabel: this.lService.create(),\n            description: this.lService.create(),\n            attributes: []\n        };\n    }\n\n    init(organization: any) {\n        // Filter out organizations they're not RA's of\n        this.organization = organization;\n\n        this.type.organization = this.organization.code;\n        this.type.organizationLabel = this.organization.label;\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.service.apply(this.type).then(data => {\n            this.onBusinessTypeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"business.data.type\"></localize>\n      </h1>\n    </div> \n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"type.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of type.displayLabel.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> \n            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)</span>\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <localized-text [(value)]=\"type.description\" key=\"data.property.label.description\" [inlinelayout]=\"true\"></localized-text>\n      </div>\n    </div>\n            \n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <span class=\"text\">\n            <input type=\"text\" name=\"organization\" [(ngModel)]=\"type.organizationLabel\" disabled required>\n          </span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\nimport { ModalTypes } from \"@shared/model/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"manage-business-type-modal\",\n    templateUrl: \"./manage-business-type-modal.component.html\",\n    styleUrls: [\"./manage-business-type-modal.css\"],\n    // host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class ManageBusinessTypeModalComponent implements OnInit {\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: \"\", termOption: \"\" };\n\n    message: string = null;\n    type: BusinessType;\n    public onBusinessTypeChange: Subject<BusinessType>;\n    readOnly: boolean = false;\n\n    constructor(private service: BusinessTypeService, private localizationService: LocalizationService, private modalService: BsModalService, public bsModalRef: BsModalRef) {\n    }\n\n    ngOnInit(): void {\n        this.onBusinessTypeChange = new Subject();\n    }\n\n    init(type: BusinessType, readOnly: boolean) {\n        this.type = type;\n        this.readOnly = readOnly;\n    }\n\n    createAttribute(): void {\n        this.onModalStateChange({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.onModalStateChange({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        let confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        confirmBsModalRef.content.message = this.localizationService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.type };\n        confirmBsModalRef.content.submitText = this.localizationService.decode(\"modal.button.delete\");\n        confirmBsModalRef.content.type = ModalTypes.danger;\n\n        confirmBsModalRef.content.onConfirm.subscribe(data => {\n            this.service.deleteAttributeType(this.type.code, attr.code).then(() => {\n\n                this.type.attributes.splice(this.type.attributes.indexOf(attr), 1);\n\n                this.onBusinessTypeChange.next(this.type);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    onTypeChange(data: BusinessType): void {\n        this.onBusinessTypeChange.next(data);\n    }\n\n    update(): void {\n        this.service.apply(this.type).then(type => {\n            this.onBusinessTypeChange.next(type);\n\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n\n        if (this.type.oid != null) {\n            this.service.unlock(this.type.oid).then(() => {\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });    \n        }\n        else {\n            this.bsModalRef.hide();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n\n  <!--\n    <modal-step-indicator></modal-step-indicator>\n  -->\n\n  <ng-container *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"type\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n      <div class=\"heading text-center\">\n        <h1>\n          <localize *ngIf=\"readOnly\" key=\"business.data.view.type\"></localize>\n          <localize *ngIf=\"!readOnly\" key=\"business.data.edit.type\"></localize>\n          : {{type.displayLabel.localizedValue}}\n        </h1>\n      </div>\n      <fieldset>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"type.code\" name=\"code\" disabled required>\n            </span>\n          </div>\n        </div>\n\n        <localized-input [disabled]=\"readOnly\" [(value)]=\"type.displayLabel\" key=\"data.property.label.label\">\n        </localized-input>\n        <!--  \n  <localized-text [disabled]=\"readOnly\" [(value)]=\"type.description\" key=\"data.property.label.description\"></localized-text>\n-->\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"attribute.organization.label\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"type.organizationLabel\" name=\"organization\" disabled\n                required></span>\n          </div>\n        </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <div class=\"panel panel-default\">\n              <div class=\"panel-body\">\n\n                <div class=\"table-responsive\">\n                  <table class=\"table\">\n                    <tbody>\n                      <tr *ngFor=\"let attr of type.attributes\">\n                        <td>{{attr.label.localizedValue}}</td>\n                        <td class=\"button-column\" style=\"width: 60px;\">\n                          <ng-container *ngIf=\"!readOnly && !attr.isDefault\">\n                            <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                            [title]=\"'modal.button.edit' | localize\"></a>\n                            <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\"\n                            (click)=\"removeAttributeType(attr, $event)\" [title]=\"'modal.button.remove' | localize\"></a>\n                          </ng-container>\n                        </td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n\n                <i *ngIf=\"!readOnly\" class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\"\n                  (click)=\"createAttribute()\">\n                  <localize key=\"modal.button.add\"></localize>\n                </i>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readOnly\" type=\"button\" class=\"btn btn-primary\" [disabled]=\"form.invalid\"\n              (click)=\"update()\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n  </ng-container>\n\n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"type\"\n    [service]=\"service\" (geoObjectTypeChange)=\"onTypeChange($event)\" (stateChange)=\"onModalStateChange($event)\">\n  </define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"type\"\n    [attribute]=\"modalState.attribute\" [service]=\"service\" (geoObjectTypeChange)=\"onTypeChange($event)\"\n    (stateChange)=\"onModalStateChange($event)\">\n  </edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    (stateChange)=\"onModalStateChange($event)\"></manage-term-options>\n\n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [attribute]=\"modalState.attribute\"\n    [termOption]=\"modalState.termOption\" (stateChange)=\"onModalStateChange($event)\">\n  </edit-term-option-input>\n\n</div>","import { Component, OnInit } from \"@angular/core\";\n\nimport { ActivatedRoute } from \"@angular/router\";\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from \"@shared/model/generic-table\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"business-table\",\n    templateUrl: \"./business-table.component.html\",\n    styles: []\n})\nexport class BusinessTableComponent implements OnInit {\n\n    message: string = null;\n\n    businessType: BusinessType;\n\n    config: GenericTableConfig = null;\n    cols: GenericTableColumn[] = [];\n\n    constructor(private service: BusinessTypeService, private localizationService: LocalizationService, private route: ActivatedRoute) { }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.get(oid).then(businessType => {\n            this.businessType = businessType;\n\n            this.cols = [];\n\n            this.businessType.attributes.forEach(attribute => {\n                let type = \"TEXT\";\n                let sortable = true;\n\n                if (attribute.type === \"integer\" || attribute.type === \"decimal\") {\n                    type = \"NUMBER\";\n                } else if (attribute.type === \"boolean\") {\n                    type = \"BOOLEAN\";\n                } else if (attribute.type === \"term\") {\n                    sortable = false;\n                } else if (attribute.type === \"date\") {\n                    type = \"DATE\";\n                }\n\n                this.cols.push({ header: attribute.label.localizedValue, field: attribute.code, type: type, sortable: sortable, filter: sortable });\n            });\n            this.cols.push({\n                header: this.localizationService.decode(\"dropdown.select.geoobject.label\"),\n                field: \"geoObject\",\n                type: \"TEXT\",\n                sortable: true\n            });\n\n            // this.cols.push({ header: \"\", type: \"ACTIONS\", sortable: false });\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: false,\n                create: false,\n                label: this.businessType.displayLabel.localizedValue,\n                sort: { field: \"code\", order: 1 }\n            };\n        });\n    }\n\n    onClick(event: TableEvent): void {\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <ng-container *ngIf=\"businessType != null\">\n            <h2>{{businessType.displayLabel.localizedValue}}</h2>\n            <generic-table [cols]=\"cols\" [config]=\"config\" [pageConfig]=\"{typeCode: businessType.code}\" (click)=\"onClick($event)\"></generic-table>\t\t\n        </ng-container>\n    </div>\n</div>\n\n","import { Component, OnInit, Input, ViewChild, ElementRef } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { FileUploader, FileUploaderOptions } from \"ng2-file-upload\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, EventService } from \"@shared/service\";\nimport { HierarchyService } from \"@registry/service\";\n\nimport { SpreadsheetModalComponent } from \"@registry/component/importer/modals/spreadsheet-modal.component\";\nimport { ImportStrategy } from \"@registry/model/constants\";\nimport { HierarchyGroupedTypeView, TypeGroupedHierachyView } from \"@registry/model/hierarchy\";\nimport { BusinessType } from \"@registry/model/business-type\";\nimport { BusinessTypeService } from \"@registry/service/business-type.service\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"business-importer\",\n    templateUrl: \"./business-importer.component.html\",\n    styleUrls: [\"./business-importer.css\"]\n})\nexport class BusinessImporterComponent implements OnInit {\n\n    currentDate: Date = new Date();\n\n    showImportConfig: boolean = true;\n\n    isValid: boolean = false;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    businessTypes: BusinessType[] = [];\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    businessTypeCode: string = null;\n\n    /*\n    * GeoObjectTypes grouped by hierarchy\n    */\n    allHierarchyViews: HierarchyGroupedTypeView[];\n\n    filteredHierarchyViews: any[];\n\n    /*\n     * Hierarchies grouped by GeoObjectType\n     */\n    allTypeViews: TypeGroupedHierachyView[];\n\n    filteredTypeViews: any[];\n\n    importStrategy: ImportStrategy;\n    importStrategies: any[] = [\n        { strategy: ImportStrategy.NEW_AND_UPDATE, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n        { strategy: ImportStrategy.NEW_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n        { strategy: ImportStrategy.UPDATE_ONLY, label: this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n    ]\n\n    /*\n     * Code of the currently selected GeoObjectType\n     */\n    typeCode: string = null;\n\n    /*\n     * Code of the currently selected Hierarchy\n     */\n    hierarchyCode: string = null;\n\n    /*\n     * Date\n     */\n    date: Date = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n    uploader: FileUploader;\n\n    @ViewChild(\"myFile\")\n    fileRef: ElementRef;\n\n    @Input()\n    format: string = \"EXCEL\";\n\n    /*\n     * currently selected external system.\n     */\n    externalSystemId: string;\n\n    copyBlank: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private eventService: EventService,\n        private modalService: BsModalService,\n        private localizationService: LocalizationService,\n        private hierarchyService: HierarchyService,\n        private businessService: BusinessTypeService\n    ) { }\n\n    ngOnInit(): void {\n        this.businessService.getAll().then(businessTypes => {\n            this.businessTypes = businessTypes;\n        });\n\n        this.hierarchyService.getHierarchyGroupedTypes().then(views => {\n            this.allHierarchyViews = views;\n            this.allTypeViews = [];\n\n            // Make sure we are using the same object references for all types\n            let len0 = this.allHierarchyViews.length;\n            for (let i = 0; i < len0; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let len9 = this.allHierarchyViews.length;\n                    for (let j = 0; j < len9; ++j) {\n                        let view2 = this.allHierarchyViews[j];\n\n                        let indexOf = view2.types.findIndex(findType => type.code === findType.code);\n\n                        if (indexOf !== -1) {\n                            view2.types[indexOf] = type;\n                        }\n                    }\n                }\n            }\n\n            // Generate a TypeGroupedHierarchy lookup structure from the HierarchyGroupedType structure\n            let len = this.allHierarchyViews.length;\n            for (let i = 0; i < len; ++i) {\n                let view = this.allHierarchyViews[i];\n\n                let len2 = view.types.length;\n                for (let j = 0; j < len2; ++j) {\n                    let type = view.types[j];\n\n                    let indexOf = this.allTypeViews.findIndex(findType => findType.code === type.code);\n\n                    if (indexOf !== -1) {\n                        let findType = this.allTypeViews[indexOf];\n\n                        let existingHierarchyIndex = findType.hierarchies.findIndex(findHier => findHier.code === view.code);\n\n                        if (existingHierarchyIndex === -1) {\n                            findType.hierarchies.push(view);\n                        }\n                    } else {\n                        if (type.hierarchies == null) {\n                            type.hierarchies = [];\n                        }\n                        type.hierarchies.push(view);\n                        this.allTypeViews.push(type);\n                    }\n                }\n            }\n\n            this.filteredHierarchyViews = this.allHierarchyViews;\n            this.filteredTypeViews = this.allTypeViews;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n\n        let getUrl = registry.contextPath + \"/excel/get-business-config\";\n\n        let options: FileUploaderOptions = {\n            queueLimit: 1,\n            removeAfterUpload: true,\n            url: getUrl\n        };\n\n        this.uploader = new FileUploader(options);\n\n        this.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n            form.append(\"type\", this.businessTypeCode);\n            form.append(\"copyBlank\", this.copyBlank);\n\n            if (this.date != null) {\n                form.append(\"date\", this.date);\n            }\n            if (this.importStrategy) {\n                form.append(\"strategy\", this.importStrategy);\n            }\n        };\n        this.uploader.onBeforeUploadItem = (fileItem: any) => {\n            this.eventService.start();\n        };\n        this.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n            this.fileRef.nativeElement.value = \"\";\n            this.eventService.complete();\n        };\n        this.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n            const configuration = JSON.parse(response);\n\n            configuration.hierarchy = this.hierarchyCode;\n            configuration.geoObjectType = { code: this.typeCode };\n\n            this.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n            this.bsModalRef.content.init(configuration, \"geoObjectType\", true);\n        };\n        this.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n            const error = JSON.parse(response);\n\n            this.error({ error: error });\n        };\n    }\n\n    onSelectHierarchy(): void {\n        let view: HierarchyGroupedTypeView = null;\n\n        let len = this.allHierarchyViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allHierarchyViews[i].code === this.hierarchyCode) {\n                view = this.allHierarchyViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredTypeViews = view.types;\n        } else {\n            this.filteredTypeViews = this.allTypeViews;\n        }\n    }\n\n    onSelectType(): void {\n        let view: TypeGroupedHierachyView = null;\n\n        let len = this.allTypeViews.length;\n        for (let i = 0; i < len; ++i) {\n            if (this.allTypeViews[i].code === this.typeCode) {\n                view = this.allTypeViews[i];\n                break;\n            }\n        }\n\n        if (view != null) {\n            this.filteredHierarchyViews = view.hierarchies;\n        } else {\n            this.filteredHierarchyViews = this.allHierarchyViews;\n        }\n    }\n\n    onClick(): void {\n        if (this.uploader.queue != null && this.uploader.queue.length > 0) {\n            this.uploader.uploadAll();\n        } else {\n            this.error({\n                message: this.localizationService.decode(\"io.missing.file\"),\n                error: {}\n            });\n        }\n    }\n\n    onNext(): void {\n        this.showImportConfig = true;\n    }\n\n    onBack(): void {\n        this.showImportConfig = false;\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n            <div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\n                <div class=\"heading\">\n                    <h2>\n                        <localize key=\"business.data.import\"></localize>\n                    </h2>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n                    <div *ngIf=\"!showImportConfig\">\n                        <div>\n                            <div class=\"row\">\n\n                                <div class=\"col-xs-1\"></div>\n                                <div class=\"col-xs-9 radio-btn-wrapper\">\n\n                                    <label class=\"radio\">\n                                        <input type=\"checkbox\" [value]=\"true\" [checked]=\"true\"\n                                            (change)=\"setImportSource($event, 'FILE')\" name=\"import-source\">\n                                        <span [ngClass]=\"{'active' : true}\">\n                                            <localize key=\"importer.import.from-file.label\"></localize>\n                                        </span>\n                                        <p class=\"radio-label-description\">\n                                            <localize key=\"importer.import.from-file.description\"></localize>\n                                        </p>\n                                    </label>\n\n                                    <div class=\"button-holder\">\n                                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onNext()\">\n                                            <localize key=\"io.next\"></localize>\n                                        </button>\n                                    </div>\n                                </div>\n                                <div class=\"col-xs-2\"></div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"showImportConfig\">\n                        <div>\n                            <form #form=\"ngForm\" autocomplete=\"off\">\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"businessTypeCode\"> <localize key=\"business.data.type\"></localize></label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"businessTypeCode\" name=\"businessTypeCode\" class=\"select-area\"\n                                            [(ngModel)]=\"businessTypeCode\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let businessType of businessTypes\"\n                                                value={{businessType.code}}>{{businessType.displayLabel.localizedValue}}\n                                            </option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\" *ngIf=\"filteredHierarchyViews\">\n                                    <label class=\"col-md-2 text-right\" for=\"hierarchyCode\">\n                                        <localize key=\"io.modal.hierarchy\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"hierarchyCode\" name=\"hierarchyCode\" class=\"select-area\"\n                                            [(ngModel)]=\"hierarchyCode\" (change)=\"onSelectHierarchy()\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let view of filteredHierarchyViews\" value={{view.code}}>\n                                                {{view.label}}</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\" *ngIf=\"filteredTypeViews\">\n                                    <label class=\"col-md-2 text-right\" for=\"code\">\n                                        <localize key=\"io.geoObjectType\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"typeCode\"\n                                            (change)=\"onSelectType()\" required>\n                                            <option></option>\n                                            <option *ngFor=\"let type of filteredTypeViews\" value={{type.code}}>\n                                                {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n                                            </option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"strategy\">\n                                        <localize *ngIf=\"this.format === 'EXCEL'\"\n                                            key=\"spreadsheet.import.import.strategy\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <select id=\"strategy\" name=\"strategy\" class=\"select-area\"\n                                            [(ngModel)]=\"importStrategy\" required>\n                                            <option *ngFor=\"let strategy of importStrategies\"\n                                                value={{strategy.strategy}}>{{strategy.label}}</option>\n                                        </select>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"date\">Date</label>\n                                    <div class=\"col-md-8\">\n                                        <date-field #dateFieldComponents [(value)]=\"date\" label=\"\" [inputName]=\"'date'\"\n                                            [allowFutureDates]=\"false\"></date-field>\n                                    </div>\n\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n\n                                    <label class=\"col-md-2 text-right\" for=\"copyBlank\">\n                                        <localize key=\"dataimporter.importblankcells\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <boolean-field [(value)]=\"copyBlank\" label=\"\"></boolean-field>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                                <div class=\"form-group row\">\n                                    <label class=\"col-md-2 text-right\" for=\"file\">\n                                        <localize *ngIf=\"this.format === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n                                    </label>\n                                    <div class=\"col-md-8\">\n                                        <input *ngIf=\"this.format === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\"\n                                            type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xls, .xlsx\"\n                                            required />\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n\n                                <div class=\"form-group row\">\n                                    <div class=\"col-md-2\"></div>\n                                    <div class=\"button-holder col-md-8 text-right\">\n                                        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\"\n                                            (click)=\"onClick()\">\n                                            <localize key=\"io.submit\"></localize>\n                                        </button>\n                                    </div>\n                                    <div class=\"col-md-2\"></div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n    </div>","import { Component, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse, HttpParams } from \"@angular/common/http\";\nimport { trigger, style, animate, transition } from \"@angular/animations\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { PageResult } from \"@shared/model/core\";\nimport { TransitionEventService } from \"@registry/service/transition-event.service\";\nimport { HistoricalRow } from \"@registry/model/transition-event\";\nimport { AuthService, DateService } from \"@shared/service\";\nimport { IOService } from \"@registry/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"historical-report\",\n    templateUrl: \"./historical-report.component.html\",\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"300ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"100ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ]),\n            trigger(\"fadeIn\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ])\n            ])\n        ]\n    ]\n})\nexport class HistoricalReportComponent {\n\n    message: string = null;\n\n    page: PageResult<HistoricalRow> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    data = {\n        type: \"\",\n        startDate: \"\",\n        endDate: \"\"\n    }\n\n    types: { label: string, code: string }[] = [];\n\n    isValid: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: TransitionEventService, private iService: IOService, private authService: AuthService,\n        public dateService: DateService) { }\n\n    ngOnInit(): void {\n        this.iService.listGeoObjectTypes(true).then(types => {\n            this.types = types;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    refresh(pageNumber: number = 1): void {\n        this.service.getHistoricalReport(this.data.type, this.data.startDate, this.data.endDate, this.page.pageSize, pageNumber).then(page => {\n            this.page = page;\n        }).catch((response: HttpErrorResponse) => {\n            this.error(response);\n        });\n    }\n\n    exportToExcel(): void {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"typeCode\", this.data.type.toString());\n        params = params.set(\"startDate\", this.data.startDate.toString());\n        params = params.set(\"endDate\", this.data.endDate.toString());\n\n        window.location.href = registry.contextPath + \"/transition-event/export-excel?\" + params.toString();\n    }\n\n    checkDates(): any {\n        setTimeout(() => {\n            this.isValid = (this.data.startDate != null && this.data.endDate != null && !this.dateService.after(this.data.startDate, this.data.endDate));\n        }, 0);\n    }\n\n    public error(err: any): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div>\n\n  <form #form=\"ngForm\" autocomplete=\"off\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"code\">\n        <localize key=\"io.geoObjectType\"></localize>\n      </label>\n      <div class=\"col-md-8\">\n        <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"data.type\" required>\n          <option></option>\n          <option *ngFor=\"let type of types\" [value]=\"type.code\">\n            {{type.super ? type.super.label + \" : \" + type.label : type.label}}\n          </option>\n        </select>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n    <div class=\"form-group row\">\n      <label class=\"col-md-2 text-right\" for=\"startDate\">\n        <localize key=\"io.startDate\"></localize>\n      </label>\n      <div class=\"col-md-2\">\n        <date-field #dateFieldComponents [(value)]=\"data.startDate\" label=\"\" [inputName]=\"'startDate'\"\n          [allowFutureDates]=\"false\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n        <span class=\"col-md-8 error-message\" style=\"text-align:center;\" *ngIf=\"dateService.after(data.startDate, data.endDate)\">\n\t        <localize key=\"manage.versions.startdate.later.enddate.message\"></localize>\n\t      </span>\n      </div>\n\n      <label class=\"col-md-2 text-right\" for=\"endDate\">\n        <localize key=\"io.endDate\"></localize>\n      </label>\n      <div class=\"col-md-4\">\n        <date-field #dateFieldComponents [(value)]=\"data.endDate\" label=\"\" [inputName]=\"'endDate'\"\n          [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" (change)=\"checkDates()\"></date-field>\n      </div>\n    </div>\n    <div class=\"form-group row\">\n      <div class=\"col-md-2\"></div>\n      <div class=\"button-holder col-md-8 text-right\">\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"refresh()\">\n          <localize key=\"io.submit\"></localize>\n        </button>\n        <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isValid || form.invalid\" (click)=\"exportToExcel()\">\n          <localize key=\"io.export\"></localize>\n        </button>\n      </div>\n      <div class=\"col-md-2\"></div>\n    </div>\n  </form>\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <table class=\"table\">\n        <thead>\n          <tr style=\"height: 50px;color: grey;\">\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventId\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventDate\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.eventType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.description\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.beforeLabel\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterType\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterCode\"></localize>\n            </th>\n            <th style=\"vertical-align: middle;\">\n              <localize key=\"historical.row.afterLabel\"></localize>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          <ng-template ngFor let-row\n            [ngForOf]=\"page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\n            <tr style=\"height: 50px;\">\n              <td>\n                {{row.eventId}}\n              </td>\n              <td>\n                <date-text [date]=\"row.eventDate\"></date-text>\n              </td>\n              <td>\n                {{row.eventType}}\n              </td>\n              <td>\n                {{row.description.localizedValue}}\n              </td>\n              <td>\n                {{row.beforeType}}\n              </td>\n              <td>\n                {{row.beforeCode}}\n              </td>\n              <td>\n                {{row.beforeLabel.localizedValue}}\n              </td>\n              <td>\n                {{row.afterType}}\n              </td>\n              <td>\n                {{row.afterCode}}\n              </td>\n              <td>\n                {{row.afterLabel.localizedValue}}\n              </td>\n            </tr>\n\n          </ng-template>\n        </tbody>\n      </table>\n      <div class=\"solid-table-footer\">\n        <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n          <pagination-controls (pageChange)=\"refresh($event)\"></pagination-controls>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>","import { Component } from \"@angular/core\";\nimport { AuthService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"historical-event-module\",\n    templateUrl: \"./historical-event-module.component.html\",\n    styleUrls: []\n})\nexport class HistoricalEventModuleComponent {\n\n    tab: string = \"HISTORICAL-EVENT\";\n\n    readOnly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.readOnly = this.authService.isRC(true);\n        this.tab = this.readOnly ? \"HISTORICAL-REPORT\" : \"HISTORICAL-EVENT\";\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\" style=\"height: 100%;\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div>\n          <div class=\"heading\">\n            <h2>\n              <localize *ngIf=\"tab === 'HISTORICAL-EVENT'\" key=\"transition.event.events\"></localize>\n              <localize *ngIf=\"tab === 'HISTORICAL-REPORT'\" key=\"historical.row.report\"></localize>\n            </h2>\n          </div>\n\n          <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n            <div *ngIf=\"!readOnly\" class=\"row\">\n              <div class=\"col-md-12\">\n                <div class=\"form-group button-row\">\n\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-EVENT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-EVENT' ? 'cr-filter-link-active' : ''\"\n                    style=\"border-bottom: 1px solid;\">\n                    <localize key=\"transition.event.events\"></localize> \n                  </a>\n                  <a [routerLink]=\"\" (click)=\"handleTab('HISTORICAL-REPORT')\"\n                    [ngClass]=\"tab === 'HISTORICAL-REPORT' ? 'cr-filter-link-active' : ''\"\n                    style=\"margin-left: 5px;border-bottom:1px solid;\">\n                    <localize key=\"historical.row.report\"></localize>\n                  </a>\n\n                </div>\n                <hr style=\"border-top:solid 3px #6BA542\" />\n\n              </div>\n            </div>\n            <div class=\"row\">\n              <div class=\"col-md-12\">\n                <transition-event-table *ngIf=\"tab === 'HISTORICAL-EVENT'\"></transition-event-table>\n                <historical-report *ngIf=\"tab === 'HISTORICAL-REPORT'\"></historical-report>\n              </div>\n            </div>\n\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</div>","import { Component, OnDestroy, OnInit, ViewChildren, QueryList } from \"@angular/core\";\nimport { ActivatedRoute, Params } from \"@angular/router\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { Organization } from \"@shared/model/core\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { Subscription } from \"rxjs\";\nimport Utils from \"@registry/utility/Utils\";\n\n@Component({\n    selector: \"list-type-manager\",\n    templateUrl: \"./list-type-manager.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeManagerComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n    typesByOrg: { org: Organization, types: GeoObjectType[] }[] = [];\n\n    listByType: ListTypeByType = null;\n    current: ListType = null;\n\n    subscription: Subscription = null;\n\n    noQueryParams = false;\n\n    @ViewChildren(\"typesByOrgIter\") typesByOrgIterEls: QueryList<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private registryService: RegistryService,\n        private route: ActivatedRoute,\n        private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.subscription = this.route.queryParams.subscribe((params: Params) => {\n            const typeCode = params.typeCode;\n            const listId = params.listId;\n\n            if (listId != null && listId.length > 0) {\n                this.service.entries(listId).then(current => {\n                    this.current = current;\n                    this.listByType = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else if (typeCode != null && typeCode.length > 0) {\n                this.service.listForType(typeCode).then(listByType => {\n                    this.listByType = listByType;\n                    this.current = null;\n                }).catch((err: HttpErrorResponse) => {\n                    this.error(err);\n                });\n            } else {\n                this.noQueryParams = true;\n            }\n\n            // this.refresh();\n        });\n\n        if (this.typesByOrg.length === 0) {\n            this.registryService.init().then(response => {\n                this.typesByOrg = [];\n\n                //\n                // Order alphabetically\n                // TODO: sort these on the server\n                //\n                response.organizations.sort((a, b) => {\n                    if (a.label.localizedValue < b.label.localizedValue) {\n                        return -1;\n                    }\n                    if (a.label.localizedValue > b.label.localizedValue) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                //\n                // End sort\n\n                // put org of the user on top\n                if (!this.authService.isSRA()) {\n                    let pos = null;\n                    let myorg = this.authService.getMyOrganizations();\n                    pos = response.organizations.findIndex(org => {\n                        return org.code === myorg[0];\n                    });\n\n                    if (pos >= 0) {\n                        Utils.arrayMove(response.organizations, pos, 0);\n                    }\n                }\n\n                response.organizations.forEach((org, index) => {\n                    //\n                    // Post processing to better handle groups in the frontend\n                    //\n                    let orgTypes = response.types.filter(t => t.organizationCode === org.code);\n                    let orgTypesNoGroupMembers = orgTypes.filter(t => !t.superTypeCode);\n\n                    orgTypesNoGroupMembers.sort((a, b) => {\n                        if (a.label.localizedValue < b.label.localizedValue) {\n                            return -1;\n                        }\n                        if (a.label.localizedValue > b.label.localizedValue) {\n                            return 1;\n                        }\n                        return 0;\n                    });\n\n                    let groupTypes = [];\n                    let groups = orgTypesNoGroupMembers.filter(gType => gType.isAbstract);\n                    groups.forEach(group => {\n                        let groupType = { group: group, members: [] };\n                        orgTypes.forEach(t => {\n                            if (t.superTypeCode === group.code) {\n                                groupType.members.push(t);\n                            }\n                        });\n                        groupTypes.push(groupType);\n                    });\n\n                    groupTypes.forEach(grpT => {\n                        let index = orgTypesNoGroupMembers.findIndex(grp => grpT.group.code === grp.code);\n                        if (index !== -1) {\n                            orgTypesNoGroupMembers.splice(index + 1, 0, ...grpT.members);\n                        }\n                    });\n                    //\n                    // End post processing\n                    //\n\n                    this.typesByOrg.push({ org: org, types: orgTypesNoGroupMembers });\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        this.typesByOrgIterEls.changes.subscribe(t => {\n            // Select the first type on load if no URL type params\n            if (this.noQueryParams && t.length > 0) {\n                let els = document.getElementsByClassName(\"got-li-item\");\n                if (els && els.length > 0) {\n                    let el = els[0].firstChild as HTMLElement;\n                    el.click();\n                }\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\" style=\"overflow-y:hidden;\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n\n            <nav class=\"col-md-3 list-sidebar\">\n                <div class=\"sidebar-section-content\">\n                    <ul *ngFor=\"let typeByOrg of typesByOrg;\" class=\"list-group\">\n                        <div>\n\n                            <div class=\"got-org-label-wrapper\">\n                                <h3>{{typeByOrg.org.label.localizedValue}}</h3>\n                            </div>\n\n                            <li class=\"list-group-item got-li-item\" [ngClass]=\"{'got-group-child' : type.superTypeCode}\" *ngFor=\"let type of typeByOrg.types\"\n                                [id]=\"type.code\" #typesByOrgIter>\n                                <a [routerLink]=\"'/registry/master-lists'\"\n                                    [queryParams]=\"{typeCode:type.code}\" routerLinkActive=\"active\">\n                                    {{type.label.localizedValue}}\n                                </a>\n                            </li>\n                        </div>\n                    </ul>\n                </div>\n            </nav>\n            <div class=\"col-md-9 list-type-content\">\n                <div id=\"overflow-div\">\n                    <lists-for-type *ngIf=\"listByType != null\" [listByType]=\"listByType\" (error)=\"error($event)\">\n                    </lists-for-type>\n\n                    <list-type *ngIf=\"current != null\" [list]=\"current\" (error)=\"error($event)\"></list-type>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","import { Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeByType } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ListTypePublishModalComponent } from \"./publish-modal.component\";\nimport { Subject } from \"rxjs\";\n\n@Component({\n    selector: \"lists-for-type\",\n    templateUrl: \"./lists-for-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListsForTypeComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() listByType: ListTypeByType = null;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n\n    groups = {\n        single: [],\n        interval: [],\n        incremental: []\n    };\n\n    /*\n     * Observable subject for ListType changes.  Called when an update is successful\n     */\n    onListTypeChange: Subject<ListType>;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.onListTypeChange = new Subject();\n        this.onListTypeChange.subscribe(() => {\n            // Refresh\n            this.service.listForType(this.listByType.typeCode).then(listByType => {\n                this.listByType = listByType;\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.onListTypeChange.unsubscribe();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.listByType != null) {\n            this.groups = {\n                single: [],\n                interval: [],\n                incremental: []\n            };\n\n            changes.listByType.currentValue.lists.forEach(list => {\n                if (list.listType === \"single\") {\n                    this.groups.single.push(list);\n                } else if (list.listType === \"interval\") {\n                    this.groups.interval.push(list);\n                } else if (list.listType === \"incremental\") {\n                    this.groups.incremental.push(list);\n                }\n            });\n        }\n    }\n\n    onCreate(): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange);\n    }\n\n    onEdit(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.listByType, this.onListTypeChange, list);\n    }\n\n    onDelete(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" [\" + list.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.remove(list).then(response => {\n                this.listByType.lists = this.listByType.lists.filter((value, index, arr) => {\n                    return value.oid !== list.oid;\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n}\n","<ng-template #groupDetail let-lists='lists' let-listByType=\"listByType\">\n    <div *ngFor=\"let list of lists; let i = index;\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-7\" style=\"vertical-align:middle;line-height:40px;\">\n                            <i *ngIf=\"list.listType === 'single'\" class=\"fa fa-table\" aria-hidden=\"true\"></i>\n                            <span *ngIf=\"list.listType !== 'single'\" class=\"fa-stack fa-lg\">\n                                <i class=\"fa fa-table fa-stack-2x\"></i>\n                                <i class=\"fa fa-table fa-stack-1x second-stacked-el\"\n                                    style=\"margin-left:8px;margin-top:-4px;\"></i>\n                            </span>\n\n                            <a [routerLink]=\"'/registry/master-lists'\"\n                                [queryParams]=\"{typeCode:listByType.typeCode, listId: list.oid}\"\n                                routerLinkActive=\"active\" style=\"font-size:18px;\">\n                                {{list.displayLabel.localizedValue}}\n                            </a>\n                        </div>\n                        <div class=\"col-md-5\" style=\"text-align: right;\">\n                            <button type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                <localize key=\"masterlist.button.configuration\"></localize>\n                            </button>\n                            <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onDelete(list)\" class=\"btn btn-danger\"\n                                role=\"button\">\n                                <localize key=\"modal.button.delete\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'single'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"list.type.valid.on\"></localize>:\n                                    <date-text [date]=\"list.validOn\"></date-text>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'incremental'\">\n                        <div class=\"col-md-12\">\n                            <ul class=\"unstyled-list\">\n                                <li>\n                                    <localize key=\"data.property.label.publishingStartDate\"></localize>:\n                                    <date-text [date]=\"list.publishingStartDate\"></date-text>\n                                </li>\n                                <li>\n                                    <localize key=\"data.property.label.frequency\"></localize>: {{list.frequency}}\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\" *ngIf=\"list.listType === 'interval'\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.valid.on\"></localize>:\n                            <ul class=\"unstyled-list\">\n                                <li *ngFor=\"let interval of list.intervalJson\">\n                                    <date-text [date]=\"interval.startDate\"></date-text>\n                                    -\n                                    <date-text [date]=\"interval.endDate\"></date-text>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <p style=\"color: #707070;\">{{list.description.localizedValue}}</p>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n\n    </div>\n\n</ng-template>\n\n\n<ng-container>\n    <div class=\"heading\">\n        <h2>\n            {{listByType.orgLabel}} : {{listByType.typeLabel}}\n        </h2>\n    </div>\n    <div class=\"subheading\">\n        <h3>\n            <localize key=\"list.type.heading\"></localize>\n        </h3>\n    </div>\n    <hr />\n    <div *ngIf=\"listByType.write\" style=\"margin-top:30px;margin-bottom:30px;\" class=\"row\">\n        <div class=\"col-md-6\">\n            <div>\n                <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"list.type.button.create\"></localize>\n                </button>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"groups.single.length > 0\">\n        <h3>\n            <localize key=\"list.type.single.date\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.single, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"groups.incremental.length > 0\">\n        <h3>\n            <localize key=\"list.type.incremental.series\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.incremental, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"groups.interval.length > 0\">\n        <h3>\n            <localize key=\"list.type.interval.series\"></localize>\n        </h3>\n        <ng-container [ngTemplateOutlet]=\"groupDetail\"\n            [ngTemplateOutletContext]=\"{lists:groups.interval, listByType:listByType}\">\n        </ng-container>\n    </div>\n\n    <div *ngIf=\"listByType.lists.length === 0\" style=\"font-style:italic;\">\n        <localize key=\"list.type.no.lists.message\"></localize>\n    </div>\n\n</ng-container>","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent } from \"@shared/component\";\nimport { AuthService, LocalizationService } from \"@shared/service\";\nimport { ListType, ListTypeEntry, ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypePublishModalComponent } from \"./publish-modal.component\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { PublishVersionComponent } from \"./publish-version.component\";\nimport { Router } from \"@angular/router\";\nimport { LngLatBounds } from \"mapbox-gl\";\n\n@Component({\n    selector: \"list-type\",\n    templateUrl: \"./list-type.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class ListTypeComponent implements OnInit, OnDestroy {\n\n    @Input() list: ListType;\n    @Output() error = new EventEmitter<HttpErrorResponse>();\n    isRC: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private router: Router,\n        private service: ListTypeService,\n        private modalService: BsModalService,\n        private localizeService: LocalizationService,\n        private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.isRC = this.authService.isGeoObjectTypeOrSuperRC({\n            organizationCode: this.list.organization,\n            code: this.list.typeCode,\n            superTypeCode: this.list.superTypeCode\n        });\n\n        // Expand the most recent version by default\n        this.list.entries.filter(entry => {\n            return (entry.versions != null && entry.versions.length > 0);\n        }).forEach(entry => {\n            entry.versions[0].collapsed = true;\n        });\n    }\n\n    ngOnDestroy() {\n    }\n\n    toggleVersions(entry: ListTypeEntry) {\n        entry.showAll = !entry.showAll;\n    }\n\n    onCreate(entry: ListTypeEntry): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry);\n    }\n\n    onCreateEntries(): void {\n        // Expand the most recent version by default\n        this.service.createEntries(this.list.oid).then(list => {\n            list.entries.forEach(entry => {\n                if (this.list.entries.findIndex(e => e.oid === entry.oid) === -1) {\n                    this.list.entries.push(entry);\n                }\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error.emit(err);\n        });\n    }\n\n    onEdit(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(PublishVersionComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(this.list, entry, version);\n    }\n\n    onViewConfiguration(list: ListType): void {\n        this.bsModalRef = this.modalService.show(ListTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.init(list, null, list);\n    }\n\n    onDelete(entry: ListTypeEntry, version: ListTypeVersion): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \" Version [\" + version.versionNumber + \"]\";\n        this.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(data => {\n            this.service.removeVersion(version).then(response => {\n                const index = entry.versions.findIndex(v => v.oid === version.oid);\n\n                if (index !== -1) {\n                    entry.versions.splice(index, 1);\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error.emit(err);\n            });\n        });\n    }\n\n    onGotoMap(version: ListTypeVersion): void {\n        this.service.getBounds(version.oid).then(bounds => {\n            const queryParams: any = {\n                layers: JSON.stringify([version.oid])\n            };\n\n            if (bounds && Array.isArray(bounds)) {\n                let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n                const array = llb.toArray();\n\n                queryParams.bounds = JSON.stringify(array);\n            }\n\n            this.router.navigate([\"/registry/location-manager\"], {\n                queryParams: queryParams\n            });\n        }).catch((err: HttpErrorResponse) => {\n            this.error.emit(err);\n        });\n    }\n\n}\n","<ng-template #versionDetail let-version='version' let-entry=\"entry\">\n    <div class=\"row\" style=\"margin-bottom:5px;line-height:40px;\">\n        <div class=\"col-md-7\" style=\"vertical-align: middle;\">\n\n            <span class=\"clickable\" (click)=\"version.collapsed = !version.collapsed\"\n                [attr.aria-expanded]=\"!version.collapsed\">\n\n                <i class=\"fa fa-chevron-right\"\n                    [ngClass]=\"{'fa-chevron-down' : version.collapsed, 'fa-chevron-right' : !version.collapsed}\"\n                    style=\"font-size:14px;\"></i>\n\n                <span class=\"h4\" *ngIf=\"!version.working\">\n                    <localize key=\"list.type.version\"></localize> {{version.versionNumber}}\n                </span>\n                <span class=\"h4\" *ngIf=\"version.working\">\n                    <localize key=\"list.type.working.version\"></localize>\n                </span>\n                <span style=\"margin-left:10px;color:grey;\">\n                    <localize key=\"list.type.date.generated\"></localize>: {{version.createDate}}\n                </span>\n            </span>\n        </div>\n        <div class=\"col-md-5\" style=\"text-align: right;\">\n            <button type=\"submit\" (click)=\"onEdit(entry, version)\" class=\"btn btn-default\" role=\"button\">\n                <localize *ngIf=\"version.working\" key=\"masterlist.button.metadata\"></localize>\n                <localize *ngIf=\"!version.working\" key=\"masterlist.snapshot.button.metadata\"></localize>\n            </button>\n            <button *ngIf=\"list.write && !version.working\" type=\"submit\" (click)=\"onDelete(entry, version)\"\n                class=\"btn btn-danger\" role=\"button\">\n                <localize key=\"modal.button.delete\"></localize>\n            </button>\n        </div>\n\n    </div>\n\n    <div class=\"row\" style=\"margin-bottom:5px;\" [collapse]=\"!version.collapsed\">\n        <ul style=\"list-style:none;\">\n            <li>\n                <a *ngIf=\"(version.isMember || version.listMetadata.visibility === 'PUBLIC')\"\n                    [routerLink]=\"'/registry/master-list/' + version.oid\" routerLinkActive=\"active\">\n                    <localize key=\"list.type.list\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.listMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.list\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.listMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.listMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.listMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n            </li>\n            <li>\n                <a *ngIf=\"(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\"\n                    (click)=\"onGotoMap(version)\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </a>\n                <span *ngIf=\"!(version.isMember || version.geospatialMetadata.visibility === 'PUBLIC')\">\n                    <localize key=\"list.type.geospatial\"></localize>\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\">\n                    </localize>\n                    <localize *ngIf=\"version.geospatialMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\">\n                    </localize>\n                    )\n                </span>\n                <span>\n                    (\n                    <localize *ngIf=\"version.geospatialMetadata.master\" key=\"list.type.master\"></localize>\n                    <localize *ngIf=\"!version.geospatialMetadata.master\" key=\"list.type.non.master\"></localize>\n                    )\n                </span>\n\n            </li>\n        </ul>\n    </div>\n</ng-template>\n\n\n<ng-container>\n\n    <div class=\"heading\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h2>\n                    {{list.displayLabel.localizedValue}}\n                </h2>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-12\" style=\"padding: 20px 15px;\">\n            <button type=\"submit\" (click)=\"onViewConfiguration(list)\" class=\"btn btn-default\" style=\"padding-right: 10px;\"\n                role=\"button\">\n                <localize key=\"masterlist.button.configuration\"></localize>\n            </button>\n\n            <button *ngIf=\"list.listType === 'incremental'\" type=\"submit\" (click)=\"onCreateEntries()\" class=\"btn btn-primary\" style=\"margin:0;\" role=\"button\">\n                <localize key=\"list.type.create.entries\"></localize>\n            </button>\n        </div>\n    </div>\n\n\n    <div *ngFor=\"let entry of list.entries\" class=\"row\" style=\"margin-bottom: 5px;\">\n        <div class=\"col-md-12\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <h3>\n                                <ng-container *ngIf=\"entry.period.type === 'text'\">\n                                    {{entry.period.value}}\n                                </ng-container>\n                                <ng-container *ngIf=\"entry.period.type === 'date'\">\n                                    <date-text [date]=\"entry.period.value\"></date-text>\n                                </ng-container>\n                                <ng-container *ngIf=\"entry.period.type === 'range'\">\n                                    <date-text [date]=\"entry.period.value.startDate\"></date-text>\n                                    -\n                                    <date-text [date]=\"entry.period.value.endDate\"></date-text>\n                                </ng-container>\n\n                            </h3>\n                        </div>\n                    </div>\n\n\n                    <ng-container *ngIf=\"entry.versions.length > 0 && entry.versions[entry.versions.length - 1].working\"\n                        [ngTemplateOutlet]=\"versionDetail\"\n                        [ngTemplateOutletContext]=\"{entry:entry, version:entry.versions[entry.versions.length - 1]}\">\n                    </ng-container>\n\n                    <hr style=\"border-color:lightgrey;\">\n\n                    <h4 style=\"margin-top:20px;\">\n                        <localize key=\"list.type.published.versions.header\"></localize>\n                    </h4>\n\n\n                    <div>\n                        <button *ngIf=\"list.write\" type=\"submit\" (click)=\"onCreate(entry)\" class=\"btn btn-primary\"\n                            style=\"margin:0;\" role=\"button\">\n                            <localize key=\"list.type.new.version\"></localize>\n                        </button>\n\n                        <button *ngIf=\"entry.versions.length > 2\" type=\"submit\" (click)=\"toggleVersions(entry)\"\n                            class=\"btn btn-default\" role=\"button\">\n                            <localize *ngIf=\"!entry.showAll\" key=\"list.type.see.versions\"></localize>\n                            <localize *ngIf=\"entry.showAll\" key=\"list.type.hide.versions\"></localize>\n                        </button>\n                    </div>\n\n                    <ng-container *ngIf=\"entry.versions.length > 1\">\n                        <ng-container *ngFor=\"let version of entry.versions; let j = index;\">\n                            <ng-container *ngIf=\"j === 0 || (entry.showAll && j !== (entry.versions.length -1))\"\n                                [ngTemplateOutlet]=\"versionDetail\"\n                                [ngTemplateOutletContext]=\"{entry:entry, version:version}\">\n                            </ng-container>\n                        </ng-container>\n                        <!--                         <div class=\"row\" style=\"margin-bottom: 5px;\"> -->\n                        <!--                             <div class=\"col-md-12\" style=\"text-align: left;\"> -->\n                        <!--                                 <button *ngIf=\"entry.versions.length > 2\" type=\"submit\" (click)=\"toggleVersions(entry)\" -->\n                        <!--                                     class=\"btn btn-default\" role=\"button\"> -->\n                        <!--                                     <localize *ngIf=\"!entry.showAll\" key=\"list.type.see.versions\"></localize> -->\n                        <!--                                     <localize *ngIf=\"entry.showAll\" key=\"list.type.hide.versions\"></localize> -->\n                        <!--                                 </button> -->\n                        <!--                             </div> -->\n                        <!--                         </div> -->\n                    </ng-container>\n\n                    <div class=\"row\" *ngIf=\"entry.versions.length === 1\">\n                        <div class=\"col-md-12\">\n                            <localize key=\"list.type.no.versions\" style=\"color:grey;font-style:italic;\"></localize>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</ng-container>","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { ListType, ListTypeEntry, ListTypeVersion, ListVersionMetadata } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"publish-version\",\n    templateUrl: \"./publish-version.component.html\",\n    styleUrls: [\"./list-type-manager.css\"]\n})\nexport class PublishVersionComponent implements OnInit {\n\n    message: string = null;\n\n    list: ListType = null;\n    entry: ListTypeEntry = null;\n\n    metadata: ListVersionMetadata = null;\n\n    tab: string = \"LIST\";\n\n    readonly: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ListTypeService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    init(list: ListType, entry: ListTypeEntry, version?: ListTypeVersion): void {\n        this.list = list;\n        this.entry = entry;\n        this.readonly = !list.write;\n\n        if (version == null) {\n            const working: ListTypeVersion = entry.versions[entry.versions.length - 1];\n\n            this.metadata = {\n                listMetadata: {\n                    visibility: \"PRIVATE\",\n                    master: false,\n                    ...JSON.parse(JSON.stringify(working.listMetadata))\n                },\n                geospatialMetadata: {\n                    visibility: \"PRIVATE\",\n                    master: false,\n                    ...JSON.parse(JSON.stringify(working.geospatialMetadata))\n                }\n            };\n        } else {\n            this.metadata = version;\n        }\n    }\n\n    onSubmit(): void {\n        if (this.metadata.oid != null) {\n            this.service.applyVersion(this.metadata).then(version => {\n                if (this.entry.versions != null) {\n                    const index = this.entry.versions.findIndex(v => v.oid === version.oid);\n\n                    version.collapsed = this.entry.versions[index].collapsed;\n\n                    this.entry.versions[index] = version;\n                }\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.service.createVersion(this.entry, this.metadata).then(version => {\n                this.entry.versions.unshift(version);\n                this.bsModalRef.hide();\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    handleTab(tab: string): void {\n        this.tab = tab;\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<ng-template #metadataDetail let-metadata='metadata' let-list=\"list\" let-type=\"type\">\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.ismaster\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <boolean-field [disable]=\"readonly\" [(value)]=\"metadata.master\" label=\"\"></boolean-field>\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.visibility\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"metadata.visibility\" [disabled]=\"readonly\"\n                required>\n                <option value=\"PRIVATE\">\n                    <localize key=\"masterlist.private\"></localize>\n                </option>\n                <option *ngIf=\"!list.typePrivate\" value=\"PUBLIC\">\n                    <localize key=\"masterlist.public\"></localize>\n                </option>\n            </select>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.label.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.label\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'metadata-displayLabel-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"list.type.originator\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.originator\" name=\"originator\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.description.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.listAbstract\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'description-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.process.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.process\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'process-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.progress.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.progress\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'progress-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.accessConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.accessConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'accessConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.useConstraints.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.useConstraints\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'useConstraints-' + localeValue.locale\" type=\"text\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\" />\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.acknowledgements.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.acknowledgements\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'acknowledgements-' + localeValue.locale\"\n                class=\"form-control\" [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <div class=\"row-holder\" *ngFor=\"let localeValue of metadata.disclaimer.localeValues\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.disclaimer\"></localize>\n                <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                    </convert-key-label>)</span>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <textarea [(ngModel)]=\"localeValue.value\" name=\"'disclaimer-' + localeValue.locale\" class=\"form-control\"\n                [disabled]=\"readonly\" [required]=\"false\"></textarea>\n        </div>\n    </div>\n    <ng-container *ngIf=\"type === 'geospatial'\">\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.topicCategories\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.topicCategories\" name=\"topicCategories\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.placeKeywords\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.placeKeywords\" name=\"placeKeywords\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.updateFrequency\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.updateFrequency\" name=\"updateFrequency\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.lineage\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.lineage\" name=\"lineage\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.languages\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.languages\" name=\"languages\" class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.scaleResolution\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.scaleResolution\" name=\"scaleResolution\" class=\"form-control\"\n                    [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.spatialRepresentation\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"spatialRepresentation\" [(ngModel)]=\"metadata.spatialRepresentation\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"vector\">\n                        <localize key=\"list.type.vector\"></localize>\n                    </option>\n                </select>\n\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.referenceSystem\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"referenceSystem\" [(ngModel)]=\"metadata.referenceSystem\"\n                    [disabled]=\"true\">\n                    <!-- <option></option> -->\n                    <option value=\"EPSG4326\">\n                        <localize key=\"list.type.epsg4326\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.reportSpecification\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <input [(ngModel)]=\"metadata.reportSpecification\" name=\"reportSpecification\" type=\"reportSpecification\"\n                    class=\"form-control\" [disabled]=\"readonly\" />\n            </div>\n        </div>\n        <div class=\"row-holder\">\n            <div class=\"label-holder\">\n                <label>\n                    <localize key=\"list.type.distributionFormat\"></localize>\n                </label>\n            </div>\n            <div class=\"holder\">\n                <select class=\"select-area\" name=\"distributionFormat\" [(ngModel)]=\"metadata.distributionFormat\"\n                    [disabled]=\"true\">\n                    <option></option>\n                    <option value=\"SHAPEFILE\">\n                        <localize key=\"io.shapefile\"></localize>\n                    </option>\n                </select>\n            </div>\n        </div>\n\n    </ng-container>\n\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\"></div>\n        <div class=\"holder\">\n            <localize key=\"masterlist.contact\"></localize>\n        </div>\n    </div>\n\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.contactName\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.telephoneNumber\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\"\n                [disabled]=\"readonly\" />\n        </div>\n    </div>\n    <div class=\"row-holder\">\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"masterlist.email\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <input [(ngModel)]=\"metadata.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n        </div>\n    </div>\n\n</ng-template>\n\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"metadata != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n<!--         <div class=\"heading text-center\"> -->\n<!--             <h1> -->\n<!--                 <localize key=\"list.type.versionMetadata\"></localize> -->\n<!--             </h1> -->\n<!--         </div> -->\n\n\t\t<div class=\"text-center\">\n\t\t\t<h2>\n\t\t\t\t<localize key=\"type.publish.metadata.header\"></localize>\n\t\t\t</h2>\n\t\t\t<hr>\n\t    </div>\n\t\t\t\t\t        \n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <div class=\"label-holder\"></div>\n                        \n                            <div class=\"holder\">\n                              <div class=\"form-group\" style=\"text-align: center;\">\n\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('LIST')\" -->\n<!--                                     [ngClass]=\"tab === 'LIST' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"border-bottom: 1px solid;\"> -->\n<!--                                     <localize key=\"list.type.list\"></localize> -->\n<!--                                 </a> -->\n<!--                                 <a [routerLink]=\"\" (click)=\"handleTab('GEOSPATIAL')\" -->\n<!--                                     [ngClass]=\"tab === 'GEOSPATIAL' ? 'cr-filter-link-active' : ''\" -->\n<!--                                     style=\"margin-left: 5px;border-bottom:1px solid;\"> -->\n<!--                                     <localize key=\"list.type.geospatial\"></localize> -->\n<!--                                 </a> -->\n                                \n                                <div class=\"btn-group geobject-editor-tab-holder\">\n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'LIST' ? 'active' : ''\" (click)=\"handleTab('LIST')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.list\"></localize></span>\n                                    </label> \n                                    <label class=\"btn full-width-radio-button\" style=\"width:50%;\" [ngClass]=\"tab === 'GEOSPATIAL' ? 'active' : ''\" (click)=\"handleTab('GEOSPATIAL')\"> \n                                      <span style=\"display:inline-block; width:90%;\"><localize key=\"list.type.geospatial\"></localize></span>\n                                    </label> \n                                  </div>\n                                  \n                                </div>\n                              </div>\n\n                            <hr style=\"border-top:solid 3px #6BA542\" />\n\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <ng-container *ngIf=\"tab === 'LIST'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.listMetadata, list:list, type:'list'}\">\n                            </ng-container>\n                            <ng-container *ngIf=\"tab === 'GEOSPATIAL'\" [ngTemplateOutlet]=\"metadataDetail\"\n                                [ngTemplateOutletContext]=\"{metadata:metadata.geospatialMetadata, list:list, type:'geospatial'}\">\n                            </ng-container>\n\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"!form.valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LazyLoadEvent, FilterMetadata } from \"primeng/api\";\n\nimport { Subject, Subscription } from \"rxjs\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { AuthService, ProgressService } from \"@shared/service\";\nimport { ListTypeVersion } from \"@registry/model/list-type\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { ExportFormatModalComponent } from \"./export-format-modal.component\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\nimport { GenericTableColumn, GenericTableConfig, TableEvent } from \"@shared/model/generic-table\";\nimport { LngLatBounds } from \"mapbox-gl\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"list\",\n    templateUrl: \"./list.component.html\",\n    styleUrls: [\"./list.component.css\"]\n})\nexport class ListComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    list: ListTypeVersion = null;\n    current: string = \"\";\n    isRefreshing: boolean = false;\n    isWritable: boolean = false;\n    isRM: boolean = false;\n\n    config: GenericTableConfig = null;\n    cols: GenericTableColumn[] = null;\n    refresh: Subject<void>;\n\n    filters: { [s: string]: FilterMetadata; } = null;\n\n    showInvalid = false;\n\n    historyOid: string = null;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    progressNotifier: WebSocketSubject<{ type: string, content: any }>;\n    progressSubscription: Subscription = null;\n\n    jobNotifier: WebSocketSubject<{ type: string, message: string }>;\n    jobSubscription: Subscription = null;\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private modalService: BsModalService,\n        private service: ListTypeService,\n        private pService: ProgressService,\n        private authService: AuthService) {\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.paramMap.get(\"oid\");\n\n        this.service.getVersion(oid).then(version => {\n            this.list = version;\n            const orgCode = this.list.orgCode;\n            const typeCode = this.list.superTypeCode != null ? this.list.superTypeCode : this.list.typeCode;\n\n            this.isWritable = this.authService.isGeoObjectTypeRC(orgCode, typeCode);\n            this.isRM = this.authService.isGeoObjectTypeRM(orgCode, typeCode);\n\n            this.refreshColumns();\n\n            this.config = {\n                service: this.service,\n                remove: false,\n                view: true,\n                create: false,\n                label: this.list.displayLabel,\n                sort: { field: \"code\", order: 1 }\n            };\n\n            if (version.refreshProgress != null) {\n                this.handleProgressChange(version.refreshProgress);\n            }\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.progressNotifier = webSocket(baseUrl + \"/websocket/progress/\" + oid);\n        this.progressSubscription = this.progressNotifier.subscribe(message => {\n            if (message.content != null) {\n                this.handleProgressChange(message.content);\n            } else {\n                this.handleProgressChange(message);\n            }\n        });\n\n        this.jobNotifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.jobSubscription = this.jobNotifier.subscribe(message => {\n            this.handleJobChange();\n        });\n\n        this.refresh = new Subject<void>();\n    }\n\n    ngOnDestroy() {\n        if (this.refresh != null) {\n            this.refresh.unsubscribe();\n        }\n\n        if (this.progressSubscription != null) {\n            this.progressSubscription.unsubscribe();\n        }\n\n        this.progressNotifier.complete();\n\n        if (this.jobSubscription != null) {\n            this.jobSubscription.unsubscribe();\n        }\n\n        this.jobNotifier.complete();\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    onClick(event: TableEvent): void {\n        if (event.type === \"view\") {\n            this.onGotoMap(event.row);\n        }\n        //  else if (event.type === \"remove\") {\n        //     this.onRemove(event.row as Sensor);\n        // } else if (event.type === \"create\") {\n        //     this.newInstance();\n        // }\n    }\n\n    refreshColumns(): void {\n        this.cols = [];\n\n        if (this.list.isMember || this.list.geospatialMetadata.visibility === \"PUBLIC\") {\n            this.cols.push({ header: \"\", type: \"ACTIONS\", sortable: false });\n        }\n\n        //\n        // Order list columns\n        // mdAttributes don't currently define the difference between hierarchy or custom attributes.\n        // This ordering is a best attempt given these constraints.\n        //\n        let orderedArray = [];\n        let code = this.list.attributes.filter(obj => {\n            return obj.name === \"code\";\n        });\n        let label = this.list.attributes.filter(obj => {\n            return obj.name.includes(\"displayLabel\");\n        });\n\n        orderedArray.push(code[0], ...label);\n\n        let customAttrs = [];\n        let otherAttrs = [];\n        this.list.attributes.forEach(attr => {\n            if (attr.type === \"input\" && attr.name !== \"latitude\" && attr.name !== \"longitude\") {\n                customAttrs.push(attr);\n            } else if (attr.name !== \"code\" && !attr.name.includes(\"displayLabel\") && attr.name !== \"latitude\" && attr.name !== \"longitude\") {\n                otherAttrs.push(attr);\n            }\n        });\n\n        orderedArray.push(...customAttrs, ...otherAttrs);\n\n        let coords = this.list.attributes.filter(obj => {\n            return obj.name === \"latitude\" || obj.name === \"longitude\";\n        });\n\n        if (coords.length === 2) {\n            orderedArray.push(...coords);\n        }\n\n        orderedArray.forEach(attribute => {\n            if (this.showInvalid || attribute.name !== \"invalid\") {\n                let column: GenericTableColumn = {\n                    header: attribute.label,\n                    field: attribute.name,\n                    type: \"TEXT\",\n                    sortable: true,\n                    filter: true\n                };\n\n                if (attribute.type === \"date\") {\n                    column.type = \"DATE\";\n                } else if (attribute.name === \"invalid\" || attribute.type === \"boolean\") {\n                    column.type = \"BOOLEAN\";\n                } else if (attribute.type === \"number\") {\n                    column.type = \"NUMBER\";\n                } else if (attribute.type === \"list\") {\n                    column.type = \"AUTOCOMPLETE\";\n                    column.text = \"\";\n                    column.onComplete = () => {\n                        this.service.values(this.list.oid, column.text, attribute.name, this.filters).then(options => {\n                            column.results = options;\n                        }).catch((err: HttpErrorResponse) => {\n                            this.error(err);\n                        });\n                    };\n                }\n\n                this.cols.push(column);\n            }\n        });\n    }\n\n    handleShowInvalidChange(): void {\n        this.refreshColumns();\n        this.refresh.next();\n    }\n\n    handleProgressChange(progress: any): void {\n        this.isRefreshing = (progress.current < progress.total);\n\n        this.pService.progress(progress);\n\n        if (!this.isRefreshing && this.refresh != null) {\n            // Refresh the resultSet\n            // this.onPageChange(1);\n            this.refresh.next();\n        }\n    }\n\n    handleJobChange(): void {\n        if (this.historyOid != null) {\n            this.service.getJob(this.historyOid).then(job => {\n                if (job != null) {\n                    if (job.status === \"SUCCESS\" || job.status === \"FAILURE\") {\n                        this.handleProgressChange({ current: 1, total: 1 });\n\n                        this.historyOid = null;\n                    }\n\n                    if (job.status === \"FAILURE\" && job.exception != null) {\n                        this.message = job.exception.message;\n                    }\n                }\n            });\n        }\n    }\n\n    onEdit(data): void {\n        let editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n        editModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n        editModal.content.setListId(this.list.oid);\n        editModal.content.setOnSuccessCallback(() => {\n            // Refresh the page\n            // this.onPageChange(this.page.pageNumber);\n            this.refresh.next();\n        });\n    }\n\n    onPublish(): void {\n        this.message = null;\n\n        this.service.publishList(this.list.oid).toPromise().then((result: { jobOid: string }) => {\n            this.isRefreshing = true;\n            this.list.curation = {};\n            this.historyOid = result.jobOid;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onNewGeoObject(type: string = null): void {\n        if (!type) {\n            type = this.list.typeCode;\n        }\n\n        const params: any = {\n            layers: JSON.stringify([this.list.oid]),\n            type: type,\n            code: \"__NEW__\"\n        };\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    onExport(): void {\n        const criteria = {\n            filters: this.filters != null ? { ...this.filters } : {}\n        };\n\n        if (!this.showInvalid) {\n            criteria.filters[\"invalid\"] = { value: false, matchMode: \"equals\" };\n        }\n\n        this.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.onFormat.subscribe(format => {\n            if (format === \"SHAPEFILE\") {\n                window.location.href = registry.contextPath + \"/list-type/export-shapefile?oid=\" + this.list.oid + \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n            } else if (format === \"EXCEL\") {\n                window.location.href = registry.contextPath + \"/list-type/export-spreadsheet?oid=\" + this.list.oid + \"&criteria=\" + encodeURIComponent(JSON.stringify(criteria));\n            }\n        });\n    }\n\n    onWheel(event: WheelEvent): void {\n        let tableEl = (<Element>event.target).parentElement.closest(\"table\").parentElement;\n\n        tableEl.scrollLeft += event.deltaY;\n        event.preventDefault();\n    }\n\n    onGotoMap(result: any): void {\n        const params: any = { layers: JSON.stringify([this.list.oid]) };\n\n        if (result != null) {\n            params.version = this.list.oid;\n            params.uid = result.uid;\n            params.pageContext = \"DATA\";\n\n            this.router.navigate([\"/registry/location-manager\"], {\n                queryParams: params\n            });\n        } else {\n            this.service.getBounds(this.list.oid).then(bounds => {\n                if (bounds && Array.isArray(bounds)) {\n                    let llb = new LngLatBounds([bounds[0], bounds[1]], [bounds[2], bounds[3]]);\n                    const array = llb.toArray();\n\n                    params.bounds = JSON.stringify(array);\n                }\n\n                this.router.navigate([\"/registry/location-manager\"], {\n                    queryParams: params\n                });\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    onRunCuration(): void {\n        this.service.createCurationJob(this.list).then(job => {\n            this.router.navigate([\"/registry/curation-job\", this.list.oid]);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onFilter(event: LazyLoadEvent): void {\n        this.filters = null;\n\n        if (event.filters != null) {\n            this.filters = event.filters;\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <progress-bar *ngIf=\"isRefreshing\"></progress-bar>\n\n    <div *ngIf=\"list != null\" id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row\">\n\n            <div class=\"col-md-4\">\n\n                <h4>\n                    <span *ngIf=\"!list.working\">\n                        <localize *ngIf=\"!list.working\" key=\"list.type.version\"></localize>&nbsp;{{list.versionNumber}}\n                    </span>\n                    <span *ngIf=\"list.working\">\n                        <localize key=\"list.type.working.version\"></localize>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlist.list.visibility\"></localize> :\n                    <span class=\"date-string-display\">\n                        <localize *ngIf=\"list.listMetadata.visibility === 'PUBLIC'\" key=\"masterlist.public\"></localize>\n                        <localize *ngIf=\"list.listMetadata.visibility !== 'PUBLIC'\" key=\"masterlist.private\"></localize>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlists.list.authoritativeness\"></localize> :\n                    <span class=\"date-string-display\">\n                        <localize *ngIf=\"list.listMetadata.master\" key=\"list.type.master\"></localize>\n                        <localize *ngIf=\"!list.listMetadata.master\" key=\"list.type.non.master\"></localize>\n                    </span>\n                </h4>\n            </div>\n            <div class=\"col-md-8\">\n                <h4>\n                    <localize key=\"masterlist.generatedDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        <date-text [date]=\"list.publishDate\"></date-text>\n                    </span>\n                </h4>\n\n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : <span class=\"date-string-display\">\n                        <date-text [date]=\"list.forDate\"></date-text>\n                    </span>\n                </h4>\n            </div>\n        </div>\n\n        <div class=\"row\" style=\"margin-bottom:10px;\">\n            <div class=\"col-md-4\">\n                <div *ngIf=\"list.working && (isRM || isRA || isSRA)\" class=\"button-holder pull-left\">\n                    <button type=\"submit\" class=\"btn btn-primary\" role=\"button\" (click)=\"onRunCuration()\"\n                        style=\"margin-left:0;\">\n                        <localize key=\"list.type.run.curation\"></localize>\n                    </button>\n                    <span\n                        style=\"vertical-align:middle;display:inline-block;font-style: italic;margin-left: 5px;color: grey;\">\n                        <span *ngIf=\"list.curation.lastRun == null\" class=\"date-string-display\">\n                            <localize key=\"list.type.run.na\"></localize>\n                        </span>\n                        <a *ngIf=\"list.curation.lastRun != null\" [routerLink]=\"['/registry/curation-job', list.oid]\"\n                            routerLinkActive=\"active\">\n                            <localize key=\"list.type.last.validation.date\"></localize>\n                            <date-text [date]=\"list.curation.lastRun\"></date-text>\n                        </a>\n                    </span>\n                </div>\n            </div>\n            <div class=\"col-md-8\">\n                <div class=\"button-holder pull-right\">\n\n                    <span *ngIf=\"isWritable\" class=\"clickable\"\n                        style=\"vertical-align:middle;display:inline-block;line-height:0;\">\n                        <boolean-field [(value)]=\"showInvalid\" (change)=\"handleShowInvalidChange()\"\n                            [localizeLabelKey]=\"'masterlist.showInvalid'\"></boolean-field>\n                    </span>\n\n                    <span *ngIf=\"list.working\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true}\"\n                            style=\"font-size: 24px;vertical-align: middle;padding-right: 5px;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n\n                    <button *ngIf=\"list.isMember || list.geospatialMetadata.visibility === 'PUBLIC'\" type=\"submit\"\n                        (click)=\"onGotoMap(null)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.viewOnMap\"></localize>\n                    </button>\n\n                    <button *ngIf=\"list.working && isWritable && !list.isAbstract\" type=\"submit\"\n                        (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.newGeoObject\"></localize>\n                    </button>\n\n                    <span class=\"dropdown\" *ngIf=\"list.working && isWritable && list.isAbstract\">\n                        <button class=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\"\n                            data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                            <localize key=\"masterlist.newGeoObject\"></localize>\n                            <span class=\"caret\"></span>\n                        </button>\n                        <ul class=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                            <li>\n                                <localize style=\"padding-left:10px;\" key=\"masterlist.newGeoObject.selectASubtype\">\n                                </localize>\n                            </li>\n                            <li role=\"separator\" class=\"divider\"></li>\n                            <li *ngFor=\"let subtype of list.subtypes\"><a\n                                    (click)=\"onNewGeoObject(subtype.code)\">{{subtype.label}}</a></li>\n                        </ul>\n                    </span>\n\n                    <button *ngIf=\"list.listMetadata.visibility === 'PUBLIC' || list.geospatialMetadata.visibility === 'PUBLIC'\"\n                     type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"filters == null\" key=\"io.export.allrows\"></localize>\n                        <localize *ngIf=\"filters != null\" key=\"io.export.filteredrows\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\" style=\"max-height:calc(100vh - 460px); min-height:calc(100vh - 460px);\">\n\n                <ng-container *ngIf=\"cols != null && config != null\">\n                    <generic-table [cols]=\"cols\" [config]=\"config\" [refresh]=\"refresh\"\n                        [pageConfig]=\"{oid: list.oid, showInvalid: showInvalid}\" (click)=\"onClick($event)\"\n                        (onFilter)=\"onFilter($event)\"></generic-table>\n                </ng-container>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\n\n@Component({\n    selector: \"export-format-modal\",\n    templateUrl: \"./export-format-modal.component.html\",\n    styleUrls: []\n})\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next(this.format);\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading text-center\">\n        <h1>\n            Export\n        </h1>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { webSocket, WebSocketSubject } from \"rxjs/webSocket\";\n\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { PageResult } from \"@shared/model/core\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { Subscription } from \"rxjs\";\nimport { WebSockets } from \"@shared/component/web-sockets/web-sockets\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"curation-job\",\n    templateUrl: \"./curation-job.component.html\",\n    styleUrls: []\n})\nexport class CurationJobComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    version: ListTypeVersion;\n    job: CurationJob;\n\n    page: PageResult<CurationProblem> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    timeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    isPolling: boolean = false;\n    hasRowValidationProblem: boolean = false;\n\n    notifier: WebSocketSubject<{ type: string, message: string }>;\n    subscription: Subscription = null;\n\n    constructor(private router: Router, public service: ListTypeService, private modalService: BsModalService,\n        private route: ActivatedRoute, private dateService: DateService,\n        private localizeService: LocalizationService, authService: AuthService) {\n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n    }\n\n    ngOnInit(): void {\n        const oid = this.route.snapshot.params[\"oid\"];\n        this.service.getVersion(oid).then(version => {\n            this.version = version;\n\n            this.onPageChange(1);\n        });\n\n        let baseUrl = WebSockets.buildBaseUrl();\n\n        this.notifier = webSocket(baseUrl + \"/websocket/notify\");\n        this.subscription = this.notifier.subscribe(message => {\n            if (message.type === \"CURATION_JOB_CHANGE\") {\n                this.onPageChange(this.page.pageNumber);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.notifier.complete();\n    }\n\n    formatAffectedRows(rows: string) {\n        return rows.replace(/,/g, \", \");\n    }\n\n    formatValidationResolve(obj: any) {\n        return JSON.stringify(obj);\n    }\n\n    onProblemResolved(problem: CurationProblem): void {\n        const index = this.page.resultSet.findIndex(p => p.id === problem.id);\n\n        if (index !== -1) {\n            this.page.resultSet.splice(index, 1);\n        }\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.no.geometry\");\n        } else if (probType === \"INVALID_GEOMETRY\") {\n            return this.localizeService.decode(\"list.type.invalid.geometry\");\n        }\n\n        return probType;\n    }\n\n    onEdit(problem: CurationProblem): void {\n        // this.bsModalRef = this.modalService.show(CurationProblemModalComponent, {\n        //     animated: true,\n        //     backdrop: true,\n        //     ignoreBackdropClick: true\n        // });\n        // this.bsModalRef.content.init(this.version, problem, this.job, (result: any) => {\n        //     // if (result.action === \"RESOLVED\") {\n        //     // this.onProblemResolved(result.data);\n        //     // }\n        // });\n\n        const params: any = {\n            layers: JSON.stringify([this.version.oid]),\n            version: this.version.oid,\n            uid: problem.goUid,\n            pageContext: 'DATA'\n        };\n\n        this.router.navigate([\"/registry/location-manager\"], {\n            queryParams: params\n        });\n    }\n\n    toggleResolution(problem: CurationProblem): void {\n        const resolution = (problem.resolution == null || problem.resolution.length === 0 || problem.resolution === \"UNRESOLVED\")\n            ? \"APPLY_GEO_OBJECT\"\n            : \"UNRESOLVED\";\n\n        this.service.setResolution(problem, resolution).then(() => {\n            problem.resolution = resolution;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPageChange(pageNumber: any): void {\n        if (this.version != null) {\n            this.message = null;\n\n            this.service.getCurationInfo(this.version, false, pageNumber, this.page.pageSize).then(response => {\n                this.job = response;\n\n                if (this.job.status === \"SUCCESS\") {\n                    this.page = this.job.page;\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        }\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  <loading-bar></loading-bar>\n\n  <div id=\"app-container\" class=\"container-fluid\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"py-5\">\n      <h2>\n        <localize key=\"curation.job.title\"></localize>\n      </h2>\n    </div>\n    <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n      <div class=\"col-md-4 order-md-1\">\n        <div class=\"wrapper\">\n\n          <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n          <p style=\"padding-left: 60px;\">\n            <span style=\"display: block;\">\n              <strong>{{version.label}}</strong>\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"list.type.job.started.by\"></localize>\n              {{job.lastRunBy}}\n            </span>\n            <span style=\"display: block;\">\n              <localize key=\"scheduledjobs.job.started.label\"></localize>\n              <span class=\"date-string-display\">\n                <date-text [date]=\"job.lastRun\"></date-text>\n              </span>\n            </span>\n          </p>\n\n        </div>\n      </div>\n      <div class=\"col-md-3 order-md-1\">\n        <div>\n\n          <h5><b>{{job.workProgress}}\n            <localize key=\"list.type.validated.out.of\"></localize>\n              {{job.workTotal}}\n              <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n            </b></h5>\n          <h5>{{job.workTotal - job.workProgress}} <localize key=\"scheduledjobs.job.remaining.label\"></localize>\n          </h5>\n\n        </div>\n      </div>\n      <div class=\"col-md-5 order-md-1\">\n      </div>\n    </div>\n    <div *ngIf=\"page && page.resultSet.length > 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n\n        <ul class=\"list-group\">\n\n          <table class=\"list-table table table-bordered table-striped\">\n            <thead>\n              <tr>\n                <th class=\"label-column\">\n                  <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n                </th>\n                <th class=\"label-column\">\n                  <localize key=\"data.property.label.code\"></localize>\n                </th>\n                <th class=\"label-column\">\n\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"let row of page.resultSet | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{getFriendlyProblemType(row.type)}}</p>\n                </td>\n                <td class=\"label-column\" style=\"vertical-align: middle;\">\n                  <p>{{row.goCode}}</p>\n                </td>\n                <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                  <button *ngIf=\"row.resolution !=='APPLY_GEO_OBJECT' \" type=\"submit\" (click)=\"onEdit(row)\"\n                    class=\"btn btn-link\" role=\"button\">\n                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                  </button>\n                  <boolean-field [value]=\"row.resolution === 'APPLY_GEO_OBJECT'\" (change)=\"toggleResolution(row)\"\n                    [label]=\"'list.type.problem.resolved' | localize\" style=\"vertical-align:middle;line-height:0;\"></boolean-field>\n\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div class=\"solid-table-footer\">\n            <div *ngIf=\"page.resultSet.length > 0\" class=\"solid-table-footer\">\n              <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            </div>\n          </div>\n        </ul>\n      </div>\n    </div>\n    <div *ngIf=\"job && job.status === 'SUCCESS' && page && page.resultSet.length === 0\" class=\"row\">\n      <div class=\"col-md-12 order-md-1\">\n        <localize key=\"list.type.validation.empty\"></localize>\n      </div>\n    </div>\n\n  </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\nimport { PageResult } from \"@shared/model/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\nimport { Subscription } from \"rxjs\";\nimport { ClassificationTypePublishModalComponent } from \"./classification-type-publish-modal.component\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\n\n@Component({\n    selector: \"classification-type-manager\",\n    templateUrl: \"./classification-type-manager.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypeManagerComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    page: PageResult<ClassificationType> = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        resultSet: []\n    };\n\n    querySubscription: Subscription = null;\n\n    subscription: Subscription = null;\n\n    classificationType: ClassificationType = null;\n\n    /*\n    * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        private service: ClassificationTypeService,\n        private lService: LocalizationService,\n        private modalService: BsModalService) { }\n\n    ngOnInit(): void {\n        this.querySubscription = this.route.queryParams.subscribe((params: Params) => {\n            const typeCode = params.typeCode;\n\n            if (typeCode != null && typeCode.length > 0) {\n                if (this.classificationType == null || this.classificationType.code !== typeCode) {\n                    this.classificationType = null;\n\n                    this.service.get(typeCode).then(classificationType => {\n                        this.classificationType = classificationType;\n                    }).catch((err: HttpErrorResponse) => {\n                        this.error(err);\n                    });\n                }\n            } else {\n                this.classificationType = null;\n            }\n        });\n\n        this.refresh();\n    }\n\n    ngOnDestroy(): void {\n        if (this.querySubscription != null) {\n            this.querySubscription.unsubscribe();\n        }\n\n        this.querySubscription = null;\n\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.subscription = null;\n    }\n\n    onCreate(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(() => this.refresh());\n    }\n\n    onEdit(type: ClassificationType): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationTypePublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(() => this.refresh(), type);\n    }\n\n    onDelete(type: ClassificationType): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + type.displayLabel.localizedValue + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.service.remove(type).then(() => {\n                const index = this.page.resultSet.findIndex(t => t.oid === type.oid);\n\n                if (index !== -1) {\n                    this.page.resultSet.splice(index, 1);\n                }\n\n                if (this.classificationType != null && type.code === this.classificationType.code) {\n                    this.router.navigate([], {\n                        relativeTo: this.route,\n                        queryParams: { typeCode: null }\n                    });\n                }\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    refresh(): void {\n        this.service.page({}).then(page => {\n            this.page = page;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n\n            <nav class=\"col-md-3 list-sidebar\">\n                <div class=\"sidebar-section-content\" style=\"padding-top:20px;\">\n                    <ul class=\"list-group\">\n\n\n                        <li class=\"list-group-item got-li-item\" *ngFor=\"let type of page.resultSet\" [id]=\"type.code\">\n                            <a [routerLink]=\"'/registry/classification-type'\" [queryParams]=\"{typeCode:type.code}\"\n                                routerLinkActive=\"active\">\n                                {{type.displayLabel.localizedValue}}\n                            </a>\n\n                            <span\n                                style=\"position:absolute;right:10px;top:50%;transform:translateY(-50%);\">\n\n                                <a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(type)\"\n                                    [title]=\"'modal.button.edit' | localize\"></a>\n                                <a class=\"fa fa-trash-o ico-remove\" (click)=\"onDelete(type)\"\n                                    [title]=\"'button.delete.helptext' | localize\"></a>\n                            </span>\n\n                        </li>\n                        <li class=\"list-group-item got-li-item\">\n                            <hr class=\"bottom\">\n                            <button type=\"submit\" (click)=\"onCreate()\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <div class=\"col-md-9 hierarchy-content\">\n                <div id=\"overflow-div\">\n                    <classification-type *ngIf=\"classificationType != null\" [classificationType]=\"classificationType\"></classification-type>\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ClassificationType } from \"@registry/model/classification-type\";\nimport { ClassificationTypeService } from \"@registry/service/classification-type.service\";\n\n@Component({\n    selector: \"classification-type-publish-modal\",\n    templateUrl: \"./classification-type-publish-modal.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypePublishModalComponent implements OnInit, OnDestroy {\n\n    currentDate: Date = new Date();\n    message: string = null;\n    onClassificationTypeChange: Subject<ClassificationType> = null;\n\n    type: ClassificationType = null;\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ClassificationTypeService,\n        private lService: LocalizationService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onClassificationTypeChange = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.onClassificationTypeChange != null) {\n            this.onClassificationTypeChange.unsubscribe();\n        }\n    }\n\n    init(observer: Observer<ClassificationType>, type?: ClassificationType): Subscription {\n        if (type == null) {\n            this.isNew = true;\n            this.type = {\n                oid: null,\n                displayLabel: this.lService.create(),\n                description: this.lService.create(),\n                code: \"\"\n            };\n        } else {\n            this.type = type;\n            this.isNew = false;\n        }\n\n        return this.onClassificationTypeChange.subscribe(observer);\n    }\n\n    onSubmit(): void {\n        this.service.apply(this.type).then(response => {\n            this.onClassificationTypeChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    stringify(obj: any): string {\n        return JSON.stringify(obj);\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"type != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1 *ngIf=\"isNew\">\n                <localize key=\"data.type.create.classification\"></localize>                \n            </h1>\n            <h1 *ngIf=\"!isNew\">\n                {{type.displayLabel.localizedValue}}\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"type.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of type.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.label\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of type.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.description\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","import { Component, Input, OnDestroy, OnInit, ViewChild } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subscription } from \"rxjs\";\nimport { TreeComponent, TreeModel, TreeNode, TREE_ACTIONS } from \"@circlon/angular-tree-component\";\nimport { ContextMenuComponent, ContextMenuService } from \"ngx-contextmenu\";\n\nimport { ConfirmModalComponent, ErrorHandler } from \"@shared/component\";\nimport { Classification, ClassificationType } from \"@registry/model/classification-type\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\nimport { ClassificationPublishModalComponent } from \"./classification-publish-modal.component\";\nimport { PageResult } from \"@shared/model/core\";\n\nconst PAGE_SIZE: number = 100;\n\n// eslint-disable-next-line no-unused-vars\nenum NodeType {\n    // eslint-disable-next-line no-unused-vars\n    CLASSIFICATION = 0, LINK = 1\n}\n\nclass ClassificationNode {\n\n    name: string;\n    code: string;\n    type: NodeType;\n    classification?: Classification;\n    hasChildren: boolean;\n    children?: ClassificationNode[];\n    parent?: ClassificationNode;\n    pageNumber?: number;\n\n}\n\n@Component({\n    selector: \"classification-type\",\n    templateUrl: \"./classification-type.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationTypeComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    @Input() classificationType: ClassificationType = null;\n\n    nodes: ClassificationNode[] = null;\n\n    subscription: Subscription = null;\n\n    /*\n    * Reference to the modal current showing\n    */\n    bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild(TreeComponent)\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild(\"nodeMenu\") public nodeMenuComponent: ContextMenuComponent;\n\n    options = {\n        idField: \"code\",\n        getChildren: (node: TreeNode) => {\n            return this.getChildren(node);\n        },\n        actionMapping: {\n            mouse: {\n                click: (tree: TreeComponent, node: TreeNode, $event: any) => {\n                    this.treeNodeOnClick(node, $event);\n                },\n                contextMenu: (tree: any, node: TreeNode, $event: any) => {\n                    this.handleOnMenu(node, $event);\n                },\n                drop: (tree: TreeModel, node: TreeNode, $event: any, obj: {\n                    from: any;\n                    to: any;\n                }) => {\n                    this.onMoveNode(tree, node, $event, obj);\n                }\n            }\n        },\n        allowDrag: (node: TreeNode) => {\n            if (node.data.type === NodeType.CLASSIFICATION) {\n                const code = node.data.classification.code;\n\n                return this.nodes.findIndex(root => root.classification.code === code) === -1;\n            }\n\n            return false;\n        },\n        allowDrop: (node: TreeNode, event: { parent: TreeNode, index: number }) => {\n            if (event != null && event.parent != null) {\n                return event.parent.data.type === NodeType.CLASSIFICATION;\n            }\n\n            return false;\n        },\n        animateExpand: true,\n        scrollOnActivate: true,\n        animateSpeed: 2,\n        animateAcceleration: 1.01\n    }\n\n    constructor(\n        private contextMenuService: ContextMenuService,\n        private modalService: BsModalService,\n        private service: ClassificationService,\n        private lService: LocalizationService\n    ) { }\n\n    ngOnInit(): void {\n        this.getChildren(null).then(nodes => {\n            this.nodes = nodes;\n\n            if (this.nodes.length > 0) {\n                window.setTimeout(() => {\n                    this.tree.treeModel.getFirstRoot().expand();\n                }, 50);\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.subscription = null;\n    }\n\n    getChildren(treeNode: TreeNode): Promise<ClassificationNode[]> {\n        const node: ClassificationNode = treeNode != null ? treeNode.data : null;\n\n        const code = node != null ? node.classification.code : null;\n\n        return this.service.getChildren(this.classificationType.code, code, 1, PAGE_SIZE).then(page => {\n            const nodes = this.createNodes(node, page);\n\n            if (node != null) {\n                if (node.children == null) {\n                    node.children = [];\n                }\n\n                node.children.concat(nodes);\n            }\n\n            return nodes;\n        }).catch(ex => {\n            return [];\n        });\n    }\n\n    createNodes(parent: ClassificationNode, page: PageResult<Classification>): ClassificationNode[] {\n        const nodes = page.resultSet.map(child => {\n            return {\n                code: child.code,\n                name: child.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: child,\n                hasChildren: true\n            } as ClassificationNode;\n        });\n\n        // Add page node if needed\n        if (page.count > page.pageNumber * page.pageSize) {\n            nodes.push({\n                code: \"...\",\n                name: \"...\",\n                type: NodeType.LINK,\n                hasChildren: false,\n                pageNumber: page.pageNumber + 1,\n                parent: parent\n            } as ClassificationNode);\n        }\n\n        return nodes;\n    }\n\n    handleOnMenu(node: TreeNode, $event: any): void {\n        this.contextMenuService.show.next({\n            contextMenu: this.nodeMenuComponent,\n            event: $event,\n            item: node\n        });\n        $event.preventDefault();\n        $event.stopPropagation();\n    }\n\n    treeNodeOnClick(treeNode: TreeNode, $event: any): void {\n        const node: ClassificationNode = treeNode != null ? treeNode.data : null;\n\n        if (node != null && node.type === NodeType.LINK) {\n            if (treeNode.parent != null) {\n                const parentNode: ClassificationNode = treeNode.parent.data;\n                const code = parentNode.classification.code;\n                const pageNumber = node.pageNumber;\n\n                this.service.getChildren(this.classificationType.code, code, pageNumber, PAGE_SIZE).then(page => {\n                    const nodes = this.createNodes(parentNode, page);\n\n                    parentNode.children = parentNode.children.filter(node => node.code !== \"...\");\n                    parentNode.children = parentNode.children.concat(nodes);\n\n                    this.tree.treeModel.update();\n                }).catch(ex => {\n                });\n            }\n        } else {\n            if (treeNode.isExpanded) {\n                treeNode.collapse();\n            } else {\n                treeNode.expand();\n            }\n\n            treeNode.setActiveAndVisible();\n        }\n    }\n\n    onCreate(parentNode: TreeNode): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        const parent: ClassificationNode = parentNode != null ? parentNode.data : null;\n\n        this.bsModalRef = this.modalService.show(ClassificationPublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(classification => {\n            const node: ClassificationNode = {\n                code: classification.code,\n                name: classification.displayLabel.localizedValue,\n                type: NodeType.CLASSIFICATION,\n                classification: classification,\n                hasChildren: true\n            };\n\n            if (parentNode != null) {\n                parent.children.push(node);\n            } else {\n                this.nodes.push(node);\n            }\n\n            this.tree.treeModel.update();\n        }, this.classificationType, (parent != null ? parent.classification : null));\n    }\n\n    onEdit(node: TreeNode): void {\n        if (this.subscription != null) {\n            this.subscription.unsubscribe();\n        }\n\n        this.bsModalRef = this.modalService.show(ClassificationPublishModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.subscription = this.bsModalRef.content.init(classification => {\n            const classificationNode: ClassificationNode = node.data;\n            classificationNode.classification = classification;\n            classificationNode.name = classification.displayLabel.localizedValue;\n\n            this.tree.treeModel.update();\n        }, this.classificationType, null, node.data.classification);\n    }\n\n    onRemove(node: TreeNode): void {\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = this.lService.decode(\"confirm.modal.verify.delete\") + \" [\" + node.data.classification.code + \"]\";\n        this.bsModalRef.content.submitText = this.lService.decode(\"modal.button.delete\");\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.removeTreeNode(node);\n        });\n    }\n\n    onMoveNode(tree: TreeModel, node: TreeNode, $event: any, obj: {\n        from: any;\n        to: any;\n    }): void {\n        const parent: Classification = node.data.classification;\n        const classification: Classification = obj.from.data.classification;\n        const parentCode = parent.code;\n        const code = classification.code;\n\n        let message = this.lService.decode(\"classification.move.message\");\n        message = message.replace(\"{0}\", classification.displayLabel.localizedValue);\n        message = message.replace(\"{1}\", parent.displayLabel.localizedValue);\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.type = \"danger\";\n\n        this.bsModalRef.content.onConfirm.subscribe(() => {\n            this.message = null;\n\n            this.service.move(this.classificationType.code, code, parentCode).then(() => {\n                TREE_ACTIONS.MOVE_NODE(tree, node, $event, obj);\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        });\n    }\n\n    removeTreeNode(node: TreeNode): void {\n        this.message = null;\n\n        this.service.remove(this.classificationType.code, node.data.classification.code).then(() => {\n            if (node.parent.data.classification == null) {\n                this.nodes = [];\n            }\n\n            const parent: TreeNode = node.parent;\n            const children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter((n: any) => n.id !== node.data.id);\n\n            if (parent.data.children.length === 0) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    /*\n\n    refresh(): void {\n    this.service.page({}).then(page => {\n        this.page = page;\n    }).catch((err: HttpErrorResponse) => {\n        this.error(err);\n    });\n    }\n    */\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<context-menu #nodeMenu>\n    <ng-template contextMenuItem let-item (execute)=\"onEdit($event.item)\">\n        <localize key=\"modal.button.edit\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"onRemove($event.item)\">\n        <localize key=\"modal.button.delete\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"onCreate($event.item)\">\n        <localize key=\"hierarchy.content.addChild\"></localize>\n    </ng-template>\n</context-menu>\n\n<ng-container>\n\n    <div class=\"heading\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" style=\"margin-top: 5px;\" role=\"alert\">{{message}}</div>\n\n                <h2>\n                    {{classificationType.displayLabel.localizedValue}}\n                </h2>\n            </div>\n        </div>\n    </div>\n\n    <div *ngIf=\"classificationType != null && nodes != null\" class=\"row\">\n        <div class=\"col-md-12\">\n            <ng-container *ngIf=\"nodes.length === 0\">\n                <button type=\"submit\" (click)=\"onCreate(null)\" class=\"btn btn-primary\" role=\"button\">\n                    <localize key=\"classification.set.root\"></localize>\n                </button>\n            </ng-container>\n            <div>\n                <tree-root *ngIf=\"nodes.length > 0\" #tree [options]=\"options\" [nodes]=\"nodes\">\n                </tree-root>\n            </div>\n        </div>\n    </div>\n\n</ng-container>","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Observer, Subject, Subscription } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { Classification, ClassificationType } from \"@registry/model/classification-type\";\nimport { ClassificationService } from \"@registry/service/classification.service\";\n\n@Component({\n    selector: \"classification-publish-modal\",\n    templateUrl: \"./classification-publish-modal.component.html\",\n    styleUrls: [\"./classification-type-manager.css\"]\n})\nexport class ClassificationPublishModalComponent implements OnInit, OnDestroy {\n\n    message: string = null;\n\n    onClassificationChange: Subject<Classification> = null;\n\n    classificationType: ClassificationType = null;\n\n    parent: Classification = null;\n\n    classification: Classification = null;\n\n    readonly: boolean = false;\n\n    isNew: boolean = false;\n\n    valid: boolean = true;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(\n        private service: ClassificationService,\n        private lService: LocalizationService,\n        private bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onClassificationChange = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        if (this.onClassificationChange != null) {\n            this.onClassificationChange.unsubscribe();\n        }\n    }\n\n    init(observer: Observer<ClassificationType>, classificationType: ClassificationType, parent: Classification, classification?: Classification): Subscription {\n        this.classificationType = classificationType;\n        this.parent = parent;\n\n        if (classification == null) {\n            this.isNew = true;\n            this.classification = {\n                code: \"\",\n                displayLabel: this.lService.create(),\n                description: this.lService.create()\n            };\n        } else {\n            this.classification = classification;\n            this.isNew = false;\n        }\n\n        return this.onClassificationChange.subscribe(observer);\n    }\n\n    onSubmit(): void {\n        const classificationType = this.classificationType.code;\n        const parentCode = this.parent != null ? this.parent.code : null;\n\n        // classificationType: string, parentCode: string, classification: Classification, isNew: boolean\n        this.service.apply(classificationType, parentCode, this.classification, this.isNew).then(response => {\n            this.onClassificationChange.next(response);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","\n<div class=\"modal-body\">\n    <ng-container *ngIf=\"classification != null\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"heading text-center\">\n            <h1 *ngIf=\"isNew\">\n                <localize key=\"data.type.create.classification\"></localize>                \n            </h1>\n            <h1 *ngIf=\"!isNew\">\n                {{classificationType.displayLabel.localizedValue}}\n            </h1>\n        </div>\n        <!-- <div class=\"col-md-12 order-md-1\"> -->\n        <form #form=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n            <fieldset>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.code\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"classification.code\" name=\"code\" type=\"text\" class=\"form-control\"\n                            [disabled]=\"readonly || !isNew\" required />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of classification.displayLabel.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.label\"></localize>\n                            <span style=\"color: #BABABA\">&nbsp;(<convert-key-label [key]=\"localeValue.locale\">\n                                </convert-key-label>)</span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\" *ngFor=\"let localeValue of classification.description.localeValues\">\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"data.property.label.description\"></localize>\n                            <span style=\"color: #BABABA\">\n                                &nbsp;(<convert-key-label [key]=\"localeValue.locale\"></convert-key-label>)\n                            </span>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"text\"\n                            class=\"form-control\" [disabled]=\"readonly\"\n                            [required]=\"localeValue.locale === 'defaultLocale'\" />\n                    </div>\n                </div>\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div>\n                        <div class=\"button-holder\">\n                            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                                <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                            </button>\n                            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\"\n                                role=\"button\" [disabled]=\"form.invalid || !valid\">\n                                <localize key=\"io.submit\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </fieldset>\n        </form>\n    </ng-container>\n</div>","/* eslint-disable no-floating-decimal */\nimport * as d3 from \"d3\";\nimport { calculateTextWidth } from \"./svg-util\";\n\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyType } from \"@registry/model/hierarchy\";\n\nimport { SvgHierarchyType } from \"./svg-hierarchy-type\";\nimport { HierarchyComponent, RELATED_NODE_BANNER_COLOR } from \"../hierarchy.component\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ErrorHandler, ConfirmModalComponent, ErrorModalComponent } from \"@shared/component\";\nimport { LocalizationService, AuthService } from \"@shared/service\";\n\nexport class SvgHierarchyNode {\n\n    private hierarchyComponent: HierarchyComponent;\n\n    private svgHierarchyType: SvgHierarchyType;\n\n    private geoObjectType: GeoObjectType;\n\n    private treeNode: any;\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    constructor(hierarchyComponent: HierarchyComponent, svgHierarchyType: SvgHierarchyType, geoObjectType: GeoObjectType, treeNode: any,\n        public localizeService: LocalizationService, public modalService: BsModalService, public authService: AuthService) {\n        this.hierarchyComponent = hierarchyComponent;\n        this.svgHierarchyType = svgHierarchyType;\n        this.geoObjectType = geoObjectType;\n        this.treeNode = treeNode;\n    }\n\n    getCode(): string {\n        return this.geoObjectType.code;\n    }\n\n    setPos(x: number, y: number, dragging: boolean) {\n        let bbox = this.getBbox();\n\n        // Move the GeoObjectType with the pointer when they move their mouse\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-header-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x)\n            .attr(\"y\", y - SvgHierarchyType.gotRectH / 2 + 2);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-label-text[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + 5)\n            .attr(\"y\", y + 1);\n\n        d3.select(\".g-hierarchy[data-primary=true] .svg-got-relatedhiers-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n            .classed(\"dragging\", dragging)\n            .attr(\"x\", x + bbox.width - 20)\n            .attr(\"y\", y + 17);\n\n        // Move inherit and uninherit buttons with the node they're moving\n\n        let inheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (inheritNode != null) {\n            const heritX = (x + bbox.width - 60);\n            const heritY = (y + bbox.height - 24);\n            let inheritBbox = inheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-inherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - inheritBbox.x) + \" \" + (heritY - inheritBbox.y) + \")\");\n        }\n\n        let uninheritNode: any = d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\").node();\n        if (uninheritNode != null) {\n            const heritX = (x + bbox.width - 71);\n            const heritY = (y + bbox.height - 24);\n            let uninheritBbox = uninheritNode.getBBox();\n            d3.select(\".g-hierarchy[data-primary=true] .hierarchy-uninherit-button[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\")\n                .classed(\"dragging\", dragging)\n                .attr(\"transform\", \"translate(\" + (heritX - uninheritBbox.x) + \" \" + (heritY - uninheritBbox.y) + \")\");\n        }\n    }\n\n    getPos() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) };\n    }\n\n    getBbox() {\n        let select = d3.select(\".g-hierarchy[data-primary=true] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n\n        return { x: parseInt(select.attr(\"x\")), y: parseInt(select.attr(\"y\")) - 3, width: parseInt(select.attr(\"width\")), height: parseInt(select.attr(\"height\")) + 3 };\n    }\n\n    getTreeNode() {\n        return this.treeNode;\n    }\n\n    hideRelatedHierarchy(): string {\n        let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n        if (existingSecondary.node() != null) {\n            existingSecondary.remove();\n            this.hierarchyComponent.calculateSvgViewBox();\n\n            let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n            return existingSecondaryCode;\n        }\n    }\n\n    renderRelatedHierarchiesMenu() {\n        let that = this;\n        let existingMenu = d3.select(\".g-context-menu\");\n\n        if (existingMenu.node() == null) {\n            //let parent = d3.select('g.g-hierarchy-tree[data-code=\"' + this.svgHierarchyType.hierarchyType.code + '\"]');\n            let parent = d3.select(\"#svg\");\n\n            let contextMenuGroup = parent.append(\"g\").classed(\"g-context-menu\", true);\n\n            let relatedHierarchies = this.svgHierarchyType.getRelatedHierarchies(this.getCode());\n\n            const hasActionsPermissions = this.authService.isSRA() || this.authService.isOrganizationRA(this.svgHierarchyType.hierarchyType.organizationCode);\n\n            let bbox = this.getBbox();\n            let x = bbox.x + bbox.width - 5;\n            let y = bbox.y + bbox.height / 2 - 8;\n            const height = 20;\n            const fontSize = 8;\n            const widthPadding = 10;\n            const borderColor = \"#aaaaaa\";\n            const dividerColor = \"#e4e4e4\";\n            const fontFamily = \"sans-serif\";\n            const titleFontSize = 9;\n\n            const titleLabel = this.hierarchyComponent.localize(\"hierarchy.content.relatedHierarchies\");\n            const actionsTitle = this.hierarchyComponent.localize(\"hierarchy.content.actionsTitle\");\n            const removeFromHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.removeFromHierarchy\");\n            const noRelatedHierLabel = this.hierarchyComponent.localize(\"hierarchy.content.noRelatedHierarchies\");\n            const hideRelatedHierarchyLabel = this.hierarchyComponent.localize(\"hierarchy.content.hideRelatedHierarchy\");\n            const uninheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.uninherit\");\n            const inheritLabel = this.hierarchyComponent.localize(\"hierarchy.content.inherit\");\n\n            let isSecondaryHierarchyRendered = (d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node() != null);\n\n            let numActions = hasActionsPermissions ? (isSecondaryHierarchyRendered ? 2 : 1) : 0;\n\n            // Calculate the width of our title\n            let width = calculateTextWidth(titleLabel, titleFontSize);\n\n            // Calculate with of remove text\n            let removeWidth = calculateTextWidth(removeFromHierarchyLabel, fontSize);\n            width = removeWidth > width ? removeWidth : width;\n\n            if (isSecondaryHierarchyRendered) {\n              // Calculate width of \"hide related hierarchy\" label\n                let hideRelatedWidth = calculateTextWidth(hideRelatedHierarchyLabel, fontSize);\n                width = hideRelatedWidth > width ? hideRelatedWidth : width;\n            }\n\n            if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                let uninheritWidth = calculateTextWidth(uninheritLabel, fontSize);\n                width = uninheritWidth > width ? uninheritWidth : width;\n                numActions++;\n            } else {\n                let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                if (existingSecondary.node() != null) {\n                    let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                    let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                    let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                    let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                    if (this.treeNode.parent == null && relatedGotHasParents) {\n                        let inheritWidth = calculateTextWidth(inheritLabel, fontSize);\n                        width = inheritWidth > width ? inheritWidth : width;\n                        numActions++;\n                    }\n                }\n            }\n\n            // Calculate the width of our context menu, which is based on how long the text inside it will be.\n            // We don't know how long text is until we render it. So we'll need to loop over all the text and\n            // render and destroy all of it.\n            if (relatedHierarchies.length > 0) {\n                relatedHierarchies.forEach((relatedHierarchyCode: string) => {\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    let textWidth = calculateTextWidth(relatedHierarchyLabel, fontSize);\n\n                    if (textWidth > width) {\n                        width = textWidth;\n                    }\n                });\n            } else {\n                let noHierLabelWidth = calculateTextWidth(noRelatedHierLabel, fontSize);\n                width = noHierLabelWidth > width ? noHierLabelWidth : width;\n            }\n\n            width = width + widthPadding;\n\n            let heightAdditions: number = relatedHierarchies.length > 0 ? (numActions + 2) : (numActions + 3);\n\n            // Background rectangle with border\n            contextMenuGroup.append(\"rect\")\n                .classed(\"contextmenu-relatedhiers-background\", true)\n                .attr(\"x\", x)\n                .attr(\"y\", y)\n                .attr(\"rx\", 5)\n                .attr(\"width\", width)\n                .attr(\"height\", height * (relatedHierarchies.length + heightAdditions))\n                .attr(\"fill\", \"white\")\n                .attr(\"stroke-width\", .5)\n                .attr(\"stroke\", borderColor);\n\n            // Related Hierarchies Title\n            contextMenuGroup.append(\"text\")\n                .classed(\"contextmenu-relatedhiers-title\", true)\n                .attr(\"x\", x + widthPadding / 2)\n                .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                .attr(\"font-size\", titleFontSize)\n                .attr(\"font-family\", fontFamily)\n                .attr(\"font-weight\", \"bold\")\n                .text(titleLabel);\n\n            y = y + height;\n\n            // Dividing line at the bottom\n            contextMenuGroup.append(\"line\")\n                .classed(\"contextmenu-relatedhiers-divider\", true)\n                .attr(\"x1\", x)\n                .attr(\"y1\", y)\n                .attr(\"x2\", x + width)\n                .attr(\"y2\", y)\n                .attr(\"stroke\", borderColor)\n                .attr(\"stroke-width\", .5);\n\n\n            if (relatedHierarchies.length > 0) {\n                // Loop over all related hierarchies and draw them as list items\n                for (let i = 0; i < relatedHierarchies.length; ++i) {\n                    let relatedHierarchyCode = relatedHierarchies[i];\n                    let relatedHierarchy = this.hierarchyComponent.findHierarchyByCode(relatedHierarchyCode);\n\n                    let relatedHierarchyLabel = relatedHierarchy.label.localizedValue;\n                    if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode === relatedHierarchy.code) {\n                        relatedHierarchyLabel = relatedHierarchyLabel + \" (\" + this.hierarchyComponent.localize(\"hierarchy.content.inherited\") + \")\";\n                    }\n\n                    // Text that says the hierarchy's display label\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"data-hierCode\", relatedHierarchyCode)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(relatedHierarchyLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.renderSecondaryHierarchy(relatedHierarchy); });\n\n                    y = y + height;\n\n                    // Dividing line at the bottom\n                    if (i < relatedHierarchies.length) {\n                        contextMenuGroup.append(\"line\")\n                            .classed(\"contextmenu-relatedhiers-divider\", true)\n                            .attr(\"data-hierCode\", relatedHierarchyCode)\n                            .attr(\"x1\", x + 5)\n                            .attr(\"y1\", y)\n                            .attr(\"x2\", x + width - 5)\n                            .attr(\"y2\", y)\n                            .attr(\"stroke\", dividerColor)\n                            .attr(\"stroke-width\", .5);\n                    }\n                }\n            } else {\n                // Text that says \"No related Hierarchies\"\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(noRelatedHierLabel);\n\n                y = y + height;\n\n                    // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x + 5)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width - 5)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", dividerColor)\n                    .attr(\"stroke-width\", .5);\n            }\n\n      // Actions Section\n            if (hasActionsPermissions) {\n              // Actions Title\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-title\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (titleFontSize / 2))\n                    .attr(\"font-size\", titleFontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .attr(\"font-weight\", \"bold\")\n                    .text(actionsTitle);\n\n                y = y + height;\n\n              // Dividing line at the bottom\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n        // \"Remove from hierarchy\" button\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"data-remove\", \"REPLACE---gotCode\")\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(removeFromHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) { that.removeGotFromHierarchy(); });\n\n                y = y + height;\n\n            // Inherit / Uninherit buttons\n                if (this.treeNode.parent != null && this.treeNode.parent.data.inheritedHierarchyCode != null && this.treeNode.parent.data.inheritedHierarchyCode != \"\") {\n                    contextMenuGroup.append(\"line\")\n                        .classed(\"contextmenu-relatedhiers-divider\", true)\n                        .attr(\"x1\", x)\n                        .attr(\"y1\", y)\n                        .attr(\"x2\", x + width)\n                        .attr(\"y2\", y)\n                        .attr(\"stroke\", borderColor)\n                        .attr(\"stroke-width\", .5);\n\n                    contextMenuGroup.append(\"text\")\n                        .classed(\"contextmenu-relatedhiers-text\", true)\n                        .attr(\"x\", x + widthPadding / 2)\n                        .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                        .attr(\"font-size\", fontSize)\n                        .attr(\"font-family\", fontFamily)\n                        .text(uninheritLabel)\n                        .style(\"cursor\", \"pointer\")\n                        .on(\"click\", function(event, node) { that.onClickUninheritHierarchy(); });\n\n                    y = y + height;\n                } else {\n                    let existingSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n                    if (existingSecondary.node() != null) {\n                        let existingSecondaryCode = existingSecondary.attr(\"data-code\");\n                        let secondaryHierarchy = this.hierarchyComponent.findHierarchyByCode(existingSecondaryCode);\n\n                        let svgSecondaryHierarchy = new SvgHierarchyType(this.hierarchyComponent, d3.select(\"#svg\"), secondaryHierarchy, true, this.localizeService, this.modalService, this.authService);\n                        let relatedGotHasParents = svgSecondaryHierarchy.getNodeByCode(this.getCode()).getTreeNode().parent != null;\n\n                        if (this.treeNode.parent == null && relatedGotHasParents) {\n                            contextMenuGroup.append(\"line\")\n                                .classed(\"contextmenu-relatedhiers-divider\", true)\n                                .attr(\"x1\", x)\n                                .attr(\"y1\", y)\n                                .attr(\"x2\", x + width)\n                                .attr(\"y2\", y)\n                                .attr(\"stroke\", borderColor)\n                                .attr(\"stroke-width\", .5);\n\n                            contextMenuGroup.append(\"text\")\n                                .classed(\"contextmenu-relatedhiers-text\", true)\n                                .attr(\"x\", x + widthPadding / 2)\n                                .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                                .attr(\"font-size\", fontSize)\n                                .attr(\"font-family\", fontFamily)\n                                .text(inheritLabel)\n                                .style(\"cursor\", \"pointer\")\n                                .on(\"click\", function(event, node) { that.onClickInheritHierarchy(secondaryHierarchy); });\n\n                            y = y + height;\n                        }\n                    }\n                }\n            }\n\n            if (isSecondaryHierarchyRendered) {\n                contextMenuGroup.append(\"line\")\n                    .classed(\"contextmenu-relatedhiers-divider\", true)\n                    .attr(\"x1\", x)\n                    .attr(\"y1\", y)\n                    .attr(\"x2\", x + width)\n                    .attr(\"y2\", y)\n                    .attr(\"stroke\", borderColor)\n                    .attr(\"stroke-width\", .5);\n\n                contextMenuGroup.append(\"text\")\n                    .classed(\"contextmenu-relatedhiers-text\", true)\n                    .attr(\"x\", x + widthPadding / 2)\n                    .attr(\"y\", y + (height / 2) + (fontSize / 2))\n                    .attr(\"font-size\", fontSize)\n                    .attr(\"font-family\", fontFamily)\n                    .text(hideRelatedHierarchyLabel)\n                    .style(\"cursor\", \"pointer\")\n                    .on(\"click\", function(event, node) {\n                        that.hideRelatedHierarchy();\n\n                        let existingMenu = d3.select(\".g-context-menu\");\n                        if (existingMenu.node() != null) {\n                            existingMenu.remove();\n                        }\n\n                        d3.select(\".g-hierarchy-got-connector\").remove();\n                    });\n            }\n\n            this.hierarchyComponent.calculateSvgViewBox();\n        } else {\n            existingMenu.remove();\n        }\n    }\n\n    removeGotFromHierarchy() {\n        let svgGot = this.hierarchyComponent.primarySvgHierarchy.getNodeByCode(this.geoObjectType.code);\n\n        let obj = this.hierarchyComponent.findGeoObjectTypeByCode(svgGot.getCode());\n\n        this.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        let message = this.localizeService.decode(\"confirm.modal.verify.remove.hierarchy\");\n        message = message.replace(\"{label}\", obj.label.localizedValue);\n\n        this.bsModalRef.content.message = message;\n        this.bsModalRef.content.data = obj.code;\n\n        (<ConfirmModalComponent> this.bsModalRef.content).onConfirm.subscribe(data => {\n            let treeNode = svgGot.getTreeNode();\n            let parent = null;\n            if (treeNode.parent == null) {\n                parent = \"ROOT\";\n            } else {\n                if (treeNode.parent.data.inheritedHierarchyCode != null) {\n                    parent = \"ROOT\";\n                } else {\n                    parent = treeNode.parent.data.geoObjectType;\n                }\n            }\n\n            this.hierarchyComponent.removeFromHierarchy(parent, svgGot.getCode(), (err: any) => { console.log(err); });\n        });\n    }\n\n    renderSecondaryHierarchy(relatedHierarchy: HierarchyType) {\n        d3.select(\".g-context-menu\").remove();\n        d3.select(\".g-hierarchy-got-connector\").remove();\n\n        let myBbox = this.getBbox();\n        let svg = d3.select(\"#svg\");\n\n        // Remove any secondary hierarchy that may already be rendered\n        if (this.hideRelatedHierarchy() === relatedHierarchy.code) {\n            return;\n        }\n\n        // Get the bounding box for our primary hierarchy\n        let primaryHierBbox = (d3.select(\".g-hierarchy[data-primary=true]\").node() as any).getBBox();\n\n        // Render the secondary hierarchy\n        let svgHt: SvgHierarchyType = new SvgHierarchyType(this.hierarchyComponent, svg, relatedHierarchy, false, this.localizeService, this.modalService, this.authService);\n        svgHt.render();\n        let gSecondary = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\");\n\n        // Translate the secondary hierarchy to the right of the primary hierarchy\n        let gHierarchy: any = d3.select(\".g-hierarchy[data-primary=\\\"false\\\"]\").node();\n        let bbox = gHierarchy.getBBox();\n        let paddingLeft: number = primaryHierBbox.width + 40 + (primaryHierBbox.x - bbox.x);\n        gSecondary.attr(\"transform\", \"translate(\" + paddingLeft + \" 0)\");\n\n        // Draw dotted line between the shared node in the hierarchies\n        let secondaryGot = d3.select(\".g-hierarchy[data-primary=false] .svg-got-body-rect[data-gotCode=\\\"\" + this.getCode() + \"\\\"]\");\n        let secondaryGotBbox = { x: parseInt(secondaryGot.attr(\"x\")), y: parseInt(secondaryGot.attr(\"y\")) - 3, width: parseInt(secondaryGot.attr(\"width\")), height: parseInt(secondaryGot.attr(\"height\")) + 3 };\n        secondaryGotBbox.x = secondaryGotBbox.x + paddingLeft; // Apply transformation\n        d3.select(\".g-hierarchy-got-connector\").remove();\n        let gConnector = d3.select(\"#svg\").append(\"g\").classed(\"g-hierarchy-got-connector\", true);\n        gConnector.append(\"path\")\n            .classed(\"hierarchy-got-connector\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#555\")\n            .attr(\"stroke-opacity\", 0.4)\n            .attr(\"stroke-dasharray\", \"5,5\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\n                \"d\",\n                \"M\" + (myBbox.x + myBbox.width) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"H\" + (((secondaryGotBbox.x) - (myBbox.x + myBbox.width)) / 2 + myBbox.x + myBbox.width) +\n                \"V\" + (secondaryGotBbox.y + secondaryGotBbox.height / 2) +\n                \"H\" + secondaryGotBbox.x\n            );\n\n        // Draw arrow for dotted line\n        const arrowRectD = { height: 10, width: 7 };\n        let gArrow = gConnector.append(\"g\").classed(\"g-hierarchy-got-connector-arrow\", true);\n        gArrow.append(\"rect\")\n            .classed(\"hierarchy-got-connector-arrow-rect\", true)\n            .attr(\"x\", myBbox.x + myBbox.width - arrowRectD.width / 2)\n            .attr(\"y\", myBbox.y + myBbox.height / 2 - arrowRectD.height / 2)\n            .attr(\"width\", arrowRectD.width)\n            .attr(\"height\", arrowRectD.height)\n            .attr(\"fill\", RELATED_NODE_BANNER_COLOR);\n        gArrow.append(\"path\")\n            .classed(\"hierarchy-got-connector-arrow-path\", true)\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"white\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\",\n                \"M\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + ((arrowRectD.height * 2) / 3)) +\n                \"L\" + (myBbox.x + myBbox.width + arrowRectD.width / 2 - ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2) +\n                \"L\" + (myBbox.x + myBbox.width - arrowRectD.width / 2 + ((arrowRectD.width * 2) / 3)) + \",\" + (myBbox.y + myBbox.height / 2 - arrowRectD.height / 2 + arrowRectD.height / 3)\n            );\n\n        // Recalculate the viewbox (should probably be the last thing that happens)\n        this.hierarchyComponent.calculateSvgViewBox();\n    }\n\n    onClickInheritHierarchy(hierarchy: HierarchyType) {\n        this.hierarchyComponent.handleInheritHierarchy(this.svgHierarchyType.getCode(), hierarchy.code, this.getCode());\n    }\n\n    onClickUninheritHierarchy() {\n        this.hierarchyComponent.handleUninheritHierarchy(this.svgHierarchyType.getCode(), this.getCode());\n    }\n\n}\n","\nimport { Graph, Layout, Edge } from '@swimlane/ngx-graph';\nimport { DIMENSIONS } from \"./relationship-visualizer.component\";\nimport * as dagre from 'dagre';\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = 'LR',\n  RIGHT_TO_LEFT = 'RL',\n  TOP_TO_BOTTOM = 'TB',\n  BOTTOM_TO_TOM = 'BT'\n}\nexport enum Alignment {\n  CENTER = 'C',\n  UP_LEFT = 'UL',\n  UP_RIGHT = 'UR',\n  DOWN_LEFT = 'DL',\n  DOWN_RIGHT = 'DR'\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: 'greedy' | undefined;\n  ranker?: 'network-simplex' | 'tight-tree' | 'longest-path';\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport interface DagreNodesOnlySettings extends DagreSettings {\n  curveDistance?: number;\n}\n\nconst DEFAULT_EDGE_NAME = '\\x00';\nconst GRAPH_NODE = '\\x00';\nconst EDGE_KEY_DELIM = '\\x01';\n\nexport class DagreNodesOnlyLayout implements Layout {\n  defaultSettings: DagreNodesOnlySettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 0,\n    marginY: 0,\n    edgePadding: DIMENSIONS.PADDING.BETWEEN_NODES,\n    rankPadding: 100,\n    nodePadding: DIMENSIONS.PADDING.BETWEEN_NODES,\n    curveDistance: 0,\n    multigraph: false,\n    compound: true\n  };\n  settings: DagreNodesOnlySettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n  \n  public constructor() {\n    \n  }\n\n  public run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find(n => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y\n      };\n      node.dimension = {\n        width: dagreNode.width,\n        height: dagreNode.height\n      };\n    }\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  public updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find(n => n.id === edge.source);\n    const targetNode = graph.nodes.find(n => n.id === edge.target);\n    const rankAxis: 'x' | 'y' = this.settings.orientation === 'BT' || this.settings.orientation === 'TB' ? 'y' : 'x';\n    const orderAxis: 'x' | 'y' = rankAxis === 'y' ? 'x' : 'y';\n    const rankDimension = rankAxis === 'y' ? 'height' : 'width';\n    // determine new arrow position\n    const dir = sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]: sourceNode.position[rankAxis] - dir * (sourceNode.dimension[rankDimension] / 2)\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]: targetNode.position[rankAxis] + dir * (targetNode.dimension[rankDimension] / 2)\n    };\n\n    const curveDistance = this.settings.curveDistance || this.defaultSettings.curveDistance;\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [rankAxis]: sourceNode.position[rankAxis] + (targetNode.position[rankAxis] - sourceNode.position[rankAxis]) / 2,\n        [orderAxis]: startingPoint[orderAxis]\n      },\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: sourceNode.position[rankAxis] + (targetNode.position[rankAxis] - sourceNode.position[rankAxis]) / 2\n      },\n      endingPoint\n    ];\n    const edgeLabelId = `${edge.source}${EDGE_KEY_DELIM}${edge.target}${EDGE_KEY_DELIM}${DEFAULT_EDGE_NAME}`;\n    const matchingEdgeLabel = graph.edgeLabels[edgeLabelId];\n    if (matchingEdgeLabel) {\n      matchingEdgeLabel.points = edge.points;\n    }\n    return graph;\n  }\n\n  public createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({ compound: settings.compound, multigraph: settings.multigraph });\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map(n => {\n      const node: any = Object.assign({}, n);\n      node.width = n.dimension.width;\n      node.height = n.dimension.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map(l => {\n    let linkId: number = 1;\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = linkId;\n        linkId++;\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { TreeNode } from \"@circlon/angular-tree-component\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { ErrorHandler } from \"@shared/component\";\nimport { HierarchyType, HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\nimport { HierarchyService } from \"@registry/service\";\n\n\n@Component({\n    selector: \"add-child-to-hierarchy-modal\",\n    templateUrl: \"./add-child-to-hierarchy-modal.component.html\",\n    styleUrls: []\n})\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n    /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n    public hierarchyType: HierarchyType;\n    public nodes: HierarchyNode[];\n    public allGeoObjectTypes: GeoObjectType[];\n    public selectedGeoObjectType: GeoObjectType;\n    private toRoot: boolean = false;\n    selectUndefinedOptionValue: any;\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private hierarchyService: HierarchyService, public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n\n    onSelect(value: string): void {\n        this.allGeoObjectTypes.forEach(gObj => {\n            if (gObj.code === value) {\n                this.selectedGeoObjectType = gObj;\n            }\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy(this.hierarchyType.code, parent, this.selectedGeoObjectType.code).then(data => {\n            this.onNodeChange.next(data);\n            this.bsModalRef.hide();\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"heading text-center\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, Input, Output, EventEmitter } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig, ModalTypes } from \"@shared/model/modal\";\nimport { ErrorHandler, ConfirmModalComponent } from \"@shared/component\";\nimport { LocalizationService, ModalStepIndicatorService } from \"@shared/service\";\n\nimport { GeoObjectType, AttributeType, ManageGeoObjectTypeModalState } from \"@registry/model/registry\";\nimport { GeoObjectTypeModalStates } from \"@registry/model/constants\";\n\nimport { RegistryService } from \"@registry/service\";\n\n@Component({\n    selector: \"manage-attributes-modal\",\n    templateUrl: \"./manage-attributes-modal.component.html\",\n    styleUrls: [\"./manage-attributes-modal.css\"]\n})\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeType = null;\n\n    @Output() geoObjectTypeChange: EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    @Output() stateChange : EventEmitter<ManageGeoObjectTypeModalState> = new EventEmitter<ManageGeoObjectTypeModalState>();\n\n    message: string = null;\n    modalStepConfig: StepConfig = {\n        steps: [\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), active: true, enabled: false },\n            { label: this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), active: true, enabled: true }\n        ]\n    };\n\n    modalState: ManageGeoObjectTypeModalState = { state: GeoObjectTypeModalStates.manageAttributes, attribute: this.attribute, termOption: \"\" };\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful\n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService,\n        private modalStepIndicatorService: ModalStepIndicatorService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy() {\n        this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.defineAttribute, attribute: \"\", termOption: \"\" });\n    }\n\n    editAttribute(attr: AttributeType, e: any): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.editAttribute, attribute: attr, termOption: \"\" });\n    }\n\n    removeAttributeType(attr: AttributeType, e: any): void {\n        this.confirmBsModalRef = this.modalService.show(ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n        this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + \"[\" + attr.label.localizedValue + \"]\";\n        this.confirmBsModalRef.content.data = { attributeType: attr, geoObjectType: this.geoObjectType };\n        this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n        this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n        (<ConfirmModalComponent> this.confirmBsModalRef.content).onConfirm.subscribe(data => {\n            this.deleteAttributeType(data.geoObjectType.code, data.attributeType);\n        });\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: AttributeType): void {\n        this.registryService.deleteAttributeType(geoObjectTypeCode, attr.code).then(data => {\n            this.onDeleteAttribute.next(data);\n\n            if (data) {\n                this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n            this.geoObjectTypeChange.emit(this.geoObjectType);\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    close(): void {\n        this.stateChange.emit({ state: GeoObjectTypeModalStates.manageGeoObjectType, attribute: this.attribute, termOption: \"\" });\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            [title]=\"'modal.button.edit' | localize\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            [title]=\"'modal.button.remove' | localize\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { HierarchyOverTimeEntry, GeoObject, HierarchyOverTimeEntryParent, HierarchyOverTime, AttributeType, TimeRangeEntry } from \"@registry/model/registry\";\nimport { UpdateAttributeOverTimeAction, AbstractAction, ValueOverTimeDiff } from \"@registry/model/crtable\";\nimport { v4 as uuid } from \"uuid\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeType } from \"@registry/model/constants\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nexport class HierarchyCREditor extends ValueOverTimeCREditor {\n\n  hierarchyOverTime: HierarchyOverTime;\n\n  hierarchyEntry: HierarchyOverTimeEntry;\n\n  existRangeStale: boolean = false;\n\n  constructor(changeRequestAttributeEditor: ChangeRequestChangeOverTimeAttributeEditor, attr: AttributeType, action: AbstractAction, hierarchyEntry: HierarchyOverTimeEntry, hierarchyOverTime: HierarchyOverTime) {\n      super(changeRequestAttributeEditor, attr, action);\n      this.hierarchyEntry = hierarchyEntry;\n      this.hierarchyOverTime = hierarchyOverTime;\n\n      if (this.hierarchyEntry != null) {\n          this.hierarchyEntry.loading = {};\n      }\n  }\n\n  // @Override\n  getGeoObjectTimeRangeStorage(): TimeRangeEntry {\n      return this.hierarchyEntry;\n  }\n\n  // @Override\n  getValueFromGeoObjectForDiff(): any {\n      let immediateParent: GeoObject = this.hierarchyEntry == null ? null : this.hierarchyEntry.parents[this.hierarchyOverTime.types[this.hierarchyOverTime.types.length - 1].code].geoObject;\n      let goVal: string = immediateParent == null ? null : immediateParent.properties.type + \"_~VST~_\" + immediateParent.properties.code;\n      return goVal;\n  }\n\n  // @Override\n  onChange(type: ChangeType) {\n      if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n          this.existRangeStale = true;\n      }\n\n      super.onChange(type);\n  }\n\n  // @Override\n  validate(): boolean {\n      super.validate();\n\n      if (this._isValid && this.hierarchyEntry != null) {\n          let invalidParent = this.changeRequestAttributeEditor.changeRequestEditor.dateService.invalidParent;\n          let parentDoesNotExist = this.changeRequestAttributeEditor.changeRequestEditor.dateService.parentDoesNotExist;\n          let service = this.changeRequestAttributeEditor.changeRequestEditor.registryService;\n\n          let len = this.hierarchyOverTime.types.length;\n          for (let i = len - 1; i >= 0; --i) {\n              let type = this.hierarchyOverTime.types[i];\n\n              if (Object.prototype.hasOwnProperty.call(this.hierarchyEntry.parents, type.code) && this.hierarchyEntry.parents[type.code].geoObject) {\n                  let goParent = this.hierarchyEntry.parents[type.code].geoObject;\n\n                  if (!this.existRangeStale) {\n                      if (goParent.properties.invalid) {\n                          this._isValid = false;\n                          this.conflictMessages.add(invalidParent);\n                      }\n                      if (!goParent.properties.exists) {\n                          this._isValid = false;\n                          this.conflictMessages.add(parentDoesNotExist);\n                      }\n                  } else {\n                      service.doesGeoObjectExistAtRange(this.startDate, this.endDate, type.code, goParent.properties.code).then(stats => {\n                          goParent.properties.invalid = stats.invalid;\n                          goParent.properties.exists = stats.exists;\n\n                          this.conflictMessages.delete(invalidParent);\n                          this.conflictMessages.delete(parentDoesNotExist);\n\n                          if (goParent.properties.invalid) {\n                              this._isValid = false;\n                              this.conflictMessages.add(invalidParent);\n                          }\n                          if (!goParent.properties.exists) {\n                              this._isValid = false;\n                              this.conflictMessages.add(parentDoesNotExist);\n                          }\n                      }).catch((err: HttpErrorResponse) => {\n                      // eslint-disable-next-line no-console\n                          console.log(err);\n                      });\n                  }\n              }\n          }\n\n          this.existRangeStale = false;\n      }\n\n      return this._isValid;\n  }\n\n  // @Override\n  validateUpdateReference() {\n      // We could potentially try to check for this, but it won't be easy. So for now we're doing nothing.\n  }\n\n  setParentValue(type: {code: string, label: string}, parents: { [k: string]: HierarchyOverTimeEntryParent }) {\n      if (this.diff != null && this.diff.action === \"DELETE\") {\n          return; // There are various view components (like the date widgets) which will invoke this method\n      }\n\n      let directParent: GeoObject = null;\n      if (type != null) {\n          directParent = parents[type.code].geoObject;\n      }\n\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff == null) {\n              if (this.hierarchyEntry == null) {\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.oid = uuid();\n                  this.diff.action = \"CREATE\";\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              } else {\n                  // let currentDirectParent: GeoObject = this.hierarchyEntry.parents[type.code].geoObject;\n                  let currentDirectParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n                  let oldValue: string = currentDirectParent == null ? null : currentDirectParent.properties.type + \"_~VST~_\" + currentDirectParent.properties.code;\n\n                  if (\n                      (currentDirectParent == null && directParent == null) ||\n                      ((currentDirectParent != null && directParent != null) &&\n                      currentDirectParent.properties.code === directParent.properties.code)) {\n                      return;\n                  }\n\n                  this.diff = new ValueOverTimeDiff();\n                  this.diff.action = \"UPDATE\";\n                  this.diff.oid = this.hierarchyEntry.oid;\n                  this.diff.oldValue = oldValue;\n                  this.diff.oldParents = JSON.parse(JSON.stringify(this.hierarchyEntry.parents));\n                  this.diff.oldStartDate = this.hierarchyEntry.startDate;\n                  this.diff.oldEndDate = this.hierarchyEntry.endDate;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n                  (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              }\n          }\n\n          let newValueStrConcat: string = null;\n          if (directParent != null) {\n              newValueStrConcat = directParent.properties.type + \"_~VST~_\" + directParent.properties.code;\n          }\n\n          if (newValueStrConcat === this.diff.oldValue) {\n              delete this.diff.newValue;\n          } else {\n              this.diff.newValue = newValueStrConcat;\n          }\n\n          this.diff.parents = parents;\n\n          // If no changes have been made then remove the diff\n          this.removeEmptyDiff();\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          this.hierarchyEntry.parents = parents;\n      }\n\n      this.onChange(ChangeType.VALUE);\n  }\n\n  public getLowestLevelFromHierarchyEntry(parents: any): {geoObject: GeoObject, text: string} {\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let type = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(parents, type.code) && parents[type.code].geoObject) {\n              return parents[type.code];\n          }\n      }\n\n      return null;\n  }\n\n  set value(val: any) {\n      throw new Error(\"Invoke setParentValue instead\");\n  }\n\n  get value() {\n      if (this.diff != null && this.diff.parents !== undefined) {\n          return this.diff;\n      } else if (this.hierarchyEntry != null) {\n          return this.hierarchyEntry;\n      }\n\n      return null;\n  }\n\n  public removeType(type): void {\n      // this.value.parents[type.code] = { text: \"\", geoObject: null };\n\n      let newParents = JSON.parse(JSON.stringify(this.value.parents));\n      newParents[type.code] = { text: \"\", geoObject: null };\n\n      // Set the value to be the next existing ancestor.\n      let entry = this.value;\n      let len = this.hierarchyOverTime.types.length;\n      for (let i = len - 1; i >= 0; --i) {\n          let parentType = this.hierarchyOverTime.types[i];\n\n          if (Object.prototype.hasOwnProperty.call(entry.parents, parentType.code) && entry.parents[parentType.code].geoObject) {\n              this.setParentValue(parentType, newParents);\n              return;\n          }\n      }\n\n      // If we do not have a next existing ancestor, then we must set the value to null.\n      this.setParentValue(null, newParents);\n  }\n\n  createEmptyHierarchyEntry(): HierarchyOverTimeEntry {\n      let hierarchyEntry = new HierarchyOverTimeEntry();\n      hierarchyEntry.loading = {};\n      hierarchyEntry.oid = uuid();\n\n      hierarchyEntry.parents = {};\n\n      if (this.hierarchyOverTime) {\n          for (let i = 0; i < this.hierarchyOverTime.types.length; i++) {\n              let current = this.hierarchyOverTime.types[i];\n\n              hierarchyEntry.parents[current.code] = { text: \"\", geoObject: null };\n\n              hierarchyEntry.loading = {};\n          }\n      }\n\n      return hierarchyEntry;\n  }\n\n  public remove(): void {\n      if (this.action.actionType === \"UpdateAttributeAction\") {\n          if (this.diff != null && this.diff.action === \"CREATE\") {\n              // Its a new entry, just remove the diff from the diff array\n              let updateAction: UpdateAttributeOverTimeAction = this.action as UpdateAttributeOverTimeAction;\n\n              const index = updateAction.attributeDiff.valuesOverTime.findIndex(vot => vot.oid === this.diff.oid);\n\n              if (index > -1) {\n                  updateAction.attributeDiff.valuesOverTime.splice(index, 1);\n              }\n          } else if (this.diff != null) {\n              delete this.diff.newValue;\n              delete this.diff.newStartDate;\n              delete this.diff.newEndDate;\n              this.removeEmptyDiff();\n              this.onChange(ChangeType.REMOVE);\n              return;\n          } else if (this.hierarchyEntry != null && this.diff == null) {\n              let currentImmediateParent: GeoObject = this.getLowestLevelFromHierarchyEntry(this.hierarchyEntry.parents).geoObject;\n              let oldValue: string = currentImmediateParent == null ? null : currentImmediateParent.properties.type + \"_~VST~_\" + currentImmediateParent.properties.code;\n\n              this.diff = new ValueOverTimeDiff();\n              this.diff.action = \"DELETE\";\n              this.diff.oid = this.hierarchyEntry.oid;\n              this.diff.oldValue = oldValue;\n              this.diff.oldStartDate = this.hierarchyEntry.startDate;\n              this.diff.oldEndDate = this.hierarchyEntry.endDate;\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.valuesOverTime.push(this.diff);\n              (this.action as UpdateAttributeOverTimeAction).attributeDiff.hierarchyCode = this.hierarchyOverTime.code;\n          }\n      } else if (this.action.actionType === \"CreateGeoObjectAction\") {\n          let index = this.hierarchyOverTime.entries.findIndex(vot => vot.oid === this.hierarchyEntry.oid);\n\n          if (index !== -1) {\n              this.hierarchyOverTime.entries.splice(index, 1);\n          }\n      }\n\n      this.onChange(ChangeType.REMOVE);\n  }\n\n}\n","\nimport { ChangeRequest, AbstractAction, UpdateAttributeAction } from \"@registry/model/crtable\";\nimport { AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ActionTypes } from \"@registry/model/constants\";\n\nexport class StandardAttributeCRModel {\n\n    changeRequest: ChangeRequest;\n\n    diff: { oldValue?: any, newValue?: any };\n\n    attribute: AttributeType;\n\n    geoObject: GeoObjectOverTime;\n\n    editAction: AbstractAction;\n\n    code: string;\n\n    private _isValid: boolean = true;\n\n    constructor(attr: AttributeType, geoObject: GeoObjectOverTime, cr: ChangeRequest) {\n        this.attribute = attr;\n        this.geoObject = geoObject;\n        this.changeRequest = cr;\n        this.initialize();\n    }\n\n    initialize(): void {\n        let actions = this.changeRequest.actions;\n\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            if (actions.length > 0 && actions[0].actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n                this.editAction = actions[0];\n            }\n        } else {\n            actions.forEach((action: AbstractAction) => {\n                if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                    let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                    if (this.attribute.code === updateAttrAction.attributeName) {\n                        this.editAction = action;\n                    }\n                }\n            });\n\n            if (this.editAction == null) {\n                this.editAction = new UpdateAttributeAction(this.attribute.code);\n            }\n        }\n\n        let len = this.changeRequest.actions.length;\n        for (let i = 0; i < len; ++i) {\n            let action: AbstractAction = actions[i];\n\n            if (action.actionType === ActionTypes.UPDATEATTRIBUTETACTION) {\n                let updateAttrAction: UpdateAttributeAction = action as UpdateAttributeAction;\n\n                if (this.attribute.code === updateAttrAction.attributeName) {\n                    this.diff = updateAttrAction.attributeDiff;\n                }\n            } else if (action.actionType === ActionTypes.CREATEGEOOBJECTACTION) {\n              // Nothing to do here. Create actions don't have diffs.\n            } else {\n                console.log(\"Unexpected action : \" + action.actionType, action);\n            }\n        }\n    }\n\n    public hasChanges(): boolean {\n        return this.diff != null;\n    }\n\n    isValid(): boolean {\n        return this._isValid;\n    }\n\n    validate(): boolean {\n        return this._isValid;\n    }\n\n    set value(val: any) {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            this.geoObject.attributes[this.attribute.code] = val;\n        } else {\n            if (this.diff != null) {\n                if (this.areValuesEqual(this.diff.oldValue, val)) {\n                    delete (this.editAction as UpdateAttributeAction).attributeDiff;\n                    this.diff = null;\n\n                    let index = this.changeRequest.actions.findIndex(findAction => findAction === this.editAction);\n                    if (index !== -1) {\n                        this.changeRequest.actions.splice(index, 1);\n                    }\n                } else {\n                    this.diff.newValue = val;\n                }\n            } else {\n                this.diff = { oldValue: this.geoObject.attributes[this.attribute.code], newValue: val };\n\n                (this.editAction as UpdateAttributeAction).attributeDiff = this.diff;\n                this.changeRequest.actions.push(this.editAction);\n            }\n        }\n    }\n\n    get value(): any {\n        if (this.changeRequest.type === \"CreateGeoObject\") {\n            return this.geoObject.attributes[this.attribute.code];\n        } else {\n            if (this.diff != null) {\n                return this.diff.newValue;\n            } else {\n                return this.geoObject.attributes[this.attribute.code];\n            }\n        }\n    }\n\n    areValuesEqual(val1: any, val2: any): boolean {\n        if (this.attribute.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        return val1 === val2;\n    }\n\n}\n","\nimport { ManageVersionsComponent } from \"./manage-versions.component\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { LayerColor } from \"@registry/model/constants\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { AttributeTermType, Term } from \"@registry/model/registry\";\n\nexport class Layer {\n\n    oid: string;\n    isEditing: boolean;\n    isRendering: boolean;\n    color: LayerColor;\n    zindex: number;\n    geojson: any;\n    editPropagator: ValueOverTimeCREditor;\n\n}\n\n/*\n * This class exists purely for the purpose of storing what data to be rendered to the front-end. Any storage or submission of this data to the back-end must be translated\n * using the editor.\n */\nexport class VersionDiffView {\n\n    component: ManageVersionsComponent;\n    summaryKeyData: SummaryKey;\n    summaryKeyLocalized: string; // If we try to localize this in the html with a localize element then it won't update as frequently as we need so we're doing stuff manually here.\n    newLayer: Layer = null;\n    oldLayer: Layer = null;\n    coordinate?: any;\n    newCoordinateX?: any;\n    newCoordinateY?: any;\n    editor: ValueOverTimeCREditor;\n\n    // We must track our own value, so that they can be diffed when setting.\n    _value: any;\n\n    constructor(component: ManageVersionsComponent, editor: ValueOverTimeCREditor) {\n        this.component = component;\n        this.editor = editor;\n\n        this.populate(editor);\n        this.editor.onChangeSubject.subscribe(() => {\n            this.populate(this.editor);\n        });\n    }\n\n    populate(editor: ValueOverTimeCREditor) {\n        if (this.component.attributeType.type === \"local\" && this._value != null && this.editor.value != null) {\n            // The front-end glitches out if we swap to a new object. We have to update the existing object to be the same\n            LocalizedValue.populate(this._value, this.editor.value);\n        } else if (this.component.attributeType.code === \"_PARENT_\" && this._value != null && this.editor.value != null && this.editor.value.parents != null) {\n            for (let i = 0; i < this.component.hierarchy.types.length; i++) {\n                let current = this.component.hierarchy.types[i];\n\n                this._value.parents[current.code].text = this.editor.value.parents[current.code].text;\n                this._value.parents[current.code].geoObject = this.editor.value.parents[current.code].geoObject;\n            }\n        } else if (this.component.attributeType.code === \"_PARENT_\") {\n            this._value = JSON.parse(JSON.stringify(this.editor.value));\n        } else {\n            this._value = this.convertValueForDisplay(this.editor.value == null ? null : JSON.parse(JSON.stringify(this.editor.value)));\n        }\n\n        if (this.component.attributeType.code === \"_PARENT_\") {\n            this._value.loading = {};\n        }\n\n        this.calculateSummaryKey();\n    }\n\n    set oid(oid: string) {\n        this.editor.oid = oid;\n    }\n\n    get oid(): string {\n        return this.editor.oid;\n    }\n\n    get startDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return this.editor.oldStartDate;\n        }\n\n        return this.editor.startDate;\n    }\n\n    set startDate(startDate: string) {\n        this.editor.startDate = startDate;\n        this.calculateSummaryKey();\n    }\n\n    set oldStartDate(oldStartDate: string) {\n        this.editor.oldStartDate = oldStartDate;\n    }\n\n    get oldStartDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newStartDate != null && this.editor.oldStartDate !== undefined) {\n            return this.convertDateForDisplay(this.editor.oldStartDate);\n        }\n\n        return null;\n    }\n\n    get endDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return this.editor.oldEndDate;\n        }\n\n        return this.editor.endDate;\n    }\n\n    set endDate(endDate: string) {\n        this.editor.endDate = endDate;\n        this.calculateSummaryKey();\n    }\n\n    set oldEndDate(oldEndDate: string) {\n        this.editor.oldEndDate = oldEndDate;\n    }\n\n    get oldEndDate(): string {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newEndDate != null && this.editor.oldEndDate !== undefined) {\n            return this.convertDateForDisplay(this.editor.oldEndDate);\n        }\n\n        return null;\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.editor.value = value;\n    }\n\n    set oldValue(oldValue: any) {\n        this.editor.oldValue = oldValue;\n    }\n\n    get oldValue(): any {\n        if (this.editor.diff != null && this.editor.diff.action === \"DELETE\") {\n            return null;\n        }\n\n        if (this.editor.diff != null && this.editor.diff.newValue != null && this.editor.oldValue !== undefined) {\n            return this.convertOldValueForDisplay(this.editor.oldValue);\n        }\n\n        return null;\n    }\n\n    convertDateForDisplay(date: string): string {\n        return (date == null || date.length === 0) ? null : this.component.dateService.formatDateForDisplay(date);\n    }\n\n    convertOldValueForDisplay(val: any): any {\n        if (this.component.attributeType.type === \"date\") {\n            return this.component.dateService.formatDateForDisplay(new Date(val));\n        } else if (this.component.attributeType.code === \"_PARENT_\" && val.includes(\"_~VST~_\")) {\n            let split = val.split(\"_~VST~_\");\n            // let parentTypeCode = split[0];\n            let parentCode = split[1];\n\n            return parentCode;\n        } else if (this.component.attributeType.type === \"term\") {\n            let code = val;\n            if (code instanceof Array) {\n                code = val[0];\n            }\n\n            let attrOpts = (this.component.attributeType as AttributeTermType).rootTerm.children;\n\n            let index = attrOpts.findIndex((term: Term) => term.code === code);\n\n            if (index !== -1) {\n                return attrOpts[index].label.localizedValue;\n            } else {\n                return val;\n            }\n        } else if (this.component.attributeType.type === \"classification\") {\n            return val.label.localizedValue;\n        }\n\n        return val;\n    }\n\n    convertValueForDisplay(val: any): any {\n        if (val == null) {\n            return null;\n        }\n\n        return val;\n    }\n\n    calculateSummaryKey() {\n        if (this.editor.diff == null) {\n            this.summaryKey = SummaryKey.UNMODIFIED;\n            return;\n        }\n\n        if (this.editor.diff.action === \"CREATE\") {\n            this.summaryKey = SummaryKey.NEW;\n            return;\n        } else if (this.editor.diff.action === \"DELETE\") {\n            this.summaryKey = SummaryKey.DELETE;\n            return;\n        }\n\n        let hasTime = this.editor.diff.newStartDate != null || this.editor.diff.newEndDate != null;\n        let hasValue = Object.prototype.hasOwnProperty.call(this.editor.diff, \"newValue\");\n\n        if (hasTime && hasValue) {\n            this.summaryKey = SummaryKey.UPDATE;\n        } else if (hasTime) {\n            this.summaryKey = SummaryKey.TIME_CHANGE;\n        } else if (hasValue) {\n            this.summaryKey = SummaryKey.VALUE_CHANGE;\n        } else {\n            this.summaryKey = SummaryKey.UNMODIFIED;\n        }\n    }\n\n    set summaryKey(newKey: SummaryKey) {\n        this.summaryKeyData = newKey;\n        this.localizeSummaryKey();\n    }\n\n    get summaryKey(): SummaryKey {\n        return this.summaryKeyData;\n    }\n\n    private localizeSummaryKey(): void {\n        this.summaryKeyLocalized = this.component.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + this.summaryKeyData);\n    }\n\n    private conflictMessagesHasSeverity(severity: string) {\n        let has = false;\n\n        this.editor.conflictMessages.forEach(msg => {\n            if (msg.severity === severity) {\n                has = true;\n            }\n        });\n\n        return has;\n    }\n\n    hasError(): boolean {\n        return this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"ERROR\");\n    }\n\n    hasWarning(): boolean {\n        return !this.hasError() && this.editor.conflictMessages && this.editor.conflictMessages.size > 0 && this.conflictMessagesHasSeverity(\"WARNING\");\n    }\n\n    destroy(component: ManageVersionsComponent): void {\n        if (this.oldLayer != null) {\n            component.geomService.setRendering(false, this.oldLayer);\n        }\n\n        if (this.newLayer != null) {\n            component.geomService.setRendering(false, this.newLayer);\n        }\n    }\n\n}\n","import { Input, Component, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { GeoObjectOverTime, GeoObjectType } from \"@registry/model/registry\";\nimport { AbstractAction } from \"@registry/model/crtable\";\n\nimport { RegistryService, ChangeRequestService } from \"@registry/service\";\n\nimport { AuthService } from \"@shared/service\";\n\nimport { ErrorHandler } from \"@shared/component\";\n\nimport { ActionDetailComponent } from \"../action-detail-modal.component\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\ndeclare var $: any;\n\n@Component({\n\n    selector: \"crtable-detail-create-geo-object\",\n    templateUrl: \"./detail.component.html\",\n    styleUrls: [\"./crtable-detail-create-geo-object.css\"],\n    encapsulation: ViewEncapsulation.None\n})\n// export class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\nexport class CreateUpdateGeoObjectDetailComponent implements ActionDetailComponent {\n\n    isMaintainer: boolean = false;\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    @Input() readOnly: boolean;\n\n    isEditing: boolean = false;\n\n    @ViewChild(\"attributeEditor\") attributeEditor;\n\n    @ViewChild(\"geometryEditor\") geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n    constructor(private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService,\n        private authService: AuthService) {\n\n        this.isMaintainer = authService.isAdmin() || authService.isMaintainer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if (this.isNew()) {\n\n            this.preGeoObject = this.postGeoObject;\n\n        }\n\n        this.onSelect(this.action);\n\n    }\n\n    isNew(): boolean {\n\n        return (this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\");\n\n    }\n\n    handleDateChange(): void {\n\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n    }\n\n    applyAction() {\n\n        // var action = JSON.parse( JSON.stringify( this.action ) );\n        let action = this.action;\n\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if (this.geometryEditor != null) {\n\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n\n        }\n\n        /*\n        this.changeRequestService.applyAction(action).then(response => {\n\n            this.endEdit();\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n        */\n\n    }\n\n    onSelect(action: AbstractAction) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n\n            this.registryService.getGeoObjectOverTime(this.postGeoObject.attributes.code, this.geoObjectType.code).then(geoObject => {\n\n                this.preGeoObject = geoObject;\n\n            }).catch((err: HttpErrorResponse) => {\n\n                this.error(err);\n\n            });\n\n        }\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    // @HostListener( 'window:beforeunload' )\n    // canDeactivate(): Observable<boolean> | boolean {\n    //    if ( this.isEditing ) {\n    //        //event.preventDefault();\n    //        //event.returnValue = 'Are you sure?';\n    //        //return 'Are you sure?';\n//\n     //       return false;\n     //   }\n//\n    //    return true;\n    // }\n\n    // afterDeactivate( isDeactivating: boolean ) {\n    //    if ( isDeactivating && this.isEditing ) {\n    //        this.unlockActionSync();\n    //    }\n    // }\n\n    startEdit(): void {\n\n        //this.lockAction();\n\n    }\n\n    public endEdit(): void {\n\n        //this.unlockAction();\n\n    }\n/*\n    lockAction() {\n\n        this.changeRequestService.lockAction(this.action.oid).then(response => {\n\n            this.isEditing = true;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(true);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    unlockAction() {\n\n        this.changeRequestService.unlockAction(this.action.oid).then(response => {\n\n            this.isEditing = false;\n            if (this.geometryEditor != null) {\n\n                this.geometryEditor.enableEditing(false);\n\n            }\n\n        }).catch((err: HttpErrorResponse) => {\n\n            this.error(err);\n\n        });\n\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n\n        $.ajax({\n            url: registry.contextPath + \"/changerequest/unlockAction\",\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function(a) {\n\n            },\n            async: false\n        });\n\n    }\n*/\n    getUsername(): string {\n\n        return this.authService.getUsername();\n\n    }\n\n    public error(err: HttpErrorResponse): void {\n\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading text-center\">\n        <h1 class=\"action-detail-header\">{{action.actionLabel}}</h1>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <h4>\n        <localize key=\"io.geoObjectType\"></localize>: {{action.geoObjectType.code}}\n      </h4>\n    \n      <div style=\"margin: 20px 0;\">\n        <span style=\"margin-right:10px;\"><localize key=\"changeOverTime.forDate\"></localize></span>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n\n<!--         <geoobject-shared-attribute-editor  -->\n<!--           #attributeEditor -->\n<!--           *ngIf=\"preGeoObject\" -->\n<!--           [readOnly]=\"!isEditing\"   -->\n<!--           [geoObjectType]=\"geoObjectType\" -->\n<!--           [postGeoObject]=\"postGeoObject\" -->\n<!--           [preGeoObject]=\"preGeoObject\" -->\n<!--           [forDate]=\"forDate\" -->\n<!--           [isGeometryInlined]=\"true\"> -->\n<!--         </geoobject-shared-attribute-editor> -->\n        \n        <geoobject-shared-attribute-editor \n            #attributeEditor\n            *ngIf=\"action\"\n            [readOnly]=\"readOnly\"  \n            [geoObjectType]=\"geoObjectType\"\n            [geoObjectData]=\"{'geoObject':postGeoObject, 'actions': [action]}\"\n            [forDate]=\"forDate\"\n            [readOnly]=\"false\"\n            [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\" [disabled]=\"!isEditing\"></textarea>\n        </div>\n\n        <div class=\"button-holder text-right\" style=\"margin:40px 0 20px 0;\">\n          <button *ngIf=\"!readOnly && !isEditing\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly && isEditing\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, Input } from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n    state\n} from \"@angular/animations\";\n\nimport { TimeRangeEntry } from \"@registry/model/registry\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport { ChangeRequestChangeOverTimeAttributeEditor } from \"./change-request-change-over-time-attribute-editor\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./geoobject-shared-attribute-editor.component\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ValueOverTimeCREditor } from \"./ValueOverTimeCREditor\";\nimport { ChangeType } from \"@registry/model/constants\";\n\nexport interface DateBoundary { date: string; isStart: boolean; isEnd: boolean }\n\nexport interface TimelineEntry { width: number, x: number, period: TimeRangeEntry }\n\nexport interface DataTimeSpan {startDay: number, startDate: string, displayStartDate: string, endDay: number, endDate: string, displayEndDate: string, span: number}\n\n/*\n * This component is shared between:\n * -\n *\n * Be wary of changing this component for one usecase and breaking other usecases!\n */\n@Component({\n    selector: \"stability-period\",\n    templateUrl: \"./stability-period.component.html\",\n    styleUrls: [\"./stability-period.component.css\"],\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\":enter\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"1000ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"1000ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class StabilityPeriodComponent implements OnInit {\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    @Input() sharedAttributeEditor: GeoObjectSharedAttributeEditorComponent;\n\n    @Input() filterDate: string;\n\n    @Input() forDate: string;\n\n    @Input() context: string;\n\n    @Input() latestPeriodIsActive: boolean = false;\n\n    periods: TimeRangeEntry[] = [];\n\n    timelines: [TimelineEntry[]];\n\n    activeEntry: TimelineEntry = null;\n\n    forDateEntry: TimelineEntry = null;\n\n    private infinityDayPadding: number = 15;\n\n    dataTimeSpan: DataTimeSpan = null;\n\n    _showHint: boolean = false;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set showHint(val: boolean) {\n        this._showHint = val;\n\n        setTimeout(() => {\n            this.showHint = false;\n        }, 10000);\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public dateService: DateService) {}\n\n    ngOnInit(): void {\n        this.generate();\n\n        this.changeRequestEditor.onChangeSubject.subscribe((type: ChangeType) => {\n            if (type === ChangeType.END_DATE || type === ChangeType.START_DATE) {\n                this.generate();\n            }\n        });\n\n        let timeline = this.timelines[0];\n        if (timeline && timeline.length > 1) {\n            if (this.filterDate != null) {\n                let index = timeline.findIndex(entry => this.dateService.between(this.filterDate, entry.period.startDate, entry.period.endDate));\n\n                if (index !== -1) {\n                    this.activeEntry = timeline[index];\n                }\n            } else if (this.latestPeriodIsActive) {\n                this.setActiveTimelineEntry(timeline[timeline.length - 1]);\n            }\n\n            if (this.forDate != null) {\n                let forDateIndex = timeline.findIndex(entry => this.dateService.between(this.forDate, entry.period.startDate, entry.period.endDate));\n\n                if (forDateIndex !== -1) {\n                    this.forDateEntry = timeline[forDateIndex];\n                }\n            }\n        }\n    }\n\n    navigateRelative(amount: number) {\n        let timeline: TimelineEntry[] = this.timelines[0];\n        if (timeline == null || timeline.length === 0) { return; }\n\n        if (this.activeEntry == null) {\n            this.setActiveTimelineEntry(timeline[0]);\n            return;\n        }\n\n        let index = timeline.findIndex(entry => entry.period.startDate === this.activeEntry.period.startDate);\n\n        if (index !== -1) {\n            let nextIndex = index + amount;\n\n            if (nextIndex < 0) {\n                nextIndex = timeline.length - 1;\n            } else if (nextIndex >= timeline.length) {\n                nextIndex = 0;\n            }\n\n            this.setActiveTimelineEntry(timeline[nextIndex]);\n        }\n    }\n\n    setActiveTimelineEntry(entry: TimelineEntry, refresh: boolean = true) {\n        if (this.periods.length <= 1) {\n            entry = null;\n        }\n\n        if (this.activeEntry && entry && entry.period.startDate === this.activeEntry.period.startDate) {\n            entry = null;\n        }\n\n        this.activeEntry = entry;\n        this.sharedAttributeEditor.setFilterDate(entry == null ? null : entry.period.startDate, refresh);\n    }\n\n    generate() {\n        this.generatePeriods();\n        this.generateTimelines();\n    }\n\n    calculateDataTimeSpan(): void {\n        let startDate: string = null;\n        let endDate: string = null;\n        let endDay: number = null;\n        let startDay: number = null;\n\n        if (this.periods.length > 0) {\n            startDate = this.periods[0].startDate;\n            endDate = this.periods[this.periods.length - 1].endDate;\n\n            startDay = this.dateService.getDateFromDateString(startDate).getTime() / (1000 * 60 * 60 * 24);\n\n            if (endDate === \"5000-12-31\") {\n                if (this.periods.length > 1) {\n                    endDay = this.dateService.getDateFromDateString(this.periods[this.periods.length - 1].startDate).getTime() / (1000 * 60 * 60 * 24);\n                    this.infinityDayPadding = (endDay - startDay) * 0.05;\n                    endDay = this.infinityDayPadding + endDay;\n                } else {\n                    endDay = startDay + this.infinityDayPadding;\n                }\n            } else {\n                endDay = this.dateService.getDateFromDateString(endDate).getTime() / (1000 * 60 * 60 * 24);\n            }\n        }\n\n        this.dataTimeSpan = { startDay: startDay, startDate: startDate, displayStartDate: this.dateService.formatDateForDisplay(startDate), endDay: endDay, endDate: endDate, displayEndDate: this.dateService.formatDateForDisplay(endDate), span: (endDay - startDay) };\n    }\n\n    generateTimelines() {\n        this.timelines = [] as any;\n\n        if (this.periods.length === 0) {\n            return;\n        } else if (this.periods.length === 1) {\n            this.setActiveTimelineEntry(null, false);\n        }\n\n        this.calculateDataTimeSpan();\n\n        let currentTimeline: any = [];\n        this.timelines.push(currentTimeline);\n        let daysLeft = this.dataTimeSpan.span;\n\n        let len = this.periods.length;\n        for (let i = 0; i < len; ++i) {\n            let period = this.periods[i];\n\n            let start: Date = this.dateService.getDateFromDateString(period.startDate);\n            let end: Date = this.dateService.getDateFromDateString(period.endDate);\n\n            let startDay = start.getTime() / (1000 * 60 * 60 * 24);\n            let endDay = end.getTime() / (1000 * 60 * 60 * 24);\n            if (period.endDate === \"5000-12-31\") {\n                endDay = startDay + this.infinityDayPadding;\n            }\n\n            let daysInPeriod: number = (endDay - startDay);\n            if (daysLeft - daysInPeriod < 0) {\n                let daysInFirstEntry = daysLeft;\n                let timelineEntry1: TimelineEntry = { width: (daysInFirstEntry / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry1);\n\n                currentTimeline = [];\n                this.timelines.push(currentTimeline);\n                daysLeft = this.dataTimeSpan.span;\n\n                let timelineEntry2: TimelineEntry = { width: ((daysInPeriod - daysInFirstEntry) / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry2);\n            } else {\n                let timelineEntry: TimelineEntry = { width: (daysInPeriod / this.dataTimeSpan.span) * 100, x: ((startDay - this.dataTimeSpan.startDay) / this.dataTimeSpan.span) * 100, period: period };\n                currentTimeline.push(timelineEntry);\n                daysLeft = daysLeft - daysInPeriod;\n\n                if (daysLeft === 0) {\n                    currentTimeline = [];\n                    this.timelines.push(currentTimeline);\n                    daysLeft = this.dataTimeSpan.span;\n                }\n            }\n        }\n\n        // console.log(this.timelines);\n    }\n\n    generatePeriods() {\n        let boundaries: DateBoundary[] = [];\n\n        // Create an array which contains all the unique start and end dates\n        let editors: (ChangeRequestChangeOverTimeAttributeEditor | StandardAttributeCRModel)[] = this.changeRequestEditor.getEditors();\n        let len = editors.length;\n\n        for (let i = 0; i < len; ++i) {\n            if (editors[i] instanceof ChangeRequestChangeOverTimeAttributeEditor) {\n                let editor: ChangeRequestChangeOverTimeAttributeEditor = editors[i] as ChangeRequestChangeOverTimeAttributeEditor;\n                let values = editor.getEditors();\n\n                let valLen = values.length;\n                for (let j = 0; j < valLen; ++j) {\n                    let period: ValueOverTimeCREditor = values[j];\n\n                    if (period.startDate != null && period.endDate != null && !period.isDelete()) {\n                        let startIndex = boundaries.findIndex(boundary => period.startDate === boundary.date);\n                        if (startIndex !== -1) {\n                            boundaries[startIndex].isStart = true;\n                        } else {\n                            boundaries.push({ date: period.startDate, isStart: true, isEnd: false });\n                        }\n\n                        let endIndex = boundaries.findIndex(boundary => period.endDate === boundary.date);\n                        if (endIndex !== -1) {\n                            boundaries[endIndex].isEnd = true;\n                        } else {\n                            boundaries.push({ date: period.endDate, isStart: false, isEnd: true });\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sort the date boundaries\n        boundaries.sort(function(a, b) {\n            if (a.date == null || a.date === \"\") {\n                return 1;\n            } else if (b.date == null || b.date === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.date);\n            let next: any = new Date(b.date);\n            return first - next;\n        });\n\n        // Loop over the boundaries and create versions between all the boundaries, but only if there is data between them\n        this.periods = [];\n        let dlen = boundaries.length;\n        for (let i = 0; i < dlen; ++i) {\n            let current: DateBoundary = boundaries[i];\n            let next: DateBoundary = i + 1 > dlen ? null : boundaries[i + 1];\n\n            if (current.isStart && current.isEnd) {\n                this.periods.push({ startDate: current.date, endDate: current.date });\n            }\n            if (current.isEnd && (next != null && next.isStart && this.dateService.addDay(1, current.date) === next.date)) {\n                continue;\n            }\n\n            let startDate = (current.isEnd ? this.dateService.addDay(1, current.date) : current.date);\n\n            if (next != null && this.changeRequestEditor.existsAtDate(startDate)) {\n                let endDate = (!next.isStart ? next.date : this.dateService.addDay(-1, next.date));\n\n                this.periods.push({ startDate: startDate, endDate: endDate });\n            }\n        }\n\n        this.dateService.sort(this.periods);\n    }\n\n    formatDate(date: string): string {\n        return this.dateService.formatDateForDisplay(date);\n    }\n\n}\n","<div *ngIf=\"dataTimeSpan\" style=\"margin-bottom:10px;\">\n    <span style=\"margin-left:20px;\">\n      <localize key=\"manage.versions.historyTitle\"></localize>\n      \n      <span>\n        <a *ngIf=\"activeEntry\" (click)=\"setActiveTimelineEntry(null)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewAll\"></localize>)</a>\n        <div [@fadeInOut] *ngIf=\"_showHint\" id=\"time-hint\">\n            <localize key=\"changeovertime.manageVersions.time.hint.message\"></localize>\n        </div>\n        \n        <a *ngIf=\"!activeEntry && forDate && context === 'LIST'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewListPeriod\"></localize>)</a>\n        <a *ngIf=\"!activeEntry && forDate && context === 'EXPLORER'\" (click)=\"setActiveTimelineEntry(forDateEntry)\" class=\"view-all\">(<localize key=\"manage.versions.history.viewExplorerPeriod\"></localize>)</a>\n        <span *ngIf=\"!activeEntry && !forDate\" class=\"view-all\">\n          (<localize key=\"manage.versions.history.viewingAll\"></localize>)\n        </span>\n      </span>\n\n    </span>\n    <span style=\"float:right;color:#6ba542;margin-right:20px;\">\n      <ng-container *ngIf=\"activeEntry\">\n\t\t      {{activeEntry.period.startDate}}\n\t\t      -\n\t\t      {{dateService.formatDateForDisplay(activeEntry.period.endDate)}}\n      </ng-container>\n      <ng-container *ngIf=\"!activeEntry\">\n          {{dataTimeSpan.displayStartDate}}\n          -\n          {{dataTimeSpan.displayEndDate}}\n      </ng-container>\n    </span>\n\t  \n    <div style=\"padding: 0 20px;\">\n        <div *ngFor=\"let timeline of timelines\" class=\"timeline\">\n\t      <a *ngFor=\"let entry of timeline\" class=\"timeline-entry\" [ngClass]=\"{'active-timeline-entry': this.activeEntry == null || (this.activeEntry != null && entry.period.startDate === this.activeEntry.period.startDate), 'not-clickable': periods.length <= 1}\" (click)=\"setActiveTimelineEntry(entry)\" [ngStyle]=\"{'width': entry.width + '%', 'left': entry.x + '%'}\">\n\t      </a>\n\t    </div>\n        \n        <div class=\"timeline-nav-btn-wrapper\">\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(-1)\" style=\"\"><i class=\"fa fa-chevron-left \"></i></a>\n<!--           </div> -->\n<!--           <div class=\"timeline-nav-btn\"> -->\n              <a (click)=\"navigateRelative(1)\" style=\"\"><i class=\"fa fa-chevron-right \"></i></a> \n<!--           </div> -->\n        </div>\n    </div>\n\n<!-- \t  <div *ngIf=\"periods.length > 1\" class=\"navigation-controls\" style=\"padding-top:5px;\"> -->\n<!-- \t    <a (click)=\"navigateRelative(-1)\" style=\"float:left;\"><i class=\"fa fa-chevron-left\"></i></a> -->\n<!-- \t    <a (click)=\"navigateRelative(1)\" style=\"float:right;\"><i class=\"fa fa-chevron-right\"></i></a> -->\n<!-- \t  </div> -->\n</div>","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { GeoObjectType, AttributeType, GeoObjectOverTime } from \"@registry/model/registry\";\nimport { ChangeRequest, SummaryKey } from \"@registry/model/crtable\";\nimport { GovernanceStatus } from \"@registry/model/constants\";\nimport { AuthService } from \"@shared/service/auth.service\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { RegistryService } from \"@registry/service\";\nimport { ChangeRequestService } from \"@registry/service/change-request.service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { LocalizationService } from \"@shared/service\";\n\nimport { ControlContainer, NgForm } from \"@angular/forms\";\nimport { StandardAttributeCRModel } from \"./StandardAttributeCRModel\";\nimport { ChangeRequestEditor } from \"./change-request-editor\";\n\n@Component({\n    selector: \"standard-attribute-editor\",\n    templateUrl: \"./standard-attribute-editor.component.html\",\n    styleUrls: [\"./standard-attribute-editor.component.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]],\n    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }]\n\n})\nexport class StandardAttributeEditorComponent implements OnInit {\n\n    bsModalRef: BsModalRef;\n\n    @Input() isNew: boolean = false;\n\n    message: string = null;\n\n    isValid: boolean = true;\n    @Output() isValidChange = new EventEmitter<boolean>();\n\n    @Input() readonly: boolean = false;\n\n    @Input() attributeType: AttributeType;\n\n    @Input() changeRequest: ChangeRequest;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObject: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    view: {\n        summaryKey: SummaryKey;\n        summaryKeyLocalized: string;\n        oldValue?: any;\n        value: any;\n        attributeCode: string;\n    };\n\n    @Input() changeRequestEditor: ChangeRequestEditor;\n\n    changeRequestAttributeEditor: StandardAttributeCRModel;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public cdr: ChangeDetectorRef, public service: RegistryService, public lService: LocalizationService,\n        public changeDetectorRef: ChangeDetectorRef, public dateService: DateService, private authService: AuthService,\n        private requestService: ChangeRequestService, private modalService: BsModalService, private elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this.changeRequestAttributeEditor = this.changeRequestEditor.getEditorForAttribute(this.attributeType, null) as StandardAttributeCRModel;\n        this.calculateView();\n    }\n\n    ngAfterViewInit() {\n    }\n\n    calculateView(): void {\n        let diff = this.changeRequestAttributeEditor.diff;\n\n        if (diff != null) {\n            let newVal = diff.newValue == null ? null : JSON.parse(JSON.stringify(diff.newValue));\n            this.view = {\n                value: newVal,\n                summaryKey: SummaryKey.VALUE_CHANGE,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.VALUE_CHANGE),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n\n            if (diff.oldValue !== null && diff.oldValue !== undefined) {\n                this.view.oldValue = JSON.parse(JSON.stringify(diff.oldValue));\n            }\n        } else {\n            this.view = {\n                value: this.changeRequestAttributeEditor.value,\n                summaryKey: SummaryKey.UNMODIFIED,\n                summaryKeyLocalized: this.lService.decode(\"changeovertime.manageVersions.summaryKey.\" + SummaryKey.UNMODIFIED),\n                attributeCode: this.changeRequestAttributeEditor.attribute.code\n            };\n        }\n    }\n\n    onValueChange(): void {\n        this.calculateView();\n    }\n\n    onApprove(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.ACCEPTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.ACCEPTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onReject(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.REJECTED).then(results => {\n            editAction.approvalStatus = GovernanceStatus.REJECTED;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onPending(): void {\n        let editAction = this.changeRequestAttributeEditor.editAction;\n\n        this.requestService.setActionStatus(editAction.oid, GovernanceStatus.PENDING).then(results => {\n            editAction.approvalStatus = GovernanceStatus.PENDING;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    public error(err: any): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<div>\n  <div @fadeInOut class=\"value-box\">\n    <div *ngIf=\"view\" class=\"value-box-wrapper\" [ngClass]=\"{'warning' : view.summaryKey && view.summaryKey !== 'UNMODIFIED'}\" >\n      <div *ngIf=\"view.summaryKey && view.summaryKey !== 'UNMODIFIED'\" class=\"value-box-indicator\">\n        {{view.summaryKeyLocalized}}\n      </div>\n      \n      <div class=\"inner-value\">\n        <div *ngIf=\"attributeType.type === 'boolean'\">\n          <div>\n\t          <label class=\"radio radio-inline\" style=\"padding-left:0;\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? view.value === false : (view.value === true)\" [value]=\"view.attributeCode === 'invalid' ? false : true\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-true\" name=\"mod-{{geoObjectType.code}}-true\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize></span>\n\t          </label> \n\t          <label class=\"radio radio-inline\"> \n\t            <input class=\"inline-radio-input\" type=\"radio\" (change)=\"onValueChange()\" [checked]=\"view.attributeCode === 'invalid' ? changeRequestAttributeEditor.value === true : changeRequestAttributeEditor.value === false\" [value]=\"view.attributeCode === 'invalid' ? true : false\" [(ngModel)]=\"changeRequestAttributeEditor.value\" id=\"mod-{{geoObjectType.code}}-false\" name=\"mod-{{geoObjectType.code}}-false\" [disabled]=\"readonly\"> \n\t            <span [ngClass]=\"{'has-changed': (view.oldValue && !isNew)}\"><localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize></span>\n\t          </label>\n\t        </div>\n        </div>\n        \n        <div *ngIf=\"(view.oldValue !== null && view.oldValue !== undefined) && !isNew\">\n          <p style=\"color: var(--theme-text-dark);\" class=\"warning-text display-current-value\">\n            <localize key=\"change.request.changed.value.prefix\"></localize>&nbsp;\n            \n            <span *ngIf=\"attributeType.type === 'boolean'\">\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === false) : (view.oldValue === true)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.valid' : 'change.request.boolean.option.true'\"></localize>\n\t            </span>\n\t            <span *ngIf=\"view.attributeCode === 'invalid' ? (view.oldValue === true) : (view.oldValue === false)\">\n                <localize [key]=\"view.attributeCode === 'invalid' ? 'change.request.boolean.option.invalid' : 'change.request.boolean.option.false'\"></localize>\n\t            </span>\n            </span>\n            \n            <span *ngIf=\"attributeType.type !== 'boolean'\">\n                {{ view.oldValue }}\n            </span>\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  <!-- TODO : This code copy/pasted from manage-versions.component.html -->\n  <div *ngIf=\"changeRequest && !changeRequest.isNew\" class=\"cr-maintainer-options\">\n    <div *ngIf=\"changeRequest.approvalStatus === 'PENDING' && changeRequest.permissions.includes('WRITE_APPROVAL_STATUS') && changeRequestAttributeEditor.editAction && changeRequestAttributeEditor.diff\">\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\" type=\"submit\" (click)=\"onApprove()\" class=\"btn btn-primary\" role=\"button\" [title]=\"'change.request.action.accept.btn.hover' | localize\">\n        <localize key=\"change.request.accept.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\" type=\"submit\" (click)=\"onReject()\" class=\"btn btn-danger\" role=\"button\" [title]=\"'change.request.action.reject.btn.hover' | localize\">\n        <localize key=\"change.request.reject.btn\"></localize>\n      </button>\n      <button [disabled]=\"changeRequestAttributeEditor.editAction.approvalStatus === 'PENDING'\" type=\"submit\" (click)=\"onPending()\" class=\"btn btn-warning\" role=\"button\" [title]=\"'change.request.action.pending.btn.hover' | localize\">\n        <localize key=\"change.request.pending.btn\"></localize>\n      </button>\n    </div>              \n    <div *ngIf=\"changeRequest.approvalStatus !== 'PENDING'\">\n      <strong style=\"color:#6BA542;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'ACCEPTED'\">\n          <localize key=\"change.request.status.accepted\"></localize>\n      </strong>\n      <strong style=\"color:#6d0400;\" *ngIf=\"changeRequestAttributeEditor.editAction.approvalStatus === 'REJECTED'\">\n          <localize key=\"change.request.status.rejected\"></localize>\n      </strong>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, OnDestroy, Input } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService, MapService, GeometryService } from \"@registry/service\";\n\nimport { Map, NavigationControl } from \"mapbox-gl\";\n\n// eslint-disable-next-line no-unused-vars\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"geoobject-editor-map[geometryType]\",\n    templateUrl: \"./geoobject-editor-map.component.html\",\n    styleUrls: [\"./geoobject-editor-map.component.css\"]\n})\n\n/**\n * This component is used when viewing change requests\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    _mapHeight: number = 400;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set mapHeight(height: number) {\n        if (height > 400) {\n            this._mapHeight = height;\n        }\n    }\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mapDiv\") mapDiv;\n\n    map: Map;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private geomService: GeometryService, private registryService: RegistryService, private mapService: MapService) { }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.mapDiv.nativeElement.id = Math.floor(Math.random() * (899999)) + 100000;\n\n            this.map = new Map({\n                container: this.mapDiv.nativeElement.id,\n                style: \"mapbox://styles/mapbox/satellite-v9\",\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            });\n\n            this.map.on(\"load\", () => {\n                this.initMap();\n            });\n        }, 0);\n    }\n\n    ngOnDestroy(): void {\n        this.geomService.destroy();\n    }\n\n    getIsValid(): boolean {\n        return this.geomService.isValid();\n    }\n\n    initMap(): void {\n        this.map.on(\"style.load\", () => {\n            // this.addLayers();\n            // this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n        });\n\n        this.geomService.initialize(this.map, this.geometryType, this.readOnly);\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl(new NavigationControl());\n\n        this.zoomToBbox();\n    }\n\n    zoomToBbox(): void {\n        this.geomService.zoomToLayersExtent();\n    }\n\n    public error(err: HttpErrorResponse): void {\n        // TODO\n        console.log(\"ERROR\", err);\n    }\n\n}\n","<div class=\"geoobject-editor-map-wrapper\">\n  <div #mapDiv class=\"map-view-port-inline text-left\" [style.height.px]=\"_mapHeight\" style=\"width:calc(100% - 15px)\"></div>\n</div>","\nimport { Component, ElementRef, Input, Output, EventEmitter } from \"@angular/core\";\n\n@Component({\n    selector: \"simple-edit-control\",\n    templateUrl: \"./simple-edit-control.component.html\",\n    styleUrls: [\"./simple-edit-control.css\"]\n})\nexport class SimpleEditControl {\n\n    elRef: ElementRef\n\n    @Output() editEmitter = new EventEmitter<void>();\n\n    @Input() visible: boolean = true;\n    @Input() editSessionEnabled: boolean = false;\n    @Input() save: boolean = false;\n\n    constructor(elRef: ElementRef) {\n        this.elRef = elRef;\n    }\n\n    onAdd(map): any {\n        return this.elRef.nativeElement;\n    }\n\n    onRemove(map): void {\n        this.elRef.nativeElement.remove();\n    }\n\n    onClick(): void {\n        this.editEmitter.emit();\n    }\n}\n","<div (click)=\"this.onClick();\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button *ngIf=\"editSessionEnabled\" \n    class=\"fa\" \n    [ngClass]=\"{'fa-pencil-square-o':!save, 'fa-save':save}\" \n    style=\"color: black; font-size: 18px;\" \n    [title]=\"'changeovertime.manageVersions.button.label' | localize\" \n    >\n  </button>\n  <div *ngIf=\"editSessionEnabled\" class=\"map-button-info-hint-wrapper\">\n    <div class=\"map-button-info-hint\">\n      <localize key=\"map.button.info.hint\"></localize>\n    </div>\n    <div class=\"map-button-pointer\"></div>\n  </div>\n</div>","import { Component, Input, EventEmitter, Output, ViewChild, SimpleChanges } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\nimport { RegistryService } from \"@registry/service\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\n@Component({\n\n    selector: \"cascading-geo-selector\",\n    templateUrl: \"./cascading-geo-selector.html\"\n})\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n    @Input() readOnly: boolean = false;\n\n    @ViewChild(\"mainForm\") mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    @Input() customEvent: boolean = false;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private modalService: BsModalService, private registryService: RegistryService) { }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + (this.forDate.getUTCMonth() + 1) + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date(Date.parse(this.dateStr));\n\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach(hierarchy => {\n            const object = {};\n            object[\"label\"] = hierarchy.label;\n            object[\"code\"] = hierarchy.code;\n\n            this.isValid = this.isValid && (this.hierarchies.length > 0);\n\n            hierarchy.entries.forEach(pot => {\n                const startDate = Date.parse(pot.startDate);\n                const endDate = Date.parse(pot.endDate);\n\n                if (time >= startDate && time <= endDate) {\n                    let parents = [];\n\n                    hierarchy.types.forEach(type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if (pot.parents[type.code] != null) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push(parent);\n                    });\n\n                    object[\"parents\"] = parents;\n                }\n            });\n\n            this.cHierarchies.push(object);\n        });\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions(code: string): void {\n        const hierarchy = this.hierarchies.find(h => h.code === code);\n\n        if (this.customEvent) {\n            this.onManageVersion.emit(hierarchy);\n        } else {\n/*\n            this.bsModalRef = this.modalService.show(ManageParentVersionsModalComponent, {\n                animated: true,\n                backdrop: true,\n                ignoreBackdropClick: true,\n            });\n            this.bsModalRef.content.init(hierarchy);\n            this.bsModalRef.content.onVersionChange.subscribe(hierarchy => {\n                this.calculate();\n            });\n            */\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [value]=\"parent.geoObject.properties.displayLabel.localizedValue + ' : ' + parent.geoObject.properties.code\" [name]=\"hierarchy.code + '-' + parent.code + '-input'\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\" *ngIf=\"!readOnly\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, Input, EventEmitter, Output, SimpleChanges } from \"@angular/core\";\nimport { IActionMapping, ITreeOptions } from \"@circlon/angular-tree-component\";\n\nimport { HierarchyOverTime } from \"@registry/model/registry\";\n\n@Component({\n\n    selector: \"tree-geo-selector\",\n    templateUrl: \"./tree-geo-selector.html\",\n    styleUrls: [\"./tree-geo-selector.css\"]\n})\nexport class TreeGeoSelector {\n\n    @Input() hierarchy: HierarchyOverTime;\n\n    @Input() readOnly: boolean = false;\n\n    @Input() forDate: Date = null;\n\n    @Output() onManageVersion = new EventEmitter<HierarchyOverTime>();\n\n    nodes: any[] = [];\n\n    actionMapping: IActionMapping = {\n        mouse: {\n            click: null\n        }\n    }\n\n    options: ITreeOptions = {\n        displayField: \"name\",\n        isExpandedField: \"expanded\",\n        idField: \"code\",\n        actionMapping: this.actionMapping\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() {\n\n    }\n\n    ngOnInit(): void {\n        this.calculate();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes[\"forDate\"]) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        let time = null;\n\n        if (this.forDate != null) {\n            time = this.forDate.getTime();\n        }\n\n        let nodes = [];\n        let current = null;\n\n        this.hierarchy.entries.forEach(pot => {\n            const startDate = Date.parse(pot.startDate);\n            const endDate = Date.parse(pot.endDate);\n\n            // eslint-disable-next-line no-mixed-operators\n            if (time == null || time >= startDate && time <= endDate) {\n                this.hierarchy.types.forEach(type => {\n                    let node: any = {\n                        code: type.code,\n                        label: type.label,\n                        children: [],\n                        expanded: false\n                    };\n\n                    if (pot.parents[type.code] != null) {\n                        node.name = pot.parents[type.code].text;\n\n                        if (time == null) {\n                            node.name = node.name + \" (\" + pot.startDate + \" -> \" + pot.endDate + \")\";\n                        }\n\n                        node.geoObject = pot.parents[type.code].geoObject;\n                    }\n\n                    if (current == null) {\n                        nodes.push(node);\n                    } else {\n                        current.children.push(node);\n                        current.expanded = true;\n                    }\n\n                    current = node;\n                });\n            }\n\n            current = null;\n        });\n\n        this.nodes = nodes;\n    }\n\n    onEdit(): void {\n        this.onManageVersion.emit(this.hierarchy);\n    }\n\n}\n","<div>\n\n  <div class=\"panel panel-default\">\n    <div class=\"panel-heading\">\n      <h4 style=\"margin: 0;\">{{hierarchy.label}}</h4>\n    </div>\n    <div class=\"panel-body\">\n\n<!--       <div class=\"input-group\"> -->\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\" >\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n<!--         <span *ngIf=\"!readOnly\" class=\"input-group-addon\">  -->\n<!--           <i class=\"fa fa-pencil clickable\" (click)=\"onEdit()\" aria-hidden=\"true\"></i> -->\n<!--         </span> -->\n<!--       </div> -->\n      \n      <button class=\"btn btn-primary\" style=\"width:100%;margin-top:10px;\" *ngIf=\"!readOnly\" (click)=\"onEdit()\"><localize key=\"modal.button.edit\"></localize></button>\n\n    </div>\n  </div>\n</div>","import { Component, Input, ViewChild } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component({\n    selector: \"action-detail-modal\",\n    templateUrl: \"./action-detail-modal.component.html\",\n    styleUrls: []\n})\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    readonly: boolean;\n\n    @ViewChild(\"cuDetail\") cuDetail: ActionDetailComponent;\n    @ViewChild(\"arDetail\") arDetail: ActionDetailComponent;\n    @ViewChild(\"spDetail\") spDetail: ActionDetailComponent;\n\n    @Input()\n    curAction(action: any, readonly: boolean) {\n        this.action = action;\n        this.readonly = readonly;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if (this.cuDetail != null) {\n            this.cuDetail.endEdit();\n        }\n\n        if (this.arDetail != null) {\n            this.arDetail.endEdit();\n        }\n\n        if (this.spDetail != null) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\" [readOnly]=\"readonly\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler, ErrorModalComponent } from \"@shared/component\";\n\nimport { IOService } from \"@registry/service\";\nimport { AuthService } from \"@shared/service\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"data-export\",\n    templateUrl: \"./data-export.component.html\",\n    styleUrls: []\n})\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: IOService, private modalService: BsModalService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes(true).then(types => {\n            // this.types = types;\n\n            let myOrgTypes = [];\n            for (let i = 0; i < types.length; ++i) {\n                if (this.authService.isOrganizationRA(types[i].orgCode)) {\n                    myOrgTypes.push(types[i]);\n                }\n            }\n            this.types = myOrgTypes;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    onChange(code: string): void {\n        if (code != null && code.length > 0) {\n            this.service.getHierarchiesForType(code, false).then(hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            }).catch((err: HttpErrorResponse) => {\n                this.error(err);\n            });\n        } else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n    }\n\n    onExport(): void {\n        if (this.format === \"SHAPEFILE\") {\n            window.location.href = registry.contextPath + \"/shapefile/export-shapefile?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        } else if (this.format === \"EXCEL\") {\n            window.location.href = registry.contextPath + \"/excel/export-spreadsheet?type=\" + this.code + \"&hierarchyType=\" + this.hierarchy;\n        }\n    }\n\n    public error(err: HttpErrorResponse): void {\n        this.bsModalRef = ErrorHandler.showErrorAsDialog(err, this.modalService);\n    }\n\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import {\n    Component,\n    OnInit,\n    Input,\n    Output,\n    ChangeDetectorRef,\n    EventEmitter,\n    ViewChildren,\n    QueryList\n} from \"@angular/core\";\nimport {\n    trigger,\n    style,\n    animate,\n    transition\n} from \"@angular/animations\";\nimport { GeoObjectType, AttributeType, ValueOverTime, GeoObjectOverTime, PRESENT } from \"@registry/model/registry\";\nimport { DateFieldComponent } from \"../../../shared/component/form-fields/date-field/date-field.component\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\nimport * as moment from \"moment\";\n\n@Component({\n    selector: \"geometry-panel\",\n    templateUrl: \"./geometry-panel.component.html\",\n    styleUrls: [\"./geometry-panel.css\"],\n    host: { \"[@fadeInOut]\": \"true\" },\n    animations: [\n        [\n            trigger(\"fadeInOut\", [\n                transition(\"void => *\", [\n                    style({\n                        opacity: 0\n                    }),\n                    animate(\"500ms\")\n                ]),\n                transition(\":leave\",\n                    animate(\"500ms\",\n                        style({\n                            opacity: 0\n                        })\n                    )\n                )\n            ])\n        ]]\n})\nexport class GeometryPanelComponent implements OnInit {\n\n    @ViewChildren(\"dateFieldComponents\") dateFieldComponentsArray: QueryList<DateFieldComponent>;\n\n    currentDate: Date = new Date();\n\n    isValid: boolean = true;\n\n    isVersionForHighlight: number;\n\n    message: string = null;\n\n    readonly: boolean = false;\n\n    hasConflict: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful\n     */\n    @Output() onChange = new EventEmitter<GeoObjectOverTime>();\n\n    @Output() onCloneGeometry = new EventEmitter<any>();\n\n    @Output() onEdit = new EventEmitter<ValueOverTime>();\n\n    @Input() geoObjectType: GeoObjectType;\n\n    originalGeoObjectOverTime: GeoObjectOverTime;\n    geoObjectOverTime: GeoObjectOverTime;\n\n    // eslint-disable-next-line accessor-pairs\n    @Input() set geoObjectOverTimeInput(value: GeoObjectOverTime) {\n        this.originalGeoObjectOverTime = JSON.parse(JSON.stringify(value));\n        this.geoObjectOverTime = value;\n    }\n\n    @Input() isNewGeoObject: boolean = false;\n\n    goGeometries: GeoObjectOverTime;\n\n    newVersion: ValueOverTime;\n\n    hasDuplicateDate: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private lService: LocalizationService, public changeDetectorRef: ChangeDetectorRef, private dateService: DateService) { }\n\n    ngOnInit(): void {\n    }\n\n    checkDateFieldValidity(): boolean {\n        let dateFields = this.dateFieldComponentsArray.toArray();\n\n        for (let i = 0; i < dateFields.length; i++) {\n            let field = dateFields[i];\n            if (!field.valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    onDateChange(): any {\n        this.hasConflict = false;\n\n        this.isValid = this.checkDateFieldValidity();\n\n        let vAttributes = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        this.hasConflict = this.dateService.checkRanges(null, vAttributes);\n    }\n\n    edit(vot: ValueOverTime, isVersionForHighlight: number): void {\n        this.onEdit.emit(vot);\n\n        this.isVersionForHighlight = isVersionForHighlight;\n    }\n\n    onAddNewVersion(geometry: ValueOverTime): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[\"geometry\"].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null; // Utils.formatDateString(new Date());\n        vot.endDate = null; // Utils.formatDateString(new Date());\n\n        if (geometry && geometry.value) {\n            vot.value = geometry.value;\n        } else {\n            vot.value = { type: this.geoObjectType.geometryType, coordinates: [] };\n        }\n\n        if (this.geoObjectType.geometryType === \"MULTIPOLYGON\") {\n            vot.value.type = \"MultiPolygon\";\n        } else if (this.geoObjectType.geometryType === \"POLYGON\") {\n            vot.value.type = \"Polygon\";\n        } else if (this.geoObjectType.geometryType === \"POINT\") {\n            vot.value.type = \"Point\";\n        } else if (this.geoObjectType.geometryType === \"MULTIPOINT\") {\n            vot.value.type = \"MultiPoint\";\n        } else if (this.geoObjectType.geometryType === \"LINE\") {\n            vot.value.type = \"Line\";\n        } else if (this.geoObjectType.geometryType === \"MULTILINE\") {\n            vot.value.type = \"MultiLine\";\n        } else if (this.geoObjectType.geometryType === \"MIXED\") {\n            vot.value.type = \"Mixed\";\n        }\n\n        votArr.push(vot);\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    getVersionData(attribute: AttributeType) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach(vAttribute => {\n            vAttribute.value.localeValues.forEach(val => {\n                versions.push(val);\n            });\n        });\n\n        return versions;\n    }\n\n    getDefaultLocaleVal(locale: any): string {\n        let defVal = null;\n\n        locale.localeValues.forEach(locVal => {\n            if (locVal.locale === \"defaultLocale\") {\n                defVal = locVal.value;\n            }\n        });\n\n        return defVal;\n    }\n\n    setDateAttribute(vot: ValueOverTime, val: string): void {\n        vot.value = new Date(val).getTime().toString();\n    }\n\n    remove(version: any): void {\n        let val = this.geoObjectOverTime.attributes[\"geometry\"];\n\n        let position = -1;\n        for (let i = 0; i < val.values.length; i++) {\n            let vals = val.values[i];\n\n            if (vals.startDate === version.startDate) {\n                position = i;\n            }\n        }\n\n        if (position > -1) {\n            val.values.splice(position, 1);\n        }\n    }\n\n    formatDate(date: string) {\n        let localeData = moment.localeData(date);\n        let format = localeData.longDateFormat(\"L\");\n        return moment().format(format);\n    }\n\n    setInfinity(vAttribute, attributes): void {\n        if (vAttribute.endDate === PRESENT) {\n            vAttribute.endDate = new Date();\n        } else {\n            vAttribute.endDate = PRESENT;\n        }\n\n        this.onDateChange();\n    }\n\n    sort(votArr: ValueOverTime[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    onCloneGeometryToNewVersion(geometry: ValueOverTime): void {\n        this.onAddNewVersion(geometry);\n    }\n\n    onSubmit(): void {\n        this.onChange.emit(this.geoObjectOverTime);\n    }\n\n    onCancel(): void {\n        this.onChange.emit(this.originalGeoObjectOverTime);\n    }\n\n}\n","<div>\n  <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\">\n    <localize key=\"changeovertime.manageVersions.duplicateDate\"></localize>\n  </div>\n\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n  <form #versionsform=\"ngForm\" class=\"modal-form\" autocomplete=\"off\">\n\n    <fieldset>\n      <div class=\"row\">\n\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"col-md-12\">\n          <div class=\"attribute-version-wrapper\" *ngIf=\"geoObjectOverTime\">\n\n                <ul class=\"list-group\">\n                  <li class=\"list-group-item\" style=\"text-align:left;padding:0;\">\n                    <table class=\"table table-striped\">\n\n                      <tbody class=\"attribute-element-wrapper\">\n                        <p class=\"message\" *ngIf=\"geoObjectOverTime.attributes['geometry'].values.length === 0\">\n                          <localize key=\"changeovertime.manageVersions.no.versions.message\"></localize>\n                        </p>\n\n                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\" [ngClass]=\"{'error-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'ERROR', 'warning-border': vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0 && vAttribute.conflictMessage[0].type === 'WARNING'}\">\n                          <td [ngClass]=\"{'active' : i === isVersionForHighlight}\">\n                            <table>\n                              <tr class=\"attribute-value-row\" *ngIf=\"geoObjectType.isGeometryEditable\">\n                                <td colspan=\"2\">\n                                  <button class=\"btn btn-primary\" (click)=\"edit(vAttribute, i)\" role=\"button\">\n                                    <localize key=\"changeovertime.manageVersions.geometry.edit\"></localize>\n                                  </button>\n                                  <button type=\"submit\" (click)=\"onCloneGeometryToNewVersion(vAttribute)\" class=\"btn btn-default\" role=\"button\">\n                                      <localize key=\"changeovertime.manageVersions.copy.geometry.button\"></localize>\n                                    </button>\n                                </td>\n                              </tr>\n                              <tr class=\"attribute-date-input-row\">\n                                <td>\n                                  <h5>\n                                    <localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize>\n                                  </h5> \n                                  \n                                  <date-field #dateFieldComponents [(value)]=\"vAttribute.startDate\" label=\"\" [inputName]=\"'startDate_' + i\" (change)=\"onDateChange()\" [allowFutureDates]=\"false\" [required]=\"true\" ></date-field>\n                                  \n                                </td>\n                                <td>\n                                  <div class=\"version-edit-date-container\">\n                                      <h5>\n                                        <localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize>\n                                      </h5>\n                                      \n                                      <date-field #dateFieldComponents [(value)]=\"vAttribute.endDate\" label=\"\" [inputName]=\"'endDate_' + i\" (change)=\"onDateChange()\" [allowInfinity]=\"true\" [allowFutureDates]=\"true\" [required]=\"true\" [placement]=\"'bottom'\"></date-field>\n                                      \n                                    </div>\n                                </td>\n                              </tr>\n                              <tr *ngIf=\"vAttribute.conflictMessage && vAttribute.conflictMessage.length > 0\">\n<!--                                   <p class=\"error-message\"> -->\n<!--                                     <localize key=\"manage.versions.overlap.message\"></localize> -->\n<!--                                   </p> -->\n                                  <p *ngFor=\"let msg of vAttribute.conflictMessage\" [ngClass]=\"{'error-message': msg.type === 'ERROR', 'warning-message': msg.type === 'WARNING'}\">\n                                    {{msg.message}}\n                                  </p>\n                              </tr>    \n                            </table>\n                          </td>\n                          <td style=\"vertical-align: middle;\" class=\"manage-version-button clickable\" [title]=\"'changeovertime.manageVersions.remove.version' | localize\" (click)=\"remove(vAttribute)\">\n                            <i class=\"fa fa-times\"></i>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </li>\n\n                  <li class=\"list-group-item\" style=\"text-align: left;\">\n                    <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion(null)\"> <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                    </i>\n                  </li>\n                </ul>\n              </div>\n        </div>\n\n      </div>\n\n      <div class=\"row-holder\">\n        <!-- <div class=\"label-holder\"></div> -->\n        <div class=\"holder\" style=\"border: none; width: 100%;\">\n          <div class=\"button-holder pull-right\">\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n              <localize key=\"io.cancel\"></localize>\n            </button>\n            <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!isValid || !versionsform.valid\">\n              <localize key=\"modal.button.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </fieldset>\n  </form>\n</div>\n\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { HierarchyNode } from \"@registry/model/hierarchy\";\nimport { GeoObjectType } from \"@registry/model/registry\";\n\n@Pipe({\n    name: \"geoobjecttype\",\n    pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n\n    transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        let unassignedGeoObjTypes: string[] = [];\n        this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n\n        // filter items array, items which match and return true will be\n        // kept, false will be filtered out\n        return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n    }\n\n    buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void {\n        filter.forEach(f => {\n            this.processHierarchyNodes(f, unassignedGeoObjTypes);\n        })\n    }\n\n    processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]) {\n        unassignedGeoObjTypes.push(node.geoObjectType)\n\n        node.children.forEach(child => {\n            this.processHierarchyNodes(child, unassignedGeoObjTypes);\n        })\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"geoObjectAttributeExcludesFilter\",\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n\n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Pipe, PipeTransform } from \"@angular/core\";\n\n@Pipe({\n    name: \"toEpochDateTime\",\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n\n    transform(date: string): any {\n        if (!date) {\n            return date;\n        }\n\n        return new Date(date).getTime();\n    }\n}","import { NgModule } from \"@angular/core\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from \"../shared/service/guard.service\";\nimport { BusinessTypeManagerComponent } from \"./component/business-type/business-type-manager.component\";\nimport { BusinessImporterComponent } from \"./component/business-importer/business-importer.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\nimport { BusinessTableComponent } from \"./component/business-table/business-table.component\";\nimport { ClassificationTypeManagerComponent } from \"./component/classification-type/classification-type-manager.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"hierarchies\",\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"data\",\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-requests\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"change-requests/:oid\",\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"master-lists\",\n        component: ListTypeManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"master-list/:oid\",\n        component: ListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"scheduled-jobs\",\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"job/:oid\",\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"change-request\",\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"tasks\",\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"synchronization-configs\",\n        component: SynchronizationConfigManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"synchronization-config/:oid\",\n        component: SynchronizationConfigComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"location-manager\",\n        component: LocationManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"sync/details/:config/:oid\",\n        component: SyncDetailsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"curation-job/:oid\",\n        component: CurationJobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: \"historical-events\",\n        component: HistoricalEventModuleComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: \"business-types\",\n        component: BusinessTypeManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"business-importer\",\n        component: BusinessImporterComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"business-type/:oid\",\n        component: BusinessTableComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: \"classification-type\",\n        component: ClassificationTypeManagerComponent,\n        canActivate: [AuthGuard]\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy }\n    ]\n})\nexport class RegistryRoutingModule { }\n","import { LocalizedValue, PageResult } from \"@shared/model/core\";\n\nexport class ClassificationType {\n\n    oid?: string;\n    code: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n\n}\n\nexport class Classification {\n\n    code: string;\n    displayLabel: LocalizedValue;\n    description: LocalizedValue;\n\n}\n\nexport class ClassificationNode {\n\n    classification:Classification;\n    children: PageResult<ClassificationNode>;\n\n}\n","import { Component } from \"@angular/core\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorHandler } from \"@shared/component\";\nimport { CurationJob, CurationProblem, ListTypeVersion } from \"@registry/model/list-type\";\nimport { GeoObjectEditorComponent } from \"../geoobject-editor/geoobject-editor.component\";\nimport { DateService } from \"@shared/service\";\nimport { ListTypeService } from \"@registry/service/list-type.service\";\n\n@Component({\n    selector: \"curation-problem-modal\",\n    templateUrl: \"./curation-problem-modal.component.html\",\n    styleUrls: []\n})\nexport class CurationProblemModalComponent {\n\n    message: string = null;\n    version: ListTypeVersion;\n    problem: CurationProblem;\n    job: CurationJob;\n    callback: Function;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n    constructor(public service: ListTypeService, public bsModalRef: BsModalRef, private modalService: BsModalService, private dateService: DateService) {\n    }\n\n    init(version: ListTypeVersion, problem: CurationProblem, job: CurationJob, callback: Function): void {\n        this.version = version;\n        this.problem = problem;\n        this.job = job;\n        this.callback = callback;\n    }\n\n    getFriendlyProblemType(probType: string): string {\n        if (probType === \"NO_GEOMETRY\") {\n            // return this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n            return \"Missing geometry\";\n        }\n\n        return probType;\n    }\n\n    onEditGeoObject(): void {\n        const editModal = this.modalService.show(GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        });\n\n        editModal.content.configureAsExisting(this.problem.goCode, this.problem.typeCode, this.version.forDate, true);\n        editModal.content.setMasterListId(this.version.oid);\n        editModal.content.submitFunction = (geoObject, hierarchies, attributeEditor) => {\n            // THERE HAS TO BE A BETTER WAY TO DO THIS\n            if (attributeEditor.changeRequest != null) {\n                const changeRequest = attributeEditor.changeRequest;\n\n                let config = {\n                    historyId: this.job.historyId,\n                    problemId: this.problem.id,\n                    resolution: \"APPLY_GEO_OBJECT\",\n                    code: this.problem.goCode,\n                    typeCode: this.problem.typeCode,\n                    actions: changeRequest.actions\n                };\n\n                this.service.submitErrorResolve(config).then(() => {\n                    this.callback({ action: \"RESOLVED\", data: this.problem });\n                    editModal.hide();\n                }).catch((err: HttpErrorResponse) => {\n                    editModal.content.error(err);\n                });\n            }\n        };\n\n        editModal.content.setOnSuccessCallback(() => {\n            this.onProblemResolvedListener(this.problem);\n            this.bsModalRef.hide();\n        });\n    }\n\n    onProblemResolvedListener(problem: CurationProblem): void {\n        this.callback({ action: \"RESOLVED\", data: problem });\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    error(err: HttpErrorResponse): void {\n        this.message = ErrorHandler.getMessageFromError(err);\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\" *ngIf=\"problem != null\">\n\n        <fieldset>\n\n            <div class=\"\">\n                <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n                <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n                <!-- <div class=\"row\">\n            \n                    <h2>\n                        Review: {{job.fileName}} problem\n                    </h2>\n                </div> -->\n                <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                                    border-radius: 10px;\n                                                    margin-bottom: 20px;\n                                                    margin-top: 20px;\n                                                    padding: 10px;\">\n                    <div class=\"col-md-6\">\n                        <div class=\"wrapper\">\n\n                            <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                            <p style=\"padding-left: 60px;\">\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.uploaded.by.label\"></localize>: {{job.lastRunBy}}\n                                </span>\n                                <span style=\"display: block;\">\n                                    <localize key=\"importproblem.started.date.label\"></localize>:\n                                    <span class=\"date-string-display\" style=\"margin-left:5px;\">\n                                        <date-text [date]=\"job.lastRun\"></date-text>\n                                    </span>\n                                </span>\n                            </p>\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-6\"></div>\n                </div>\n\n                <div class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n                    <div class=\"col-md-12\">\n\n                        <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                            <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                                <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                                    <h4><strong>\n                                            <localize key=\"etl.problem.header.problem\"></localize>\n                                        </strong></h4>\n                                    <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.type)}}\n                                    </p>\n\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                                <div\n                                    style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                                    <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\"\n                                        class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Injectable, Output, EventEmitter } from \"@angular/core\";\n\nimport * as MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { Map, LngLat, LngLatBounds } from \"mapbox-gl\";\n\nimport { Layer } from \"../component/geoobject-shared-attribute-editor/manage-versions-model\";\n\n/**\n * This is a generic service used for rendering layers from ValueOverTime objects\n */\n@Injectable()\nexport class GeometryService {\n\n    map: Map;\n\n    layers: Layer[] = [];\n\n    geometryType: String;\n\n    readOnly: boolean;\n\n    // @Output() layersChange: EventEmitter<VersionOverTimeLayer[]> = new EventEmitter();\n\n    editingControl: any = null;\n\n    simpleEditControl: any = null;\n\n    editingLayer: Layer;\n\n    @Output() geometryChange = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    ngOnInit() {\n        window.onbeforeunload = () => this.destroy();\n    }\n\n    initialize(map: Map, geometryType: String, readOnly: boolean) {\n        this.map = map;\n        this.geometryType = geometryType;\n        // this.editingControl = null;\n\n        this.addLayers();\n\n        this.map.on(\"draw.create\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.delete\", () => {\n            this.saveEdits();\n        });\n        this.map.on(\"draw.update\", () => {\n            this.saveEdits();\n        });\n    }\n\n    destroy(destroyMap: boolean = true): void {\n        if (this.editingControl != null) {\n            this.map.removeControl(this.editingControl);\n            this.editingControl = null;\n        }\n\n        if (this.map != null && destroyMap) {\n            this.map.remove();\n            this.map = null;\n        } else if (this.map != null) {\n            this.removeLayers();\n        }\n\n        if (this.layers != null) {\n            this.layers.forEach(layer => {\n                layer.isEditing = false;\n                layer.isRendering = false;\n            });\n        }\n\n        this.editingLayer = null;\n        this.layers = [];\n    }\n\n    startEditing(layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        this.editingLayer = layer;\n        this.editingLayer.isEditing = true;\n\n        if (!this.readOnly) {\n            this.enableEditing();\n        }\n\n        this.addEditingLayers();\n    }\n\n    stopEditing(rerender: boolean = true) {\n        if (this.isEditing()) {\n            this.saveEdits(rerender);\n\n            this.editingLayer.isEditing = false;\n            this.editingLayer = null;\n\n            this.editingControl.deleteAll();\n            this.map.removeControl(this.editingControl);\n\n            this.editingControl = null;\n        }\n    }\n\n    isEditing(): boolean {\n        return this.editingLayer != null;\n    }\n\n    setPointCoordinates(lat: any, long: any) {\n        if (this.editingLayer != null) {\n            this.editingControl.set({\n                type: \"FeatureCollection\",\n                features: [{\n                    id: this.editingLayer.oid,\n                    type: \"Feature\",\n                    properties: {},\n                    geometry: { type: \"Point\", coordinates: [long, lat] }\n                }]\n            });\n\n            this.editingControl.changeMode(\"simple_select\", { featureIds: this.editingLayer.oid });\n\n            this.saveEdits();\n\n            /*\n            this.editingLayer.value = {\n              type: 'FeatureCollection',\n              features: [{\n              id: this.editingLayer.oid,\n                type: 'Feature',\n                properties: {},\n                geometry: { type: 'Point', coordinates: [ long, lat ] }\n              }]\n            };\n            */\n\n            /*\n            this.editingLayer.value.coordinates = [ -97.4870830718814, 41.84836050415993 ];\n\n            this.editingControl.set(this.editingLayer.value);\n\n            this.removeLayers();\n            this.addLayers();\n\n            this.editingControl.changeMode( 'simple_select', { featureIds: this.editingLayer.oid } );\n            */\n        }\n    }\n\n    isValid(): boolean {\n        if (!this.readOnly) {\n            let isValid: boolean = false;\n\n            if (this.editingControl != null) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if (featureCollection.features.length > 0) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    saveEdits(rerender: boolean = true): void {\n        if (this.editingLayer != null) {\n            let geoJson = this.getDrawGeometry();\n\n            this.editingLayer.editPropagator.value = geoJson;\n\n            if (rerender) {\n                this.removeLayers();\n                this.addLayers();\n            }\n        }\n    }\n\n    public reload(): void {\n        if (this.map != null) {\n            this.removeLayers();\n            this.addLayers();\n\n            if (this.editingControl != null) {\n                this.editingControl.deleteAll();\n            }\n\n            this.addEditingLayers();\n        }\n    }\n\n    setEditing(isEditing: boolean, layer: Layer) {\n        if (this.isEditing()) {\n            this.stopEditing();\n        }\n\n        layer.isEditing = isEditing;\n\n        if (isEditing) {\n            this.startEditing(layer);\n        }\n    }\n\n    setRendering(isRendering: boolean, layer: Layer) {\n        layer.isRendering = isRendering;\n        this.addLayer(layer);\n    }\n\n    addLayer(newLayer: Layer) {\n        let existingIndex = this.layers.findIndex((findLayer: Layer) => { return findLayer.oid === newLayer.oid; });\n\n        if (existingIndex !== -1) {\n            this.layers.splice(existingIndex, 1);\n            this.layers.push(newLayer);\n        } else {\n            this.layers.push(newLayer);\n        }\n\n        if (newLayer.isEditing) {\n            this.startEditing(newLayer);\n        }\n\n        this.layers = this.layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.removeLayers();\n        this.addLayers();\n    }\n\n    getLayers(): Layer[] {\n        return this.layers;\n    }\n\n    getRenderedLayers(): Layer[] {\n        return this.layers.filter(layer => layer.isRendering);\n    }\n\n    setLayers(layers: Layer[]): void {\n        this.removeLayers();\n\n        this.layers = layers.sort((a, b) => { return a.zindex - b.zindex; });\n\n        this.addLayers();\n    }\n\n    enableEditing(): void {\n        if (this.editingControl == null) {\n            if (this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: false,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n                this.editingControl = new MapboxDraw({\n                    userProperties: true,\n                    controls: {\n                        point: true,\n                        line_string: false,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    },\n                    styles: [\n                        {\n                            id: \"highlight-active-points\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"true\"]],\n                            paint: {\n                                \"circle-radius\": 13,\n                                \"circle-color\": \"#33FFF9\",\n                                \"circle-stroke-width\": 4,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        },\n                        {\n                            id: \"points-are-blue\",\n                            type: \"circle\",\n                            filter: [\"all\",\n                                [\"==\", \"$type\", \"Point\"],\n                                [\"==\", \"meta\", \"feature\"],\n                                [\"==\", \"active\", \"false\"]],\n                            paint: {\n                                \"circle-radius\": 10,\n                                \"circle-color\": \"#800000\",\n                                \"circle-stroke-width\": 2,\n                                \"circle-stroke-color\": \"white\"\n                            }\n                        }\n                    ]\n                });\n            } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: false,\n                        line_string: true,\n                        polygon: false,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            } else if (this.geometryType === \"MIXED\") {\n                this.editingControl = new MapboxDraw({\n                    controls: {\n                        point: true,\n                        line_string: true,\n                        polygon: true,\n                        trash: true,\n                        combine_features: false,\n                        uncombine_features: false\n                    }\n                });\n            }\n\n            if (this.map.getSource(\"mapbox-gl-draw-cold\") == null) {\n                this.map.addControl(this.editingControl, \"bottom-right\");\n            }\n        }\n    }\n\n    addEditingLayers(): void {\n        if (this.editingLayer != null && this.editingControl != null) {\n            let val = this.editingLayer.editPropagator.value;\n\n            if (val) {\n                this.editingControl.add(this.editingLayer.editPropagator.value);\n            }\n        }\n    }\n\n    removeSource(prefix: string): void {\n        if (!this.map) {\n            return;\n        }\n\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if (this.map.getLayer(sourceName + \"-layer\") != null) {\n            this.map.removeLayer(sourceName + \"-layer\");\n        }\n\n        if (this.map.getSource(sourceName) != null) {\n            this.map.removeSource(sourceName);\n        }\n    }\n\n    removeLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n                this.removeSource(layer.oid);\n            }\n        }\n    }\n\n    addLayers(): void {\n        if (this.layers != null && this.layers.length > 0) {\n            let len = this.layers.length;\n            for (let i = 0; i < len; ++i) {\n                let layer = this.layers[i];\n\n                if (layer.isRendering) {\n                    this.renderGeometryAsLayer(layer.editPropagator == null ? layer.geojson : layer.editPropagator.value, layer.oid, layer.color);\n                }\n            }\n        }\n    }\n\n    renderGeometryAsLayer(geometry: any, sourceName: string, color: string) {\n        let finalSourceName: string = sourceName + \"-geoobject\";\n\n        if (!this.map) {\n            return;\n        }\n        if (!geometry) {\n            return;\n        }\n\n        this.map.addSource(finalSourceName, {\n            type: \"geojson\",\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        const geometryType = geometry.type != null ? geometry.type.toUpperCase() : this.geometryType;\n\n        if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\") {\n            // Polygon Layer\n            this.map.addLayer({\n                id: finalSourceName + \"-layer\",\n                type: \"fill\",\n                source: finalSourceName,\n                paint: {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7\n                }\n            });\n        } else if (this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\") {\n            // Point layer\n            this.map.addLayer({\n                id: finalSourceName + \"-layer\",\n                type: \"circle\",\n                source: finalSourceName,\n                paint: {\n                    \"circle-radius\": 10,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": \"#FFFFFF\"\n                }\n            });\n        } else if (this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\") {\n            this.map.addLayer({\n                id: finalSourceName + \"-layer\",\n                source: finalSourceName,\n                type: \"line\",\n                layout: {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                paint: {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            });\n        }\n\n        (<any> this.map.getSource(finalSourceName)).setData(geometry);\n    }\n\n    getDrawGeometry(): any {\n        if (this.editingControl != null) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if (featureCollection.features.length > 0) {\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if (this.geometryType === \"MULTIPOLYGON\") {\n                    let polygons = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPolygon\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                polygons.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            polygons.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: \"MultiPolygon\"\n                    };\n                } else if (this.geometryType === \"MULTIPOINT\") {\n                    let points = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiPoint\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                points.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            points.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: \"MultiPoint\"\n                    };\n                } else if (this.geometryType === \"MULTILINE\") {\n                    let lines = [];\n\n                    for (let i = 0; i < featureCollection.features.length; i++) {\n                        let feature = featureCollection.features[i];\n\n                        if (feature.geometry.type === \"MultiLineString\") {\n                            for (let j = 0; j < feature.geometry.coordinates.length; j++) {\n                                lines.push(feature.geometry.coordinates[j]);\n                            }\n                        } else {\n                            lines.push(feature.geometry.coordinates);\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: \"MultiLineString\"\n                    };\n                } else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public static createEmptyGeometryValue(geometryType: String): any {\n        let value = { type: geometryType, coordinates: [] };\n\n        if (geometryType === \"MULTIPOLYGON\" || geometryType === \"MIXED\") {\n            value.type = \"MultiPolygon\";\n        } else if (geometryType === \"POLYGON\") {\n            value.type = \"Polygon\";\n        } else if (geometryType === \"POINT\") {\n            value.type = \"Point\";\n        } else if (geometryType === \"MULTIPOINT\") {\n            value.type = \"MultiPoint\";\n        } else if (geometryType === \"LINE\") {\n            value.type = \"Line\";\n        } else if (geometryType === \"MULTILINE\") {\n            value.type = \"MultiLine\";\n        }\n\n        return value;\n    }\n\n    zoomToLayersExtent(): void {\n        this.layers.forEach(layer => {\n            if (layer.geojson != null) {\n                const geometryType = layer.geojson.type != null ? layer.geojson.type.toUpperCase() : this.geometryType;\n\n                if (geometryType === \"MULTIPOINT\" || geometryType === \"POINT\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(coord => {\n                            bounds.extend(coord);\n                        });\n\n                        let center = bounds.getCenter();\n                        let pt = new LngLat(center.lng, center.lat);\n\n                        this.map.flyTo({\n                            center: pt,\n                            zoom: 9,\n                            essential: true\n                        });\n                    }\n                } else if (geometryType === \"MULTIPOLYGON\" || geometryType === \"POLYGON\" || geometryType === \"MIXED\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(polys => {\n                            polys.forEach(subpoly => {\n                                subpoly.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                } else if (geometryType === \"LINE\" || geometryType === \"MULTILINE\") {\n                    let coords = layer.geojson.coordinates;\n\n                    if (coords) {\n                        let bounds = new LngLatBounds();\n                        coords.forEach(lines => {\n                            lines.forEach(subline => {\n                                subline.forEach(coord => {\n                                    bounds.extend(coord);\n                                });\n                            });\n                        });\n\n                        this.map.fitBounds(bounds, {\n                            padding: 20\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n}\n","import { NgModule } from \"@angular/core\";\nimport { CommonModule, DatePipe } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { TabsModule } from \"ngx-bootstrap/tabs\";\nimport { DndModule } from \"ngx-drag-drop\";\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\nimport { NgxSpinnerModule } from \"ngx-spinner\";\n\nimport { ImportTypesModalComponent } from \"./component/hierarchy/modals/import-types-modal.component\";\nimport { LocalizedInputComponent } from \"./component/form-fields/localized-input/localized-input.component\";\nimport { LocalizedTextComponent } from \"./component/form-fields/localized-text/localized-text.component\";\nimport { HierarchyComponent } from \"./component/hierarchy/hierarchy.component\";\nimport { RelationshipVisualizerComponent } from \"./component/relationship-visualizer/relationship-visualizer.component\";\nimport { CreateHierarchyTypeModalComponent } from \"./component/hierarchy/modals/create-hierarchy-type-modal.component\";\nimport { AddChildToHierarchyModalComponent } from \"./component/hierarchy/modals/add-child-to-hierarchy-modal.component\";\nimport { CreateGeoObjTypeModalComponent } from \"./component/hierarchy/modals/create-geoobjtype-modal.component\";\nimport { ManageAttributesModalComponent } from \"./component/hierarchy/geoobjecttype-management/manage-attributes-modal.component\";\nimport { DefineAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component\";\nimport { EditAttributeModalContentComponent } from \"./component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component\";\nimport { ShapefileModalComponent } from \"./component/importer/modals/shapefile-modal.component\";\nimport { AttributesPageComponent } from \"./component/importer/modals/attributes-page.component\";\nimport { LocationPageComponent } from \"./component/importer/modals/location-page.component\";\nimport { LocationProblemPageComponent } from \"./component/importer/modals/location-problem-page.component\";\nimport { LocationProblemComponent } from \"./component/importer/modals/location-problem.component\";\nimport { TermProblemPageComponent } from \"./component/importer/modals/term-problem-page.component\";\nimport { TermProblemComponent } from \"./component/importer/modals/term-problem.component\";\nimport { SpreadsheetModalComponent } from \"./component/importer/modals/spreadsheet-modal.component\";\nimport { DataPageComponent } from \"./component/data-page/data-page.component\";\nimport { TermOptionWidgetComponent } from \"./component/hierarchy/geoobjecttype-management/term-option-widget.component\";\nimport { AttributeInputComponent } from \"./component/hierarchy/geoobjecttype-management/attribute-input.component\";\nimport { EditTermOptionInputComponent } from \"./component/hierarchy/geoobjecttype-management/edit-term-option-input.component\";\nimport { ManageTermOptionsComponent } from \"./component/hierarchy/geoobjecttype-management/manage-term-options.component\";\nimport { GeoObjectTypeInputComponent } from \"./component/hierarchy/geoobjecttype-management/geoobjecttype-input.component\";\nimport { ManageGeoObjectTypeModalComponent } from \"./component/hierarchy/modals/manage-geoobjecttype-modal.component\";\nimport { RequestTableComponent } from \"./component/crtable/request-table.component\";\nimport { CreateUpdateGeoObjectDetailComponent } from \"./component/crtable/action-detail/create-update-geo-object/detail.component\";\nimport { GeoObjectSharedAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component\";\nimport { StabilityPeriodComponent } from \"./component/geoobject-shared-attribute-editor/stability-period.component\";\nimport { ManageVersionsComponent } from \"./component/geoobject-shared-attribute-editor/manage-versions.component\";\nimport { StandardAttributeEditorComponent } from \"./component/geoobject-shared-attribute-editor/standard-attribute-editor.component\";\nimport { SubmitChangeRequestComponent } from \"./component/submit-change-request/submit-change-request.component\";\nimport { ChangeRequestPageComponent } from \"./component/change-request-page/change-request-page.component\";\nimport { GeoObjectEditorComponent } from \"./component/geoobject-editor/geoobject-editor.component\";\nimport { GeoObjectEditorMapComponent } from \"./component/geoobject-editor-map/geoobject-editor-map.component\";\nimport { SimpleEditControl } from \"./component/geoobject-editor-map/simple-edit-control/simple-edit-control.component\";\nimport { CascadingGeoSelector } from \"./component/cascading-geo-selector/cascading-geo-selector\";\nimport { TreeGeoSelector } from \"./component/tree-geo-selector/tree-geo-selector\";\nimport { ActionDetailModalComponent } from \"./component/crtable/action-detail/action-detail-modal.component\";\nimport { DataImporterComponent } from \"./component/importer/dataimporter.component\";\nimport { DataExportComponent } from \"./component/data-export/data-export.component\";\nimport { ScheduledJobsComponent } from \"./component/scheduled-jobs/scheduled-jobs.component\";\nimport { JobComponent } from \"./component/scheduled-jobs/job.component\";\nimport { JobConflictModalComponent } from \"./component/scheduled-jobs/conflict-widgets/job-conflict-modal.component\";\nimport { ReuploadModalComponent } from \"./component/scheduled-jobs/conflict-widgets/reupload-modal.component\";\nimport { ParentReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component\";\nimport { TermReferenceProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component\";\nimport { RowValidationProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component\";\nimport { StepIndicatorComponent } from \"./component/scheduled-jobs/step-indicator.component\";\nimport { ImportProblemWidgetComponent } from \"./component/scheduled-jobs/conflict-widgets/import-problem-widget.component\";\nimport { TaskViewerComponent } from \"./component/task-viewer/task-viewer.component\";\nimport { FhirExportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-export-synchronization-config.component\";\nimport { Dhis2SynchronizationConfigComponent } from \"./component/synchronization-config/dhis2-synchronization-config.component\";\nimport { SynchronizationConfigManagerComponent } from \"./component/synchronization-config/synchronization-config-manager.component\";\nimport { SynchronizationConfigModalComponent } from \"./component/synchronization-config/synchronization-config-modal.component\";\nimport { SynchronizationConfigComponent } from \"./component/synchronization-config/synchronization-config.component\";\nimport { SyncDetailsComponent } from \"./component/synchronization-config/details.component\";\n\nimport { LocationManagerComponent } from \"./component/location-manager/location-manager.component\";\nimport { LayerPanelComponent } from \"./component/location-manager/layer-panel.component\";\nimport { FeaturePanelComponent } from \"./component/location-manager/feature-panel.component\";\nimport { GeometryPanelComponent } from \"./component/location-manager/geometry-panel.component\";\n\nimport { GeoObjectAttributeCodeValidator } from \"./factory/form-validation.factory\";\n\nimport { GeoObjectTypePipe } from \"./pipe/geoobjecttype.pipe\";\nimport { GeoObjectAttributeExcludesPipe } from \"./pipe/geoobject-attribute-excludes.pipe\";\nimport { ToEpochDateTimePipe } from \"./pipe/to-epoch-date-time.pipe\";\nimport { RegistryService } from \"./service/registry.service\";\nimport { TaskService } from \"./service/task.service\";\nimport { HierarchyService } from \"./service/hierarchy.service\";\nimport { RelationshipVisualizationService } from \"./service/relationship-visualization.service\";\nimport { SynchronizationConfigService } from \"./service/synchronization-config.service\";\nimport { LocalizationManagerService } from \"./service/localization-manager.service\";\nimport { ChangeRequestService } from \"./service/change-request.service\";\nimport { IOService } from \"./service/io.service\";\nimport { MapService } from \"./service/map.service\";\nimport { FhirImportSynchronizationConfigComponent } from \"./component/synchronization-config/fhir-import-synchronization-config.component\";\nimport { TransitionEventService } from \"./service/transition-event.service\";\nimport { TransitionEventTableComponent } from \"./component/transition-event/transition-event-table.component\";\nimport { TransitionEventModalComponent } from \"./component/transition-event/transition-event-modal.component\";\nimport { BusinessTypeManagerComponent } from \"./component/business-type/business-type-manager.component\";\nimport { BusinessTableComponent } from \"./component/business-table/business-table.component\";\nimport { BusinessTypeService } from \"./service/business-type.service\";\nimport { CreateBusinessTypeModalComponent } from \"./component/business-type/modals/create-business-type-modal.component\";\nimport { ManageBusinessTypeModalComponent } from \"./component/business-type/modals/manage-business-type-modal.component\";\nimport { BusinessImporterComponent } from \"./component/business-importer/business-importer.component\";\nimport { HistoricalReportComponent } from \"./component/historical-report/historical-report.component\";\nimport { HistoricalEventModuleComponent } from \"./component/historical-event-module/historical-event-module.component\";\n\nimport { RegistryRoutingModule } from \"./registry-routing.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { AccordionModule } from \"ngx-bootstrap/accordion\";\n\nimport \"../rxjs-extensions\";\n\nimport { NgxGraphModule } from \"@swimlane/ngx-graph\";\nimport { ListTypeManagerComponent } from \"./component/list-type/list-type-manager.component\";\nimport { ListTypePublishModalComponent } from \"./component/list-type/publish-modal.component\";\nimport { ListTypeService } from \"./service/list-type.service\";\nimport { ListsForTypeComponent } from \"./component/list-type/lists-for-type.component\";\nimport { ListTypeComponent } from \"./component/list-type/list-type.component\";\nimport { ListComponent } from \"./component/list-type/list.component\";\nimport { PublishVersionComponent } from \"./component/list-type/publish-version.component\";\nimport { ExportFormatModalComponent } from \"./component/list-type/export-format-modal.component\";\nimport { RecordPanelComponent } from \"./component/location-manager/record-panel.component\";\nimport { SelectTypeModalComponent } from \"./component/location-manager/select-type-modal.component\";\nimport { CurationJobComponent } from \"./component/curation/curation-job.component\";\nimport { CurationProblemModalComponent } from \"./component/curation/curation-problem-modal.component\";\nimport { ClassificationTypeManagerComponent } from \"./component/classification-type/classification-type-manager.component\";\nimport { ClassificationTypeService } from \"./service/classification-type.service\";\nimport { ClassificationTypePublishModalComponent } from \"./component/classification-type/classification-type-publish-modal.component\";\nimport { ClassificationTypeComponent } from \"./component/classification-type/classification-type.component\";\nimport { ClassificationPublishModalComponent } from \"./component/classification-type/classification-publish-modal.component\";\nimport { ClassificationService } from \"./service/classification.service\";\nimport { ClassificationFieldComponent } from \"./component/form-fields/classification-field/classification-field.component\";\nimport { ClassificationFieldModalComponent } from \"./component/form-fields/classification-field/classification-field-modal.component\";\n\nimport { RegistryCacheService } from \"./service/registry-cache.service\"\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        TabsModule,\n        CollapseModule,\n        NgxPaginationModule,\n        SharedModule,\n        RegistryRoutingModule,\n        DndModule,\n        NgxGraphModule,\n        DragDropModule,\n        AccordionModule.forRoot(),\n        NgxSpinnerModule\n    ],\n    declarations: [\n        HierarchyComponent,\n        RelationshipVisualizerComponent,\n        RequestTableComponent,\n        CreateUpdateGeoObjectDetailComponent,\n        ImportTypesModalComponent,\n        FhirExportSynchronizationConfigComponent,\n        FhirImportSynchronizationConfigComponent,\n        Dhis2SynchronizationConfigComponent,\n        CreateHierarchyTypeModalComponent,\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        ShapefileModalComponent,\n        AttributesPageComponent,\n        LocationPageComponent,\n        LocationProblemPageComponent,\n        LocationProblemComponent,\n        TermProblemPageComponent,\n        TermProblemComponent,\n        SpreadsheetModalComponent,\n        GeoObjectTypePipe,\n        GeoObjectAttributeCodeValidator,\n        EditAttributeModalContentComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        LocalizedInputComponent,\n        LocalizedTextComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        StabilityPeriodComponent,\n        ManageVersionsComponent,\n        StandardAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        GeoObjectAttributeExcludesPipe,\n        ToEpochDateTimePipe,\n        GeoObjectEditorMapComponent,\n        SimpleEditControl,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        CascadingGeoSelector,\n        TreeGeoSelector,\n        ActionDetailModalComponent,\n        DataImporterComponent,\n        DataExportComponent,\n        // Scheduled jobs\n        ExportFormatModalComponent,\n        ScheduledJobsComponent,\n        JobComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        ParentReferenceProblemWidgetComponent,\n        TermReferenceProblemWidgetComponent,\n        RowValidationProblemWidgetComponent,\n        StepIndicatorComponent,\n        ImportProblemWidgetComponent,\n        TaskViewerComponent,\n        // Synchronization Config\n        SynchronizationConfigManagerComponent,\n        SynchronizationConfigModalComponent,\n        SynchronizationConfigComponent,\n        SyncDetailsComponent,\n        // Location manager\n        LocationManagerComponent,\n        LayerPanelComponent,\n        FeaturePanelComponent,\n        GeometryPanelComponent,\n        TransitionEventTableComponent,\n        TransitionEventModalComponent,\n        // Business Type components\n        BusinessTypeManagerComponent,\n        CreateBusinessTypeModalComponent,\n        ManageBusinessTypeModalComponent,\n        BusinessImporterComponent,\n        BusinessTableComponent,\n        // Historical report components\n        HistoricalReportComponent,\n        HistoricalEventModuleComponent,\n        RecordPanelComponent,\n        SelectTypeModalComponent,\n        // List type\n        ListTypeManagerComponent,\n        ListTypePublishModalComponent,\n        ListsForTypeComponent,\n        ListTypeComponent,\n        ListComponent,\n        PublishVersionComponent,\n        // Curation\n        CurationJobComponent,\n        CurationProblemModalComponent,\n        // Classification\n        ClassificationTypeManagerComponent,\n        ClassificationTypePublishModalComponent,\n        ClassificationTypeComponent,\n        ClassificationPublishModalComponent,\n        ClassificationFieldComponent,\n        ClassificationFieldModalComponent\n    ],\n    providers: [\n        MapService,\n        HierarchyService,\n        RelationshipVisualizationService,\n        LocalizationManagerService,\n        ChangeRequestService,\n        IOService,\n        RegistryService,\n        RegistryCacheService,\n        TaskService,\n        DatePipe,\n        ToEpochDateTimePipe,\n        StepIndicatorComponent,\n        SynchronizationConfigService,\n        TransitionEventService,\n        BusinessTypeService,\n        ListTypeService,\n        ClassificationTypeService,\n        ClassificationService\n    ],\n    entryComponents: [\n        AddChildToHierarchyModalComponent,\n        CreateGeoObjTypeModalComponent,\n        ManageAttributesModalComponent,\n        DefineAttributeModalContentComponent,\n        EditAttributeModalContentComponent,\n        CreateHierarchyTypeModalComponent,\n        ShapefileModalComponent,\n        SpreadsheetModalComponent,\n        TermOptionWidgetComponent,\n        AttributeInputComponent,\n        EditTermOptionInputComponent,\n        ManageGeoObjectTypeModalComponent,\n        GeoObjectTypeInputComponent,\n        ManageTermOptionsComponent,\n        GeoObjectSharedAttributeEditorComponent,\n        SubmitChangeRequestComponent,\n        GeoObjectEditorComponent,\n        ExportFormatModalComponent,\n        DataPageComponent,\n        ChangeRequestPageComponent,\n        ActionDetailModalComponent,\n        JobConflictModalComponent,\n        ReuploadModalComponent,\n        StepIndicatorComponent,\n        SynchronizationConfigModalComponent,\n        CreateBusinessTypeModalComponent,\n        ManageBusinessTypeModalComponent,\n        TransitionEventModalComponent,\n        ListTypePublishModalComponent,\n        PublishVersionComponent,\n        SelectTypeModalComponent,\n        CurationProblemModalComponent,\n        ClassificationTypePublishModalComponent,\n        ClassificationPublishModalComponent,\n        ClassificationFieldModalComponent\n    ]\n})\nexport class RegistryModule { }\n"],"sourceRoot":""}