{"version":3,"sources":["webpack:///./src/app/registry/registry.module.ts","webpack:///./src/app/registry/service/registry.service.ts","webpack:///./src/app/registry/service/io.service.ts","webpack:///./src/app/registry/service/hierarchy.service.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/service/geoobjecttype-management.service.ts","webpack:///./src/app/registry/service/change-request.service.ts","webpack:///./src/app/registry/pipe/to-epoch-date-time.pipe.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/attribute-input.component.html","webpack:///./src/app/registry/model/io.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.ts","webpack:///./src/app/registry/component/master-list/publish-modal.component.html","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.ts","webpack:///./src/app/registry/component/form-fields/localized-input/localized-input.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component.html","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.ts","webpack:///./src/app/registry/component/form-fields/localized-text/localized-text.component.html","webpack:///./src/app/registry/factory/form-validation.factory.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.ts","webpack:///./src/app/registry/component/importer/modals/attributes-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-page.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem-page.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem-page.component.html","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/geoobject-editor-map.component.html","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.ts","webpack:///./src/app/registry/component/cascading-geo-selector/cascading-geo-selector.html","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.ts","webpack:///./src/app/registry/component/submit-change-request/submit-change-request.component.html","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.ts","webpack:///./src/app/registry/component/geoobject-editor/geoobject-editor.component.html","webpack:///./src/app/registry/service/task.service.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.ts","webpack:///./src/app/registry/component/hierarchy/hierarchy.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-hierarchy-type-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/add-child-to-hierarchy-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/create-geoobjtype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/modals/manage-geoobjecttype-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/geoobjecttype-input.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-attributes-modal.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/term-option-widget.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/manage-term-options.component.html","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.ts","webpack:///./src/app/registry/component/hierarchy/geoobjecttype-management/edit-term-option-input.component.html","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/shapefile-modal.component.html","webpack:///./src/app/registry/component/importer/modals/location-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/location-problem.component.html","webpack:///./src/app/registry/component/importer/modals/term-problem.component.ts","webpack:///./src/app/registry/component/importer/modals/term-problem.component.html","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.ts","webpack:///./src/app/registry/component/importer/modals/spreadsheet-modal.component.html","webpack:///./src/app/registry/component/data-page/data-page.component.ts","webpack:///./src/app/registry/component/data-page/data-page.component.html","webpack:///./src/app/registry/component/importer/spreadsheet.component.ts","webpack:///./src/app/registry/component/importer/spreadsheet.component.html","webpack:///./src/app/registry/component/importer/shapefile.component.ts","webpack:///./src/app/registry/component/importer/shapefile.component.html","webpack:///./src/app/registry/component/master-list/master-list-manager.component.ts","webpack:///./src/app/registry/component/master-list/master-list-manager.component.html","webpack:///./src/app/registry/component/master-list/export-format-modal.component.ts","webpack:///./src/app/registry/component/master-list/export-format-modal.component.html","webpack:///./src/app/registry/component/crtable/request-table.component.ts","webpack:///./src/app/registry/component/crtable/request-table.component.html","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/action-detail-modal.component.html","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.ts","webpack:///./src/app/registry/component/geoobject-shared-attribute-editor/manage-versions-modal.component.html","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.ts","webpack:///./src/app/registry/component/geoobject-editor-map/simple-edit-control/simple-edit-control.component.html","webpack:///./src/app/registry/pipe/geoobject-attribute-excludes.pipe.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.ts","webpack:///./src/app/registry/component/cascading-geo-selector/manage-parent-versions-modal.component.html","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.ts","webpack:///./src/app/registry/component/change-request-page/change-request-page.component.html","webpack:///./src/app/registry/component/master-list/master-list.component.ts","webpack:///./src/app/registry/component/master-list/master-list.component.html","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/published-master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-history.component.ts","webpack:///./src/app/registry/component/master-list/master-list-history.component.html","webpack:///./src/app/registry/component/master-list/master-list-view.component.ts","webpack:///./src/app/registry/component/master-list/master-list-view.component.html","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/scheduled-jobs.component.html","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/step-indicator.component.html","webpack:///./src/app/registry/component/scheduled-jobs/job.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/job.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/job-conflict-modal.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/import-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component.html","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.ts","webpack:///./src/app/registry/component/scheduled-jobs/conflict-widgets/reupload-modal.component.html","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.ts","webpack:///./src/app/registry/component/task-viewer/task-viewer.component.html","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/create-update-geo-object/detail.component.html","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/add-remove-child/detail.component.html","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.ts","webpack:///./src/app/registry/component/crtable/action-detail/set-parent/set-parent-detail.component.html","webpack:///./src/app/registry/component/data-export/data-export.component.ts","webpack:///./src/app/registry/component/data-export/data-export.component.html","webpack:///./src/app/registry/pipe/geoobjecttype.pipe.ts","webpack:///./src/app/registry/service/localization-manager.service.ts","webpack:///./src/app/registry/service/map.service.ts","webpack:///./src/app/registry/registry-routing.module.ts"],"names":["RegistryModule","MapService","HierarchyService","LocalizationManagerService","ChangeRequestService","IOService","GeoObjectTypeManagementService","RegistryService","TaskService","DatePipe","ToEpochDateTimePipe","StepIndicatorComponent","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","SharedModule","RegistryRoutingModule","HierarchyComponent","RequestTableComponent","CreateUpdateGeoObjectDetailComponent","AddRemoveChildDetailComponent","SetParentDetailComponent","CreateHierarchyTypeModalComponent","AddChildToHierarchyModalComponent","CreateGeoObjTypeModalComponent","ManageAttributesModalComponent","DefineAttributeModalContentComponent","ShapefileModalComponent","AttributesPageComponent","LocationPageComponent","LocationProblemPageComponent","LocationProblemComponent","TermProblemPageComponent","TermProblemComponent","SpreadsheetModalComponent","GeoObjectTypePipe","GeoObjectAttributeCodeValidator","EditAttributeModalContentComponent","TermOptionWidgetComponent","AttributeInputComponent","EditTermOptionInputComponent","ManageGeoObjectTypeModalComponent","GeoObjectTypeInputComponent","ManageTermOptionsComponent","LocalizedInputComponent","LocalizedTextComponent","GeoObjectSharedAttributeEditorComponent","ManageVersionsModalComponent","SubmitChangeRequestComponent","GeoObjectEditorComponent","GeoObjectAttributeExcludesPipe","GeoObjectEditorMapComponent","SimpleEditControl","DataPageComponent","ChangeRequestPageComponent","CascadingGeoSelector","ManageParentVersionsModalComponent","ActionDetailModalComponent","ShapefileComponent","SpreadsheetComponent","DataExportComponent","MasterListManagerComponent","MasterListComponent","MasterListHistoryComponent","PublishedMasterListHistoryComponent","PublishModalComponent","MasterListViewComponent","ExportFormatModalComponent","ScheduledJobsComponent","JobComponent","JobConflictModalComponent","ReuploadModalComponent","ParentReferenceProblemWidgetComponent","TermReferenceProblemWidgetComponent","RowValidationProblemWidgetComponent","ImportProblemWidgetComponent","TaskViewerComponent","http","eventService","init","this","get","acp","toPromise","getGeoObjectTypes","types","params","HttpParams","set","JSON","stringify","getParentGeoObjects","childId","childTypeCode","parentTypes","recursive","date","getChildGeoObjects","parentId","parentTypeCode","childrenTypes","newGeoObjectInstance","typeCode","headers","HttpHeaders","start","post","pipe","finalize","complete","createGeoObjectType","gtJSON","updateGeoObjectType","deleteGeoObjectType","code","addAttributeType","geoObjTypeId","attribute","updateAttributeType","deleteAttributeType","attributeName","addAttributeTermTypeOption","parentTermCode","term","updateAttributeTermTypeOption","termJSON","deleteAttributeTermTypeOption","termCode","getGeoObject","id","getGeoObjectBounds","getGeoObjectBoundsAtDate","getGeoObjectByCode","getHierarchiesForGeoObject","getGeoObjectSuggestions","text","type","parent","hierarchy","getGeoObjectSuggestionsTypeAhead","getScheduledJobs","pageSize","pageNumber","sortAttr","isAscending","toString","getCompletedScheduledJobs","getScheduledJob","historyId","onlyUnresolved","resolveScheduledJob","submitValidationResolve","config","submitErrorResolve","getMasterLists","getMasterListHistory","oid","versionType","getMasterListVersion","getLocales","getGeoObjectOverTime","geoObjectCode","geoObjectTypeCode","newGeoObjectOverTime","setAttributeVersions","collection","createMasterList","list","createMasterListVersion","forDate","publishMasterListVersions","deleteMasterList","deleteMasterListVersion","publishMasterList","getMasterList","applyGeoObjectEdit","parentTreeNode","geoObject","isNew","masterListId","notes","data","filter","sort","length","values","value","valueAttribute","publishShapefile","progress","getMasterListsByOrg","getPublishMasterListJobs","getOrganizations","importSpreadsheet","configuration","json","cancelImport","importShapefile","listGeoObjectTypes","includeLeafTypes","getTypeAncestors","hierarchyCode","getHierarchiesForType","includeTypes","createGeoObjectSynonym","entityId","label","deleteGeoObjectSynonym","synonymId","vOid","getTermSuggestions","mdAttributeId","limit","createTermSynonym","classifierId","deleteTermSynonym","createTerm","removeTerm","getHierarchyTypes","addChildToHierarchy","parentGeoObjectTypeCode","childGeoObjectTypeCode","removeFromHierarchy","createHierarchyType","htJSON","updateHierarchyType","deleteHierarchyType","PRESENT","TreeEntity","description","children","addChild","push","Term","GeoObject","attributes","GeoObjectType","Task","geoObjectType","getVotAtDate","attrCode","lService","retVot","startDate","endDate","time","getTime","i","attr","create","isChangeOverTime","forEach","vot","Date","parse","Array","isArray","GeoObjectOverTime","ValueOverTime","isDefault","required","unique","Attribute","isChange","rootTerm","termOptions","setRootTerm","AttributeTerm","precision","scale","AttributeDecimal","GeoObjectTypeModalStates","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","PaginationPage","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","MasterList","MasterListVersion","HierarchyOverTime","ImportStrategy","MasterListByOrg","modalStateChangedSource","Subject","modalStepChange","asObservable","getModalState","modalState","setModalState","state","next","getAllActions","requestId","applyAction","action","applyActionStatusProperties","lockAction","actionId","unlockAction","getAllRequests","getRequestDetails","confirmChangeRequest","execute","rejectAllActions","actions","approveAllActions","submitChangeRequest","transform","hierarchyService","cdr","disableCodeField","excludeDescription","isDecimal","attributeChange","EventEmitter","message","ngOnInit","ngAfterViewInit","detectChanges","ngOnChanges","ngOnDestroy","handleOnSubmit","toggleIsUnique","animate","onAnimationDone","event","isValid","indexOf","trigger","style","transition","ImportSheet","Location","TermProblem","LocationProblem","Exclusion","Synonym","ImportConfiguration","service","iService","bsModalRef","authService","readonly","edit","onMasterListChange","master","then","myOrgTypes","isGeoObjectTypeRM","orgCode","catch","err","error","displayLabel","representativityDate","publishDate","listAbstract","process","accessConstraints","useConstraints","acknowledgements","disclaimer","contactName","organization","telephoneNumber","email","hierarchies","leaf","frequency","isMaster","visibility","org","getIsDisabled","elClasses","target","classList","onChange","onSubmit","response","hide","onCancel","localizedMessage","key","valueChange","modalService","changeDetectorRef","registryService","elRef","changeRequestService","datePipe","toEpochDateTimePipe","preGeoObject","calculatedPreObject","postGeoObject","calculatedPostObject","attributeExcludes","readOnly","isEditingGeometries","isGeometryInlined","valid","modifiedTermOption","currentTermOption","geoObjectAttributeExcludes","apply","geomAttr","geometry","LocalizedValue","calculate","attributeForm","statusChanges","subscribe","result","emit","changes","calculateCurrent","geometryEditor","reload","goot","object","formatDate","localize","handleChangeCode","e","onManageAttributeVersions","show","animated","backdrop","ignoreBackdropClick","content","geoObjectOverTime","isNewGeoObject","onAttributeVersionChange","versionObj","tfInit","onManageGeometryVersions","isDifferentText","trim","isDifferentValue","onSelectPropertyOption","option","getGeoObjectTypeTermAttributeOptions","termAttributeCode","attrOpts","removeStatuses","isStatusChanged","pre","preCompare","postCompare","getTypeDefinition","getIsValid","validator","c","geoObjectAttributeCode","validate","provide","NG_VALIDATORS","useExisting","multi","configurationChange","stateChange","onNext","locations","onBack","hasProblems","locationProblems","resolved","handleError","exclusions","problem","name","exclusion","termProblems","attributeCode","geometryChange","onClickEdit","setTimeout","mapboxgl","accessToken","mapDiv","nativeElement","Math","floor","random","map","Map","container","zoom","center","on","initMap","onValidChange","removeLayers","addLayers","remove","editingControl","getAll","features","saveDraw","preGeometry","zoomToBbox","addControl","NavigationControl","addEditButton","enableEditing","simpleEditControl","editEmitter","geometryType","MapboxDraw","controls","point","line_string","polygon","trash","combine_features","uncombine_features","postGeometry","add","removeSource","prefix","sourceName","removeLayer","getSource","renderGeometryAsLayer","color","addSource","addLayer","setData","bboxCode","bboxType","bboxDate","boundArr","bounds","LngLatBounds","fitBounds","padding","featureCollection","polygons","feature","j","coordinates","points","lines","console","log","cHierarchies","parentMap","day","getUTCDate","dateStr","getUTCFullYear","getUTCMonth","entries","pot","parents","getHierarchies","onManageVersions","find","h","onVersionChange","ErrorModalComponent","localizeService","geoObjectTypes","geoObjectId","reason","dataSource","Observable","observer","results","isGeoObjectTypeRC","organizationCode","a","b","localizedValue","toLowerCase","pos","getGeoObjectTypePosition","splice","newValid","attributeEditor","changeTypeaheadLoading","typeaheadLoading","typeaheadOnSelect","item","submit","goSubmit","cancel","SuccessModalComponent","decode","tabIndex","submitFunction","arePropertiesValid","areParentsValid","isAdmin","isMaintainer","isContributor","isContributer","findVotWithStartDate","votArray","setMasterListId","handleDateChange","setOnSuccessCallback","func","onSuccessCallback","configureAsNew","isGeometryEditable","fetchGeoObjectType","fetchLocales","retJson","goPropertiesPre","goPropertiesPost","configureFromImportError","importError","importErrorId","resolution","configureAsExisting","fetchGeoObject","fetchHierarchies","locales","setLocales","typeTypeCode","getTypeAheadObservable","ptn","properties","parentSelector","changePage","nextPage","force","persistModelChanges","getMyTasks","pageNum","whereStatus","completeTask","taskId","setTaskStatus","status","contextMenuService","instance","Instance","nodes","currentHierarchy","hierarchyTypeDeleteExclusions","geoObjectTypeDeleteExclusions","options","displayField","actionMapping","mouse","click","tree","node","$event","treeNodeOnClick","contextMenu","handleOnMenu","refreshAll","isRA","isOrganizationRA","desiredHierarchy","setHierarchies","setNodesOnInit","excludeHierarchyTypeDeletes","excludeGeoObjectTypeDeletes","index","findIndex","rootGeoObjectTypes","treeModel","expandAll","setNodesForHierarchy","hierarchyType","getHierarchy","hierarchyId","rootGeoObjectType","processHierarchyNodes","updateHierarchy","getHierarchyLabel","child","gOT","childType","nodeMenuComponent","leafMenuComponent","preventDefault","stopPropagation","setFocusedNode","isExpanded","collapse","hierarchyOnClick","update","createHierarchy","onHierarchytTypeCreate","obj","ConfirmModalComponent","submitText","onConfirm","removeHierarchyType","editHierarchyType","getHierarchyTypePosition","onGeoObjTypeCreate","ModalTypes","danger","removeGeoObjectType","manageGeoObjectType","onGeoObjectTypeSubmitted","position","addChildAndRootToHierarchy","that","allGeoObjectTypes","toRoot","onNodeChange","current","deleteTreeNode","removeTreeNode","n","hasChildren","isActive","onDrop","element","allowDrop","TreeComponent","organizations","orgs","onSelect","gObj","selectedGeoObjectType","toggleIsLeaf","isLeaf","toggleIsGeometryEditable","confirmBsModalRef","geoObjectTypeManagementService","modalStateSubscription","unsubscribe","onModalStateChange","onGeoObjectTypeChange","close","modalStepIndicatorService","localizationService","geoObjectTypeChange","modalStepConfig","editGeoObjectType","setStepConfig","manageAttributes","onDeleteAttribute","defineAttributeModal","defineAttribute","editAttribute","removeAttributeType","attributeType","newAttribute","setAttribute","attributeInputComponent","isFormValid","isAttrValid","Object","assign","back","manageTermOption","openAddTermOptionForm","enableTermOptionForm","termOption","localeValues","replace","addTermOption","clearTermOption","deleteTermOption","removeTermOption","editTermOption","cancelTermOption","router","onStateChange","handleBack","handleNext","handleCancel","postalCode","handleSubmit","cancelText","navigate","onError","entityLabel","hasSynonym","createSynonym","ignoreDataAtLocation","locationLabel","undoAction","termLabel","termId","createOption","parentCode","ignoreValue","renderContent","pageTitle","importStrategies","NEW_AND_UPDATE","NEW_ONLY","UPDATE_ONLY","queueLimit","removeAfterUpload","url","uploader","FileUploader","onBuildItemForm","fileItem","form","append","importStrategy","onBeforeUploadItem","onCompleteItem","fileRef","onSuccessItem","onErrorItem","onClick","queue","uploadAll","onCreate","createDate","lastUpdateDate","admin","lists","onView","onEdit","pair","ret","onDelete","arr","onFormat","confirm","format","objectKeys","keys","requests","columns","filterCriteria","prop","sortable","width","refresh","selected","onExecute","changeRequest","request","onApproveAll","onRejectAll","requestTrackBy","toggle","parentElement","className","includes","toggleId","criteria","setActionStatus","approvalStatus","getActiveDetailComponent","actionType","endsWith","showActionDetail","curAction","cuDetail","endEdit","arDetail","spDetail","editingGeometry","hasDuplicateDate","vAttribute","onDateChange","vAttributes","snapDates","votArr","prev","formatDateString","onAddNewVersion","terms","editGeometry","getVersionData","versions","val","getDefaultLocaleVal","locale","defVal","locVal","setDateAttribute","version","opacity","newArray","dateObj","month","visible","onAdd","onRemove","items","entry","pType","uid","ancestors","ancestor","pService","route","p","page","count","order","isPublished","isRefreshing","searchPlaceholder","snapshot","paramMap","isCollapsed","onPageChange","onSort","clearFilters","search","toggleFilter","getValues","base","unshift","f","s","end","handleInputChange","handleListChange","isFilterable","dependency","editModal","onGoto","window","open","onPublish","subscription","interval","onNewGeoObject","onExport","location","href","encodeURIComponent","pollingData","onDeleteMasterListVersion","updateList","onViewMetadata","onPublishShapefile","onDownloadShapefile","ioService","activeJobsPage","completeJobsPage","activeTimeCounter","completeTimeCounter","isViewAllOpen","onActiveJobsPageChange","onCompleteJobsPageChange","formatJobStatus","job","formatStepConfig","stepConfig","stage","getJobStatus","getCompletedStatus","jobStage","targetStage","jobPos","onViewAllCompleteJobs","onCancelScheduledJob","jobId","_stepConfig","allSelected","timeCounter","isPolling","hasRowValidationProblem","stopPolling","formatAffectedRows","rows","formatValidationResolve","onProblemResolved","getFriendlyProblemType","probType","onConflictAction","importErrors","problems","startPolling","onViewAllActiveJobs","toggleAll","row","onReuploadAndResume","onResolveScheduledJob","onProblemResolvedListener","onEditGeoObject","searchLabel","getString","conflict","getValidationProblemDisplayLabel","onIgnore","cfg","validationProblemId","onCreateSynonym","title","warning","taskService","inProgressTasks","completedTasks","onInProgressTasksPageChange","upper","str","toUpperCase","onCompletedTasksPageChange","onCompleteTask","task","onMoveTaskToInProgress","onViewAllCompletedTasks","geoObjectJson","canDeactivate","afterDeactivate","isDeactivating","unlockActionSync","startEdit","$","ajax","method","success","async","original","ChangeRequest","AbstractAction","UpdateGeoObjectAction","CreateGeoObjectAction","AddChildAction","RemoveChildAction","GovernanceStatus","PageEvent","SetParentAction","unassignedGeoObjTypes","buildUnassignedGeoObjTypes","getNewLocaleInfo","installLocale","language","country","variant","routes","path","component","canActivate","AuthGuard","MaintainerGuard","ContributerGuard","LocationStrategy","useClass","HashLocationStrategy","forChild"],"mappings":"2IAAA,SACA,OACA,QACA,QACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,OAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UAEA,O,kTAGA,4B,wCAiIaA,I,8DAAAA,IAAc,UA3Cf,CACV,GAAAC,WACA,GAAAC,iBACA,GAAAC,2BACA,GAAAC,qBACA,GAAAC,UACA,GAAAC,+BACA,GAAAC,gBACA,GAAAC,YACA,EAAAC,SACA,GAAAC,oBACA,GAAAC,wBACA,SAjGQ,CACR,EAAAC,aACA,EAAAC,aACA,EAAAC,YACA,EAAAC,oBACA,EAAAC,iBAEA,EAAAC,WACA,EAAAC,kBACA,EAAAC,iBACA,EAAAC,cACA,EAAAC,gBACA,EAAAC,kBACA,EAAAC,eACA,EAAAC,oBACA,GAAAC,aACA,GAAAC,0B,EAjBF,GAiIa,EAAA1B,mB,iEAAAA,GAAc,eA7GzB,EAAA2B,mBACA,EAAAC,sBACA,EAAAC,qCACA,EAAAC,8BACA,EAAAC,yBACA,EAAAC,kCACA,EAAAC,kCACA,EAAAC,+BACA,EAAAC,+BACA,EAAAC,qCACA,EAAAC,wBACA,EAAAC,wBACA,EAAAC,sBACA,EAAAC,6BACA,EAAAC,yBACA,EAAAC,yBACA,EAAAC,qBACA,EAAAC,0BACA,GAAAC,kBACA,GAAAC,gCACA,EAAAC,mCACA,EAAAC,0BACA,EAAAC,wBACA,EAAAC,6BACA,EAAAC,kCACA,EAAAC,4BACA,EAAAC,2BACA,EAAAC,wBACA,EAAAC,uBACA,EAAAC,wCACA,EAAAC,6BA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","file":"1.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedInputComponent } from './component/form-fields/localized-input/localized-input.component';\nimport { LocalizedTextComponent } from './component/form-fields/localized-text/localized-text.component';\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { CreateHierarchyTypeModalComponent } from './component/hierarchy/modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './component/hierarchy/modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './component/hierarchy/modals/create-geoobjtype-modal.component';\nimport { ManageAttributesModalComponent } from './component/hierarchy/geoobjecttype-management/manage-attributes-modal.component';\nimport { DefineAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/define-attribute-modal-content.component';\nimport { EditAttributeModalContentComponent } from './component/hierarchy/geoobjecttype-management/edit-attribute-modal-content.component';\nimport { ShapefileModalComponent } from './component/importer/modals/shapefile-modal.component';\nimport { AttributesPageComponent } from './component/importer/modals/attributes-page.component';\nimport { LocationPageComponent } from './component/importer/modals/location-page.component';\nimport { LocationProblemPageComponent } from './component/importer/modals/location-problem-page.component';\nimport { LocationProblemComponent } from './component/importer/modals/location-problem.component';\nimport { TermProblemPageComponent } from './component/importer/modals/term-problem-page.component';\nimport { TermProblemComponent } from './component/importer/modals/term-problem.component';\nimport { SpreadsheetModalComponent } from './component/importer/modals/spreadsheet-modal.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { TermOptionWidgetComponent } from './component/hierarchy/geoobjecttype-management/term-option-widget.component';\nimport { AttributeInputComponent } from './component/hierarchy/geoobjecttype-management/attribute-input.component';\nimport { EditTermOptionInputComponent } from './component/hierarchy/geoobjecttype-management/edit-term-option-input.component';\nimport { ManageTermOptionsComponent } from './component/hierarchy/geoobjecttype-management/manage-term-options.component';\nimport { GeoObjectTypeInputComponent } from './component/hierarchy/geoobjecttype-management/geoobjecttype-input.component';\nimport { ManageGeoObjectTypeModalComponent } from './component/hierarchy/modals/manage-geoobjecttype-modal.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { PublishModalComponent } from './component/master-list/publish-modal.component';\nimport { ExportFormatModalComponent } from './component/master-list/export-format-modal.component';\nimport { RequestTableComponent } from './component/crtable/request-table.component';\nimport { CreateUpdateGeoObjectDetailComponent } from './component/crtable/action-detail/create-update-geo-object/detail.component';\nimport { AddRemoveChildDetailComponent } from './component/crtable/action-detail/add-remove-child/detail.component';\nimport { SetParentDetailComponent } from './component/crtable/action-detail/set-parent/set-parent-detail.component';\nimport { GeoObjectSharedAttributeEditorComponent } from './component/geoobject-shared-attribute-editor/geoobject-shared-attribute-editor.component';\nimport { ManageVersionsModalComponent } from './component/geoobject-shared-attribute-editor/manage-versions-modal.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { GeoObjectEditorComponent } from './component/geoobject-editor/geoobject-editor.component';\nimport { GeoObjectEditorMapComponent } from './component/geoobject-editor-map/geoobject-editor-map.component';\nimport { SimpleEditControl } from './component/geoobject-editor-map/simple-edit-control/simple-edit-control.component';\nimport { CascadingGeoSelector } from './component/cascading-geo-selector/cascading-geo-selector';\nimport { ManageParentVersionsModalComponent } from './component/cascading-geo-selector/manage-parent-versions-modal.component';\nimport { ActionDetailModalComponent } from './component/crtable/action-detail/action-detail-modal.component';\nimport { ShapefileComponent } from './component/importer/shapefile.component';\nimport { SpreadsheetComponent } from './component/importer/spreadsheet.component';\nimport { DataExportComponent } from './component/data-export/data-export.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { PublishedMasterListHistoryComponent } from './component/master-list/published-master-list-history.component';\nimport { MasterListHistoryComponent } from './component/master-list/master-list-history.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { JobConflictModalComponent } from './component/scheduled-jobs/conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './component/scheduled-jobs/conflict-widgets/reupload-modal.component';\nimport { ParentReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/parent-reference-problem-widget.component';\nimport { TermReferenceProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/term-reference-problem-widget.component';\nimport { RowValidationProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/row-validation-problem-widget.component';\nimport { StepIndicatorComponent } from './component/scheduled-jobs/step-indicator.component';\nimport { ImportProblemWidgetComponent } from './component/scheduled-jobs/conflict-widgets/import-problem-widget.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { GeoObjectAttributeCodeValidator } from './factory/form-validation.factory';\n\nimport { GeoObjectTypePipe } from './pipe/geoobjecttype.pipe';\nimport { GeoObjectAttributeExcludesPipe } from './pipe/geoobject-attribute-excludes.pipe';\nimport { ToEpochDateTimePipe } from './pipe/to-epoch-date-time.pipe';\nimport { RegistryService } from './service/registry.service';\nimport { TaskService } from './service/task.service';\nimport { HierarchyService } from './service/hierarchy.service';\nimport { LocalizationManagerService } from './service/localization-manager.service';\nimport { ChangeRequestService } from './service/change-request.service';\nimport { IOService } from './service/io.service';\nimport { MapService } from './service/map.service';\nimport { GeoObjectTypeManagementService } from './service/geoobjecttype-management.service'\n\nimport { RegistryRoutingModule } from './registry-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\nimport '../rxjs-extensions';\n\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\t//        ModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule,\n\t\tSharedModule,\n\t\tRegistryRoutingModule\n\t],\n\tdeclarations: [\n\t\tHierarchyComponent,\n\t\tRequestTableComponent,\n\t\tCreateUpdateGeoObjectDetailComponent,\n\t\tAddRemoveChildDetailComponent,\n\t\tSetParentDetailComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tShapefileModalComponent,\n\t\tAttributesPageComponent,\n\t\tLocationPageComponent,\n\t\tLocationProblemPageComponent,\n\t\tLocationProblemComponent,\n\t\tTermProblemPageComponent,\n\t\tTermProblemComponent,\n\t\tSpreadsheetModalComponent,\n\t\tGeoObjectTypePipe,\n\t\tGeoObjectAttributeCodeValidator,\n\t\tEditAttributeModalContentComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tLocalizedInputComponent,\n\t\tLocalizedTextComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tGeoObjectAttributeExcludesPipe,\n\t\tToEpochDateTimePipe,\n\t\tGeoObjectEditorMapComponent,\n\t\tSimpleEditControl,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tCascadingGeoSelector,\n\t\tManageParentVersionsModalComponent,\n\t\tActionDetailModalComponent,\n\t\tHierarchyComponent,\n\t\tShapefileComponent,\n\t\tSpreadsheetComponent,\n\t\tDataExportComponent,\n\t\t// Master List screens\n\t\tMasterListManagerComponent,\n\t\tMasterListComponent,\n\t\tMasterListHistoryComponent,\n\t\tPublishedMasterListHistoryComponent,\n\t\tPublishModalComponent,\n\t\tMasterListViewComponent,\n\t\t// Scheduled jobs\n\t\tExportFormatModalComponent,\n\t\tScheduledJobsComponent,\n\t\tJobComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tParentReferenceProblemWidgetComponent,\n\t\tTermReferenceProblemWidgetComponent,\n\t\tRowValidationProblemWidgetComponent,\n\t\tStepIndicatorComponent,\n\t\tImportProblemWidgetComponent,\n\t\tTaskViewerComponent\n\t],\n\tproviders: [\n\t\tMapService,\n\t\tHierarchyService,\n\t\tLocalizationManagerService,\n\t\tChangeRequestService,\n\t\tIOService,\n\t\tGeoObjectTypeManagementService,\n\t\tRegistryService,\n\t\tTaskService,\n\t\tDatePipe,\n\t\tToEpochDateTimePipe,\n\t\tStepIndicatorComponent\n\t],\n\tentryComponents: [\n\t\tAddChildToHierarchyModalComponent,\n\t\tCreateGeoObjTypeModalComponent,\n\t\tManageAttributesModalComponent,\n\t\tDefineAttributeModalContentComponent,\n\t\tEditAttributeModalContentComponent,\n\t\tCreateHierarchyTypeModalComponent,\n\t\tShapefileModalComponent,\n\t\tSpreadsheetModalComponent,\n\t\tTermOptionWidgetComponent,\n\t\tAttributeInputComponent,\n\t\tEditTermOptionInputComponent,\n\t\tManageGeoObjectTypeModalComponent,\n\t\tGeoObjectTypeInputComponent,\n\t\tManageTermOptionsComponent,\n\t\tGeoObjectSharedAttributeEditorComponent,\n\t\tManageVersionsModalComponent,\n\t\tManageParentVersionsModalComponent,\n\t\tSubmitChangeRequestComponent,\n\t\tGeoObjectEditorComponent,\n\t\tPublishModalComponent,\n\t\tExportFormatModalComponent,\n\t\tDataPageComponent,\n\t\tChangeRequestPageComponent,\n\t\tActionDetailModalComponent,\n\t\tJobConflictModalComponent,\n\t\tReuploadModalComponent,\n\t\tStepIndicatorComponent\n\t]\n})\nexport class RegistryModule { }\n","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { GeoObject, GeoObjectType, Attribute, Term, MasterList, MasterListVersion, ParentTreeNode, \r\n    ChildTreeNode, ValueOverTime, GeoObjectOverTime, HierarchyOverTime, ScheduledJob, PaginationPage, MasterListByOrg } from '../model/registry';\r\nimport { HierarchyNode, HierarchyType } from '../model/hierarchy';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\nimport { templateJitUrl } from '@angular/compiler';\r\nimport { Organization } from '../../admin/model/settings';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class RegistryService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    init(): Promise<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }> {\r\n        return this.http.get<{ types: GeoObjectType[], hierarchies: HierarchyType[], locales: string[] }>( acp + '/cgr/init' )\r\n            .toPromise();\r\n    }\r\n    \r\n    // param types: array of GeoObjectType codes. If empty array then all GeoObjectType objects are returned.\r\n    getGeoObjectTypes( types: any ): Promise<GeoObjectType[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'types', JSON.stringify( types ) );\r\n\r\n        return this.http\r\n            .get<GeoObjectType[]>( acp + '/cgr/geoobjecttype/get-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getParentGeoObjects( childId: string, childTypeCode: string, parentTypes: any, recursive: boolean, date: string ): Promise<ParentTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'childId', childId )\r\n        params = params.set( 'childTypeCode', childTypeCode )\r\n        params = params.set( 'parentTypes', JSON.stringify( parentTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        if ( date != null ) {\r\n            params = params.set( 'date', date );\r\n        }\r\n\r\n        return this.http\r\n            .get<ParentTreeNode>( acp + '/cgr/geoobject/get-parent-geoobjects', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    getChildGeoObjects( parentId: string, parentTypeCode: string, childrenTypes: any, recursive: boolean ): Promise<ChildTreeNode> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'parentId', parentId )\r\n        params = params.set( 'parentTypeCode', parentTypeCode )\r\n        params = params.set( 'childrenTypes', JSON.stringify( childrenTypes ) )\r\n        params = params.set( 'recursive', JSON.stringify( recursive ) );\r\n\r\n        return this.http\r\n            .get<ChildTreeNode>( acp + '/cgr/geoobject/getchildren', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    newGeoObjectInstance( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectType( gtJSON: string ): Promise<GeoObjectType> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/create', JSON.stringify( { 'gtJSON': gtJSON } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    updateGeoObjectType( gtJSON: GeoObjectType ): Promise<GeoObjectType> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<GeoObjectType>( acp + '/cgr/geoobjecttype/update', JSON.stringify( { \"gtJSON\": gtJSON } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectType( code: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/delete', JSON.stringify( { code: code } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    addAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/addattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeType( geoObjTypeId: string, attribute: Attribute ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/updateattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeType': attribute } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeType( geoObjTypeId: string, attributeName: string ): Promise<boolean> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<boolean>( acp + '/cgr/geoobjecttype/deleteattribute', JSON.stringify( { 'geoObjTypeId': geoObjTypeId, 'attributeName': attributeName } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    addAttributeTermTypeOption( parentTermCode: string, term: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( { 'parentTermCode': parentTermCode, 'termJSON': term } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    updateAttributeTermTypeOption( termJSON: Term ): Promise<Term> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/updateterm', JSON.stringify( { 'termJSON': termJSON } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteAttributeTermTypeOption( termCode: string ): Promise<Attribute> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n\r\n        return this.http\r\n            .post<Attribute>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { 'termCode': termCode } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObject( id: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'id', id )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectBounds( code: string, typeCode: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n    \r\n    getGeoObjectBoundsAtDate( code: string, typeCode: string, date: string ): Promise<number[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n        params = params.set( 'date', date );\r\n\r\n        return this.http\r\n            .get<number[]>( acp + '/cgr/geoobject-time/get-bounds', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectByCode( code: string, typeCode: string ): Promise<GeoObject> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        params = params.set( 'code', code )\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        return this.http\r\n            .get<GeoObject>( acp + '/cgr/geoobject/get-code', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForGeoObject( code: string, typeCode: string ): Promise<HierarchyOverTime[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'typeCode', typeCode );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<HierarchyOverTime[]>( acp + '/cgr/geoobject/get-hierarchies-over-time', { params: params } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string, date: string ): Promise<GeoObject> {\r\n\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = hierarchy;\r\n        }\r\n\r\n        if ( date != null ) {\r\n            params.date = date;\r\n        }\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestionsTypeAhead( text: string, type: string ): Promise<GeoObject> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<GeoObject>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/etl/get-active', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getCompletedScheduledJobs(pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/etl/get-completed', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getScheduledJob(historyId: string, pageSize: number, pageNumber: number, onlyUnresolved: boolean): Promise<ScheduledJob> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set(\"historyId\", historyId);\r\n        params = params.set(\"pageSize\", pageSize.toString());\r\n        params = params.set(\"pageNumber\", pageNumber.toString())\r\n        params = params.set(\"onlyUnresolved\", onlyUnresolved.toString());\r\n\r\n        return this.http\r\n            .get<ScheduledJob>( acp + '/etl/get-import-details', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n    resolveScheduledJob(historyId: string): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/import-resolve', JSON.stringify( { historyId: historyId } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n    \r\n    submitValidationResolve( config: any ): Promise<any> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n  \r\n      this.eventService.start();\r\n  \r\n      return this.http\r\n        .post<MasterList>( acp + '/etl/validation-resolve', JSON.stringify( { config: config } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n    \r\n    submitErrorResolve( config: any ): Promise<any> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<MasterList>( acp + '/etl/error-resolve', JSON.stringify( { config: config } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n\r\n    getMasterLists(): Promise<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ locales: string[], lists: { label: string, oid: string, createDate: string, lastUpdateDate: string }[] }>( acp + '/master-list/list-all', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListHistory( oid: string, versionType: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n        params = params.set( 'versionType', versionType );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/versions', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getMasterListVersion( oid: string ): Promise<MasterListVersion> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterListVersion>( acp + '/master-list/version', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getLocales(): Promise<string[]> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<string[]>( acp + '/localization/get-locales', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectOverTime( geoObjectCode: string, geoObjectTypeCode: string ): Promise<GeoObjectOverTime> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        // let params: HttpParams = new HttpParams();\r\n        // params = params.set( 'geoObjectCode', geoObjectCode );\r\n        // params = params.set( 'geoObjectTypeCode', geoObjectTypeCode );\r\n        // params = params.set( 'attributeName', attributeName );\r\n\r\n        // return this.http\r\n        //     .get<ValueOverTime[]>( acp + '/cgr/geoobject/getAttributeVersions', { params: params } )\r\n        //     .toPromise();\r\n\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', geoObjectCode );\r\n        params = params.set( 'typeCode', geoObjectTypeCode );\r\n\r\n        return this.http\r\n            .get<GeoObjectOverTime>( acp + '/cgr/geoobject-time/get-code', { params: params } )\r\n            .toPromise();\r\n\r\n    }\r\n\r\n    newGeoObjectOverTime( typeCode: string ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject-time/newGeoObjectInstance', JSON.stringify( { 'typeCode': typeCode } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n\r\n\r\n\r\n    // getAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string ): any[] {\r\n    //     let test =[\r\n    //         {\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":{\"localeValues\":[\r\n    //             {\"locale\":\"defaultLocale\",\"value\":\"Anlong Veaeng\"}]}}\r\n    //     ]\r\n\r\n    //     // let test = [{\"startDate\":1546300800000,\"endDate\":95649033600000,\"value\":\"test\"}];\r\n\r\n    //     return test;\r\n    // }\r\n\r\n\r\n    setAttributeVersions( geoObjectCode: string, geoObjectTypeCode: string, attributeName: string, collection: ValueOverTime[] ): Promise<Response> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            geoObjectCode: geoObjectCode,\r\n            geoObjectTypeCode: geoObjectTypeCode,\r\n            attributeName: attributeName,\r\n            collection: collection\r\n\r\n        } as any;\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Response>( acp + '/cgr/geoobject/setAttributeVersions', JSON.stringify( params ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterList( list: MasterList ): Promise<MasterList> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterList>( acp + '/master-list/create', JSON.stringify( { list: list } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    createMasterListVersion( oid: string, forDate: string ): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<MasterListVersion>( acp + '/master-list/create-version', JSON.stringify( { oid: oid, forDate: forDate } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    publishMasterListVersions( oid: string ): Promise<{ job: string }> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<{ job: string }>( acp + '/master-list/publish-versions', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteMasterList( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    deleteMasterListVersion( oid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/master-list/remove-version', JSON.stringify( { oid: oid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    publishMasterList( oid: string ): Observable<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http.post<MasterListVersion>( acp + '/master-list/publish', JSON.stringify( { oid: oid } ), { headers: headers } );\r\n    }\r\n\r\n    getMasterList( oid: string ): Promise<MasterList> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<MasterList>( acp + '/master-list/get', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    /*\r\n     * Not really part of the RegistryService\r\n     */\r\n    applyGeoObjectEdit( parentTreeNode: HierarchyOverTime[], geoObject: GeoObjectOverTime, isNew: boolean, masterListId: string, notes: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTreeNode: parentTreeNode, geoObject: geoObject, isNew: isNew, masterListId: masterListId };\r\n\r\n        if ( notes != null ) {\r\n            params['notes'] = notes;\r\n        }\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geoobject-editor/apply', JSON.stringify( params ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    data( oid: string, pageNumber: number, pageSize: number, filter: { attribute: string, value: string }[], sort: { attribute: string, order: string } ): Promise<any> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            sort: sort\r\n        } as any;\r\n\r\n        if ( pageNumber != null ) {\r\n            params.pageNumber = pageNumber;\r\n        }\r\n\r\n        if ( pageSize != null ) {\r\n            params.pageSize = pageSize;\r\n        }\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/master-list/data', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    values( oid: string, value: string, attributeName: string, valueAttribute: string, filter: { attribute: string, value: string }[] ): Promise<{ label: string, value: string }[]> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid,\r\n            attributeName: attributeName,\r\n            valueAttribute: valueAttribute\r\n        } as any;\r\n\r\n        if ( filter.length > 0 ) {\r\n            params.filter = filter;\r\n        }\r\n\r\n        if ( value != null && value.length > 0 ) {\r\n            params.value = value;\r\n        }\r\n\r\n\r\n        return this.http\r\n            .post<{ label: string, value: string }[]>( acp + '/master-list/values', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    publishShapefile( oid:string  ): Promise<MasterListVersion> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            oid: oid\r\n        } as any;\r\n\r\n        return this.http\r\n            .post<MasterListVersion>( acp + '/master-list/generate-shapefile', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    progress( oid: string ): Promise<Progress> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'oid', oid );\r\n\r\n        return this.http\r\n            .get<Progress>( acp + '/master-list/progress', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\tgetMasterListsByOrg(): Promise<{ locales: string[], orgs: MasterListByOrg[] }> {\r\n\t\tlet params: HttpParams = new HttpParams();\r\n\r\n\t\treturn this.http\r\n\t\t\t.get<{ locales: string[], orgs: MasterListByOrg[] }>(acp + '/master-list/list-org', { params: params })\r\n\t\t\t.toPromise();\r\n\t}\r\n\r\n    getPublishMasterListJobs(oid: string, pageSize: number, pageNumber: number, sortAttr: string, isAscending: boolean): Promise<PaginationPage> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set('oid', oid);\r\n        params = params.set('pageSize', pageSize.toString());\r\n        params = params.set('pageNumber', pageNumber.toString());\r\n        params = params.set('sortAttr', sortAttr);\r\n        params = params.set('isAscending', isAscending.toString());\r\n\r\n\r\n        return this.http\r\n            .get<PaginationPage>( acp + '/master-list/get-publish-jobs', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n    getOrganizations(): Promise<Organization[]> {\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<Organization[]>(acp + '/cgr/organizations/get-all')\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { ImportConfiguration, Synonym, Location, Term } from '../model/io';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class IOService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    importSpreadsheet( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    cancelImport( configuration: ImportConfiguration ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/etl/cancel-import', JSON.stringify( { configuration: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    importShapefile( configuration: ImportConfiguration ): Promise<ImportConfiguration> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<ImportConfiguration>( acp + '/etl/import', JSON.stringify( { json: configuration } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    listGeoObjectTypes( includeLeafTypes: boolean ): Promise<{ label: string, code: string, orgCode: string }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'includeLeafTypes', includeLeafTypes.toString() );\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, orgCode: string }[]>( acp + '/cgr/geoobjecttype/list-types', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getTypeAncestors( code: string, hierarchyCode: string ): Promise<Location[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'hierarchyCode', hierarchyCode );\r\n\r\n        return this.http\r\n            .get<Location[]>( acp + '/cgr/geoobjecttype/get-ancestors', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n    getHierarchiesForType( code: string, includeTypes: boolean ): Promise<{ label: string, code: string, parents: { label: string, code: string }[] }[]> {\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'code', code );\r\n        params = params.set( 'includeTypes', includeTypes.toString() );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .get<{ label: string, code: string, parents: { label: string, code: string }[] }[]>( acp + '/cgr/geoobjecttype/get-hierarchies', { params: params } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    getGeoObjectSuggestions( text: string, type: string, parent: string, hierarchy: string ): Promise<any> {\r\n        \r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = {\r\n            text: text,\r\n            type: type,\r\n        } as any;\r\n\r\n        if ( parent != null && hierarchy != null ) {\r\n            params.parent = parent;\r\n            params.hierarchy = parent;\r\n        }\r\n\r\n        return this.http\r\n            .post<any>( acp + '/cgr/geoobject/suggestions', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    createGeoObjectSynonym( entityId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/geo-synonym/createGeoEntitySynonym', JSON.stringify( { entityId: entityId, label: label } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise();\r\n    }\r\n\r\n    deleteGeoObjectSynonym( synonymId: string, vOid: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        this.eventService.start();\r\n\r\n        return this.http\r\n            .post<void>( acp + '/geo-synonym/deleteGeoEntitySynonym', JSON.stringify( { synonymId: synonymId, vOid: vOid } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n            .toPromise()\r\n    }\r\n\r\n    getTermSuggestions( mdAttributeId: string, text: string, limit: string ): Promise<{ text: string, data: any }[]> {\r\n\r\n        let params: HttpParams = new HttpParams();\r\n        params = params.set( 'mdAttributeId', mdAttributeId );\r\n        params = params.set( 'text', text );\r\n        params = params.set( 'limit', limit );\r\n\r\n        return this.http\r\n            .get<{ text: string, data: any }[]>( acp + '/uploader/getClassifierSuggestions', { params: params } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTermSynonym( classifierId: string, label: string ): Promise<Synonym> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { classifierId: classifierId, label: label } );\r\n\r\n        return this.http\r\n            .post<Synonym>( acp + '/uploader/createClassifierSynonym', data, { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    deleteTermSynonym( synonymId: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let data = JSON.stringify( { synonymId: synonymId } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/uploader/deleteClassifierSynonym', data, { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n    createTerm( label: string, code: string, parentTermCode: string ): Promise<Term> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        let params = { parentTermCode: parentTermCode, termJSON: { label: label, code: code } };\r\n\r\n        return this.http\r\n            .post<Term>( acp + '/cgr/geoobjecttype/addterm', JSON.stringify( params ), { headers: headers } )\r\n            .toPromise();\r\n    }\r\n\r\n    removeTerm( termCode: string ): Promise<void> {\r\n        let headers = new HttpHeaders( {\r\n            'Content-Type': 'application/json'\r\n        } );\r\n\r\n        return this.http\r\n            .post<void>( acp + '/cgr/geoobjecttype/deleteterm', JSON.stringify( { termCode: termCode } ), { headers: headers } )\r\n            .toPromise()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { HierarchyType } from '../model/hierarchy';\nimport { TreeEntity } from '../model/registry';\nimport { EventService } from '../../shared/service/event.service';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class HierarchyService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    getHierarchyTypes( types: any ): Promise<HierarchyType[]> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'types', JSON.stringify(types) );\n        \n        return this.http\n            .get<HierarchyType[]>( acp + '/cgr/hierarchytype/get-all', {params: params})\n            .toPromise();\n    }\n    \n    addChildToHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n\t   let headers = new HttpHeaders( {\n           'Content-Type': 'application/json'\n       } );\n\n       this.eventService.start();\n\n       return this.http\n           .post<HierarchyType>( acp + '/cgr/hierarchytype/add', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n           .toPromise();\n    }\n    \n    removeFromHierarchy( hierarchyCode: string, parentGeoObjectTypeCode: string, childGeoObjectTypeCode: string ): Promise<HierarchyType> {\n\n \t   let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/remove', JSON.stringify( { hierarchyCode : hierarchyCode, parentGeoObjectTypeCode : parentGeoObjectTypeCode, childGeoObjectTypeCode : childGeoObjectTypeCode } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n     }\n    \n    createHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/create', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    updateHierarchyType( htJSON: string): Promise<HierarchyType> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        });\n        \n        this.eventService.start();\n\n        return this.http\n            .post<HierarchyType>( acp + '/cgr/hierarchytype/update', JSON.stringify({ 'htJSON': htJSON }), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n    \n    deleteHierarchyType( code: string ): Promise<TreeEntity> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n        \n        this.eventService.start();\n\n        return this.http\n            .post<TreeEntity>( acp + '/cgr/hierarchytype/delete', { 'code': code }, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise()\n    }\n\n}\n","import { LocalizedValue } from '../../shared/model/core';\nimport { LocalizationService } from '../../shared/service/localization.service';\nimport { ImportConfiguration } from './io';\nimport { Organization } from '../../admin/model/settings';\n\nexport const PRESENT: string = '5000-12-31'\n\nexport class TreeEntity {\n\tid: string;\n\tname: string;\n\thasChildren: boolean;\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\n\tconstructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n\t\tthis.code = code;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t}\n\tchildren: Term[] = [];\n\n\taddChild(term: Term) {\n\t\tthis.children.push(term);\n\t}\n}\n\nexport class GeoObject {\n\ttype: string;\n\tgeometry: any;\n\tproperties: {\n\t\tuid: string,\n\t\tcode: string,\n\t\tdisplayLabel: LocalizedValue,\n\t\ttype: string,\n\t\tstatus: string[],\n\t\tsequence: string\n\t\tcreateDate: string,\n\t\tlastUpdateDate: string,\n\t};\n}\n\nexport class GeoObjectType {\n\tcode: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tgeometryType: string;\n\tisLeaf: boolean;\n\tisGeometryEditable: boolean;\n\torganizationCode: string;\n\tattributes: Array<Attribute | AttributeTerm | AttributeDecimal> = [];\n}\n\nexport class Task {\n  id: string;\n  templateKey: string;\n  msg: string;\n  title: string;\n  status: string;\n  createDate: number;\n  completedDate: number;\n}\n\n// export class Attribute {\n\n//   name: string;\n//   type: string;\n//   label: string;\n//   description: string;\n//   isDefault: boolean;\n// }\n\n// export class AttributeTerm extends Attribute {\n//     descendants: Attribute[];\n//     rootTerm: string;\n// }\n\nexport class GeoObjectOverTime {\n\n\tgeoObjectType: GeoObjectType;\n\n\tattributes: any;\n\n\tpublic constructor(geoObjectType: GeoObjectType, attributes: any) {\n\t\tthis.geoObjectType = geoObjectType;\n\t\tthis.attributes = attributes;\n\t}\n\n\tpublic getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n\t\tlet retVot = { startDate: date, endDate: null, value: null };\n\n\t\tconst time = date.getTime();\n\n\t\tfor (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n\t\t\tlet attr = this.geoObjectType.attributes[i];\n\n\t\t\tif (attr.code === attrCode) {\n\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\tretVot.value = lService.create();\n\t\t\t\t}\n\n\t\t\t\tif (attr.isChangeOverTime) {\n\t\t\t\t\tlet values = this.attributes[attr.code].values;\n\n\t\t\t\t\tvalues.forEach(vot => {\n\n\t\t\t\t\t\tconst startDate = Date.parse(vot.startDate);\n\t\t\t\t\t\tconst endDate = Date.parse(vot.endDate);\n\n\t\t\t\t\t\tif (time >= startDate && time <= endDate) {\n\n\t\t\t\t\t\t\tif (attr.type === 'local') {\n\t\t\t\t\t\t\t\tretVot.value = JSON.parse(JSON.stringify(vot.value));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (attr.type === 'term' && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n\t\t\t\t\t\t\t\tretVot.value = vot.value[0];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tretVot.value = vot.value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tretVot.value = this.attributes[attr.code];\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn retVot;\n\t}\n}\n\nexport class ValueOverTime {\n\tstartDate: string;\n\tendDate: string;\n\tvalue: any;\n\tremovable?: boolean;\n}\n\nexport class Attribute {\n\tcode: string;\n\ttype: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tisDefault: boolean;\n\trequired: boolean;\n\tunique: boolean;\n\tisChangeOverTime?: boolean;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n\t\tthis.code = code;\n\t\tthis.type = type;\n\t\tthis.label = label;\n\t\tthis.description = description;\n\t\tthis.isDefault = isDefault;\n\t\tthis.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n\t\tthis.unique = unique;\n\t\tthis.isChangeOverTime = isChangeOverTime;\n\t}\n\n}\n\nexport class AttributeTerm extends Attribute {\n\t//descendants: Attribute[];\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n\n\trootTerm: Term = new Term(null, null, null);\n\n\ttermOptions: Term[] = [];\n\n\tsetRootTerm(term: Term) {\n\t\tthis.rootTerm = term;\n\t}\n}\n\nexport class AttributeDecimal extends Attribute {\n\tprecision: number = 32;\n\tscale: number = 8;\n\n\tconstructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n\t\tsuper(code, type, label, description, isDefault, required, unique, isChange);\n\t}\n}\n\nexport enum GeoObjectTypeModalStates {\n\t\"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n\t\"editAttribute\" = \"EDIT-ATTRIBUTE\",\n\t\"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n\t\"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n\t\"editTermOption\" = \"EDIT-TERM-OPTION\",\n\t\"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport class TreeNode {\n\tgeoObject: GeoObject;\n\thierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n\tchildren: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n\tparents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n\tstate: string;\n\tattribute: any;\n\ttermOption: any;\n}\n\nexport class PaginationPage {\n\tpageNumber: number;\n\tcount: number;\n\tpageSize: number;\n\tresults: any[];\n}\n\nexport class ScheduledJob {\n  jobId: string;\n\tfileName: string;\n\thistoryId: string;\n\tstage: string;\n\tstatus: string;\n\tauthor: string;\n\tcreateDate: string;\n\tlastUpdateDate: string;\n\tworkProgress: number;\n\tworkTotal: number;\n\tstartDate: string;\n\tendDate: string;\n\timportedRecords: number;\n\tconfiguration: ImportConfiguration;\n\timportErrors: PaginationPage;\n\tproblems: PaginationPage;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n\tstepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n\texception: ServerException;\n\tobject: ImportErrorObject;\n\tobjectType: string;\n\tid: string;\n\tresolution: string;\n\tselected?: boolean;\n}\n\nexport class ServerException {\n\tattributes: ServerExceptionAttribute[];\n\ttype: string;\n\tmessage: string;\n}\n\nexport class ServerExceptionAttribute {\n\tvalue: string;\n\tkey: string;\n}\n\nexport class ImportErrorObject {\n\tgeoObject: GeoObjectOverTime;\n\tparents: HierarchyOverTime[];\n\tisNew: boolean;\n}\n\nexport class StepConfig {\n\tsteps: Step[];\n}\n\nexport class Step {\n\tlabel: string;\n\tcomplete: boolean;\n\tenabled: boolean;\n}\n\nexport class MasterList {\n\toid: string;\n\ttypeCode: string;\n\tdisplayLabel: LocalizedValue;\n\tcode: string;\n\trepresentativityDate: Date;\n\tpublishDate: Date;\n\tlistAbstract: string;\n\tprocess: string;\n\tprogress: string;\n\taccessConstraints: string;\n\tuseConstraints: string;\n\tacknowledgements: string;\n\tdisclaimer: string;\n\tcontactName: string;\n\torganization: string;\n\ttelephoneNumber: string;\n\temail: string;\n\thierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n\tleaf: boolean;\n\tfrequency: string;\n\tisMaster: boolean;\n\tvisibility: string;\n\tadmin: boolean;\n\tversions?: MasterListVersion[]\n}\n\nexport class MasterListVersion {\n\tdisplayLabel: string;\n\toid: string;\n\ttypeCode: string;\n\tleaf: boolean;\n\tmasterlist: string;\n\tforDate: string;\n\tcreateDate: string;\n\tpublishDate: string;\n\tattributes: any[];\n\tisGeometryEditable: boolean;\n\tlocales?: string[];\n\tshapefile?: boolean;\n}\n\nexport class HierarchyOverTime {\n\tcode: string;\n\tlabel: string;\n\ttypes: {\n\t\tcode: string;\n\t\tlabel: string;\n\t}[];\n\tentries: {\n\t\tstartDate: string;\n\t\tendDate: string;\n\t\tparents: { [k: string]: { text: string; geoObject: GeoObject } };\n\t}[];\n}\n\nexport enum ImportStrategy {\n\t\"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n\t\"NEW_ONLY\" = \"NEW_ONLY\",\n\t\"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport class MasterListByOrg {\n\toid: string;\n\tlabel: string;\n\tlists: { label: string, oid: string, createDate: string, lastUpdateDate: string, admin: boolean, isMaster: boolean }[];\n}\n\n\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\nimport {  ManageGeoObjectTypeModalState } from '../model/registry';\r\n\r\n\r\ndeclare var acp: string;\r\n\r\n@Injectable()\r\nexport class GeoObjectTypeManagementService {\r\n\r\n    modalState: ManageGeoObjectTypeModalState;\r\n    private modalStateChangedSource = new Subject<ManageGeoObjectTypeModalState>();\r\n    modalStepChange = this.modalStateChangedSource.asObservable();\r\n\r\n    constructor(  ) { }\r\n\r\n    public getModalState(): ManageGeoObjectTypeModalState {\r\n        return this.modalState;\r\n    }\r\n\r\n    public setModalState(state: ManageGeoObjectTypeModalState): void {\r\n        this.modalState = state;\r\n        \r\n        this.modalStateChangedSource.next(this.modalState);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { ChangeRequest, AbstractAction } from '../model/crtable';\nimport { EventService } from '../../shared/service/event.service';\nimport { GeoObject } from '../model/registry';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ChangeRequestService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\t  getAllActions( requestId: string ): Promise<AbstractAction[]> {\n        let params: HttpParams = new HttpParams();\n\n        if ( requestId != null ) {\n            params = params.set( 'requestId', requestId );\n\t\t}\n\t\t\n        this.eventService.start();\n\n        return this.http\n            .get<AbstractAction[]>( acp + '/changerequest/getAllActions', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\n//    fetchData( cb: any, requestId: string ): Promise<HttpResponse> {\n//        let params: HttpParams = new HttpParams();\n//\n//        if ( requestId != null ) {\n//            params = params.set( 'requestId', requestId );\n//        }\n//\n//        this.eventService.start();\n//\n//        return this.http\n//            .get( acp + '/changerequest/getAllActions', { params: params } )\n//            .finally(() => {\n//                this.eventService.complete();\n//            } )\n//            .toPromise()\n//            .then( response => {\n//                cb( response.json() );\n//\n//                return response;\n//            } )\n//    }\n\n    applyAction( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyAction', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\tapplyActionStatusProperties( action: any ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/applyActionStatusProperties', JSON.stringify( { action: action } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n\t\n    lockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/lockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    unlockAction( actionId: string ): Promise<void> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http\n            .post<void>( acp + '/changerequest/unlockAction', JSON.stringify( { actionId: actionId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    getAllRequests(filter: string): Promise<ChangeRequest[]> {\n\t\tlet params: HttpParams = new HttpParams();\n\n\t\tparams = params.set('filter', filter );\n\n        return this.http.get<ChangeRequest[]>( acp + '/changerequest/get-all-requests', { params: params } )\n            .toPromise();\n    }\n\n    getRequestDetails( requestId: string ): Promise<ChangeRequest> {\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'requestId', requestId );\n\n        this.eventService.start();\n\n        return this.http.get<ChangeRequest>( acp + '/changerequest/get-request-details', { params: params } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n\tconfirmChangeRequest( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/confirm-change-request', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n\t}\n\t\n    execute( requestId: string ): Promise<ChangeRequest> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<ChangeRequest>( acp + '/changerequest/execute-actions', JSON.stringify( { requestId: requestId } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    rejectAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/reject-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    approveAllActions( requestId: string, actions:any ): Promise<AbstractAction[]> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.eventService.start();\n\n        return this.http.post<AbstractAction[]>( acp + '/changerequest/approve-all-actions', JSON.stringify( { requestId: requestId, actions: actions } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n    submitChangeRequest( actions: string ): Promise<GeoObject> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'actions', actions )\n\n        this.eventService.start();\n\n        return this.http.post<GeoObject>( acp + '/cgr/submitChangeRequest', {actions: actions}, { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n            .toPromise();\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'toEpochDateTime',\n    pure: true\n})\nexport class ToEpochDateTimePipe implements PipeTransform {\n    transform(date: string): any {\n        if (!date ) {\n            return date;\n        }\n       \n        return new Date(date).getTime();\n    }\n}","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\n\nimport { GeoObjectType, Attribute } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n \n@Component( {\n    selector: 'attribute-input',\n    templateUrl: './attribute-input.component.html',\n    styleUrls: ['./attribute-input.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms'))\n            //   transition('show => none', animate('100ms'))\n        ])\n    ]\n} )\nexport class AttributeInputComponent implements OnInit {\n\n    @Input() disableCodeField: boolean = false;\n    @Input() excludeDescription: boolean = false;\n    @Input() isDecimal: boolean = false;\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    @Output() attributeChange = new EventEmitter<Attribute>();\n    message: string = null;\n\n    state: string = 'none';\n\n    constructor( private hierarchyService: HierarchyService, private cdr: ChangeDetectorRef ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnChanges() {\n \n    }\n\n    ngOnDestroy(){\n        \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    toggleIsUnique():void {\n        this.attribute.unique = !this.attribute.unique;\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if(this.attribute.code) {\n\n            // if code has a space\n            if(this.attribute.code.indexOf(\" \") !== -1){\n                return false;\n            }\n\n            return true;\n        }\n        \n        return false;\n    }\n}\n","<div [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n  <div class=\"row-holder\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.code\"></localize>\n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input autofocus type=\"text\" [disabled]=\"disableCodeField\" [(ngModel)]=\"attribute.code\" name=\"code\" required geoObjectAttributeCode>\n      </span>\n    </div>\n  </div>\n\n  <localized-input [(value)]=\"attribute.label\" key=\"data.property.label.label\"></localized-input>\n  <localized-text *ngIf=\"!excludeDescription\" [(value)]=\"attribute.description\" key=\"data.property.label.description\"></localized-text>\n\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.length\"></localize>        \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.precision\" name=\"precision\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n\n  <div class=\"row-holder\" *ngIf=\"isDecimal\">\n    <div class=\"label-holder\">\n      <label>\n        <localize key=\"data.property.label.decimal\"></localize>      \n      </label>\n    </div>\n    <div class=\"holder\">\n      <span class=\"text\">\n        <input type=\"text\" [(ngModel)]=\"attribute.scale\" name=\"scale\" OnlyNumber=\"true\" required>\n      </span>\n    </div>\n  </div>\n</div>","import { GeoObjectType } from './registry';\n\nexport class ImportSheet {\n\tname: string;\n\tattributes: {\n\t\tboolean: string[];\n\t\tdate: string[];\n\t\tnumeric: string[];\n\t\ttext: string[];\n\t}\n}\n\nexport class Location {\n\tlabel: string;\n\tcode: string;\n\ttarget: string;\r\n}\n\nexport class Term {\n\tcode: string;\n\tlabel: string;\n}\n\nexport class TermProblem {\n\tlabel: string;\n\tparentCode: string;\n\tmdAttributeId: string;\n\tattributeCode: string;\n\tattributeLabel: string;\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class LocationProblem {\n\tlabel: string;\n\ttype: string;\n\ttypeLabel: string;\n\tparent: string;\n\tcontext: { label: string, type: string }[];\n\taction: any;\n\tresolved: boolean;\n}\n\nexport class Exclusion {\n\tcode: string;\n\tvalue: string;\n}\n\nexport class Synonym {\n\tlabel: string;\n\tsynonymId: string;\n\tvOid?: string;\n}\n\nexport class ImportConfiguration {\n\ttype: GeoObjectType;\n\tsheet: ImportSheet;\n\tdirectory: string;\n\tfilename: string;\n\thierarchy: string;\n\tpostalCode: boolean;\n\thasPostalCode: boolean;\n\tlocations: Location[];\n\tformatType: string;\n\tobjectType: string;\n\tlocationProblems: LocationProblem[];\n\ttermProblems: TermProblem[];\n\texclusions: Exclusion[];\n\thierarchies: { code: string, label: string }[];\n\tstartDate: string;\n\tendDate: string;\n\tparentLookupType: string;\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListByOrg } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n@Component({\n\tselector: 'publish-modal',\n\ttemplateUrl: './publish-modal.component.html',\n\tstyleUrls: []\n})\nexport class PublishModalComponent implements OnInit {\n\tmessage: string = null;\n\tmaster: any;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n\tonMasterListChange: Subject<MasterList>;\n\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n    /*\n     * List of geo object types from the system\n     */\n\treadonly: boolean = false;\n\n    /*\n     * List of geo object types from the system\n     */\n\tedit: boolean = false;\n\n  isNew: boolean = false;\n\n\tconstructor(private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n\tngOnInit(): void {\n\n\t\tthis.onMasterListChange = new Subject();\n\n\t\tif (this.master == null || !this.readonly) {\n\t\t\tthis.iService.listGeoObjectTypes(true).then(types => {\n\t\t\t\n\t\t\t  var myOrgTypes = [];\n        for (var i = 0; i < types.length; ++i)\n        {\n          if (this.authService.isGeoObjectTypeRM(types[i].orgCode, types[i].code))\n          {\n            myOrgTypes.push(types[i]);\n          }\n        }\n        this.types = myOrgTypes;\n\t\t\t\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.master = {\n\t\t\t\toid: null,\n\t\t\t\ttypeCode: '',\n\t\t\t\tdisplayLabel: this.lService.create(),\n\t\t\t\tcode: '',\n\t\t\t\trepresentativityDate: null,\n\t\t\t\tpublishDate: null,\n\t\t\t\tlistAbstract: '',\n\t\t\t\tprocess: '',\n\t\t\t\tprogress: '',\n\t\t\t\taccessConstraints: '',\n\t\t\t\tuseConstraints: '',\n\t\t\t\tacknowledgements: '',\n\t\t\t\tdisclaimer: '',\n\t\t\t\tcontactName: '',\n\t\t\t\torganization: '',\n\t\t\t\ttelephoneNumber: '',\n\t\t\t\temail: '',\n\t\t\t\thierarchies: [],\n\t\t\t\tleaf: false,\n\t\t\t\tfrequency: 'ANNUAL',\n\t\t\t\tisMaster: null,\n\t\t\t\tvisibility: null\n\t\t\t};\n\t\t}\n\t}\n\n\tinit(org: MasterListByOrg): void {\n\t\tthis.master.organization = org.oid;\n\t}\n\n\tgetIsDisabled(event): boolean {\n\t\tlet elClasses = event.target.classList;\n\t\tfor (let i = 0; i < elClasses.length; i++) {\n\t\t\tlet c = elClasses[i];\n\t\t\tif (c === 'disabled') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tonChange(): void {\n\n\t\tif (this.master.typeCode != null && this.master.typeCode.length > 0) {\n\t\t\tthis.iService.getHierarchiesForType(this.master.typeCode, true).then(hierarchies => {\n\t\t\t\tthis.master.hierarchies = hierarchies;\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.master.hierarchies = [];\n\t\t}\n\t}\n\n\tonSubmit(): void {\n\t\tthis.service.createMasterList(this.master).then(response => {\n\n\t\t\tthis.onMasterListChange.next(response);\n\t\t\tthis.bsModalRef.hide();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCancel(): void {\n\t\tthis.bsModalRef.hide()\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"isNew\">\n            <localize key=\"type.publish.title\"></localize>\n        </h2>\n        <h2 *ngIf=\"!isNew\">\n            {{master.displayLabel.localizedValue}}\n            <localize key=\"type.publish.view.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\" *ngFor=\"let localeValue of master.displayLabel.localeValues\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.label\"></localize> ({{localeValue.locale}})\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" [required]=\"localeValue.locale === 'defaultLocale'\" />\n                </div>\n            </div>\n            <div class=\"row-holder\" *ngIf=\"types && !(readonly || edit)\">\n                <div class=\"label-holder\">\n                    <label for=\"typeCode\"> <localize key=\"io.geoObjectType\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <select id=\"typeCode\" name=\"typeCode\" class=\"select-area\" [(ngModel)]=\"master.typeCode\" (change)=\"onChange($event)\" required>\n                        <option></option>\n                        <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.code\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.code\" name=\"code\" type=\"text\" class=\"form-control\" [disabled]=\"readonly || edit\" required />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"data.property.label.frequency\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"frequency\" [(ngModel)]=\"master.frequency\" [disabled]=\"readonly\" required #frequency=\"ngModel\">\n                        <option></option>\n                        <option value=\"ANNUAL\"><localize key=\"georegistry.frequency.annual\"></localize></option>\n                        <option value=\"QUARTER\"><localize key=\"georegistry.frequency.quarter\"></localize></option>\n                        <option value=\"MONTHLY\"><localize key=\"georegistry.frequency.monthly\"></localize></option>\n                    </select>                    \n                    <small *ngIf=\"(edit && frequency.dirty)\" class=\"form-text text-danger\"><localize key=\"masterlist.change.frequency\"></localize></small>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"masterlist.visibility\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select class=\"select-area\" name=\"visibility\" [(ngModel)]=\"master.visibility\" [disabled]=\"readonly\" required>\n                        <option></option>\n                        <option value=\"PUBLIC\"><localize key=\"masterlist.public\"></localize></option>                        \n                        <option value=\"PRIVATE\"><localize key=\"masterlist.private\"></localize></option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.ismaster\"></localize> </label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"row\">\n                        <div class=\"check-block\" style=\"margin: 10px;\">\n\n                            <div (click)=\"getIsDisabled($event) ? null : master.isMaster = !master.isMaster\" name=\"isMaster\" [ngClass]=\"{'chk-checked' : master.isMaster, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\">\n                                <span></span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n            <!-- RepresentativityDate adn publishDate are being removed from the form but not \n            the backend at this point because there's some discussion around the need for these\n            in the future.  - Justin Lewis Feb 27, 2020 -->\n            <!-- <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.representativityDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.representativityDate\" name=\"representativityDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.publishDate\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.publishDate\" name=\"publishDate\" type=\"date\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div> -->\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.listAbstract\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.listAbstract\" name=\"listAbstract\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.process\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.process\" name=\"process\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.progress\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.progress\" name=\"progress\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.accessConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.accessConstraints\" name=\"accessConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.useConstraints\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.useConstraints\" name=\"useConstraints\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.acknowledgements\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.acknowledgements\" name=\"acknowledgements\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.disclaimer\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <textarea [(ngModel)]=\"master.disclaimer\" name=\"disclaimer\" class=\"form-control\" [disabled]=\"readonly\"></textarea>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.contact\"></localize>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.contactName\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.contactName\" name=\"contactName\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.telephoneNumber\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.telephoneNumber\" name=\"telephoneNumber\" type=\"text\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label> <localize key=\"masterlist.email\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <input [(ngModel)]=\"master.email\" name=\"email\" type=\"email\" class=\"form-control\" [disabled]=\"readonly\" />\n                </div>\n            </div>\n\n            <div class=\"row-holder\" *ngIf=\"master.hierarchies.length > 0\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <localize key=\"masterlist.parents\"></localize>\n                </div>\n            </div>\n\n            <div *ngFor=\"let hierarchy of master.hierarchies\">\n                <div class=\"row-holder\">\n                    <div class=\"label-holder\">\n                        <label> {{hierarchy.label}} </label>\n                    </div>\n                    <div class=\"holder\">\n                        <div class=\"row\" *ngFor=\"let parent of hierarchy.parents\">\n                            <!-- <div class=\"holder\"> -->\n\n                            <div class=\"check-block\" style=\"margin: 10px;\">\n\n                                <!-- To enable add: (click)=\"parent.selected = !parent.selected\" -->\n                                <div (click)=\"getIsDisabled($event) ? null : parent.selected = !parent.selected\" [ngClass]=\"{'chk-checked' : parent.selected, 'disabled' : readonly || edit}\" style=\"margin: 0;\" class=\"jcf-unselectable chk-area\" name=\"unique\">\n                                    <span></span>\n                                </div>\n\n                                <label style=\"margin: 3px 10px;\">{{parent.label}}</label>\n\n                                <!-- <input [(ngModel)]=\"parent.selected\" [name]=\"hierarchy.code + parent.code\" type=\"checkbox\" class=\"form-check\" [disabled]=\"readonly || edit\"/> -->\n                            </div>\n                            <!-- <div class=\"holder\">{{parent.label}}</div> -->\n                            <!-- </div> -->\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button>\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                            <localize key=\"io.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-input',\n    templateUrl: './localized-input.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedInputComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"text\" class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n    </span>\n  </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { ManageVersionsModalComponent } from './manage-versions-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term, PRESENT } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport Utils from '../../utility/Utils';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-shared-attribute-editor',\n    templateUrl: './geoobject-shared-attribute-editor.component.html',\n    styleUrls: ['./geoobject-shared-attribute-editor.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is shared between:\n * - crtable (create-update-geo-object action detail)\n * - change-request (for submitting change requests)\n * - master list geoobject editing widget\n * \n * Be wary of changing this component for one usecase and breaking other usecases!\n */\nexport class GeoObjectSharedAttributeEditorComponent implements OnInit {\n\n    private bsModalRef: BsModalRef;\n\n    /*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    @Input() preGeoObject: GeoObjectOverTime = null;\n\n    calculatedPreObject: any = {};\n\n    /*\n\t * The state of the GeoObject being modified\n\t */\n    @Input() postGeoObject: GeoObjectOverTime = null;\n\n    calculatedPostObject: any = {};\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() attributeExcludes: string[] = [];\n\n    @Input() forDate: Date = new Date();\n\n    @Input() readOnly: boolean = false;\n\n    @Input() isNew: boolean = false;\n\n    @Input() isEditingGeometries = false;\n\n    @Input() isGeometryInlined = false;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    modifiedTermOption: Term = null;\n    currentTermOption: Term = null;\n    isValid: boolean = true;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\"];\n\n    @ViewChild( \"attributeForm\" ) attributeForm;\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private datePipe: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private lService: LocalizationService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.preGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n\n        if ( this.postGeoObject == null ) {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.preGeoObject ) ).attributes ); // Object.assign is a shallow copy. We want a deep copy.\n        }\n        else {\n            this.postGeoObject = new GeoObjectOverTime( this.geoObjectType, JSON.parse( JSON.stringify( this.postGeoObject ) ).attributes ); // We're about to heavily modify this object. We don't want to muck with the original copy they sent us.\n        }\n\n        // this.attributeForm.statusChanges.subscribe( result => {\n        //     this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n        //     this.valid.emit( this.isValid );\n        // } );\n\n        if ( this.attributeExcludes != null ) {\n            this.geoObjectAttributeExcludes.push.apply( this.geoObjectAttributeExcludes, this.attributeExcludes );\n\n            if ( !this.isGeometryInlined ) {\n                this.geoObjectAttributeExcludes.push( \"geometry\" );\n            }\n        }\n\n        let geomAttr = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geomAttr = this.geoObjectType.attributes[i];\n            }\n        }\n        if ( geomAttr == null ) {\n            let geometry: Attribute = new Attribute( \"geometry\", \"geometry\", new LocalizedValue( \"Geometry\", null ), new LocalizedValue( \"Geometry\", null ), true, false, false, true );\n            this.geoObjectType.attributes.push( geometry );\n        }\n\n        this.calculate();\n    }\n\n    ngAfterViewInit() {\n         this.attributeForm.statusChanges.subscribe( result => {\n            this.isValid = ( result === \"VALID\" || result === \"DISABLED\" );\n\n            this.valid.emit( this.isValid );\n        } );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): void {\n        this.calculatedPreObject = this.calculateCurrent( this.preGeoObject );\n        this.calculatedPostObject = this.calculateCurrent( this.postGeoObject );\n\n        if ( this.geometryEditor != null ) {\n            this.geometryEditor.reload();\n        }\n    }\n\n    calculateCurrent( goot: GeoObjectOverTime ): any {\n      const object = {};\n\n      const time = this.forDate.getTime();\n\n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n          let attr = this.geoObjectType.attributes[i];\n          object[attr.code] = null;\n\n          if ( attr.type === 'local' ) {\n              object[attr.code] = this.lService.create();\n          }\n\n          if ( attr.isChangeOverTime ) {\n            let values = goot.attributes[attr.code].values;\n\n            values.forEach( vot => {\n\n                const startDate = Date.parse( vot.startDate );\n                const endDate = Date.parse( vot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n\n                    if ( attr.type === 'local' ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: JSON.parse( JSON.stringify( vot.value ) )\n                        };\n                    }\n                    else if ( attr.type === 'term' && vot.value != null && Array.isArray( vot.value ) && vot.value.length > 0 ) {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value[0]\n                        };\n                    }\n                    else {\n                        object[attr.code] = {\n                            startDate: this.formatDate( vot.startDate ),\n                            endDate: this.formatDate( vot.endDate ),\n                            value: vot.value\n                        };\n                    }\n                }\n            } );\n          }\n          else {\n              object[attr.code] = goot.attributes[attr.code];\n          }\n      }\n      \n      for ( let i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        let attr = this.geoObjectType.attributes[i];\n        \n        if ( attr.isChangeOverTime && object[attr.code] == null ) {\n          object[attr.code] = {\n            startDate: null,\n            endDate: null,\n            value: \"\"\n          }\n        }\n      }\n\n      return object;\n    }\n\n    formatDate( date: string ): string {\n        if ( date === PRESENT ) {\n            return this.lService.localize(\"changeovertime\", \"present\");\n        }\n\n        return date;\n    }\n\n    handleChangeCode( e: any ): void {\n        this.postGeoObject.attributes.code = this.calculatedPostObject['code'];\n        //        \n        //        console.log(this.calculatedPostObject['code'])\n        //        console.log(e)\n    }\n\n    onManageAttributeVersions( attribute: Attribute ): void {\n        this.bsModalRef = this.modalService.show( ManageVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\n        // TODO: sending the properties like this is wrong\n        this.bsModalRef.content.geoObjectOverTime = this.postGeoObject;\n        this.bsModalRef.content.geoObjectType = this.geoObjectType;\n        this.bsModalRef.content.isNewGeoObject = this.isNew;\n        this.bsModalRef.content.attribute = attribute;\n        this.bsModalRef.content.onAttributeVersionChange.subscribe( versionObj => {\n            this.calculate();\n        } );\n        this.bsModalRef.content.tfInit();\n    }\n\n    onManageGeometryVersions(): void {\n        let geometry = null;\n        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n            if ( this.geoObjectType.attributes[i].code === 'geometry' ) {\n                geometry = this.geoObjectType.attributes[i];\n            }\n        }\n\n        this.onManageAttributeVersions( geometry );\n    }\n\n    isDifferentText( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null ) {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value.trim() !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    isDifferentValue( attribute: Attribute ): boolean {\n        if ( this.calculatedPostObject[attribute.code] == null && this.calculatedPreObject[attribute.code] != null )\n        {\n          return true;\n        }\n\n        return ( this.calculatedPostObject[attribute.code].value && this.calculatedPostObject[attribute.code].value !== this.calculatedPreObject[attribute.code].value );\n    }\n\n    onSelectPropertyOption( event: any, option: any ): void {\n        this.currentTermOption = JSON.parse( JSON.stringify( this.modifiedTermOption ) );\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                if ( attr.code === \"status\" ) {\n                    return Utils.removeStatuses(attrOpts);\n                }\n                else {\n                    return attrOpts;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    isStatusChanged( post, pre ) {\n\n        if ( pre != null && post == null ) {\n            return true;\n        }\n\n        if ( pre == null || post == null || pre.length == 0 || post.length == 0 ) {\n            return false;\n        }\n\n        var preCompare = pre;\n        if ( Array.isArray( pre ) ) {\n            preCompare = pre[0];\n        }\n\n        var postCompare = post;\n        if ( Array.isArray( post ) ) {\n            postCompare = post[0];\n        }\n\n        return preCompare !== postCompare;\n    }\n\n    getTypeDefinition( key: string ): string {\n        // let attrs = this.geoObjectType.attributes;\n\n\n        // attrs.attributes.forEach(attr => {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if ( attr.code === key ) {\n                return attr.type;\n            }\n        }\n\n        return null;\n    }\n\n    public getIsValid(): boolean {\n        return this.isValid;\n    }\n\n    public getGeoObject(): any {\n        return this.postGeoObject;\n\n        //        // The front-end uses the 'yyyy-mm-dd' date format. Our backend expects dates in epoch format.\n        //        var submitGO = JSON.parse( JSON.stringify( this.postGeoObject ) );\n        //        for ( var i = 0; i < this.geoObjectType.attributes.length; ++i ) {\n        //            var attr = this.geoObjectType.attributes[i];\n        //\n        //            if ( attr.type === \"date\" && this.postGeoObject.properties[attr.code] != null ) {\n        //                var parts = this.postGeoObject.properties[attr.code].split( '-' );\n        //                var date = new Date( parts[0], parts[1] - 1, parts[2] );\n        //\n        //                submitGO.properties[attr.code] = date.getTime();\n        //            }\n        //        }\n        //\n        //        return submitGO;\n    }\n}\n","<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <!-- <div class=\"col-md-12\"> -->\n            <div *ngIf=\"preGeoObject\">\n                <div *ngIf=\"!this.isEditingGeometries\" class=\"row\"> \n                    <!-- <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"change.request.geoobject.update.form.label\"></localize>\n                        </label>\n                    </div> -->\n                    <div class=\"col-md-12\">\n                        <span class=\"text\"></span>\n                            <div class=\"panel\" style=\"box-shadow: none;\">\n                                <div class=\"panel-body\">\n                                    <ul class=\"list-group\">\n                                        <li class=\"list-group-item\" style=\"text-align:left; border: 1px solid #ddd;\" *ngFor=\"let attr of geoObjectType.attributes | geoObjectAttributeExcludesFilter:geoObjectAttributeExcludes\">\n                                            <h5 *ngIf=\"attr.code !== 'geometry'\">\n\n                                              <span *ngIf=\"attr.code === 'code'\">\n                                                <localize key=\"geoobject.code.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code === 'displayLabel'\">\n                                                <localize key=\"geoobject.displayLabel.alternate.label\"></localize>\n                                              </span>\n                                              <span *ngIf=\"attr.code !== 'code' && attr.code !== 'displayLabel'\">\n                                                {{attr.label.localizedValue}}\n                                              </span>\n                                              \n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>\n                                            </h5>\n                                            \n                                            <h5 *ngIf=\"attr.code === 'geometry'\">\n                                              <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                                              <span *ngIf=\"attr.isChangeOverTime && calculatedPostObject[attr.code] != null && calculatedPostObject[attr.code].startDate != null\">\n                                                ({{calculatedPostObject[attr.code].startDate}} - {{calculatedPostObject[attr.code].endDate}})\n                                              </span>                                              \n                                            </h5>\n                                            \n\n                                            <div *ngIf=\"attr.code === 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [(ngModel)]=\"calculatedPostObject[attr.code]\" (change)=\"handleChangeCode($event)\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" [disabled]=\"!isNew\" required> \n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'character' && attr.code !== 'code'\">\n                                              <input *ngIf=\"postGeoObject\" type=\"text\" [ngModel]=\"calculatedPostObject[attr.code].value\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n\n                                              <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentText(attr)\">\n                                                <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                              </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'local'\">\n                                              <ul class=\"list-group\" *ngIf=\"calculatedPostObject[attr.code].value != null\">\n                                                <li class=\"list-group-item\" *ngFor=\"let localeValue of calculatedPostObject[attr.code].value.localeValues; let i = index\">\n                                                  <h5>{{localeValue.locale}}</h5>\n                                                  <input disabled [required]=\"localeValue.locale === 'defaultLocale'\" type=\"text\" [ngModel]=\"localeValue.value\" [name]=\"'mod-' + attr.code + '-' + localeValue.locale\"> \n\n                                                  <p class=\"warning-text\" *ngIf=\"!isNew && calculatedPreObject[attr.code].value != null && localeValue.value != null && localeValue.value.trim() !== calculatedPreObject[attr.code].value.localeValues[i].value\">\n                                                    <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value.localeValues[i].value}}\n                                                  </p>\n                                                </li>\n                                              </ul>                                            \n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'date'\">\n                                                <input type=\"date\" [ngModel]=\"calculatedPostObject[attr.code].value | date:'yyyy-MM-dd'\" id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\" disabled> \n                                                    \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value | date}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'boolean'\">\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"calculatedPostObject[attr.code].value\" disabled [value]=\"true\" id=\"mod-{{attr.code}}-true\" name=\"mod-{{attr.code}}-true\">\n                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                </label>\n\n                                                <label>\n                                                    <input type=\"radio\" [checked]=\"!calculatedPostObject[attr.code].value\" disabled [value]=\"false\" id=\"mod-{{attr.code}}-false\" name=\"mod-{{attr.code}}-false\">\n                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                </label>\n                                                \n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'float'\">\n                                                <input disabled type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\"\n                                                    id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'integer'\">\n                                                <input type=\"number\" [(ngModel)]=\"calculatedPostObject[attr.code].value\" disabled id=\"mod-{{attr.code}}\" name=\"mod-{{attr.code}}\">\n\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isDifferentValue(attr)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n\n                                            <div *ngIf=\"attr.type === 'term'\">\n                                                <select id=\"mod-{{attr.code}}\" name=\"mod-term-{{attr.code}}\" class=\"select-area\" style=\"float:none;\" disabled [(ngModel)]=\"calculatedPostObject[attr.code].value\">\n                                                    <option value=\"\" ></option>\n                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attr.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                </select>\n\n                                                <!-- \n                                                <p class=\"warning-text\" *ngIf=\"calculatedPreObject[attr.code].value && calculatedPostObject[attr.code].value !== calculatedPreObject[attr.code].value\">\n                                                -->\n                                                <p class=\"warning-text\" *ngIf=\"!isNew && isStatusChanged(calculatedPostObject[attr.code].value, calculatedPreObject[attr.code].value)\">\n                                                  <localize key=\"change.request.changed.value.prefix\"></localize> {{calculatedPreObject[attr.code].value}}\n                                                </p>\n\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.type === 'geometry' && this.isGeometryInlined\">\n                                              <geoobject-editor-map #geometryEditor\n                                                [geometryType]=\"this.geoObjectType.geometryType\"\n                                                [readOnly]=\"true\"\n                                                [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                                                [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                                                [bboxCode]=\"this.preGeoObject.attributes.code\"\n                                                [bboxType]=\"this.geoObjectType.code\"\n                                                (onClickEdit)=\"this.onManageGeometryVersions()\"\n                                                [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                                              </geoobject-editor-map>\n                                            </div>\n                                            \n                                            <div *ngIf=\"attr.isChangeOverTime\" class=\"button-holder\" style=\"text-align:left;\" >\n                                              <button type=\"submit\" style=\"\" (click)=\"onManageAttributeVersions(attr)\" class=\"btn btn-primary\" role=\"button\">\n                                                <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                                              </button>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                    </div>\n                 </div>\n                 <div *ngIf=\"this.isEditingGeometries && !this.isGeometryInlined\">\n                   <!-- <div class=\"label-holder\">\n                     <label>\n                      <localize key=\"shared.attributes.attribute.geometry.label\"></localize>\n                     </label>\n                   </div> -->\n                   <div class=\"\">\n                     <geoobject-editor-map #geometryEditor \n                       [geometryType]=\"this.geoObjectType.geometryType\"\n                       [readOnly]=\"true\"\n                       [preGeometry]=\"calculatedPreObject['geometry'] != null ? calculatedPreObject['geometry'].value : null\"\n                       [postGeometry]=\"calculatedPostObject['geometry'] != null ? calculatedPostObject['geometry'].value : null\"\n                       [bboxCode]=\"this.preGeoObject.attributes.code\"\n                       [bboxType]=\"this.geoObjectType.code\"\n                       (onClickEdit)=\"this.onManageGeometryVersions()\"\n                       [bboxDate]=\"this.forDate.toISOString().split('T')[0]\">\n                     </geoobject-editor-map>\n                   </div>\n                 </div>\n           </div>\n        <!-- </div> -->\n    </fieldset>\n</form>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LocalizedValue } from '../../../../shared/model/core';\n\n@Component( {\n    selector: 'localized-text',\n    templateUrl: './localized-text.component.html',\n    styleUrls: [],\n} )\nexport class LocalizedTextComponent {\n    @Input() public key: string = \"\";\n    @Input() public value: LocalizedValue;\n    @Output() public valueChange = new EventEmitter<LocalizedValue>();\n\n    constructor() { }\n}","<div class=\"row-holder\" *ngFor=\"let localeValue of value.localeValues\">\n  <div class=\"label-holder\">\n    <label>\n      <localize [key]=\"key\"></localize>\n      ({{localeValue.locale}})\n    </label>\n  </div>\n  <div class=\"holder\">\n    <span class=\"text\">\n      <textarea [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\"></textarea>\n    </span>\n  </div>\n</div>\n","import { Directive, forwardRef } from '@angular/core';\nimport { NG_VALIDATORS, AbstractControl, ValidatorFn, Validator, FormControl } from '@angular/forms';\n\n\n// validation function\nfunction validateGeoObjectAttributeCodeValidator() : ValidatorFn {\n  return (c: AbstractControl) => {\n    if(c.value){\n        let isValid = c.value.indexOf(\" \") === -1;\n        \n        if(isValid) {\n            return null;\n        } else {\n            return {\n                geoObjectAttributeCode: {\n                     valid: false\n                }\n            };\n        }\n    }\n\n  }\n}\n\n\n@Directive({\n  selector: '[geoObjectAttributeCode][ngModel]',\n  providers: [\n    { provide: NG_VALIDATORS, useExisting: GeoObjectAttributeCodeValidator, multi: true }\n  ]\n})\nexport class GeoObjectAttributeCodeValidator implements Validator {\n  validator: ValidatorFn;\n  \n  constructor() {\n    this.validator = validateGeoObjectAttributeCodeValidator();\n  }\n  \n  validate(c: FormControl) {\n    return this.validator(c);\n  }\n  \n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ImportConfiguration } from '../../../model/io';\n\n@Component( {\n    selector: 'attributes-page',\n    templateUrl: './attributes-page.component.html',\n    styleUrls: []\n} )\nexport class AttributesPageComponent {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor() {\n    }\n\n    onNext(): void {\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.attributes.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.attributes.description\"></localize>\n    </p>\n  </div>\n  <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <!--\n    <h3 class=\"mb-3\">\n      <localize key=\"shapefile.modal.heading\"></localize>\n      {{configuration.sheet.name}}\n    </h3>\n    -->\n    <form class=\"modal-form\" #form=\"ngForm\">\n      \n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.hierarchy\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"configuration.hierarchy\" required>\n              <option></option>\n              <option *ngFor=\"let hierarchy of configuration.hierarchies\" value={{hierarchy.code}}>{{hierarchy.label}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div class=\"form-group\" *ngFor=\"let attribute of configuration.type.attributes\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">{{attribute.label.localizedValue}}</label>\n          </div>\n          <div class=\"holder\">\n            <select [name]=\"attribute.code + (attribute.locale != null ? attribute.locale : '')\" class=\"select-area\"\n              [(ngModel)]=\"attribute.target\" [required]=\"attribute.required\">\n              <option></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes[attribute.baseType]\" value={{attr}}>{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      <div *ngIf=\"configuration.hasPostalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.postalCode\"></localize>\n            </label>\n          </div>\n          <div class=\"form-check\">\n            <div class=\"check-block\">\n              <div (click)=\"configuration.postalCode = !configuration.postalCode\"\n                [ngClass]=\"{'chk-checked' : configuration.postalCode}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\"\n                name=\"postalCode\">\n                <span></span>\n              </div>\n            </div>\n            <!-- <input type=\"checkbox\" class=\"form-check-input\" name=\"postalCode\" [(ngModel)]=\"configuration.postalCode\"> -->\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"!configuration.hasPostalCode || !configuration.postalCode\" class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label class=\"\">\n              <localize key=\"io.modal.parentLookupType\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <select name=\"parentLookupType\" class=\"select-area\" [(ngModel)]=\"configuration.parentLookupType\" required>\n              <option></option>\n              <option value=\"ALL\">\n                <localize key=\"io.modal.all\"></localize>\n              </option>\n              <option value=\"CODE\">\n                <localize key=\"io.modal.code\"></localize>\n              </option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize *ngIf=\"!configuration.postalCode\" key=\"io.next\"></localize>\n                <localize *ngIf=\"configuration.postalCode\" key=\"io.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter, Directive } from '@angular/core';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-page',\n    templateUrl: './location-page.component.html',\n    styleUrls: []\n} )\nexport class LocationPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() configurationChange = new EventEmitter<ImportConfiguration>();\n    @Output() stateChange = new EventEmitter<string>();\n\n    constructor( private service: IOService ) { }\n\n    ngOnInit(): void {\n        this.service.getTypeAncestors( this.configuration.type.code, this.configuration.hierarchy ).then( locations => {\n            this.configuration.locations = locations;\n        } );\n    }\n\n    onNext(): void {\n        // Map the universals\n        this.configurationChange.emit( this.configuration );\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onBack(): void {\n        this.stateChange.emit( 'BACK' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<form class=\"modal-form\">\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.location.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.location.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <form #form=\"ngForm\">\n      \n      <div class=\"form-group\" *ngFor=\"let location of configuration.locations; let i = index;\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label> {{location.label}} </label>\n          </div>\n          <div class=\"holder\">\n            <select class=\"select-area\" [(ngModel)]=\"location.target\" [name]=\"i + '-location'\">\n              <option value=\"\"></option>\n              <option *ngFor=\"let attr of configuration.sheet.attributes.text\" [value]=\"attr\">{{attr}}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"form-group row\">\n        <div class=\"row-holder\">\n          <div class=\"button-holder\">\n            <button type=\"submit\" (click)=\"onBack()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.back\"></localize>\n            </button>\n            <button type=\"btn\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                <localize key=\"io.cancel\"></localize>\n            </button>\n            <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n    </form>\n  </div>\n</form>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'location-problem-page',\n    templateUrl: './location-problem-page.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n\n            if ( !this.configuration.locationProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handleError( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.locationProblems.length; i++ ) {\n            const problem = this.configuration.locationProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNOREATLOCATION' ) {\n                const value = ( problem.parent != null ? problem.parent + \"-\" + problem.label : problem.label );\n                const exclusion = { code: '##PARENT##', value: value };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.locationProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.locationProblem.description\"></localize>\n    </p>\n  </div>\n  <div >\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.locationContext\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownLocation\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.locationProblems; let i = index;\">\n        <location-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></location-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\" style=\"margin-top: 20px;\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize *ngIf=\"configuration.termProblems != null\" key=\"io.next\"></localize>\n              <localize *ngIf=\"configuration.termProblems == null\" key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, Input, OnInit, EventEmitter, Output } from '@angular/core';\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\n\n@Component( {\n\n    selector: 'term-problem-page',\n    templateUrl: './term-problem-page.component.html',\n    styleUrls: []\n} )\nexport class TermProblemPageComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Output() stateChange = new EventEmitter<string>();\n    message: string = null;\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n\n    hasProblems(): boolean {\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n\n            if ( !this.configuration.termProblems[i].resolved ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    onNext(): void {\n        if ( this.configuration.exclusions == null ) {\n            this.configuration.exclusions = [];\n        }\n\n        for ( let i = 0; i < this.configuration.termProblems.length; i++ ) {\n            const problem = this.configuration.termProblems[i];\n\n            if ( problem.resolved && problem.action.name == 'IGNORE' ) {\n                const exclusion = { code: problem.attributeCode, value: problem.label };\n\n                this.configuration.exclusions.push( exclusion );\n            }\n        }\n\n        this.stateChange.emit( 'NEXT' );\n    }\n\n    onCancel(): void {\n        this.stateChange.emit( 'CANCEL' );\n    }\n}\n","<div>\n  <div class=\"text-center\">\n    <h2>\n      <localize key=\"io.termProblem.title\"></localize>\n    </h2>\n    <p class=\"lead\">\n      <localize key=\"io.termProblem.description\"></localize>\n    </p>\n  </div>\n  <div class=\"col-md-12 order-md-1\">\n    <div *ngIf=\"hasProblems()\" class=\"row\">\n      <div class=\"alert alert-danger\">\n        <localize key=\"dataUploader.existingProblems\"></localize>\n      </div>\n    </div>\n    <div *ngIf=\"message != null\" class=\"row\">\n      <div class=\"alert alert-danger\">{{message}}</div>\n    </div>\n    <form #form=\"ngForm\">\n      <div class=\"row\">\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.categoryAttribute\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.unknownCategory\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-4\">\n          <label>\n            <localize key=\"dataUploader.synonymn\"></localize>\n          </label>\n        </div>\n        <div class=\"col-sm-2\">\n          <label>\n            <localize key=\"dataUploader.actions\"></localize>\n          </label>\n        </div>\n      </div>\n      <div *ngFor=\"let problem of configuration.termProblems; let i = index;\">\n        <term-problem [problem]=\"problem\" [configuration]=\"configuration\" [index]=\"i\" (onError)=\"handleError($event)\"></term-problem>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-sm-12 text-right\">\n          <button type=\"button\" (click)=\"onCancel()\" class=\"btn\" role=\"button\">\n            <span>\n              <localize key=\"io.cancel\"></localize>\n            </span>\n          </button>\n          <button type=\"submit\" (click)=\"onNext()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"hasProblems()\">\n            <span>\n              <localize key=\"io.ok\"></localize>\n            </span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>","import { Component, OnInit, ViewChild, SimpleChanges, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { Map, LngLatBounds, NavigationControl } from 'mapbox-gl';\nimport * as MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport * as StaticMode from '@mapbox/mapbox-gl-draw-static-mode';\nimport * as mapboxgl from 'mapbox-gl';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor-map[geometryType]',\n    templateUrl: './geoobject-editor-map.component.html',\n    styleUrls: ['./geoobject-editor-map.component.css']\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorMapComponent implements OnInit, OnDestroy {\n\n    /*\n     * Required. The GeometryType of the GeoJSON. Expected to be in uppercase (because that's how it is in the GeoObjectType for some reason)\n     */\n    @Input() geometryType: string;\n\n    /*\n     * Optional. We will invoke this event with GeoJSON when the user makes an edit to the geometry.\n     */\n    @Output() geometryChange = new EventEmitter<any>();\n\n    /*\n     * Optional. If specified, we will diff based on this GeoJSON geometry.\n     */\n    @Input() preGeometry: any;\n\n    /*\n     * Optional. If we are read-only, this will be displayed as a layer. If we are not, it will be editable.\n     */\n    @Input() postGeometry: any;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObject code.\n     */\n    @Input() bboxCode: string;\n\n    /*\n     * Optional. If specified, we will fetch the bounding box from this GeoObjectType at the date.\n     */\n    @Input() bboxType: string;\n\n    @Input() bboxDate: string;\n\n    /*\n     * Optional. If set to true the edit controls will not be displayed. Defaults to false.\n     */\n    @Input() readOnly: boolean = false;\n\n    /*\n     * Optional. If specified, we will display an edit button on the map, and when it is clicked we will emit this event.\n     */\n    @Output() onClickEdit = new EventEmitter<void>();\n\n    @ViewChild( \"simpleEditControl\" ) simpleEditControl;\n\n    @ViewChild( \"mapDiv\" ) mapDiv;\n\n    map: Map;\n\n    editingControl: any;\n\n    constructor( private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngAfterViewInit() {\n        setTimeout(() => {\n            //this.registryService.getGeoObjectOverTime( \"22\", \"Province\" )\n            //.then( geoObject => {\n\n            ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\n\n            this.mapDiv.nativeElement.id = Math.floor( Math.random() * ( 899999 ) ) + 100000;\n\n            this.map = new Map( {\n                container: this.mapDiv.nativeElement.id,\n                style: 'mapbox://styles/mapbox/satellite-v9',\n                zoom: 2,\n                center: [110.880453, 10.897852]\n            } );\n\n            this.map.on( 'load', () => {\n                this.initMap();\n            } );\n\n            this.map.on( 'draw.create', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.delete', () => {\n                this.onValidChange();\n            } );\n            this.map.on( 'draw.update', () => {\n                this.onValidChange();\n            } );\n\n            //} ).catch(( err: HttpErrorResponse ) => {\n            //    this.error( err );\n            //} );\n        }, 10 );\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n        if ( changes['preGeometry'] || changes['postGeometry'] ) {\n            this.reload();\n        }\n    }\n\n    public reload(): void {\n        if ( this.map != null ) {\n            this.removeLayers();\n            this.addLayers();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.map.remove();\n    }\n\n    getIsValid(): boolean {\n        if ( !this.readOnly ) {\n            let isValid: boolean = false;\n\n            if ( this.editingControl != null ) {\n                let featureCollection: any = this.editingControl.getAll();\n\n                if ( featureCollection.features.length > 0 ) {\n                    isValid = true;\n                }\n            }\n\n            return isValid;\n        }\n\n        return true;\n    }\n\n    private onValidChange(): void {\n        this.geometryChange.emit( this.saveDraw() );\n    }\n\n    initMap(): void {\n\n        this.map.on( 'style.load', () => {\n            this.addLayers();\n            this.onValidChange();\n        } );\n\n\n        this.addLayers();\n\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.zoomToBbox();\n        }\n\n        // Add zoom and rotation controls to the map.\n        this.map.addControl( new NavigationControl() );\n\n        if ( !this.readOnly ) {\n            this.enableEditing();\n        }\n        else {\n            this.addEditButton();\n        }\n\n        this.onValidChange();\n    }\n\n    addEditButton(): void {\n        this.simpleEditControl.editEmitter.subscribe( versionObj => {\n            this.onClickEdit.emit();\n        } );\n\n        this.map.addControl( this.simpleEditControl );\n    }\n\n    enableEditing(): void {\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: false,\n                    polygon: true,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: true,\n                    line_string: false,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.editingControl = new MapboxDraw( {\n                controls: {\n                    point: false,\n                    line_string: true,\n                    polygon: false,\n                    trash: true,\n                    combine_features: false,\n                    uncombine_features: false\n                }\n            } );\n        }\n        this.map.addControl( this.editingControl );\n\n        if ( this.postGeometry != null ) {\n            this.editingControl.add( this.postGeometry );\n        }\n    }\n\n    removeSource( prefix: string ): void {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            this.map.removeLayer( sourceName + \"-polygon\" );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            this.map.removeLayer( sourceName + \"-point\" );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MultiLine\" ) {\n            this.map.removeLayer( sourceName + \"-line\" );\n        }\n\n        this.map.removeSource( sourceName );\n    }\n\n    removeLayers(): void {\n        if ( this.map.getSource( \"pre-geoobject\" ) ) {\n            this.removeSource( \"pre\" );\n        }\n        if ( this.map.getSource( \"post-geoobject\" ) ) {\n            this.removeSource( \"post\" );\n        }\n    }\n\n    addLayers(): void {\n        if ( this.preGeometry != null && this.preGeometry !== \"\" ) {\n            this.renderGeometryAsLayer( this.preGeometry, \"pre\", \"#EFA22E\" )\n        }\n        if ( this.readOnly && this.postGeometry != null && this.postGeometry !== \"\") {\n            this.renderGeometryAsLayer( this.postGeometry, \"post\", \"#3368EF\" );\n        }\n    }\n\n    renderGeometryAsLayer( geometry: any, prefix: string, color: string ) {\n        let sourceName: string = prefix + \"-geoobject\";\n\n        this.map.addSource( sourceName, {\n            type: 'geojson',\n            data: {\n                \"type\": \"FeatureCollection\",\n                \"features\": []\n            }\n        } );\n\n        if ( this.geometryType === \"MULTIPOLYGON\" || this.geometryType === \"POLYGON\" ) {\n            // Polygon Layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-polygon\",\n                \"type\": \"fill\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"fill-color\": color,\n                    \"fill-outline-color\": \"black\",\n                    \"fill-opacity\": 0.7,\n                },\n            } );\n        }\n        else if ( this.geometryType === \"POINT\" || this.geometryType === \"MULTIPOINT\" ) {\n            // Point layer\n            this.map.addLayer( {\n                \"id\": sourceName + \"-point\",\n                \"type\": \"circle\",\n                \"source\": sourceName,\n                \"paint\": {\n                    \"circle-radius\": 3,\n                    \"circle-color\": color,\n                    \"circle-stroke-width\": 2,\n                    \"circle-stroke-color\": '#FFFFFF'\n                }\n            } );\n        }\n        else if ( this.geometryType === \"LINE\" || this.geometryType === \"MULTILINE\" ) {\n            this.map.addLayer( {\n                \"id\": sourceName + \"-line\",\n                \"source\": sourceName,\n                \"type\": \"line\",\n                \"layout\": {\n                    \"line-join\": \"round\",\n                    \"line-cap\": \"round\"\n                },\n                \"paint\": {\n                    \"line-color\": color,\n                    \"line-width\": 2\n                }\n            } );\n        }\n\n        ( <any>this.map.getSource( sourceName ) ).setData( geometry );\n    }\n\n    zoomToBbox(): void {\n        if ( this.bboxCode != null && this.bboxType != null ) {\n            if ( this.bboxDate == null ) {\n                this.registryService.getGeoObjectBounds( this.bboxCode, this.bboxType ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n            else {\n                this.registryService.getGeoObjectBoundsAtDate( this.bboxCode, this.bboxType, this.bboxDate ).then( boundArr => {\n                    let bounds = new LngLatBounds( [boundArr[0], boundArr[1]], [boundArr[2], boundArr[3]] );\n\n                    this.map.fitBounds( bounds, { padding: 50 } );\n                } ).catch(( err: HttpErrorResponse ) => {\n                    this.error( err );\n                } );\n            }\n        }\n    }\n\n    saveDraw(): any {\n        if ( this.editingControl != null ) {\n            let featureCollection: any = this.editingControl.getAll();\n\n            if ( featureCollection.features.length > 0 ) {\n\n                // The first Feature is our GeoObject.\n\n                // Any additional features were created using the draw editor. Combine them into the GeoObject if its a multi-polygon.\n                if ( this.geometryType === \"MULTIPOLYGON\" ) {\n                    let polygons = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPolygon' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                polygons.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            polygons.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: polygons,\n                        type: 'MultiPolygon'\n                    };\n                }\n                else if ( this.geometryType === \"MULTIPOINT\" ) {\n                    let points = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiPoint' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                points.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            points.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: points,\n                        type: 'MultiPoint'\n                    };\n                }\n                else if ( this.geometryType === \"MULTILINE\" ) {\n                    let lines = [];\n\n                    for ( let i = 0; i < featureCollection.features.length; i++ ) {\n                        let feature = featureCollection.features[i];\n\n                        if ( feature.geometry.type === 'MultiLineString' ) {\n                            for ( let j = 0; j < feature.geometry.coordinates.length; j++ ) {\n                                lines.push( feature.geometry.coordinates[j] );\n                            }\n                        }\n                        else {\n                            lines.push( feature.geometry.coordinates );\n                        }\n                    }\n\n                    return {\n                        coordinates: lines,\n                        type: 'MultiLineString'\n                    };\n                }\n                else {\n                    return featureCollection.features[0].geometry;\n                }\n            }\n\n            return this.postGeometry;\n        }\n\n        return this.postGeometry;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // TODO\n        console.log( \"ERROR\", err );\n\n        // Handle error\n        //if (err !== null) {\n        //    this.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n        //    this.bsModalRef.content.message = (err.localizedMessage || err.message);\n        //}\n    }\n\n\n}\n","<div #mapDiv class=\"map-view-port text-left\" style=\"height:400px;\"></div>\n\n<simple-edit-control #simpleEditControl></simple-edit-control>","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ParentTreeNode, GeoObject, HierarchyOverTime } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\n\nimport { ManageParentVersionsModalComponent } from './manage-parent-versions-modal.component';\n\nimport { LocalizedValue } from '../../../shared/model/core';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\n@Component( {\n\n    selector: 'cascading-geo-selector',\n    templateUrl: './cascading-geo-selector.html',\n} )\nexport class CascadingGeoSelector {\n\n    @Input() hierarchies: HierarchyOverTime[];\n\n    @Output() valid = new EventEmitter<boolean>();\n\n    @Input() isValid: boolean = true;\n\n    @ViewChild( \"mainForm\" ) mainForm;\n\n    @Input() forDate: Date = new Date();\n\n    dateStr: string;\n\n    cHierarchies: any[] = [];\n\n    parentMap: any = {};\n\n    bsModalRef: BsModalRef;\n\n    constructor( private modalService: BsModalService, private registryService: RegistryService ) {\n\n    }\n\n    ngOnInit(): void {\n        const day = this.forDate.getUTCDate();\n\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n\n        // Truncate any hours/minutes/etc which may be part of the date\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n\n        this.calculate();\n    }\n\n    ngOnChanges( changes: SimpleChanges ) {\n\n        if ( changes['forDate'] ) {\n            this.calculate();\n        }\n    }\n\n    calculate(): any {\n        const time = this.forDate.getTime();\n\n        this.isValid = true;\n\n        this.cHierarchies = [];\n        this.hierarchies.forEach( hierarchy => {\n            const object = {};\n            object['label'] = hierarchy.label;\n            object['code'] = hierarchy.code;\n\n            this.isValid = this.isValid && ( this.hierarchies.length > 0 );\n\n            hierarchy.entries.forEach( pot => {\n                const startDate = Date.parse( pot.startDate );\n                const endDate = Date.parse( pot.endDate );\n\n                if ( time >= startDate && time <= endDate ) {\n                    let parents = [];\n\n                    hierarchy.types.forEach( type => {\n                        let parent: any = {\n                            code: type.code,\n                            label: type.label\n                        }\n\n                        if ( pot.parents[type.code] != null ) {\n                            parent.text = pot.parents[type.code].text;\n                            parent.geoObject = pot.parents[type.code].geoObject;\n                        }\n\n                        parents.push( parent );\n                    } );\n\n                    object['parents'] = parents;\n                }\n            } );\n\n            this.cHierarchies.push( object );\n\n        } );\n\n        this.valid.emit();\n    }\n\n    public getIsValid(): boolean {\n        return true;\n    }\n\n    public getHierarchies(): any {\n        return this.hierarchies;\n    }\n\n    onManageVersions( code: string ): void {\n\n        const hierarchy = this.hierarchies.find( h => h.code === code );\n\n        this.bsModalRef = this.modalService.show( ManageParentVersionsModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.init( hierarchy );\n        this.bsModalRef.content.onVersionChange.subscribe( hierarchy => {\n            this.calculate();\n        } );\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","\n<form style=\"overflow:visible;\" class=\"modal-form\" name=\"cascading-geo-selector\" #mainForm=\"ngForm\">\n  <fieldset>\n    <div>\n      <div class=\"row-holder\" style=\"overflow:visible;\" *ngFor=\"let hierarchy of this.cHierarchies\">\n        <div class=\"label-holder\">\n          <label>\n            {{hierarchy.label}}\n          </label>\n        </div>\n        <div class=\"holder\">\n          <div class=\"container\" style=\"width:100%;\">\n            <div class=\"row\">\n              <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let parent of hierarchy.parents; let i = index\">\n                {{parent.label}}\n\n                <input style=\"width:150px;\" type=\"text\" class=\"form-control\" disabled\n                  [(ngModel)]=\"parent.geoObject.properties.displayLabel.localizedValue\" name=\"{{hierarchy.code}}-{{parent.code}}-input\">\n                  \n              </div>\n              \n            </div>\n\n            <div class=\"row\">\n              <div class=\"col-sm-12\">\n                  <div class=\"button-holder\" style=\"padding: 20px 0 20px 0;text-align: left;\">\n                      <button type=\"submit\" style=\"\" (click)=\"onManageVersions(hierarchy.code)\" class=\"btn btn-primary\" role=\"button\">\n                          <localize key=\"changeovertime.manageVersions.button.label\"></localize>\n                      </button>\n                  </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </fieldset>\n</form>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\n\nimport { DatePipe } from '@angular/common';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AttributeInputComponent } from '../hierarchy/geoobjecttype-management/attribute-input.component';\nimport { ChangeRequestService } from '../../service/change-request.service';\n\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, Attribute, AttributeTerm, AttributeDecimal, Term } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { mergeMap } from 'rxjs/operators';\n\ndeclare var acp: string;\n\n@Component( {\n    selector: 'submit-change-request',\n    templateUrl: './submit-change-request.component.html',\n    styleUrls: []\n} )\nexport class SubmitChangeRequestComponent implements OnInit {\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n    geoObjectType: GeoObjectType;\n\n    geoObjectTypes: GeoObjectType[] = [];\n\n    typeaheadLoading: boolean;\n\n    typeaheadNoResults: boolean;\n\n    geoObjectId: string = \"\";\n\n    reason: string = \"\";\n\n    dataSource: Observable<any>;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n\t/*\n\t * The current state of the GeoObject in the GeoRegistry\n\t */\n    preGeoObject: GeoObjectOverTime = null;\n\n\t/*\n\t * The state of the GeoObject after our Change Request has been approved \n\t */\n    postGeoObject: GeoObjectOverTime = null;\n\n    isValid: boolean = false;\n\n    geoObjectAttributeExcludes: string[] = [\"uid\", \"sequence\", \"type\", \"lastUpdateDate\", \"createDate\", \"status\"];\n\n    constructor( private service: IOService, private modalService: BsModalService, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, private localizeService: LocalizationService,\n        private authService: AuthService ) {\n\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( this.geoObjectId, this.geoObjectType.code ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.registryService.getGeoObjectTypes( [] ).then( types => {\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isGeoObjectTypeRC(types[i].organizationCode, types[i].code))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.geoObjectTypes = myOrgTypes;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            // this.currentGeoObjectType = this.geoObjectTypes[1];\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n\n\n    private onValidChange( newValid: boolean ) {\n        if ( this.preGeoObject == null ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.geometryEditor != null && !this.geometryEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        if ( this.attributeEditor != null && !this.attributeEditor.getIsValid() ) {\n            this.isValid = false;\n            return;\n        }\n\n        this.isValid = true;\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    changeTypeaheadLoading( e: boolean ): void {\n        this.typeaheadLoading = e;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.registryService.getGeoObjectOverTime( e.item.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n                this.postGeoObject = JSON.parse( JSON.stringify( this.preGeoObject ) ); // Object.assign is a shallow copy. We want a deep copy.\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    submit(): void {\n\n        let goSubmit: GeoObjectOverTime = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            let goGeometries: GeoObjectOverTime = this.geometryEditor.saveDraw();\n//            goSubmit.geometry = goGeometries.geometry;\n        }\n\n        let actions = [{\n            \"actionType\": \"geoobject/update\", // TODO: account for create\n            \"apiVersion\": \"1.0-SNAPSHOT\", // TODO: make dynamic\n            \"createActionDate\": new Date().getTime(),\n            \"geoObject\": goSubmit,\n            \"contributorNotes\": this.reason\n        }]\n\n        this.changeRequestService.submitChangeRequest( JSON.stringify( actions ) )\n            .then( geoObject => {\n                this.cancel();\n\n                this.bsModalRef = this.modalService.show( SuccessModalComponent, { backdrop: true } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"change.request.success.message\" );\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n\n        this.isValid = false;\n    }\n\n    cancel(): void {\n        this.isValid = false;\n        this.preGeoObject = null;\n        this.postGeoObject = null;\n        this.geoObjectId = null;\n        this.geoObjectType = null;\n        this.reason = null;\n    }\n\n    public error( err: any ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = (err.error.localizedMessage || err.error.message || err.message);\n        }\n    }\n}","<!-- <div class=\"new-admin-design-main\" style=\"height: 100vh;\">\n    <cgr-header></cgr-header> -->\n<loading-bar></loading-bar>\n\n<form class=\"modal-form\" name=\"geobject-shared-attribute-editor\" #attributeForm=\"ngForm\">\n    <fieldset>\n        <div style=\"min-height:50vh;\">\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobjecttype.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <select id=\"geoObjectTypeSelect\" name=\"geoObjectTypeSelect\" class=\"select-area\"\n                            [(ngModel)]=\"geoObjectType\" required>\n                            <!-- <option> <localize key=\"dropdown.select.geoobjecttype.option.label\"></localize> </option> -->\n                            <option *ngFor=\"let got of geoObjectTypes\" [ngValue]=\"got\">{{got.label.localizedValue}}\n                            </option>\n                        </select>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\" style=\"overflow: visible;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"dropdown.select.geoobject.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <input type=\"text\" [(ngModel)]=\"geoObjectId\" [disabled]=\"!geoObjectType\" name=\"geoObjectId\"\n                            [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\"\n                            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\"\n                            typeaheadOptionField=\"name\" class=\"form-control\" autocomplete=\"off\" required>\n\n                    </span>\n                </div>\n            </div>\n\n            <div *ngIf=\"preGeoObject\">\n                <geoobject-shared-attribute-editor #attributeEditor (valid)=\"this.onValidChange($event)\"\n                    [geoObjectType]=\"this.geoObjectType\" [preGeoObject]=\"this.preGeoObject\"\n                    [(postGeoObject)]=\"this.postGeoObject\" [isGeometryInlined]=\"true\">\n                </geoobject-shared-attribute-editor>\n            </div>\n\n            <div class=\"row-holder\" style=\"z-index: 0;\">\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"change.request.reason.label\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\">\n                        <textarea rows=\"4\" cols=\"50\" [(ngModel)]=\"reason\" name=\"reason-input\" required></textarea>\n                    </span>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    </fieldset>\n</form>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, \n    Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\nimport { IOService } from '../../service/io.service';\nimport { GeoObjectType, GeoObjectOverTime, HierarchyOverTime, ParentTreeNode, ImportError } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'geoobject-editor',\n    templateUrl: './geoobject-editor.component.html',\n    styleUrls: ['./geoobject-editor.component.css'],\n    providers: [DatePipe]\n} )\n\n/**\n * This component is used in the master list when editing a row. In the future it will also be used by the navigator and has\n * potential to also be used in the submit change request and manage change requests.\n */\nexport class GeoObjectEditorComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    isValid: boolean = false;\n\n    isGeometryEditable: boolean;\n\n    tabIndex: number = 0;\n\n    dataSource: Observable<any>;\n\n    masterListId: string;\n    notes: string;\n\n    isNewGeoObject: boolean = false;\n\n    @Input() onSuccessCallback: Function;\n    \n    submitFunction: Function = null;\n\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n\n    /*\n     * GeoObject Property Editor\n     */\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    arePropertiesValid: boolean = false;\n\n    // The current state of the GeoObject in the GeoRegistry\n    goPropertiesPre: GeoObjectOverTime;\n\n    // The state of the GeoObject after our edit has been applied\n    goPropertiesPost: GeoObjectOverTime;\n\n//    /*\n//     * GeoObject Geometry Editor\n//     */\n//    @ViewChild( \"geometryEditor\" ) geometryEditor;\n//\n//    areGeometriesValid: boolean = false;\n\n    /*\n     * GeoObject Cascading Parent Selector\n     */\n    @ViewChild( \"parentSelector\" ) parentSelector;\n\n    areParentsValid: boolean = false;\n\n    hierarchies: HierarchyOverTime[];\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n    \n    isEditingGeometries: boolean = false;\n\n    /*\n     * The final artifacts which will be submitted\n     */\n    private goSubmit: GeoObjectOverTime;\n\n    constructor( private service: IOService, private modalService: BsModalService, public bsModalRef: BsModalRef, private changeDetectorRef: ChangeDetectorRef,\n        private registryService: RegistryService, private elRef: ElementRef, private changeRequestService: ChangeRequestService,\n        private localizeService: LocalizationService, private date: DatePipe, private toEpochDateTimePipe: ToEpochDateTimePipe, authService: AuthService ) {\n        \n        this.isAdmin = authService.isAdmin();\n        this.isMaintainer = this.isAdmin || authService.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    findVotWithStartDate( votArray, startDate ): any {\n      for (let i: number = 0; i < votArray.length; ++i)\n      {\n        if (votArray[i].startDate === startDate)\n        {\n          return votArray[i];\n        }\n      }\n      \n      return null;\n    }\n\n    setMasterListId( id: string ) {\n        this.masterListId = id;\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    setOnSuccessCallback( func: Function ) {\n        this.onSuccessCallback = func;\n    }\n\n    // Configures the widget to be used in a \"New\" context, that is to say\n    // that it will be used to create a new GeoObject.\n    public configureAsNew( typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = true;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n\n        this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, retJson.geoObject.attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n\n            this.hierarchies = retJson.hierarchies;\n        } );\n    }\n\n    // Configures the widget to be used to resolve an ImportError\n    public configureFromImportError( importError: ImportError, historyId: string, dateStr: string, isGeometryEditable: boolean ) {\n        let typeCode = importError.object.geoObject.attributes.type;\n        this.isNewGeoObject = importError.object.isNew;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObjectType( typeCode );\n        this.fetchLocales();\n        \n        if (importError.object != null && importError.object.parents != null && importError.object.parents.length > 0)\n        {\n          this.hierarchies = importError.object.parents;\n          this.areParentsValid = true;\n        }\n        else\n        {\n          this.registryService.newGeoObjectOverTime( typeCode ).then( retJson => {\n            this.hierarchies = retJson.hierarchies;\n          } );\n          this.areParentsValid = false;\n        }\n        \n        // TODO : Maybe we should ask the server for the pre object, if it exists.\n        this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, importError.object.geoObject.attributes);\n        \n        this.submitFunction = () => {\n          let config = {\n            historyId : historyId,\n            importErrorId: importError.id,\n            resolution: 'APPLY_GEO_OBJECT',\n            parentTreeNode: this.hierarchies,\n            geoObject: this.goSubmit,\n            isNew: importError.object.isNew\n          }\n        \n          this.registryService.submitErrorResolve( config )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n    }\n\n    // Configures the widget to be used in an \"Edit Existing\" context\n    public configureAsExisting( code: string, typeCode: string, dateStr: string, isGeometryEditable: boolean ) {\n        this.isNewGeoObject = false;\n        this.dateStr = dateStr;\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n        this.isGeometryEditable = isGeometryEditable;\n\n        this.fetchGeoObject( code, typeCode );\n        this.fetchGeoObjectType( typeCode );\n        this.fetchHierarchies( code, typeCode );\n        this.fetchLocales();\n    }\n\n    private fetchGeoObject( code: string, typeCode: string ) {\n        this.registryService.getGeoObjectOverTime( code, typeCode ).then( geoObject => {\n            this.goPropertiesPre = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( geoObject ) ).attributes);\n            this.goPropertiesPost = new GeoObjectOverTime(this.geoObjectType, JSON.parse( JSON.stringify( this.goPropertiesPre ) ).attributes);\n            //this.goPropertiesPost = JSON.parse( JSON.stringify( this.goPropertiesPre ) );\n            \n            this.goSubmit = this.goPropertiesPost;\n\n//            this.areGeometriesValid = true;\n            this.arePropertiesValid = true;\n            this.isValid = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchLocales() {\n        this.registryService.getLocales().then( locales => {\n            this.localizeService.setLocales( locales );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    private fetchGeoObjectType( code: string ) {\n        this.registryService.getGeoObjectTypes( [code] )\n            .then( geoObjectType => {\n                this.geoObjectType = geoObjectType[0];\n                \n                if (this.goPropertiesPre != null)\n                {\n                  this.goPropertiesPre.geoObjectType = this.geoObjectType;\n                }\n                if (this.goPropertiesPost != null)\n                {\n                  this.goPropertiesPost.geoObjectType = this.geoObjectType;\n                }\n\n                if ( !this.geoObjectType.isGeometryEditable ) {\n//                    this.areGeometriesValid = true;\n                }\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( err );\n                //                this.error( err );\n            } );\n    }\n\n    private fetchHierarchies( code: string, typeTypeCode: string ) {\n        this.registryService.getHierarchiesForGeoObject( code, typeTypeCode )\n            .then(( hierarchies: any ) => {\n                this.hierarchies = hierarchies;\n\n                //                this.parentTreeNode = CascadingGeoSelector.staticGetParents( this.hierarchies );\n                this.areParentsValid = true;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    getTypeAheadObservable( text, typeCode ) {\n        return Observable.create(( observer: any ) => {\n            this.registryService.getGeoObjectSuggestionsTypeAhead( text, typeCode ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, ptn: ParentTreeNode ): void {\n        this.registryService.getGeoObjectByCode( e.item.code, ptn.geoObject.properties.type )\n            .then( geoObject => {\n\n                ptn.geoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                this.error( err );\n            } );\n    }\n\n    private onValidChange() {\n        if ( this.attributeEditor != null ) {\n            this.arePropertiesValid = this.attributeEditor.getIsValid();\n        }\n//        if ( this.geometryEditor != null ) {\n//            this.areGeometriesValid = this.geometryEditor.getIsValid();\n//        }\n        if ( this.parentSelector != null ) {\n            this.areParentsValid = this.parentSelector.getIsValid();\n        }\n        \n//        this.isValid = this.arePropertiesValid && this.areGeometriesValid && this.areParentsValid;\n        this.isValid = this.arePropertiesValid && this.areParentsValid;\n    }\n\n    changePage( nextPage: number, force: boolean = false ): void {\n        if ( nextPage === this.tabIndex && !force ) {\n            return;\n        }\n\n\n        this.persistModelChanges();\n\n        this.tabIndex = nextPage;\n\n        this.onValidChange();\n        \n        if (nextPage === 2)\n        {\n          this.isEditingGeometries = true;\n        }\n        else\n        {\n          this.isEditingGeometries = false;\n        }\n    }\n\n    private persistModelChanges(): void {\n        if ( this.attributeEditor != null ) {\n          this.goPropertiesPost = this.attributeEditor.getGeoObject();\n        }\n        if ( this.parentSelector != null ) {\n          this.hierarchies = this.parentSelector.getHierarchies();\n        }\n\n        this.goSubmit = this.goPropertiesPost;\n\n        //        if ( this.parentTreeNode != null ) {\n        //            this.parentTreeNode.geoObject = this.goSubmit;\n        //        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n      // TODO\n  \n      // Handle error\n      if ( err !== null ) {\n          this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n          this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n      }\n    }\n\n    public cancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    public submit(): void {\n      if ( this.isValid ) {\n        this.bsModalRef.hide();\n    \n        this.persistModelChanges();\n        \n        if (this.submitFunction == null)\n        {\n          this.registryService.applyGeoObjectEdit( this.hierarchies, this.goSubmit, this.isNewGeoObject, this.masterListId, this.notes )\n            .then(() => {\n  \n              if ( this.onSuccessCallback != null ) {\n                  this.onSuccessCallback();\n              }\n  \n            } ).catch(( err: HttpErrorResponse ) => {\n              this.error( err );\n            } );\n        }\n        else\n        {\n          this.submitFunction();\n        }\n      }\n    }\n}\n","<div class=\"modal-body\">\n    \n    <form class=\"modal-form\" style=\"overflow: visible;\" #goForm=\"ngForm\">\n        <!-- <div class=\"row-holder\">\n            <div class=\"label-holder\"><label><localize key=\"masterlist.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <error-message *ngIf=\"!areParentsValid\" [message]=\"'geoobject.editor.modal.parents.must.be.assigned.message' | localize\"></error-message>\n            </div>\n        </div>\n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"btn-group geobject-editor-tab-holder\">\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 0}\" (click)=\"this.changePage(0);\">\n                        <localize key=\"geoobject.editor.tabZero\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 1, error: !areParentsValid}\" (click)=\"this.changePage(1);\">\n                        <localize key=\"geoobject.editor.tabOne\"></localize>\n                    </label>\n                    <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: this.tabIndex === 2, disabled: !isGeometryEditable}\" (click)=\"isGeometryEditable && this.changePage(2);\">\n                        <localize key=\"geoobject.editor.tabTwo\"></localize>\n                    </label>\n                </div>\n            </div>\n        </div>\n\n\n        <!-- Attributes tab -->\n        <geoobject-shared-attribute-editor \n            *ngIf=\"(this.tabIndex === 0 || this.tabIndex === 2) && this.geoObjectType && this.goPropertiesPre && this.goPropertiesPost\"\n            #attributeEditor \n            (valid)=\"this.onValidChange()\" \n            [geoObjectType]=\"this.geoObjectType\"\n            [preGeoObject]=\"this.goPropertiesPre\" \n            [postGeoObject]=\"this.goPropertiesPost\" \n            [forDate]=\"this.forDate\" \n            [isNew]=\"this.isNewGeoObject\"\n            [isEditingGeometries]=\"this.isEditingGeometries\">\n        </geoobject-shared-attribute-editor>\n\n\n        <!-- Parents tab -->\n        <div *ngIf=\"this.tabIndex === 1 && this.hierarchies != null\">\n          <cascading-geo-selector #parentSelector \n            [isValid]=\"this.isValid\" (valid)=\"this.onValidChange()\"\n            [forDate]=\"this.forDate\"             \n            [hierarchies]=\"this.hierarchies\">\n          </cascading-geo-selector>\n        </div>\n\n         <!-- Geometry tab -->\n         <!--\n         <div class=\"row-holder\">\n            <div class=\"label-holder\"></div>\n            <div class=\"holder\">\n              <geoobject-editor-map #geometryEditor *ngIf=\"this.tabIndex === 2\" [geometryType]=\"this.geoObjectType.geometryType\" [readOnly]=\"true\" [preGeometry]=\"this.goGeometries.getVotAtDate(this.forDate, 'geometry', this.geoObjectType, this.localizeService).value\" [bboxCode]=\"this.goGeometries.attributes.code\" [bboxType]=\"this.geoObjectType.code\"></geoobject-editor-map>\n            </div>\n        </div>\n        -->\n\n        <div *ngIf=\"!isMaintainer\" class=\"row-holder\" style=\"padding-top: 10px;\">\n            <div class=\"label-holder\"><label><localize key=\"change.request.action.detail.contributorNotes\"></localize></label></div>\n            <div class=\"holder text-left\">\n              <textarea style=\"width: 100%;border-radius: 8px;height: 70px; padding:5px;\" class=\"detail-value\" [(ngModel)]=\"notes\" name=\"notes\" required></textarea>\n              <div class=\"form-input-validation-error-message-wrapper\">\n                <p *ngIf=\"!notes\" class=\"error-message\">Notes are required.</p>\n              </div>\n            </div>\n        </div>\n\n         <div class=\"row-holder\" style=\"margin-bottom: 20px;\">\n            <div class=\"label-holder\"><label><localize key=\"masterlist.forDate\"></localize></label></div>\n            <div class=\"holder\">\n                <input style=\"width:100%;\" type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n            </div>\n        </div>\n        \n        <div class=\"row\">\n            <!-- <div class=\"label-holder\"></div> -->\n            <div class=\"col-md-12\">\n                <div class=\"button-holder text-left\">\n                    <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                        <localize key=\"modal.button.cancel\"></localize>\n                    </button>\n                    <button type=\"submit\" class=\"btn btn-primary\" (click)=\"submit()\" [disabled]=\"goForm.invalid || !this.isValid\">\n                        <localize [key]=\"!isMaintainer ? 'change.request.page.title' : 'modal.button.submit'\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>","///\r\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\r\n///\r\n/// This file is part of Runway SDK(tm).\r\n///\r\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\r\n/// it under the terms of the GNU Lesser General Public License as\r\n/// published by the Free Software Foundation, either version 3 of the\r\n/// License, or (at your option) any later version.\r\n///\r\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\r\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\r\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n/// GNU Lesser General Public License for more details.\r\n///\r\n/// You should have received a copy of the GNU Lesser General Public\r\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\r\n///\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\nimport { Task } from '../model/registry';\r\nimport { Progress } from '../../shared/model/progress';\r\nimport { EventService } from '../../shared/service/event.service';\r\n\r\ndeclare var acp: any;\r\n\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n\r\n    constructor( private http: HttpClient, private eventService: EventService ) { }\r\n\r\n    getMyTasks( pageNum: number, pageSize: number, whereStatus: string ): Promise<any> {\r\n      let params: HttpParams = new HttpParams();\r\n      \r\n      params = params.set( 'orderBy', 'createDate' );\r\n      params = params.set( 'pageNum', pageNum.toString() );\r\n      params = params.set( 'pageSize', pageSize.toString() );\r\n      params = params.set( 'whereStatus', whereStatus );\r\n    \r\n      return this.http\r\n          .get<any>( acp + '/tasks/get', { params: params } )\r\n          .toPromise();\r\n    }\r\n    \r\n    completeTask( taskId: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/complete', JSON.stringify( { 'id': taskId } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n    \r\n    setTaskStatus( taskId: string, status: string ): Promise<Response> {\r\n      let headers = new HttpHeaders( {\r\n        'Content-Type': 'application/json'\r\n      } );\r\n      \r\n      this.eventService.start();\r\n      \r\n      return this.http\r\n        .post<any>( acp + '/tasks/setTaskStatus', JSON.stringify( { 'id': taskId, 'status': status } ), { headers: headers } )\r\n\t\t\t.pipe(finalize(() => {\r\n\t\t\t\tthis.eventService.complete();\r\n\t\t\t}))\r\n        .toPromise();\r\n    }\r\n}\r\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { TreeNode, TreeComponent, TreeDropDirective } from 'angular-tree-component';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ContextMenuService, ContextMenuComponent } from 'ngx-contextmenu';\n\nimport { CreateHierarchyTypeModalComponent } from './modals/create-hierarchy-type-modal.component';\nimport { AddChildToHierarchyModalComponent } from './modals/add-child-to-hierarchy-modal.component';\nimport { CreateGeoObjTypeModalComponent } from './modals/create-geoobjtype-modal.component';\nimport { ManageGeoObjectTypeModalComponent } from './modals/manage-geoobjecttype-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { HierarchyType, HierarchyNode } from '../../model/hierarchy';\nimport { GeoObjectType } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal'\n\nimport { HierarchyService } from '../../service/hierarchy.service';\nimport { RegistryService } from '../../service/registry.service';\n\nclass Instance {\n    active: boolean;\n    label: string;\n}\n\n@Component( {\n\n    selector: 'hierarchies',\n    templateUrl: './hierarchy.component.html',\n    styleUrls: ['./hierarchy.css']\n} )\n\nexport class HierarchyComponent implements OnInit {\n\n    // isAdmin: boolean;\n    // isMaintainer: boolean;\n    // isContributor: boolean;\n\n    instance: Instance = new Instance();\n    hierarchies: HierarchyType[];\n    geoObjectTypes: GeoObjectType[] = [];\n    nodes = [] as HierarchyNode[];\n    currentHierarchy: HierarchyType = null;\n\n    hierarchyTypeDeleteExclusions: string[] = ['AllowedIn', 'IsARelationship'];\n    geoObjectTypeDeleteExclusions: string[] = ['ROOT'];\n\n\n    /*\n     * Reference to the modal current showing\n    */\n    private bsModalRef: BsModalRef;\n\n    /*\n     * Tree component\n     */\n    @ViewChild( TreeComponent )\n    private tree: TreeComponent;\n\n    /*\n     * Template for tree node menu\n     */\n    @ViewChild( 'nodeMenu' ) public nodeMenuComponent: ContextMenuComponent;\n\n    /*\n     * Template for leaf menu\n     */\n    @ViewChild( 'leafMenu' ) public leafMenuComponent: ContextMenuComponent;\n\n    /* \n     * Currently clicked on id for delete confirmation modal \n     */\n    current: TreeNode;\n\n\n    constructor( private hierarchyService: HierarchyService, private modalService: BsModalService,\n        private contextMenuService: ContextMenuService, private changeDetectorRef: ChangeDetectorRef,\n        private localizeService: LocalizationService, private registryService: RegistryService, private authService: AuthService ) {\n\n        // this.admin = authService.isAdmin();\n        // this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\t// this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n    }\n\n    ngOnInit(): void {\n        this.refreshAll( null );\n    }\n\n    ngAfterViewInit() {\n\n    }\n\n    isRA(): boolean {\n        return this.authService.isRA();\n    }\n\n    isOrganizationRA(orgCode: string): boolean {\n        return this.authService.isOrganizationRA(orgCode);\n    }\n\n    public refreshAll( desiredHierarchy ) {\n        this.registryService.init().then( response => {\n            this.localizeService.setLocales( response.locales );\n\n            this.geoObjectTypes = response.types;\n\n            this.geoObjectTypes.sort(( a, b ) => {\n                if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n                else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n                else return 0;\n            } );\n\n            let pos = this.getGeoObjectTypePosition( \"ROOT\" );\n            if ( pos ) {\n                this.geoObjectTypes.splice( pos, 1 );\n            }\n\n            this.setHierarchies( response.hierarchies );\n\n            this.setNodesOnInit( desiredHierarchy );\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public excludeHierarchyTypeDeletes( hierarchy: HierarchyType ) {\n        return ( this.hierarchyTypeDeleteExclusions.indexOf( hierarchy.code ) !== -1 );\n    }\n\n    public excludeGeoObjectTypeDeletes( geoObjectType: GeoObjectType ) {\n        return ( this.geoObjectTypeDeleteExclusions.indexOf( geoObjectType.code ) !== -1 );\n    }\n\n    private setNodesOnInit( desiredHierarchy ): void {\n\n        let index = -1;\n\n        if ( desiredHierarchy != null ) {\n            index = this.hierarchies.findIndex( h => h.code === desiredHierarchy.code );\n        }\n        else if ( this.hierarchies.length > 0 ) {\n            index = 0;\n        }\n\n        if ( index > -1 ) {\n            let hierarchy = this.hierarchies[index];\n\n            this.nodes = hierarchy.rootGeoObjectTypes;\n\n            this.currentHierarchy = hierarchy;\n\n            setTimeout(() => {\n                if ( this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n    }\n\n    private setNodesForHierarchy( hierarchyType: HierarchyType ): void {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let hierarchy = this.hierarchies[i];\n            if ( hierarchy.code === hierarchyType.code ) {\n                this.nodes = hierarchyType.rootGeoObjectTypes;\n                this.currentHierarchy = hierarchy;\n                break;\n            }\n        }\n\n        setTimeout(() => {\n            this.tree.treeModel.expandAll();\n        }, 1 )\n    }\n\n    private getHierarchy( hierarchyId: string ): HierarchyType {\n        let target: HierarchyType = null;\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchyId === hierarchy.code ) {\n                target = hierarchy;\n            }\n        } );\n\n        return target;\n    }\n\n    private setHierarchies( data: HierarchyType[] ): void {\n        let hierarchies: HierarchyType[] = [];\n        data.forEach(( hierarchyType, index ) => {\n\n            if ( hierarchyType.rootGeoObjectTypes.length > 0 ) {\n                hierarchyType.rootGeoObjectTypes.forEach( rootGeoObjectType => {\n                    this.processHierarchyNodes( rootGeoObjectType );\n                } )\n            }\n\n            hierarchies.push( hierarchyType );\n\n        } );\n\n        this.hierarchies = hierarchies\n\n        this.hierarchies.sort(( a, b ) => {\n            if ( a.label.localizedValue.toLowerCase() < b.label.localizedValue.toLowerCase() ) return -1;\n            else if ( a.label.localizedValue.toLowerCase() > b.label.localizedValue.toLowerCase() ) return 1;\n            else return 0;\n        } );\n    }\n\n    private updateHierarchy( code: string, rootGeoObjectTypes: HierarchyNode[] ): void {\n        this.hierarchies.forEach( hierarchy => {\n            if ( hierarchy.code === code ) {\n                hierarchy.rootGeoObjectTypes = rootGeoObjectTypes;\n            }\n        } )\n    }\n\n    /**\n     * Set properties required by angular-tree-component using recursion.\n     */\n    private processHierarchyNodes( node: HierarchyNode ) {\n        node.label = this.getHierarchyLabel( node.geoObjectType );\n\n        node.children.forEach( child => {\n            this.processHierarchyNodes( child );\n        } )\n    }\n\n    private getHierarchyLabel( geoObjectTypeCode: string ): string {\n        let label: string = null;\n        this.geoObjectTypes.forEach( function( gOT ) {\n            if ( gOT.code === geoObjectTypeCode ) {\n                label = gOT.label.localizedValue;\n            }\n        } );\n\n        return label;\n    }\n\n    public handleOnMenu( node: any, $event: any ): void {\n        if (this.isOrganizationRA(this.currentHierarchy.organizationCode))\n        {\n          this.contextMenuService.show.next( {\n              contextMenu: ( node.data.childType !== null ? this.nodeMenuComponent : this.leafMenuComponent ),\n              event: $event,\n              item: node,\n          } );\n          $event.preventDefault();\n          $event.stopPropagation();\n        }\n        else\n        {\n          $event.preventDefault();\n          $event.stopPropagation();\n        }\n    }\n\n    public treeNodeOnClick( node: TreeNode, $event: any ): void {\n\n        node.treeModel.setFocusedNode( node );\n\n        if ( node.treeModel.isExpanded( node ) ) {\n            node.collapse();\n        }\n        else {\n            node.treeModel.expandAll();\n        }\n    }\n\n    options = {\n        //\t\t  allowDrag: (node:TreeNode) => node.isLeaf,\n        //\t\t  allowDrop: (element:Element, { parent, index }: {parent:TreeNode,index:number}) => {\n        // return true / false based on element, to.parent, to.index. e.g.\n        //\t\t\t    return parent.hasChildren;\n        //\t\t\t  },\n        displayField: \"label\",\n        actionMapping: {\n            mouse: {\n                click: ( tree: TreeComponent, node: TreeNode, $event: any ) => {\n                    this.treeNodeOnClick( node, $event );\n                },\n                contextMenu: ( tree: any, node: any, $event: any ) => {\n                    this.handleOnMenu( node, $event );\n                }\n            }\n        },\n        mouse: {\n            //\t            drop: (tree: TreeComponent, node: TreeNode, $event: any, {from, to}: {from:TreeNode, to:TreeNode}) => {\n            //\t              console.log('drag', from, to); // from === {name: 'first'}\n            //\t              // Add a node to `to.parent` at `to.index` based on the data in `from`\n            //\t              // Then call tree.update()\n            //\t            }\n        }\n    };\n\n    public hierarchyOnClick( event: any, item: any ) {\n        let hierarchyId = item.code;\n\n        this.currentHierarchy = item;\n\n        this.nodes = [];\n\n        if ( this.getHierarchy( hierarchyId ).rootGeoObjectTypes.length > 0 ) {\n            // TODO: should rootGeoObjectTypes be hardcoded to only one entry in the array?\n            this.nodes.push( this.getHierarchy( hierarchyId ).rootGeoObjectTypes[0] );\n\n            setTimeout(() => {\n                if ( this && this.tree ) {\n                    this.tree.treeModel.expandAll();\n                }\n            }, 1 )\n        }\n\n        if ( this.tree ) {\n            this.tree.treeModel.update();\n        }\n    }\n\n    public createHierarchy(): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n\n        ( <CreateHierarchyTypeModalComponent>this.bsModalRef.content ).onHierarchytTypeCreate.subscribe( data => {\n\n            this.hierarchies.push( data );\n        } );\n    }\n\n    public deleteHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.type = \"DANGER\";\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeHierarchyType( data );\n        } );\n    }\n\n    public editHierarchyType( obj: HierarchyType ): void {\n        this.bsModalRef = this.modalService.show( CreateHierarchyTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.edit = true;\n        this.bsModalRef.content.hierarchyType = obj;\n        this.bsModalRef.content.onHierarchytTypeCreate.subscribe( data => {\n            let pos = this.getHierarchyTypePosition( data.code );\n\n            this.hierarchies[pos].label = data.label;\n            this.hierarchies[pos].description = data.description;\n        } );\n    }\n\n    public removeHierarchyType( code: string ): void {\n        this.hierarchyService.deleteHierarchyType( code ).then( response => {\n\n            let pos = this.getHierarchyTypePosition( code );\n            this.hierarchies.splice( pos, 1 );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public createGeoObjectType(): void {\n        this.bsModalRef = this.modalService.show( CreateGeoObjTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n\n        ( <CreateGeoObjTypeModalComponent>this.bsModalRef.content ).onGeoObjTypeCreate.subscribe( data => {\n            this.geoObjectTypes.push( data );\n        } );\n    }\n\n    public deleteGeoObjectType( obj: GeoObjectType ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + obj.label.localizedValue + ']';\n        this.bsModalRef.content.data = obj.code;\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeGeoObjectType( data );\n        } );\n    }\n\n    public removeGeoObjectType( code: string ): void {\n        this.registryService.deleteGeoObjectType( code ).then( response => {\n\n            let pos = this.getGeoObjectTypePosition( code );\n            this.geoObjectTypes.splice( pos, 1 );\n\n            //          const parent = node.parent;\n            //          let children = parent.data.children;\n            //\n            //          parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            //\n            //          if ( parent.data.children.length === 0 ) {\n            //              parent.data.hasChildren = false;\n            //          }\n            //\n            //        this.tree.treeModel.update();\n            //this.setNodesOnInit();\n\n            this.refreshAll( this.currentHierarchy );\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public manageGeoObjectType( geoObjectType: GeoObjectType ): void {\n\n        this.bsModalRef = this.modalService.show( ManageGeoObjectTypeModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'manage-geoobjecttype-modal'\n        } );\n\n        geoObjectType.attributes.sort(( a, b ) => {\n            if ( a.label.localizedValue < b.label.localizedValue ) return -1;\n            else if ( a.label.localizedValue > b.label.localizedValue ) return 1;\n            else return 0;\n        } );\n        this.bsModalRef.content.geoObjectType = geoObjectType;\n\n        ( <ManageGeoObjectTypeModalComponent>this.bsModalRef.content ).onGeoObjectTypeSubmitted.subscribe( data => {\n\n            let position = this.getGeoObjectTypePosition( data.code );\n            if ( position ) {\n                this.geoObjectTypes[position] = data;\n            }\n        } );\n    }\n\n    private getHierarchyTypePosition( code: string ): number {\n        for ( let i = 0; i < this.hierarchies.length; i++ ) {\n            let obj = this.hierarchies[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n    }\n\n    private getGeoObjectTypePosition( code: string ): number {\n        for ( let i = 0; i < this.geoObjectTypes.length; i++ ) {\n            let obj = this.geoObjectTypes[i];\n            if ( obj.code === code ) {\n                return i;\n            }\n        }\n\n        return null;\n    }\n\n    public addChildAndRootToHierarchy(): void {\n        const that = this;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = \"ROOT\";\n        this.bsModalRef.content.toRoot = true;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public addChildToHierarchy( parent: TreeNode ): void {\n        const that = this;\n        that.current = parent;\n\n        this.bsModalRef = this.modalService.show( AddChildToHierarchyModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n            'class': 'upload-modal'\n        } );\n        this.bsModalRef.content.allGeoObjectTypes = this.geoObjectTypes;\n        this.bsModalRef.content.parent = parent;\n        this.bsModalRef.content.toRoot = false;\n        this.bsModalRef.content.hierarchyType = this.currentHierarchy;\n        this.bsModalRef.content.nodes = this.nodes;\n\n        ( <AddChildToHierarchyModalComponent>this.bsModalRef.content ).onNodeChange.subscribe( hierarchyType => {\n            const d = that.current.data;\n\n\n            that.processHierarchyNodes( hierarchyType.rootGeoObjectTypes[0] );\n            that.updateHierarchy( hierarchyType.code, hierarchyType.rootGeoObjectTypes )\n\n            that.setNodesForHierarchy( hierarchyType );\n\n            if ( this.tree ) {\n                this.tree.treeModel.update();\n            }\n        } );\n    }\n\n    public deleteTreeNode( node: TreeNode ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + ' [' + node.data.label + ']';\n        this.bsModalRef.content.data = node;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.removeTreeNode( data );\n        } );\n    }\n\n    public removeTreeNode( node: TreeNode ): void {\n        this.hierarchyService.removeFromHierarchy( this.currentHierarchy.code, node.parent.data.geoObjectType, node.data.geoObjectType ).then( data => {\n\n            if ( node.parent.data.geoObjectType == null ) {\n                this.nodes = [];\n                // this.refreshAll(null);\n                //return;\n            }\n\n            const parent = node.parent;\n            let children = parent.data.children;\n\n            // Update the tree\n            parent.data.children = children.filter(( n: any ) => n.id !== node.data.id );\n            if ( parent.data.children.length === 0 ) {\n                parent.data.hasChildren = false;\n            }\n            this.tree.treeModel.update();\n\n            // Update the available GeoObjectTypes\n            this.changeDetectorRef.detectChanges()\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    public isActive( item: any ) {\n        return this.currentHierarchy === item;\n    };\n\n    public onDrop( $event: any ) {\n        // Dropped $event.element\n        this.removeTreeNode( $event.element )\n    }\n\n    public allowDrop( element: Element ) {\n        // Return true/false based on element\n        return true;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n\n  <loading-bar></loading-bar>\n  \n  <div id=\"app-container\" class=\"container-fluid\">\n  \n  <!--   <h2> <localize key=\"hierarchy.management.title\"></localize> </h2> -->\n    \n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.types.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <!-- to filter out already assigned types use this pipe > geoobjecttype:nodes -->\n          <li class=\"list-group-item\" *ngFor=\"let type of geoObjectTypes\">\n            {{type.label.localizedValue}} <i *ngIf=\"type.isLeaf === 'true'\" class=\"fa fa-leaf\" style=\"font-size:15px;cursor:auto;margin-left:5px;\" aria-hidden=\"true\"></i> \n            \n            <span *ngIf=\"isOrganizationRA(type.organizationCode)\">\n              <i class=\"fa fa-times delete-btn clickable pull-right\" *ngIf=\"!excludeGeoObjectTypeDeletes(type)\" (click)=\"deleteGeoObjectType(type)\"></i> \n              <i class=\"fa fa-pencil clickable pull-right\" (click)=\"manageGeoObjectType(type)\"> </i> \n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createGeoObjectType()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n        \n      </div>\n    \n    \n      <div class=\"col-md-4\">\n        <h3><localize key=\"hierarchy.management.panel.title\"></localize></h3>\n        <hr>\n        <ul class=\"list-group\">\n          <li *ngFor=\"let hierarchy of hierarchies;\" class=\"list-group-item clickable\" [ngClass]=\"{active: isActive(hierarchy)}\" (click)=\"hierarchyOnClick($event,hierarchy)\">\n            <i class=\"fa fa-sitemap\"></i> {{hierarchy.label.localizedValue}} \n\n            <span *ngIf=\"isOrganizationRA(hierarchy.organizationCode)\">\n              <i *ngIf=\"!excludeHierarchyTypeDeletes(hierarchy)\" class=\"fa fa-times delete-btn clickable pull-right\" (click)=\"deleteHierarchyType(hierarchy)\"></i> \n              <i class=\"fa fa-pencil pull-right clickable\" (click)=\"editHierarchyType(hierarchy)\"> </i>            \n            </span>\n          </li>\n        </ul>\n        \n        <div>\n          <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"createHierarchy()\"><localize key=\"hierarchy.management.button.create\"></localize></button>\n        </div>\n      </div>\n      \n      <div class=\"col-md-4\">\n        <h3> \n            <localize key=\"hierarchy.current.management.panel.title\"></localize> \n            <span *ngIf=\"currentHierarchy\">{{currentHierarchy.label.localizedValue}}</span>\n        </h3>\n        <hr>\n        <div *ngIf=\"nodes.length > 0\" class=\"tree\">\n          <tree-root [nodes]=\"nodes\" [options]=\"options\"></tree-root>\n        </div>\n        <div *ngIf=\"currentHierarchy && nodes.length === 0\">\n          <div>\n            <button type=\"submit\" class=\"btn btn-primary\" *ngIf=\"isRA()\" (click)=\"addChildAndRootToHierarchy()\"><localize key=\"hierarchy.current.management.panel.button.add\"></localize></button>\n          </div>\n        </div>\n      </div>\n            \n    </div>\n    \n  </div>\n  \n  <context-menu #nodeMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"addChildToHierarchy($event.item)\">\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n    </ng-template>\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>\n    </ng-template>\n  </context-menu>\n  \n  <context-menu #leafMenu>\n<!--     <ng-template contextMenuItem let-item (execute)=\"handleEdit($event.item)\"> -->\n<!--       Edit {{item?.data.name}} -->\n<!--     </ng-template> -->\n    <ng-template contextMenuItem let-item (execute)=\"deleteTreeNode($event.item)\">\n      <localize key=\"hierarchy.management.button.removeTreeNodeFromHierarchy\"></localize>  {{item?.data.label.localizedValue}}\n    </ng-template>\n  </context-menu>\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType } from '../../../model/hierarchy';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'create-hierarchy-type-modal',\n    templateUrl: './create-hierarchy-type-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateHierarchyTypeModalComponent implements OnInit {\n\n    hierarchyType: HierarchyType;\n    organizations: any = [];\n    message: string = null;\n    edit: boolean = false;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onHierarchytTypeCreate: Subject<HierarchyType>;\n\n    constructor( private lService: LocalizationService, private registryService: RegistryService, private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onHierarchytTypeCreate = new Subject();\n\n        this.hierarchyType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"rootGeoObjectTypes\": [],\n            \"organizationCode\": \"\"\n        };\n        \n        this.registryService.getOrganizations().then(orgs => {\n          if (!this.edit && orgs.length === 1)\n          {\n            this.hierarchyType.organizationCode = orgs[0].code;\n          }\n          this.organizations = orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        if ( this.edit ) {\n            this.hierarchyService.updateHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchyService.createHierarchyType( JSON.stringify( this.hierarchyType ) ).then( data => {\n                this.onHierarchytTypeCreate.next( data );\n                this.bsModalRef.hide();\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n\n}\n","<form>\n\n  <div class=\"modal-body\">\n    <form class=\"modal-form\">\n\n      <error-message [message]=\"message\"></error-message>\n\n      <div class=\"form-group\">\n        <label for=\"codeInput\">\n          <localize key=\"data.property.label.code\"></localize>\n        </label>\n        <input [(ngModel)]=\"hierarchyType.code\" name=\"code\" type=\"input\" class=\"form-control\" id=\"codeInput\"\n          [disabled]=\"edit\" required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.label.localeValues\">\n        <label for=\"labelInput\">\n          <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\" class=\"form-control\"\n          required>\n      </div>\n      <div class=\"form-group\" *ngFor=\"let localeValue of hierarchyType.description.localeValues\">\n        <label for=\"descriptionInput\">\n          <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n        </label>\n        <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n          class=\"form-control\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"organization\">\n          <localize key=\"attribute.organization.label\"></localize>\n        </label>\n        <select [disabled]=\"edit\" class=\"select-area\" name=\"organization\"\n          [(ngModel)]=\"hierarchyType.organizationCode\" required>\n          <option></option>\n          <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n        </select>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.cancel\"></localize>\n            </button>\n            <button type=\"submit\" [disabled]=\"hierarchyType.code.length < 1\" class=\"btn btn-primary\"\n              (click)=\"handleOnSubmit()\" style=\"padding: 4px 18px;\">\n              <localize key=\"modal.button.ok\"></localize>\n            </button>\n          </div>\n        </div>\n      </div>\n\n    </form>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { TreeNode } from 'angular-tree-component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { HierarchyType, HierarchyNode } from '../../../model/hierarchy';\nimport { GeoObjectType } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\n\n\n@Component( {\n    selector: 'add-child-to-hierarchy-modal',\n    templateUrl: './add-child-to-hierarchy-modal.component.html',\n    styleUrls: []\n} )\nexport class AddChildToHierarchyModalComponent implements OnInit {\n\n\t /*\n     * parent id of the node being created\n     */\n    public parent: TreeNode;\n\n    public hierarchyType: HierarchyType;\n\n    public nodes: HierarchyNode[];\n\n    public allGeoObjectTypes: GeoObjectType[];\n\n    public selectedGeoObjectType: GeoObjectType;\n\n    private selectUndefinedOptionValue: any;\n\n\tprivate toRoot: boolean = false;\n\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onNodeChange: Subject<HierarchyType>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef ) {\n    }\n\n    ngOnInit(): void {\n        this.onNodeChange = new Subject();\n    }\n    \n    onSelect(value: string): void {\n    \tthis.allGeoObjectTypes.forEach(gObj => {\n    \t\tif(gObj.code === value){\n    \t\t\tthis.selectedGeoObjectType = gObj;\n    \t\t}\n    \t})\n    }\n    \n    handleOnSubmit(): void {\n        this.message = null;\n        \n        let parent = (this.toRoot) ? \"ROOT\" : this.parent.data.geoObjectType;\n        this.hierarchyService.addChildToHierarchy( this.hierarchyType.code, parent, this.selectedGeoObjectType.code ).then( data => {\n            this.onNodeChange.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n        \n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n}\n","<form class=\"modal-form\">\n\n  <div *ngIf=\"parent != null\" class=\"modal-body\">\n\n    <error-message [message]=\"message\"></error-message>\n\n    <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.button.addRelationship\"></localize>\n      </h1>\n    </div>\n    <fieldset>\n\n      <div class=\"form-group\">\n\n        <select *ngIf=\"allGeoObjectTypes\" (change)=\"onSelect($event.target.value)\">\n          <option disabled hidden [value]=\"selectUndefinedOptionValue\">-- <localize\n              key=\"hierarchy.management.create.child.option.label.selectType\"></localize> --</option>\n          <!-- to filter out all geoobjecttypes that are already in hierarchies use this pip in the iterator > | geoobjecttype:nodes -->\n          <option></option>\n          <option *ngFor=\"let geoObjType of allGeoObjectTypes\" value={{geoObjType.code}}>\n            {{geoObjType.label.localizedValue}}\n          </option>\n        </select>\n\n      </div>\n\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.cancel\"></localize>\n          </span>\n        </button>\n        <button type=\"submit\" (click)=\"handleOnSubmit()\" class=\"btn btn-primary\" role=\"button\" aria-disabled=\"false\">\n          <span>\n            <localize key=\"modal.button.ok\"></localize>\n          </span>\n        </button>\n      </div>\n    </fieldset>\n  </div>\n</form>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { Organization } from '../../../../admin/model/settings';\n\n\n@Component( {\n    selector: 'create-geoobjtype-modal',\n    templateUrl: './create-geoobjtype-modal.component.html',\n    styleUrls: []\n} )\nexport class CreateGeoObjTypeModalComponent implements OnInit {\n\n    geoObjectType: GeoObjectType;\n    organizations: any = [];\n    message: string = null;\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onGeoObjTypeCreate: Subject<GeoObjectType>;\n\n    constructor( private lService: LocalizationService, private registryService: RegistryService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onGeoObjTypeCreate = new Subject();\n\n        this.geoObjectType = {\n            \"code\": \"\",\n            \"label\": this.lService.create(),\n            \"description\": this.lService.create(),\n            \"geometryType\": \"POINT\",\n            \"isLeaf\": false,\n            \"isGeometryEditable\": true,\n            \"organizationCode\": \"\",\n            \"attributes\": []\n        };\n\n        this.registryService.getOrganizations().then(orgs => {\n          if (orgs.length === 1)\n          {\n            this.geoObjectType.organizationCode = orgs[0].code;\n          }\n          this.organizations = orgs;\n        }).catch((err: HttpErrorResponse) => {\n            this.error(err);\n        });\n    }\n\n    handleOnSubmit(): void {\n        this.message = null;\n\n        this.registryService.createGeoObjectType( JSON.stringify( this.geoObjectType ) ).then( data => {\n            this.onGeoObjTypeCreate.next( data );\n            this.bsModalRef.hide();\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    toggleIsLeaf(): void {\n        this.geoObjectType.isLeaf = !this.geoObjectType.isLeaf;\n    }\n\n    toggleIsGeometryEditable(): void {\n        this.geoObjectType.isGeometryEditable = !this.geoObjectType.isGeometryEditable;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            console.log( this.message );\n        }\n    }\n}\n","<form #form=\"ngForm\" (ngSubmit)=\"form.valid && handleOnSubmit()\" class=\"modal-form\">\n\n  <div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n\n    <!-- <div class=\"heading\">\n      <h1>\n        <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}\n      </h1>\n    </div> -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <div>\n            <label for=\"codeInput\">\n              <localize key=\"data.property.label.code\"></localize>\n            </label>\n            <input [(ngModel)]=\"geoObjectType.code\" name=\"code\" type=\"text\" class=\"form-control\" id=\"codeInput\"\n              required>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.label.localeValues\">\n          <label>\n            <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n          </label>\n          <input [(ngModel)]=\"localeValue.value\" [name]=\"'label-' + localeValue.locale\" type=\"input\"\n            class=\"form-control\" [required]=\"localeValue.locale === 'defaultLocale'\">\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\" *ngFor=\"let localeValue of geoObjectType.description.localeValues\">\n          <div>\n            <label>\n              <localize key=\"data.property.label.description\"></localize> ({{localeValue.locale}})\n            </label>\n            <input [(ngModel)]=\"localeValue.value\" [name]=\"'description-' + localeValue.locale\" type=\"input\"\n              class=\"form-control\">\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"geometryType\">\n            <localize key=\"data.property.label.geometryType\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"geometryType\" [(ngModel)]=\"geoObjectType.geometryType\" required>\n            <option></option>\n            <!-- <option value=\"POINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"LINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"POLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n            <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.multipoint\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.multiline\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.multipolygon\"></localize>\n            </option> -->\n             <option value=\"MULTIPOINT\">\n              <localize key=\"georegistry.geometry.point\"></localize>\n            </option>\n            <option value=\"MULTILINE\">\n              <localize key=\"georegistry.geometry.line\"></localize>\n            </option>\n            <option value=\"MULTIPOLYGON\">\n              <localize key=\"georegistry.geometry.polygon\"></localize>\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n    <!-- \n    <div class=\"form-group\">\n      <div >\n        <div class=\"check-block\" style=\"display:inline-block;\">\n         <div (click)=\"toggleIsLeaf()\" [ngClass]=\"{'chk-checked' : geoObjectType.isLeaf}\" style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n          <span></span>\n         </div>\n    \n         <label class=\"checkbox-label\" style=\"line-height: normal;\"> <localize key=\"hierarchy.management.option.label.isLeafNode\"></localize></label>\n        </div>\n       </div>\n    </div>\n -->\n\n    <div class=\"row\">\n      <div class=\"col-md-12\" style=\"margin-bottom: 15px;\">\n        <div class=\"form-group\">\n          <div class=\"check-block\">\n            <div (click)=\"toggleIsGeometryEditable()\" [ngClass]=\"{'chk-checked' : geoObjectType.isGeometryEditable}\"\n              style=\"margin:0;\" class=\"jcf-unselectable chk-area\">\n              <span></span>\n            </div>\n\n            <label class=\"checkbox-label\">\n              <localize key=\"hierarchy.management.option.label.isGeometryEditable\"></localize>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"form-group\">\n          <label for=\"organization\">\n            <localize key=\"attribute.organization.label\"></localize>\n          </label>\n          <select class=\"select-area\" name=\"organization\" [(ngModel)]=\"geoObjectType.organizationCode\" required>\n            <option></option>\n            <option *ngFor=\"let org of organizations\" [value]=\"org.code\">{{org.label.localizedValue}}</option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n          <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-primary\">\n            <localize key=\"modal.button.ok\"></localize>\n          </button>\n        </div>\n      </div>\n    </div>\n\n  </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport {  GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, GeoObjectType } from '../../../model/registry';\n\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'manage-geoobjecttype-modal',\n    templateUrl: './manage-geoobjecttype-modal.component.html',\n    styleUrls: ['./manage-geoobjecttype-modal.css']\n} )\nexport class ManageGeoObjectTypeModalComponent implements OnInit {\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n    modalStateSubscription: Subscription;\n    geoObjectType: GeoObjectType;\n    public onGeoObjectTypeSubmitted: Subject<GeoObjectType>;\n\n    constructor( public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n      this.modalStateSubscription = geoObjectTypeManagementService.modalStepChange.subscribe( modalState => {\n            this.modalState = modalState;\n      });\n    }\n\n    ngOnInit(): void {\n        this.onGeoObjectTypeSubmitted = new Subject();\n    }\n\n    ngOnDestroy(){\n        this.modalStateSubscription.unsubscribe();\n    }\n\n    onModalStateChange(state: any): void {\n        this.modalState = state;\n    }\n\n    onGeoObjectTypeChange(data: any): void {\n        // send persisted geoobjecttype to the parent calling component (hierarchy.component) so the \n        // updated GeoObjectType can be reflected in the template\n        this.onGeoObjectTypeSubmitted.next( data );\n    }\n\n    update(): void {\n\n    }\n\n    close(): void {\n        this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","\n<form >\n     \n  <modal-step-indicator></modal-step-indicator>\n\n  <geoobjecttype-input *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\" (geoObjectTypeChange)=\"onGeoObjectTypeChange($event)\" [geoObjectType]=\"geoObjectType\" [setGeoObjectType]=\"geoObjectType\"></geoobjecttype-input>\n  \n  <manage-attributes-modal *ngIf=\"modalState.state === 'MANAGE-ATTRIBUTES'\" [geoObjectType]=\"geoObjectType\"></manage-attributes-modal>\n  \n  <define-attribute-modal-content *ngIf=\"modalState.state === 'DEFINE-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" ></define-attribute-modal-content>\n\n  <edit-attribute-modal-content *ngIf=\"modalState.state === 'EDIT-ATTRIBUTE'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" ></edit-attribute-modal-content>\n\n  <manage-term-options *ngIf=\"modalState.state === 'MANAGE-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\"></manage-term-options>\n \n  <edit-term-option-input *ngIf=\"modalState.state === 'EDIT-TERM-OPTION'\" [geoObjectType]=\"geoObjectType\" [attribute]=\"modalState.attribute\" [termOption]=\"modalState.termOption\" ></edit-term-option-input>\n \n</form>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n@Component( {\n    selector: 'geoobjecttype-input',\n    templateUrl: './geoobjecttype-input.component.html',\n    styleUrls: ['./geoobjecttype-input.css']\n} )\nexport class GeoObjectTypeInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Output() geoObjectTypeChange:  EventEmitter<GeoObjectType> = new EventEmitter<GeoObjectType>();\n    editGeoObjectType: GeoObjectType;\n    \n    @Input('setGeoObjectType') \n    set in(geoObjectType: GeoObjectType){\n        if(geoObjectType){\n          this.editGeoObjectType = JSON.parse(JSON.stringify(geoObjectType));\n        //   this.geoObjectType = geoObjectType;\n        }\n    }\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":\"\", \"termOption\":\"\"};\n\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizationService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, \n        private localizationService: LocalizationService, private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n        this.geoObjectTypeManagementService.setModalState(this.modalState);\n    }\n\n    ngAfterViewInit() {\n    }\n\n    ngOnDestroy(){\n    }\n\n    manageAttributes(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    onModalStateChange(state: ManageGeoObjectTypeModalState): void {\n        this.modalState = state;\n    }\n\n    update(): void {\n        this.registryService.updateGeoObjectType( this.editGeoObjectType ).then( geoObjectType => {\n\n            // emit the persisted geoobjecttype to the parent widget component (manage-geoobjecttype.component)\n            // so that the change can be updated in the template\n            this.geoObjectTypeChange.emit(geoObjectType);\n\n            this.close();\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // resetGeoObjectType(): void {\n    //     this.geoObjectType = this.geoObjectTypeOriginal;\n    // }\n\n    close(): void {\n        // this.resetGeoObjectType();\n        this.bsModalRef.hide();\n    }\n\n\n    isValid(): boolean {\n        // if(this.attribute.code && this.attribute.label) {\n\n        //     // if code has a space\n        //     if(this.attribute.code.indexOf(\" \") !== -1){\n        //         return false;\n        //     }\n\n        //     // If label is only spaces\n        //     if(this.attribute.label.replace(/\\s/g, '').length === 0) {\n        //         return false\n        //     }\n\n        //     return true;\n        // }\n        \n        // return false;\n\n        return true;\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","\n<div class=\"modal-body\" *ngIf=\"modalState.state === 'MANAGE-GEO-OBJECT-TYPE'\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"editGeoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.editGeoObjectType.title\"></localize>\n                {{editGeoObjectType.label.localizedValue}}\n            </h1>\n        </div>\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.code\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.code\" name=\"code\" disabled required>\n                    </span>\n                </div>\n            </div>\n\n            <localized-input [(value)]=\"editGeoObjectType.label\" key=\"data.property.label.label\"></localized-input>\n            <localized-text [(value)]=\"editGeoObjectType.description\" key=\"data.property.label.description\"></localized-text>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"data.property.label.geometryType\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <select name=\"geometryType\" [(ngModel)]=\"editGeoObjectType.geometryType\" disabled>\n                        <option></option>\n                         <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <!-- <option value=\"POINT\"><localize key=\"georegistry.geometry.point\"></localize></option>\n                        <option value=\"LINE\"><localize key=\"georegistry.geometry.line\"></localize></option>\n                        <option value=\"POLYGON\"><localize key=\"georegistry.geometry.polygon\"></localize></option>\n                        <option value=\"MULTIPOINT\"><localize key=\"georegistry.geometry.multipoint\"></localize></option>\n                        <option value=\"MULTILINE\"><localize key=\"georegistry.geometry.multiline\"></localize></option>\n                        <option value=\"MULTIPOLYGON\"><localize key=\"georegistry.geometry.multipolygon\"></localize></option> -->\n                    </select>\n                </div>\n            </div>\n\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.option.label.geometryEditable\"></localize></label>\n                </div>\n                <div class=\"holder\">\n\n                    <boolean-field [(value)]=\"editGeoObjectType.isGeometryEditable\" [localizeLabelKey]=\"'hierarchy.management.option.label.isGeometryEditable'\"></boolean-field>\n                </div>\n            </div>\n            \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"attribute.organization.label\"></localize></label>\n              </div>\n              <div class=\"holder\">\n                <span class=\"text\"> <input type=\"text\" [(ngModel)]=\"editGeoObjectType.organizationCode\" name=\"organization\" disabled required></span>\n              </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                    <label><localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize></label>\n                </div>\n                <div class=\"holder\">\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group list-group-flush\">\n                                <li *ngFor=\"let attr of editGeoObjectType.attributes\" class=\"list-group-item\">{{attr.label.localizedValue}}</li>\n                            </ul>\n\n                            <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"manageAttributes()\">\n                                <localize key=\"modal.button.manageAttributes\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.cancel\"></localize>\n                        </button>\n                        <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"update()\">\n                            <localize key=\"modal.button.submit\"></localize>\n                        </button>\n                    </div>\n                </div>\n        </fieldset>\n    </form>\n</div>\n\n<!-- </form> -->\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\n\n\n@Component( {\n    selector: 'manage-attributes-modal',\n    templateUrl: './manage-attributes-modal.component.html',\n    styleUrls: ['./manage-attributes-modal.css']\n} )\nexport class ManageAttributesModalComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    /*\n     * Observable subject for TreeNode changes.  Called when create is successful \n     */\n    public onDeleteAttribute: Subject<boolean>;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, public confirmBsModalRef: BsModalRef, private modalService: BsModalService, private localizeService: LocalizationService, \n        private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.onDeleteAttribute = new Subject();\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngOnDestroy(){\n      this.onDeleteAttribute.unsubscribe();\n    }\n\n    defineAttributeModal(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    editAttribute(attr: Attribute, e: any): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":attr, \"termOption\":\"\"})\n    }\n\n    removeAttributeType(attr: Attribute, e: any): void {\n\n      this.confirmBsModalRef = this.modalService.show( ConfirmModalComponent, {\n\t\t  animated: true,\n\t\t  backdrop: true,\n\t\t  ignoreBackdropClick: true,\n\t  } );\n\t  this.confirmBsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + '[' + attr.label.localizedValue + ']';\n      this.confirmBsModalRef.content.data = {'attributeType': attr, 'geoObjectType': this.geoObjectType};\n      this.confirmBsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n      this.confirmBsModalRef.content.type = ModalTypes.danger;\n\n\t  ( <ConfirmModalComponent>this.confirmBsModalRef.content ).onConfirm.subscribe( data => {\n          this.deleteAttributeType( data.geoObjectType.code, data.attributeType );\n\t  } );\n    }\n\n    deleteAttributeType(geoObjectTypeCode: string, attr: Attribute): void {\n\n          this.registryService.deleteAttributeType( geoObjectTypeCode, attr.code ).then( data => {\n            this.onDeleteAttribute.next( data );\n\n            if(data){\n              this.geoObjectType.attributes.splice(this.geoObjectType.attributes.indexOf(attr), 1);\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageGeoObjectType, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" *ngIf=\"geoObjectType\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <div class=\"heading\">\n            <h1>\n                <localize key=\"hierarchy.management.manage.attributes.title\"></localize> {{geoObjectType.label.localizedValue}}</h1>\n        </div>\n        <fieldset>\n\n            <div>\n                <div class=\"label-holder\">\n                    <label>\n                        <localize key=\"hierarchy.management.manage.attributes.label.displayAttributes\"></localize>\n                    </label>\n                </div>\n                <div class=\"holder dataset-attr-holder\">\n\n                    <div class=\"table-responsive\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <localize key=\"data.property.label.label\"></localize>\n                                    </th>\n                                    <th class=\"button-column-header\">\n                                        <localize key=\"data.property.label.actions\"></localize>\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr *ngFor=\"let attr of geoObjectType.attributes\">\n                                    <td>{{attr.label.localizedValue}}</td>\n                                    <td class=\"button-column\">\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\"\n                                            title=\"<localize key='modal.button.edit'></localize>\"></a>\n                                        <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\"\n                                            title=\"<localize key='modal.button.remove'></localize>\"></a>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <!-- <table class=\"list-table table table-bordered table-striped\">\n                        <tbody>\n                        <tr *ngFor=\"let attr of geoObjectType.attributes\" class=\"fade-ngRepeat-item\">\n                            <td class=\"button-column\">\n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editAttribute(attr, $event)\" title=\"<localize key='modal.button.edit'></localize>\"></a>                             \n                            <a *ngIf=\"!attr.isDefault && attr.code !== 'keyName'\" class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeAttributeType(attr, $event)\" title=\"<localize key='modal.button.remove'></localize>\"></a>\n                            </td>                  \n                            <td class=\"submit-form\">\n                            <dl>\n                                <dd>\n                                <h4 class=\"disabled\" >{{attr.label}}</h4>\n                                </dd>\n                            </dl>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table> -->\n                </div>\n            </div>\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <i class=\"fa fa-plus clickable\" style=\"font-size:20px;margin:10px 0 10px 0;\" aria-hidden=\"true\" (click)=\"defineAttributeModal()\">\n                        <localize key=\"modal.button.add\"></localize>\n                    </i>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n\n</div>\n\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ErrorMessageComponent } from '../../../../shared/component/message/error-message.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, AttributeTerm, AttributeDecimal, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n \n\n@Component( {\n    selector: 'define-attribute-modal-content',\n    templateUrl: './define-attribute-modal-content.component.html',\n    styleUrls: ['./define-attribute-modal-content.css'],\n    animations: [\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class DefineAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    message: string = null;\n    newAttribute: Attribute = null;\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.create.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.defineAttribute, \"attribute\":\"\", \"termOption\":\"\"};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, \n        private geoObjectTypeManagementService: GeoObjectTypeManagementService, private localizeService: LocalizationService,\n        private registryService: RegistryService ) {\n    \n    }\n\n    ngOnInit(): void {\n        this.setAttribute(\"character\");\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n\n        if(this.attributeInputComponent){\n            this.attributeInputComponent.animate();\n        }\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.addAttributeType( this.geoObjectType.code, this.newAttribute ).then( data => {\n            this.geoObjectType.attributes.push(data);\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    setAttribute(type:string): void {\n        if(type === 'term'){\n            this.newAttribute = new AttributeTerm(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else if(type === 'float') {\n            this.newAttribute = new AttributeDecimal(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n        else{\n            this.newAttribute = new Attribute(\"\", type, this.localizeService.create(), this.localizeService.create(), false, false, false, true);\n        }\n    }\n\n    isFormValid(): boolean {\n        \n        let isAttrValid: boolean = false;\n        \n        if(this.attributeInputComponent){\n            isAttrValid = this.attributeInputComponent.isValid();\n        }\n        \n        if(isAttrValid){\n            return true;\n        }\n\n        return false;\n    }\n    \n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <!-- <error-message [message]=\"message\"></error-message> -->\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div *ngIf=\"message\" class=\"row-holder\">\n                    <div class=\"label-holder\"></div>\n                    <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                        <error-message [message]=\"message\"></error-message>\n                    </div>\n                </div>\n                \n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.define.attribute.title\"></localize>\n                    </h1>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-md-12\" style=\"margin-bottom: 20px;\">\n                        <div class=\"btn-group define-attribute-btns\">\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'character'}\" (click)=\"setAttribute('character')\">\n                                <localize key=\"data.type.label.text\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'integer'}\" (click)=\"setAttribute('integer')\">\n                                <localize key=\"data.type.label.integer\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'float'}\" (click)=\"setAttribute('float')\">\n                                <localize key=\"data.type.label.float\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'date'}\" (click)=\"setAttribute('date')\">\n                                <localize key=\"data.type.label.date\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'boolean'}\" (click)=\"setAttribute('boolean')\">\n                                <localize key=\"data.type.label.boolean\"></localize>\n                            </label>\n                            <label class=\"btn full-width-radio-button\" [ngClass]=\"{active: newAttribute.type === 'term'}\" (click)=\"setAttribute('term')\">\n                                <localize key=\"data.type.label.term\"></localize>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"false\" [excludeDescription]=\"false\" [isDecimal]=\"newAttribute.type === 'float' ? true : false\" [(attribute)]=\"newAttribute\"></attribute-input>\n\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                        <!-- <div class=\"label-holder\"> \n                        </div> -->\n                        <!-- <div class=\"holder\"> -->\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!isFormValid()\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoObjectType, Attribute, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\n\nimport { StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\n\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n \n@Component( {\n    selector: 'edit-attribute-modal-content',\n    templateUrl: './edit-attribute-modal-content.component.html',\n    styleUrls: ['./edit-attribute-modal-content.css'],\n    animations: [\n        trigger('openClose', \n            [\n                transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class EditAttributeModalContentComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":this.attribute, \"termOption\":\"\"};\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\":true, \"enabled\":true}\n    ]};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.updateAttributeType( this.geoObjectType.code, this.attribute ).then( data => {\n\n            for(let i=0; i<this.geoObjectType.attributes.length; i++){\n                let attr = this.geoObjectType.attributes[i];\n                if(attr.code === data.code){\n                    Object.assign(attr, data);\n                    break;\n                }\n            }\n\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    isFormValid(): boolean {\n        \n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    back(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageAttributes, \"attribute\":\"\", \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n   <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.attribute.title\"></localize>: {{attribute.label.localizedValue}}\n                    </h1>\n\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'character'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.text\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'integer'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.integer\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'float'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.float\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'boolean'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.boolean\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'date'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.date\"></localize></h4>\n                    <h4 class=\"sub-title\" *ngIf=\"attribute.type === 'term'\"><localize key=\"hierarchy.management.edit.attribute.subtitle\"></localize>: <localize key=\"data.type.label.term\"></localize></h4>\n                </div>\n\n                <fieldset>\n\n                    <attribute-input [disableCodeField]=\"true\" [excludeDescription]=\"attribute.type === 'term' ? true : false\" [isDecimal]=\"attribute.type === 'float' ? true : false\" [(attribute)]=\"attribute\"></attribute-input>\n\n                    <!-- *ngIf=\"attribute.type === 'term' && isFormValid()\" -->\n                    <term-option-widget *ngIf=\"attribute.type === 'term' && isFormValid()\" [(attribute)]=\"attribute\" [geoObjectType]=\"geoObjectType\"></term-option-widget>\n\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n    \n\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { GeoObjectType, AttributeTerm, GeoObjectTypeModalStates, ManageGeoObjectTypeModalState, Term} from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\n\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n\n\n@Component( {\n    selector: 'term-option-widget',\n    templateUrl: './term-option-widget.component.html',\n    styleUrls: ['./term-option-widget.css'],\n    animations: [\n        trigger('toggleInputs', [\n            state('none, void', \n                style({ 'opacity': 0})\n              ),\n              state('show', \n                style({ 'opacity': 1})\n              ),\n              transition('none => show', animate('300ms')),\n              transition('show => none', animate('100ms'))\n        ]),\n        trigger('openClose', \n            [\n            transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class TermOptionWidgetComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    state: string = 'none';\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"};\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService ) {\n    }\n\n    ngOnInit(): void {\n\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy(){\n    \n    }\n\n    handleOnSubmit(): void {\n        \n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone(event: AnimationEvent): void {\n        this.state = \"show\";\n    }\n\n    // isValid(): boolean {\n    //     if(this.termOption.code && this.termOption.code.length > 0 && this.termOption.label && this.termOption.label.length > 0){\n            \n    //         // If code has a space\n    //         if(this.termOption.code.indexOf(\" \") !== -1){\n    //             return false;\n    //         }\n\n    //         // If label is only spaces\n    //         if(this.termOption.label.replace(/\\s/g, '').length === 0) {\n    //             return false\n    //         }\n\n    //         return true;\n    //     }\n    //     else if(this.termOption.code && this.termOption.code.indexOf(\" \") !== -1){\n    //         return false;\n    //     }\n            \n    //     return false\n    // }\n\n    openAddTermOptionForm(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\": \"\"})\n\n    }    \n}\n","<div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n\n    <div>\n        <div class=\"label-holder\">\n            <label>\n                <localize key=\"hierarchy.management.manage.attributes.label.displayTerms\"></localize>\n            </label>\n        </div>\n        <div class=\"holder\">\n            <div class=\"panel panel-default\">\n                <div class=\"panel-body\">\n                    <ul class=\"list-group list-group-flush\">\n                        <li *ngFor=\"let term of attribute.rootTerm.children\" class=\"list-group-item\">{{term.label.localizedValue}}</li>\n                    </ul>\n\n                    <button type=\"button\" class=\"btn btn-primary full-width\" (click)=\"openAddTermOptionForm()\">\n                        <localize key=\"modal.button.manageTermOptions\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n\n","import { Component, OnInit, AfterViewInit, ElementRef, Input, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport {\n    trigger,\n    state,\n    style,\n    animate,\n    transition\n} from '@angular/animations'\nimport { NgControl, Validators, FormBuilder } from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { StepConfig,ModalTypes } from '../../../../shared/model/modal';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from '../../../../shared/component/message/error-message.component';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service'\nimport { RegistryService } from '../../../service/registry.service';\nimport { GeoObjectType, AttributeTerm, Term, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n@Component( {\n    selector: 'manage-term-options',\n    templateUrl: './manage-term-options.component.html',\n    styleUrls: ['./manage-term-options.css'],\n    animations: [\n        trigger( 'toggleInputs', [\n            state( 'none, void',\n                style( { 'opacity': 0 } )\n            ),\n            state( 'show',\n                style( { 'opacity': 1 } )\n            ),\n            transition( 'none => show', animate( '300ms' ) ),\n            transition( 'show => none', animate( '100ms' ) )\n        ] ),\n        trigger( 'openClose',\n            [\n                transition(\n                    ':enter', [\n                        style( { 'opacity': 0 } ),\n                        animate( '500ms', style( { 'opacity': 1 } ) )\n                    ]\n                ),\n                transition(\n                    ':leave', [\n                        style( { 'opacity': 1 } ),\n                        animate( '0ms', style( { 'opacity': 0 } ) ),\n\n                    ]\n                )]\n        )\n    ]\n} )\nexport class ManageTermOptionsComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: AttributeTerm;\n    @Output() attributeChange = new EventEmitter<AttributeTerm>();\n    message: string = null;\n    termOption: Term;\n    state: string = 'none';\n    enableTermOptionForm = false;\n    modalStepConfig: StepConfig = {\r\n        \"steps\": [\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.geoobjecttype\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.attributes\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.edit.attribute\" ), \"active\": true, \"enabled\": false },\n            { \"label\": this.localizeService.decode( \"modal.step.indicator.manage.term.options\" ), \"active\": true, \"enabled\": true }\n        ]\r\n    };\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private cdr: ChangeDetectorRef, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private modalService: BsModalService, private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService,\n        private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig( this.modalStepConfig );\n        this.termOption = new Term( \"\", this.localizeService.create(), this.localizeService.create() );\n    }\n\n    ngAfterViewInit() {\n        this.state = 'show';\n        this.cdr.detectChanges();\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    handleOnSubmit(): void {\n\n    }\n\n    animate(): void {\n        this.state = \"none\";\n    }\n\n    onAnimationDone( event: AnimationEvent ): void {\n        this.state = \"show\";\n    }\n\n    isValid(): boolean {\n        if ( this.termOption.code && this.termOption.code.length > 0 ) {\n\n            // If code has a space\n            if ( this.termOption.code.indexOf( \" \" ) !== -1 ) {\n                return false;\n            }\n\n            // If label is only spaces\n            for(let i = 0; i < this.termOption.label.localeValues.length; i++) {\n              if ( this.termOption.label.localeValues[i].value.replace( /\\s/g, '' ).length === 0 ) {\n                return false\n              }                \n            }\n            \n\n            return true;\n        }\n        else if ( this.termOption.code && this.termOption.code.indexOf( \" \" ) !== -1 ) {\n            return false;\n        }\n\n        return false\n    }\n\n    addTermOption(): void {\n\n        this.registryService.addAttributeTermTypeOption( this.attribute.rootTerm.code, this.termOption ).then( data => {\n\n            this.attribute.rootTerm.children.push( data );\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n            this.enableTermOptionForm = false;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n\n    }\n\n    deleteTermOption( termOption: Term ): void {\n\n        this.registryService.deleteAttributeTermTypeOption( termOption.code ).then( data => {\n\n            if ( this.attribute.rootTerm.children.indexOf( termOption ) !== -1 ) {\n                this.attribute.rootTerm.children.splice( this.attribute.rootTerm.children.indexOf( termOption ), 1 );\n            }\n\n            this.attributeChange.emit( this.attribute );\n\n            this.clearTermOption();\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    removeTermOption( termOption: Term ): void {\n        this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n        this.bsModalRef.content.message = this.localizeService.decode( \"confirm.modal.verify.delete\" ) + '[' + termOption.label + ']';\n        this.bsModalRef.content.submitText = this.localizeService.decode( \"modal.button.delete\" );\n        this.bsModalRef.content.type = ModalTypes.danger;\n\n        ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n            this.deleteTermOption( termOption );\n        } );\n    }\n\n    editTermOption( termOption: Term ): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editTermOption, \"attribute\": this.attribute, \"termOption\": termOption } )\n    }\n\n    clearTermOption(): void {\n        this.termOption.code = \"\";\n        this.termOption.label = this.localizeService.create();\n        this.termOption.description = this.localizeService.create();\n    }\n\n    cancelTermOption(): void {\n        this.clearTermOption();\n        this.enableTermOptionForm = false;\n    }\n\n    openAddTermOptionForm(): void {\n        this.enableTermOptionForm = true;\n    }\n\n    close(): void {\n        this.geoObjectTypeManagementService.setModalState( { \"state\": GeoObjectTypeModalStates.editAttribute, \"attribute\": this.attribute, \"termOption\": \"\" } )\n    }\n\n    error( err: HttpErrorResponse ): void {\n        if ( err !== null ) {\n            // TODO: add error modal\n            //   this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            //   this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid\">\n        <fieldset>\n\n            <div *ngIf=\"message\" class=\"row-holder\">\n                <div class=\"label-holder\"></div>\n                <div class=\"holder\" style=\"border-left: solid 1px #8c0000;\">\n                    <error-message [message]=\"message\"></error-message>\n                </div>\n            </div>\n                \n            <div class=\"heading\">\n                <h1>\n                    <localize key=\"hierarchy.management.edit.term.options.title\">: {{attribute.label.localizedValue}}</localize>\n                </h1>\n            </div>\n            <div class=\"row-holder\" [@toggleInputs]=\"state\" (@toggleInputs.done)=\"onAnimationDone($event)\">\n                <div [@openClose]>\n                    <div class=\"label-holder\">\n                        <label>\n                            <localize key=\"term.option.input.label.existingTypes\"></localize>\n                        </label>\n                    </div>\n                    <div class=\"holder\">\n                        <span class=\"text\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th>\n                                                <localize key=\"data.property.label.code\"></localize>\n                                            </th>\n                                            <th *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <localize key=\"data.property.label.label\"></localize> ({{localeValue.locale}})\n                                            </th>\n                                            <th class=\"button-column-header\">\n                                                <localize key=\"data.property.label.actions\"></localize>\n                                            </th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr *ngFor=\"let option of attribute.rootTerm.children\">\n                                            <td>{{option.code}}</td>\n                                            <td *ngFor=\"let localeValue of option.label.localeValues\">{{localeValue.value}}</td>\n                                            <td class=\"button-column\">\n                                                <a class=\"fa fa-pencil ico-edit\" [routerLink]=\"\" (click)=\"editTermOption(option, $event)\"></a>\n                                                <a class=\"fa fa-trash-o ico-remove\" [routerLink]=\"\" (click)=\"removeTermOption(option, $event)\"></a>\n                                            </td>\n                                        </tr>\n                                        <tr>\n                                            <td>\n                                                <input type=\"text\" [(ngModel)]=\"termOption.code\" name=\"termOptionCode\" [required]=\"termOption.label ? true : null \">\n                                            </td>\n                                            <td *ngFor=\"let localeValue of termOption.label.localeValues\">\n                                                <input type=\"text\" [(ngModel)]=\"localeValue.value\" [name]=\"'termOptionLabel-' + localeValue.locale\" [required]=\"termOption.code ? true : null \">\n                                            </td>\n                                            <td class=\"button-column\">\n                                                <button type=\"button\" class=\"btn btn-primary\" [disabled]=\"!isValid()\" (click)=\"addTermOption()\">\n                                                    <localize key=\"modal.button.add\"></localize>\n                                                </button>\n                                                <!-- <a class=\"fa fa-plus-square ico-edit\" [routerLink]=\"\" (click)=\"addTermOption()\"></a> -->\n                                                <!-- <a class=\"fa fa-trash ico-remove\" [routerLink]=\"\" (click)=\"cancelTermOption()\"></a> -->\n                                                <!-- <button type=\"button\" class=\"btn btn-default\" (click)=\"cancelTermOption()\">\n                                    <localize key=\"modal.button.cancel\"></localize> \n                                </button> -->\n\n                                            </td>\n                                        </tr>\n                                        <!-- <tr>\n                          <td></td>\n                          <td></td>\n                          <td class=\"button-column\"> \n                            <button type=\"button\" class=\"btn btn-primary\" *ngIf=\"enableTermOptionForm === false\" (click)=\"openAddTermOptionForm()\">\n                                <localize key=\"modal.button.add\"></localize>\n                            </button>\n                          </td>\n                        </tr> -->\n                                        <!-- <a class=\"fa fa-plus\" [routerLink]=\"\" (click)=\"openAddTermOptionForm()\"></a> -->\n\n                                    </tbody>\n                                </table>\n                            </div>\n                        </span>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"row-holder\">\n                <div class=\"label-holder\">\n                </div>\n                <div class=\"holder\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" class=\"btn btn-default\" (click)=\"close()\">\n                            <localize key=\"modal.button.done\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations'\nimport {NgControl, Validators, FormBuilder} from '@angular/forms';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\n\nimport { Step, StepConfig } from '../../../../shared/model/modal';\nimport { ModalStepIndicatorService } from '../../../../shared/service/modal-step-indicator.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { GeoObjectType, Attribute, Term, ManageGeoObjectTypeModalState, GeoObjectTypeModalStates } from '../../../model/registry';\nimport { RegistryService } from '../../../service/registry.service';\nimport { HierarchyService } from '../../../service/hierarchy.service';\nimport { GeoObjectTypeManagementService } from '../../../service/geoobjecttype-management.service';\nimport { AttributeInputComponent} from '../geoobjecttype-management/attribute-input.component';\nimport { GeoObjectAttributeCodeValidator } from '../../../factory/form-validation.factory';\n\n \n@Component( {\n    selector: 'edit-term-option-input',\n    templateUrl: './edit-term-option-input.component.html',\n    styleUrls: [],\n    animations: [\n        trigger('openClose', \n            [\n                transition(\n                ':enter', [\n                style({ 'opacity': 0}),\n                animate('500ms', style({ 'opacity': 1}))\n                ]\n            ),\n            transition(\n                ':leave', [\n                style({ 'opacity': 1}),\n                animate('0ms', style({'opacity': 0})),\n                \n                ]\n            )]\n      )\n    ]\n} )\nexport class EditTermOptionInputComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n    @Input() attribute: Attribute;\n    @Input() termOption: Term;\n    message: string = null;\n    modalState: ManageGeoObjectTypeModalState = {\"state\":GeoObjectTypeModalStates.editAttribute, \"attribute\":this.attribute, \"termOption\":\"\"};\n    modalStepConfig: StepConfig = {\"steps\": [\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.geoobjecttype\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.attributes\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.attribute\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.manage.term.options\"), \"active\":true, \"enabled\":false},\n        {\"label\":this.localizeService.decode(\"modal.step.indicator.edit.term.option\"), \"active\":true, \"enabled\":true}\n\n    ]};\n\n    @ViewChild(AttributeInputComponent) attributeInputComponent:AttributeInputComponent;\n\n    constructor( private hierarchyService: HierarchyService, public bsModalRef: BsModalRef, private modalStepIndicatorService: ModalStepIndicatorService, private geoObjectTypeManagementService: GeoObjectTypeManagementService,\n        private localizeService: LocalizationService, private registryService: RegistryService ) {\n    }\n\n    ngOnInit(): void {\n        this.modalStepIndicatorService.setStepConfig(this.modalStepConfig);\n    }\n\n    ngAfterViewInit() {\n   \n    }\n\n    ngOnDestroy(){\n    }\n\n    handleOnSubmit(): void {\n        \n        this.registryService.updateAttributeTermTypeOption( this.termOption ).then( data => {\n            this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    isFormValid(): boolean {\n        \n        // let isAttrValid: boolean = this.attributeInputComponent.isValid();\n        \n        // if(isAttrValid){\n        //     return true;\n        // }\n\n        // return false;\n        return true\n    }\n\n    cancel(): void {\n        this.geoObjectTypeManagementService.setModalState({\"state\":GeoObjectTypeModalStates.manageTermOption, \"attribute\":this.attribute, \"termOption\":\"\"})\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n            \n            console.log(this.message);\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n   <error-message [message]=\"message\"></error-message>\n\n    <form #form=\"ngForm\" class=\"modal-form\" (ngSubmit)=\"form.valid && handleOnSubmit()\">\n        <div class=\"\">\n            <div class=\"\">\n                <div class=\"heading\">\n                    <h1>\n                        <localize key=\"hierarchy.management.edit.term.option.title\"></localize>\n                    </h1>\n                </div>\n\n                <fieldset>\n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                            <label>\n                                <localize key=\"data.property.label.code\"></localize>\n                            </label>\n                        </div>\n                        <div class=\"holder\">\n                            <span class=\"text\">\n                                <input autofocus type=\"text\" [disabled]=\"true\" [(ngModel)]=\"termOption.code\" name=\"code\" required geoObjectAttributeCode>\n                            </span>\n                        </div>\n                    </div>\n                    <localized-input [(value)]=\"termOption.label\" key=\"data.property.label.label\"></localized-input>\n                    \n                    <div class=\"row-holder\">\n                        <div class=\"label-holder\">\n                        </div>\n                        <div class=\"holder\">\n                            <div class=\"button-holder\">\n                                <button type=\"button\" class=\"btn btn-default\" (click)=\"cancel()\">\n                                    <localize key=\"modal.button.cancel\"></localize>\n                                </button>\n                                <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\n                                    <localize key=\"modal.button.submit\"></localize>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </fieldset>\n            </div>\n        </div>\n    </form>\n\n\n</div>\n","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'shapefile-modal',\n    templateUrl: './shapefile-modal.component.html',\n    styleUrls: []\n} )\nexport class ShapefileModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n    constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n        private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.message = null;\n\n        this.service.importShapefile( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n                this.bsModalRef.hide()\n\n                this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n                this.bsModalRef.content.cancelText = this.localizeService.decode( \"modal.button.close\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n            }\n        } ).catch(( response: HttpErrorResponse ) => {\n            this.error( response );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.message = null;\n\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\n\nimport { ImportConfiguration, LocationProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'location-problem',\n    templateUrl: './location-problem.component.html',\n    styleUrls: []\n} )\nexport class LocationProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: LocationProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    entityLabel: string;\n    entityId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.entityLabel, this.problem.type, this.problem.parent, this.configuration.hierarchy ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.entityLabel = null;\n        this.entityId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.entityId = e.item.id;\n        this.hasSynonym = ( this.entityId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createGeoObjectSynonym( this.entityId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    vOid: response.vOid, \n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    ignoreDataAtLocation(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNOREATLOCATION',\n            label: locationLabel,\n        };\n    }\n\n    undoAction(): void {\n        let locationLabel = this.problem.label;\n        let universal = this.problem.type;\n\n        if ( this.problem.resolved ) {\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNOREATLOCATION' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteGeoObjectSynonym( action.synonymId, action.vOid ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n\n                    this.entityLabel = null;\n                    this.hasSynonym = ( this.entityLabel != null );\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n\n        }\n    }\n}\n","<div class=\"row\" style=\"padding-bottom: 10px;\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">\n      <ol *ngIf=\"problem.context.length > 0\">\n        <li *ngFor=\"let context of problem.context\">{{context.label}} ({{context.type}})</li>\n      </ol>\n    </div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}} ({{problem.typeLabel}})</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"entityLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"name\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymFromLocationTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreDataAtLocation()\" [title]=\"'dataUploader.ignoreAtLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <a (click)=\"toggle()\"> <i class=\"fa fa-caret-right clickable\" aria-hidden=\"true\"></i> <i class=\"fa fa-caret-down\" style=\"display: none;\" aria-hidden=\"true\"></i> <localize key=\"dataUploader.resolvedSynonym\"></localize> [{{problem.action.label}}]\n        </a>\n        <span *ngIf=\"show\">\n          <ul>\n            <localize key=\"dataUploader.locatedWithin\"></localize>\n            <li *ngFor=\"let ancestor of problem.action.ancestors\">{{ancestor.label}}</li>\n          </ul>\n        </span>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNOREATLOCATION'\">\n        <localize key=\"dataUploader.resolvedIgnoreAtLocation\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedLocationTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs';\nimport { v4 as uuid } from 'uuid';\n\nimport { ImportConfiguration, TermProblem } from '../../../model/io';\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n\n    selector: 'term-problem',\n    templateUrl: './term-problem.component.html',\n    styleUrls: []\n} )\nexport class TermProblemComponent implements OnInit {\n\n    @Input() configuration: ImportConfiguration;\n    @Input() problem: TermProblem;\n    @Input() index: number;\n    @Output() onError: EventEmitter<any> = new EventEmitter<any>();\n\n    //    show: boolean;\n    dataSource: Observable<any>;\n    hasSynonym: boolean;\n\n    termLabel: string;\n    termId: string;\n\n    constructor( private service: IOService ) {\n        this.dataSource = Observable.create(( observer: any ) => {\n            this.service.getTermSuggestions( this.problem.mdAttributeId, this.termLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    ngOnInit(): void {\n        this.termLabel = null;\n        this.termId = null;\n        this.hasSynonym = false;\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n        this.hasSynonym = ( this.termId != null );\n    }\n\n    createSynonym(): void {\n        if ( this.hasSynonym ) {\n            this.onError.emit( null );\n\n            this.service.createTermSynonym( this.termId, this.problem.label ).then( response => {\n                this.problem.resolved = true;\n                this.problem.action = {\n                    name: 'SYNONYM',\n                    synonymId: response.synonymId,\n                    label: response.label\n                };\n            } ).catch( e => {\n                this.onError.emit( e.error );\n            } );\n        }\n    }\n\n    createOption(): void {\n        this.onError.emit( null );\n        \n        this.service.createTerm( this.problem.label, uuid(), this.problem.parentCode).then( term => {\n            this.problem.resolved = true;\n            this.problem.action = {\n                name: 'OPTION',\n                term: term\n            };\n        } ).catch( e => {\n            this.onError.emit( e.error );\n        } );\n    }\n\n    ignoreValue(): void {\n        this.problem.resolved = true;\n\n        this.problem.action = {\n            name: 'IGNORE'\n        };\n    }\n\n    undoAction(): void {\n\n        if ( this.problem.resolved ) {\n\n            let action = this.problem.action;\n\n            if ( action.name == 'IGNORE' ) {\n                this.problem.resolved = false;\n                this.problem.action = null;\n            }\n            else if ( action.name == 'SYNONYM' ) {\n                this.onError.emit( null );\n\n                this.service.deleteTermSynonym( action.synonymId ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n            else if ( action.name == 'OPTION' ) {\n                this.onError.emit( null );\n\n                this.service.removeTerm( action.term.code ).then( response => {\n                    this.problem.resolved = false;\n                    this.problem.action = null;\n                } ).catch( e => {\n                    this.onError.emit( e.error );\n                } );\n            }\n        }\n    }\n}\n","<div class=\"row\">\n  <form #problemForm=\"ngForm\">\n    <div class=\"col-sm-4\">{{problem.attributeLabel}}</div>\n    <div class=\"col-sm-2 error-message\">{{problem.label}}</div>\n    <div *ngIf=\"!problem.resolved\">\n      <div class=\"col-sm-4\">\n        <input [name]=\"index + '-name'\" [(ngModel)]=\"termLabel\" [typeaheadAsync]=\"true\" [typeahead]=\"dataSource\" (typeaheadOnSelect)=\"typeaheadOnSelect($event)\" [typeaheadOptionsLimit]=\"7\" typeaheadOptionField=\"label\" class=\"form-control\">\n      </div>\n      <div class=\"col-sm-2\">\n        <i [ngClass]=\"{disabled: !hasSynonym}\" class=\"fa fa-2x fa-compress clickable\" (click)=\"createSynonym()\" [title]=\"'dataUploader.createSynonymCategoryTooltip' | localize\"></i>\n        <i class=\"fa fa-2x fa-plus clickable\" (click)=\"createOption()\" [title]=\"'dataUploader.createNewOptionTooltip' | localize\"></i>        \n        <i class=\"fa fa-2x fa-times-circle clickable\" (click)=\"ignoreValue()\" [title]=\"'dataUploader.ignoreCategoryTooltip' | localize\"></i>      \n      </div>\n    </div>\n    <div *ngIf=\"problem.resolved\">\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'OPTION'\">\n        <localize key=\"dataUploader.resolvedCategoryOption\"></localize>\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'SYNONYM'\">\n        <localize key=\"dataUploader.resolvedSynonym\"></localize>\n        [{{problem.action.label}}]\n      </div>\n      <div class=\"col-sm-4\" *ngIf=\"problem.action.name == 'IGNORE'\">\n        <localize key=\"dataUploader.resolvedIgnoreCategory\"></localize>\n        [{{problem.label}}]\n      </div>\n      <div class=\"col-sm-2\">\n        <i class=\"fa fa-2x fa-undo clickable\" (click)=\"undoAction()\" [title]=\"'dataUploader.undoFixedCategoryTooltip' | localize\"></i>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Router } from '@angular/router';\n\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\nimport { SuccessModalComponent } from '../../../../shared/component/modals/success-modal.component';\nimport { ConfirmModalComponent } from '../../../../shared/component/modals/confirm-modal.component';\n\nimport { ImportConfiguration } from '../../../model/io';\n\nimport { IOService } from '../../../service/io.service';\n\n@Component( {\n    selector: 'spreadsheet-modal',\n    templateUrl: './spreadsheet-modal.component.html',\n    styleUrls: []\n} )\nexport class SpreadsheetModalComponent implements OnInit {\n\n    configuration: ImportConfiguration;\n    message: string = null;\n    state: string = 'MAP';\n\n  constructor( private service: IOService, public bsModalRef: BsModalRef, private modalService: BsModalService,\n    private localizeService: LocalizationService, private router: Router ) {\n    }\n\n    ngOnInit(): void {\n    }\n\n    onStateChange( event: string ): void {\n        if ( event === 'BACK' ) {\n            this.handleBack();\n        }\n        else if ( event === 'NEXT' ) {\n            this.handleNext();\n        }\n        else if ( event === 'CANCEL' ) {\n            this.handleCancel();\n        }\n    }\n\n    handleBack(): void {\n        if ( this.state === 'LOCATION' ) {\n            this.state = 'MAP';\n        }\n    }\n\n    handleNext(): void {\n        if ( this.state === 'MAP' ) {\n            if ( !this.configuration.postalCode ) {\n                this.state = 'LOCATION';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'LOCATION' ) {\n            this.handleSubmit();\n        }\n        else if ( this.state === 'LOCATION-PROBLEM' ) {\n\n            if ( this.configuration.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n            }\n            else {\n                this.handleSubmit();\n            }\n        }\n        else if ( this.state === 'TERM-PROBLEM' ) {\n            this.handleSubmit();\n        }\n    }\n\n    handleSubmit(): void {\n        this.service.importSpreadsheet( this.configuration ).then( config => {\n\n            if ( config.locationProblems != null ) {\n                this.state = 'LOCATION-PROBLEM';\n                this.configuration = config;\n            }\n            else if ( config.termProblems != null ) {\n                this.state = 'TERM-PROBLEM';\n                this.configuration = config;\n            }\n            else {\n              this.bsModalRef.hide()\n\n              this.bsModalRef = this.modalService.show( ConfirmModalComponent, {\n                    animated: true,\n                    backdrop: true,\n                    ignoreBackdropClick: true,\n                } );\n                this.bsModalRef.content.message = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.confirm.message\" );\n                this.bsModalRef.content.submitText = this.localizeService.decode( \"data.import.go.to.scheduled.jobs.button\" );\n\n                ( <ConfirmModalComponent>this.bsModalRef.content ).onConfirm.subscribe( data => {\n                    this.router.navigate(['/registry/scheduled-jobs']);\n                } );\n\n            }\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n\n    }\n\n    handleCancel(): void {\n        this.service.cancelImport( this.configuration ).then( response => {\n            this.bsModalRef.hide()\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n  <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n  <div *ngIf=\"configuration != null && configuration\">\n    <div *ngIf=\"state === 'MAP'\">\n      <attributes-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></attributes-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION'\">\n      <location-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-page>\n    </div>\n    <div *ngIf=\"state === 'LOCATION-PROBLEM'\">\n      <location-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></location-problem-page>\n    </div>\n    <div *ngIf=\"state === 'TERM-PROBLEM'\">\n      <term-problem-page [(configuration)]=\"configuration\" (stateChange)=\"onStateChange($event)\"></term-problem-page>\n    </div>\n  </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-page',\n    templateUrl: './data-page.component.html',\n    styleUrls: ['./data-page.css']\n} )\nexport class DataPageComponent implements OnInit {\n\n\tcontent: string = \"SPREADSHEET\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"SPREADSHEET\") : this.renderContent(\"EXPORT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SPREADSHEET\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"spreadsheet.title\");\n\t\t}\n\t\telse if(content === \"SHAPEFILE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"shapefile.title\");\n\t\t}\n\t\telse if(content === \"EXPORT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"io.export.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <!-- <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"spreadsheet.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"spreadsheet.description\"></localize>\n            </p>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-1\"></div>\n\t\t\t<div class=\"col-md-10\" style=\"padding-top: 30px;\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SPREADSHEET'}\" (click)=\"renderContent('SPREADSHEET')\">Import spreadsheet</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SHAPEFILE'}\" (click)=\"renderContent('SHAPEFILE')\">Import shapefile</a> \n\t\t\t\t\t<!-- <a style=\"font-size:20px;\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'EXPORT'}\" (click)=\"renderContent('EXPORT')\">Export data</a> -->\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<spreadsheet *ngIf=\"content === 'SPREADSHEET'\"></spreadsheet>\n\t\t\t\t\t<shapefile *ngIf=\"content === 'SHAPEFILE'\"></shapefile>\n\t\t\t\t\t<!-- <data-export *ngIf=\"content === 'EXPORT'\"></data-export> -->\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n            <div class=\"col-md-1\"></div>\n        </div>\n</div>\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { SpreadsheetModalComponent } from './modals/spreadsheet-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ImportStrategy } from '../../model/registry';\n\ndeclare var acp: string;\n\n@Component({\n\n\tselector: 'spreadsheet',\n\ttemplateUrl: './spreadsheet.component.html',\n\tstyleUrls: []\n})\nexport class SpreadsheetComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n\timportStrategy: ImportStrategy;\n\timportStrategies: any[] = [\n\t\t{ \"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n\t\t{ \"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n\t\t{ \"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n\t]\n\n    /*\n     * Currently selected code\n     */\n\tcode: string = null;\n\n    /*\n     * Currently start date\n     */\n\tstartDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n\tuploader: FileUploader;\n\n\t@ViewChild('myFile')\n\tfileRef: ElementRef;\n\n\n\tconstructor(private service: IOService, private eventService: EventService, private modalService: BsModalService, private localizationService: LocalizationService, private router: Router, private authService: AuthService) { }\n\n\tngOnInit(): void {\n\t\tthis.service.listGeoObjectTypes(true).then(types => {\n\t\t\t\n\t\t\tvar myOrgTypes = [];\n      for (var i = 0; i < types.length; ++i)\n      {\n        if (this.authService.isOrganizationRA(types[i].orgCode))\n        {\n          myOrgTypes.push(types[i]);\n        }\n      }\n      this.types = myOrgTypes;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tlet options: FileUploaderOptions = {\n\t\t\tqueueLimit: 1,\n\t\t\tremoveAfterUpload: true,\n\t\t\turl: acp + '/excel/get-configuration'\n\t\t};\n\n\t\tthis.uploader = new FileUploader(options);\n\n\t\tthis.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n\t\t\tform.append('type', this.code);\n\n\t\t\tif (this.startDate != null) {\n\t\t\t\tform.append('startDate', this.startDate);\n\t\t\t}\n\t\t\tif (this.importStrategy) {\n\t\t\t\tform.append('strategy', this.importStrategy)\n\t\t\t}\n\t\t};\n\t\tthis.uploader.onBeforeUploadItem = (fileItem: any) => {\n\t\t\tthis.eventService.start();\n\t\t};\n\t\tthis.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n\t\t\tthis.fileRef.nativeElement.value = \"\";\n\t\t\tthis.eventService.complete();\n\t\t};\n\t\tthis.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst configuration = JSON.parse(response);\n\n\t\t\tthis.bsModalRef = this.modalService.show(SpreadsheetModalComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t\tthis.bsModalRef.content.configuration = configuration;\n\t\t};\n\t\tthis.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tthis.error({ error: JSON.parse(response) });\n\t\t}\n\t}\n\n\tonClick(): void {\n\n\t\tif (this.uploader.queue != null && this.uploader.queue.length > 0) {\n\t\t\tthis.uploader.uploadAll();\n\t\t}\n\t\telse {\n\t\t\tthis.error({\n\t\t\t\tmessage: this.localizationService.decode('io.missing.file'),\n\t\t\t\terror: {},\n\t\t\t});\n\t\t}\n\t}\n\n\n\tpublic error(err: any): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","\n<form #form=\"ngForm\">\n    <div class=\"form-group row\" *ngIf=\"types\">\n        <!-- <div class=\"col-md-12\"> -->\n        <label class=\"col-md-3 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                <option></option>\n                <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n            </select>\n        </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"form-group row\">\n        <!-- <div class=\"col-md-12\"> -->\n        <label class=\"col-md-3 text-right\" for=\"strategy\">\n            <localize key=\"spreadsheet.import.import.strategy\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n            </select>\n        </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"file\"> <localize key=\"io.spreadsheet\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".xls, .xlsx\" required />\n        </div>\n    </div>\n\n\n\n    <div class=\"form-group row\">\n        <div class=\"button-holder col-md-12 text-right\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n        </div>\n    </div>\n</form>\n\n","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ShapefileModalComponent } from './modals/shapefile-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { EventService } from '../../../shared/service/event.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ImportStrategy } from '../../model/registry';\n\ndeclare var acp: string;\n\n@Component({\n\n\tselector: 'shapefile',\n\ttemplateUrl: './shapefile.component.html',\n\tstyleUrls: []\n})\nexport class ShapefileComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n\ttypes: { label: string, code: string }[]\n\n\timportStrategy: ImportStrategy;\n\timportStrategies: any[] = [\n\t\t{ \"strategy\": ImportStrategy.NEW_AND_UPDATE, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_AND_UPDATE\") },\n\t\t{ \"strategy\": ImportStrategy.NEW_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.NEW_ONLY\") },\n\t\t{ \"strategy\": ImportStrategy.UPDATE_ONLY, \"label\": this.localizationService.decode(\"etl.import.ImportStrategy.UPDATE_ONLY\") }\n\t]\n\n    /*\n     * Currently selected code\n     */\n\tcode: string = null;\n\n    /*\n     * Currently start date\n     */\n\tstartDate: string = null;\n\n    /*\n     * Reference to the modal current showing\n     */\n\tbsModalRef: BsModalRef;\n\n    /*\n     * File uploader\n     */\n\tuploader: FileUploader;\n\n\t@ViewChild('myFile')\n\tfileRef: ElementRef;\n\n\tconstructor(private service: IOService, private eventService: EventService, private modalService: BsModalService, private localizationService: LocalizationService, private router: Router, private authService: AuthService) { }\n\n\tngOnInit(): void {\n\t\tthis.service.listGeoObjectTypes(true).then(types => {\n\t\t\n\t\t  var myOrgTypes = [];\n\t\t  for (var i = 0; i < types.length; ++i)\n\t\t  {\n\t\t    if (this.authService.isOrganizationRA(types[i].orgCode))\n\t\t    {\n\t\t      myOrgTypes.push(types[i]);\n\t\t    }\n\t\t  }\n\t\t\tthis.types = myOrgTypes;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t\tlet options: FileUploaderOptions = {\n\t\t\tqueueLimit: 1,\n\t\t\tremoveAfterUpload: true,\n\t\t\turl: acp + '/shapefile/get-shapefile-configuration'\n\t\t};\n\n\t\tthis.uploader = new FileUploader(options);\n\t\tthis.uploader.onBuildItemForm = (fileItem: any, form: any) => {\n\t\t\tform.append('type', this.code);\n\n\t\t\tif (this.startDate != null) {\n\t\t\t\tform.append('startDate', this.startDate);\n\t\t\t}\n\n\t\t\tif (this.importStrategy) {\n\t\t\t\tform.append('strategy', this.importStrategy)\n\t\t\t}\n\t\t};\n\t\tthis.uploader.onBeforeUploadItem = (fileItem: any) => {\n\t\t\tthis.eventService.start();\n\t\t};\n\t\tthis.uploader.onCompleteItem = (item: any, response: any, status: any, headers: any) => {\n\t\t\tthis.fileRef.nativeElement.value = \"\";\n\t\t\tthis.eventService.complete();\n\t\t};\n\t\tthis.uploader.onSuccessItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst configuration = JSON.parse(response);\n\n\t\t\tthis.bsModalRef = this.modalService.show(ShapefileModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.configuration = configuration;\n\t\t};\n\t\tthis.uploader.onErrorItem = (item: any, response: string, status: number, headers: any) => {\n\t\t\tconst error = JSON.parse(response)\n\n\t\t\tthis.error({ error: error });\n\t\t}\n\t}\n\n\tonClick(): void {\n\n\t\tif (this.uploader.queue != null && this.uploader.queue.length > 0) {\n\t\t\tthis.uploader.uploadAll();\n\t\t}\n\t\telse {\n\t\t\tthis.error({ message: this.localizationService.decode('io.missing.file'), error: {} });\n\t\t}\n\t}\n\n\tpublic error(err: any): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.bsModalRef = this.modalService.show(ErrorModalComponent, { backdrop: true });\n\t\t\tthis.bsModalRef.content.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<form #form=\"ngForm\">\n    <div class=\"form-group row\" *ngIf=\"types\">\n        <label class=\"col-md-3 text-right\" for=\"code\"> <localize key=\"io.geoObjectType\"></localize></label>\n        <div class=\"col-md-9\">\n            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" required>\n                <option></option>\n                <option *ngFor=\"let type of types\" value={{type.code}}>{{type.label}}</option>\n            </select>\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <!-- <div class=\"col-md-12\"> -->\n        <label class=\"col-md-3 text-right\" for=\"strategy\">\n            <localize key=\"shapefile.import.import.strategy\"></localize>\n        </label>\n        <div class=\"col-md-9\">\n            <select id=\"strategy\" name=\"strategy\" class=\"select-area\" [(ngModel)]=\"importStrategy\" required>\n                <option *ngFor=\"let strategy of importStrategies\" value={{strategy.strategy}}>{{strategy.label}}</option>\n            </select>\n        </div>\n        <!-- </div> -->\n    </div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"startDate\"><localize key=\"io.startDate\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" name=\"startDate\" [(ngModel)]=\"startDate\" type=\"date\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\"></div>\n    <div class=\"form-group row\">\n        <label class=\"col-md-3 text-right\" for=\"file\"> <localize key=\"io.shapefile\"></localize></label>\n        <div class=\"col-md-9\">\n            <input class=\"ghost-input\" #myFile name=\"file\" type=\"file\" ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        </div>\n    </div>\n    <div class=\"form-group row\">\n        <div class=\"button-holder col-md-12 text-right\">\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onClick()\">\n                <localize key=\"io.submit\"></localize>\n            </button>\n        </div>\n    </div>\n</form>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListByOrg } from '../../model/registry';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-manager',\n\ttemplateUrl: './master-list-manager.component.html',\n\tstyleUrls: ['./master-list-manager.css']\n})\nexport class MasterListManagerComponent implements OnInit {\n\tmessage: string = null;\n\torgs: MasterListByOrg[];\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.service.getMasterListsByOrg().then(response => {\n\n\t\t\tthis.localizeService.setLocales(response.locales);\n\n\t\t\tthis.orgs = response.orgs;\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tonCreate(org: MasterListByOrg): void {\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.init(org);\n\t\tthis.bsModalRef.content.isNew = true;\n\t\tthis.bsModalRef.content.onMasterListChange.subscribe((list: any) => {\n\t\t\tconst obj = {\n\t\t\t\tlabel: list.displayLabel.localizedValue,\n\t\t\t\toid: list.oid,\n\t\t\t\tcreateDate: list.createDate,\n\t\t\t\tlastUpdateDate: list.lastUpdateDate,\n\t\t\t\tadmin: list.admin,\n\t\t\t\tisMaster: list.isMaster\n\t\t\t};\n\n\t\t\torg.lists.push(obj);\n\t\t});\n\t}\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-view/', code])\n\t}\n\n\tonEdit(pair: { label: string, oid: string }): void {\n\t\tthis.service.getMasterList(pair.oid).then(list => {\n\n\t\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\t\t\tthis.bsModalRef.content.edit = true;\n\t\t\tthis.bsModalRef.content.master = list;\n\t\t\tthis.bsModalRef.content.isNew = false;\n\t\t\tthis.bsModalRef.content.onMasterListChange.subscribe(ret => {\n\t\t\t\tpair.label = ret.displayLabel.localizedValue;\n\t\t\t});\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDelete(org: MasterListByOrg, list: { label: string, oid: string }): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + list.label + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\t\tthis.bsModalRef.content.type = \"danger\";\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterList(list.oid).then(response => {\n\t\t\t\torg.lists = org.lists.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== list.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"heading\">\n            <h2>\n                <localize key=\"masterlists.manager.organizations\"></localize>\n            </h2>\n        </div>\n\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\" *ngFor=\"let org of orgs;\">\n            <div class=\"col-md-12 order-md-1\">\n                <div style=\"margin-top: 30px;\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <h3>{{org.label}}</h3>\n                        </div>\n                    </div>\n                </div>\n\n                <div *ngIf=\"org.lists && org.lists.length === 0\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <div class=\"py-5\">\n                            <p class=\"inline-message\"><localize key=\"masterlists.no.lists.in.org.message\"></localize></p>\n                        </div>\n                    </div>\n                </div>\n\n                <ul *ngIf=\"org.lists && org.lists.length > 0\" class=\"list-group\" style=\"border-bottom: 2px solid lightgrey; margin-top: 30px;\">\n                    <table class=\"table\">\n                        <thead>\n                            <tr>\n                                <th style=\"width: 70%;\"><localize key=\"masterlist.menu\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let list of org.lists; let i = index;\" class=\"clickable\">\n                                <td style=\"width: 70%; vertical-align: middle;\">\n                                  <a [routerLink]=\"'/registry/master-list-view/' + list.oid\" routerLinkActive=\"active\">\n                                    {{list.label}}\n                                    <span *ngIf=\"list.isMaster\"><localize key=\"masterlist.master\"></localize></span>\n                                  </a>\n                                </td>\n                                <td style=\"width: 30%; text-align: right;\">\n                                    <button type=\"submit\" (click)=\"onView(list.oid)\" class=\"btn btn-primary\" role=\"button\">\n                                        <localize key=\"modal.button.view\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onEdit(list)\" class=\"btn btn-default\" role=\"button\">\n                                        <localize key=\"masterlist.button.metadata\"></localize>\n                                    </button>\n                                    <button *ngIf=\"org.admin\" type=\"submit\" (click)=\"onDelete(org, list)\" class=\"btn btn-danger\" role=\"button\">\n                                        <localize key=\"modal.button.delete\"></localize>\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </ul>\n                <div style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n                    <div class=\"col-md-6\">\n                        <div *ngIf=\"org.admin\">\n                            <button type=\"submit\" (click)=\"onCreate(org)\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"hierarchy.management.button.create\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\n\n@Component( {\n    selector: 'export-format-modal',\n    templateUrl: './export-format-modal.component.html',\n    styleUrls: []\n} )\nexport class ExportFormatModalComponent {\n\n    format: string;\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n        this.onFormat = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onFormat.next( this.format );\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n    </div>\n\n    <form class=\"modal-form\" name=\"export-form\">\n        <fieldset>\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <label>\n                        <localize key=\"export-modal.message\"></localize>\n                    </label>\n\n                    <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                        <option></option>\n                        <option value=\"EXCEL\">\n                            <localize key=\"io.spreadsheet\"></localize>\n                        </option>\n                        <option value=\"SHAPEFILE\">\n                            <localize key=\"io.shapefile\"></localize>\n                        </option>\n                    </select>\n                </div>\n            </div>\n\n            <div class=\"row\">\n                <div class=\"col-md-12\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\"\n                            aria-disabled=\"false\">\n                            <span>\n                                <localize key=\"modal.button.cancel\"></localize>\n                            </span>\n                        </button>\n                        <button type=\"button\" (click)=\"confirm()\" [disabled]=\"format == null || format == ''\"\n                            class=\"btn btn-primary\" role=\"button\">\n                            <span>\n                                <localize key=\"modal.button.submit\"></localize>\n                            </span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </fieldset>\n    </form>\n</div>\n","import { Component, OnInit, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { ChangeRequest, PageEvent, AbstractAction, AddChildAction, SetParentAction, CreateGeoObjectAction, RemoveChildAction, UpdateGeoObjectAction } from '../../model/crtable';\n\nimport { ChangeRequestService } from '../../service/change-request.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { ActionDetailModalComponent } from './action-detail/action-detail-modal.component'\n\n@Component( {\n\n    selector: 'request-table',\n    templateUrl: './request-table.component.html',\n    styleUrls: ['./request-table.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class RequestTableComponent {\n\n\tobjectKeys = Object.keys;\n\n    bsModalRef: BsModalRef;\n\n\trequests: ChangeRequest[] = [];\n\n\tactions: AbstractAction[] | SetParentAction[] | AddChildAction[] | CreateGeoObjectAction[] | RemoveChildAction[] | UpdateGeoObjectAction[];\n\n\tcolumns: any[] = [];\n\t\n\ttoggleId: string;\n\n\tfilterCriteria: string = 'ALL';\n\n    constructor( private service: ChangeRequestService, private modalService: BsModalService, private localizationService: LocalizationService ) {\n        this.columns = [\n            { name: localizationService.decode( 'change.request.user' ), prop: 'createdBy', sortable: false },\n            { name: localizationService.decode( 'change.request.createDate' ), prop: 'createDate', sortable: false, width: 195 },\n            { name: localizationService.decode( 'change.request.status' ), prop: 'approvalStatus', sortable: false }\n        ];\n\n        this.refresh();\n    }\n\n    refresh(): void {\n\n            this.service.getAllRequests(\"ALL\").then( requests => {\n\n\t\t\t\tthis.requests = requests;\n\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } )\n\n    }\n\n\n    onSelect( selected: any ): void {\n\n\t\t// this.request = selected.selected;\n\n        this.service.getAllActions( selected.selected[0].oid ).then(actions => {\n\t\t\t\n\t\t\tthis.actions = actions;\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onExecute(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.execute( changeRequest.oid ).then( request => {\n                changeRequest = request;\n\n                // TODO: Determine if there is a way to update an individual record\n                this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n\t}\n\t\n\t// onConfirmChangeRequest(request: any): void {\n\n    //     if ( request != null ) {\n    //         this.service.confirmChangeRequest( request.oid ).then( request => {\n    //             this.request = request;\n\n    //             // TODO: Determine if there is a way to update an individual record\n    //             this.refresh();\n    //         } ).catch(( response: HttpErrorResponse ) => {\n    //             this.error( response );\n    //         } );\n    //     }\n\t// }\n\t\n\tapplyActionStatusProperties(action: any ): void {\n\t\t// var action = JSON.parse(JSON.stringify(this.action));\n\t\t// action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n\t\tthis.service.applyActionStatusProperties(action).then( response => {\n\t\t\t// this.crtable.refresh()\n\t\t} ).catch(( err: HttpErrorResponse ) => {\n\t\t\tthis.error( err );\n\t\t} );\n\t}\n\n    onApproveAll(changeRequest: ChangeRequest): void {\n\n        if ( changeRequest != null ) {\n            this.service.approveAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    onRejectAll(changeRequest: ChangeRequest): void {\n        if ( changeRequest != null ) {\n            this.service.rejectAllActions( changeRequest.oid, this.actions ).then( actions => {\n                this.actions = actions;\n\n                // TODO: Determine if there is a way to update an individual record\n                // this.refresh();\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n            } );\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            let bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\t}\n\t\n\trequestTrackBy(index: number, request: ChangeRequest) {\n    \treturn request.oid;\n\t}\n\t\n\ttoggle(event: any, oid: string): void {\n\n\t\tif(!event.target.parentElement.className.includes(\"btn\") && !event.target.className.includes(\"btn\")){\n\t\t\tif(this.toggleId === oid){\n\t\t\t\tthis.toggleId = null;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggleId = oid;\n\t\t\t\tthis.onSelect({selected:[{oid:oid}]});\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(criteria: string): void {\n\n\t\t   this.service.getAllRequests(criteria).then( requests => {\n\t\t\t\tthis.requests = requests;\n            } ).catch(( response: HttpErrorResponse ) => {\n                this.error( response );\n\t\t\t} )\n\t\t\t\n\t\tthis.filterCriteria = criteria;\n\t}\n\n\tsetActionStatus(action: AbstractAction, status:string): void {\n\t\taction.approvalStatus = status;\n\n\t\tthis.applyActionStatusProperties(action);\n\t}\n\n\tgetActiveDetailComponent(action: AbstractAction) : any {\n      // TODO: I know this scales poorly to lots of different action types but I'm not sure how to do it better\n      if (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\n      {\n        // return this.cuDetail;\n      }\n    //   if (this.arDetail != null && (this.action.actionType.endsWith('AddChildAction') || this.action.actionType.endsWith('RemoveChildAction')))\n    //   {\n    //     return this.arDetail;\n\t//   }\n\t\n\t  return action;\n\t}\n\t\n    showActionDetail( action: any ) {\n\n\t\tthis.bsModalRef = this.modalService.show( ActionDetailModalComponent, {\n            animated: true,\n            backdrop: true,\n            ignoreBackdropClick: true,\n        } );\n\t\tthis.bsModalRef.content.curAction = action;\n      \n    //   var detail = this.getActiveDetailComponent();\n    //   if (detail != null)\n    //   {\n        // action.onSelect(action);\n    //   }\n    }\n\n}\n","<!-- <div class=\"row text-center\">\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"change.request.title\"></localize>\n        </h2>\n    </div>\n</div> -->\n\n<!-- <div class=\"row text-center\">\n    <div class=\"col-md-12 text-left\" style=\"margin-top: 40px;\">\n        <h3>\n            <localize key=\"change.request.table.title\"></localize>\n        </h3>\n    </div>\n</div> -->\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\t\t<div class=\"form-group button-row\">\n\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ALL')\" [ngClass]=\"filterCriteria === 'ALL' ? 'cr-filter-link-active' : ''\" >\n\t\t\t\t<localize key=\"change.request.all.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('PENDING')\" [ngClass]=\"filterCriteria === 'PENDING' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.pending.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('ACCEPTED')\" [ngClass]=\"filterCriteria === 'ACCEPTED' ? 'cr-filter-link-active' : ''\" style=\"margin-left: 5px;\">\n\t\t\t\t<localize key=\"change.request.accepted.filter.link\"></localize>\n\t\t\t</a>\n\t\t\t<a [routerLink]=\"\" (click)=\"filter('REJECTED')\" [ngClass]=\"filterCriteria === 'REJECTED' ? 'cr-filter-link-active' : ''\"style=\"margin-left: 5px;\" >\n\t\t\t\t<localize key=\"change.request.rejected.filter.link\"></localize>\n\t\t\t</a>\n\n\t\t</div>\n\n\t\t<hr style=\"border-top:solid 3px #6BA542\" />\n\n\t</div>\n</div>\n\n<div class=\"row\">\n\t<div class=\"col-md-12\">\n\n\t<table class=\"table\">\n\t\t<thead>\n\t\t\t<tr style=\"height: 50px;color: grey;\">\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.contributor.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.date.contributed.label\"></localize> </th>\n\t\t\t\t<th style=\"vertical-align: middle;\"> <localize key=\"change.request.status.label\"></localize> </th>\n\t\t\t\t<!-- <th style=\"vertical-align: middle;\">Actions</th> -->\n\t\t\t\t<th></th>\n\t\t\t</tr>\n\t\t</thead>\n        <tbody>\n\t\t\t<ng-template ngFor let-req [ngForOf]=\"requests\" [ngForTrackBy]=\"requestTrackBy\">\n\t\t\t\t<tr class=\"clickable\" [ngClass]=\"{'row-active':toggleId === req.oid}\" (click)=\"toggle($event, req.oid)\" style=\"height: 50px;\">\n                \t<td class=\"col-md-4\">\n\t\t\t\t\t\t<h5><strong>{{req.createdBy}}</strong></h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\" style=\"vertical-align: middle; color:grey;\">\n\t\t\t\t\t\t {{req.createDate}}\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class=\"col-md-2\">\n\t\t\t\t\t\t<h5 [ngClass]=\"{'status-pending':req.approvalStatus === 'PENDING', 'status-accepted':req.approvalStatus === 'ACCEPTED', 'status-rejected':req.approvalStatus === 'REJECTED'}\">\n\t\t\t\t\t\t\t <strong>{{req.approvalStatus}}</strong>\n\t\t\t\t\t\t</h5>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!-- <td class=\"col-md-3\">\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onConfirmChangeRequest(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll()\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t</button>\t\n\t\t\t\t\t</td> -->\n\t\t\t\t\t<td class=\"col-md-1\" style=\"vertical-align: middle;\">\n\t\t\t\t\t\t<i class=\"arrow arrow-right\" aria-hidden=\"true\"></i>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr *ngIf=\"toggleId === req.oid\" style=\"background-color:#f7f7f7;\">\n            \t\t<td colspan=\"5\" >\n\n\t\t\t\t\t\t<div class=\"row\" style=\"margin:0;\">\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t\t<div class=\"col-md-12\">\n\n\t\t\t\t\t\t\t\t<div *ngFor=\"let action of actions\" class=\"action-card\" [ngClass]=\"{'status-pending-container':action.approvalStatus === 'PENDING', 'status-accepted-container':action.approvalStatus === 'ACCEPTED', 'status-rejected-container':action.approvalStatus === 'REJECTED'}\" style=\"margin-bottom:10px; background-color:white;\"> \n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"margin:0; padding-top:5px; padding-bottom:5px;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-3\" style=\"border-right:2px grey solid; height:50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-circle\" style=\"float:left; line-height: 50px;\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<h4 class=\"vertical-center\" style=\"margin:0; float:left; padding-left:20px;\">{{req.createdBy}}</h4>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" style=\"height: 50px;\">\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"fa fa-refresh vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"fa fa-plus vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"fa fa-link vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\t\t\t\t\t\t\t\t\t\t\t<i *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"fa fa-chain-broken vertical-center\" style=\"float:left; line-height: 50px;\" aria-hidden=\"true\"></i>\n\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.UpdateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Update <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ]</li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.CreateGeoObjectAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Create <b>{{action.geoObjectJson.attributes.displayLabel.values[0].value.localeValues[0].value}}</b> [ {{action.geoObjectType.label.localizedValue}} ] </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.geoobject.SetParentAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set parents of <b>{{action.childCode}}</b>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.AddChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Set <b>{{action.childTypeCode}}</b> as a child of <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t\t<ul *ngIf=\"action.actionType === 'net.geoprism.registry.action.tree.RemoveChildAction'\" class=\"vertical-center\" style=\"list-style-type:none; float:left; padding-left:20px;\">\n\t\t\t\t\t\t\t\t\t\t\t\t<li>Remove <b>{{action.childTypeCode}}</b> from <b>{{action.parentTypeCode}}</b> </li>\n\t\t\t\t\t\t\t\t\t\t\t\t<li>on {{action.createActionDate}}</li>\n\t\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-4\" style=\"height: 50px;text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t\t<h4 *ngIf=\"req.approvalStatus !== 'PENDING'\" class=\"vertical-center\" [ngClass]=\"{'status-pending':action.approvalStatus === 'PENDING', 'status-accepted':action.approvalStatus === 'ACCEPTED', 'status-rejected':action.approvalStatus === 'REJECTED'}\" style=\"margin: 0;\">{{action.approvalStatus}}</h4>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'ACCEPTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'ACCEPTED')\" class=\"btn btn-primary vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.accept.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'ACCEPTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'REJECTED'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'REJECTED')\" class=\"btn btn-danger vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.reject.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'REJECTED'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" [disabled]=\"action.approvalStatus === 'PENDING'\" *ngIf=\"req.approvalStatus === 'PENDING'\" (click)=\"setActionStatus(action, 'PENDING')\" class=\"btn btn-warning vertical-center\" style=\"width:30%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.pending.btn\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t\t<!-- <i *ngIf=\"action.approvalStatus === 'PENDING'\" class=\"fa fa-check\" aria-hidden=\"true\"></i> -->\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"row\" style=\"height: 150px;border-top: 1px grey solid;margin:0;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"contribNotesInput-{{req.oid}}\"> <localize key=\"change.request.contributor.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"contribNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.contributorNotes\" readonly=\"true\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-5\" >\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\"> <localize key=\"change.request.maintainer.notes.label\"></localize> </label>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" [(ngModel)]=\"action.maintainerNotes\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t</div>\t\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"col-md-2\" style=\"height:100%;\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" (click)=\"showActionDetail(action)\" class=\"btn btn-default vertical-center\" style=\"width:100%;\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t\t\t<localize style=\"text-transform:uppercase;\" key=\"change.request.action.details.label\"></localize>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> <!-- END action-card -->\n\n\t\t\t\t\t\t\t\t<!-- <div class=\"form-group\">\n\t\t\t\t\t\t\t\t\t<label for=\"maintainerNotesInput-{{req.oid}}\">Change Request Notes</label>\n\t\t\t\t\t\t\t\t\t<textarea id=\"maintainerNotesInput-{{req.oid}}\" class=\"form-control\" style=\"height: 90px;\" value=\"\" [readonly]=\"req.approvalStatus !== 'PENDING'\"></textarea>\n\t\t\t\t\t\t\t\t</div>\t -->\n\n\t\t\t\t\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onApproveAll(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onRejectAll(req)\" class=\"btn btn-danger\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.reject.all.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\t\n\t\t\t\t\t\t\t\t\t<button [disabled]=\"req.approvalStatus !== 'PENDING'\" type=\"submit\" (click)=\"onExecute(req)\" class=\"btn btn-primary\" style=\"\" role=\"button\">\n\t\t\t\t\t\t\t\t\t\t<localize key=\"change.request.accept.changes.btn\"></localize>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- <div class=\"col-md-1\"></div> -->\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</td>\n        \t\t</tr>\n\t\t\t</ng-template>\n        </tbody>\n\t</table>\n\t</div>\t \n</div>\n","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\n\nexport interface ActionDetailComponent {\n    endEdit(): void;\n}\n\n@Component( {\n    selector: 'action-detail-modal',\n    templateUrl: './action-detail-modal.component.html',\n    styleUrls: []\n} )\nexport class ActionDetailModalComponent {\n\n    action: any;\n\n    @ViewChild( \"cuDetail\" ) cuDetail: ActionDetailComponent;\n    @ViewChild( \"arDetail\" ) arDetail: ActionDetailComponent;\n    @ViewChild( \"spDetail\" ) spDetail: ActionDetailComponent;\n\n    @Input()\n    set curAction( action: any ) {\n        this.action = action;\n    }\n\n    /*\n     * Called on confirm\n     */\n    public onFormat: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n    }\n\n    cancel(): void {\n        if ( this.cuDetail != null ) {\n            this.cuDetail.endEdit();\n        }\n\n        if ( this.arDetail != null ) {\n            this.arDetail.endEdit();\n        }\n\n        if ( this.spDetail != null ) {\n            this.spDetail.endEdit();\n        }\n\n        this.bsModalRef.hide();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n    }\n}\n","<div class=\"modal-body\" tabindex=\"-1\" role=\"dialog\">\n    <!-- <div class=\"heading\">\n        <h2>\n            <localize key=\"export-modal.title\"></localize>\n        </h2>\n\t</div> -->\n\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <crtable-detail-create-geo-object #cuDetail *ngIf=\"action && (action.actionType.endsWith('CreateGeoObjectAction') || action.actionType.endsWith('UpdateGeoObjectAction'))\" [(action)]=\"action\"> </crtable-detail-create-geo-object>\n            <crtable-detail-add-remove-child #arDetail *ngIf=\"action && (action.actionType.endsWith('AddChildAction') || action.actionType.endsWith('RemoveChildAction'))\" [(action)]=\"action\"> </crtable-detail-add-remove-child>\n            <set-parent-detail #spDetail *ngIf=\"action && (action.actionType.endsWith('SetParentAction'))\" [(action)]=\"action\"> </set-parent-detail>\n        </div>\n    </div>\n\n    <hr>\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"button-holder text-right\">\n                <button type=\"button\" (click)=\"cancel();\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n                    <span> <localize key=\"modal.button.close\"></localize>\n                    </span>\n                </button>\n            </div>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit, Input, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n    trigger,\n    style,\n    animate,\n    transition,\n} from '@angular/animations';\n\nimport { GeoObjectType, Attribute, ValueOverTime, GeoObjectOverTime, AttributeTerm, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport Utils from '../../utility/Utils';\n\n\n@Component( {\n    selector: 'manage-versions-modal',\n    templateUrl: './manage-versions-modal.component.html',\n    styleUrls: ['./manage-versions-modal.css'],\n    host: { '[@fadeInOut]': 'true' },\n    animations: [\n        [\n            trigger( 'fadeInOut', [\n                transition( 'void => *', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] ),\n                transition( '* => void', [\n                    style( {\n                        opacity: 0\n                    } ),\n                    animate( '1000ms' )\n                ] )\n            ] )\n        ]]\n} )\nexport class ManageVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    readonly: boolean = false;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onAttributeVersionChange: Subject<GeoObjectOverTime>;\n\n    @Input() attribute: Attribute;\n\n    @Input() geoObjectType: GeoObjectType;\n\n    @Input() geoObjectOverTime: GeoObjectOverTime;\n\n    goGeometries: GeoObjectOverTime;\n\n    @Input() isNewGeoObject: boolean = false;\n\n    newVersion: ValueOverTime;\n\n    editingGeometry: number = -1;\n\n    hasDuplicateDate: boolean = false;\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService,\n        public bsModalRef: BsModalRef, public changeDetectorRef: ChangeDetectorRef ) { }\n\n    ngOnInit(): void {\n\n        this.onAttributeVersionChange = new Subject();        \n    }\n\n    tfInit(): void {\n      if ( this.attribute.code === 'geometry' && this.geoObjectOverTime.attributes[this.attribute.code].values.length === 1 ) {\n        this.editingGeometry = 0;\n      }\n    }\n    \n    geometryChange(vAttribute, event): void {\n      vAttribute.value = event;\n    }\n\n    onDateChange( event: any, vAttribute: ValueOverTime ): any {\n\n        //        console.log( event.currentTarget.value );\n        //\n        //        let dt = new Date( event.currentTarget.value );\n        //let dt = new Date(event);\n\n        let vAttributes = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        //        vAttribute.startDate = Utils.formatDateString( dt );\n\n        this.snapDates( vAttributes );\n\n        //        this.changeDetectorRef.detectChanges();\n    }\n\n    snapDates( votArr: ValueOverTime[] ): void {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data by start date \n        votArr.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n        for ( let i = 1; i < votArr.length; i++ ) {\n            let prev = votArr[i - 1];\n            let current = votArr[i];\n\n            if ( current.startDate ) {\n                prev.endDate = Utils.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n            }\n            else {\n                prev.endDate = PRESENT;\n            }\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( votArr.length > 0 ) {\n            votArr[votArr.length - 1].endDate = PRESENT;\n        }\n    }\n\n    onAddNewVersion(): void {\n        let votArr: ValueOverTime[] = this.geoObjectOverTime.attributes[this.attribute.code].values;\n\n        let vot: ValueOverTime = new ValueOverTime();\n        vot.startDate = null;  // Utils.formatDateString(new Date());\n        vot.endDate = null;  // Utils.formatDateString(new Date());\n\n        if ( this.attribute.type === \"local\" ) {\n            //   vot.value = {\"localizedValue\":null,\"localeValues\":[{\"locale\":\"defaultLocale\",\"value\":null},{\"locale\":\"km_KH\",\"value\":null}]};\n            vot.value = this.lService.create();\n        }\n        else if ( this.attribute.type === 'geometry' ) {\n\n            if ( votArr.length > 0 ) {\n                if ( this.editingGeometry != -1 && this.editingGeometry != null ) {\n                    vot.value = votArr[this.editingGeometry].value;\n                }\n                else {\n                    vot.value = votArr[0].value;\n                }\n            }\n            else {\n                vot.value = { \"type\": this.geoObjectType.geometryType, \"coordinates\": [] };\n\n                if ( this.geoObjectType.geometryType === \"MULTIPOLYGON\" ) {\n                    vot.value.type = \"MultiPolygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POLYGON\" ) {\n                    vot.value.type = \"Polygon\";\n                }\n                else if ( this.geoObjectType.geometryType === \"POINT\" ) {\n                    vot.value.type = \"Point\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTIPOINT\" ) {\n                    vot.value.type = \"MultiPoint\";\n                }\n                else if ( this.geoObjectType.geometryType === \"LINE\" ) {\n                    vot.value.type = \"Line\";\n                }\n                else if ( this.geoObjectType.geometryType === \"MULTILINE\" ) {\n                    vot.value.type = \"MultiLine\";\n                }\n            }\n        }\n        else if ( this.attribute.type === 'term' ) {\n            var terms = this.getGeoObjectTypeTermAttributeOptions( this.attribute.code );\n\n            if ( terms.length > 0 ) {\n                vot.value = terms[0].code;\n            }\n        }\n\n        votArr.push( vot );\n\n        if ( this.attribute.code === 'geometry' ) {\n            this.editingGeometry = votArr.length - 1;\n        }\n\n        this.snapDates( votArr );\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    editGeometry( index: number ) {\n        this.editingGeometry = index;\n    }\n\n    getVersionData( attribute: Attribute ) {\n        let versions: ValueOverTime[] = [];\n\n        this.geoObjectOverTime.attributes[attribute.code].values.forEach( vAttribute => {\n            vAttribute.value.localeValues.forEach( val => {\n                versions.push( val );\n            } )\n        } )\n        return versions;\n    }\n\n    getDefaultLocaleVal( locale: any ): string {\n        let defVal = null;\n\n        locale.localeValues.forEach( locVal => {\n            if ( locVal.locale === 'defaultLocale' ) {\n                defVal = locVal.value;\n            }\n\n        } )\n\n        return defVal;\n    }\n\n    setDateAttribute( vot: ValueOverTime, val: string ): void {\n        vot.value = new Date( val ).getTime().toString()\n    }\n\n    getGeoObjectTypeTermAttributeOptions( termAttributeCode: string ) {\n        for ( let i = 0; i < this.geoObjectType.attributes.length; i++ ) {\n            let attr: any = this.geoObjectType.attributes[i];\n\n            if ( attr.type === \"term\" && attr.code === termAttributeCode ) {\n\n                attr = <AttributeTerm>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if ( attrOpts.length > 0 ) {\n                    if ( attr.code === \"status\" ) {\n                        return Utils.removeStatuses(attrOpts);\n                    }\n                    else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    remove( version: any ): void {\n\n        let val = this.geoObjectOverTime.attributes[this.attribute.code];\n\n        for ( let i = 0; i < val.values.length; i++ ) {\n            let vals = val.values[i];\n\n            if ( vals.startDate === version.startDate ) {\n                val.values.splice( i, 1 );\n            }\n        }\n\n        this.snapDates( val.values );\n    }\n\n    isChangeOverTime( attr: Attribute ): boolean {\n        let isChangeOverTime = false;\n\n        this.geoObjectType.attributes.forEach( attribute => {\n            if ( this.attribute.code === attr.code ) {\n                isChangeOverTime = attr.isChangeOverTime\n            }\n        } )\n\n        return isChangeOverTime;\n    }\n\n    onSubmit(): void {\n\n        this.onAttributeVersionChange.next( this.geoObjectOverTime );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2 *ngIf=\"!readonly\">\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #versionsform=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            <div class=\"row-holder\">\n\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"width: 100%;border: none;\">\n                    <div *ngIf=\"geoObjectOverTime\" >\n\n                        <div class=\"panel\" style=\"box-shadow: none;\">\n                            <div class=\"panel-body\">\n                                <ul class=\"list-group\">\n                                    <!-- <li class=\"list-group-item\" style=\"text-align:left;\" *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> -->\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        \n                                        <div *ngIf=\"attribute.type !== 'geometry'\">\n                                                <table class=\"table table-striped\"> \n                                                    <thead style=\"font-size: 14px;\"> \n                                                        <tr> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th> \n                                                            <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                            <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                            <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                                        </tr> \n                                                    </thead> \n\n                                                    <tbody *ngIf=\"attribute.type === 'local'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\" >\n                                                            <td >\n                                                                <table style=\"width: 100%;\">\n                                                                    <tr *ngFor=\"let loc of vAttribute.value.localeValues; let idx = index;\" > \n                                                                        <td style=\"vertical-align: bottom; width: 35%;padding: 0; padding-top:5px;\">\n                                                                            <h5>{{loc.locale}}</h5>\n                                                                            <input type=\"text\" class=\"form-control\" [name]=\"'loc-val-' + i + '-' + idx\" [(ngModel)]=\"loc.value\" (ngModelChange)=\"loc.value = $event\" [required]=\"loc.locale === 'defaultLocale'\">\n                                                                            <div class=\"form-input-validation-error-message-wrapper\">\n                                                                                <p *ngIf=\"loc.locale === 'defaultLocale' && !loc.value\" class=\"error-message\">Value is required.</p>\n                                                                            </div>\n                                                                        </td> \n                                                                    </tr>\n                                                                </table>\n                                                            </td>\n\n                                                            <td style=\"width: 35%;\">\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate_' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                                <div class=\"form-input-validation-error-message-wrapper\">\n                                                                    <p *ngIf=\"!vAttribute.startDate\" class=\"error-message\">Start date is required.</p>\n                                                                </div>\n                                                            </td> \n                                                            <td style=\"width: 20%;\">\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle; width: 10%;padding: 5px; text-align: center;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n\n                                                    <!-- TODO: This isn't getting the options on load -->\n                                                    <tbody *ngIf=\"attribute.type === 'term'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                <!-- <h5>{{loc.locale}}</h5> -->\n                                                                <!-- <input type=\"text\" class=\"form-control\" id=\"loc-val-{{i}}\" name=\"loc-val-{{i}}\" [(ngModel)]=\"version.value\" (ngModelChange)=\"version.value = $event\"> -->\n                                                                <select id=\"mod-{{attribute.code}}\" [name]=\"'mod-term-' + i + '-' + attribute.code\" class=\"select-area\" style=\"float:none;\" [(ngModel)]=\"vAttribute.value\">\n                                                                    <option value=\"\" ></option>\n                                                                    <option *ngFor=\"let option of getGeoObjectTypeTermAttributeOptions(attribute.code)\" [value]=\"option.code\" >{{option.label.localizedValue}}</option>\n                                                                </select>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'character'\"> \n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"text\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody> \n\n                                                    \n                                                    <tbody *ngIf=\"attribute.type === 'date'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"date\" class=\"form-control\" [name]=\"'char-val-' + i\" [ngModel]=\"vAttribute.value | date:'yyyy-MM-dd'\" (ngModelChange)=\"setDateAttribute(vAttribute, $event)\" required> \n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'boolean'\">\n\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === true\" [value]=\"true\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-true\" name=\"mod-{{i}}-true\">\n                                                                    <localize key=\"change.request.boolean.option.true\"></localize>\n                                                                </label>\n\n                                                                <label>\n                                                                    <input type=\"radio\" [checked]=\"vAttribute.value === false\"  [value]=\"false\" [(ngModel)]=\"vAttribute.value\" id=\"mod-{{i}}-false\" name=\"mod-{{i}}-false\">\n                                                                    <localize key=\"change.request.boolean.option.false\"></localize>\n                                                                </label>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n\n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'float'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n\n\n                                                    <tbody *ngIf=\"attribute.type === 'integer'\">\n                                                        <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes[this.attribute.code].values; let i = index;\"> \n                                                            <td >\n                                                                \n                                                                <input type=\"number\" class=\"form-control\" [name]=\"'char-val-' + i\" [(ngModel)]=\"vAttribute.value\" (ngModelChange)=\"vAttribute.value = $event\" required>\n                                                            \n                                                            </td> \n                                                            <td >\n                                                                <input style=\"width: 100%;\" type=\"date\" [name]=\"'startDate-' + i\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                            </td> \n                                                            <td >\n                                                                <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                            </td>\n                                                            <td style=\"vertical-align: middle;\">\n                                                                <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                            </td>\n                                                        </tr>  \n                                                    </tbody>\n                                            </table>\n                                        </div> \n\n                                        <div *ngIf=\"attribute.type === 'geometry'\">\n                                           <table class=\"table table-striped\">\n                                             <thead style=\"font-size: 14px;\">\n                                               <th style=\"width:60%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                               <th style=\"width:20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                               <th style=\"width:10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                               <th style=\"width: 10%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                             </thead>\n                                             <tbody style=\"text-align: center;\">\n                                               <tr *ngFor=\"let vAttribute of geoObjectOverTime.attributes['geometry'].values; let i = index;\">\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <button *ngIf=\"this.editingGeometry != i\" class=\"btn\" (click)=\"editGeometry(i)\" role=\"button\"><localize key=\"changeovertime.manageVersions.geometry.edit\"></localize></button>\n                                                   <geoobject-editor-map *ngIf=\"this.editingGeometry === i\" #geometryEditor [geometryType]=\"this.geoObjectType.geometryType\" (geometryChange)=\"this.geometryChange(vAttribute, $event);\" [readOnly]=\"!geoObjectType.isGeometryEditable\" [postGeometry]=\"vAttribute.value\" [bboxCode]=\"this.geoObjectOverTime.attributes.code\" [bboxType]=\"this.geoObjectType.code\" [bboxDate]=\"vAttribute.startDate\"></geoobject-editor-map>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <input type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"vAttribute.startDate\" (blur)=\"onDateChange($event, vAttribute)\" required>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <p style=\"font-size: 14px;\"> {{vAttribute.endDate | date:'MM-dd-yyyy'}} </p>\n                                                 </td>\n                                                 <td style=\"vertical-align: middle;\">\n                                                   <i class=\"fa fa-times clickable delete-btn\" (click)=\"remove(vAttribute)\"></i>\n                                                 </td>\n                                               </tr>\n                                              </tbody>\n                                          </table>\n                                        </div>\n\n                                    </li>\n\n                                    <li class=\"list-group-item\" style=\"text-align:left;\">\n                                        <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\">\n                                            <localize key=\"changeovertime.manageVersions.newVersion\"></localize>\n                                        </i>\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none;width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize [key]=\"readonly ? 'io.back' : 'io.cancel'\"></localize>\n                        </button> -->\n                        <button *ngIf=\"!readonly\" type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"!versionsform.valid\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n\t      var newArray = [];\n\t      \n\t      for ( var i = 0; i < arr.length; ++i ) {\n\t        if (! (arr[i].code === \"CGR:Status-New\"\n\t             || arr[i].code === \"CGR:Status-Pending\"))\n\t        {\n\t          newArray.push(arr[i]);\n\t        }\n\t      }\n\t      \n\t      return newArray;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n    \n}","\nimport { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'simple-edit-control',\n  templateUrl: './simple-edit-control.component.html',\n})\nexport class SimpleEditControl {\n  elRef: ElementRef\n  \n  @Input() visible = false;\n  \n  @Output() editEmitter = new EventEmitter<void>();\n  \n  constructor(elRef: ElementRef) {\n    this.elRef = elRef;\n  }\n\n  onAdd(map): any {\n    this.visible = true;\n    return this.elRef.nativeElement;\n  }\n  \n  onRemove(map): void {\n    this.elRef.nativeElement.remove();\n  }\n  \n  onClick(): void {\n    this.editEmitter.emit();\n  }\n}\n","<div *ngIf=\"this.visible\" class=\"mapboxgl-ctrl-group mapboxgl-ctrl\">\n  <button class=\"fa fa-pencil-square-o\" style=\"color: black; font-size: 18px;\" title=\"location.management.editing | localize\" (click)=\"this.onClick();\"></button>\n</div>","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'geoObjectAttributeExcludesFilter',\n    pure: true\n})\nexport class GeoObjectAttributeExcludesPipe implements PipeTransform {\n    transform(items: any[], filter: string[]): any {\n        if (!items || !filter) {\n            return items;\n        }\n       \n        return items.filter(item => filter.indexOf(item.code) === -1)\n    }\n}","import { Component, OnInit, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { HierarchyOverTime, PRESENT } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\n\nimport { IOService } from '../../service/io.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\n\n@Component( {\n    selector: 'manage-parent-versions-modal',\n    templateUrl: './manage-parent-versions-modal.component.html',\n    styleUrls: []\n} )\nexport class ManageParentVersionsModalComponent implements OnInit {\n    message: string = null;\n\n    /*\n     * Observable subject for MasterList changes.  Called when an update is successful \n     */\n    onVersionChange: Subject<HierarchyOverTime>;\n\n    hierarchy: HierarchyOverTime = null;\n\n    hasDuplicateDate: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) { }\n\n    ngOnInit(): void {\n\n        this.onVersionChange = new Subject();\n\n    }\n\n    init( hierarchy: HierarchyOverTime ): void {\n        this.hierarchy = hierarchy;\n    }\n\n    onAddNewVersion(): void {\n\n        let parents = {};\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parents[current.code] = {};\n        }\n\n        const entry = {\n            startDate: null,\n            endDate: null,\n            parents: parents\n        }\n\n        this.hierarchy.entries.push( entry );\n    }\n\n    remove( entry: any ): void {\n\n        for ( let i = 0; i < this.hierarchy.entries.length; i++ ) {\n            let vals = this.hierarchy.entries[i];\n\n            if ( vals.startDate === entry.startDate ) {\n                this.hierarchy.entries.splice( i, 1 );\n            }\n        }\n\n        this.snapDates();\n    }\n\n    getTypeAheadObservable( date: string, type: any, entry: any, index: number ): Observable<any> {\n\n        let geoObjectTypeCode = type.code;\n\n        let parentCode = null;\n        let hierarchyCode = null;\n\n        if ( index > 0 ) {\n            let pType = this.hierarchy.types[index - 1];\n            const parent = entry.parents[pType.code];\n\n            if ( parent.geoObject != null && parent.geoObject.properties.code != null ) {\n                hierarchyCode = this.hierarchy.code;\n                parentCode = parent.geoObject.properties.code;\n            }\n        }\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( entry.parents[type.code].text, geoObjectTypeCode, parentCode, hierarchyCode, date ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, type: any, entry: any, date: string ): void {\n        //        let ptn: ParentTreeNode = parent.ptn;\n\n        let parentTypes = [];\n\n        for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n            let current = this.hierarchy.types[i];\n\n            parentTypes.push( current.code );\n\n            if ( current.code === type.code ) {\n                break;\n            }\n        }\n\n        this.service.getParentGeoObjects( e.item.uid, type.code, parentTypes, true, date ).then( ancestors => {\n\n            entry.parents[type.code].geoObject = ancestors.geoObject;\n            entry.parents[type.code].text = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n            for ( let i = 0; i < this.hierarchy.types.length; i++ ) {\n                let current = this.hierarchy.types[i];\n                let ancestor = ancestors;\n\n                while ( ancestor != null && ancestor.geoObject.properties.type != current.code ) {\n                    if ( ancestor.parents.length > 0 ) {\n                        ancestor = ancestor.parents[0];\n                    }\n                    else {\n                        ancestor = null;\n                    }\n                }\n\n                if ( ancestor != null ) {\n                    entry.parents[current.code].geoObject = ancestor.geoObject;\n                    entry.parents[current.code].text = ancestor.geoObject.properties.displayLabel.localizedValue;\n                }\n            }\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSubmit(): void {\n\n        this.onVersionChange.next( this.hierarchy );\n\n        this.bsModalRef.hide();\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide();\n    }\n\n    onDateChange( event: any ): any {\n        this.snapDates();\n    }\n\n    snapDates() {\n        var dateOffset = ( 24 * 60 * 60 * 1000 ) * 1; //1 days\n\n        this.hasDuplicateDate = false;\n\n        // Sort the data\n        this.hierarchy.entries.sort( function( a, b ) {\n\n            if ( a.startDate == null || a.startDate === '' ) {\n                return 1;\n            }\n            else if ( b.startDate == null || b.startDate === '' ) {\n                return -1;\n            }\n\n            let first: any = new Date( a.startDate );\n            let next: any = new Date( b.startDate );\n            return first - next;\n        } );\n\n\n        for ( let i = 1; i < this.hierarchy.entries.length; i++ ) {\n            let prev = this.hierarchy.entries[i - 1];\n            let current = this.hierarchy.entries[i];\n\n            prev.endDate = this.formatDateString( new Date( new Date( current.startDate ).getTime() - dateOffset ) );\n\n            if ( prev.startDate === current.startDate ) {\n                this.hasDuplicateDate = true;\n            }\n        }\n\n        if ( this.hierarchy.entries.length > 0 ) {\n            this.hierarchy.entries[this.hierarchy.entries.length - 1].endDate = PRESENT;\n        }\n    }\n\n    formatDateString( dateObj: Date ): string {\n        const day = dateObj.getUTCDate();\n\n        return dateObj.getUTCFullYear() + \"-\" + ( dateObj.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n    <div *ngIf=\"hasDuplicateDate\" class=\"alert alert-danger\" role=\"alert\"><localize key=\"changeovertime.manageVersions.duplicateDate\"></localize></div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"changeovertime.manageVersions.widget.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n        <fieldset>\n            <div class=\"row-holder\">\n                <div class=\"holder\" style=\"width: 100%; border: none;\">\n                    <div class=\"panel\" style=\"box-shadow: none;\">\n                        <div class=\"panel-body\">\n                            <ul class=\"list-group\" *ngIf=\"hierarchy != null\">\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                    <table class=\"table table-striped\">\n                                        <thead style=\"font-size: 14px;\">\n                                            <tr>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.value\"></localize></th>\n                                                <th style=\"width: 35%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.startDate\"></localize></th>\n                                                <th style=\"width: 20%;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.endDate\"></localize></th>\n                                                <th style=\"width: 10%; text-align: center;\"><localize key=\"changeovertime.manageVersions.tableHeader.label.actions\"></localize></th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let entry of hierarchy.entries; let i = index;\">\n                                                <td>\n                                                \n                                                  <div class=\"col-sm-12\" style=\"float:left;width:150px;\" *ngFor=\"let type of hierarchy.types; let j = index\">\n                                                    {{type.label}}\n                                                    \n                                                    <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n                                                      name=\"{{type.code}}-{{i}}\"\n                                                      [disabled]=\"entry.startDate == null || entry.startDate === ''\"\n                                                      [(ngModel)]=\"entry.parents[type.code].text\" \n                                                      [typeaheadAsync]=\"true\"\n                                                      [typeahead]=\"getTypeAheadObservable(entry.startDate, type, entry, j)\"\n                                                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, type, entry, entry.startDate)\" \n                                                      [typeaheadOptionsLimit]=\"7\"\n                                                      typeaheadOptionField=\"name\" \n                                                      [typeaheadMinLength]=\"0\"\n                                                      [typeaheadWaitMs]=\"300\"\n                                                      required>\n                                                  </div>\n                                                \n                                                </td>\n                                                <td style=\"vertical-align: bottom;\">\n                                                  <input style=\"width: 100%;\" type=\"date\" name=\"startDate-{{i}}\" [(ngModel)]=\"entry.startDate\" (blur)=\"snapDates()\" required />\n                                                </td> \n                                                <td style=\"vertical-align: bottom;\">\n                                                  <p *ngIf=\"entry.startDate != null && entry.startDate !== ''\" style=\"font-size: 14px;\"> {{entry.endDate | date:'MM-dd-yyyy'}} </p>\n                                                </td>\n                                                <td style=\"vertical-align: middle; width: 10%; padding: 5px; text-align: center;\">\n                                                  <i class=\"fa fa-times delete-btn\" (click)=\"remove(entry)\"></i>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </li>\n\n                                <li class=\"list-group-item\" style=\"text-align: left;\">\n                                  <i class=\"fa fa-plus clickable\" (click)=\"onAddNewVersion()\"><localize key=\"changeovertime.manageVersions.newVersion\"></localize></i>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"holder\" style=\"border: none; width: 100%;\">\n                    <div class=\"button-holder pull-right\">\n                        <!-- <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\" >\n                            <localize key=\"io.cancel\"></localize>\n                        </button> -->\n                        <button type=\"submit\" (click)=\"onSubmit()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"form.invalid || hasDuplicateDate\">\n                            <localize key=\"io.ok\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { SuccessModalComponent } from '../../../shared/component/modals/success-modal.component';\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'change-request-page',\n    templateUrl: './change-request-page.component.html',\n    styleUrls: ['./change-request-page.css']\n} )\nexport class ChangeRequestPageComponent implements OnInit {\n\n\tcontent: string = \"SUBMIT\";\n\tpageTitle: string;\n\tbsModalRef: BsModalRef;\n\tisAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    \n    constructor( private localizationService: LocalizationService, private modalService: BsModalService, private service: AuthService ) {\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.isMaintainer ? this.renderContent(\"MANAGE\") : this.renderContent(\"SUBMIT\");\n\t}\n\n    ngOnInit(): void {\n\t}\n\t\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\n\t\tif(content === \"SUBMIT\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.page.title\");\n\t\t}\n\t\telse if(content === \"MANAGE\"){\n\t\t\tthis.pageTitle = this.localizationService.decode(\"change.request.table.title\");\n\t\t}\n\t}\n\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n        <div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t\n\t\t\t\t<div class=\"heading\">\n\t\t\t\t\t<h2>\n\t\t\t\t\t\t{{pageTitle}}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isMaintainer\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'MANAGE'}\" (click)=\"renderContent('MANAGE')\">Manage</a> \n\t\t\t\t\t<a style=\"margin-right:10px;font-size:20px;\" *ngIf=\"isContributor\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'SUBMIT'}\" (click)=\"renderContent('SUBMIT')\">Submit</a>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px;margin-top: 10px;\">\n\t\t\t\t\t<submit-change-request *ngIf=\"content === 'SUBMIT'\"></submit-change-request>\n\t\t\t\t\t<request-table *ngIf=\"content === 'MANAGE'\"></request-table>\n\t\t\t\t</div>\n\t\t\t\t\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { interval, Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\n\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterListVersion } from '../../model/registry';\n\nimport { ExportFormatModalComponent } from './export-format-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { ProgressService } from '../../../shared/service/progress.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { GeoObjectEditorComponent } from '../geoobject-editor/geoobject-editor.component';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component({\n\tselector: 'master-list',\n\ttemplateUrl: './master-list.component.html',\n\tstyleUrls: []\n})\nexport class MasterListComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterListVersion = null;\n\tp: number = 1;\n\tcurrent: string = '';\n\tfilter: { attribute: string, value: string, label: string }[] = [];\n\tselected: string[] = [];\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 100,\n\t\tresults: []\n\t};\n\tsort = { attribute: 'code', order: 'ASC' };\n\tisPublished: boolean = true;\n\t\n\tisRefreshing: boolean = false;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpublic searchPlaceholder = \"\";\n\n\tprivate isAdmin: boolean;\n\tprivate isMaintainer: boolean;\n\tprivate isContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private pService: ProgressService, private route: ActivatedRoute, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService) {\n\n\t\tthis.searchPlaceholder = localizeService.decode(\"masterlist.search\");\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\t\tthis.isPublished = (this.route.snapshot.paramMap.get('published') == \"true\");\n\n\t\tthis.service.getMasterListVersion(oid).then( version => {\n\t\t\tthis.list = version;\n\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\tattribute.isCollapsed = true;\n\t\t\t});\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: number): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.data(this.list.oid, pageNumber, this.page.pageSize, this.filter, this.sort).then(page => {\n\t\t\tthis.page = page;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\t//    onSearch(): void {\n\t//        this.filter = this.current;\n\t//\n\t//        this.onPageChange( 1 );\n\t//    }\n\n\tonSort(attribute: { name: string, label: string }): void {\n\t\tif (this.sort.attribute === attribute.name) {\n\t\t\tthis.sort.order = (this.sort.order === 'ASC' ? 'DESC' : 'ASC');\n\t\t}\n\t\telse {\n\t\t\tthis.sort = { attribute: attribute.name, order: 'ASC' };\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tclearFilters(): void {\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tattr.search = null;\n\t\t});\n\n\t\tthis.filter = [];\n\t\tthis.selected = [];\n\n\t\tthis.onPageChange(1);\n\t}\n\n\ttoggleFilter(attribute: any): void {\n\t\tattribute.isCollapsed = !attribute.isCollapsed;\n\t}\n\n\tgetValues(attribute: any): void {\n\t\treturn Observable.create((observer: any) => {\n\t\t\tthis.message = null;\n\n\t\t\t// Get the valid values\n\t\t\tthis.service.values(this.list.oid, attribute.search, attribute.name, attribute.base, this.filter).then(options => {\n\t\t\t\toptions.unshift({ label: '[' + this.localizeService.decode(\"masterlist.nofilter\") + ']', value: null });\n\n\t\t\t\tobserver.next(options);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\thandleDateChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && (attribute.value.start !== '' || attribute.value.end !== '')) {\n\n\t\t\tlet label = '[' + attribute.label + '] : [';\n\n\t\t\tif (attribute.value.start != null) {\n\t\t\t\tlabel += attribute.value.start;\n\t\t\t}\n\n\t\t\tif (attribute.value.start != null && attribute.value.end != null) {\n\t\t\t\tlabel += ' - ';\n\t\t\t}\n\n\t\t\tif (attribute.value.end != null) {\n\t\t\t\tlabel += attribute.value.end;\n\t\t\t}\n\n\t\t\tlabel += ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleInputChange(attribute: any): void {\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tif (attribute.value != null && attribute.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: attribute.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\thandleListChange(e: TypeaheadMatch, attribute: any): void {\n\t\tattribute.value = e.item;\n\t\tattribute.isCollapsed = true;\n\n\t\t// Remove the current attribute filter if it exists\n\t\tthis.filter = this.filter.filter(f => f.attribute !== attribute.base);\n\t\tthis.selected = this.selected.filter(s => s !== attribute.base);\n\n\t\tthis.list.attributes.forEach(attr => {\n\t\t\tif (attr.base === attribute.base) {\n\t\t\t\tattr.search = '';\n\t\t\t}\n\t\t});\n\n\t\tif (attribute.value.value != null && attribute.value.value !== '') {\n\t\t\tconst label = '[' + attribute.label + '] : ' + '[' + attribute.value.label + ']';\n\n\t\t\tthis.filter.push({ attribute: attribute.base, value: e.item.value, label: label });\n\t\t\tthis.selected.push(attribute.base);\n\t\t\tattribute.search = e.item.label;\n\t\t}\n\t\telse {\n\t\t\tattribute.search = '';\n\t\t}\n\n\t\tthis.onPageChange(1);\n\t}\n\n\tisFilterable(attribute: any): boolean {\n\t\treturn attribute.type !== 'none' && (attribute.dependency.length === 0 || this.selected.indexOf(attribute.base) !== -1 || this.selected.filter(value => attribute.dependency.includes(value)).length > 0);\n\t}\n\n\tonEdit(data): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\teditModal.content.configureAsExisting(data.code, this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonGoto(data): void {\n\t\tconst oid = data.code;\n\n\t\tif (oid != null && oid.length > 0) {\n\t\t\twindow.open(acp + \"/nav/management#/locations/\" + oid, '_blank');\n\t\t}\n\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\t\t\n\t\tthis.isRefreshing = true;\n\n\t\tlet subscription = interval(1000).subscribe(() => {\n\t\t\tthis.service.progress(this.list.oid).then(progress => {\n\t\t\t\tthis.pService.progress(progress);\n\t\t\t});\n\t\t});\n\n\t\tthis.service.publishMasterList(this.list.oid)\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tsubscription.unsubscribe();\n\n\t\t\t\tthis.pService.complete();\n\t\t\t})).toPromise()\n\t\t\t.then(list => {\n\t\t\t  this.isRefreshing = false;\n\t\t\t\tthis.list = list;\n\t\t\t\tthis.list.attributes.forEach(attribute => {\n\t\t\t\t\tattribute.isCollapsed = true;\n\t\t\t\t});\n\n\t\t\t\t// Refresh the resultSet\n\t\t\t\tthis.onPageChange(1);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\tthis.pService.start();\n\t}\n\n\tonNewGeoObject(): void {\n\t\tlet editModal = this.modalService.show(GeoObjectEditorComponent, { backdrop: true, ignoreBackdropClick: true });\n\t\t//editModal.content.fetchGeoObject( data.code, this.list.typeCode );\n\t\teditModal.content.configureAsNew(this.list.typeCode, this.list.forDate, this.list.isGeometryEditable);\n\t\teditModal.content.setMasterListId(this.list.oid);\n\t\teditModal.content.setOnSuccessCallback(() => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tonExport(): void {\n\t\tthis.bsModalRef = this.modalService.show(ExportFormatModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.onFormat.subscribe(format => {\n\t\t\tif (format == 'SHAPEFILE') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-shapefile?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t\telse if (format == 'EXCEL') {\n\t\t\t\twindow.location.href = acp + '/master-list/export-spreadsheet?oid=' + this.list.oid + \"&filter=\" + encodeURIComponent(JSON.stringify(this.filter));\n\t\t\t}\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n    <!-- <progress-bar></progress-bar> -->\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"row\">\n            <div *ngIf=\"list\" class=\"col-md-12\">\n                <h2>\n                    <!-- <localize key=\"masterlist.title\"></localize> -->\n                    {{list.displayLabel}}\n                </h2>\n            </div>\n        </div>\n        <div *ngIf=\"list\" class=\"row form-group\">\n\n            <div class=\"col-md-12\">\n                <h4>\n                    <localize key=\"masterlist.publishDate\"></localize>\n                    : {{list.publishDate}}\n                </h4>\n                \n                <h4>\n                    <localize key=\"masterlist.forDate\"></localize>\n                    : {{list.forDate}}\n                </h4>\n            </div>\n        </div>\n\n\n        <div *ngIf=\"filter.length > 0\" class=\"row form-group\">\n            <div class=\"col-md-12 table-responsive\" style=\"\">\n                <localize key=\"masterlist.filters\"></localize>\n                <ol>\n                    <li *ngFor=\"let f of filter\">{{f.label}}</li>\n                </ol>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n            \n                <div class=\"button-holder pull-right\">\n            \n                    <span class=\"clickable\" (click)=\"clearFilters()\" style=\"padding: 10px;\">\n                        <span class=\"fa-stack fa-md\">\n                            <i class=\"fa fa-filter fa-stack-2x\" style=\"font-size: 25px;\"></i>\n                            <i class=\"fa fa-times-circle fa-stack-1x\" style=\"font-size: 13px;top: 4px;left: 6px;\"></i>\n                        </span>\n                        <localize key=\"masterlist.clearFilters\"></localize>\n                    </span>\n                    \n                    <span *ngIf=\"!isPublished\" class=\"clickable\" (click)=\"onPublish()\" style=\"padding: 10px;\">\n                        <i [ngClass]=\"{'fa fa-refresh clickable':true, 'fa-spin':isRefreshing}\" style=\"font-size: 25px;vertical-align: middle;\" aria-hidden=\"true\"></i>\n                        <localize key=\"masterlist.publish\"></localize>\n                    </span>\n            \n            \n                    <!-- <button type=\"submit\" (click)=\"clearFilters()\" class=\"btn btn-default\" role=\"button\">\n                                <localize key=\"masterlist.clearFilters\"></localize>\n                            </button>\n                            <button *ngIf=\"isMaintainer\" type=\"submit\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\">\n                                <localize key=\"masterlist.publish\"></localize>\n                            </button> -->\n                </div>\n            </div>\n        </div>\n        <div class=\"row form-group\">\n            <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n                <table class=\"list-table table table-bordered table-striped\">\n                    <thead>\n                        <tr>\n                            <th *ngIf=\"!list.leaf\" style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.view.column\"></localize></th>\n                            <th style=\"width: 3%\" class=\"label-column\"><localize key=\"masterlist.edit.column\"></localize></th>\n                            <th *ngFor=\"let attribute of list.attributes\" class=\"label-column\">\n\n                                <div style=\"display: table-cell; padding-right: 10px; vertical-align: middle;\" *ngIf=\"isFilterable(attribute)\">\n                                    <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\"> \n\t\t\t\t\t\t\t\t\t\t<i style=\"font-size: 20px;\" class=\"fa fa-filter\"></i>\n                                    </a>\n\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; word-break: keep-all; word-wrap: normal;\">{{attribute.label}} </a> \n\t\t\t\t\t\t\t\t<a (click)=\"onSort(attribute)\" style=\"display: table-cell; vertical-align: middle; padding-left: 5px;\"> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'ASC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-down\" style=\"font-size: inherit;\"></i> \n\t\t\t\t\t\t\t\t\t<i *ngIf=\"sort.order === 'DESC' && sort.attribute === attribute.name\" class=\"fa fa-arrow-up\" style=\"font-size: inherit;\"></i>\n                            \t</a>\n\n                                <div *ngIf=\"isFilterable(attribute)\">\n                                    <!-- <a class=\"\" (click)=\"toggleFilter(attribute)\" [attr.aria-expanded]=\"!attribute.isCollapsed\" aria-controls=\"collapseBasic\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-filter\"></i>\n\t\t\t\t\t\t\t\t</a> -->\n                                    <div id=\"collapseBasic\" [collapse]=\"attribute.isCollapsed\">\n                                        <input *ngIf=\"attribute.type === 'input'\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.value\" (keyup.enter)=\"handleInputChange(attribute)\" type=\"text\" class=\"form-control search-input\" />\n                                        <div *ngIf=\"attribute.type === 'date'\">\n                                            <input [name]=\"attribute.name + 'Start'\" [(ngModel)]=\"attribute.value.start\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" /> <input [name]=\"attribute.name + 'End'\" [(ngModel)]=\"attribute.value.end\" (change)=\"handleDateChange(attribute)\" type=\"date\" class=\"form-control search-input\" />\n                                        </div>\n                                        <input *ngIf=\"attribute.type === 'list'\" type=\"text\" [name]=\"attribute.name\" [(ngModel)]=\"attribute.search\" [typeaheadAsync]=\"true\" [typeahead]=\"getValues(attribute)\" (typeaheadOnSelect)=\"handleListChange($event, attribute)\" [typeaheadOptionsLimit]=\"100\" [typeaheadMinLength]=\"0\" [typeaheadWaitMs]=\"300\" typeaheadOptionField=\"label\" class=\"form-control\" autocomplete=\"off\">\n\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\">\n                            <td *ngIf=\"!list.leaf\" style=\"width: 3%; text-align: center;\" class=\"label-column\"><a class=\"fa fa-map-marker\" (click)=\"onGoto(result)\"></a></td>\n                            <td style=\"width: 3%\" class=\"label-column\"><a class=\"fa fa-pencil ico-edit\" (click)=\"onEdit(result)\"></a></td>\n                            <td *ngFor=\"let attribute of list.attributes\" class=\"label-column\">{{ result[attribute.name] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <!-- <div class=\"row form-group\">\n            <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n        </div> -->\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <pagination-controls style=\"position: absolute;\" (pageChange)=\"onPageChange($event)\"></pagination-controls>\n\n                <div class=\"button-holder pull-right\">\n                    <button type=\"submit\" (click)=\"onNewGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"masterlist.newGeoObject\"></localize>\n                    </button>\n                    <button type=\"submit\" (click)=\"onExport()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"filter.length === 0\" key=\"io.export.allrows\"></localize>\n                        <localize *ngIf=\"filter.length > 0\" key=\"io.export.filteredrows\"></localize>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- </div> -->\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subscription, interval } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { PublishModalComponent } from './publish-modal.component';\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: any;\n\n@Component({\n\tselector: 'published-master-list-history',\n\ttemplateUrl: './published-master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class PublishedMasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tpage: any = {\n\t\tpageSize: 10,\n\t\tpageNumber: 1,\n\t\tcount: 1,\n\t\tresults: []\n\t};\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tpollingData: Subscription;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router, private modalService: BsModalService, public authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\n\t\t\tthis.onPageChange(1);\n\t\t});\n\n\t\tthis.pollingData = interval(5000).subscribe(() => {\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\t\t});\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\t//isGeoObjectTypeRM(type: string): boolean {\n\t//\treturn this.authService.isGeoObjectTypeRM(type);\n\t//}\n\n\tonDeleteMasterListVersion( oid: string ): void {\n\t\tthis.service.deleteMasterListVersion( oid ).then(data =>{\n\t\t\tthis.updateList();\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tupdateList(): void {\n\t\t// update the list of versions. \n\t\tthis.service.getMasterListHistory(this.oid, \"PUBLISHED\").then(list => {\n\t\t\tthis.list = list;\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.publishMasterListVersions(this.list.oid).then((data: { job: string }) => {\n\t\t\t// Refresh the page\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\t\tif (this.list != null) {\n\n\t\t\tthis.message = null;\n\n\t\t\tthis.service.getPublishMasterListJobs(this.list.oid, this.page.pageSize, pageNumber, \"createDate\", true).then(response => {\n\n\t\t\t\tthis.page = response;\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t\tthis.updateList();\n\t\t}\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, true])\n\t}\n\n\tonPublishShapefile(version: MasterListVersion): void {\n\n\t\tthis.service.publishShapefile(version.oid).then(() => {\n\n\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonDownloadShapefile(version: MasterListVersion): void {\n\t\twindow.location.href = acp + '/master-list/download-shapefile?oid=' + version.oid;\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\" style=\"\">\n            <table class=\"list-table table\" style=\"border-bottom: solid lightgrey 3px;\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.createDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"list && ((list.admin) || isMaintainer)\" type=\"submit\" (click)=\"onPublishShapefile(version)\" class=\"btn btn-default\" role=\"button\">\n                                    <localize key=\"masterlist.publish-shapefile\"></localize>\n                                </button>                                \n                                <button *ngIf=\"version.shapefile\" type=\"submit\" (click)=\"onDownloadShapefile(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"masterlist.download\"></localize>\n                                </button>   \n                                <button *ngIf=\"list && ((list.admin) || isMaintainer)\" type=\"submit\" (click)=\"onDeleteMasterListVersion( version.oid )\" class=\"btn btn-danger\" role=\"button\">\n                                    Delete\n                                </button>  \n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n\n    <div *ngIf=\"list && ((list.admin) || isAdmin)\" style=\"margin-bottom: 30px;\" class=\"row\">\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publish.versions\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row\">\n        <div class=\"col-md-12 order-md-1\">\n            <ul class=\"list-group\">\n                <div class=\"solid-table-wrapper\">\n                    <table class=\"table table-striped\">\n                        <thead>\n                            <tr style=\"height: 56px;\">\n                                <th style=\"vertical-align: middle;\"><localize key=\"masterlist.jobs\"></localize></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr *ngFor=\"let job of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <td style=\"vertical-align: middle;\">\n                                    <div class=\"wrapper\">\n                                        <i style=\"position: absolute; font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                        <p style=\"padding-left: 60px;\">\n                                            <span style=\"display: block;\"> {{job.createDate}} </span> <span style=\"display: block;\"> {{job.author}} </span> <span style=\"display: block;\"> {{job.type}} </span> <span style=\"display: block;\"> {{job.status}} </span>\n                                        </p>\n                                    </div>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                    <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { MasterList, MasterListVersion } from '../../model/registry';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { PublishModalComponent } from './publish-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { AuthService } from '../../../shared/service/auth.service';\n\n@Component({\n\tselector: 'master-list-history',\n\ttemplateUrl: './master-list-history.component.html',\n\tstyleUrls: []\n})\nexport class MasterListHistoryComponent implements OnInit {\n\tmessage: string = null;\n\tlist: MasterList = null;\n\tforDate: string = '';\n\n\t@Input() oid: string;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tprivate bsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\n\tconstructor(public service: RegistryService, private router: Router,\n\t\tprivate modalService: BsModalService, private localizeService: LocalizationService, authService: AuthService) {\n\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\t\tthis.service.getMasterListHistory(this.oid, \"EXPLORATORY\").then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\n\tonPublish(): void {\n\t\tthis.message = null;\n\n\t\tthis.service.createMasterListVersion(this.list.oid, this.forDate).then(version => {\n\t\t\tthis.list.versions.push(version);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\tonView(version: MasterListVersion): void {\n\t\tevent.preventDefault();\n\n\t\tthis.router.navigate(['/registry/master-list/', version.oid, false])\n\t}\n\n\tonDelete(version: MasterListVersion): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"confirm.modal.verify.delete\") + ' [' + version.forDate + ']';\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"modal.button.delete\");\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.service.deleteMasterListVersion(version.oid).then(response => {\n\t\t\t\tthis.list.versions = this.list.versions.filter((value, index, arr) => {\n\t\t\t\t\treturn value.oid !== version.oid;\n\t\t\t\t});\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t});\n\t}\n\n\n\terror(err: HttpErrorResponse): void {\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div>\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div *ngIf=\"list && ((list.admin) || isMaintainer)\" style=\"margin-top: 30px; margin-bottom: 30px;\" class=\"row\">\n\n        <div class=\"col-md-12\">\n            <form #myForm=\"ngForm\">\n                <div class=\"form-group\">\n                    <label for=\"forDate\" style=\"display: block; margin-bottom: 0;\"><localize key=\"masterlist.publishingFor\"></localize></label> <input id=\"forDate\" type=\"date\" name=\"forDate\" [(ngModel)]=\"forDate\" required>\n\n                    <button type=\"submit\" style=\"margin-left: 15px;\" (click)=\"onPublish()\" class=\"btn btn-primary\" role=\"button\" [disabled]=\"myForm.invalid\">\n                        <localize key=\"masterlist.publishNewVersion\"></localize>\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n\n    <div class=\"row form-group\">\n        <div *ngIf=\"list\" class=\"col-md-12 table-responsive\">\n            <table class=\"list-table table\">\n                <thead>\n                    <tr>\n                        <th style=\"width: 50%\" class=\"label-column\"><localize key=\"masterlist.actions\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.forDate\"></localize></th>\n                        <th style=\"width: 15%\" class=\"label-column\"><localize key=\"masterlist.createDate\"></localize></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <!-- <tr *ngFor=\"let result of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\" class=\"fade-ngRepeat-item\"> -->\n                    <tr *ngFor=\"let version of list.versions\">\n                        <td style=\"width: 70%\">\n                            <div class=\"button-holder\">\n                                <button type=\"submit\" (click)=\"onView(version)\" class=\"btn btn-primary\" role=\"button\">\n                                    <localize key=\"modal.button.view\"></localize>\n                                </button>\n                                <button *ngIf=\"isMaintainer || isAdmin\" type=\"submit\" (click)=\"onDelete(version)\" class=\"btn btn-danger\" role=\"button\">\n                                    <localize key=\"modal.button.delete\"></localize>\n                                </button>\n                            </div>\n                        </td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.forDate }}</td>\n                        <td style=\"width: 15%\" class=\"label-column\">{{ version.createDate }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { MasterList } from '../../model/registry';\nimport { RegistryService } from '../../service/registry.service';\nimport { PublishModalComponent } from './publish-modal.component';\n\n@Component({\n\n\tselector: 'master-list-view',\n\ttemplateUrl: './master-list-view.component.html',\n\tstyleUrls: ['./master-list-view.component.css']\n})\nexport class MasterListViewComponent implements OnInit {\n\n\tcontent: string = \"\";\n\tlist: MasterList = null;\n\n\t/*\n\t * Reference to the modal current showing\n     */\n\tprivate bsModalRef: BsModalRef;\n\n\n\tconstructor(private service: RegistryService, private modalService: BsModalService, private route: ActivatedRoute) {\n\t}\n\n\tngOnInit(): void {\n\t\tconst oid = this.route.snapshot.paramMap.get('oid');\n\n\t\tif (oid != null) {\n\t\t\tthis.content = \"PUB\";\n\t\t}\n\n\t\tthis.service.getMasterList(oid).then(list => {\n\t\t\tthis.list = list;\n\t\t});\n\t}\n\n\tonViewMetadata(event: any): void {\n\t\tevent.preventDefault();\n\n\t\tthis.bsModalRef = this.modalService.show(PublishModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.readonly = true;\n\t\tthis.bsModalRef.content.master = this.list;\n\t\tthis.bsModalRef.content.isNew = false;\n\t}\n\n\n\n\n\trenderContent(content: string): void {\n\t\tthis.content = content;\n\t}\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n\n\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h3>{{list.displayLabel.localizedValue}}</h3>\n                    </div>\n                </div>\n                <div *ngIf=\"list\" class=\"row\">\n                    <div class=\"col-md-12\">\n                        <h5>\n                            <b> <a href=\"#\" (click)=\"onViewMetadata($event)\"><localize key=\"masterlist.view\"></localize> </a></b>\n                        </h5>\n                    </div>\n                </div>\n                \n                <div>\n                    <a style=\"margin-right: 10px; font-size: 20px;\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'PUB'}\" (click)=\"renderContent('PUB')\">Published</a> <a style=\"margin-right: 10px; font-size: 20px;\" [routerLink]=\"\" [ngClass]=\"{'active': content === 'EXP'}\" (click)=\"renderContent('EXP')\">Exploratory</a>\n                </div>\n\n                <div class=\"inner-col-content-wrapper\" style=\"padding-top: 30px; margin-top: 10px;\">\n                    <published-master-list-history *ngIf=\"list && content === 'PUB'\" [oid]=\"list.oid\"></published-master-list-history>\n                    <master-list-history *ngIf=\"list && content === 'EXP'\" [oid]=\"list.oid\"></master-list-history>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\nimport { IOService } from '../../service/io.service';\n\nimport { ScheduledJob, ScheduledJobOverview, PaginationPage } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\n\nimport { interval } from 'rxjs';\n\n@Component({\n\tselector: 'scheduled-jobs',\n\ttemplateUrl: './scheduled-jobs.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class ScheduledJobsComponent implements OnInit {\n\tmessage: string = null;\n\n\tactiveJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\tcompleteJobsPage: PaginationPage = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tactiveTimeCounter: number = 0;\n\tcompleteTimeCounter: number = 0;\n\n\tpollingData: any;\n\n\tisViewAllOpen: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService, private router: Router,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.onActiveJobsPageChange(1);\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.activeTimeCounter++\n\t\t\tthis.completeTimeCounter++\n\n\t\t\tif (this.isViewAllOpen) {\n\t\t\t\tif (this.activeTimeCounter >= 4) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t\tif (this.completeTimeCounter >= 7) {\n\t\t\t\t\tthis.onCompleteJobsPageChange(this.completeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.completeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.activeTimeCounter >= 2) {\n\t\t\t\t\tthis.onActiveJobsPageChange(this.activeJobsPage.pageNumber);\n\n\t\t\t\t\tthis.activeTimeCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.pollingData.unsubscribe();\n\t}\n\n\tformatJobStatus(job: ScheduledJobOverview) {\n\t\tif (job.status === \"FEEDBACK\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FEEDBACK\");\n\t\t}\n\t\telse if (job.status === \"RUNNING\" || job.status === \"NEW\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t\telse if (job.status === \"QUEUED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.QUEUED\");\n\t\t}\n\t\telse if (job.status === \"SUCCESS\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.SUCCESS\");\n\t\t}\n\t\telse if (job.status === \"CANCELED\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.CANCELED\");\n\t\t}\n\t\telse if (job.status === \"FAILURE\") {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.FAILURE\");\n\t\t}\n\t\telse {\n\t\t\treturn this.localizeService.decode(\"etl.JobStatus.RUNNING\");\n\t\t}\n\t}\n\n\tformatStepConfig(page: PaginationPage): void {\n\n\t\tpage.results.forEach(job => {\n\n\t\t\tlet stepConfig = {\n\t\t\t\t\"steps\": [\n\t\t\t\t\t{ \"label\": \"File Import\", \"status\": \"COMPLETE\" },\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Staging\",\n\t\t\t\t\t\t\"status\": job.stage === \"NEW\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"NEW\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Validation\",\n\t\t\t\t\t\t\"status\": job.stage === \"VALIDATE\" || job.stage === \"VALIDATION_RESOLVE\" ? this.getJobStatus(job) : this.getCompletedStatus(job.stage, \"VALIDATE\")\n\t\t\t\t\t},\n\n\t\t\t\t\t{\n\t\t\t\t\t\t\"label\": \"Database Import\",\n\t\t\t\t\t\t\"status\": job.stage === \"IMPORT\" || job.stage === \"IMPORT_RESOLVE\" || job.stage === \"RESUME_IMPORT\" ? this.getJobStatus(job) : \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\n\t\t\tjob = job as ScheduledJobOverview;\n\t\t\tjob.stepConfig = stepConfig;\n\t\t});\n\n\t}\n\n\n\tgetCompletedStatus(jobStage: string, targetStage: string): string {\n\t\tlet order = [\"NEW\", \"VALIDATE\", \"VALIDATION_RESOLVE\", \"IMPORT\", \"IMPORT_RESOLVE\", \"RESUME_IMPORT\"];\n\n\t\tlet jobPos = order.indexOf(jobStage);\n\t\tlet targetPos = order.indexOf(targetStage);\n\t\tif (targetPos < jobPos) {\n\t\t\treturn \"COMPLETE\";\n\t\t}\n\t\telse {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tgetJobStatus(job: ScheduledJob): string {\n\t\tif (job.status === \"QUEUED\" || job.status === \"RUNNING\") {\n\t\t\treturn \"WORKING\"\n\t\t}\n\t\telse if (job.status === \"FEEDBACK\") {\n\t\t\treturn \"STUCK\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\n\tonViewAllCompleteJobs(): void {\n\t\tthis.onCompleteJobsPageChange(1);\n\n\t\tthis.isViewAllOpen = true;\n\t}\n\n\n\tonView(code: string): void {\n\t\tthis.router.navigate(['/registry/master-list-history/', code])\n\t}\n\n\tonActiveJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJobs(this.activeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.activeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.activeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\tonCompleteJobsPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getCompletedScheduledJobs(this.completeJobsPage.pageSize, pageNumber, \"createDate\", false).then(response => {\n\n\t\t\tthis.completeJobsPage = response;\n\t\t\tthis.formatStepConfig(this.completeJobsPage);\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\t}\n\n\n\tonCancelScheduledJob(historyId: string, job: ScheduledJob): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(job.configuration).then(response => {\n\t\t\t\tthis.bsModalRef.hide()\n\n\t\t\t\tfor (let i = 0; i < this.activeJobsPage.results.length; ++i) {\n\t\t\t\t\tlet activeJob = this.activeJobsPage.results[i];\n\n\t\t\t\t\tif (activeJob.jobId === job.jobId) {\n\t\t\t\t\t\tthis.activeJobsPage.results.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.onViewAllCompleteJobs();\n\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\n\n\terror(err: HttpErrorResponse): void {\n\t\tconsole.log(\"ERROR\", err);\n\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n        <div class=\"py-5\">\n            <h2>\n                <localize key=\"scheduledjobs.title\"></localize>\n            </h2>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-md-12 order-md-1\">\n                <ul class=\"list-group\">\n                    <div class=\"solid-table-wrapper\">\n                        <table class=\"table table-striped\"> \n                            <thead > \n                                <tr style=\"height: 56px;\"> \n                                    <th style=\"vertical-align: middle;\">\n                                        <localize key=\"scheduledjobs.jobs.table.header\"></localize>                                      \n                                    </th> \n                                </tr> \n                            </thead> \n                            <tbody> \n                                <!-- <tr *ngFor=\"let job of jobs; let i = index;\">  -->\n                                <tr *ngFor=\"let job of activeJobsPage.results | paginate: { id: 'activeJobs', itemsPerPage: activeJobsPage.pageSize, currentPage: activeJobsPage.pageNumber, totalItems: activeJobsPage.count }\" >\n                                    <td style=\"vertical-align: middle;\">\n                                        <div class=\"wrapper\">\n                                            <i style=\"position: absolute;font-size: 40px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                                            <p style=\"padding-left: 60px;\">\n                                                <span style=\"display: block;\">\n                                                    {{job.fileName}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{job.createDate}}\n                                                </span>\n                                                <span style=\"display: block;\">\n                                                    {{formatJobStatus(job)}}\n                                                </span>\n                                            </p>\n\n                                            <step-indicator [steps]=\"job.stepConfig\"></step-indicator>\n\n                                        </div>\n                                    </td> \n                                    <td *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;vertical-align: middle;\">  \n\n                                        <div class=\"button-holder\" style=\"float: right;\">\n                                            <a [routerLink]=\"'/registry/job/' + job.historyId\" routerLinkActive=\"active\">\n                                                <button class=\"btn btn-primary\" role=\"button\">\n                                                    <localize *ngIf=\"job.stage === 'IMPORT_RESOLVE' || job.stage === 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.fix.problems.button\"></localize>\n                                                    <localize *ngIf=\"job.stage != 'IMPORT_RESOLVE' && job.stage != 'VALIDATION_RESOLVE'\" key=\"scheduledjobs.detail.button\"></localize>\n                                                </button>\n                                            </a>\n                                            <button *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\" type=\"button\" (click)=\"onCancelScheduledJob(job.historyId, job)\" class=\"btn btn-danger\" role=\"button\">\n                                                <localize key=\"etl.import.cancel.openModal\"></localize>\n                                            </button>\n                                        </div>\n                                    </td> \n                                </tr> \n\n                            </tbody> \n                        </table>\n                        <div *ngIf=\"activeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                            <pagination-controls id=\"activeJobs\" (pageChange)=\"onActiveJobsPageChange($event)\"></pagination-controls>\n                        </div>\n                    </div>\n\n                    <div class=\"solid-table-wrapper\">\n\t                    <table class=\"table table-striped\"> \n\t                      <thead> \n\t                        <tr> \n\t                          <th style=\"width:40%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.completedjobs.table.header\"></localize>                                      \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n\t                            <localize style=\"line-height: 40px;\" key=\"scheduledjobs.status\"></localize>                   \n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importedRecords\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importStartDate\"></localize>                   \n                            </th>\n                            <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"width:15%;border-bottom: none;\">\n                              <localize style=\"line-height: 40px;\" key=\"scheduledjobs.importEndDate\"></localize>                   \n                            </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length < 1\" style=\"border-bottom: none; width:15%\">\n\t                            <button type=\"submit\" (click)=\"onViewAllCompleteJobs()\" class=\"btn btn-default pull-right\" role=\"button\">\n\t                              <localize key=\"scheduledjobs.view.completed.jobs.button\"></localize>\n\t                            </button>\n\t                          </th>\n\t                          <th *ngIf=\"completeJobsPage.results.length > 0\" style=\"border-bottom: none; width:0%\">\n                            </th>\n\t                        </tr> \n\t                      </thead> \n\t                      <tbody> \n\t                      <!-- <tr *ngFor=\"let job of completedJobs; let i = index;\">  -->\n\t                      <tr *ngFor=\"let job of completeJobsPage.results | paginate: { id: 'completeJobs', itemsPerPage: completeJobsPage.pageSize, currentPage: completeJobsPage.pageNumber, totalItems: completeJobsPage.count }\" >\n\t                        <td style=\"width:40%; vertical-align: middle;\">\n\t                          <div class=\"wrapper\">\n                              <i class=\"fa fa-file\" style=\"position: absolute;\" aria-hidden=\"true\"></i>\n                              <p style=\"padding-left: 30px;margin: 0;\">{{job.fileName}}</p>\n\t                          </div>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n\t                          <p style=\"padding-left: 0px;margin: 0;\">{{formatJobStatus(job)}}</p>\n\t                        </td>\n\t                        <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.importedRecords}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.createDate}}</p>\n                          </td>\n                          <td style=\"width:15%; vertical-align: middle;\">\n                            <p style=\"padding-left: 0px;margin: 0;\">{{job.lastUpdateDate}}</p>\n                          </td>\n\t                        <td *ngIf=\"isAdmin || isMaintainer\" style=\"width:15%;text-align: right;vertical-align: middle;\">                                \n\t                           <!-- \n\t                           <button type=\"submit\" (click)=\"onView(job.historyId)\" class=\"btn btn-primary\" role=\"button\"><localize key=\"scheduledjobs.detail.button\"></localize></button>\n\t                           -->\n\t                           <!-- <button type=\"submit\" (click)=\"onDelete(job)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"modal.button.delete\"></localize></button> -->\n\t                        </td>\n\t                       </tr> \n\t                      </tbody> \n\t                    </table>\n\t\n\t                    <div *ngIf=\"completeJobsPage.results.length > 0\" class=\"solid-table-footer\">\n                        <pagination-controls id=\"completeJobs\" (pageChange)=\"onCompleteJobsPageChange($event)\"></pagination-controls>\n\t                    </div>\n                    </div>\n                </ul>\n\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '../../../shared/service/localization.service';\n\nimport { Step, StepConfig } from '../../model/registry';\n\n\n@Component( { \n    selector: 'step-indicator',\n    templateUrl: './step-indicator.component.html',\n    styleUrls: ['./step-indicator.css']\n} )\nexport class StepIndicatorComponent {\n\n    @Input('steps')\n    set steps(value: StepConfig) {\n        this._stepConfig = value;\n    }\n\n    _stepConfig: StepConfig;\n    step: Step;\n\n\n    constructor( private localizeService: LocalizationService ) {\n\n        this._stepConfig = {\"steps\": []};\n    }\n\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n       \n    }\n}\n","<div class=\"step-indicator\">\n    <ul *ngIf=\"_stepConfig && _stepConfig.steps && _stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\"\n            *ngFor=\"let step of _stepConfig.steps\"\n            [ngClass]=\"{'complete':step.status === 'COMPLETE', 'stuck':step.status === 'STUCK', 'working': step.status === 'WORKING'}\">\n            {{step.label}}\n        </li>\n    </ul>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ConfirmModalComponent } from '../../../shared/component/modals/confirm-modal.component';\nimport { JobConflictModalComponent } from './conflict-widgets/job-conflict-modal.component';\nimport { ReuploadModalComponent } from './conflict-widgets/reupload-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { ScheduledJob } from '../../model/registry';\nimport { ModalTypes } from '../../../shared/model/modal';\nimport { IOService } from '../../service/io.service';\n\nimport { interval } from 'rxjs';\n\n@Component({\n\tselector: 'job',\n\ttemplateUrl: './job.component.html',\n\tstyleUrls: ['./scheduled-jobs.css']\n})\nexport class JobComponent implements OnInit {\n\tmessage: string = null;\n\tjob: ScheduledJob;\n\tallSelected: boolean = false;\n\thistoryId: string = \"\";\n\n\tpage: any = {\n\t\tcount: 0,\n\t\tpageNumber: 1,\n\t\tpageSize: 10,\n\t\tresults: []\n\t};\n\n\ttimeCounter: number = 0;\n\n    /*\n     * Reference to the modal current showing\n    */\n\tbsModalRef: BsModalRef;\n\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\n\tpollingData: any;\n\tisPolling: boolean = false;\n\thasRowValidationProblem: boolean = false;\n\n\tconstructor(public service: RegistryService, private modalService: BsModalService,\n\t\tprivate router: Router, private route: ActivatedRoute,\n\t\tprivate localizeService: LocalizationService, authService: AuthService, public ioService: IOService) {\n\t\tthis.isAdmin = authService.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || authService.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || authService.isContributer();\n\t}\n\n\tngOnInit(): void {\n\n\t\tthis.historyId = this.route.snapshot.params[\"oid\"];\n\n\t\tthis.onPageChange(1);\n\n\t}\n\n\tngOnDestroy() {\n\t\tthis.stopPolling();\n\t}\n\n\tformatAffectedRows(rows: string) {\n\t\treturn rows.replace(/,/g, \", \");\n\t}\n\n\tformatValidationResolve(obj: any) {\n\t\treturn JSON.stringify(obj);\n\t}\n\n\tonProblemResolved(problem: any): void {\n\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\tlet pageConflict = this.page.results[i];\n\n\t\t\tif (pageConflict.id === problem.id) {\n\t\t\t\tthis.page.results.splice(i, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetFriendlyProblemType(probType: string): string {\n\n\t\tif (probType === \"net.geoprism.registry.io.ParentCodeException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.PostalCodeLocationException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.postal.code.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.AmbiguousParentException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.multi.parent.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.io.InvalidGeometryException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.invalid.geom.lookup\");\n\t\t}\n\n\t\tif (probType === \"net.geoprism.registry.DataNotFoundException\") {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.required.value.lookup\");\n\t\t}\n\n\t\tif (\n\t\t\tprobType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n\t\t\t|| probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.permission\");\n\t\t}\n\n\t\t// if(probType === \"net.geoprism.registry.io.TermValueException\"){\n\t\t//   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n\t\t// }\n\n\t\tif (\n\t\t\tprobType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n\t\t\t|| probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n\t\t) {\n\t\t\treturn this.localizeService.decode(\"scheduledjobs.job.problem.type.duplicate.data.lookup\");\n\t\t}\n\n\t\treturn probType;\n\t}\n\n\n\tonEdit(problem: any): void {\n\t\t// this.router.navigate( ['/registry/master-list-history/', code] )\n\n\t\tthis.bsModalRef = this.modalService.show(JobConflictModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\t\tthis.bsModalRef.content.problem = problem;\n\t\tthis.bsModalRef.content.job = this.job;\n\t\tthis.bsModalRef.content.onConflictAction.subscribe(data => {\n\t\t\tif (data.action === 'RESOLVED') {\n\t\t\t\tthis.onProblemResolved(data.data);\n\t\t\t}\n\t\t});\n\t}\n\n\tonPageChange(pageNumber: any): void {\n\n\t\tthis.message = null;\n\n\t\tthis.service.getScheduledJob(this.historyId, this.page.pageSize, pageNumber, true).then(response => {\n\n\t\t\tthis.job = response;\n\n\t\t\tif (this.job.stage === 'IMPORT_RESOLVE') {\n\t\t\t\tthis.page = this.job.importErrors;\n\t\t\t}\n\t\t\telse if (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.page = this.job.problems;\n\n\t\t\t\tfor (let i = 0; i < this.page.results.length; ++i) {\n\t\t\t\t\tlet problem = this.page.results[i];\n\n\t\t\t\t\tif (problem.type === 'RowValidationProblem') {\n\t\t\t\t\t\tthis.hasRowValidationProblem = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.isPolling && this.job.status === 'RUNNING') {\n\t\t\t\tthis.startPolling();\n\t\t\t}\n\t\t\telse if (this.isPolling && this.job.status != 'RUNNING') {\n\t\t\t\tthis.stopPolling();\n\t\t\t}\n\n\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\tthis.error(err);\n\t\t});\n\n\t}\n\n\tstopPolling(): void {\n\t\tif (this.isPolling && this.pollingData != null) {\n\t\t\tthis.pollingData.unsubscribe();\n\t\t}\n\t}\n\n\tstartPolling(): void {\n\t\tthis.timeCounter = 0;\n\n\t\tthis.pollingData = interval(1000).subscribe(() => {\n\t\t\tthis.timeCounter++\n\n\t\t\tif (this.timeCounter >= 2) {\n\t\t\t\tthis.onPageChange(this.page.pageNumber);\n\n\t\t\t\tthis.timeCounter = 0;\n\t\t\t}\n\t\t});\n\n\t\tthis.isPolling = true;\n\t}\n\n\tonViewAllActiveJobs(): void {\n\n\t}\n\n\tonViewAllCompleteJobs(): void {\n\n\t}\n\n\ttoggleAll(): void {\n\t\tthis.allSelected = !this.allSelected;\n\n\t\tthis.job.importErrors.results.forEach(row => {\n\t\t\trow.selected = this.allSelected;\n\t\t})\n\t}\n\n\tonReuploadAndResume(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ReuploadModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.job = this.job;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t});\n\t}\n\n\tonResolveScheduledJob(historyId: string): void {\n\t\tif (this.page.results.length == 0) {\n\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs']);\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\t\tanimated: true,\n\t\t\t\tbackdrop: true,\n\t\t\t\tignoreBackdropClick: true,\n\t\t\t});\n\n\t\t\tif (this.job.stage === 'VALIDATION_RESOLVE') {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.validationDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.validationButton\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.resume.modal.importDescription\");\n\t\t\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.resume.modal.importButton\");\n\t\t\t}\n\n\t\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\t\tthis.service.resolveScheduledJob(historyId).then(response => {\n\n\t\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\n\t\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\t\tthis.error(err);\n\t\t\t\t});\n\n\t\t\t});\n\t\t}\n\t}\n\n\tonCancelScheduledJob(historyId: string): void {\n\t\tthis.bsModalRef = this.modalService.show(ConfirmModalComponent, {\n\t\t\tanimated: true,\n\t\t\tbackdrop: true,\n\t\t\tignoreBackdropClick: true,\n\t\t});\n\n\t\tthis.bsModalRef.content.message = this.localizeService.decode(\"etl.import.cancel.modal.description\");\n\t\tthis.bsModalRef.content.submitText = this.localizeService.decode(\"etl.import.cancel.modal.button\");\n\n\t\tthis.bsModalRef.content.type = ModalTypes.danger;\n\n\t\tthis.bsModalRef.content.onConfirm.subscribe(data => {\n\n\t\t\tthis.ioService.cancelImport(this.job.configuration).then(response => {\n\t\t\t\t//this.bsModalRef.hide()\n\t\t\t\tthis.router.navigate(['/registry/scheduled-jobs'])\n\t\t\t}).catch((err: HttpErrorResponse) => {\n\t\t\t\tthis.error(err);\n\t\t\t});\n\n\t\t});\n\t}\n\n\terror(err: HttpErrorResponse): void {\n\t\tconsole.log(\"Encountered error\", err);\n\n\t\t// Handle error\n\t\tif (err !== null) {\n\t\t\tthis.message = (err.error.localizedMessage || err.error.message || err.message);\n\t\t}\n\t}\n\n}\n","<div class=\"new-admin-design-main\">\n    <cgr-header></cgr-header>\n    <loading-bar></loading-bar>\n\n    <div id=\"app-container\" class=\"container-fluid\">\n        <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n            <div class=\"py-5\">\n                <h2>\n                    <localize key=\"scheduledjobs.details.title\"></localize>\n                </h2>\n            </div>\n            <div *ngIf=\"job\" class=\"row\" style=\"background: #F4F4F4;\n                                border-radius: 15px;\n                                margin-bottom: 20px;\n                                margin-top: 20px;\n                                padding: 10px;\">\n                <div class=\"col-md-4 order-md-1\">\n                    <div class=\"wrapper\">\n\n                        <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                        <p style=\"padding-left: 60px;\">\n                            <span style=\"display: block;\">\n                                <strong>{{job.fileName}}</strong>\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.uploaded.by.label\"></localize>\n                              {{job.author}}\n                            </span>\n                            <span style=\"display: block;\">\n                              <localize key=\"scheduledjobs.job.started.label\"></localize>\n                              {{job.createDate}}\n                            </span>\n                        </p>\n\n                    </div>\n                </div>\n                <div class=\"col-md-3 order-md-1\">\n                    <div>\n\n                        <h5><b>{{job.importedRecords}} \n                          <localize key=\"scheduledjobs.job.imported.out.of.label\"></localize> \n                          {{job.workTotal}} \n                          <localize key=\"scheduledjobs.job.imported.total.label\"></localize>\n                        </b></h5>\n                        <h5>{{job.workTotal - job.importedRecords}} <localize key=\"scheduledjobs.job.remaining.label\"></localize></h5>\n\n                    </div>\n                </div>\n                <div class=\"col-md-5 order-md-1\">\n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'VALIDATION_RESOLVE'\" style=\"display:block; margin: 10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.validation.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.reimport.button\"></localize>\n                    </button>\n                  </div>\n                  \n                  <div *ngIf=\"page.results.length == 0 && job && job.stage === 'IMPORT_RESOLVE'\" style=\"display:block; margin:10px;text-align: right;\">\n                    <span style=\"display:block; margin-bottom:10px;\">\n                      <localize key=\"scheduledjobs.import.problems.complete.msg\"></localize>\n                    </span>\n                    <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                      <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                    </button>\n                  </div>\n      \n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && !hasRowValidationProblem\" class=\"button-holder\" style=\"display:block; margin:10px;text-align: right;\">\n                      <button type=\"submit\" (click)=\"onResolveScheduledJob(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <localize *ngIf=\"job && job.stage === 'VALIDATION_RESOLVE'\" key=\"etl.import.resume.openModal\"></localize>\n                        <span *ngIf=\"job && job.stage === 'IMPORT_RESOLVE'\">\n                          <localize key=\"scheduledjobs.complete.import.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <div *ngIf=\"hasRowValidationProblem\"class=\"button-holder\" style=\"display:block; margin:10px;\">\n                    <button type=\"submit\" (click)=\"onReuploadAndResume(job.historyId)\" class=\"btn btn-primary\" role=\"button\">\n                        <span>\n                          <localize key=\"scheduledjobs.reupload.resume.button\"></localize>\n                        </span>\n                      </button>\n                  </div>\n                  \n                  <!--\n                  <div *ngIf=\"page && page.results != null && page.results.length > 0 && job.stage === 'VALIDATION_RESOLVE'\" class=\"button-holder\" style=\"display:block; margin:10px;\">\n                      <button type=\"button\" (click)=\"onCancelScheduledJob(job.historyId)\" class=\"btn btn-danger\" role=\"button\"><localize key=\"etl.import.cancel.openModal\"></localize></button>\n                  </div>\n                  -->\n                </div>\n            </div>\n            <div *ngIf=\"page && page.results.length > 0\" class=\"row\">\n                <div class=\"col-md-12 order-md-1\" *ngIf=\"job\">\n                    \n                    <ul class=\"list-group\">\n            \n                        <table class=\"list-table table table-bordered table-striped\">\n                            <thead *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr>\n\t                                <!-- <th class=\"label-column\">\n\t                                  <div class=\"check-block\">\n\t                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n\t                                     <span></span>\n\t                                   </div>\n\t                                  </div>\n\t                                </th> -->\n\t                                <th class=\"label-column\">\n\t                                    <localize key=\"scheduledjobs.import.table.problem.type.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                      <localize key=\"scheduledjobs.import.table.message.header\"></localize>\n\t                                </th>\n\t                                <th class=\"label-column\">\n                                    <localize key=\"scheduledjobs.import.table.row.number.header\"></localize>\n                                  </th>\n\t                                <th class=\"label-column\">\n\t                                    \n\t                                </th>\n                                </tr>\n                            </thead>\n                            <thead *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n                              <tr>\n                                <!-- <th class=\"label-column\">\n                                  <div class=\"check-block\">\n                                   <div (click)=\"toggleAll()\" [ngClass]=\"{'chk-checked' : allSelected}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n                                     <span></span>\n                                   </div>\n                                  </div>\n                                </th> -->\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.problem.type.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.label.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  <localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize>\n                                </th>\n                                <th class=\"label-column\">\n                                  \n                                </th>\n                              </tr>\n                            </thead>\n\n                            <tbody *ngIf=\"job.stage === 'IMPORT_RESOLVE'\">\n                                <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n                                <!-- <tr *ngFor=\"let row of job.errors.page; let i = index;\"> -->\n                                    <!-- <td class=\"label-column\">\n                                      <boolean-field [(value)]=\"row.selected\"></boolean-field>\n                                    </td> -->\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{getFriendlyProblemType(row.exception.type)}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.exception.message}}</p>\n                                    </td>\n                                    <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                      <p>{{row.rowNum}}</p>\n                                    </td>\n                                    <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n                                        <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                            <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n                                        </button>\n                                    </td>\n                                </tr>\n                            </tbody>\n\n                            <tbody *ngIf=\"job.stage === 'VALIDATION_RESOLVE'\">\n\t                            <tr *ngFor=\"let row of page.results | paginate: { itemsPerPage: page.pageSize, currentPage: page.pageNumber, totalItems: page.count }\">\n\t                             <!-- <td class=\"label-column\">\n\t                               <boolean-field [(value)]=\"row.selected\"></boolean-field>\n\t                             </td> -->\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n\t                               <p>{{row.type}}</p> \n\t                             </td>\n\t                             <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p *ngIf=\"row.type === 'RowValidationProblem'\">{{row.exception.message}}</p>\n                                 <p *ngIf=\"row.type === 'ParentReferenceProblem' || row.type === 'TermReferenceProblem'\">{{row.label}}</p>\n                               </td>\n                               <td class=\"label-column\" style=\"vertical-align: middle;\">\n                                 <p>{{formatAffectedRows(row.affectedRows)}}</p>\n                               </td>\n\t                             <td class=\"label-column\" *ngIf=\"isAdmin || isMaintainer\" style=\"text-align: right;\">\n\t                              <button type=\"submit\" (click)=\"onEdit(row)\" class=\"btn btn-link\" role=\"button\">\n                                    <localize key=\"scheduledjobs.fix.problem.button\"></localize>\n\t                              </button>\n\t                             </td>\n\t                            </tr>\n                            </tbody>\n                        </table>\n                        <div class=\"solid-table-footer\">\n                            <div *ngIf=\"page.results.length > 0\" class=\"solid-table-footer\">\n                                <pagination-controls (pageChange)=\"onPageChange($event)\"></pagination-controls>\n                            </div>\n                        </div>\n                    </ul>\n                </div>\n            </div>\n    </div>\n</div>","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ParentReferenceProblemWidgetComponent } from './parent-reference-problem-widget.component'\nimport { TermReferenceProblemWidgetComponent } from './term-reference-problem-widget.component'\nimport { RowValidationProblemWidgetComponent } from './row-validation-problem-widget.component'\n\nimport { GeoObjectType, MasterList, ScheduledJob, ScheduledJobOverview } from '../../../model/registry';\n\nimport { RegistryService } from '../../../service/registry.service';\n\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'job-conflict-modal',\n    templateUrl: './job-conflict-modal.component.html',\n    styleUrls: []\n} )\nexport class JobConflictModalComponent implements OnInit {\n    message: string = null;\n    problem: any;\n    job: ScheduledJobOverview;\n    \n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, private lService: LocalizationService, public bsModalRef: BsModalRef ) {\n      this.onConflictAction = new Subject();\n    }\n\n    ngOnInit(): void {\n      \n    }\n    \n    onProblemResolvedListener(problem: any): void {\n      this.onConflictAction.next({action:\"RESOLVED\", data: problem});\n    }\n\n    onCancel(): void {\n        this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"modal-body\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n    <div class=\"text-center\">\n        <h2>\n            <localize key=\"scheduledjobs.problemdetail.modal.title\"></localize>\n        </h2>\n    </div>\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n    <form #form=\"ngForm\" class=\"modal-form\">\n\n        <fieldset>\n            \n            <div *ngIf=\"problem && job && job.stage === 'IMPORT_RESOLVE'\">\n                <import-problem-widget (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\"></import-problem-widget>\n            </div>\n            <div *ngIf=\"problem && job && job.stage === 'VALIDATION_RESOLVE'\">\n              <parent-reference-problem-widget *ngIf=\"problem.type === 'ParentReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></parent-reference-problem-widget>\n              <term-reference-problem-widget *ngIf=\"problem.type === 'TermReferenceProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></term-reference-problem-widget>\n              <row-validation-problem-widget *ngIf=\"problem.type === 'RowValidationProblem'\" (onProblemResolved)=\"onProblemResolvedListener($event, problem)\" [problem]=\"problem\" [job]=\"job\" ></row-validation-problem-widget>\n            </div>\n            \n            <div class=\"row-holder\">\n                <!-- <div class=\"label-holder\"></div> -->\n                <div class=\"\">\n                    <div class=\"button-holder\">\n                        <button type=\"button\" (click)=\"onCancel()\" class=\"btn btn-default\" role=\"button\">\n                            <localize key=\"io.back\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n\n        </fieldset>\n    </form>\n    <!-- </div> -->\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { GeoObjectType, MasterList, ScheduledJob, ImportError } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'import-problem-widget',\n    templateUrl: './import-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ImportProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: ImportError;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n    }\n\n    onEditGeoObject(): void {\n        let editModal = this.modalService.show( GeoObjectEditorComponent, {\n            backdrop: true,\n            ignoreBackdropClick: true\n        } );\n\n        editModal.content.configureFromImportError(this.problem, this.job.historyId, this.job.configuration.startDate, true);\n        editModal.content.setMasterListId( null );\n        editModal.content.setOnSuccessCallback(() => {\n\n          this.onProblemResolved.emit(this.problem);\n          this.bsModalRef.hide()\n            \n        } );\n    }\n\n    getFriendlyProblemType(probType: string): string {\n\n        if(probType === \"net.geoprism.registry.io.ParentCodeException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.PostalCodeLocationException\"){\n            return this.lService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.AmbiguousParentException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.multi.parent.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.io.InvalidGeometryException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.invalid.geom.lookup\" );\n        }\n\n        if(probType === \"net.geoprism.registry.DataNotFoundException\"){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.required.value.lookup\" );\n        }\n        \n        if(\n            probType === \"net.geoprism.registry.roles.CreateGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.WriteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.DeleteGeoObjectPermissionException\"\n            || probType === \"net.geoprism.registry.roles.ReadGeoObjectPermissionException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.permission\" );\n        }\n\n        // if(probType === \"net.geoprism.registry.io.TermValueException\"){\n        //   return this.localizeService.decode( \"scheduledjobs.job.problem.type.postal.code.lookup\" );\n        // }\n        if(\n          probType === \"com.runwaysdk.dataaccess.DuplicateDataException\"\n          || probType === \"net.geoprism.registry.DuplicateGeoObjectException\"\n          ){\n          return this.lService.decode( \"scheduledjobs.job.problem.type.duplicate.data.lookup\" );\n        }\n\n        return probType;\n    }\n\n    onSubmit(): void {\n\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide();\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row equal\" style=\"display: flex;display: -webkit-flex;flex-wrap: wrap;\">\n                <div class=\"col-md-6\" style=\"padding-right: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;\">\n                        <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{getFriendlyProblemType(problem.exception.type)}}</p>\n\n                        <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                        <p style=\"font-style: italic;\">{{problem.exception.message}}</p>\n\n                        <!-- <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                        <p>TODO: how to address the issue.</p> -->\n                    </div>\n                </div>\n                <div class=\"col-md-6\" style=\"padding-left: 5px;\">\n                    <div style=\"background: white;border-radius: 10px;padding: 10px;height: 100%;text-align: center;\">\n                        <button style=\"width: 90%;\" type=\"submit\" (click)=\"onEditGeoObject()\" class=\"btn btn-primary\" role=\"button\">\n                            <localize key=\"scheduledjobs.editGeoObject\"></localize>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'parent-reference-problem-widget',\n    templateUrl: './parent-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class ParentReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.parentProblem.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p>\n                      <localize key=\"etl.parentProblem.toResolve\"></localize>\n                    </p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"etl.problem.parent.context\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <div *ngIf=\"problem.context.length > 0\" style=\"margin-top:10px;\">\n\t\t                    <ol *ngFor=\"let con of problem.context\">\n\t\t\t\t\t\t\t\t          <li>{{con.label}} ({{con.type}})</li>\n\t\t\t\t\t\t\t\t        </ol>\n\t\t\t\t\t\t\t        </div>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.parent.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"parentSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem.typeCode, problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"name\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.parent.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"problem.parent == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'term-reference-problem-widget',\n    templateUrl: './term-reference-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class TermReferenceProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    termId: string = null;\n    searchLabel: string;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( conflict: any ): Observable<any> {\n        return Observable.create(( observer: any ) => {\n            this.iService.getTermSuggestions( conflict.mdAttributeId, this.searchLabel, '20' ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n    \n    typeaheadOnSelect( e: TypeaheadMatch ): void {\n        this.termId = e.item.value;\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        classifierId: this.termId,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div *ngIf=\"problem\" class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">\n                      <localize key=\"etl.problem.termReference.message\"></localize>\n                    </p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.termReference.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.attributeLabel\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{problem.attributeLabel}}</span>\n                    </div>\n                  </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.termReference.label\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.label}}</span>\n\t                  </div>\n\t                </div>\n\t                <div class=\"row-holder\" style=\"overflow:visible;\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.synonym\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <input  style=\"width:150px;\" type=\"text\" class=\"form-control\" autocomplete=\"off\"\n\t                      name=\"termSearch\"\n\t                      [(ngModel)]=\"searchLabel\"\n\t                      [typeaheadAsync]=\"true\"\n\t                      [typeahead]=\"getTypeAheadObservable(problem)\"\n\t                      (typeaheadOnSelect)=\"typeaheadOnSelect($event, problem)\"\n\t                      [typeaheadOptionsLimit]=\"7\"\n\t                      typeaheadOptionField=\"label\"\n\t                      [typeaheadMinLength]=\"0\"\n\t                      [typeaheadWaitMs]=\"300\">\n                    </div>\n                  </div>\n                  <div class=\"row-holder\">\n                    <div class=\"label-holder\" style=\"width:100px;\">\n                      <label>\n                        <span class=\"text\"><localize key=\"etl.problem.termReference.actions\"></localize></span>\n                      </label>\n                    </div>\n                    <div class=\"holder\" style=\"width:300px;\">\n                      <button type=\"submit\" [disabled]=\"termId == null\" (click)=\"onCreateSynonym()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.createSynonym\"></localize>\n                      </button>\n                      <button type=\"submit\" (click)=\"onIgnore()\" class=\"btn btn-primary\" role=\"button\">\n                        <localize key=\"etl.problem.reference.ignore\"></localize>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\n\nimport { GeoObjectType, MasterList, ScheduledJob } from '../../../model/registry';\n\nimport { GeoObjectEditorComponent } from '../../geoobject-editor/geoobject-editor.component';\n\nimport Utils from '../../../utility/Utils'\n\nimport { RegistryService } from '../../../service/registry.service';\nimport { IOService } from '../../../service/io.service';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\n\n@Component( {\n    selector: 'row-validation-problem-widget',\n    templateUrl: './row-validation-problem-widget.component.html',\n    styleUrls: []\n} )\nexport class RowValidationProblemWidgetComponent implements OnInit {\n    message: string = null;\n    @Input() problem: any;\n    @Input() job: ScheduledJob;\n    @Output() public onProblemResolved = new EventEmitter<any>();\n    \n    searchLabel: string;\n\n    /*\n     * Observable subject for submission.  Called when an update is successful \n     */\n    // onConflictAction: Subject<any>;\n\n    readonly: boolean = false;\n    edit: boolean = false;\n\n\n    constructor( private service: RegistryService, private iService: IOService, \n        private lService: LocalizationService, public bsModalRef: BsModalRef, private modalService: BsModalService\n        ) { }\n\n    ngOnInit(): void {\n\n        // this.onConflictAction = new Subject();\n        \n        // this.searchLabel = this.problem.label;\n        \n        this.problem.parent = null;\n        this.searchLabel = \"\";\n\n    }\n    \n    getString(conflict: any): string {\n      return JSON.stringify(conflict);\n    }\n\n    getValidationProblemDisplayLabel(conflict: any): string {\n      return conflict.type;\n    }\n    \n    getTypeAheadObservable( typeCode: string, conflict: any ): Observable<any> {\n\n        let parentCode = null;\n        let hierarchyCode = this.job.configuration.hierarchy;\n\n        return Observable.create(( observer: any ) => {\n            this.service.getGeoObjectSuggestions( this.searchLabel, typeCode, parentCode, hierarchyCode, this.job.startDate ).then( results => {\n                observer.next( results );\n            } );\n        } );\n    }\n\n    typeaheadOnSelect( e: TypeaheadMatch, conflict: any ): void {\n\n        this.service.getParentGeoObjects( e.item.uid, conflict.typeCode, [], false, this.job.startDate ).then( ancestors => {\n\n            conflict.parent = ancestors.geoObject;\n            this.searchLabel = ancestors.geoObject.properties.displayLabel.localizedValue;\n\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    onIgnore(): void {\n      let cfg = {\n        resolution: \"IGNORE\",\n        validationProblemId: this.problem.id\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n    \n    formatAffectedRows(rows: string)\n    {\n      return rows.replace(/,/g, \", \");\n    }\n    \n    onCreateSynonym(): void {\n      let cfg = {\n        validationProblemId: this.problem.id,\n        resolution: \"SYNONYM\",\n        code: this.problem.parent.properties.code,\n        typeCode: this.problem.parent.properties.type,\n        label: this.problem.label\n      };\n    \n      this.service.submitValidationResolve( cfg ).then( response => {\n        \n        this.onProblemResolved.emit(this.problem);\n        \n        this.bsModalRef.hide()\n        \n      } ).catch(( err: HttpErrorResponse ) => {\n        this.error(err);\n      } );\n    }\n\n    onCancel(): void {\n      this.bsModalRef.hide()\n    }\n\n    error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n\n}\n","<div class=\"container\">\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n\n\n    <!-- <div class=\"col-md-12 order-md-1\"> -->\n\n    <!-- <div class=\"row\">\n\n        <h2>\n            Review: {{job.fileName}} problem\n        </h2>\n    </div> -->\n    <div *ngIf=\"problem && job\" class=\"row\" style=\"background: #F4F4F4;\n                                        border-radius: 10px;\n                                        margin-bottom: 20px;\n                                        margin-top: 20px;\n                                        padding: 10px;\">\n        <div class=\"col-md-6\">\n            <div class=\"wrapper\">\n\n                <i style=\"position: absolute;font-size: 55px;\" class=\"fa fa-file\" aria-hidden=\"true\"></i>\n                <p style=\"padding-left: 60px;\">\n                    <span style=\"display: block;\">\n                        <strong>{{job.fileName}}</strong>\n                    </span>\n                    <span style=\"display: block;\">\n                        Uploaded by: {{job.author}}\n                    </span>\n                    <span style=\"display: block;\">\n                        Started: {{job.createDate}}\n                    </span>\n                </p>\n\n            </div>\n        </div>\n        <div class=\"col-md-6\"></div>\n    </div>\n\n    <div class=\"row\" style=\"background: #F4F4F4;\n                            border-radius: 10px;\n                            margin-bottom: 20px;\n                            margin-top: 20px;\n                            padding: 10px;\">\n        <div class=\"col-md-12\">\n\n            <div class=\"row\">\n                <div class=\"col-md-6\" style=\"background: white;border-radius: 10px; width: 41%; margin-right:7px;\">\n                    <h4><strong><localize key=\"etl.problem.header.problem\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\">{{getValidationProblemDisplayLabel(problem)}}</p>\n\n                    <h4><strong><localize key=\"etl.problem.header.message\"></localize></strong></h4>\n                    <p style=\"font-style: italic;\"><localize key=\"etl.problem.rowValidation.message\"></localize></p>\n\n                    <h4><strong><localize key=\"etl.problem.header.toResolve\"></localize></strong></h4>\n                    <p><localize key=\"etl.problem.rowValidation.toResolve\"></localize></p>\n                </div>\n                <div class=\"com-md-6\" style=\"background: white; border-radius: 10px; width:41%; float:left; height:250px;\">\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t\t                  <label>\n\t\t                    <span class=\"text\"><localize key=\"scheduledjobs.validation.table.affected.rows.header\"></localize></span>\n\t\t                  </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n                      <span class=\"text\" style=\"margin-top:10px;\">{{formatAffectedRows(problem.affectedRows)}}</span>\n                    </div>\n\t                </div>\n\t                <div class=\"row-holder\">\n\t                  <div class=\"label-holder\" style=\"width:100px;\">\n\t                    <label>\n\t                      <span class=\"text\"><localize key=\"etl.problem.rowValidation.message\"></localize></span>\n\t                    </label>\n\t                  </div>\n\t                  <div class=\"holder\" style=\"width:300px;\">\n\t                    <span class=\"text\" style=\"margin-top:10px;\">{{problem.exception.message}}</span>\n\t                  </div>\n\t                </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>","import { Component, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LocalizationService } from '../../../../shared/service/localization.service';\nimport { ModalTypes } from '../../../../shared/model/modal';\nimport { FileSelectDirective, FileDropDirective, FileUploader, FileUploaderOptions } from 'ng2-file-upload';\nimport { EventService } from '../../../../shared/service/event.service'\nimport { ScheduledJob } from '../../../model/registry';\n\ndeclare var acp: any;\n\n@Component( {\n    selector: 'reupload-modal',\n    templateUrl: './reupload-modal.component.html',\n    styleUrls: ['../../../../shared/component/modals/modal.css']\n} )\nexport class ReuploadModalComponent {\n  @Input() title: string = this.localizeService.decode(\"reuploadmodal.title\");\n\n  @Input() message: string = this.localizeService.decode(\"reuploadmodal.message\");\n  \n  @Input() data: any;\n  \n  @Input() submitText: string = this.localizeService.decode(\"reuploadmodal.import\");\n  \n  @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n  \n  @Input() type: ModalTypes = ModalTypes.warning;\n  \n  @Input() job: ScheduledJob;\n  \n  @ViewChild( 'myFile' )\n  fileRef: ElementRef;\n  \n  /*\n   * File uploader\n   */\n  uploader: FileUploader;\n  \n  errorMessage: string;\n  \n  /*\n   * Called on confirm\n   */\n  public onConfirm: Subject<any>;\n  \n  constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService, private eventService: EventService ) { }\n  \n  ngOnInit(): void {\n    this.onConfirm = new Subject();\n    \n    let options: FileUploaderOptions = {\n      queueLimit: 1,\n      removeAfterUpload: true,\n      url: acp + '/etl/reimport'\n    };\n    \n    this.uploader = new FileUploader( options );\n    this.uploader.onBuildItemForm = ( fileItem: any, form: any ) => {\n        form.append( 'json', JSON.stringify(this.job.configuration) );\n    };\n    this.uploader.onBeforeUploadItem = ( fileItem: any ) => {\n        this.eventService.start();\n    };\n    this.uploader.onCompleteItem = ( item: any, response: any, status: any, headers: any ) => {\n        this.fileRef.nativeElement.value = \"\";\n        this.eventService.complete();\n    };\n    this.uploader.onSuccessItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.onConfirm.next( this.data );\n      this.bsModalRef.hide();\n    };\n    this.uploader.onErrorItem = ( item: any, response: string, status: number, headers: any ) => {\n      this.error( JSON.parse( response ) );\n    }\n  }\n  \n  toString(data: any): string\n  {\n    return JSON.stringify(data);\n  }\n  \n  confirm(): void {\n    if ( this.uploader.queue != null && this.uploader.queue.length > 0 ) {\n      this.uploader.uploadAll();\n    }\n    else {\n      this.error( { message: this.localizeService.decode( 'io.missing.file' ), error: {} } );\n    }\n  }\n  \n  public error( err: any ): void {\n    console.log(\"ERROR\", err);\n  \n    // Handle error\n    if ( err !== null ) {\n      this.error = ( err.error.localizedMessage || err.error.message || err.message );\n    }\n  }\n}\n","<div class=\"modal-body\">\n\n  <div class=\"heading\">\n    <h3>{{title}}</h3>\n  </div>\n\n  <span *ngIf=\"errorMessage\">{{errorMessage}}</span>\n\n  <span>{{message}}</span>\n\n  <form *ngIf=\"job\" style=\"margin-top: 30px;\" #form=\"ngForm\">\n    <div class=\"form-group row\">\n      <label class=\"col-md-3 text-right\" for=\"file\">\n        <localize *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" key=\"io.shapefile\"></localize>\n        <localize *ngIf=\"job.configuration.formatType === 'EXCEL'\" key=\"io.spreadsheet\"></localize>\n      </label>\n      <div class=\"col-md-9\">\n        <input *ngIf=\"job.configuration.formatType === 'SHAPEFILE'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".zip\" required />\n        <input *ngIf=\"job.configuration.formatType === 'EXCEL'\" class=\"ghost-input\" #myFile name=\"file\" type=\"file\"\n          ng2FileSelect [uploader]=\"uploader\" accept=\".xlsx,.zip\" required />\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"button-holder\">\n        <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\"\n          style=\"padding: 4px 18px;\">\n          <span>{{cancelText}}</span>\n        </button>\n        <button type=\"button\" (click)=\"confirm()\"\n          [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n          aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n          <span>{{submitText}}</span>\n        </button>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, OnInit, Input, Output } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { DatePipe } from '@angular/common';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { RegistryService } from '../../service/registry.service';\nimport { TaskService } from '../../service/task.service';\nimport { LocalizationService } from '../../../shared/service/localization.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\nimport { GeoObjectType, GeoObjectOverTime, Task, PaginationPage } from '../../model/registry';\n\nimport { ToEpochDateTimePipe } from '../../pipe/to-epoch-date-time.pipe';\n\nimport { Observable } from 'rxjs';\n\ndeclare var acp: string;\n\n\n@Component( {\n    selector: 'task-viewer',\n    templateUrl: './task-viewer.component.html',\n    styleUrls: ['./task-viewer.component.css'],\n    providers: [DatePipe]\n} )\n\nexport class TaskViewerComponent implements OnInit {\n\n    @Input() geoObjectType: GeoObjectType;\n\n    inProgressTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    completedTasks: PaginationPage = {\n        count: 0,\n        pageNumber: 1,\n        pageSize: 10,\n        results: []\n    };\n    \n    message: string;\n    \n    isViewAllOpen: boolean = false;\n    \n    activeTimeCounter: number = 0;\n    completeTimeCounter: number = 0;\n    \n    pollingData: any;\n\n    constructor( private registryService: RegistryService,\n                 private taskService: TaskService,\n                 private localizeService: LocalizationService,\n                 private date: DatePipe,\n                 private toEpochDateTimePipe: ToEpochDateTimePipe,\n                 private authService: AuthService\n      ) {\n      //const day = this.forDate.getUTCDate();\n      //this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n      this.onInProgressTasksPageChange( 1 );\n      \n      ////\n      //\n      // We don't need polling on this page. It's better to save bandwidth for low resource environments.\n      //\n      ////\n\n      // this.pollingData = Observable.interval(1000).subscribe(() => {\n      //   this.activeTimeCounter++\n      //   this.completeTimeCounter++\n      \n      //   if (this.isViewAllOpen)\n      //   {\n      //     if (this.activeTimeCounter >= 4)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //     if (this.completeTimeCounter >= 7)\n      //     {\n      //       this.onCompletedTasksPageChange(this.completedTasks.pageNumber);\n            \n      //       this.completeTimeCounter = 0;\n      //     }\n      //   }\n      //   else\n      //   {\n      //     if (this.activeTimeCounter >= 2)\n      //     {\n      //       this.onInProgressTasksPageChange(this.inProgressTasks.pageNumber);\n            \n      //       this.activeTimeCounter = 0;\n      //     }\n      //   }\n      // });\n    }\n    \n    upper(str: string): string {\n      if (str != null)\n      {\n        return str.toUpperCase();\n      }\n      else\n      {\n        return \"\";\n      }\n    }\n    \n    onInProgressTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.inProgressTasks.pageSize, 'UNRESOLVED').then( page => {\n        this.inProgressTasks = page;\n      } );\n    }\n    \n    onCompletedTasksPageChange( pageNumber: any ): void {\n      this.message = null;\n\n      this.taskService.getMyTasks( pageNumber, this.completedTasks.pageSize, 'RESOLVED').then( page => {\n        this.completedTasks = page;\n      } );\n    }\n    \n    onCompleteTask(task: any): void {\n      // this.isViewAllOpen = true;\n    \n      this.taskService.completeTask(task.id).then( () => {\n        this.inProgressTasks.results.splice(this.inProgressTasks.results.indexOf(task), 1);\n        this.completedTasks.results.push(task);\n        // this.onCompletedTasksPageChange(1);\n      } );\n    }\n    \n    onMoveTaskToInProgress(task: any): void {\n      this.isViewAllOpen = true;\n    \n      this.taskService.setTaskStatus(task.id, 'UNRESOLVED').then( () => {\n        this.completedTasks.results.splice(this.completedTasks.results.indexOf(task), 1);\n        this.inProgressTasks.results.push(task);\n        this.onInProgressTasksPageChange(1);\n      } );\n    }\n    \n    onViewAllCompletedTasks(): void {\n      this.isViewAllOpen = true;\n      \n      this.onCompletedTasksPageChange(1);\n    }\n}\n","<div class=\"new-admin-design-main\">\n  <cgr-header></cgr-header>\n  \n  <div id=\"app-container\" class=\"container\">\n  \n    <message></message>\n\n    <div *ngIf=\"message != null\" class=\"alert alert-danger\" role=\"alert\">{{message}}</div>\n  \n    <h2>\n      <localize key=\"tasks.openTasksTitle\"></localize>\n    </h2>\n    <hr>\n  \n\t\t<div class=\"row\" *ngIf=\"inProgressTasks.results.length > 0\">\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\">\n\t        <div *ngFor=\"let task of inProgressTasks.results | paginate: { id: 'inProgressTasks', itemsPerPage: inProgressTasks.pageSize, currentPage: inProgressTasks.pageNumber, totalItems: inProgressTasks.count }\" class=\"panel panel-default\">\n\t          <div class=\"panel-heading\">\n\t            <h4>{{upper(task.title)}}</h4>\n\t          </div>\n\t          \n\t          <div class=\"panel-body\">\n\t            <div class=\"row\">\n\t             <div class=\"col-md-9\">\n\t              <label><localize key=\"tasks.taskMessage\"></localize></label>\n\t              <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n\t              <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span>{{task.createDate}}</span>\n\t             </div>\n\t             <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" checked id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                \n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" (click)=\"onCompleteTask(task)\" type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n\t             </div>\n\t            </div>\n\t          </div>\n\t        </div>\n\t        <div *ngIf=\"inProgressTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"inProgressTasks\" (pageChange)=\"onInProgressTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n      </div>\n\t\t</div>\n\t\t\n\t\t\n\t\t<div class=\"row\">\n\t\t<h2 class=\"col-md-9\">\n      <localize key=\"tasks.completedTasksTitle\"></localize>\n    </h2>\n    <button class=\"col-md-3\" style=\"margin-top:20px;\" type=\"submit\" (click)=\"onViewAllCompletedTasks()\" class=\"btn btn-default pull-right\" role=\"button\">\n      <localize key=\"tasks.viewCompletedTasksButton\"></localize>\n    </button>\n    </div>\n    <hr>\n  \n    <div class=\"row\" >\n      <div class=\"col-md-12\">\n        <div class=\"content-wrapper\" *ngIf=\"isViewAllOpen && completedTasks.results.length > 0\">\n          <div *ngFor=\"let task of completedTasks.results | paginate: { id: 'completedTasks', itemsPerPage: completedTasks.pageSize, currentPage: completedTasks.pageNumber, totalItems: completedTasks.count }\" class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h4>{{upper(task.title)}}</h4>\n            </div>\n            \n            <div class=\"panel-body\">\n              <div class=\"row\">\n               <div class=\"col-md-9\">\n                <label><localize key=\"tasks.taskMessage\"></localize></label>\n                <p style=\"margin-bottom:20px;\">{{task.msg}}</p>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.createDateLabel\"></localize></label><span style=\"margin-right:30px;\">{{task.createDate}}</span>\n                <label style=\"margin-right:20px;\"><localize key=\"tasks.completeDateLabel\"></localize></label><span>{{task.completedDate}}</span>\n               </div>\n               <div class=\"col-md-3\" style=\"min-height: 90px; display: flex; align-items: center;\">\n\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"height:auto;\" type=\"radio\" (click)=\"onMoveTaskToInProgress(task)\" id=\"{{task.id}}-inProgress\" name=\"{{task.id}}-inProgress\" value=\"true\">\n                  <span><localize key=\"tasks.open\"></localize></span>\n                </label>\n                <label class=\"radio-inline radio\">\n                  <input class=\"inline-radio-input\" style=\"margin-left:15px;height:auto;\" checked type=\"radio\" id=\"{{task.id}}-completed\" name=\"{{task.id}}-completed\" value=\"false\">\n                  <span><localize key=\"tasks.complete\"></localize></span>\n                </label>\n               </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"completedTasks.results.length > 0\" class=\"solid-table-footer\">\n            <pagination-controls id=\"completedTasks\" (pageChange)=\"onCompletedTasksPageChange($event)\"></pagination-controls>\n          </div>\n        </div>\n        <div class=\"content-wrapper\" *ngIf=\"completedTasks.results.length === 0 && isViewAllOpen\">\n          <p style=\"font-style:italic;color:grey;\"><localize key=\"tasks.no.completed.tasks.message\"></localize></p>\n        </div>\n      </div>\n    </div>\n\n\n\t</div>\n</div>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { GeoObjectOverTime, GeoObjectType } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-create-geo-object',\n    templateUrl: './detail.component.html',\n    styleUrls: ['./crtable-detail-create-geo-object.css'],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class CreateUpdateGeoObjectDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    preGeoObject: GeoObjectOverTime = null;\n\n    postGeoObject: GeoObjectOverTime = null;\n\n    geoObjectType: GeoObjectType = null;\n\n    readOnly: boolean = true;\n\n    @ViewChild( \"attributeEditor\" ) attributeEditor;\n\n    @ViewChild( \"geometryEditor\" ) geometryEditor;\n\n    bsModalRef: BsModalRef;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;\n\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.postGeoObject = this.action.geoObjectJson;\n        this.geoObjectType = this.action.geoObjectType;\n\n        if ( this.isNew() ) {\n            this.preGeoObject = this.postGeoObject;\n        }\n\n        this.onSelect( this.action );\n    }\n\n    isNew(): boolean {\n        return ( this.action.actionType === \"net.geoprism.registry.action.geoobject.CreateGeoObjectAction\" );\n    }\n\n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n        action.geoObjectJson = this.attributeEditor.getGeoObject();\n\n        if ( this.geometryEditor != null ) {\n            action.geoObjectJson.geometry = this.geometryEditor.saveDraw().geometry;\n        }\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    onSelect( action: AbstractAction ) {\n\n        // There are multiple ways we could show a diff of an object.\n        //\n        // This line will show a diff only when a person is typing so as to show the\n        // change they are creating.\n        //\n        // The method below (getGeoObjectByCode) will compare what is in the database\n        // at that time with the change request. This will only track state compared to\n        // what is currently in the database which isn't necessarily the original change.\n        //\n        // A third option which is NOT implemented yet would store the state of a geoobject\n        // (original and target) with the change request so as to manage state at time of\n        // the change request submission.\n        //\n        // Display diff when a user is changing a value\n        // this.preGeoObject = JSON.parse(JSON.stringify(this.postGeoObject));\n\n        // Display diff of what's in the database\n        if (\n            this.action.actionType === \"net.geoprism.registry.action.geoobject.UpdateGeoObjectAction\"\n            //    && typeof this.postGeoObject.properties.createDate !== 'undefined'\n        ) {\n            this.registryService.getGeoObjectOverTime( this.postGeoObject.attributes.code, this.geoObjectType.code ).then( geoObject => {\n                this.preGeoObject = geoObject;\n\n            } ).catch(( err: HttpErrorResponse ) => {\n                console.log( \"Error\", err );\n                this.error( err );\n            } );\n        }\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( true );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n            if ( this.geometryEditor != null ) {\n                this.geometryEditor.enableEditing( false );\n            }\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n\n    <div class=\"heading\">\n        <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n\t  </div>\n    \n    <div class=\"detail-content\">\n      <div>\n        <label class=\"detail-label\">GeoObjectType : </label>\n        <label class=\"detail-value\">{{action.geoObjectType.code}}</label>\n      </div>\n    \n      <div>\n        <localize key=\"masterlist.forDate\"></localize>\n        <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n      </div>    \n    \n        <!-- \n\t  <label class=\"detail-label\">Label : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.displayLabel\">\n\t  \n\t  <label class=\"detail-label\">Code : </label><input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.geoObjectJson.properties.code\">\n\t  -->\n\n        <geoobject-shared-attribute-editor \n          #attributeEditor\n          *ngIf=\"preGeoObject\"\n          [readOnly]=\"readOnly\"\n          [geoObjectType]=\"geoObjectType\"\n          [postGeoObject]=\"postGeoObject\"\n          [preGeoObject]=\"preGeoObject\"\n          [forDate]=\"forDate\"\n          [isGeometryInlined]=\"true\">\n        </geoobject-shared-attribute-editor>\n\n<!-- \n\t      <geoobject-editor-map #geometryEditor *ngIf=\"this.preGeoObject != null && this.postGeoObject != null && this.geoObjectType.isGeometryEditable\" [readOnly]=\"readOnly || !geoObjectType.isGeometryEditable\" [postGeoObject]=\"this.postGeoObject\" [preGeoObject]=\"this.preGeoObject\" [geoObjectType]=\"this.geoObjectType\" [isNew]=\"isNew()\"></geoobject-editor-map>\n -->\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\n\nimport { AddChildAction } from '../../../../model/crtable';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'crtable-detail-add-remove-child',\n    templateUrl: './detail.component.html',\n    styleUrls: []\n} )\nexport class AddRemoveChildDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: AddChildAction;\n\n    original: AddChildAction;\n\n    readOnly: boolean = true;\n\n\n    private bsModalRef: BsModalRef;\n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService ) {\n\n    }\n\n    ngOnInit(): void {\n        this.original = Object.assign( {}, this.action );\n    }\n\n    applyAction() {\n        this.changeRequestService.applyAction( this.action ).then( response => {\n            this.original = Object.assign( {}, this.action );\n\n            this.unlockAction();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n\n            this.action = this.original;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n\n    onSelect( action: AddChildAction ) {\n        this.action = action;\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    <div class=\"detail-content\">\n\n        <label class=\"detail-label\">Child UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childId\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Child TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.childTypeCode\" [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent UID : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentId\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Parent TypeCode : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.parentTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">Hierarchy Code : </label>\n        <input class=\"detail-value\" type=\"text\" [(ngModel)]=\"action.hierarchyTypeCode\"  [disabled]=\"readOnly\">\n\n        <label class=\"detail-label\">\n            <localize key=\"change.request.status\"></localize> :\n        </label>\n        <select style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=action.approvalStatus   [disabled]=\"readOnly\">\n            <option value=\"REJECTED\">\n                <localize key=\"change.request.status.rejected\"></localize>\n            </option>\n            <option value=\"ACCEPTED\">\n                <localize key=\"change.request.status.accepted\"></localize>\n            </option>\n            <option value=\"PENDING\">\n                <localize key=\"change.request.status.pending\"></localize>\n            </option>\n        </select>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"  [disabled]=\"readOnly\"></textarea>\n        </div>\n        \n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n        \n    </div>\n</div>","import { GeoObjectOverTime, HierarchyOverTime } from './registry';\n\nexport class ChangeRequest {\n  oid: string;\n  createdBy: string;\n  createDate: Date;\n  approvalStatus: string;\n  statusCode: string;\n  total: number;\n  pending: number;\n}\n\nexport class AbstractAction {\n  approvalStatus: string;\n  createActionDate: Date;\n  label: string;\n  oid: string;\n  actionType: string;\n  actionLabel: string;\n}\n\nexport class UpdateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n  geoObjectJson: GeoObjectOverTime;\n}\n\nexport class AddChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyTypeCode: string;\n  contributorNotes: string;\n  maintainerNotes: string;\n}\n\nexport class RemoveChildAction extends AbstractAction {\n  childId: string;\n  childTypeCode: string;\n  parentId: string;\n  parentTypeCode: string;\n  hierarchyCode: string;\n}\n\nexport class GovernanceStatus {\n  key: string;\n  label: string;\n}\n\nexport class PageEvent {\n  type:string;\n  data:any;\n}\n\nexport class SetParentAction extends AbstractAction {\n  childCode: string;\n  childTypeCode: string;\n  json: HierarchyOverTime[];\n}\n\n","import { Input, Component, OnInit, OnDestroy, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef, ViewEncapsulation, HostListener } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Observable } from 'rxjs';\n\nimport { HierarchyOverTime } from '../../../../model/registry';\nimport { AbstractAction } from '../../../../model/crtable';\n\nimport { RegistryService } from '../../../../service/registry.service';\nimport { ChangeRequestService } from '../../../../service/change-request.service';\n\nimport { ErrorModalComponent } from '../../../../../shared/component/modals/error-modal.component';\nimport { ComponentCanDeactivate } from \"../../../../../shared/service/pending-changes-guard\";\n\n\nimport { ActionDetailComponent } from '../action-detail-modal.component';\n\ndeclare var acp: any;\ndeclare var $: any;\n\n@Component( {\n\n    selector: 'set-parent-detail',\n    templateUrl: './set-parent-detail.component.html',\n    styleUrls: [],\n    encapsulation: ViewEncapsulation.None\n} )\nexport class SetParentDetailComponent implements ComponentCanDeactivate, ActionDetailComponent {\n\n    @Input() action: any;\n\n    hierarchies: HierarchyOverTime[] = [];\n    readOnly: boolean = true;\n\n    bsModalRef: BsModalRef;\n    \n    /*\n     * Date in which the modal is shown for\n     */\n    dateStr: string = null;\n\n    /*\n     * Date in which the modal is shown for\n     */\n    forDate: Date = null;    \n\n    constructor( private router: Router, private changeRequestService: ChangeRequestService, private modalService: BsModalService, private registryService: RegistryService ) {\n        this.forDate = new Date();\n\n        const day = this.forDate.getUTCDate();\n        this.dateStr = this.forDate.getUTCFullYear() + \"-\" + ( this.forDate.getUTCMonth() + 1 ) + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n    ngOnInit(): void {\n\n        this.hierarchies = this.action.json;\n\n        this.onSelect( this.action );\n    }\n\n    applyAction() {\n        var action = JSON.parse( JSON.stringify( this.action ) );\n\n        this.changeRequestService.applyAction( action ).then( response => {\n            this.endEdit();\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n    \n    handleDateChange(): void {\n        this.forDate = new Date( Date.parse( this.dateStr ) );\n    }    \n\n    onSelect( action: AbstractAction ) {\n\n    }\n\n    // Big thanks to https://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page\n    @HostListener( 'window:beforeunload' )\n    canDeactivate(): Observable<boolean> | boolean {\n        if ( !this.readOnly ) {\n            //event.preventDefault();\n            //event.returnValue = 'Are you sure?';\n            //return 'Are you sure?';\n\n            return false;\n        }\n\n        return true;\n    }\n\n    afterDeactivate( isDeactivating: boolean ) {\n        if ( isDeactivating && !this.readOnly ) {\n            this.unlockActionSync();\n        }\n    }\n\n    startEdit(): void {\n        this.lockAction();\n    }\n\n    public endEdit(): void {\n        this.unlockAction();\n    }\n\n    lockAction() {\n        this.changeRequestService.lockAction( this.action.oid ).then( response => {\n            this.readOnly = false;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    unlockAction() {\n        this.changeRequestService.unlockAction( this.action.oid ).then( response => {\n            this.readOnly = true;\n        } ).catch(( err: HttpErrorResponse ) => {\n            this.error( err );\n        } );\n    }\n\n    // https://stackoverflow.com/questions/4945932/window-onbeforeunload-ajax-request-in-chrome\n    unlockActionSync() {\n        $.ajax( {\n            url: acp + '/changerequest/unlockAction',\n            method: \"POST\",\n            data: { actionId: this.action.oid },\n            success: function( a ) {\n\n            },\n            async: false\n        } );\n    }\n    // https://www.tivix.com/blog/making-promises-in-a-synchronous-manner\n    // unlockActionSync()\n    // {\n    //   console.log(\"UnlockActionSync\", \"Checkpoint 1\");\n    //\n    //   let makeMeLookSync = fn => {\n    //     console.log(\"UnlockActionSync\", \"Checkpoint 2\");\n    //\n    //     let iterator = fn();\n    //     let loop = result => {\n    //       console.log(\"UnlockActionSync\", \"Checkpoint OuterSnycLoop\", result.done, result.value);\n    //\n    //       !result.done && result.value.then(res => {\n    //         console.log(\"UnlockActionSync\", \"Checkpoint InnerSnycLoop\");\n    //         loop(iterator.next(res));\n    //       })\n    //     };\n    //\n    //     console.log(\"UnlockActionSync\", \"Checkpoint Loop Start\", iterator);\n    //     loop(iterator.next());\n    //   };\n    //\n    //   var crs = this.changeRequestService;\n    //   var actionOid = this.action.oid;\n    //\n    //   makeMeLookSync(function* () {\n    //     console.log(\"UnlockActionSync Checkpoint\", \"Start MakeMeLookSync\");\n    //\n    //     yield crs.unlockAction(actionOid).then( response => {\n    //       this.readOnly = true;\n    //     } ).catch(( err: HttpErrorResponse ) => {\n    //       this.error( err );\n    //     } );\n    //\n    //     console.log(\"UnlockActionSync Checkpoint\", \"End MakeMeLookSync\");\n    //   });\n    // }\n\n    public error( err: HttpErrorResponse ): void {\n        console.log( err );\n\n        // Handle error\n        if ( err !== null ) {\n            // TODO: add error modal\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n\n    }\n\n}\n","<div class=\"crtable-detail-container\">\n    <h3 class=\"action-detail-header\">{{action.actionLabel}}</h3>\n    \n    <div class=\"detail-content\">\n        <div>\n          <localize key=\"masterlist.forDate\"></localize>\n          <input type=\"date\" [(ngModel)]=\"dateStr\" (change)=\"handleDateChange()\" name=\"dateStr\" />\n        </div>    \n    \n        <cascading-geo-selector #parentSelector \n          [hierarchies]=\"this.hierarchies\"\n          [forDate]=\"this.forDate\">\n        </cascading-geo-selector>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.status\"></localize> :\n            </label>\n            <select [disabled]=\"readOnly\" style=\"float:none;\" [ngClass]=\"{'status-rejected': action.approvalStatus === 'REJECTED', 'status-accepted': action.approvalStatus === 'ACCEPTED', 'status-pending': action.approvalStatus === 'PENDING'}\" [(ngModel)]=\"action.approvalStatus\">\n                <option value=\"REJECTED\">\n                    <localize key=\"change.request.status.rejected\"></localize>\n                </option>\n                <option value=\"ACCEPTED\">\n                    <localize key=\"change.request.status.accepted\"></localize>\n                </option>\n                <option value=\"PENDING\">\n                    <localize key=\"change.request.status.pending\"></localize>\n                </option>\n            </select>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.contributorNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.contributorNotes\"></textarea>\n        </div>\n\n        <div>\n            <label class=\"detail-label\">\n                <localize key=\"change.request.action.detail.maintainerNotes\"></localize> :\n            </label>\n            <textarea [disabled]=\"readOnly\" style=\"width: 100%;border-radius: 8px;height: 70px;\" class=\"detail-value\" [(ngModel)]=\"action.maintainerNotes\"></textarea>\n        </div>\n\n        <div class=\"button-holder\">\n          <button *ngIf=\"readOnly\" (click)=\"startEdit()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.edit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"applyAction()\" class=\"btn btn-primary detail-accept\">\n            <localize key=\"modal.button.submit\"></localize>\n          </button>\n          <button *ngIf=\"!readOnly\" (click)=\"endEdit()\" class=\"btn btn-default detail-reject\">\n            <localize key=\"modal.button.cancel\"></localize>\n          </button>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ViewChild, ElementRef, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { ErrorModalComponent } from '../../../shared/component/modals/error-modal.component';\n\nimport { IOService } from '../../service/io.service';\nimport { AuthService } from '../../../shared/service/auth.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'data-export',\n    templateUrl: './data-export.component.html',\n    styleUrls: []\n} )\nexport class DataExportComponent implements OnInit {\n\n    /*\n     * List of geo object types from the system\n     */\n    types: { label: string, code: string }[]\n\n    /*\n     * Currently selected code\n     */\n    code: string = null;\n\n    /*\n     * List of the hierarchies this type is part of\n     */\n    hierarchies: { label: string, code: string }[] = [];\n\n    /*\n     * Currently selected hierarchy\n     */\n    hierarchy: string = null;\n\n    /*\n     * Currently selected format\n     */\n    format: string = null;\n\n\n    /*\n     * Reference to the modal current showing\n     */\n    bsModalRef: BsModalRef;\n\n\n    constructor( private service: IOService, private modalService: BsModalService, private authService: AuthService ) { }\n\n    ngOnInit(): void {\n        this.service.listGeoObjectTypes( false ).then( types => {\n        \n            //this.types = types;\n            \n            var myOrgTypes = [];\n            for (var i = 0; i < types.length; ++i)\n            {\n              if (this.authService.isOrganizationRA(types[i].orgCode))\n              {\n                myOrgTypes.push(types[i]);\n              }\n            }\n            this.types = myOrgTypes;\n\n        } ).catch(( err: HttpErrorResponse) => {\n            this.error( err );\n        } );\n    }\n\n    onChange( code: string ): void {\n\n        if ( code != null && code.length > 0 ) {\n            this.service.getHierarchiesForType( code, false ).then( hierarchies => {\n                this.hierarchies = hierarchies;\n                this.hierarchy = null;\n            } ).catch(( err: HttpErrorResponse) => {\n                this.error( err );\n            } );\n        }\n        else {\n            this.hierarchies = [];\n            this.hierarchy = null;\n        }\n\n    }\n\n    onExport(): void {\n\n        if ( this.format == 'SHAPEFILE' ) {\n            window.location.href = acp + '/shapefile/export-shapefile?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n        else if ( this.format == 'EXCEL' ) {\n            window.location.href = acp + '/excel/export-spreadsheet?type=' + this.code + '&hierarchyType=' + this.hierarchy;\n        }\n    }\n\n    public error( err: HttpErrorResponse ): void {\n        // Handle error\n        if ( err !== null ) {\n            this.bsModalRef = this.modalService.show( ErrorModalComponent, { backdrop: true } );\n            this.bsModalRef.content.message = ( err.error.localizedMessage || err.error.message || err.message );\n        }\n    }\n}\n","<!-- <div class=\"new-admin-design-main\"> -->\n    <!-- <cgr-header></cgr-header> -->\n    <loading-bar></loading-bar>\n\n    <!-- <div id=\"app-container\" class=\"container\">\n        <div class=\"heading text-center\">\n            <h2>\n                <localize key=\"io.export.title\"></localize>\n            </h2>\n            <p class=\"lead\">\n                <localize key=\"io.export.description\"></localize>\n            </p>\n        </div> -->\n\n        <!-- <div class=\"row\">\n            <div class=\"col-md-2\"></div>\n            <div class=\"col-md-8\" *ngIf=\"types\"> -->\n                <form #form=\"ngForm\" *ngIf=\"types\">\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"code\">\n                            <localize key=\"io.geoObjectType\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"code\" name=\"code\" class=\"select-area\" [(ngModel)]=\"code\" (change)=\"onChange($event.target.value)\"\n                                required>\n                                <option></option>\n                                <option *ngFor=\"let type of types\" [value]=\"type.code\">{{type.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\" *ngIf=\"hierarchies.length > 0\">\n                        <label class=\"col-sm-3 text-right\">\n                            <localize key=\"io.modal.hierarchy\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select name=\"hierarchy\" class=\"select-area\" [(ngModel)]=\"hierarchy\" required>\n                                <option></option>\n                                <option *ngFor=\"let hierarchy of hierarchies\" [value]=\"hierarchy.code\">{{hierarchy.label}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <label class=\"col-md-3 text-right\" for=\"format\">\n                            <localize key=\"io.format\"></localize>\n                        </label>\n                        <div class=\"col-md-9\">\n                            <select id=\"format\" name=\"format\" class=\"select-area\" [(ngModel)]=\"format\" required>\n                                <option></option>\n                                <option value=\"EXCEL\">\n                                    <localize key=\"io.spreadsheet\"></localize>\n                                </option>\n                                <option value=\"SHAPEFILE\">\n                                    <localize key=\"io.shapefile\"></localize>\n                                </option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"form-group row\">\n                        <div class=\"col-md-12 text-right\">\n                            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\" (click)=\"onExport()\">\n                                <localize key=\"io.export\"></localize>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            <!-- </div>\n            <div class=\"col-md-2\"></div> -->\n        <!-- </div>\n    </div>\n</div> -->\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { HierarchyNode } from '../model/hierarchy';\nimport { GeoObjectType } from '../model/registry';\n\n@Pipe({\n  name: 'geoobjecttype',\n  pure: false\n})\nexport class GeoObjectTypePipe implements PipeTransform {\n  transform(items: GeoObjectType[], filter: HierarchyNode[]): any {\n\t  if (!items || !filter) {\n          return items;\n      }\n\t  \n\t  let unassignedGeoObjTypes:string[] = [];\n      this.buildUnassignedGeoObjTypes(filter, unassignedGeoObjTypes)\n      \n      // filter items array, items which match and return true will be\n      // kept, false will be filtered out\n      return items.filter(item => unassignedGeoObjTypes.indexOf(item.code) === -1);\n  }\n  \n  buildUnassignedGeoObjTypes(filter: HierarchyNode[], unassignedGeoObjTypes: string[]): void{\n\t  filter.forEach(f => {\n\t\t  this.processHierarchyNodes(f, unassignedGeoObjTypes);\n\t  })\n  }\n  \n  processHierarchyNodes(node: HierarchyNode, unassignedGeoObjTypes: string[]){\n\t  unassignedGeoObjTypes.push(node.geoObjectType)\n\t  \n\t  node.children.forEach(child => {\n\t\t  this.processHierarchyNodes(child, unassignedGeoObjTypes);\n\t  })\n  }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from '../../shared/service/event.service';\n\nimport { AllLocaleInfo } from '../model/localization-manager';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationManagerService {\n\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n\n    getNewLocaleInfo(): Promise<AllLocaleInfo> {\n        return this.http\n            .get<AllLocaleInfo>( acp + '/localization/getNewLocaleInformation' )\n            .toPromise();\n    }\n\n    installLocale( language: string, country: string, variant: string ): Promise<void> {\n        let params: HttpParams = new HttpParams();\n\n        if ( language != null ) {\n            params = params.set( 'language', language );\n        }\n\n        if ( country != null ) {\n            params = params.set( 'country', country );\n        }\n\n        if ( variant != null ) {\n            params = params.set( 'variant', variant );\n        }\n\n        return this.http\n            .get<void>( acp + '/localization/installLocale', { params: params } )\n            .toPromise();\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\n\r\nimport { GeoJSONSource } from 'mapbox-gl';\r\n\r\nimport * as mapboxgl from 'mapbox-gl';\r\n\r\ndeclare var acp: any;\r\n\r\n@Injectable()\r\nexport class MapService {\r\n\r\n    constructor( private http: HttpClient ) {\r\n        ( mapboxgl as any ).accessToken = 'pk.eyJ1IjoidGVycmFmcmFtZSIsImEiOiJjanZxNTFnaTYyZ2RuNDlxcmNnejNtNjN6In0.-kmlS8Tgb2fNc1NPb5rJEQ';\r\n    }\r\n\r\n    features(): Promise<{ features: GeoJSONSource, bbox: number[] }> {\r\n        let params: HttpParams = new HttpParams();\r\n\r\n        return this.http\r\n            .get<{ features: GeoJSONSource, bbox: number[] }>( acp + '/project/features', { params: params } )\r\n            .toPromise();\r\n    }\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HierarchyComponent } from './component/hierarchy/hierarchy.component';\nimport { SubmitChangeRequestComponent } from './component/submit-change-request/submit-change-request.component';\nimport { MasterListManagerComponent } from './component/master-list/master-list-manager.component';\nimport { MasterListComponent } from './component/master-list/master-list.component';\nimport { MasterListViewComponent } from './component/master-list/master-list-view.component';\nimport { DataPageComponent } from './component/data-page/data-page.component';\nimport { ChangeRequestPageComponent } from './component/change-request-page/change-request-page.component';\nimport { ScheduledJobsComponent } from './component/scheduled-jobs/scheduled-jobs.component';\nimport { JobComponent } from './component/scheduled-jobs/job.component';\nimport { TaskViewerComponent } from './component/task-viewer/task-viewer.component';\n\nimport { MaintainerGuard, ContributerGuard, AuthGuard } from '../shared/service/guard.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'hierarchies',\n        component: HierarchyComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'data',\n        component: DataPageComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'change-requests',\n        component: ChangeRequestPageComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'master-lists',\n        component: MasterListManagerComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'scheduled-jobs',\n        component: ScheduledJobsComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'job/:oid',\n        component: JobComponent,\n        canActivate: [MaintainerGuard]\n    },\n    {\n        path: 'master-list/:oid/:published',\n        component: MasterListComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'master-list-view/:oid',\n        component: MasterListViewComponent,\n        canActivate: [AuthGuard]\n    },\n    {\n        path: 'change-request',\n        component: SubmitChangeRequestComponent,\n        canActivate: [ContributerGuard]\n    },\n    {\n        path: 'tasks',\n        component: TaskViewerComponent,\n        canActivate: [MaintainerGuard]\n    }\n];\n\n@NgModule( {\n    imports: [RouterModule.forChild( routes )],\n    exports: [RouterModule],\n    providers: [\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n    ]\n} )\nexport class RegistryRoutingModule { }"],"sourceRoot":""}