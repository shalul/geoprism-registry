{"version":3,"sources":["webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html","webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/component/index.ts","webpack:///./src/app/shared/service/date.service.ts","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/service/index.ts","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.html","webpack:///./src/app/shared/service/external-system.service.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/service/organization.service.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/modals/generic-modal.component.ts","webpack:///./src/app/shared/component/modals/generic-modal.component.html","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/shared/component/date-text/date-text.component.ts","webpack:///./src/app/shared/component/date-text/date-text.component.html","webpack:///./src/app/shared/component/form-fields/date-field/date-field.component.ts","webpack:///./src/app/shared/component/form-fields/date-field/date-field.component.html","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/shared/component/error-handler/error-handler.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/registry/model/constants.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.html","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/component/generic-table/generic-table.component.ts","webpack:///./src/app/shared/component/generic-table/generic-table.component.html","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/model/profile.ts","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/model/generic-table.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html"],"names":["service","showIndicator","ngOnInit","this","registerListener","ngOnDestroy","deregisterListener","start","complete","LoadingBarComponent","Component","selector","templateUrl","styleUrls","user","loggedIn","userName","roles","roleDisplayLabels","version","installedLocales","cookie","get","check","length","cookieData","cookieDataJSON","JSON","parse","buildFromCookieJson","loadLocales","buildRolesFromCookie","replaceAll","i","role","RoleBuilder","buildFromRoleName","push","isLoggedIn","afterLogIn","logInResponse","localStorage","clear","setLocales","afterLogOut","sessionStorage","removeItem","storageLocales","window","getItem","locales","setItem","stringify","removeUser","isAdmin","isSRA","isRA","isMaintainer","isRM","isContributer","isRC","isContributerOnly","hasExactRole","roleType","type","RegistryRoleType","SRA","RA","roleName","indexOf","RM","isOrganizationRA","orgCode","isGeoObjectTypeRM","gotCode","geoObjectTypeCode","isGeoObjectTypeOrSuperRM","got","allowRoleSuper","organizationCode","code","superTypeCode","isGeoObjectTypeRC","RC","isGeoObjectTypeOrSuperRC","isRCOnly","getMyOrganizations","orgCodes","__getRoleFromRoleName","nameArr","split","getUsername","getRoles","getRoleDisplayLabelsArray","getRoleDisplayLabels","str","displayLabel","getVersion","getLocales","addLocale","locale","exists","tag","removeLocale","splice","console","log","AuthService","Injectable","colors","measureStrength","pass","score","letters","variations","digits","test","lower","upper","nonWords","variationCount","Math","trunc","getColor","idx","col","ngOnChanges","changes","password","currentValue","setBarColors","c","PasswordStrengthBarComponent","count","_n","passwordToCheck","Input","transform","value","decode","LocalizePipe","Pipe","name","error","message","onError","onMessage","msg","MessageComponent","styles","components","ErrorHandler","CgrHeaderComponent","LocalizeComponent","ErrorMessageComponent","ConfirmModalComponent","GenericModalComponent","ErrorModalComponent","ModalStepIndicatorComponent","SuccessModalComponent","ProfileComponent","ProgressBarComponent","localizationService","overlapMessage","severity","ConflictType","TIME_RANGE","mergeContiguousMessage","gapMessage","outsideExistsMessage","OUTSIDE_EXISTS","missingReference","MISSING_REFERENCE","startDateLaterEndDate","parentDoesNotExist","invalidParent","getPresentDate","Date","formatDateForDisplay","date","PRESENT","localize","getDateString","getDateFromDateString","year","getFullYear","month","getMonth","dt","getDate","checkRanges","attributeType","ranges","hasConflict","forEach","range","conflictMessages","Set","delete","filtered","filter","isDelete","j","h1","startDate","endDate","s1","e1","dateEndBeforeStart","add","h2","s2","e2","dateRangeOverlaps","getTime","addDay","areValuesEqual","sort","current","next","hasGap","between","dTest","dStart","dEnd","after","in1","in2","amount","plus1","setDate","votArr","a","b","checkExistRanges","existEntries","filteredExists","inRange","dateRangeOutside","validateDate","required","allowFutureDates","valid","today","isNaN","DateService","registry","getLocale","create","localizedValue","localeValues","toString","remove","bundle","key","localization","index","lastIndexOf","temp","slice","LocalizationService","listeners","listener","indexOfItem","setTimeout","EventService","modalService","profileService","enableBusinessData","context","contextPath","isContributor","defaultLocaleView","found","shouldShowMenuItem","item","logout","location","href","setLocale","then","reload","account","profile","bsModalRef","show","backdrop","class","content","router","canActivate","route","state","navigate","AdminGuard","MaintainerGuard","ContributerGuard","AuthGuard","authService","_profile","oid","username","firstName","lastName","email","changePassword","getRolesForUser","onSubmit","apply","hide","onChangePassword","getRolesArray","cancel","unlock","services","ExternalSystemService","ModalStepIndicatorService","OrganizationService","PendingChangesGuard","ProfileService","ProgressService","SessionService","LocaleValue","lService","label","isDefaultLocale","language","country","variant","LocaleView","Organization","ExternalSystem","OAuthServer","SystemCapabilities","PageResult","getValue","localeToString","len","lv","populate","lv1","lv2","lv2lv","lv1lv","LocalizedValue","RegistryRole","roleSplit","roleSuffix","AC","modalStepIndicatorService","stepSubscription","modalStepChange","subscribe","stepConfig","unsubscribe","prog","total","description","progress","http","eventService","getExternalSystems","pageNumber","pageSize","params","HttpParams","set","pipe","finalize","toPromise","getExternalSystem","applyExternalSystem","system","headers","HttpHeaders","post","getSystemCapabilities","removeExternalSystem","modalStepChangedSource","Subject","asObservable","getStepConfig","setStepConfig","config","getStep","step","setStep","getOrganizations","updateOrganization","json","newOrganization","removeOrganization","canDeactivate","component","confirmRet","confirm","afterDeactivate","userOID","login","response","localizeService","submitText","cancelText","ModalTypes","warning","onConfirm","onCancel","data","GenericButton","buttons","init","onClick","button","shouldClose","registryService","refreshPromise","refresh","waitOnTypes","types","Promise","resolve","reject","ready","getGeoObjectTypes","catch","e","getTypeByCode","findIndex","getTypes","GeoObjectTypeCache","TreeEntity","children","addChild","term","Term","GeoObject","attributes","getAttribute","attr","getGeoObjectTypeTermAttributeOptions","geoObjectType","termAttributeCode","attrOpts","rootTerm","removeStatuses","GeoObjectType","Task","getVotAtDate","attrCode","retVot","time","isChangeOverTime","values","vot","Array","isArray","GeoObjectOverTime","ConflictMessage","ValueOverTime","AttributeOverTime","isDefault","unique","AttributeType","isChange","termOptions","setRootTerm","AttributeTermType","precision","scale","AttributeDecimalType","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","AbstractScheduledJob","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","HierarchyOverTime","HierarchyOverTimeEntry","HierarchyOverTimeEntryParent","SynchronizationConfig","OrgSyncInfo","ExportScheduledJob","formattedDate","DateTextComponent","title","bsDatepickerConfig","changeDetectorRef","dateService","allowInfinity","inputName","idGenerator","classNames","customStyles","localizeLabelKey","disable","placement","oldDate","placeholder","valueChange","EventEmitter","change","returnFocusToInput","valueIsPresent","validChange","dateInputFormat","setValue","parseInt","_value","getUTCFullYear","getUTCMonth","getUTCDate","setInvalid","S4","random","substring","isEqual","date1","date2","toggleInfinity","emit","toggle","event","validity","DateFieldComponent","BsDatepickerDirective","datepicker","ViewChild","static","Output","arr","newArray","formatDateString","dateObj","day","aStart","aEnd","bStart","bEnd","end","val1","val2","coordinates","localeValue","getValueAtLocale","parents","Object","entries","parentData","parentData2","geoObject","properties","parseFloat","arrayMove","oldIndex","newIndex","k","undefined","createColumn","attribute","readonly","autocomplete","column","headerType","header","field","sortable","rowspan","colspan","text","onComplete","createColumns","list","showInvalid","displayInvalidColumn","columns","mainGroups","subGroups","orderedArray","isMember","geospatialMetadata","visibility","group","subgroup","getMessageFromError","err","unspecified","localizedMessage","includes","showErrorAsDialog","HttpErrorResponse","status","forRoot","ngModule","SharedModule","providers","CookieService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","ModalModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","BsDatepickerModule","TableModule","SliderModule","DropdownModule","MultiSelectModule","ButtonModule","AutoCompleteModule","ConvertKeyLabel","BooleanFieldComponent","OnlyNumber","MustMatchDirective","PhonePipe","GenericTableComponent","NgModule","imports","declarations","exports","entryComponents","ActionTypes","GovernanceStatus","GeoObjectTypeModalStates","ImportStrategy","ChangeType","OverlayerIdentifier","LAYER_PANEL","FEATURE_PANEL","SEARCH_PANEL","VISUALIZER_PANEL","LIST_MODAL","page","resultSet","pageConfig","initialState","click","onLoadEvent","paginator","scrollable","first","loading","booleanOptions","hasFilter","multiSortMeta","loadColumns","onPageChange","baseZIndex","ngAfterViewInit","filters","keys","metadata","matchMode","setup","dates","finally","row","getColumnType","columnType","handleFilter","el","onKeyDown","keyCode","ctrlKey","shiftKey","preventDefault","Directive","HostListener","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors","validate","provide","NG_VALIDATORS","useExisting","multi","Profile","args","formatNumber","phone","GenericTableConfig","GenericTableColumn","TableEvent","TableColumnSetup","replace"],"mappings":"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CA,OACA,M,4CC+FU,6BACE,6BACF,kB,sBAiDJ,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,4BACE,6BACF,iBACF,iBACF,kB,mDAQM,+BACE,oG,uBADF,iB,KAAsD,+E,mDAEtD,+BACE,oG,uBADF,iB,KAAqD,0D,yBAR3D,4BACE,uBAEA,4BAEE,6BACE,iCAEA,iCAEF,iBACF,iBACF,kB,8BAN4B,+DAEA,+D,sBA+BtB,6BACE,6BACF,kB,mDA5BN,0BACE,4BACE,4BACE,4BACE,6BACF,iBACF,iBACA,4BACE,6BACE,kCAAuB,8GAAvB,iBAEA,0CAEF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,8BACF,iBACA,gCAGF,iBACF,iBACF,iB,qDAtB+B,2DAEA,mEAenB,4E,yBA0BF,yBACE,YACF,kB,uCADE,qE,qBAEF,oB,qBAGA,oB,yBAIA,yBACE,YACF,kB,uCADE,qE,yBAEF,yBACE,YACF,kB,uCADE,wE,qBAEF,oB,yBAIA,yBACE,YACF,kB,uCADE,qE,yBAEF,yBACE,YACF,kB,uCADE,wE,yBAEF,yBACE,YACF,kB,uCADE,kF,yBA5BJ,yBACE,6BAGA,6BAGA,6BAIA,6BAGA,6BAGA,6BAIA,6BAGA,6BAGA,6BAGF,kB,uBA7BO,+DAGA,+DAGA,+DAIA,8DAGA,8DAGA,8DAIA,kFAGA,kFAGA,mF,0GA7PrB,0BACE,yBAEA,+BAA+E,kIAC7E,+BACE,4BACE,yBACE,4BACF,iBACF,iBAEA,4BACE,4BACE,6BACE,6BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,8GAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,iHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,mHAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,mCAAmB,0GAAnB,iBACF,iBACA,gCAGF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,+GAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,0BACE,8BACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEA,gCAaA,gCAaA,gCAkCA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BAEE,gCACE,6BACE,0BACI,0BAAI,8BAA4D,iBAChE,0BAAI,8BAAoE,iBACxE,0BAAI,8BAAqE,iBAC7E,iBACF,iBACA,8BACE,iCA+BF,iBACF,iBAIF,iBACF,iBAEA,+BACE,+BACE,+BACE,iCAAmF,yF,yBAAnF,iBACA,4B,yBAEF,iBACF,iBACF,iBACF,iBACF,iBAEF,iB,uEAlRuH,iEAgBxF,6DAaA,2DAaE,+DAYA,8DAaA,8DAYA,iEAcF,wDAEf,uEAciB,2DAYA,6DAoBF,4DAKnB,0GAaA,0GAaA,8DAmDuB,gDA0CF,4EACA,4EAAqC,sBDvQtE,iBA2BI,WAAoB5G,EAAgC4R,EAAgCc,GAAhE,KAAA1S,UAAgC,KAAA4R,aAAgC,KAAAc,cApB7E,KAAAC,SAAoB,CACvBC,IAAK,GACLC,SAAU,GACV7K,SAAU,GACV8K,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,gBAAgB,GAUpB,KAAAhS,MAAgB,G,OANhB,sBACI,sBAAO,C,IADX,SAC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","file":"0.chunk.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\n\nimport { EventService, IEventListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"loading-bar\",\n    templateUrl: \"./loading-bar.component.html\",\n    styleUrls: [\"./loading-bar.css\"]\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n\n    showIndicator: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.showIndicator = true;\n    }\n\n    complete(): void {\n        this.showIndicator = false;\n    }\n\n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Injectable } from \"@angular/core\";\nimport { CookieService } from \"ngx-cookie-service\";\nimport { User } from \"@shared/model/user\";\nimport { RoleBuilder, RegistryRole, RegistryRoleType, LocaleView } from \"@shared/model/core\";\n\n@Injectable()\nexport class AuthService {\n\n    private user: User = {\n        loggedIn: false,\n        userName: \"\",\n        roles: [],\n        roleDisplayLabels: [],\n        version: \"0\",\n        installedLocales: []\n    };\n\n    constructor(private service: CookieService) {\n        let cookie = service.get(\"user\");\n\n        if (this.service.check(\"user\") && cookie != null && cookie.length > 0) {\n            let cookieData: string = this.service.get(\"user\");\n            let cookieDataJSON: any = JSON.parse(cookieData);\n\n            this.buildFromCookieJson(cookieDataJSON);\n        }\n\n        this.loadLocales();\n    }\n\n    buildFromCookieJson(cookieDataJSON: any) {\n        this.user.userName = cookieDataJSON.userName;\n        this.buildRolesFromCookie(cookieDataJSON);\n        this.user.loggedIn = cookieDataJSON.loggedIn;\n        this.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n        this.user.version = cookieDataJSON.version.replaceAll(\"+\", \" \");\n        // this.user.installedLocales = cookieDataJSON.installedLocales;\n    }\n\n    buildRolesFromCookie(cookieDataJSON: any) {\n        this.user.roles = [];\n        let roles: string[] = cookieDataJSON.roles;\n\n        for (let i = 0; i < roles.length; ++i) {\n            let role: RegistryRole = RoleBuilder.buildFromRoleName(roles[i]);\n\n            if (role != null) {\n                this.user.roles.push(role);\n            }\n        }\n    }\n\n    isLoggedIn(): boolean {\n        return this.user.loggedIn;\n    }\n\n    afterLogIn(logInResponse: any): void {\n        localStorage.clear();\n\n        this.buildFromCookieJson(JSON.parse(this.service.get(\"user\")));\n\n        this.setLocales(logInResponse.installedLocales);\n        this.user.installedLocales = logInResponse.installedLocales;\n    }\n\n    afterLogOut(): void {\n        this.user = null;\n        sessionStorage.removeItem(\"locales\");\n        localStorage.clear();\n    }\n\n    loadLocales() {\n        let storageLocales = window.sessionStorage.getItem(\"locales\");\n\n        if (storageLocales != null) {\n            this.user.installedLocales = JSON.parse(storageLocales);\n        }\n    }\n\n    setLocales(locales: LocaleView[]) {\n        window.sessionStorage.setItem(\"locales\", JSON.stringify(locales));\n    }\n\n    removeUser(): void {\n        this.user = {\n            loggedIn: false,\n            userName: \"\",\n            roles: [],\n            roleDisplayLabels: [],\n            version: \"0\",\n            installedLocales: []\n        };\n    }\n\n    // Legacy Accessors:\n    isAdmin(): boolean {\n        return this.isSRA() || this.isRA();\n    }\n\n    isMaintainer(): boolean {\n        return this.isSRA() || this.isRM();\n    }\n\n    isContributer(): boolean {\n        return this.isSRA() || this.isRC(false);\n    }\n\n    isContributerOnly(): boolean {\n        return this.isRC(true);\n    }\n\n    // Used to exactly identify a role. I.e. if we say we need RC, SRA doesn't count.\n    hasExactRole(roleType: RegistryRoleType) {\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === roleType) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isSRA(): boolean {\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.SRA) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isRA(): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RA) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryAdministrator\") !== -1 || role.roleName.indexOf(\"cgr.RegistryAdministrator\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n    }\n\n    isRM(): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RM) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryMaintainer\") !== -1 || role.roleName.indexOf(\"cgr.RegistryMaintainer\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isOrganizationRA(orgCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.orgCode === orgCode && role.type === RegistryRoleType.RA) {\n                return true;\n            }\n        }\n\n        return false; // this.isSRA();\n    }\n\n    isGeoObjectTypeRM(orgCode: string, gotCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RM && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n                return true;\n            }\n        }\n\n        return this.isOrganizationRA(orgCode);\n    }\n\n    isGeoObjectTypeOrSuperRM(got: { organizationCode: string, superTypeCode?: string, code: string }, allowRoleSuper: boolean = true): boolean {\n        if (this.isGeoObjectTypeRM(got.organizationCode, got.code)) {\n            return true;\n        } else if (got.superTypeCode != null) {\n            return this.isGeoObjectTypeRM(got.organizationCode, got.superTypeCode);\n        }\n    }\n\n    isGeoObjectTypeRC(orgCode: string, gotCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RC && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n                return true;\n            }\n        }\n\n        return this.isGeoObjectTypeRM(orgCode, gotCode);\n    }\n\n    isGeoObjectTypeOrSuperRC(got: { organizationCode: string, superTypeCode?: string, code: string }, allowRoleSuper: boolean = true): boolean {\n        if (this.isGeoObjectTypeRC(got.organizationCode, got.code)) {\n            return true;\n        } else if (got.superTypeCode != null) {\n            return this.isGeoObjectTypeRC(got.organizationCode, got.superTypeCode);\n        }\n    }\n\n    isRC(isRCOnly: boolean): boolean {\n        if (this.isSRA() && !isRCOnly) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RC) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryContributor\") !== -1 || role.roleName.indexOf(\"cgr.RegistryContributor\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // Returns all organization codes that the current user participates in.\n    // If the user is an SRA then this method will return an empty string array.\n    getMyOrganizations(): string[] {\n        let orgCodes: string[] = [];\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.SRA || role.type === RegistryRoleType.RC || role.type === RegistryRoleType.RM || role.type === RegistryRoleType.RA) {\n                orgCodes.push(role.orgCode);\n            }\n        }\n\n        return orgCodes;\n    }\n\n    __getRoleFromRoleName(roleName: string): string {\n        let nameArr = roleName.split(\".\");\n\n        return nameArr[nameArr.length - 1];\n    }\n\n    getUsername(): string {\n        return this.user.userName;\n    }\n\n    getRoles(): any {\n        return this.user.roles;\n    }\n\n    getRoleDisplayLabelsArray(): any {\n        return this.user.roleDisplayLabels;\n    }\n\n    getRoleDisplayLabels(): string {\n        let str = \"\";\n        for (let i = 0; i < this.user.roleDisplayLabels.length; ++i) {\n            let displayLabel = this.user.roleDisplayLabels[i];\n\n            if (displayLabel === \"Administrator\") {\n                continue;\n                // It's OK to hardcode to a display label here because the end user can't change it anyway.\n                // Is it ideal? No. But sometimes it's better to get software out quicker than to spend forever\n                // on something that nobody will ever see.\n            }\n\n            str = str + displayLabel;\n\n            if (i < this.user.roleDisplayLabels.length - 1) {\n                str = str + \",\";\n            }\n        }\n\n        return str;\n    }\n\n    getVersion(): string {\n        return this.user.version;\n    }\n\n    getLocales(): LocaleView[] {\n        return this.user.installedLocales;\n    }\n\n    addLocale(locale: LocaleView): void {\n        let exists: boolean = false;\n\n        for (let i = 0; i < this.user.installedLocales.length; ++i) {\n            if (this.user.installedLocales[i].tag === locale.tag) {\n                exists = true;\n                this.user.installedLocales[i] = locale;\n            }\n        }\n\n        if (!exists) {\n            this.user.installedLocales.push(locale);\n        }\n\n        this.setLocales(this.user.installedLocales);\n    }\n\n    removeLocale(locale: LocaleView): void {\n        for (let i = 0; i < this.user.installedLocales.length; ++i) {\n            if (this.user.installedLocales[i].tag === locale.tag) {\n                this.user.installedLocales.splice(i, 1);\n                this.setLocales(this.user.installedLocales);\n                return;\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(\"Could not remove locale from array because we could not find it.\", locale, this.user.installedLocales);\n    }\n\n}\n","import { Component, OnChanges, Input, SimpleChange } from \"@angular/core\";\n\n@Component({\n    selector: \"password-strength-bar\",\n    templateUrl: \"./password-strength-bar.component.html\",\n    styleUrls: [\"./password-strength-bar.component.css\"]\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n    @Input() passwordToCheck: string;\n    bar0: string;\n    bar1: string;\n    bar2: string;\n    bar3: string;\n    bar4: string;\n\n    private colors = [\"#F00\", \"#F90\", \"#FF0\", \"#9F0\", \"#0F0\"];\n\n    private static measureStrength(pass: string) {\n        let score = 0;\n        // award every unique letter until 5 repetitions\n        let letters = {};\n        for (let i = 0; i < pass.length; i++) {\n            letters[pass[i]] = (letters[pass[i]] || 0) + 1;\n            score += 5.0 / letters[pass[i]];\n        }\n        // bonus points for mixing it up\n        let variations = {\n            digits: /\\d/.test(pass),\n            lower: /[a-z]/.test(pass),\n            upper: /[A-Z]/.test(pass),\n            nonWords: /\\W/.test(pass)\n        };\n\n        let variationCount = 0;\n        for (let check in variations) {\n            variationCount += (variations[check]) ? 1 : 0;\n        }\n        score += (variationCount - 1) * 10;\n        return Math.trunc(score);\n    }\n\n    private getColor(score: number) {\n        let idx = 0;\n        if (score > 90) {\n            idx = 4;\n        } else if (score > 70) {\n            idx = 3;\n        } else if (score >= 40) {\n            idx = 2;\n        } else if (score >= 20) {\n            idx = 1;\n        }\n        return {\n            idx: idx + 1,\n            col: this.colors[idx]\n        };\n    }\n\n    ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n        let password = changes[\"passwordToCheck\"].currentValue;\n        this.setBarColors(5, \"#DDD\");\n        if (password) {\n            let c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n            this.setBarColors(c.idx, c.col);\n        }\n    }\n\n    private setBarColors(count, col) {\n        for (let _n = 0; _n < count; _n++) {\n            this[\"bar\" + _n] = col;\n        }\n    }\n\n}\n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Pipe({ name: \"localize\" })\nexport class LocalizePipe implements PipeTransform {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService) { }\n\n    transform(value: string): string {\n        return this.service.decode(value);\n    }\n\n}\n","import { Component, OnInit } from \"@angular/core\";\n\nimport { EventService, IEventListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"message\",\n    templateUrl: \"./message.component.html\",\n    styles: [\n        \".error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}\",\n        \".message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }\"\n    ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\n    error: any = null;\n\n    message: string = \"\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.error = null;\n    }\n\n    complete(): void {\n    }\n\n    onError(error: any): void {\n        this.error = error;\n    }\n\n    onMessage(msg: string): void {\n        this.message = msg;\n    }\n\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { ErrorHandler } from \"./error-handler/error-handler\";\nimport { CgrHeaderComponent } from \"./header/header.component\";\nimport { LoadingBarComponent } from \"./loading-bar/loading-bar.component\";\nimport { LocalizeComponent } from \"./localize/localize.component\";\nimport { ErrorMessageComponent } from \"./message/error-message.component\";\nimport { MessageComponent } from \"./message/message.component\";\nimport { ConfirmModalComponent } from \"./modals/confirm-modal.component\";\nimport { ErrorModalComponent } from \"./modals/error-modal.component\";\nimport { ModalStepIndicatorComponent } from \"./modals/modal-step-indicator.component\";\nimport { SuccessModalComponent } from \"./modals/success-modal.component\";\nimport { PasswordStrengthBarComponent } from \"./password-strength-bar/password-strength-bar.component\";\nimport { ProfileComponent } from \"./profile/profile.component\";\nimport { ProgressBarComponent } from \"./progress-bar/progress-bar.component\";\nimport { GenericModalComponent } from \"./modals/generic-modal.component\";\n\nexport const components: any[] = [\n    ErrorHandler,\n    CgrHeaderComponent,\n    LoadingBarComponent,\n    LocalizeComponent,\n    ErrorMessageComponent,\n    MessageComponent,\n    ConfirmModalComponent,\n    GenericModalComponent,\n    ErrorModalComponent,\n    ModalStepIndicatorComponent,\n    SuccessModalComponent,\n    PasswordStrengthBarComponent,\n    ProfileComponent,\n    ProgressBarComponent\n];\n\nexport * from \"./error-handler/error-handler\";\nexport * from \"./header/header.component\";\nexport * from \"./loading-bar/loading-bar.component\";\nexport * from \"./localize/localize.component\";\nexport * from \"./message/error-message.component\";\nexport * from \"./message/message.component\";\nexport * from \"./modals/confirm-modal.component\";\nexport * from \"./modals/generic-modal.component\";\nexport * from \"./modals/error-modal.component\";\nexport * from \"./modals/modal-step-indicator.component\";\nexport * from \"./modals/success-modal.component\";\nexport * from \"./password-strength-bar/password-strength-bar.component\";\nexport * from \"./profile/profile.component\";\nexport * from \"./progress-bar/progress-bar.component\";\n","import { Injectable } from \"@angular/core\";\nimport { LocalizationService } from \"./localization.service\";\nimport Utils from \"../../registry/utility/Utils\";\nimport { PRESENT, ConflictMessage, TimeRangeEntry, AttributeType } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { ConflictType } from \"@registry/model/constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\n@Injectable()\nexport class DateService {\n\n    public overlapMessage: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.overlap.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    public mergeContiguousMessage: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.mergeContiguousRanges.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    public gapMessage: ConflictMessage = {\n        severity: \"WARNING\",\n        message: this.localizationService.decode(\"manage.versions.gap.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    public outsideExistsMessage: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.outsideExists.message\"),\n        type: ConflictType.OUTSIDE_EXISTS\n    }\n\n    public missingReference: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"changeovertime.manageVersions.missingReference\"),\n        type: ConflictType.MISSING_REFERENCE\n    }\n\n    public startDateLaterEndDate: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.startdate.later.enddate.message\"),\n        type: ConflictType.TIME_RANGE\n    };\n\n    public parentDoesNotExist: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"changeovertime.manageVersions.parentDoesNotExist\"),\n        type: ConflictType.MISSING_REFERENCE\n    }\n\n    public invalidParent: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"changeovertime.manageVersions.invalidParent\"),\n        type: ConflictType.MISSING_REFERENCE\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private localizationService: LocalizationService) { }\n\n    // Get infinity date (called 'present' in the UI)\n    public getPresentDate(): Date {\n        // NOTE: Month is 0 indexed so 11 = December\n        let dt = new Date(5000, 11, 31, 0, 0, 0);\n\n        return dt;\n    }\n\n    public formatDateForDisplay(date: string | Date): string {\n        if (!date) {\n            return \"\";\n        }\n\n        if (date === PRESENT) {\n            return this.localizationService.localize(\"changeovertime\", \"present\");\n        }\n\n        if (date instanceof Date) {\n            return this.getDateString(date);\n        } else {\n            return date.split(\"T\")[0];\n        }\n    }\n\n    // @param value as yyyy-mm-dd\n    getDateFromDateString(value: string) {\n        return new Date(+value.split(\"-\")[0], +value.split(\"-\")[1] - 1, +value.split(\"-\")[2]);\n    }\n\n    getDateString(date: Date): string {\n        if (date instanceof Date) {\n            let year = date.getFullYear();\n            let month: number | string = date.getMonth() + 1;\n            let dt: number | string = date.getDate();\n\n            if (dt < 10) {\n                dt = \"0\" + dt;\n            }\n            if (month < 10) {\n                month = \"0\" + month;\n            }\n\n            return year + \"-\" + month + \"-\" + dt;\n        }\n\n        return null;\n    }\n\n    checkRanges(attributeType: AttributeType, ranges: ValueOverTimeCREditor[]): boolean {\n        let hasConflict = false;\n\n        // clear all messages\n        ranges.forEach(range => {\n            if (!range.conflictMessages) {\n                range.conflictMessages = new Set();\n            }\n\n            range.conflictMessages.delete(this.overlapMessage);\n            range.conflictMessages.delete(this.mergeContiguousMessage);\n            range.conflictMessages.delete(this.gapMessage);\n            range.conflictMessages.delete(this.startDateLaterEndDate);\n        });\n\n        // Filter DELETE entries from consideration\n        const filtered: ValueOverTimeCREditor[] = ranges.filter(range => !range.isDelete());\n\n        // Check for overlaps\n        for (let j = 0; j < filtered.length; j++) {\n            const h1: ValueOverTimeCREditor = filtered[j];\n\n            if (h1.startDate && h1.endDate) {\n                let s1: any = this.getDateFromDateString(h1.startDate);\n                let e1: any = this.getDateFromDateString(h1.endDate);\n\n                if (Utils.dateEndBeforeStart(s1, e1)) {\n                    h1.conflictMessages.add(this.startDateLaterEndDate);\n\n                    hasConflict = true;\n                }\n\n                for (let i = 0; i < filtered.length; i++) {\n                    if (j !== i) {\n                        const h2: ValueOverTimeCREditor = filtered[i];\n\n                        // If all dates set\n                        if (h2.startDate && h2.endDate) {\n                            let s2: Date = this.getDateFromDateString(h2.startDate);\n                            let e2: Date = this.getDateFromDateString(h2.endDate);\n\n                            // Determine if there is an overlap\n                            if (Utils.dateRangeOverlaps(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                                h1.conflictMessages.add(this.overlapMessage);\n\n                                if (s2.getTime() === e2.getTime()) {\n                                    h2.conflictMessages.add(this.overlapMessage);\n                                }\n\n                                hasConflict = true;\n                            } else if (this.addDay(1, h1.endDate) === h2.startDate && Utils.areValuesEqual(attributeType, h1.value, h2.value)) {\n                                h1.conflictMessages.add(this.mergeContiguousMessage);\n                                h2.conflictMessages.add(this.mergeContiguousMessage);\n                                hasConflict = true;\n                            }\n                        } else if ((i === j - 1 || i === j + 1) && e1 && h2.startDate) {\n                            // If 1st end date and current start date\n\n                            let s2: Date = this.getDateFromDateString(h2.startDate);\n\n                            if (s2.getTime() <= e1) {\n                                h1.conflictMessages.add(this.overlapMessage);\n                                h2.conflictMessages.add(this.overlapMessage);\n\n                                hasConflict = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        this.sort(filtered);\n\n        // Check for gaps\n        let current = null;\n        for (let j = 0; j < filtered.length; j++) {\n            let next = filtered[j];\n\n            if (j > 0) {\n                if (current.endDate && next.startDate) {\n                    let e1: any = new Date(current.endDate);\n                    let s2: any = new Date(next.startDate);\n\n                    if (Utils.hasGap(e1.getTime(), s2.getTime())) {\n                        next.conflictMessages.add(this.gapMessage);\n\n                        current.conflictMessages.add(this.gapMessage);\n                    }\n                }\n            }\n\n            current = next;\n        }\n\n        this.sort(ranges);\n\n        return hasConflict;\n    }\n\n    public between(test: string | Date, startDate: string, endDate: string) {\n        if (startDate == null) {\n            return false;\n        }\n\n        let dTest: Date = test == null ? this.getPresentDate() : (test instanceof Date ? test : this.getDateFromDateString(test));\n        let dStart: Date = this.getDateFromDateString(startDate);\n        let dEnd: Date = endDate == null ? this.getPresentDate() : this.getDateFromDateString(endDate);\n\n        return dTest >= dStart && dTest <= dEnd;\n    }\n\n    public after(in1: string | Date, in2: string | Date) {\n        if (in1 == null || in2 == null) {\n            return false;\n        }\n\n        let date1: Date = in1 instanceof Date ? in1 : this.getDateFromDateString(in1);\n        let date2: Date = in2 instanceof Date ? in2 : this.getDateFromDateString(in2);\n\n        return date1 > date2;\n    }\n\n    public addDay(amount: number, date: string): string {\n        var plus1: Date = this.getDateFromDateString(date);\n        plus1.setDate(plus1.getDate() + amount);\n        let splus1: string = this.getDateString(plus1);\n        return splus1;\n    }\n\n    public sort(votArr: TimeRangeEntry[]): void {\n      // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    checkExistRanges(ranges: ValueOverTimeCREditor[], existEntries: ValueOverTimeCREditor[]): boolean {\n        let hasConflict = false;\n\n        // clear all messages\n        ranges.forEach(range => {\n            if (!range.conflictMessages) {\n                range.conflictMessages = new Set();\n            }\n\n            range.conflictMessages.delete(this.outsideExistsMessage);\n        });\n\n        // Filter DELETE entries from consideration\n        const filtered: ValueOverTimeCREditor[] = ranges.filter(range => !range.isDelete());\n\n        const filteredExists = existEntries.filter(range => !range.isDelete());\n\n        // Check for outside exists range\n        for (let j = 0; j < filtered.length; j++) {\n            const h1 = filtered[j];\n\n            if (h1.startDate && h1.endDate) {\n                let s1: any = this.getDateFromDateString(h1.startDate);\n                let e1: any = this.getDateFromDateString(h1.endDate);\n\n                let inRange = false;\n\n                for (let i = 0; i < filteredExists.length; i++) {\n                    const h2 = filteredExists[i];\n\n                    // If all dates set\n                    if (h2.value && h2.startDate && h2.endDate) {\n                        let s2: Date = this.getDateFromDateString(h2.startDate);\n                        let e2: Date = this.getDateFromDateString(h2.endDate);\n\n                        if (!Utils.dateRangeOutside(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                            inRange = true;\n                        }\n                    }\n                }\n\n                if (!inRange) {\n                    h1.conflictMessages.add(this.outsideExistsMessage);\n                    hasConflict = true;\n                }\n            }\n        }\n\n        return hasConflict;\n    }\n\n    validateDate(date: Date, required: boolean, allowFutureDates: boolean): {message: string, valid: boolean} {\n        let valid = { message: \"\", valid: true };\n        let today: Date = new Date();\n\n        if (date != null) {\n            if (!(date instanceof Date) || (date instanceof Date && isNaN(date.getTime()))) {\n                valid.valid = false;\n                valid.message = this.localizationService.decode(\"date.inpu.data.invalid.error.message\");\n            } else if (!allowFutureDates && date > today) {\n                valid.valid = false;\n                valid.message = this.localizationService.decode(\"date.inpu.data.in.future.error.message\");\n            }\n        } else if (required) {\n            valid.valid = false;\n            valid.message = this.localizationService.decode(\"manage.versions.date.required.message\");\n        }\n\n        return valid;\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\nimport { LocalizedValue, LocaleView } from \"@shared/model/core\";\n\ndeclare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class LocalizationService {\n\n    locales: LocaleView[] = [];\n    locale: string;\n\n    constructor() {\n        this.locales = registry.locales;\n        this.locale = registry.locale;\n    }\n\n    addLocale(locale: LocaleView): void {\n        let exists: boolean = false;\n\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].tag === locale.tag) {\n                exists = true;\n                this.locales[i] = locale;\n            }\n        }\n\n        if (!exists) {\n            this.locales.push(locale);\n        }\n    }\n\n    setLocales(locales: LocaleView[]): void {\n        this.locales = locales;\n    }\n\n    getLocale(): string {\n        return this.locale;\n    }\n\n    getLocales(): LocaleView[] {\n        return this.locales;\n    }\n\n    create(): LocalizedValue {\n        const value = { localizedValue: \"\", localeValues: [] } as LocalizedValue;\n\n        this.locales.forEach(locale => {\n            // if (!locale.isDefaultLocale)\n            // {\n            value.localeValues.push({ locale: locale.toString, value: \"\" });\n            // }\n        });\n\n        return value;\n    }\n\n    remove(locale: LocaleView): void {\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].tag === locale.tag) {\n                this.locales.splice(i, 1);\n                return;\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(\"Could not remove locale from array because we could not find it.\", locale, this.locales);\n    }\n\n    public localize(bundle: string, key: string): string {\n        if (registry.localization[bundle] != null) {\n            const b = registry.localization[bundle];\n\n            if (b[key] != null) {\n                return b[key];\n            }\n        }\n\n        return \"??\" + key + \"??\";\n    }\n\n    public get(key: string): string {\n        if (registry.localization[key] != null) {\n            return registry.localization[key];\n        }\n\n        return \"??\" + key + \"??\";\n    }\n\n    public decode(key: string): string {\n        let index = key.lastIndexOf(\".\");\n\n        if (index !== -1) {\n            let temp = [key.slice(0, index), key.slice(index + 1)];\n\n            return this.localize(temp[0], temp[1]);\n        } else {\n            return this.get(key);\n        }\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n\n    private listeners: IEventListener[] = [];\n\n    public registerListener(listener: IEventListener): void {\n        this.listeners.push(listener);\n    }\n\n    public deregisterListener(listener: IEventListener): boolean {\n        let indexOfItem = this.listeners.indexOf(listener);\n\n        if (indexOfItem === -1) {\n            return false;\n        }\n\n        this.listeners.splice(indexOfItem, 1);\n\n        return true;\n    }\n\n    public start(): void {\n\n        setTimeout(() => {\n            for (const listener of this.listeners) {\n                listener.start();\n            }\n        }, 1);\n    }\n\n    public complete(): void {\n        setTimeout(() => {\n            for (const listener of this.listeners) {\n                listener.complete();\n            }\n        }, 1);\n    }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ProfileComponent } from \"../profile/profile.component\";\n\nimport { AuthService, ProfileService, LocalizationService } from \"@shared/service\";\n\nimport { RegistryRoleType, LocaleView } from \"@shared/model/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\";\ndeclare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"cgr-header\",\n    templateUrl: \"./header.component.html\",\n    styleUrls: []\n})\nexport class CgrHeaderComponent {\n\n    context: string;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    bsModalRef: BsModalRef;\n\n    defaultLocaleView: LocaleView;\n    locales: LocaleView[];\n    locale: string;\n\n    enableBusinessData: boolean = false;\n\n    @Input() loggedIn: boolean = true;\n\n    constructor(\n        private modalService: BsModalService,\n        private profileService: ProfileService,\n        private service: AuthService,\n        localizationService: LocalizationService\n    ) {\n        this.context = registry.contextPath;\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        this.enableBusinessData = registry.enableBusinessData || false;\n\n        if (localizationService.getLocales()) {\n            this.locales = localizationService.getLocales().filter(locale => locale.toString !== \"defaultLocale\");\n            this.defaultLocaleView = localizationService.getLocales().filter(locale => locale.toString === \"defaultLocale\")[0];\n        } else {\n            this.locales = [];\n            this.defaultLocaleView = null;\n        }\n        this.locale = localizationService.getLocale();\n\n        let found: boolean = false;\n\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].toString === this.locale) {\n                found = true;\n            }\n        }\n\n        if (!found) {\n            this.locale = \"\";\n        }\n    }\n\n    shouldShowMenuItem(item: string): boolean {\n        if (item === \"HIERARCHIES\") {\n            return true;\n        } else if (item === \"LISTS\") {\n            // return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC) || this.service.hasExactRole(RegistryRoleType.AC);\n            return true;\n        } else if (item === \"BUSINESS-TYPES\") {\n            if (registry.enableBusinessData) {\n                return true;\n            } else {\n                return false;\n            }\n        } else if (this.service.hasExactRole(RegistryRoleType.SRA)) {\n            return true;\n        } else if (item === \"IMPORT\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"SCHEDULED-JOBS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"NAVIGATOR\") {\n            return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n        } else if (item === \"CHANGE-REQUESTS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n        } else if (item === \"TASKS\") {\n            return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"EVENTS\") {\n            // return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n            return true;\n        } else if (item === \"CONFIGS\" || item === \"CLASSIFICATION\") {\n            return this.service.hasExactRole(RegistryRoleType.RA);\n        } else if (item === \"SETTINGS\") {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    logout(): void {\n        sessionStorage.removeItem(\"locales\");\n\n        window.location.href = registry.contextPath + \"/session/logout\";\n\n        //        this.sessionService.logout().then( response => {\n        //            this.router.navigate( ['/login'] );\n        //        } );\n    }\n\n    getUsername() {\n        let name: string = this.service.getUsername();\n\n        return name;\n    }\n\n    setLocale() {\n        this.profileService.setLocale(this.locale).then(() => {\n            // Refresh the page\n            window.location.reload();\n        });\n    }\n\n    account(): void {\n        this.profileService.get().then(profile => {\n            this.bsModalRef = this.modalService.show(ProfileComponent, { backdrop: \"static\", class: \"gray modal-lg\" });\n            this.bsModalRef.content.profile = profile;\n        });\n    }\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default navbar-fixed-top\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n       <ul *ngIf=\"loggedIn\" class=\"nav navbar-nav navbar-right\"> \n         <li class=\"hidden-xs\">\n            \n           <a (click)=\"account()\" class=\"navbar-username\">\n           <!-- <div>Logged in as</div> -->\n             <div>{{getUsername()}}</div>\n           </a>                      \n         </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"shouldShowMenuItem('HIERARCHIES')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"shouldShowMenuItem('LISTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('IMPORT')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('SCHEDULED-JOBS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/scheduled-jobs\" routerLinkActive=\"active\"><localize key=\"scheduledjobs.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('NAVIGATOR')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/location-manager\" [queryParams]=\"{pageContext:'EXPLORER'}\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('CHANGE-REQUESTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('EVENTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/historical-events\" routerLinkActive=\"active\"><localize key=\"historical.events\"></localize></a></li>\n                <li *ngIf=\"shouldShowMenuItem('TASKS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/tasks\" routerLinkActive=\"active\"><localize key=\"header.tasks\"></localize></a></li>\n                <li *ngIf=\"shouldShowMenuItem('CLASSIFICATION')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/classification-type\" routerLinkActive=\"active\"><localize key=\"header.classifications.option\"></localize></a></li>\n                <!-- <li *ngIf=\"shouldShowMenuItem('CONFIGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/synchronization-configs\" routerLinkActive=\"active\"><localize key=\"synchronization.config.manager\"></localize></a></li> -->\n                <ng-container *ngIf=\"shouldShowMenuItem('BUSINESS-TYPES') === true\">\n                  <hr>\n                  <li  role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/business-types\" routerLinkActive=\"active\"><localize key=\"business.data.type\"></localize></a></li>\n                  <li role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/business-importer\" routerLinkActive=\"active\"><localize key=\"business.data.import\"></localize></a></li>\n                </ng-container>\n                \n                <hr>\n                <li *ngIf=\"shouldShowMenuItem('SETTINGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/settings\" routerLinkActive=\"active\"><localize key=\"settings.menu\"></localize> </a></li>\n                \n                <div *ngIf=\"locales.length > 0\" style=\"padding: 0 20px;\">\n                  <hr>\n<!--                     <span><localize key=\"userDashboards.setLocale\"></localize></span> -->\n\n                    <label class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"default\" [value]=\"''\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span>{{defaultLocaleView.label.localizedValue}}</span>\n                    </label>\n                    <label *ngFor=\"let l of locales\" class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"{{l.toString}}\" [value]=\"l.toString\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span>{{l.label.localizedValue}}</span>\n                    </label>\n                </div>\n                \n                <!-- <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li> -->\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n         \n        \n       </ul>\n       \n       \n    </div>\n  </nav>\n</header>\n","import { Injectable } from \"@angular/core\";\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from \"@angular/router\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin()) {\n            return true;\n        }\n\n        this.router.navigate([\"/\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin() || this.service.isMaintainer()) {\n            return true;\n        }\n\n        this.router.navigate([\"/\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin() || this.service.isMaintainer() || this.service.isContributer()) {\n            return true;\n        }\n\n        this.router.navigate([\"/\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isLoggedIn()) {\n            return true;\n        }\n\n        this.router.navigate([\"/login\"]);\n\n        return false;\n    }\n\n}\n\n","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Profile } from \"@shared/model/profile\";\nimport { AuthService, ProfileService } from \"@shared/service\";\nimport { Role } from \"../../../admin/model/account\";\n\n@Component({\n    selector: \"profile\",\n    templateUrl: \"./profile.component.html\",\n    styles: [\".modal-form .check-block .chk-area { margin: 10px 0px 0 0;}\"]\n})\nexport class ProfileComponent {\n\n    public _profile: Profile = {\n        oid: \"\",\n        username: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        changePassword: false\n    };\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"profile\")\n    set profile(value: Profile) {\n        this._profile = value;\n        this.getRoles();\n    }\n\n    roles: Role[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n    getRoles(): void {\n        this.service.getRolesForUser(this._profile.oid).then(roles => {\n            this.roles = roles;\n        });\n    }\n\n    onSubmit(): void {\n        if (!this._profile.changePassword) {\n            delete this._profile.password;\n        }\n\n        this.service.apply(this._profile).then(profile => {\n            this.bsModalRef.hide();\n        });\n    }\n\n    onChangePassword(): void {\n        this._profile.changePassword = !this._profile.changePassword;\n    }\n\n    // getRoles():string {\n    //   return this.authService.getRoleDisplayLabels();\n    // }\n\n    getRolesArray(): any {\n        return this.authService.getRoles();\n    }\n\n    cancel(): void {\n        this.service.unlock(this._profile.oid).then(profile => {\n            this.bsModalRef.hide();\n        });\n    }\n\n}\n","<div *ngIf=\"_profile\">\n  <message></message>\n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <fieldset>\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"profile.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.firstName\" name=\"firstname\" required>\n          </span>\n        </div>\n      </div>\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.lastName\" name=\"lastname\" required>\n          </span>\n        </div>\n      </div>\n      \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altFirstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altFirstName\" name=\"altFirstname\">\n            </span>\n          </div>\n        </div>        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altLastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altLastName\" name=\"altLastname\">\n            </span>\n          </div>\n        </div>            \n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.phonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.phoneNumber\" name=\"phoneNumber\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altPhonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altPhoneNumber\" name=\"altPhoneNumber\">\n            </span>\n          </div>\n        </div>\n\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n          </span>\n          <div *ngIf=\"aemail.errors?.email\" style=\"float:none;\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.position\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.position\" name=\"position\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.department\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.department\" name=\"department\">\n            </span>\n          </div>\n        </div>\n            \n\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"account.info.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.username\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.username\" name=\"username\" required>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"_profile.externalSystemOid != null && _profile.externalSystemOid !== ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.oauth\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <label>\n            <localize key=\"account.profile.isOauth\"></localize>\n          </label>\n        </div>\n      </div>\n      \n      <div *ngIf=\"_profile.externalSystemOid == null || _profile.externalSystemOid === ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n        </div>\n        <div class=\"holder\">\n          <!-- <boolean-field [(value)]=\"profile.changePassword\"></boolean-field> -->\n          <div style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!_profile.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"_profile.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"_profile.changePassword\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.password\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" [(ngModel)]=\"_profile.password\" name=\"password\" #password=\"ngModel\" required\n                minlength=\"5\" maxlength=\"50\">\n              <password-strength-bar [passwordToCheck]=\"_profile.password\">\n              </password-strength-bar>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.certainPassword\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" />\n            </span>\n            <div *ngIf=\"certainPassword.errors?.mustMatch\" style=\"float:none;\" class=\"inline-error-message\">\n              <localize key=\"account.certainPassword.validation\"></localize>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th><localize key=\"profile.roles.role.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.organization.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.geoobjecttype.table.heading\"></localize></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let role of roles\">\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.geoObjectTypeLabel.localizedValue}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- <ul>\n            <li *ngFor=\"let role of getRolesArray()\">{{role}}</li>\n          </ul> -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\"\n              [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n\n</div>\n","import { AuthService } from \"./auth.service\";\nimport { EventService } from \"./event.service\";\nimport { ExternalSystemService } from \"./external-system.service\";\nimport { AdminGuard, AuthGuard, ContributerGuard, MaintainerGuard } from \"./guard.service\";\nimport { LocalizationService } from \"./localization.service\";\nimport { ModalStepIndicatorService } from \"./modal-step-indicator.service\";\nimport { OrganizationService } from \"./organization.service\";\nimport { PendingChangesGuard } from \"./pending-changes-guard\";\nimport { ProfileService } from \"./profile.service\";\nimport { ProgressService } from \"./progress.service\";\nimport { SessionService } from \"./session.service\";\nimport { DateService } from \"./date.service\";\n\nexport const services: any[] = [\n    AuthService,\n    EventService,\n    ExternalSystemService,\n    AdminGuard,\n    AuthGuard,\n    ContributerGuard,\n    MaintainerGuard,\n    LocalizationService,\n    ModalStepIndicatorService,\n    OrganizationService,\n    PendingChangesGuard,\n    ProfileService,\n    ProgressService,\n    SessionService,\n    DateService\n];\n\nexport * from \"./auth.service\";\nexport * from \"./event.service\";\nexport * from \"./external-system.service\";\nexport * from \"./guard.service\";\nexport * from \"./localization.service\";\nexport * from \"./modal-step-indicator.service\";\nexport * from \"./organization.service\";\nexport * from \"./pending-changes-guard\";\nexport * from \"./profile.service\";\nexport * from \"./progress.service\";\nexport * from \"./session.service\";\nexport * from \"./date.service\";\n","/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nexport interface MessageContainer {\n    setMessage(message: string);\n}\n\nexport class LocaleValue {\n\n    locale: string;\n    value: string;\n\n    constructor(locale: string, value: string) {\n        this.locale = locale;\n        this.value = value;\n    }\n\n}\n\nexport class LocaleView {\n\n    constructor(lService: LocalizationService) {\n        this.label = lService.create();\n        this.toString = \"\";\n        this.tag = \"\";\n        this.isDefaultLocale = false;\n        this.language = { label: \"\", code: \"\" };\n        this.country = { label: \"\", code: \"\" };\n        this.variant = { label: \"\", code: \"\" };\n    }\n\n    label: LocalizedValue;\n    toString: string;\n    tag: string;\n    isDefaultLocale: boolean;\n    language: { label: string, code: string };\n    country: { label: string, code: string };\n    variant: { label: string, code: string };\n\n}\n\nexport class Organization {\n\n    code: string;\n    label: any;\n    contactInfo: any;\n\n}\n\nexport class ExternalSystem {\n\n    oid?: string;\n    id: string;\n    type: string;\n    organization: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    username?: string;\n    password?: string;\n    url?: string;\n    system?: string;\n    version?: string;\n    oAuthServer?: OAuthServer;\n\n}\n\nexport class OAuthServer {\n\n    keyName?: string;\n    label?: LocalizedValue;\n    url?: string;\n    authorizationLocation: string;\n    tokenLocation: string;\n    profileLocation: string;\n    clientId: string;\n    secretKey: string;\n    serverType: string;\n\n}\n\nexport class SystemCapabilities {\n\n    supportedVersion: boolean;\n    oauth: boolean;\n\n}\n\nexport class PageResult<T> {\n\n    count: number;\n    pageNumber: number;\n    pageSize: number;\n    resultSet: T[];\n    externalSystems?: ExternalSystem[];\n\n}\n\nexport class LocalizedValue {\n\n    localizedValue: string;\n    localeValues: LocaleValue[];\n\n    constructor(localizedValue: string, localeValues: LocaleValue[]) {\n        this.localizedValue = localizedValue;\n        this.localeValues = localeValues;\n    }\n\n    public getValue(localeToString: string): string {\n        let len = this.localeValues.length;\n\n        for (let i = 0; i < len; ++i) {\n            let lv = this.localeValues[i];\n\n            if (lv.locale === localeToString) {\n                return lv.value;\n            }\n        }\n\n        return this.localizedValue;\n    }\n\n    /*\n     * Populates lv1 with all values contained in lv2\n     */\n    public static populate(lv1: LocalizedValue, lv2: LocalizedValue) {\n        if (lv1 == null || lv2 == null) {\n            return;\n        }\n\n        lv1.localizedValue = lv2.localizedValue;\n\n        if (lv2.localeValues != null) {\n            lv2.localeValues.forEach(lv2lv => {\n                if (lv1.localeValues) {\n                    let found = false;\n\n                    lv1.localeValues.forEach(lv1lv => {\n                        if (!found && lv1lv.locale === lv2lv.locale) {\n                            lv1lv.value = lv2lv.value;\n                            found = true;\n                        }\n                    });\n\n                    if (!found) {\n                        lv1.localeValues.push(JSON.parse(JSON.stringify(lv2lv)));\n                    }\n                } else {\n                    lv1.localeValues = lv2.localeValues;\n                }\n            });\n        }\n    }\n\n}\n\nexport class RoleBuilder {\n\n    static buildFromRoleName(roleName: string): RegistryRole {\n        if (roleName === \"cgr.SRA\") {\n            return new RegistryRole(RegistryRoleType.SRA, \"\", \"\", \"cgr.SRA\");\n        }\n\n        let roleSplit = roleName.split(\".\");\n\n        let orgCode: string = roleSplit[2];\n\n        if (roleSplit.length === 4) {\n            return new RegistryRole(RegistryRoleType.RA, orgCode, \"\", roleName);\n        } else if (roleSplit.length === 5) {\n            let roleSuffix: string = roleSplit[4];\n\n            let gotCode: string = roleSplit[3];\n\n            if (roleSuffix === \"RM\") {\n                return new RegistryRole(RegistryRoleType.RM, orgCode, gotCode, roleName);\n            } else if (roleSuffix === \"RC\") {\n                return new RegistryRole(RegistryRoleType.RC, orgCode, gotCode, roleName);\n            } else if (roleSuffix === \"AC\") {\n                return new RegistryRole(RegistryRoleType.AC, orgCode, gotCode, roleName);\n            }\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport class RegistryRole {\n\n    type: RegistryRoleType;\n    orgCode: string;\n    geoObjectTypeCode: string;\n    roleName: string;\n    displayLabel: string;\n\n    constructor(type: RegistryRoleType, orgCode: string, geoObjectTypeCode: string, roleName: string) {\n        this.type = type;\n        this.orgCode = orgCode;\n        this.geoObjectTypeCode = geoObjectTypeCode;\n        this.roleName = roleName;\n    }\n\n}\n\nexport enum RegistryRoleType {\n    SRA,\n    RA,\n    RM,\n    RC,\n    AC\n}\n","import { Component } from \"@angular/core\";\nimport { ModalStepIndicatorService } from \"@shared/service\";\n\nimport { Step, StepConfig } from \"@shared/model/modal\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n    selector: \"modal-step-indicator\",\n    templateUrl: \"./modal-step-indicator.component.html\",\n    styleUrls: [\"./modal-step-indicator.css\"]\n})\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor(private modalStepIndicatorService: ModalStepIndicatorService) {\n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe(stepConfig => {\n            this.stepConfig = stepConfig;\n        });\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import { Component, OnInit } from \"@angular/core\";\n\nimport { Progress } from \"@shared/model/progress\";\nimport { ProgressService, IProgressListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"progress-bar\",\n    templateUrl: \"./progress-bar.component.html\",\n    styles: [\n        \".progress-overlay { background-color: #CCCCCC; position: absolute; display: block;opacity: 0.8;z-index: 99999 !important;}\",\n        \".progress-div { width: 100%; margin-left: 0; padding-left: 25%; padding-right: 25%; margin-top: 30% }\"\n    ]\n})\nexport class ProgressBarComponent implements OnInit, IProgressListener {\n\n    public showIndicator: boolean = true;\n\n    public prog: Progress = {\n        current: 0,\n        total: 1,\n        description: \"Initializing\"\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: ProgressService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.prog = {\n            current: 0,\n            total: 1,\n            description: \"Initializing\"\n        };\n\n        this.showIndicator = true;\n    }\n\n    progress(progress: Progress): void {\n        this.prog = progress;\n    }\n\n    complete(): void {\n        this.showIndicator = false;\n    }\n\n}\n","<div *ngIf=\"showIndicator\" class=\"progress-overlay\" style=\"height: 100%; width: 100%;\">\n  <div class=\"progress-div\">\n    <progressbar class=\"progress-striped active\" [max]=\"prog.total\" [value]=\"prog.current\"><i>{{prog.description}}</i></progressbar>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\nimport { EventService } from \"@shared/service\";\nimport { ExternalSystem, PageResult, SystemCapabilities } from \"@shared/model/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ExternalSystemService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getExternalSystems(pageNumber: number, pageSize: number): Promise<PageResult<ExternalSystem>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExternalSystem>>(registry.contextPath + \"/external-system/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getExternalSystem(oid: string): Promise<ExternalSystem> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<ExternalSystem>(registry.contextPath + \"/external-system/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    applyExternalSystem(system: ExternalSystem): Promise<ExternalSystem> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ExternalSystem>(registry.contextPath + \"/external-system/apply\", JSON.stringify({ system: system }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getSystemCapabilities(system: ExternalSystem): Promise<SystemCapabilities> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<SystemCapabilities>(registry.contextPath + \"/external-system/system-capabilities\", JSON.stringify({ system: system }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeExternalSystem(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/external-system/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { Step, StepConfig } from \"@shared/model/modal\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n\n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { Organization } from \"@shared/model/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class OrganizationService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getOrganizations(): Promise<Organization[]> {\n        this.eventService.start();\n\n        return this.http\n            .get<Organization[]>(registry.contextPath + \"/cgr/organizations/get-all\")\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateOrganization(json: any): Promise<Organization> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Organization>(registry.contextPath + \"/cgr/orgainization/update\", JSON.stringify({ json: json }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newOrganization(json: any): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/cgr/orgainization/create\", JSON.stringify({ json: json }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeOrganization(code: any): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/cgr/orgainization/delete\", JSON.stringify({ code: code }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { CanDeactivate } from \"@angular/router\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n    canDeactivate: () => boolean | Observable<boolean>;\n    afterDeactivate: (arg: boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n        if (!component.canDeactivate()) {\n            // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n            // when navigating away from your angular app, the browser will show a generic warning message\n            // see http://stackoverflow.com/a/42207299/7307355\n            let confirmRet = confirm(\"WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.\");\n\n            component.afterDeactivate(confirmRet);\n\n            return confirmRet;\n        }\n\n        return true;\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\n// import 'rxjs/add/operator/toPromise';\n\nimport { Profile } from \"@shared/model/profile\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ProfileService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient) { }\n\n    get(): Promise<Profile> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<Profile>(registry.contextPath + \"/registryaccount/get\", { headers: headers })\n            .toPromise();\n    }\n\n\n    apply(profile: Profile): Promise<Profile> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<Profile>(registry.contextPath + \"/registryaccount/apply\", JSON.stringify({ account: profile }), { headers: headers })\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<void>(registry.contextPath + \"/registryaccount/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .toPromise()\n    }\n\n    setLocale(locale: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<any>(registry.contextPath + \"/localization/set-locale\", JSON.stringify({ locale: locale }), { headers: headers })\n            .toPromise();\n    }\n\n    getRolesForUser(userOID: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n\n        return this.http\n            .post<Profile>(registry.contextPath + \"/registryaccount/getRolesForUser\", { userOID: userOID }, { headers: headers })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Progress } from \"@shared/model/progress\";\n\nexport interface IProgressListener {\n    start(): void;\n    progress(progress: Progress): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n\n    private listeners: IProgressListener[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    public constructor() { }\n\n    public registerListener(listener: IProgressListener): void {\n        this.listeners.push(listener);\n    }\n\n    public deregisterListener(listener: IProgressListener): boolean {\n        let indexOfItem = this.listeners.indexOf(listener);\n\n        if (indexOfItem === -1) {\n            return false;\n        }\n\n        this.listeners.splice(indexOfItem, 1);\n\n        return true;\n    }\n\n    public start(): void {\n        for (const listener of this.listeners) {\n            listener.start();\n        }\n    }\n\n    public progress(progress: Progress): void {\n        for (const listener of this.listeners) {\n            listener.progress(progress);\n        }\n    }\n\n    public complete(): void {\n        for (const listener of this.listeners) {\n            listener.complete();\n        }\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"./event.service\";\n\nimport { AuthService } from \"./auth.service\";\nimport { User } from \"@shared/model/user\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class SessionService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService, private http: HttpClient, private authService: AuthService) { }\n\n    login(username: string, password: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.service.start();\n\n        return this.http\n            .post<User>(registry.contextPath + \"/cgrsession/login\", JSON.stringify({ username: username, password: password }), { headers: headers })\n            .pipe(finalize(() => {\n                this.service.complete();\n            }))\n            .toPromise()\n            .then((logInResponse: any) => {\n                this.authService.afterLogIn(logInResponse);\n\n                return logInResponse;\n            })\n    }\n\n    logout(): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>(registry.contextPath + \"/session/logout\", { headers: headers })\n            .pipe(finalize(() => {\n                this.service.complete();\n            }))\n            .toPromise()\n            .then((response: any) => {\n                this.authService.afterLogOut();\n\n                return response;\n            })\n    }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"error-message\",\n    templateUrl: \"./error-message.component.html\",\n    styleUrls: [\"./error-message.css\"]\n})\nexport class ErrorMessageComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"error.modal.default.message\");\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private localizeService: LocalizationService) { }\n\n}\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\n@Component({\n    selector: \"confirm-modal\",\n    templateUrl: \"./confirm-modal.component.html\",\n    styleUrls: [\"./modal.css\"]\n})\nexport class ConfirmModalComponent implements OnInit, OnDestroy {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    /*\n     * Called on cancel\n     */\n    public onCancel: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n        this.onCancel = new Subject();\n    }\n\n    ngOnDestroy(): void {\n        this.onConfirm.unsubscribe();\n        this.onCancel.unsubscribe();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next(this.data);\n    }\n\n    cancel(): void {\n        this.bsModalRef.hide();\n        this.onCancel.next(this.data);\n    }\n\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>{{cancelText}}</span>\n          </button>\n          <button type=\"button\" (click)=\"confirm()\"\n            [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n            aria-disabled=\"false\">\n            <span>{{submitText}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"error-modal\",\n    templateUrl: \"./error-modal.component.html\",\n    styleUrls: [\"./error-modal.css\"]\n})\nexport class ErrorModalComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"error.modal.default.message\");\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"success-modal\",\n    templateUrl: \"./success-modal.component.html\",\n    styleUrls: [\"./success-modal.css\"]\n})\nexport class SuccessModalComponent implements OnInit {\n\n    /*\n     * Message\n     */\n    @Input() message: string;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.close\");\n\n    public onConfirm: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.message = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next();\n    }\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"confirm()\">\n\t\t\t\t\t\t<span>{{submitText}}</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\n</div>\n","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\nexport class GenericButton {\n\n    label: string;\n    onClick: Function;\n    shouldClose: boolean;\n    class: string;\n\n}\n\n@Component({\n    selector: \"generic-modal\",\n    templateUrl: \"./generic-modal.component.html\",\n    styleUrls: [\"./modal.css\"]\n})\nexport class GenericModalComponent {\n\n    /*\n     * Message\n     */\n    message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    buttons: GenericButton[] = [];\n\n    data: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    init(message: string, buttons: GenericButton[]): void {\n        this.message = message;\n        this.buttons = buttons;\n    }\n\n    onClick(button: GenericButton): void {\n        if (button.shouldClose) {\n            this.bsModalRef.hide();\n        }\n\n        button.onClick(this.data);\n    }\n\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button *ngFor=\"let button of buttons\" type=\"button\" (click)=\"onClick(button)\" class=\"btn\" [class]=\"button.class\" role=\"button\" aria-disabled=\"false\">\n            <span>{{button.label}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","/* eslint-disable no-use-before-define */\n/* eslint-disable padded-blocks */\nimport { LocalizedValue, PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ImportConfiguration } from \"./io\";\nimport { GovernanceStatus, ConflictType } from \"./constants\";\nimport Utils from \"@registry/utility/Utils\";\nimport { RegistryService } from \"@registry/service\";\n\nexport const PRESENT: string = \"5000-12-31\";\n\n/**\n * Provides a reusable TypeCache which can be used across the app. Types will be automatically fetched\n * from the server when the cache is constructed, however since Javascript is non-blocking they are not\n * guaranteed to be available, especially if they are in the process of being fetched from the server.\n * If you have an operation which needs to wait on the types, you may call the waitOnTypes method.\n */\nexport class GeoObjectTypeCache {\n\n    private registryService: RegistryService;\n\n    private types: GeoObjectType[];\n\n    private refreshPromise: Promise<GeoObjectType[]>;\n\n    public constructor(registryService: RegistryService) {\n        this.registryService = registryService;\n\n        this.refreshPromise = this.refresh();\n    }\n\n    public waitOnTypes(): Promise<GeoObjectType[]> {\n        if (this.refreshPromise) {\n            return this.refreshPromise;\n        } else if (this.types == null) {\n            return (this.refreshPromise = this.refresh());\n        } else {\n            return new Promise<GeoObjectType[]>((resolve, reject) => resolve(this.types));\n        }\n    }\n\n    public ready(): boolean {\n        return this.types != null;\n    }\n\n    public refresh(): Promise<GeoObjectType[]> {\n        return this.registryService.getGeoObjectTypes(null, null).then(types => {\n            this.refreshPromise = null;\n            this.types = types;\n            return this.types;\n        }).catch(e => {\n            this.types = null;\n            this.refreshPromise = null;\n\n            return this.types;\n        });\n    }\n\n    public getTypeByCode(code: string): GeoObjectType {\n        if (!this.types) {\n            return null;\n        }\n\n        let index = this.types.findIndex(type => type.code === code);\n\n        if (index === -1) {\n            return null;\n        } else {\n            return this.types[index];\n        }\n    }\n\n    public getTypes() {\n        return this.types;\n    }\n\n}\n\nexport class TreeEntity {\n    id: string;\n    name: string;\n    hasChildren: boolean;\n}\n\nexport class Term {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n\n    constructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n        this.code = code;\n        this.label = label;\n        this.description = description;\n    }\n\n    children: Term[] = [];\n\n    addChild(term: Term) {\n        this.children.push(term);\n    }\n}\n\nexport class GeoObject {\n    type: string;\n    geometry: any;\n    properties: {\n        uid: string,\n        code: string,\n        displayLabel: LocalizedValue,\n        type: string,\n        status: string[],\n        sequence: string\n        createDate: string,\n        lastUpdateDate: string,\n        invalid: boolean,\n        exists: boolean,\n        writable?: boolean\n    };\n}\n\nexport interface AttributedType {\n    code: string;\n    attributes?: Array<AttributeType | AttributeTermType | AttributeDecimalType>;\n}\n\nexport class GeoObjectType implements AttributedType {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    geometryType?: string;\n    isLeaf: boolean;\n    isGeometryEditable: boolean;\n    organizationCode: string;\n    attributes: Array<AttributeType | AttributeTermType | AttributeDecimalType> = [];\n    relatedHierarchies?: string[];\n    superTypeCode?: string;\n    isAbstract?: boolean;\n    isPrivate?: boolean;\n    canDrag?: boolean;\n    permissions?: string[];\n\n    public static getAttribute(type: GeoObjectType, name: string) {\n        let len = type.attributes.length;\n        for (let i = 0; i < len; i++) {\n            let attr: any = type.attributes[i];\n\n            if (attr.code === name) {\n                return attr;\n            }\n        }\n\n        return null;\n    }\n\n    public static getGeoObjectTypeTermAttributeOptions(geoObjectType: GeoObjectType, termAttributeCode: string) {\n        for (let i = 0; i < geoObjectType.attributes.length; i++) {\n            let attr: any = geoObjectType.attributes[i];\n\n            if (attr.type === \"term\" && attr.code === termAttributeCode) {\n                attr = <AttributeTermType>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if (attrOpts.length > 0) {\n                    if (attr.code === \"status\") {\n                        return Utils.removeStatuses(attrOpts);\n                    } else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n}\n\nexport class Task {\n    id: string;\n    templateKey: string;\n    msg: string;\n    title: string;\n    status: string;\n    createDate: number;\n    completedDate: number;\n}\n\nexport class GeoObjectOverTime {\n\n    geoObjectType: GeoObjectType;\n\n    attributes: any;\n\n    public constructor(geoObjectType: GeoObjectType, attributes: any) {\n        this.geoObjectType = geoObjectType;\n        this.attributes = attributes;\n    }\n\n    public getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n        let retVot = { startDate: date, endDate: null, value: null };\n\n        const time = date.getTime();\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if (attr.code === attrCode) {\n                if (attr.type === \"local\") {\n                    retVot.value = lService.create();\n                }\n\n                if (attr.isChangeOverTime) {\n                    let values = this.attributes[attr.code].values;\n\n                    values.forEach(vot => {\n\n                        const startDate = Date.parse(vot.startDate);\n                        const endDate = Date.parse(vot.endDate);\n\n                        if (time >= startDate && time <= endDate) {\n\n                            if (attr.type === \"local\") {\n                                retVot.value = JSON.parse(JSON.stringify(vot.value));\n                            } else if (attr.type === \"term\" && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n                                retVot.value = vot.value[0];\n                            } else {\n                                retVot.value = vot.value;\n                            }\n                        }\n                    });\n                } else {\n                    retVot.value = this.attributes[attr.code];\n                }\n\n                break;\n            }\n        }\n\n        return retVot;\n    }\n}\n\nexport class ConflictMessage {\n    message: string;\n    severity: string;\n    type: ConflictType;\n}\n\nexport interface TimeRangeEntry {\n    startDate: string;\n    endDate: string;\n    oid?: string;\n    value?: any;\n}\n\nexport class ValueOverTime implements TimeRangeEntry {\n    oid: string;\n    startDate: string;\n    endDate: string;\n    value: any;\n    removable?: boolean;\n}\n\nexport class AttributeOverTime {\n    name: string;\n    type: string;\n    values: ValueOverTime[];\n}\n\nexport class AttributeType {\n    code: string; // On the back-end this is referred to as the AttributeType's 'name'. They are the same concept.\n    type: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    isDefault: boolean;\n    required: boolean;\n    unique: boolean;\n    governanceStatus: GovernanceStatus;\n    isChangeOverTime?: boolean;\n    precision?: number;\n    scale?: number;\n    classificationType?: string;\n    rootTerm?: Term;\n    isValid?: boolean;\n    isValidReason?: { timeConflict: boolean, existConflict: boolean, dateField: boolean };\n    isValidReasonHierarchy?: any;\n\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n        this.code = code;\n        this.type = type;\n        this.label = label;\n        this.description = description;\n        this.isDefault = isDefault;\n        this.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n        this.unique = unique;\n        this.isChangeOverTime = isChangeOverTime;\n    }\n\n}\n\nexport class AttributeTermType extends AttributeType {\n\n    // descendants: Attribute[];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n        super(code, type, label, description, isDefault, required, unique, isChange);\n    }\n\n    rootTerm: Term = new Term(null, null, null);\n\n    termOptions: Term[] = [];\n\n    setRootTerm(term: Term) {\n        this.rootTerm = term;\n    }\n}\n\nexport class AttributeDecimalType extends AttributeType {\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n        super(code, type, label, description, isDefault, required, unique, isChange);\n\n        this.precision = 32;\n        this.scale = 8;\n    }\n}\n\nexport class TreeNode {\n    geoObject: GeoObject;\n    hierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n    children: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n    parents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n    state: string;\n    attribute: any;\n    termOption: any;\n}\n\nexport class AbstractScheduledJob {\n    jobId: string;\n    historyId: string;\n    stage: string;\n    status: string;\n    author: string;\n    createDate: string;\n    lastUpdateDate: string;\n    workProgress: number;\n    workTotal: number;\n    startDate: string;\n    endDate: string;\n}\n\nexport class ScheduledJob extends AbstractScheduledJob {\n    importedRecords: number;\n    exportedRecords: number;\n    configuration: ImportConfiguration;\n    importErrors: PageResult<any>;\n    exportErrors: PageResult<any>;\n    problems: PageResult<any>;\n    fileName: string;\n    exception?: { type: string, message: string };\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n    stepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n    exception: ServerException;\n    object: ImportErrorObject;\n    objectType: string;\n    id: string;\n    resolution: string;\n    selected?: boolean;\n}\n\nexport class ServerException {\n    attributes: ServerExceptionAttribute[];\n    type: string;\n    message: string;\n}\n\nexport class ServerExceptionAttribute {\n    value: string;\n    key: string;\n}\n\nexport class ImportErrorObject {\n    geoObject: GeoObjectOverTime;\n    parents: HierarchyOverTime[];\n    isNew: boolean;\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    complete?: boolean;\n    enabled?: boolean;\n    status?: string;\n}\n\nexport class HierarchyOverTime {\n    code: string;\n    label: string;\n    types: {\n        code: string;\n        label: string;\n    }[];\n\n    entries: HierarchyOverTimeEntry[];\n}\n\nexport class HierarchyOverTimeEntry implements TimeRangeEntry {\n    startDate: string;\n    endDate: string;\n    oid: string;\n    parents: { [k: string]: HierarchyOverTimeEntryParent };\n    loading?: any;\n    conflictType?: string;\n    conflictMessage?: any[];\n}\n\nexport class HierarchyOverTimeEntryParent {\n    text: string;\n    geoObject: GeoObject;\n    goCode?: string;\n}\n\nexport class SynchronizationConfig {\n    oid?: string;\n    type?: string;\n    systemLabel?: string;\n    isImport?: boolean;\n    organization: string;\n    system: string;\n    hierarchy: string;\n    label: LocalizedValue;\n    configuration: any;\n}\n\nexport class OrgSyncInfo {\n    label: string;\n    code: string;\n    hierarchies: { label: string, code: string }[];\n    systems: { label: string, oid: string, type: string }[];\n}\n\nexport class ExportScheduledJob extends AbstractScheduledJob {\n    stepConfig?: StepConfig;\n}\n","import { Component, Input, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { DateService } from \"@shared/service\";\n\n@Component({\n    selector: \"date-text\",\n    templateUrl: \"./date-text.component.html\",\n    styleUrls: []\n})\nexport class DateTextComponent implements OnChanges {\n\n    @Input() date: string = null;\n    formattedDate: string = null;\n\n    constructor(private service: DateService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.date != null) {\n            this.formattedDate = this.service.formatDateForDisplay(changes.date.currentValue);\n        }\n    }\n\n}\n","<ng-container>\n\t{{formattedDate}}\n</ng-container>","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, ViewChild } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { BsDatepickerConfig, BsDatepickerDirective } from \"ngx-bootstrap/datepicker\";\n\nimport { PRESENT } from \"@registry/model/registry\";\n\n@Component({\n    selector: \"date-field\",\n    templateUrl: \"./date-field.component.html\",\n    styleUrls: [\"./date-field.css\"]\n})\n\nexport class DateFieldComponent {\n\n    @ViewChild(BsDatepickerDirective, { static: false }) datepicker: BsDatepickerDirective;\n\n    @Input() allowFutureDates: boolean = true;\n    @Input() allowInfinity: boolean = false;\n    @Input() inputName: string = this.idGenerator();\n    @Input() classNames: string = \"\";\n    @Input() customStyles: string = \"\";\n    @Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n    @Input() label: string = \"\"; // raw string input\n    @Input() disable: boolean = false;\n    @Input() required: boolean = false;\n    @Input() placement: string = \"bottom\";\n    @Input() oldDate: string = null;\n    @Input() title: string = \"\";\n    @Input() placeholder: string = \"YYYY-MM-DD\";\n\n    _value: Date;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set value(value) {\n        if (value) {\n            this.setValue(value || null);\n        }\n    }\n\n    @Output() public valueChange = new EventEmitter<string>();\n\n    /* You can pass a function in with (change)='function()' */\n    @Output() public change = new EventEmitter<any>();\n\n    today: Date = new Date();\n    message: string;\n    returnFocusToInput: boolean = false;\n    valueIsPresent: boolean = false;\n\n    @Input() valid: boolean = true;\n    @Output() public validChange = new EventEmitter<boolean>();\n\n    constructor(private localizationService: LocalizationService, private bsDatepickerConfig: BsDatepickerConfig, private changeDetectorRef: ChangeDetectorRef, private dateService: DateService) {\n        this.bsDatepickerConfig.dateInputFormat = \"YYYY-MM-DD\";\n    }\n\n    private setValue(value: string | number): void {\n        // @ts-ignore\n        if (!isNaN(value)) {\n            // @ts-ignore\n            value = parseInt(value);\n        }\n\n        if (value && typeof value === \"string\") {\n            let date = new Date(+value.split(\"-\")[0], +value.split(\"-\")[1] - 1, +value.split(\"-\")[2]);\n\n            if (value === PRESENT) {\n                this.valueIsPresent = true;\n            }\n\n            this._value = date;\n        } else if (value && typeof value === \"number\") {\n            // Custom attributes of date type come through as UTC time\n            this._value = new Date(new Date(value).getUTCFullYear(), new Date(value).getUTCMonth(), new Date(value).getUTCDate());\n        } else {\n            this._value = null;\n        }\n    }\n\n    public getValue(): Date {\n        return this._value;\n    }\n\n    public setInvalid(message: string) {\n        this.valid = false;\n        this.message = message;\n    }\n\n    idGenerator() {\n        let S4 = function() {\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n        };\n        return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n    }\n\n    isEqual(date1: Date, date2: Date): boolean {\n        let equal = false;\n\n        if (date1 && date2) {\n            // if(date1.toISOString().substr(0, 10) === PRESENT && date2.toISOString().substr(0, 10) === PRESENT){\n            if (date1.getTime() === date2.getTime()) {\n                return true;\n            }\n        }\n\n        return equal;\n    }\n\n    toggleInfinity(): void {\n        let date = this.getValue();\n\n        if (date && this.isEqual(date, this.dateService.getPresentDate())) {\n            this.setValue(null); // clear the date picker\n            this.valueChange.emit(null);\n            this.valueIsPresent = false;\n        } else {\n            this.setValue(PRESENT);\n            this.valueChange.emit(this.dateService.getDateString(this.getValue()));\n            this.valueIsPresent = true;\n        }\n\n        this.change.emit();\n    }\n\n    toggle(event: Date): void {\n        setTimeout(() => {\n            let validity = this.dateService.validateDate(event, this.required, this.allowFutureDates);\n            this.valid = validity.valid;\n            this.message = validity.message;\n\n            if (this.valid) {\n                // Must adhere to the ISO 8601 format\n                let formattedDate = this.dateService.getDateString(event);\n\n                if (formattedDate === PRESENT) {\n                    this.valueIsPresent = true;\n                } else {\n                    this.valueIsPresent = false;\n                }\n\n                this.valueChange.emit(formattedDate);\n            } else {\n                // hack to avoid ngx-datepicker from putting \"invalid date\" in the input\n                this.setValue(null);\n\n                this.valueChange.emit(null);\n            }\n\n            this.change.emit();\n            this.validChange.emit(this.valid);\n        }, 0);\n    }\n\n}\n","\n<label for=\"{{inputName}}\" *ngIf=\"label.length > 0\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n<label for=\"{{inputName}}\" *ngIf=\"localizeLabelKey.length > 0\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n\n<!-- <input id=\"date-input\" [class]=\"classNames\" name=\"{{inputName}}\" [(ngModel)]=\"value\" (change)=\"toggle($event)\" type=\"date\" max=\"{{today|date:'yyyy-MM-dd'}}\" [disabled]=\"disable\" [required]=\"required\"/> -->\n\n<div [hidden]=\"valueIsPresent\">\n  <span class=\"wrapper\">\n      <input [class]=\"classNames ? classNames + ' ' + 'date-input-element' : 'date-input-element'\" \n           [style]=\"customStyles ? customStyles : ''\"\n           name=\"{{inputName}}\"\n           type=\"text\"\n           [placeholder]=\"placeholder\"\n           [bsValue]=\"_value\"\n           [value]=\"_value | date: 'yyyy-MM-dd'\"\n           (bsValueChange)=\"toggle($event)\"\n           [bsConfig]=\"{\n              dateInputFormat: 'YYYY-MM-DD', \n              containerClass: 'theme-default', \n              returnFocusToInput: returnFocusToInput,\n              adaptivePosition: true\n              }\"\n           [outsideClick]=\"true\"\n           placement=\"{{placement}}\"\n           [maxDate]=\"allowFutureDates ? null : today\"\n           [isDisabled]=\"disable\"\n           [disabled]=\"disable\"\n           bsDatepicker\n           #dp=\"bsDatepicker\"\n           title=\"{{title}}\"\n           autocomplete=\"off\"\n           >\n  </span>\n  \n  <div class=\"form-input-validation-error-message-wrapper\">\n    <p *ngIf=\"message\" class=\"error-message\">{{message}}</p>\n  </div>\n</div>\n\n<div *ngIf=\"oldDate\">\n  <p class=\"warning-text display-current-value\">\n    <localize key=\"change.request.changed.value.prefix\"></localize>\n    {{ oldDate }}\n  </p>\n</div>\n\n<p [hidden]=\"!valueIsPresent\" style=\"font-size:14px;margin:0;\"><localize key=\"changeovertime.manageVersions.infinity.endDate.label\"></localize></p>\n\n<div *ngIf=\"allowInfinity\" class=\"text-right\" style=\"padding: 10px 0;\">\n  <button class=\"btn btn-default\" style=\"margin:0;\" *ngIf=\"valueIsPresent\" (click)=\"toggleInfinity()\" [disabled]=\"disable\" title=\"{{title}}\"><localize key=\"manage.versions.enddate.set.date.button\"></localize></button> \n  <button class=\"btn btn-default\" style=\"margin:0;\" *ngIf=\"!valueIsPresent\" (click)=\"toggleInfinity()\" [disabled]=\"disable\" title=\"{{title}}\"><localize key=\"manage.versions.enddate.set.current.button\"></localize></button>\n</div>\n\n","import { ListColumn, ListTypeVersion } from \"@registry/model/list-type\";\nimport { AttributeType, GeoObject } from \"@registry/model/registry\";\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { GenericTableColumn, TableColumnSetup } from \"@shared/model/generic-table\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\n\nexport default class Utils {\n\n    /**\n     *\n     * @param arr\n     */\n    static removeStatuses(arr: any[]): any[] {\n        let newArray = [];\n\n        for (let i = 0; i < arr.length; ++i) {\n            if (!(arr[i].code === \"CGR:Status-New\" ||\n                arr[i].code === \"CGR:Status-Pending\")) {\n                newArray.push(arr[i]);\n            }\n        }\n\n        return newArray;\n    }\n\n    /**\n     *\n     * @param dateObj\n     */\n    static formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + (month < 10 ? \"0\" : \"\") + month + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n    }\n\n    static dateRangeOverlaps(aStart: number, aEnd: number, bStart: number, bEnd: number): boolean {\n        if (aStart <= bStart && bStart <= aEnd) return true; // b starts in a\n        if (aStart <= bEnd && bEnd <= aEnd) return true; // b ends in a\n        if (bStart < aStart && aEnd < bEnd) return true; // a in b\n        return false;\n    }\n\n    static dateRangeOutside(aStart: number, aEnd: number, bStart: number, bEnd: number): boolean {\n        if (aStart < bStart) return true;\n        if (aEnd > bEnd) return true;\n        return false;\n    }\n\n    static dateEndBeforeStart(start: number, end: number): boolean {\n        if (end < start) return true; // end date is before start date\n        return false;\n    }\n\n    static hasGap(aEnd: number, bStart: number): boolean {\n        return (bStart - aEnd) > (1000 * 60 * 60 * 24);\n    }\n\n    public static areValuesEqual(attributeType: AttributeType, val1: any, val2: any): boolean {\n        if (attributeType.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (attributeType.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (attributeType.type === \"geometry\") {\n            if (((val1 != null && val1.coordinates != null && val1.coordinates.length != null) && (val2 != null && val2.coordinates != null && val2.coordinates.length != null)) && val1.coordinates.length !== val2.coordinates.length) {\n                return false;\n            }\n            return turf_booleanequal(val1, val2);\n        } else if (attributeType.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (attributeType.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (attributeType.type === \"_PARENT_\" && val1.parents && val2.parents) {\n            for (const [gotCode, data] of Object.entries(val1.parents)) {\n                let parentData: { text: string, geoObject: GeoObject } = data as { text: string, geoObject: GeoObject };\n\n                if (val2.parents[gotCode]) {\n                    let parentData2: { text: string, geoObject: GeoObject } = val2.parents[gotCode];\n\n                    if (parentData.geoObject == null && parentData2.geoObject == null) {\n                        // equal, keep looping\n                    } else if ((parentData.geoObject == null && parentData2.geoObject != null) || (parentData2.geoObject == null && parentData.geoObject != null)) {\n                        return false;\n                    } else if (parentData.geoObject.properties.code !== parentData2.geoObject.properties.code) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        } else if (attributeType.type === \"integer\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (attributeType.type === \"float\") {\n            let casted1 = (typeof val1 === \"string\") ? parseFloat(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseFloat(val2) : val2;\n\n            return casted1 === casted2;\n        }\n\n        return val1 === val2;\n    }\n\n    public static getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n    static arrayMove(arr: any[], oldIndex: number, newIndex: number): void {\n        if (newIndex >= arr.length) {\n            let k = newIndex - arr.length + 1;\n            while (k--) {\n                arr.push(undefined);\n            }\n        }\n        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\n    }\n\n    static createColumn(attribute: ListColumn, readonly: boolean, autocomplete: Function): GenericTableColumn {\n        let column: GenericTableColumn = {\n            headerType: \"ATTRIBUTE\",\n            header: attribute.label,\n            field: attribute.name,\n            type: \"TEXT\",\n            sortable: !readonly,\n            filter: !readonly,\n            rowspan: attribute.rowspan,\n            colspan: attribute.colspan\n        };\n\n        if (attribute.type === \"date\") {\n            column.type = \"DATE\";\n        } else if (attribute.name === \"invalid\" || attribute.type === \"boolean\") {\n            column.type = \"BOOLEAN\";\n        } else if (attribute.type === \"number\") {\n            column.type = \"NUMBER\";\n        } else if (!readonly && attribute.type === \"list\") {\n            column.type = \"AUTOCOMPLETE\";\n            column.text = \"\";\n            column.onComplete = () => {\n                autocomplete(attribute, column);\n            };\n        }\n\n        return column;\n    }\n\n    static createColumns(list: ListTypeVersion, showInvalid: boolean, readonly: boolean, autocomplete?: Function): TableColumnSetup {\n        const displayInvalidColumn = (!readonly && showInvalid);\n        const columns = [];\n\n        const mainGroups: GenericTableColumn[] = [];\n        const subGroups: GenericTableColumn[] = [];\n        const orderedArray = [];\n\n        if (!readonly && (list.isMember || list.geospatialMetadata.visibility === \"PUBLIC\")) {\n            const column = { header: \"\", type: \"ACTIONS\", sortable: false, rowspan: 3, colspan: 1, headerType: \"ATTRIBUTE\" };\n\n            mainGroups.push(column);\n            columns.push(column);\n        }\n\n        list.attributes.forEach(group => {\n            if (displayInvalidColumn || group.name !== \"invalid\") {\n                mainGroups.push({\n                    header: group.label,\n                    colspan: group.colspan,\n                    rowspan: group.rowspan,\n                    headerType: \"GROUP\"\n                });\n\n                group.columns.forEach(subgroup => {\n                    if (subgroup.columns != null) {\n                        subGroups.push({\n                            header: subgroup.label,\n                            colspan: subgroup.colspan,\n                            rowspan: subgroup.rowspan,\n                            headerType: \"GROUP\"\n                        });\n\n                        subgroup.columns.forEach(attribute => {\n                            if (displayInvalidColumn || attribute.name !== \"invalid\") {\n                                const column = this.createColumn(attribute, readonly, autocomplete);\n\n                                orderedArray.push(column);\n                                columns.push(column);\n                            }\n                        });\n                    } else {\n                        if (displayInvalidColumn || subgroup.name !== \"invalid\") {\n                            const column = this.createColumn(subgroup, readonly, autocomplete);\n\n                            subGroups.push(column);\n                            columns.push(column);\n                        }\n                    }\n                });\n            }\n        });\n\n        return {\n            headers: [mainGroups, subGroups, orderedArray],\n            columns: columns\n        };\n    }\n\n}\n","\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { ErrorModalComponent } from \"@shared/component\";\n\nexport class ErrorHandler {\n\n    static getMessageFromError(err: any): string {\n        let unspecified = \"An unspecified error has occurred.  Please try your operation again.  If the problem continues, alert your technical support staff.\";\n\n        if (err == null) {\n            return unspecified;\n        } else {\n            console.log(\"An error has occurred: \", err);\n        }\n\n        let msg = null;\n\n        if (err.error != null && (typeof err.error === \"object\")) {\n            msg = err.error.localizedMessage || err.error.message;\n        }\n\n        if (msg == null) {\n            msg = err.message || err.msg || err.localizedMessage;\n        }\n\n        if (msg != null && msg.includes(\"##tferrormsg##\")) {\n            let split = msg.split(\"##tferrormsg##\");\n            return split[2];\n        }\n\n        if (msg == null) {\n            msg = unspecified;\n        }\n\n        return msg;\n    }\n\n    static showErrorAsDialog(err: any, modalService: BsModalService): BsModalRef {\n        if (err instanceof HttpErrorResponse && err.status === 401) {\n            return null;\n        }\n\n        let bsModalRef = modalService.show(ErrorModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n        bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\n        return bsModalRef;\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { ModalModule } from \"ngx-bootstrap/modal\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { CookieService } from \"ngx-cookie-service\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { BsDatepickerModule } from \"ngx-bootstrap/datepicker\";\n\nimport { TableModule } from \"primeng/table\";\nimport { SliderModule } from \"primeng/slider\";\nimport { DropdownModule } from \"primeng/dropdown\";\nimport { MultiSelectModule } from \"primeng/multiselect\";\nimport { ButtonModule } from \"primeng/button\";\nimport { AutoCompleteModule } from \"primeng/autocomplete\";\n\nimport { ErrorModalComponent } from \"./component/modals/error-modal.component\";\nimport { SuccessModalComponent } from \"./component/modals/success-modal.component\";\nimport { ConfirmModalComponent } from \"./component/modals/confirm-modal.component\";\nimport { GenericModalComponent } from \"./component/modals/generic-modal.component\";\nimport { ErrorMessageComponent } from \"./component/message/error-message.component\";\nimport { MessageComponent } from \"./component/message/message.component\";\nimport { BooleanFieldComponent } from \"./component/form-fields/boolean-field/boolean-field.component\";\nimport { DateFieldComponent } from \"./component/form-fields/date-field/date-field.component\";\nimport { LoadingBarComponent } from \"./component/loading-bar/loading-bar.component\";\nimport { PasswordStrengthBarComponent } from \"./component/password-strength-bar/password-strength-bar.component\";\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from \"./service/guard.service\";\nimport { PendingChangesGuard } from \"./service/pending-changes-guard\";\n\nimport { AuthService } from \"./service/auth.service\";\nimport { ProfileService } from \"./service/profile.service\";\nimport { OrganizationService } from \"./service/organization.service\";\nimport { ExternalSystemService } from \"./service/external-system.service\";\nimport { LocalizationService } from \"./service/localization.service\";\nimport { ProgressService } from \"./service/progress.service\";\nimport { EventService } from \"./service/event.service\";\nimport { ModalStepIndicatorService } from \"./service/modal-step-indicator.service\";\nimport { SessionService } from \"./service/session.service\";\nimport { DateService } from \"./service/date.service\";\n\nimport { LocalizePipe } from \"./pipe/localize.pipe\";\nimport { PhonePipe } from \"./pipe/phone.pipe\";\n\nimport { OnlyNumber } from \"./directive/number-only.directive\";\nimport { MustMatchDirective } from \"./directive/must-match.directive\";\n\nimport { CgrHeaderComponent } from \"./component/header/header.component\";\nimport { ProgressBarComponent } from \"./component/progress-bar/progress-bar.component\";\nimport { LocalizeComponent } from \"./component/localize/localize.component\";\nimport { ConvertKeyLabel } from \"./component/localize/convert-key-label.component\";\nimport { ModalStepIndicatorComponent } from \"./component/modals/modal-step-indicator.component\";\nimport { ProfileComponent } from \"./component/profile/profile.component\";\nimport { GenericTableComponent } from \"./component/generic-table/generic-table.component\";\nimport { DateTextComponent } from \"./component/date-text/date-text.component\";\n\nimport \"../rxjs-extensions\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        ModalModule.forRoot(),\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        CollapseModule,\n        NgxPaginationModule,\n        BsDatepickerModule.forRoot(),\n\n        TableModule,\n        SliderModule,\n        DropdownModule,\n        MultiSelectModule,\n        ButtonModule,\n        AutoCompleteModule\n    ],\n    declarations: [\n        LocalizeComponent,\n        ConvertKeyLabel,\n        BooleanFieldComponent,\n        DateFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        PasswordStrengthBarComponent,\n        OnlyNumber,\n        MustMatchDirective,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe,\n        GenericTableComponent,\n        DateTextComponent\n    ],\n    exports: [\n        LocalizeComponent,\n        ConvertKeyLabel,\n        BooleanFieldComponent,\n        DateFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        PasswordStrengthBarComponent,\n        OnlyNumber,\n        MustMatchDirective,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        GenericTableComponent,\n        DateTextComponent\n    ],\n    entryComponents: [\n        ErrorModalComponent,\n        SuccessModalComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ModalStepIndicatorComponent,\n        ErrorMessageComponent,\n        LoadingBarComponent,\n        ProfileComponent\n    ]\n})\nexport class SharedModule {\n\n    static forRoot(): ModuleWithProviders<SharedModule> {\n        return {\n            ngModule: SharedModule,\n            providers: [\n                CookieService,\n                AuthService,\n                SessionService,\n                ProfileService,\n                OrganizationService,\n                ExternalSystemService,\n                LocalizationService,\n                DateService,\n                ModalStepIndicatorService,\n                EventService,\n                ProgressService,\n                AdminGuard,\n                MaintainerGuard,\n                ContributerGuard,\n                AuthGuard,\n                PendingChangesGuard\n            ]\n        };\n    }\n\n}\n","export enum ActionTypes {\n    \"CREATEGEOOBJECTACTION\" = \"CreateGeoObjectAction\",\n    \"UPDATEATTRIBUTETACTION\" = \"UpdateAttributeAction\",\n    \"UPDATEGEOOBJECTACTION\" = \"UpdateGeoObjectAction\" // Deprecated DO NOT USE\n}\n\nexport enum GovernanceStatus {\n    \"PENDING\" = \"PENDING\",\n    \"ACCEPTED\" = \"ACCEPTED\",\n    \"REJECTED\" = \"REJECTED\"\n}\n\nexport enum GeoObjectTypeModalStates {\n    \"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n    \"editAttribute\" = \"EDIT-ATTRIBUTE\",\n    \"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n    \"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n    \"editTermOption\" = \"EDIT-TERM-OPTION\",\n    \"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport enum ImportStrategy {\n    \"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n    \"NEW_ONLY\" = \"NEW_ONLY\",\n    \"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport enum ConflictType {\n    MISSING_REFERENCE = \"MISSING_REFERENCE\",\n    TIME_RANGE = \"TIME_RANGE\",\n    OUTSIDE_EXISTS = \"OUTSIDE_EXISTS\"\n}\n\nexport enum ChangeType {\n    END_DATE = \"endDate\",\n    START_DATE = \"startDate\",\n    VALUE = \"value\",\n    REMOVE = \"remove\",\n    ADD = \"add\"\n}\n\nexport const OverlayerIdentifier = {\n    LAYER_PANEL: \"layer-panel\",\n    FEATURE_PANEL: \"feature-panel\",\n    SEARCH_PANEL: \"search-panel\",\n    VISUALIZER_PANEL: \"visualizer-panel\",\n    LIST_MODAL: \"list-modal\"\n} \n","import { Input, Component, OnInit } from \"@angular/core\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { LocaleView, LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n\n    selector: \"convert-key-label\",\n    templateUrl: \"./convert-key-label.component.html\",\n    styleUrls: []\n})\nexport class ConvertKeyLabel implements OnInit {\n\n    @Input() key: any;\n    text: string;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        if (this.key != null && this.key.label != null && this.key.label.localizedValue != null) {\n            this.text = this.key.label.localizedValue;\n            return;\n        }\n\n        let locales: LocaleView[] = this.authService.getLocales();\n\n        let len = locales.length;\n        for (let i = 0; i < len; ++i) {\n            let locale: LocaleView = locales[i];\n\n            if (locale.toString === this.key) {\n                this.text = this.getValue(locale.label, this.service.getLocale());\n\n                return;\n            }\n        }\n\n        if (this.key === \"defaultLocale\") {\n            this.text = this.service.decode(\"localization.defaultLocal\");\n        } else {\n            this.text = this.key;\n        }\n    }\n\n    public getValue(lv: LocalizedValue, localeToString: string): string {\n        let len = lv.localeValues.length;\n\n        for (let i = 0; i < len; ++i) {\n            let value = lv.localeValues[i];\n\n            if (value.locale === localeToString) {\n                return value.value;\n            }\n        }\n\n        return lv.localizedValue;\n    }\n\n}\n","{{text}}","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"boolean-field\",\n    templateUrl: \"./boolean-field.component.html\",\n    styleUrls: [\"./boolean-field.css\"]\n})\nexport class BooleanFieldComponent {\n\n    @Input() value: boolean = false;\n    @Output() public valueChange = new EventEmitter<boolean>();\n\n    @Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n    @Input() label: string = \"\"; // raw string input\n\n    @Input() disable: boolean = false;\n\n    /* You can pass a function in with (change)='function()' */\n    @Output() public change = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    toggle(): void {\n        if (!this.disable) {\n            this.value = !this.value;\n\n            this.valueChange.emit(this.value);\n            this.change.emit(this.value);\n        }\n    }\n}","<div (click)=\"toggle()\" class=\"check-block\" [ngClass]=\"{'dizabled': disable}\">\n  <div [ngClass]=\"{'chk-checked' : value}\" ng-style=\"chkstyle\" class=\"chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label && label.length > 0\" class=\"checkbox-label\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey && localizeLabelKey.length > 0\" class=\"checkbox-label\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy, ViewChild, AfterViewInit, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { FilterMetadata, LazyLoadEvent } from \"primeng/api\";\nimport { Table } from \"primeng/table\";\n\nimport { Subject } from \"rxjs\";\nimport { GenericTableColumn, GenericTableConfig, TableColumnSetup, TableEvent } from \"@shared/model/generic-table\";\nimport { PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"generic-table\",\n    templateUrl: \"./generic-table.component.html\",\n    styleUrls: [\"./generic-table.css\"]\n})\nexport class GenericTableComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {\n\n    page: PageResult<Object> = {\n        resultSet: [],\n        count: 0,\n        pageNumber: 1,\n        pageSize: 30\n    };\n\n    @Input() setup: TableColumnSetup;\n\n    @Input() pageConfig: any = null;\n\n    @Input() config: GenericTableConfig;\n\n    @Input() refresh: Subject<void>;\n\n    @Input() initialState: LazyLoadEvent = null;\n\n    @Output() click = new EventEmitter<TableEvent>();\n    @Output() onLoadEvent = new EventEmitter<LazyLoadEvent>();\n\n    @Input() paginator: boolean = true;\n\n    @Input() scrollable: boolean = false;\n\n    @ViewChild(\"dt\") dt: Table;\n\n    first: number = 0;\n\n    loading: boolean = true;\n\n    booleanOptions: any = [];\n\n    hasFilter: boolean = false;\n\n    event: LazyLoadEvent = null;\n\n    constructor(private localizationService: LocalizationService) {\n        this.booleanOptions = [\n            { label: \"\", value: null },\n            { value: true, label: this.localizationService.decode(\"change.request.boolean.option.true\") },\n            { value: false, label: this.localizationService.decode(\"change.request.boolean.option.false\") }\n        ];\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n    }\n\n    ngOnInit(): void {\n        if (this.initialState != null) {\n            this.first = this.initialState.first != null ? this.initialState.first : 0;\n\n            if (this.initialState.multiSortMeta != null) {\n                this.config.sort = this.initialState.multiSortMeta;\n            }\n        }\n\n        this.loadColumns();\n\n        if (this.refresh != null) {\n            this.refresh.subscribe(() => {\n                if (this.event != null) {\n                    this.onPageChange(this.event);\n                }\n            });\n        }\n\n        if (this.config.baseZIndex == null) {\n            this.config.baseZIndex = 0;\n        }\n\n        if (this.config.pageSize != null) {\n            this.page.pageSize = this.config.pageSize;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        if (this.dt != null && this.initialState != null) {\n            if (this.initialState.filters != null) {\n                const keys = Object.keys(this.initialState.filters);\n\n                keys.forEach(key => {\n                    const metadata: FilterMetadata = this.initialState.filters[key];\n\n                    this.dt.filter(metadata.value, key, metadata.matchMode);\n                });\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.refresh != null) {\n            this.refresh.unsubscribe();\n        }\n    }\n\n    loadColumns(): void {\n        this.setup.columns.forEach(column => {\n            if (column.headerType === \"ATTRIBUTE\") {\n                if (column.filter) {\n                    this.hasFilter = true;\n                }\n\n                if (column.type === \"DATE\") {\n                    if (this.initialState != null && this.initialState.filters != null && this.initialState.filters[column.field] != null) {\n                        const dates = this.initialState.filters[column.field].value;\n\n                        column.startDate = dates.startDate;\n                        column.endDate = dates.endDate;\n                    }\n                } else if (column.type === \"BOOLEAN\") {\n                    if (this.initialState != null && this.initialState.filters != null && this.initialState.filters[column.field] != null) {\n                        column.value = this.initialState.filters[column.field].value;\n                    }\n                } else if (column.type === \"NUMBER\") {\n                    if (this.initialState != null && this.initialState.filters != null && this.initialState.filters[column.field] != null) {\n                        column.value = this.initialState.filters[column.field].value;\n                    }\n                } else if (column.type === \"AUTOCOMPLETE\") {\n                    if (this.initialState != null && this.initialState.filters != null && this.initialState.filters[column.field] != null) {\n                        column.text = this.initialState.filters[column.field].value;\n                    }\n                }\n            }\n        });\n    }\n\n    onPageChange(event: LazyLoadEvent): void {\n        this.loading = true;\n        this.event = event;\n\n        setTimeout(() => {\n            this.config.service.page(event, this.pageConfig).then(page => {\n                this.page = page;\n\n                this.onLoadEvent.emit(event);\n            }).finally(() => {\n                this.loading = false;\n            });\n        }, 1000);\n    }\n\n    onClick(type: string, row: Object, col: GenericTableColumn): void {\n        this.click.emit({\n            type: type,\n            row: row,\n            col: col\n        });\n    }\n\n    onComplete(col: GenericTableColumn, event: LazyLoadEvent): void {\n        col.onComplete();\n    }\n\n    getColumnType(row: Object, col: GenericTableColumn): string {\n        if (col.columnType != null) {\n            return col.columnType(row);\n        }\n\n        return col.type;\n    }\n\n    handleFilter(event: LazyLoadEvent): void {\n        this.onLoadEvent.emit(event);\n    }\n\n}\n","<div>\n\t<p-table #dt [columns]=\"setup.columns\" [value]=\"page.resultSet\" [autoLayout]=\"true\" [scrollable]=\"false\"\n\t\t[resizableColumns]=\"true\" sortMode=\"multiple\" styleClass=\"p-datatable-gridlines\" [lazy]=\"true\"\n\t\t(onLazyLoad)=\"onPageChange($event)\" [paginator]=\"true\" [totalRecords]=\"page.count\" [rows]=\"page.pageSize\"\n\t\t[loading]=\"loading\" [multiSortMeta]=\"config.sort != null ? config.sort : []\" (onFilter)=\"handleFilter($event)\">\n\n\t\t<ng-template pTemplate=\"colgroup\" let-columns>\n\t\t\t<colgroup>\n\t\t\t\t<col *ngFor=\"let col of columns\">\n\t\t\t</colgroup>\n\t\t</ng-template>\n\n\t\t<ng-template pTemplate=\"header\" let-columns>\n\t\t\t<tr *ngFor=\"let row of setup.headers\">\n\t\t\t\t<ng-container *ngFor=\"let col of row\">\n\t\t\t\t\t<th *ngIf=\"col.headerType !== 'ATTRIBUTE'\" [attr.colspan]=\"col.colspan\"\n\t\t\t\t\t\t[attr.rowspan]=\"col.rowspan\">\n\t\t\t\t\t\t{{col.header}}\n\t\t\t\t\t</th>\n\n\t\t\t\t\t<ng-container *ngIf=\"col.headerType === 'ATTRIBUTE'\">\n\t\t\t\t\t\t<th *ngIf=\"col.sortable\" [pSortableColumn]=\"col.field\"\n\t\t\t\t\t\t\t[ngClass]=\"{'actions-col' : col.type === 'ACTIONS'}\" pResizableColumn\n\t\t\t\t\t\t\t[attr.colspan]=\"col.colspan\" [attr.rowspan]=\"col.rowspan\">\n\t\t\t\t\t\t\t{{col.header}}\n\t\t\t\t\t\t\t<p-sortIcon [field]=\"col.field\" ariaLabel=\"Activate to sort\" style=\"float:right;\"\n\t\t\t\t\t\t\t\tariaLabelDesc=\"Activate to sort in descending order\"\n\t\t\t\t\t\t\t\tariaLabelAsc=\"Activate to sort in ascending order\">\n\t\t\t\t\t\t\t</p-sortIcon>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t\t<th *ngIf=\"!col.sortable\" [ngClass]=\"{'actions-col' : col.type === 'ACTIONS'}\" pResizableColumn\n\t\t\t\t\t\t\t[attr.colspan]=\"col.colspan\" [attr.rowspan]=\"col.rowspan\">\n\t\t\t\t\t\t\t{{col.header}}\n\t\t\t\t\t\t</th>\n\n\t\t\t\t\t</ng-container>\n\t\t\t\t</ng-container>\n\t\t\t</tr>\n\n\t\t\t<!-- Create filter columns -->\n\t\t\t<tr *ngIf=\"hasFilter\">\n\t\t\t\t<th *ngFor=\"let col of columns\" [ngSwitch]=\"col.type\">\n\t\t\t\t\t<ng-container *ngIf=\"col.filter !== false\">\n\t\t\t\t\t\t<input *ngSwitchCase=\"'URL'\" pInputText type=\"text\"\n\t\t\t\t\t\t\t(input)=\"dt.filter($event.target.value, col.field, 'contains')\">\n\t\t\t\t\t\t<input *ngSwitchCase=\"'TEXT'\" pInputText type=\"text\"\n\t\t\t\t\t\t\t(input)=\"dt.filter($event.target.value, col.field, 'contains')\">\n\t\t\t\t\t\t<input *ngSwitchCase=\"'NUMBER'\" pInputNumber type=\"number\" step=\"any\"\n\t\t\t\t\t\t\t(input)=\"dt.filter($event.target.value, col.field, 'equals')\">\n\t\t\t\t\t\t<ng-container *ngSwitchCase=\"'DATE'\">\n\t\t\t\t\t\t\t<date-field [(value)]=\"col.startDate\" [classNames]=\"'search-input'\"\n\t\t\t\t\t\t\t\t(change)=\"dt.filter({startDate:col.startDate, endDate:col.endDate}, col.field, 'between')\"\n\t\t\t\t\t\t\t\t[allowInfinity]=\"false\" [placement]=\"'bottom'\" customStyles=\"font-size: 10px;\"\n\t\t\t\t\t\t\t\t[placeholder]=\"'generic.table.to.date' | localize\">\n\t\t\t\t\t\t\t</date-field>\n\t\t\t\t\t\t\t<date-field [(value)]=\"col.endDate\" [classNames]=\"'search-input'\"\n\t\t\t\t\t\t\t\t(change)=\"dt.filter({startDate:col.startDate, endDate:col.endDate}, col.field, 'between')\"\n\t\t\t\t\t\t\t\t[allowInfinity]=\"false\" [placement]=\"'bottom'\" customStyles=\"font-size: 10px;\"\n\t\t\t\t\t\t\t\t[placeholder]=\"'generic.table.from.date' | localize\">\n\t\t\t\t\t\t\t</date-field>\n\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t<p-autoComplete *ngSwitchCase=\"'AUTOCOMPLETE'\" appendTo=\"body\" [(ngModel)]=\"col.text\"\n\t\t\t\t\t\t\t[suggestions]=\"col.results\" (completeMethod)=\"onComplete(col, $event)\"\n\t\t\t\t\t\t\t(onSelect)=\"dt.filter(col.text, col.field, 'equals')\"\n\t\t\t\t\t\t\t(onClear)=\"dt.filter(col.text, col.field, 'equals')\">\n\t\t\t\t\t\t</p-autoComplete>\n\t\t\t\t\t\t<p-dropdown *ngSwitchCase=\"'BOOLEAN'\" appendTo=\"body\" [options]=\"booleanOptions\"\n\t\t\t\t\t\t\t(onChange)=\"dt.filter($event.value.value, col.field, 'equals')\" optionLabel=\"label\"\n\t\t\t\t\t\t\toptionValue=\"value\" [virtualScroll]=\"true\"></p-dropdown>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</th>\n\t\t\t</tr>\n\t\t</ng-template>\n\n\t\t<ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n\t\t\t<tr>\n\t\t\t\t<td *ngFor=\"let col of columns\" [ngSwitch]=\"getColumnType(rowData, col)\" class=\"ui-resizable-column\"\n\t\t\t\t\t[ngClass]=\"{'actions-col' : col.type === 'ACTIONS'}\">\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'URL'\">\n\t\t\t\t\t\t<a [routerLink]=\"['/' + col.baseUrl + '/' + rowData[col.urlField]]\">\n\t\t\t\t\t\t\t{{rowData[col.field]}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'ACTIONS'\">\n\t\t\t\t\t\t<a *ngIf=\"config.view\" class=\"fa fa-eye ico-edit\" (click)=\"onClick('view', rowData, col)\"\n\t\t\t\t\t\t\t[title]=\"'View ' + config.label\"></a>\n\t\t\t\t\t\t<a *ngIf=\"config.edit\" class=\"fa fa-pencil-alt ico-edit\" (click)=\"onClick('edit', rowData, col)\"\n\t\t\t\t\t\t\t[title]=\"'Edit ' + config.label\"></a>\n\t\t\t\t\t\t<a *ngIf=\"config.remove\" class=\"fa fa-trash-alt ico-remove\"\n\t\t\t\t\t\t\t(click)=\"onClick('remove', rowData, col)\" [title]=\"'Remove ' + config.label\"></a>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'CONSTANT'\">\n\t\t\t\t\t\t<a *ngIf=\"rowData[col.field] != null\" (click)=\"onClick('custom', rowData, col)\">\n\t\t\t\t\t\t\t{{col.text}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'BOOLEAN'\">\n\t\t\t\t\t\t<localize *ngIf=\"rowData[col.field] === true\" key=\"change.request.boolean.option.true\">\n\t\t\t\t\t\t</localize>\n\t\t\t\t\t\t<localize *ngIf=\"rowData[col.field] === false\" key=\"change.request.boolean.option.false\">\n\t\t\t\t\t\t</localize>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'NONE'\">\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchCase=\"'DATE'\">\n\t\t\t\t\t\t<date-text [date]=\"rowData[col.field]\"></date-text>\n\t\t\t\t\t</ng-container>\n\t\t\t\t\t<ng-container *ngSwitchDefault>\n\t\t\t\t\t\t{{rowData[col.field]}}\n\t\t\t\t\t</ng-container>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</ng-template>\n\t\t<!-- \t\t<ng-template pTemplate=\"paginatorleft\"> -->\n\t\t<!-- \t\t\t<p-button *ngIf=\"config.create\" type=\"button\" icon=\"pi pi-plus\" [style]=\"{'border':'solid 1px'}\" -->\n\t\t<!-- \t\t\t\tstyleClass=\"p-button-text\" [label]=\"'Add new ' + config.label\" (click)=\"onClick('create', null, null)\"> -->\n\t\t<!-- \t\t\t</p-button> -->\n\t\t<!-- \t\t</ng-template> -->\n\t</p-table>\n\n\t<div style=\"width:100%;text-align:right;\">\n\t\t<button *ngIf=\"config.create\" (click)=\"onClick('create', null, null)\" style=\"margin: 10px 0 0;\"\n\t\t\tclass=\"btn btn-primary\">Add new {{config.label}}</button>\n\t</div>\n\n</div>","import { Directive, ElementRef, HostListener, Input } from \"@angular/core\";\n\n@Directive({\n    selector: \"[OnlyNumber]\"\n})\nexport class OnlyNumber {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private el: ElementRef) { }\n\n    @Input() OnlyNumber: boolean;\n\n    @HostListener(\"keydown\", [\"$event\"]) onKeyDown(event: any) {\n        let e = <KeyboardEvent>event;\n        if (this.OnlyNumber) {\n            if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n                // Allow: Ctrl+A\n                (e.keyCode === 65 && e.ctrlKey === true) ||\n                // Allow: Ctrl+C\n                (e.keyCode === 67 && e.ctrlKey === true) ||\n                // Allow: Ctrl+X\n                (e.keyCode === 88 && e.ctrlKey === true) ||\n                // Allow: home, end, left, right\n                (e.keyCode >= 35 && e.keyCode <= 39)) {\n                // let it happen, don't do anything\n                return;\n            }\n            // Ensure that it is a number and stop the keypress\n            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\n","import { Directive, Input } from \"@angular/core\";\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from \"@angular/forms\";\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        // return null if controls haven't initialised yet\n        if (!control || !matchingControl) {\n            return null;\n        }\n\n        // return null if another validator has already found an error on the matchingControl\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            return null;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    };\n}\n\n@Directive({\n    selector: \"[mustMatch]\",\n    providers: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\n    @Input(\"mustMatch\") mustMatch: string[] = [];\n\n    validate(formGroup: FormGroup): ValidationErrors {\n        return MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n    }\n\n}\n","/* eslint-disable padded-blocks */\nexport class Profile {\n    oid: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    changePassword?: boolean;\n    phoneNumber?: string;\n    altFirstName?: string;\n    altLastName?: string;\n    altPhoneNumber?: string;\n    position?: string;\n    department?: string;\n    externalSystemOid?: string;\n}","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { formatNumber, ParsedNumber } from \"libphonenumber-js\";\n\n@Pipe({\n    name: \"phone\"\n})\nexport class PhonePipe implements PipeTransform {\n\n    transform(value: ParsedNumber, args?: string): any {\n        if (!value) {\n            return value;\n        }\n\n        return formatNumber({ country: \"US\", phone: value.toString() }, \"International\");\n    }\n\n}\n","import { PageResult } from \"./core\";\n\nexport interface GenericTableService {\n    page(criteria: Object, pageConfig?: any): Promise<PageResult<Object>>;\n}\n\nexport class GenericTableConfig {\n\n    service: GenericTableService;\n    remove: boolean;\n    view?: boolean;\n    edit?: boolean;\n    create?: boolean;\n    label: string;\n    sort?: { field: string, order: number }[];\n    baseZIndex?: number;\n    pageSize?: number;\n\n}\n\nexport class GenericTableColumn {\n\n    headerType: string;\n    header: string;\n    rowspan: number;\n    colspan: number;\n    type?: string;\n    sortable?: boolean;\n    field?: string;\n    baseUrl?: string;\n    urlField?: string;\n    text?: string\n    filter?: boolean;\n    columnType?: Function;\n    onComplete?: Function;\n    results?: any[];\n    value?: any;\n    startDate?: string;\n    endDate?: string;\n\n}\n\nexport class TableEvent {\n\n    type: string;\n    row?: Object;\n    col?: GenericTableColumn;\n\n}\n\nexport class TableColumnSetup {\n\n    headers: GenericTableColumn[][];\n    columns: GenericTableColumn[];\n\n}\n","import { Input, Component, OnInit } from \"@angular/core\";\n\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"localize\",\n    templateUrl: \"./localize.component.html\",\n    styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n\n    @Input() key: string;\n    @Input() params: { [key: string]: string } = null;\n\n    text: string;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.text = this.service.decode(this.key);\n\n        if (this.params != null) {\n            const keys = Object.keys(this.params);\n\n            keys.forEach((key) => {\n                if (this.params[key] != null) {\n                    this.text = this.text.replace(key, this.params[key]);\n                }\n            });\n        }\n    }\n\n}\n","<span [innerHtml]=\"text\"></span>"],"sourceRoot":""}