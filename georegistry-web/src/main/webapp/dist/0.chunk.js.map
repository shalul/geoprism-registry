{"version":3,"sources":["webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/component/index.ts","webpack:///./src/app/shared/service/date.service.ts","webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.html","webpack:///./src/app/shared/service/external-system.service.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/service/organization.service.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/modals/generic-modal.component.ts","webpack:///./src/app/shared/component/modals/generic-modal.component.html","webpack:///./src/app/shared/service/index.ts","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/shared/component/error-handler/error-handler.ts","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/registry/model/constants.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.html","webpack:///./src/app/shared/component/form-fields/date-field/date-field.component.ts","webpack:///./src/app/shared/component/form-fields/date-field/date-field.component.html","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/model/profile.ts","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html"],"names":["service","error","message","ngOnInit","this","registerListener","ngOnDestroy","deregisterListener","start","complete","onError","onMessage","msg","MessageComponent","Component","selector","templateUrl","styles","components","ErrorHandler","CgrHeaderComponent","LoadingBarComponent","LocalizeComponent","ErrorMessageComponent","ConfirmModalComponent","GenericModalComponent","ErrorModalComponent","ModalStepIndicatorComponent","SuccessModalComponent","PasswordStrengthBarComponent","ProfileComponent","ProgressBarComponent","localizationService","overlapMessage","severity","decode","type","ConflictType","TIME_RANGE","mergeContiguousMessage","gapMessage","outsideExistsMessage","OUTSIDE_EXISTS","missingReference","MISSING_REFERENCE","startDateLaterEndDate","parentDoesNotExist","invalidParent","getPresentDate","Date","formatDateForDisplay","date","PRESENT","localize","getDateString","split","getDateFromDateString","value","year","getFullYear","month","getMonth","dt","getDate","checkRanges","attributeType","ranges","hasConflict","forEach","range","conflictMessages","Set","delete","filtered","filter","isDelete","j","length","h1","startDate","endDate","s1","e1","dateEndBeforeStart","add","i","h2","s2","e2","dateRangeOverlaps","getTime","addDay","areValuesEqual","sort","current","next","hasGap","between","test","dTest","dStart","dEnd","after","in1","in2","amount","plus1","setDate","votArr","a","b","checkExistRanges","existEntries","filteredExists","inRange","dateRangeOutside","validateDate","required","allowFutureDates","valid","today","isNaN","DateService","Injectable","transform","LocalizePipe","Pipe","name","locales","parser","Globalize","numberParser","formatter","numberFormatter","registry","locale","addLocale","exists","tag","push","setLocales","getLocale","getLocales","create","localizedValue","localeValues","toString","remove","splice","console","log","parseNumber","formatNumber","number","Number","bundle","key","com","runwaysdk","Localize","get","index","lastIndexOf","temp","slice","LocalizationService","listeners","listener","indexOfItem","indexOf","EventService","modalService","profileService","loggedIn","context","contextPath","isAdmin","isMaintainer","isContributor","isContributer","defaultLocaleView","found","shouldShowMenuItem","item","hasExactRole","RegistryRoleType","SRA","RA","RM","RC","logout","sessionStorage","removeItem","window","location","href","getUsername","setLocale","then","reload","account","profile","bsModalRef","show","backdrop","class","content","styleUrls","Input","router","canActivate","route","state","navigate","AdminGuard","MaintainerGuard","ContributerGuard","isLoggedIn","AuthGuard","authService","_profile","oid","username","password","firstName","lastName","email","changePassword","roles","getRoles","getRolesForUser","onSubmit","apply","hide","onChangePassword","getRolesArray","cancel","unlock","LocaleValue","lService","label","isDefaultLocale","language","code","country","variant","LocaleView","Organization","ExternalSystem","OAuthServer","PageResult","getValue","localeToString","len","lv","populate","lv1","lv2","lv2lv","lv1lv","JSON","parse","stringify","LocalizedValue","buildFromRoleName","roleName","RegistryRole","roleSplit","orgCode","roleSuffix","gotCode","AC","RoleBuilder","geoObjectTypeCode","modalStepIndicatorService","stepSubscription","modalStepChange","subscribe","stepConfig","unsubscribe","showIndicator","prog","total","description","progress","http","eventService","getExternalSystems","pageNumber","pageSize","params","HttpParams","set","pipe","finalize","toPromise","getExternalSystem","applyExternalSystem","system","headers","HttpHeaders","post","getSystemCapabilities","removeExternalSystem","ExternalSystemService","modalStepChangedSource","Subject","asObservable","getStepConfig","setStepConfig","config","getStep","step","setStep","ModalStepIndicatorService","getOrganizations","updateOrganization","json","newOrganization","removeOrganization","OrganizationService","canDeactivate","component","confirmRet","confirm","afterDeactivate","PendingChangesGuard","userOID","ProfileService","ProgressService","login","logInResponse","afterLogIn","response","afterLogOut","SessionService","localizeService","submitText","cancelText","ModalTypes","warning","onConfirm","onCancel","data","GenericButton","buttons","init","onClick","button","shouldClose","services","AuthService","TreeEntity","children","addChild","term","Term","GeoObject","attributes","getAttribute","attr","getGeoObjectTypeTermAttributeOptions","geoObjectType","termAttributeCode","attrOpts","rootTerm","removeStatuses","GeoObjectType","Task","getVotAtDate","attrCode","retVot","time","isChangeOverTime","values","vot","Array","isArray","GeoObjectOverTime","ConflictMessage","ValueOverTime","AttributeOverTime","isDefault","unique","AttributeType","isChange","termOptions","setRootTerm","AttributeTermType","precision","scale","AttributeDecimalType","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","AbstractScheduledJob","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","HierarchyOverTime","HierarchyOverTimeEntry","HierarchyOverTimeEntryParent","SynchronizationConfig","OrgSyncInfo","ExportScheduledJob","getMessageFromError","err","unspecified","localizedMessage","includes","showErrorAsDialog","HttpErrorResponse","status","arr","newArray","formatDateString","dateObj","day","getUTCDate","getUTCMonth","getUTCFullYear","aStart","aEnd","bStart","bEnd","end","val1","val2","parseInt","localeValue","getValueAtLocale","parents","Object","entries","parentData","parentData2","geoObject","properties","parseFloat","forRoot","ngModule","SharedModule","providers","CookieService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","ModalModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","BsDatepickerModule","ConvertKeyLabel","BooleanFieldComponent","DateFieldComponent","OnlyNumber","MustMatchDirective","PhonePipe","NgModule","imports","declarations","exports","entryComponents","ActionTypes","GovernanceStatus","GeoObjectTypeModalStates","ImportStrategy","ChangeType","LayerColor","text","title","bsDatepickerConfig","changeDetectorRef","dateService","allowInfinity","inputName","idGenerator","classNames","customStyles","localizeLabelKey","disable","placement","oldDate","valueChange","EventEmitter","change","returnFocusToInput","valueIsPresent","validChange","dateInputFormat","setValue","_value","setInvalid","S4","Math","random","substring","isEqual","date1","date2","toggleInfinity","emit","toggle","event","setTimeout","validity","formattedDate","BsDatepickerDirective","datepicker","ViewChild","static","Output","el","onKeyDown","e","keyCode","ctrlKey","shiftKey","preventDefault","Directive","HostListener","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors","validate","provide","NG_VALIDATORS","useExisting","multi","Profile","args","phone","keys","replace","user","userName","roleDisplayLabels","version","installedLocales","cookie","check","cookieData","cookieDataJSON","buildFromCookieJson","loadLocales","buildRolesFromCookie","replaceAll","role","storageLocales","getItem","setItem","removeUser","isSRA","isRA","isRM","isRC","isContributerOnly","roleType","isOrganizationRA","isGeoObjectTypeRM","isGeoObjectTypeOrSuperRM","got","allowRoleSuper","organizationCode","superTypeCode","isGeoObjectTypeRC","isGeoObjectTypeOrSuperRC","isRCOnly","getMyOrganizations","orgCodes","__getRoleFromRoleName","nameArr","getRoleDisplayLabelsArray","getRoleDisplayLabels","str","displayLabel","getVersion","removeLocale","colors","measureStrength","pass","score","letters","variations","digits","lower","upper","nonWords","variationCount","trunc","getColor","idx","col","ngOnChanges","changes","currentValue","setBarColors","c","count","_n","passwordToCheck"],"mappings":"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6GAAnB,iBACF,iBACF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,iHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,mHAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,mCAAmB,0GAAnB,iBACF,iBACA,gCAGF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,+GAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,0BACE,8BACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEA,gCAaA,gCAaA,gCAkCA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BAEE,gCACE,6BACE,0BACI,0BAAI,8BAA4D,iBAChE,0BAAI,8BAAoE,iBACxE,0BAAI,8BAAqE,iBAC7E,iBACF,iBACA,8BACE,iCA+BF,iBACF,iBAIF,iBACF,iBAEA,+BACE,+BACE,+BACE,iCAAmF,yF,yBAAnF,iBACA,4B,yBAEF,iBACF,iBACF,iBACF,iBACF,iBAEF,iB,uEAlRuH,iEAgBxF,6DAaA,2DAaE,+DAYA,8DAaA,8DAYA,iEAcF,wDAEf,uEAciB,2DAYA,6DAoBF,4DAKnB,0GAaA,0GAaA,8DAmDuB,gDA0CF,4EACA,4EAAqC,sBDvQtE,iBA2BI,WAAoB3H,EAAgC0M,EAAgCiB,GAAhE,KAAA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","file":"0.chunk.js","sourcesContent":["import { Component, OnInit } from \"@angular/core\";\n\nimport { EventService, IEventListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"message\",\n    templateUrl: \"./message.component.html\",\n    styles: [\n        \".error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}\",\n        \".message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }\"\n    ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\n    error: any = null;\n\n    message: string = \"\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.error = null;\n    }\n\n    complete(): void {\n    }\n\n    onError(error: any): void {\n        this.error = error;\n    }\n\n    onMessage(msg: string): void {\n        this.message = msg;\n    }\n\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { ErrorHandler } from \"./error-handler/error-handler\";\nimport { CgrHeaderComponent } from \"./header/header.component\";\nimport { LoadingBarComponent } from \"./loading-bar/loading-bar.component\";\nimport { LocalizeComponent } from \"./localize/localize.component\";\nimport { ErrorMessageComponent } from \"./message/error-message.component\";\nimport { MessageComponent } from \"./message/message.component\";\nimport { ConfirmModalComponent } from \"./modals/confirm-modal.component\";\nimport { ErrorModalComponent } from \"./modals/error-modal.component\";\nimport { ModalStepIndicatorComponent } from \"./modals/modal-step-indicator.component\";\nimport { SuccessModalComponent } from \"./modals/success-modal.component\";\nimport { PasswordStrengthBarComponent } from \"./password-strength-bar/password-strength-bar.component\";\nimport { ProfileComponent } from \"./profile/profile.component\";\nimport { ProgressBarComponent } from \"./progress-bar/progress-bar.component\";\nimport { GenericModalComponent } from \"./modals/generic-modal.component\";\n\nexport const components: any[] = [\n    ErrorHandler,\n    CgrHeaderComponent,\n    LoadingBarComponent,\n    LocalizeComponent,\n    ErrorMessageComponent,\n    MessageComponent,\n    ConfirmModalComponent,\n    GenericModalComponent,\n    ErrorModalComponent,\n    ModalStepIndicatorComponent,\n    SuccessModalComponent,\n    PasswordStrengthBarComponent,\n    ProfileComponent,\n    ProgressBarComponent\n];\n\nexport * from \"./error-handler/error-handler\";\nexport * from \"./header/header.component\";\nexport * from \"./loading-bar/loading-bar.component\";\nexport * from \"./localize/localize.component\";\nexport * from \"./message/error-message.component\";\nexport * from \"./message/message.component\";\nexport * from \"./modals/confirm-modal.component\";\nexport * from \"./modals/generic-modal.component\";\nexport * from \"./modals/error-modal.component\";\nexport * from \"./modals/modal-step-indicator.component\";\nexport * from \"./modals/success-modal.component\";\nexport * from \"./password-strength-bar/password-strength-bar.component\";\nexport * from \"./profile/profile.component\";\nexport * from \"./progress-bar/progress-bar.component\";\n","import { Injectable } from \"@angular/core\";\nimport { LocalizationService } from \"./localization.service\";\nimport Utils from \"../../registry/utility/Utils\";\nimport { PRESENT, ConflictMessage, TimeRangeEntry, AttributeType } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { ConflictType } from \"@registry/model/constants\";\nimport { ValueOverTimeCREditor } from \"@registry/component/geoobject-shared-attribute-editor/ValueOverTimeCREditor\";\n\n@Injectable()\nexport class DateService {\n\n    public overlapMessage: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.overlap.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    public mergeContiguousMessage: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.mergeContiguousRanges.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    public gapMessage: ConflictMessage = {\n        severity: \"WARNING\",\n        message: this.localizationService.decode(\"manage.versions.gap.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    public outsideExistsMessage: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.outsideExists.message\"),\n        type: ConflictType.OUTSIDE_EXISTS\n    }\n\n    public missingReference: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"changeovertime.manageVersions.missingReference\"),\n        type: ConflictType.MISSING_REFERENCE\n    }\n\n    public startDateLaterEndDate: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.startdate.later.enddate.message\"),\n        type: ConflictType.TIME_RANGE\n    };\n\n    public parentDoesNotExist: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"changeovertime.manageVersions.parentDoesNotExist\"),\n        type: ConflictType.MISSING_REFERENCE\n    }\n\n    public invalidParent: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"changeovertime.manageVersions.invalidParent\"),\n        type: ConflictType.MISSING_REFERENCE\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private localizationService: LocalizationService) { }\n\n    // Get infinity date (called 'present' in the UI)\n    public getPresentDate(): Date {\n        // NOTE: Month is 0 indexed so 11 = December\n        let dt = new Date(5000, 11, 31, 0, 0, 0);\n\n        return dt;\n    }\n\n    public formatDateForDisplay(date: string | Date): string {\n        if (!date) {\n            return \"\";\n        }\n\n        if (date === PRESENT) {\n            return this.localizationService.localize(\"changeovertime\", \"present\");\n        }\n\n        if (date instanceof Date) {\n            return this.getDateString(date);\n        } else {\n            return date.split(\"T\")[0];\n        }\n    }\n\n    // @param value as yyyy-mm-dd\n    getDateFromDateString(value: string) {\n        return new Date(+value.split(\"-\")[0], +value.split(\"-\")[1] - 1, +value.split(\"-\")[2]);\n    }\n\n    getDateString(date: Date): string {\n        if (date instanceof Date) {\n            let year = date.getFullYear();\n            let month: number | string = date.getMonth() + 1;\n            let dt: number | string = date.getDate();\n\n            if (dt < 10) {\n                dt = \"0\" + dt;\n            }\n            if (month < 10) {\n                month = \"0\" + month;\n            }\n\n            return year + \"-\" + month + \"-\" + dt;\n        }\n\n        return null;\n    }\n\n    checkRanges(attributeType: AttributeType, ranges: ValueOverTimeCREditor[]): boolean {\n        let hasConflict = false;\n\n        // clear all messages\n        ranges.forEach(range => {\n            if (!range.conflictMessages) {\n                range.conflictMessages = new Set();\n            }\n\n            range.conflictMessages.delete(this.overlapMessage);\n            range.conflictMessages.delete(this.mergeContiguousMessage);\n            range.conflictMessages.delete(this.gapMessage);\n            range.conflictMessages.delete(this.startDateLaterEndDate);\n        });\n\n        // Filter DELETE entries from consideration\n        const filtered: ValueOverTimeCREditor[] = ranges.filter(range => !range.isDelete());\n\n        // Check for overlaps\n        for (let j = 0; j < filtered.length; j++) {\n            const h1: ValueOverTimeCREditor = filtered[j];\n\n            if (h1.startDate && h1.endDate) {\n                let s1: any = this.getDateFromDateString(h1.startDate);\n                let e1: any = this.getDateFromDateString(h1.endDate);\n\n                if (Utils.dateEndBeforeStart(s1, e1)) {\n                    h1.conflictMessages.add(this.startDateLaterEndDate);\n\n                    hasConflict = true;\n                }\n\n                for (let i = 0; i < filtered.length; i++) {\n                    if (j !== i) {\n                        const h2: ValueOverTimeCREditor = filtered[i];\n\n                        // If all dates set\n                        if (h2.startDate && h2.endDate) {\n                            let s2: Date = this.getDateFromDateString(h2.startDate);\n                            let e2: Date = this.getDateFromDateString(h2.endDate);\n\n                            // Determine if there is an overlap\n                            if (Utils.dateRangeOverlaps(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                                h1.conflictMessages.add(this.overlapMessage);\n\n                                if (s2.getTime() === e2.getTime()) {\n                                    h2.conflictMessages.add(this.overlapMessage);\n                                }\n\n                                hasConflict = true;\n                            } else if (this.addDay(1, h1.endDate) === h2.startDate && Utils.areValuesEqual(attributeType, h1.value, h2.value)) {\n                                h1.conflictMessages.add(this.mergeContiguousMessage);\n                                h2.conflictMessages.add(this.mergeContiguousMessage);\n                                hasConflict = true;\n                            }\n                        } else if ((i === j - 1 || i === j + 1) && e1 && h2.startDate) {\n                            // If 1st end date and current start date\n\n                            let s2: Date = this.getDateFromDateString(h2.startDate);\n\n                            if (s2.getTime() <= e1) {\n                                h1.conflictMessages.add(this.overlapMessage);\n                                h2.conflictMessages.add(this.overlapMessage);\n\n                                hasConflict = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        this.sort(filtered);\n\n        // Check for gaps\n        let current = null;\n        for (let j = 0; j < filtered.length; j++) {\n            let next = filtered[j];\n\n            if (j > 0) {\n                if (current.endDate && next.startDate) {\n                    let e1: any = new Date(current.endDate);\n                    let s2: any = new Date(next.startDate);\n\n                    if (Utils.hasGap(e1.getTime(), s2.getTime())) {\n                        next.conflictMessages.add(this.gapMessage);\n\n                        current.conflictMessages.add(this.gapMessage);\n                    }\n                }\n            }\n\n            current = next;\n        }\n\n        this.sort(ranges);\n\n        return hasConflict;\n    }\n\n    public between(test: string | Date, startDate: string, endDate: string) {\n        if (test == null || startDate == null || endDate == null) {\n            return false;\n        }\n\n        let dTest: Date = test instanceof Date ? test : this.getDateFromDateString(test);\n        let dStart: Date = this.getDateFromDateString(startDate);\n        let dEnd: Date = this.getDateFromDateString(endDate);\n\n        return dTest >= dStart && dTest <= dEnd;\n    }\n\n    public after(in1: string | Date, in2: string | Date) {\n        if (in1 == null || in2 == null) {\n            return false;\n        }\n\n        let date1: Date = in1 instanceof Date ? in1 : this.getDateFromDateString(in1);\n        let date2: Date = in2 instanceof Date ? in2 : this.getDateFromDateString(in2);\n\n        return date1 > date2;\n    }\n\n    public addDay(amount: number, date: string): string {\n        var plus1: Date = this.getDateFromDateString(date);\n        plus1.setDate(plus1.getDate() + amount);\n        let splus1: string = this.getDateString(plus1);\n        return splus1;\n    }\n\n    public sort(votArr: TimeRangeEntry[]): void {\n      // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n    checkExistRanges(ranges: ValueOverTimeCREditor[], existEntries: ValueOverTimeCREditor[]): boolean {\n        let hasConflict = false;\n\n        // clear all messages\n        ranges.forEach(range => {\n            if (!range.conflictMessages) {\n                range.conflictMessages = new Set();\n            }\n\n            range.conflictMessages.delete(this.outsideExistsMessage);\n        });\n\n        // Filter DELETE entries from consideration\n        const filtered: ValueOverTimeCREditor[] = ranges.filter(range => !range.isDelete());\n\n        const filteredExists = existEntries.filter(range => !range.isDelete());\n\n        // Check for outside exists range\n        for (let j = 0; j < filtered.length; j++) {\n            const h1 = filtered[j];\n\n            if (h1.startDate && h1.endDate) {\n                let s1: any = this.getDateFromDateString(h1.startDate);\n                let e1: any = this.getDateFromDateString(h1.endDate);\n\n                let inRange = false;\n\n                for (let i = 0; i < filteredExists.length; i++) {\n                    const h2 = filteredExists[i];\n\n                    // If all dates set\n                    if (h2.value && h2.startDate && h2.endDate) {\n                        let s2: Date = this.getDateFromDateString(h2.startDate);\n                        let e2: Date = this.getDateFromDateString(h2.endDate);\n\n                        if (!Utils.dateRangeOutside(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                            inRange = true;\n                        }\n                    }\n                }\n\n                if (!inRange) {\n                    h1.conflictMessages.add(this.outsideExistsMessage);\n                    hasConflict = true;\n                }\n            }\n        }\n\n        return hasConflict;\n    }\n\n    validateDate(date: Date, required: boolean, allowFutureDates: boolean): {message: string, valid: boolean} {\n        let valid = { message: \"\", valid: true };\n        let today: Date = new Date();\n\n        if (date != null) {\n            if (!(date instanceof Date) || (date instanceof Date && isNaN(date.getTime()))) {\n                valid.valid = false;\n                valid.message = this.localizationService.decode(\"date.inpu.data.invalid.error.message\");\n            } else if (!allowFutureDates && date > today) {\n                valid.valid = false;\n                valid.message = this.localizationService.decode(\"date.inpu.data.in.future.error.message\");\n            }\n        } else if (required) {\n            valid.valid = false;\n            valid.message = this.localizationService.decode(\"manage.versions.date.required.message\");\n        }\n\n        return valid;\n    }\n\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Pipe({ name: \"localize\" })\nexport class LocalizePipe implements PipeTransform {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService) { }\n\n    transform(value: string): string {\n        return this.service.decode(value);\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { LocalizedValue, LocaleView } from \"@shared/model/core\";\n\ndeclare let Globalize: any;\ndeclare let com: any;\ndeclare let registry: any;\n\n@Injectable()\nexport class LocalizationService {\n\n    locales: LocaleView[] = [];\n    locale: string;\n\n    private parser: any = Globalize.numberParser();\n    private formatter: any = Globalize.numberFormatter();\n\n    constructor() {\n        this.locales = registry.locales;\n        this.locale = registry.locale;\n    }\n\n    addLocale(locale: LocaleView): void {\n        let exists: boolean = false;\n\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].tag === locale.tag) {\n                exists = true;\n                this.locales[i] = locale;\n            }\n        }\n\n        if (!exists) {\n            this.locales.push(locale);\n        }\n    }\n\n    setLocales(locales: LocaleView[]): void {\n        this.locales = locales;\n    }\n\n    getLocale(): string {\n        return this.locale;\n    }\n\n    getLocales(): LocaleView[] {\n        return this.locales;\n    }\n\n    create(): LocalizedValue {\n        const value = { localizedValue: \"\", localeValues: [] } as LocalizedValue;\n\n        this.locales.forEach(locale => {\n            // if (!locale.isDefaultLocale)\n            // {\n            value.localeValues.push({ locale: locale.toString, value: \"\" });\n            // }\n        });\n\n        return value;\n    }\n\n    remove(locale: LocaleView): void {\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].tag === locale.tag) {\n                this.locales.splice(i, 1);\n                return;\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(\"Could not remove locale from array because we could not find it.\", locale, this.locales);\n    }\n\n    public parseNumber(value: string): number {\n        if (value != null && value.length > 0) {\n            // convert data from view format to model format\n            let number = this.parser(value);\n\n            return number;\n        }\n\n        return null;\n    }\n\n    public formatNumber(value: any): string {\n        if (value != null) {\n            let number = value;\n\n            if (typeof number === \"string\") {\n                if (number.length > 0 && Number(number)) {\n                    number = Number(value);\n                } else {\n                    return \"\";\n                }\n            }\n\n            // convert data from model format to view format\n            return this.formatter(number);\n        }\n\n        return null;\n    }\n\n    public localize(bundle: string, key: string): string {\n        return com.runwaysdk.Localize.localize(bundle, key);\n    }\n\n    public get(key: string): string {\n        return com.runwaysdk.Localize.get(key);\n    }\n\n    public decode(key: string): string {\n        let index = key.lastIndexOf(\".\");\n\n        if (index !== -1) {\n            let temp = [key.slice(0, index), key.slice(index + 1)];\n\n            return this.localize(temp[0], temp[1]);\n        } else {\n            return this.get(key);\n        }\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n\n    private listeners: IEventListener[] = [];\n\n    public registerListener(listener: IEventListener): void {\n        this.listeners.push(listener);\n    }\n\n    public deregisterListener(listener: IEventListener): boolean {\n        let indexOfItem = this.listeners.indexOf(listener);\n\n        if (indexOfItem === -1) {\n            return false;\n        }\n\n        this.listeners.splice(indexOfItem, 1);\n\n        return true;\n    }\n\n    public start(): void {\n        for (const listener of this.listeners) {\n            listener.start();\n        }\n    }\n\n    public complete(): void {\n        for (const listener of this.listeners) {\n            listener.complete();\n        }\n    }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ProfileComponent } from \"../profile/profile.component\";\n\nimport { AuthService, ProfileService, LocalizationService } from \"@shared/service\";\n\nimport { RegistryRoleType, LocaleView } from \"@shared/model/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n\n    selector: \"cgr-header\",\n    templateUrl: \"./header.component.html\",\n    styleUrls: []\n})\nexport class CgrHeaderComponent {\n\n    context: string;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    bsModalRef: BsModalRef;\n\n    defaultLocaleView: LocaleView;\n    locales: LocaleView[];\n    locale: string;\n\n    @Input() loggedIn: boolean = true;\n\n    constructor(\n        private modalService: BsModalService,\n        private profileService: ProfileService,\n        private service: AuthService,\n        localizationService: LocalizationService\n    ) {\n        this.context = registry.contextPath;\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        if (localizationService.getLocales()) {\n            this.locales = localizationService.getLocales().filter(locale => locale.toString !== \"defaultLocale\");\n            this.defaultLocaleView = localizationService.getLocales().filter(locale => locale.toString === \"defaultLocale\")[0];\n        } else {\n            this.locales = [];\n            this.defaultLocaleView = null;\n        }\n        this.locale = localizationService.getLocale();\n\n        let found: boolean = false;\n\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].toString === this.locale) {\n                found = true;\n            }\n        }\n\n        if (!found) {\n            this.locale = \"\";\n        }\n    }\n\n    shouldShowMenuItem(item: string): boolean {\n        if (item === \"HIERARCHIES\") {\n            return true;\n        } else if (item === \"LISTS\") {\n            // return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC) || this.service.hasExactRole(RegistryRoleType.AC);\n            return true;\n        } else if (this.service.hasExactRole(RegistryRoleType.SRA)) {\n            return true;\n        } else if (item === \"IMPORT\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"SCHEDULED-JOBS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"NAVIGATOR\") {\n            return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n        } else if (item === \"CHANGE-REQUESTS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n        } else if (item === \"TASKS\") {\n            return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"EVENTS\") {\n            // return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n            return true;\n        } else if (item === \"CONFIGS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA);\n        } else if (item === \"SETTINGS\") {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    logout(): void {\n        sessionStorage.removeItem(\"locales\");\n\n        window.location.href = registry.contextPath + \"/session/logout\";\n\n        //        this.sessionService.logout().then( response => {\n        //            this.router.navigate( ['/login'] );\n        //        } );\n    }\n\n    getUsername() {\n        let name: string = this.service.getUsername();\n\n        return name;\n    }\n\n    setLocale() {\n        this.profileService.setLocale(this.locale).then(() => {\n            // Refresh the page\n            window.location.reload();\n        });\n    }\n\n    account(): void {\n        this.profileService.get().then(profile => {\n            this.bsModalRef = this.modalService.show(ProfileComponent, { backdrop: \"static\", class: \"gray modal-lg\" });\n            this.bsModalRef.content.profile = profile;\n        });\n    }\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default navbar-fixed-top\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n       <ul *ngIf=\"loggedIn\" class=\"nav navbar-nav navbar-right\"> \n         <li class=\"hidden-xs\">\n            \n           <a (click)=\"account()\" class=\"navbar-username\">\n           <!-- <div>Logged in as</div> -->\n             <div>{{getUsername()}}</div>\n           </a>                      \n         </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"shouldShowMenuItem('HIERARCHIES')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"shouldShowMenuItem('LISTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('IMPORT')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('SCHEDULED-JOBS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/scheduled-jobs\" routerLinkActive=\"active\"><localize key=\"scheduledjobs.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('NAVIGATOR')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/location-manager\" [queryParams]=\"{pageContext:'EXPLORER'}\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('CHANGE-REQUESTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('EVENTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/historical-events\" routerLinkActive=\"active\"><localize key=\"historical.events\"></localize></a></li>\n                <li *ngIf=\"shouldShowMenuItem('TASKS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/tasks\" routerLinkActive=\"active\"><localize key=\"header.tasks\"></localize></a></li>\n                <!-- <li *ngIf=\"shouldShowMenuItem('CONFIGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/synchronization-configs\" routerLinkActive=\"active\"><localize key=\"synchronization.config.manager\"></localize></a></li> -->\n                \n                <hr>\n                <li *ngIf=\"shouldShowMenuItem('SETTINGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/settings\" routerLinkActive=\"active\"><localize key=\"settings.menu\"></localize> </a></li>\n                \n                <div *ngIf=\"locales.length > 0\" style=\"padding: 0 20px;\">\n                  <hr>\n<!--                     <span><localize key=\"userDashboards.setLocale\"></localize></span> -->\n\n                    <label class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"default\" [value]=\"''\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span>{{defaultLocaleView.label.localizedValue}}</span>\n                    </label>\n                    <label *ngFor=\"let l of locales\" class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"{{l.toString}}\" [value]=\"l.toString\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span>{{l.label.localizedValue}}</span>\n                    </label>\n                </div>\n                \n                <!-- <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li> -->\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n         \n        \n       </ul>\n       \n       \n    </div>\n  </nav>\n</header>\n","import { Injectable } from \"@angular/core\";\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from \"@angular/router\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin()) {\n            return true;\n        }\n\n        this.router.navigate([\"/\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin() || this.service.isMaintainer()) {\n            return true;\n        }\n\n        this.router.navigate([\"/\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin() || this.service.isMaintainer() || this.service.isContributer()) {\n            return true;\n        }\n\n        this.router.navigate([\"/\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isLoggedIn()) {\n            return true;\n        }\n\n        this.router.navigate([\"/login\"]);\n\n        return false;\n    }\n\n}\n\n","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Profile } from \"@shared/model/profile\";\nimport { AuthService, ProfileService } from \"@shared/service\";\nimport { Role } from \"../../../admin/model/account\";\n\n@Component({\n    selector: \"profile\",\n    templateUrl: \"./profile.component.html\",\n    styles: [\".modal-form .check-block .chk-area { margin: 10px 0px 0 0;}\"]\n})\nexport class ProfileComponent {\n\n    public _profile: Profile = {\n        oid: \"\",\n        username: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        changePassword: false\n    };\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"profile\")\n    set profile(value: Profile) {\n        this._profile = value;\n        this.getRoles();\n    }\n\n    roles: Role[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n    getRoles(): void {\n        this.service.getRolesForUser(this._profile.oid).then(roles => {\n            this.roles = roles;\n        });\n    }\n\n    onSubmit(): void {\n        if (!this._profile.changePassword) {\n            delete this._profile.password;\n        }\n\n        this.service.apply(this._profile).then(profile => {\n            this.bsModalRef.hide();\n        });\n    }\n\n    onChangePassword(): void {\n        this._profile.changePassword = !this._profile.changePassword;\n    }\n\n    // getRoles():string {\n    //   return this.authService.getRoleDisplayLabels();\n    // }\n\n    getRolesArray(): any {\n        return this.authService.getRoles();\n    }\n\n    cancel(): void {\n        this.service.unlock(this._profile.oid).then(profile => {\n            this.bsModalRef.hide();\n        });\n    }\n\n}\n","<div *ngIf=\"_profile\">\n  <message></message>\n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <fieldset>\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"profile.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.firstName\" name=\"firstname\" required>\n          </span>\n        </div>\n      </div>\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.lastName\" name=\"lastname\" required>\n          </span>\n        </div>\n      </div>\n      \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altFirstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altFirstName\" name=\"altFirstname\">\n            </span>\n          </div>\n        </div>        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altLastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altLastName\" name=\"altLastname\">\n            </span>\n          </div>\n        </div>            \n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.phonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.phoneNumber\" name=\"phoneNumber\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altPhonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altPhoneNumber\" name=\"altPhoneNumber\">\n            </span>\n          </div>\n        </div>\n\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n          </span>\n          <div *ngIf=\"aemail.errors?.email\" style=\"float:none;\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.position\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.position\" name=\"position\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.department\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.department\" name=\"department\">\n            </span>\n          </div>\n        </div>\n            \n\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"account.info.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.username\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.username\" name=\"username\" required>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"_profile.externalSystemOid != null && _profile.externalSystemOid !== ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.oauth\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <label>\n            <localize key=\"account.profile.isOauth\"></localize>\n          </label>\n        </div>\n      </div>\n      \n      <div *ngIf=\"_profile.externalSystemOid == null || _profile.externalSystemOid === ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n        </div>\n        <div class=\"holder\">\n          <!-- <boolean-field [(value)]=\"profile.changePassword\"></boolean-field> -->\n          <div style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!_profile.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"_profile.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"_profile.changePassword\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.password\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" [(ngModel)]=\"_profile.password\" name=\"password\" #password=\"ngModel\" required\n                minlength=\"5\" maxlength=\"50\">\n              <password-strength-bar [passwordToCheck]=\"_profile.password\">\n              </password-strength-bar>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.certainPassword\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" />\n            </span>\n            <div *ngIf=\"certainPassword.errors?.mustMatch\" style=\"float:none;\" class=\"inline-error-message\">\n              <localize key=\"account.certainPassword.validation\"></localize>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th><localize key=\"profile.roles.role.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.organization.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.geoobjecttype.table.heading\"></localize></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let role of roles\">\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.geoObjectTypeLabel.localizedValue}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- <ul>\n            <li *ngFor=\"let role of getRolesArray()\">{{role}}</li>\n          </ul> -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\"\n              [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n\n</div>\n","/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nexport interface MessageContainer {\n    setMessage(message: string);\n}\n\nexport class LocaleValue {\n\n    locale: string;\n    value: string;\n\n    constructor(locale: string, value: string) {\n        this.locale = locale;\n        this.value = value;\n    }\n\n}\n\nexport class LocaleView {\n\n    constructor(lService: LocalizationService) {\n        this.label = lService.create();\n        this.toString = \"\";\n        this.tag = \"\";\n        this.isDefaultLocale = false;\n        this.language = { label: \"\", code: \"\" };\n        this.country = { label: \"\", code: \"\" };\n        this.variant = { label: \"\", code: \"\" };\n    }\n\n    label: LocalizedValue;\n    toString: string;\n    tag: string;\n    isDefaultLocale: boolean;\n    language: { label: string, code: string };\n    country: { label: string, code: string };\n    variant: { label: string, code: string };\n\n}\n\nexport class Organization {\n\n    code: string;\n    label: any;\n    contactInfo: any;\n\n}\n\nexport class ExternalSystem {\n\toid?: string;\n\tid: string;\n\ttype: string;\n\torganization: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tusername?: string;\n\tpassword?: string;\n\turl?: string;\n\tsystem?: string;\n\tversion?: string;\n\toAuthServer?: OAuthServer;\n}\n\nexport class OAuthServer {\n\n    keyName?: string;\n    label?: LocalizedValue;\n    url?: string;\n    authorizationLocation: string;\n    tokenLocation: string;\n    profileLocation: string;\n    clientId: string;\n    secretKey: string;\n    serverType: string;\n\n}\n\nexport class PageResult<T> {\n\n    count: number;\n    pageNumber: number;\n    pageSize: number;\n    resultSet: T[];\n    externalSystems?: ExternalSystem[];\n\n}\n\nexport class LocalizedValue {\n\n    localizedValue: string;\n    localeValues: LocaleValue[];\n\n    constructor(localizedValue: string, localeValues: LocaleValue[]) {\n        this.localizedValue = localizedValue;\n        this.localeValues = localeValues;\n    }\n\n    public getValue(localeToString: string): string {\n        let len = this.localeValues.length;\n\n        for (let i = 0; i < len; ++i) {\n            let lv = this.localeValues[i];\n\n            if (lv.locale === localeToString) {\n                return lv.value;\n            }\n        }\n\n        return this.localizedValue;\n    }\n\n    /*\n     * Populates lv1 with all values contained in lv2\n     */\n    public static populate(lv1: LocalizedValue, lv2: LocalizedValue) {\n        if (lv1 == null || lv2 == null) {\n            return;\n        }\n\n        lv1.localizedValue = lv2.localizedValue;\n\n        if (lv2.localeValues != null) {\n            lv2.localeValues.forEach(lv2lv => {\n                if (lv1.localeValues) {\n                    let found = false;\n\n                    lv1.localeValues.forEach(lv1lv => {\n                        if (!found && lv1lv.locale === lv2lv.locale) {\n                            lv1lv.value = lv2lv.value;\n                            found = true;\n                        }\n                    });\n\n                    if (!found) {\n                        lv1.localeValues.push(JSON.parse(JSON.stringify(lv2lv)));\n                    }\n                } else {\n                    lv1.localeValues = lv2.localeValues;\n                }\n            });\n        }\n    }\n\n}\n\nexport class RoleBuilder {\n\n    static buildFromRoleName(roleName: string): RegistryRole {\n        if (roleName === \"cgr.SRA\") {\n            return new RegistryRole(RegistryRoleType.SRA, \"\", \"\", \"cgr.SRA\");\n        }\n\n        let roleSplit = roleName.split(\".\");\n\n        let orgCode: string = roleSplit[2];\n\n        if (roleSplit.length === 4) {\n            return new RegistryRole(RegistryRoleType.RA, orgCode, \"\", roleName);\n        } else if (roleSplit.length === 5) {\n            let roleSuffix: string = roleSplit[4];\n\n            let gotCode: string = roleSplit[3];\n\n            if (roleSuffix === \"RM\") {\n                return new RegistryRole(RegistryRoleType.RM, orgCode, gotCode, roleName);\n            } else if (roleSuffix === \"RC\") {\n                return new RegistryRole(RegistryRoleType.RC, orgCode, gotCode, roleName);\n            } else if (roleSuffix === \"AC\") {\n                return new RegistryRole(RegistryRoleType.AC, orgCode, gotCode, roleName);\n            }\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport class RegistryRole {\n\n    type: RegistryRoleType;\n    orgCode: string;\n    geoObjectTypeCode: string;\n    roleName: string;\n    displayLabel: string;\n\n    constructor(type: RegistryRoleType, orgCode: string, geoObjectTypeCode: string, roleName: string) {\n        this.type = type;\n        this.orgCode = orgCode;\n        this.geoObjectTypeCode = geoObjectTypeCode;\n        this.roleName = roleName;\n    }\n\n}\n\nexport enum RegistryRoleType {\n    SRA,\n    RA,\n    RM,\n    RC,\n    AC\n}\n","import { Component } from \"@angular/core\";\nimport { ModalStepIndicatorService } from \"@shared/service\";\n\nimport { Step, StepConfig } from \"@shared/model/modal\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n    selector: \"modal-step-indicator\",\n    templateUrl: \"./modal-step-indicator.component.html\",\n    styleUrls: [\"./modal-step-indicator.css\"]\n})\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor(private modalStepIndicatorService: ModalStepIndicatorService) {\n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe(stepConfig => {\n            this.stepConfig = stepConfig;\n        });\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import { Component, OnInit } from \"@angular/core\";\n\nimport { Progress } from \"@shared/model/progress\";\nimport { ProgressService, IProgressListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"progress-bar\",\n    templateUrl: \"./progress-bar.component.html\",\n    styles: [\n        \".progress-overlay { background-color: #CCCCCC; position: absolute; display: block;opacity: 0.8;z-index: 99999 !important;}\",\n        \".progress-div { width: 100%; margin-left: 0; padding-left: 25%; padding-right: 25%; margin-top: 30% }\"\n    ]\n})\nexport class ProgressBarComponent implements OnInit, IProgressListener {\n\n    public showIndicator: boolean = true;\n\n    public prog: Progress = {\n        current: 0,\n        total: 1,\n        description: \"Initializing\"\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: ProgressService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.prog = {\n            current: 0,\n            total: 1,\n            description: \"Initializing\"\n        };\n\n        this.showIndicator = true;\n    }\n\n    progress(progress: Progress): void {\n        this.prog = progress;\n    }\n\n    complete(): void {\n        this.showIndicator = false;\n    }\n\n}\n","<div *ngIf=\"showIndicator\" class=\"progress-overlay\" style=\"height: 100%; width: 100%;\">\n  <div class=\"progress-div\">\n    <progressbar class=\"progress-striped active\" [max]=\"prog.total\" [value]=\"prog.current\"><i>{{prog.description}}</i></progressbar>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\nimport { EventService } from \"@shared/service\";\nimport { ExternalSystem, PageResult } from \"@shared/model/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ExternalSystemService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getExternalSystems(pageNumber: number, pageSize: number): Promise<PageResult<ExternalSystem>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExternalSystem>>(registry.contextPath + \"/external-system/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getExternalSystem(oid: string): Promise<ExternalSystem> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<ExternalSystem>(registry.contextPath + \"/external-system/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    applyExternalSystem(system: ExternalSystem): Promise<ExternalSystem> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ExternalSystem>(registry.contextPath + \"/external-system/apply\", JSON.stringify({ system: system }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getSystemCapabilities(system: ExternalSystem): Promise<{ oauth: boolean }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ oauth: boolean }>(registry.contextPath + \"/external-system/system-capabilities\", JSON.stringify({ system: system }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeExternalSystem(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/external-system/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { Step, StepConfig } from \"@shared/model/modal\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n\n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { Organization } from \"@shared/model/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class OrganizationService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getOrganizations(): Promise<Organization[]> {\n        this.eventService.start();\n\n        return this.http\n            .get<Organization[]>(registry.contextPath + \"/cgr/organizations/get-all\")\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateOrganization(json: any): Promise<Organization> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Organization>(registry.contextPath + \"/cgr/orgainization/update\", JSON.stringify({ json: json }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newOrganization(json: any): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/cgr/orgainization/create\", JSON.stringify({ json: json }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeOrganization(code: any): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(registry.contextPath + \"/cgr/orgainization/delete\", JSON.stringify({ code: code }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { CanDeactivate } from \"@angular/router\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n    canDeactivate: () => boolean | Observable<boolean>;\n    afterDeactivate: (arg: boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n        if (!component.canDeactivate()) {\n            // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n            // when navigating away from your angular app, the browser will show a generic warning message\n            // see http://stackoverflow.com/a/42207299/7307355\n            let confirmRet = confirm(\"WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.\");\n\n            component.afterDeactivate(confirmRet);\n\n            return confirmRet;\n        }\n\n        return true;\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\n// import 'rxjs/add/operator/toPromise';\n\nimport { Profile } from \"@shared/model/profile\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class ProfileService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient) { }\n\n    get(): Promise<Profile> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<Profile>(registry.contextPath + \"/registryaccount/get\", { headers: headers })\n            .toPromise();\n    }\n\n\n    apply(profile: Profile): Promise<Profile> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<Profile>(registry.contextPath + \"/registryaccount/apply\", JSON.stringify({ account: profile }), { headers: headers })\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<void>(registry.contextPath + \"/registryaccount/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .toPromise()\n    }\n\n    setLocale(locale: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<any>(registry.contextPath + \"/localization/set-locale\", JSON.stringify({ locale: locale }), { headers: headers })\n            .toPromise();\n    }\n\n    getRolesForUser(userOID: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n\n        return this.http\n            .post<Profile>(registry.contextPath + \"/registryaccount/getRolesForUser\", { userOID: userOID }, { headers: headers })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Progress } from \"@shared/model/progress\";\n\nexport interface IProgressListener {\n    start(): void;\n    progress(progress: Progress): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n\n    private listeners: IProgressListener[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    public constructor() { }\n\n    public registerListener(listener: IProgressListener): void {\n        this.listeners.push(listener);\n    }\n\n    public deregisterListener(listener: IProgressListener): boolean {\n        let indexOfItem = this.listeners.indexOf(listener);\n\n        if (indexOfItem === -1) {\n            return false;\n        }\n\n        this.listeners.splice(indexOfItem, 1);\n\n        return true;\n    }\n\n    public start(): void {\n        for (const listener of this.listeners) {\n            listener.start();\n        }\n    }\n\n    public progress(progress: Progress): void {\n        for (const listener of this.listeners) {\n            listener.progress(progress);\n        }\n    }\n\n    public complete(): void {\n        for (const listener of this.listeners) {\n            listener.complete();\n        }\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"./event.service\";\n\nimport { AuthService } from \"./auth.service\";\nimport { User } from \"@shared/model/user\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Injectable()\nexport class SessionService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService, private http: HttpClient, private authService: AuthService) { }\n\n    login(username: string, password: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.service.start();\n\n        return this.http\n            .post<User>(registry.contextPath + \"/cgrsession/login\", JSON.stringify({ username: username, password: password }), { headers: headers })\n            .pipe(finalize(() => {\n                this.service.complete();\n            }))\n            .toPromise()\n            .then((logInResponse: any) => {\n                this.authService.afterLogIn(logInResponse);\n\n                return logInResponse;\n            })\n    }\n\n    logout(): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>(registry.contextPath + \"/session/logout\", { headers: headers })\n            .pipe(finalize(() => {\n                this.service.complete();\n            }))\n            .toPromise()\n            .then((response: any) => {\n                this.authService.afterLogOut();\n\n                return response;\n            })\n    }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"error-message\",\n    templateUrl: \"./error-message.component.html\",\n    styleUrls: [\"./error-message.css\"]\n})\nexport class ErrorMessageComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"error.modal.default.message\");\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private localizeService: LocalizationService) { }\n\n}\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\n@Component({\n    selector: \"confirm-modal\",\n    templateUrl: \"./confirm-modal.component.html\",\n    styleUrls: [\"./modal.css\"]\n})\nexport class ConfirmModalComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    /*\n     * Called on cancel\n     */\n    public onCancel: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n        this.onCancel = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next(this.data);\n    }\n\n    cancel(): void {\n        this.bsModalRef.hide();\n        this.onCancel.next(this.data);\n    }\n\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>{{cancelText}}</span>\n          </button>\n          <button type=\"button\" (click)=\"confirm()\"\n            [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n            aria-disabled=\"false\">\n            <span>{{submitText}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"error-modal\",\n    templateUrl: \"./error-modal.component.html\",\n    styleUrls: [\"./error-modal.css\"]\n})\nexport class ErrorModalComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"error.modal.default.message\");\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"success-modal\",\n    templateUrl: \"./success-modal.component.html\",\n    styleUrls: [\"./success-modal.css\"]\n})\nexport class SuccessModalComponent implements OnInit {\n\n    /*\n     * Message\n     */\n    @Input() message: string;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.close\");\n\n    public onConfirm: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.message = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next();\n    }\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"confirm()\">\n\t\t\t\t\t\t<span>{{submitText}}</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\n</div>\n","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\nexport class GenericButton {\n\n    label: string;\n    onClick: Function;\n    shouldClose: boolean;\n    class: string;\n\n}\n\n@Component({\n    selector: \"generic-modal\",\n    templateUrl: \"./generic-modal.component.html\",\n    styleUrls: [\"./modal.css\"]\n})\nexport class GenericModalComponent {\n\n    /*\n     * Message\n     */\n    message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    buttons: GenericButton[] = [];\n\n    data: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    init(message: string, buttons: GenericButton[]): void {\n        this.message = message;\n        this.buttons = buttons;\n    }\n\n    onClick(button: GenericButton): void {\n        if (button.shouldClose) {\n            this.bsModalRef.hide();\n        }\n\n        button.onClick(this.data);\n    }\n\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button *ngFor=\"let button of buttons\" type=\"button\" (click)=\"onClick(button)\" class=\"btn\" [class]=\"button.class\" role=\"button\" aria-disabled=\"false\">\n            <span>{{button.label}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { AuthService } from \"./auth.service\";\nimport { EventService } from \"./event.service\";\nimport { ExternalSystemService } from \"./external-system.service\";\nimport { AdminGuard, AuthGuard, ContributerGuard, MaintainerGuard } from \"./guard.service\";\nimport { LocalizationService } from \"./localization.service\";\nimport { ModalStepIndicatorService } from \"./modal-step-indicator.service\";\nimport { OrganizationService } from \"./organization.service\";\nimport { PendingChangesGuard } from \"./pending-changes-guard\";\nimport { ProfileService } from \"./profile.service\";\nimport { ProgressService } from \"./progress.service\";\nimport { SessionService } from \"./session.service\";\nimport { DateService } from \"./date.service\";\n\nexport const services: any[] = [\n    AuthService,\n    EventService,\n    ExternalSystemService,\n    AdminGuard,\n    AuthGuard,\n    ContributerGuard,\n    MaintainerGuard,\n    LocalizationService,\n    ModalStepIndicatorService,\n    OrganizationService,\n    PendingChangesGuard,\n    ProfileService,\n    ProgressService,\n    SessionService,\n    DateService\n];\n\nexport * from \"./auth.service\";\nexport * from \"./event.service\";\nexport * from \"./external-system.service\";\nexport * from \"./guard.service\";\nexport * from \"./localization.service\";\nexport * from \"./modal-step-indicator.service\";\nexport * from \"./organization.service\";\nexport * from \"./pending-changes-guard\";\nexport * from \"./profile.service\";\nexport * from \"./progress.service\";\nexport * from \"./session.service\";\nexport * from \"./date.service\";\n","/* eslint-disable no-use-before-define */\n/* eslint-disable padded-blocks */\nimport { LocalizedValue, PageResult } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ImportConfiguration } from \"./io\";\nimport { GovernanceStatus, ConflictType } from \"./constants\";\nimport Utils from \"@registry/utility/Utils\";\n\nexport const PRESENT: string = \"5000-12-31\";\n\nexport class TreeEntity {\n    id: string;\n    name: string;\n    hasChildren: boolean;\n}\n\nexport class Term {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n\n    constructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n        this.code = code;\n        this.label = label;\n        this.description = description;\n    }\n\n    children: Term[] = [];\n\n    addChild(term: Term) {\n        this.children.push(term);\n    }\n}\n\nexport class GeoObject {\n    type: string;\n    geometry: any;\n    properties: {\n        uid: string,\n        code: string,\n        displayLabel: LocalizedValue,\n        type: string,\n        status: string[],\n        sequence: string\n        createDate: string,\n        lastUpdateDate: string,\n        invalid: boolean,\n        exists: boolean,\n        writable?: boolean\n    };\n}\n\nexport class GeoObjectType {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    geometryType?: string;\n    isLeaf: boolean;\n    isGeometryEditable: boolean;\n    organizationCode: string;\n    attributes: Array<AttributeType | AttributeTermType | AttributeDecimalType> = [];\n    relatedHierarchies?: string[];\n    superTypeCode?: string;\n    isAbstract?: boolean;\n    isPrivate?: boolean;\n    canDrag?: boolean;\n    permissions?: string[];\n\n    public static getAttribute(type: GeoObjectType, name: string) {\n        let len = type.attributes.length;\n        for (let i = 0; i < len; i++) {\n            let attr: any = type.attributes[i];\n\n            if (attr.code === name) {\n                return attr;\n            }\n        }\n\n        return null;\n    }\n\n    public static getGeoObjectTypeTermAttributeOptions(geoObjectType: GeoObjectType, termAttributeCode: string) {\n        for (let i = 0; i < geoObjectType.attributes.length; i++) {\n            let attr: any = geoObjectType.attributes[i];\n\n            if (attr.type === \"term\" && attr.code === termAttributeCode) {\n                attr = <AttributeTermType>attr;\n                let attrOpts = attr.rootTerm.children;\n\n                // only remove status of the required status type\n                if (attrOpts.length > 0) {\n                    if (attr.code === \"status\") {\n                        return Utils.removeStatuses(attrOpts);\n                    } else {\n                        return attrOpts;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n}\n\nexport class Task {\n    id: string;\n    templateKey: string;\n    msg: string;\n    title: string;\n    status: string;\n    createDate: number;\n    completedDate: number;\n}\n\nexport class GeoObjectOverTime {\n\n    geoObjectType: GeoObjectType;\n\n    attributes: any;\n\n    public constructor(geoObjectType: GeoObjectType, attributes: any) {\n        this.geoObjectType = geoObjectType;\n        this.attributes = attributes;\n    }\n\n    public getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n        let retVot = { startDate: date, endDate: null, value: null };\n\n        const time = date.getTime();\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if (attr.code === attrCode) {\n                if (attr.type === \"local\") {\n                    retVot.value = lService.create();\n                }\n\n                if (attr.isChangeOverTime) {\n                    let values = this.attributes[attr.code].values;\n\n                    values.forEach(vot => {\n\n                        const startDate = Date.parse(vot.startDate);\n                        const endDate = Date.parse(vot.endDate);\n\n                        if (time >= startDate && time <= endDate) {\n\n                            if (attr.type === \"local\") {\n                                retVot.value = JSON.parse(JSON.stringify(vot.value));\n                            } else if (attr.type === \"term\" && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n                                retVot.value = vot.value[0];\n                            } else {\n                                retVot.value = vot.value;\n                            }\n                        }\n                    });\n                } else {\n                    retVot.value = this.attributes[attr.code];\n                }\n\n                break;\n            }\n        }\n\n        return retVot;\n    }\n}\n\nexport class ConflictMessage {\n    message: string;\n    severity: string;\n    type: ConflictType;\n}\n\nexport interface TimeRangeEntry {\n    startDate: string;\n    endDate: string;\n    oid?: string;\n    value?: any;\n}\n\nexport class ValueOverTime implements TimeRangeEntry {\n    oid: string;\n    startDate: string;\n    endDate: string;\n    value: any;\n    removable?: boolean;\n}\n\nexport class AttributeOverTime {\n    name: string;\n    type: string;\n    values: ValueOverTime[];\n}\n\nexport class AttributeType {\n    code: string; // On the back-end this is referred to as the AttributeType's 'name'. They are the same concept.\n    type: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    isDefault: boolean;\n    required: boolean;\n    unique: boolean;\n    governanceStatus: GovernanceStatus;\n    isChangeOverTime?: boolean;\n    precision?: number;\n    scale?: number;\n    isValid?: boolean;\n    isValidReason?: {timeConflict: boolean, existConflict: boolean, dateField: boolean};\n    isValidReasonHierarchy?: any;\n\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n        this.code = code;\n        this.type = type;\n        this.label = label;\n        this.description = description;\n        this.isDefault = isDefault;\n        this.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n        this.unique = unique;\n        this.isChangeOverTime = isChangeOverTime;\n    }\n\n}\n\nexport class AttributeTermType extends AttributeType {\n\n    // descendants: Attribute[];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n        super(code, type, label, description, isDefault, required, unique, isChange);\n    }\n\n    rootTerm: Term = new Term(null, null, null);\n\n    termOptions: Term[] = [];\n\n    setRootTerm(term: Term) {\n        this.rootTerm = term;\n    }\n}\n\nexport class AttributeDecimalType extends AttributeType {\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n        super(code, type, label, description, isDefault, required, unique, isChange);\n\n        this.precision = 32;\n        this.scale = 8;\n    }\n}\n\nexport class TreeNode {\n    geoObject: GeoObject;\n    hierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n    children: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n    parents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n    state: string;\n    attribute: any;\n    termOption: any;\n}\n\nexport class AbstractScheduledJob {\n    jobId: string;\n    historyId: string;\n    stage: string;\n    status: string;\n    author: string;\n    createDate: string;\n    lastUpdateDate: string;\n    workProgress: number;\n    workTotal: number;\n    startDate: string;\n    endDate: string;\n}\n\nexport class ScheduledJob extends AbstractScheduledJob {\n    importedRecords: number;\n    exportedRecords: number;\n    configuration: ImportConfiguration;\n    importErrors: PageResult<any>;\n    exportErrors: PageResult<any>;\n    problems: PageResult<any>;\n    fileName: string;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n    stepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n    exception: ServerException;\n    object: ImportErrorObject;\n    objectType: string;\n    id: string;\n    resolution: string;\n    selected?: boolean;\n}\n\nexport class ServerException {\n    attributes: ServerExceptionAttribute[];\n    type: string;\n    message: string;\n}\n\nexport class ServerExceptionAttribute {\n    value: string;\n    key: string;\n}\n\nexport class ImportErrorObject {\n    geoObject: GeoObjectOverTime;\n    parents: HierarchyOverTime[];\n    isNew: boolean;\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    complete?: boolean;\n    enabled?: boolean;\n    status?: string;\n}\n\nexport class HierarchyOverTime {\n    code: string;\n    label: string;\n    types: {\n        code: string;\n        label: string;\n    }[];\n\n    entries: HierarchyOverTimeEntry[];\n}\n\nexport class HierarchyOverTimeEntry implements TimeRangeEntry {\n    startDate: string;\n    endDate: string;\n    oid: string;\n    parents: { [k: string]: HierarchyOverTimeEntryParent };\n    loading?: any;\n    conflictType?: string;\n    conflictMessage?: any[];\n}\n\nexport class HierarchyOverTimeEntryParent {\n    text: string;\n    geoObject: GeoObject;\n    goCode?: string;\n}\n\n\nexport class SynchronizationConfig {\n    oid?: string;\n    type?: string;\n    systemLabel?: string;\n    isImport?: boolean;\n    organization: string;\n    system: string;\n    hierarchy: string;\n    label: LocalizedValue;\n    configuration: any;\n}\n\nexport class OrgSyncInfo {\n    label: string;\n    code: string;\n    hierarchies: { label: string, code: string }[];\n    systems: { label: string, oid: string, type: string }[];\n}\n\nexport class ExportScheduledJob extends AbstractScheduledJob {\n    stepConfig?: StepConfig;\n}\n","\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { ErrorModalComponent } from \"@shared/component\";\n\nexport class ErrorHandler {\n\n    static getMessageFromError(err: any): string {\n        let unspecified = \"An unspecified error has occurred.  Please try your operation again.  If the problem continues, alert your technical support staff.\";\n\n        if (err == null) {\n            return unspecified;\n        } else {\n            console.log(\"An error has occurred: \", err);\n        }\n\n        let msg = null;\n\n        if (err.error != null && (typeof err.error === \"object\")) {\n            msg = err.error.localizedMessage || err.error.message;\n        }\n\n        if (msg == null) {\n            msg = err.message || err.msg || err.localizedMessage;\n        }\n\n        if (msg != null && msg.includes(\"##tferrormsg##\")) {\n            let split = msg.split(\"##tferrormsg##\");\n            return split[2];\n        }\n\n        if (msg == null) {\n            msg = unspecified;\n        }\n\n        return msg;\n    }\n\n    static showErrorAsDialog(err: any, modalService: BsModalService): BsModalRef {\n        if (err instanceof HttpErrorResponse && err.status === 401) {\n            return null;\n        }\n\n        let bsModalRef = modalService.show(ErrorModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n        bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\n        return bsModalRef;\n    }\n\n}\n","import { AttributeType, GeoObject } from \"@registry/model/registry\";\nimport { LocalizedValue } from \"@shared/model/core\";\n// eslint-disable-next-line camelcase\nimport turf_booleanequal from \"@turf/boolean-equal\";\n\nexport default class Utils {\n\n    /**\n     *\n     * @param arr\n     */\n    static removeStatuses(arr: any[]): any[] {\n        var newArray = [];\n\n        for (var i = 0; i < arr.length; ++i) {\n            if (!(arr[i].code === \"CGR:Status-New\" ||\n                arr[i].code === \"CGR:Status-Pending\")) {\n                newArray.push(arr[i]);\n            }\n        }\n\n        return newArray;\n    }\n\n    /**\n     *\n     * @param dateObj\n     */\n    static formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + (month < 10 ? \"0\" : \"\") + month + \"-\" + (day < 10 ? \"0\" : \"\") + day;\n    }\n\n    static dateRangeOverlaps(aStart: number, aEnd: number, bStart: number, bEnd: number): boolean {\n        if (aStart <= bStart && bStart <= aEnd) return true; // b starts in a\n        if (aStart <= bEnd && bEnd <= aEnd) return true; // b ends in a\n        if (bStart < aStart && aEnd < bEnd) return true; // a in b\n        return false;\n    }\n\n    static dateRangeOutside(aStart: number, aEnd: number, bStart: number, bEnd: number): boolean {\n        if (aStart < bStart) return true;\n        if (aEnd > bEnd) return true;\n        return false;\n    }\n\n    static dateEndBeforeStart(start: number, end: number): boolean {\n        if (end < start) return true; // end date is before start date\n        return false;\n    }\n\n    static hasGap(aEnd: number, bStart: number): boolean {\n        return (bStart - aEnd) > (1000 * 60 * 60 * 24);\n    }\n\n    public static areValuesEqual(attributeType: AttributeType, val1: any, val2: any): boolean {\n        if (attributeType.type === \"boolean\") {\n            return val1 === val2;\n        }\n\n        if ((val1 === \"\" && val2 == null) || (val2 === \"\" && val1 == null)) {\n            return true;\n        }\n\n        if (!val1 && !val2) {\n            return true;\n        } else if ((!val1 && val2) || (!val2 && val1)) {\n            return false;\n        }\n\n        if (attributeType.type === \"term\") {\n            if (val1 != null && val2 != null) {\n                return val1.length === val2.length && val1[0] === val2[0];\n            }\n        } else if (attributeType.type === \"geometry\") {\n            return turf_booleanequal(val1, val2);\n        } else if (attributeType.type === \"date\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (attributeType.type === \"local\") {\n            if ((!val1.localeValues || !val2.localeValues) || val1.localeValues.length !== val2.localeValues.length) {\n                return false;\n            }\n\n            let len = val1.localeValues.length;\n            for (let i = 0; i < len; ++i) {\n                let localeValue = val1.localeValues[i];\n\n                let lv2 = this.getValueAtLocale(val2, localeValue.locale);\n                let lv1 = localeValue.value;\n\n                if ((lv1 === \"\" && lv2 == null) || (lv2 === \"\" && lv1 == null)) {\n                    continue;\n                } else if (lv1 !== lv2) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else if (attributeType.type === \"_PARENT_\" && val1.parents && val2.parents) {\n            for (const [gotCode, data] of Object.entries(val1.parents)) {\n                let parentData: {text: string, geoObject: GeoObject} = data as {text: string, geoObject: GeoObject};\n\n                if (val2.parents[gotCode]) {\n                    let parentData2: {text: string, geoObject: GeoObject} = val2.parents[gotCode];\n\n                    if (parentData.geoObject == null && parentData2.geoObject == null) {\n                        // equal, keep looping\n                    } else if ((parentData.geoObject == null && parentData2.geoObject != null) || (parentData2.geoObject == null && parentData.geoObject != null)) {\n                        return false;\n                    } else if (parentData.geoObject.properties.code !== parentData2.geoObject.properties.code) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        } else if (attributeType.type === \"integer\") {\n            let casted1 = (typeof val1 === \"string\") ? parseInt(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseInt(val2) : val2;\n\n            return casted1 === casted2;\n        } else if (attributeType.type === \"float\") {\n            let casted1 = (typeof val1 === \"string\") ? parseFloat(val1) : val1;\n            let casted2 = (typeof val2 === \"string\") ? parseFloat(val2) : val2;\n\n            return casted1 === casted2;\n        }\n\n        return val1 === val2;\n    }\n\n    public static getValueAtLocale(lv: LocalizedValue, locale: string) {\n        return new LocalizedValue(lv.localizedValue, lv.localeValues).getValue(locale);\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { ModalModule } from \"ngx-bootstrap/modal\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { CookieService } from \"ngx-cookie-service\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { BsDatepickerModule } from \"ngx-bootstrap/datepicker\";\n\nimport { ErrorModalComponent } from \"./component/modals/error-modal.component\";\nimport { SuccessModalComponent } from \"./component/modals/success-modal.component\";\nimport { ConfirmModalComponent } from \"./component/modals/confirm-modal.component\";\nimport { GenericModalComponent } from \"./component/modals/generic-modal.component\";\nimport { ErrorMessageComponent } from \"./component/message/error-message.component\";\nimport { MessageComponent } from \"./component/message/message.component\";\nimport { BooleanFieldComponent } from \"./component/form-fields/boolean-field/boolean-field.component\";\nimport { DateFieldComponent } from \"./component/form-fields/date-field/date-field.component\";\nimport { LoadingBarComponent } from \"./component/loading-bar/loading-bar.component\";\nimport { PasswordStrengthBarComponent } from \"./component/password-strength-bar/password-strength-bar.component\";\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from \"./service/guard.service\";\nimport { PendingChangesGuard } from \"./service/pending-changes-guard\";\n\nimport { AuthService } from \"./service/auth.service\";\nimport { ProfileService } from \"./service/profile.service\";\nimport { OrganizationService } from \"./service/organization.service\";\nimport { ExternalSystemService } from \"./service/external-system.service\";\nimport { LocalizationService } from \"./service/localization.service\";\nimport { ProgressService } from \"./service/progress.service\";\nimport { EventService } from \"./service/event.service\";\nimport { ModalStepIndicatorService } from \"./service/modal-step-indicator.service\";\nimport { SessionService } from \"./service/session.service\";\nimport { DateService } from \"./service/date.service\";\n\nimport { LocalizePipe } from \"./pipe/localize.pipe\";\nimport { PhonePipe } from \"./pipe/phone.pipe\";\n\nimport { OnlyNumber } from \"./directive/number-only.directive\";\nimport { MustMatchDirective } from \"./directive/must-match.directive\";\n\nimport { CgrHeaderComponent } from \"./component/header/header.component\";\nimport { ProgressBarComponent } from \"./component/progress-bar/progress-bar.component\";\nimport { LocalizeComponent } from \"./component/localize/localize.component\";\nimport { ConvertKeyLabel } from \"./component/localize/convert-key-label.component\";\nimport { ModalStepIndicatorComponent } from \"./component/modals/modal-step-indicator.component\";\nimport { ProfileComponent } from \"./component/profile/profile.component\";\n\nimport \"../rxjs-extensions\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        ModalModule.forRoot(),\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        CollapseModule,\n        NgxPaginationModule,\n        BsDatepickerModule.forRoot()\n    ],\n    declarations: [\n        LocalizeComponent,\n        ConvertKeyLabel,\n        BooleanFieldComponent,\n        DateFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        PasswordStrengthBarComponent,\n        OnlyNumber,\n        MustMatchDirective,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe\n    ],\n    exports: [\n        LocalizeComponent,\n        ConvertKeyLabel,\n        BooleanFieldComponent,\n        DateFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        PasswordStrengthBarComponent,\n        OnlyNumber,\n        MustMatchDirective,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    entryComponents: [\n        ErrorModalComponent,\n        SuccessModalComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ModalStepIndicatorComponent,\n        ErrorMessageComponent,\n        LoadingBarComponent,\n        ProfileComponent\n    ]\n})\nexport class SharedModule {\n\n    static forRoot(): ModuleWithProviders<SharedModule> {\n        return {\n            ngModule: SharedModule,\n            providers: [\n                CookieService,\n                AuthService,\n                SessionService,\n                ProfileService,\n                OrganizationService,\n                ExternalSystemService,\n                LocalizationService,\n                DateService,\n                ModalStepIndicatorService,\n                EventService,\n                ProgressService,\n                AdminGuard,\n                MaintainerGuard,\n                ContributerGuard,\n                AuthGuard,\n                PendingChangesGuard\n            ]\n        };\n    }\n\n}\n","export enum ActionTypes {\n    \"CREATEGEOOBJECTACTION\" = \"CreateGeoObjectAction\",\n    \"UPDATEATTRIBUTETACTION\" = \"UpdateAttributeAction\",\n    \"UPDATEGEOOBJECTACTION\" = \"UpdateGeoObjectAction\" // Deprecated DO NOT USE\n}\n\nexport enum GovernanceStatus {\n    \"PENDING\" = \"PENDING\",\n    \"ACCEPTED\" = \"ACCEPTED\",\n    \"REJECTED\" = \"REJECTED\"\n}\n\nexport enum GeoObjectTypeModalStates {\n    \"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n    \"editAttribute\" = \"EDIT-ATTRIBUTE\",\n    \"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n    \"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n    \"editTermOption\" = \"EDIT-TERM-OPTION\",\n    \"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport enum ImportStrategy {\n    \"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n    \"NEW_ONLY\" = \"NEW_ONLY\",\n    \"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport enum ConflictType {\n    MISSING_REFERENCE = \"MISSING_REFERENCE\",\n    TIME_RANGE = \"TIME_RANGE\",\n    OUTSIDE_EXISTS = \"OUTSIDE_EXISTS\"\n}\n\nexport enum ChangeType\n{\n    END_DATE = \"endDate\",\n    START_DATE = \"startDate\",\n    VALUE = \"value\",\n    REMOVE = \"remove\",\n    ADD = \"add\"\n}\n\nexport enum LayerColor {\n  \"OLD\" = \"#A4A4A4\",\n  \"NEW\" = \"#0062AA\"\n}\n","import { Input, Component, OnInit } from \"@angular/core\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { LocaleView, LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n\n    selector: \"convert-key-label\",\n    templateUrl: \"./convert-key-label.component.html\",\n    styleUrls: []\n})\nexport class ConvertKeyLabel implements OnInit {\n\n    @Input() key: any;\n    text: string;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        if (this.key != null && this.key.label != null && this.key.label.localizedValue != null) {\n            this.text = this.key.label.localizedValue;\n            return;\n        }\n\n        let locales: LocaleView[] = this.authService.getLocales();\n\n        let len = locales.length;\n        for (let i = 0; i < len; ++i) {\n            let locale: LocaleView = locales[i];\n\n            if (locale.toString === this.key) {\n                this.text = this.getValue(locale.label, this.service.getLocale());\n\n                return;\n            }\n        }\n\n        if (this.key === \"defaultLocale\") {\n            this.text = this.service.decode(\"localization.defaultLocal\");\n        } else {\n            this.text = this.key;\n        }\n    }\n\n    public getValue(lv: LocalizedValue, localeToString: string): string {\n        let len = lv.localeValues.length;\n\n        for (let i = 0; i < len; ++i) {\n            let value = lv.localeValues[i];\n\n            if (value.locale === localeToString) {\n                return value.value;\n            }\n        }\n\n        return lv.localizedValue;\n    }\n\n}\n","{{text}}","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, ViewChild } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { BsDatepickerConfig, BsDatepickerDirective } from \"ngx-bootstrap/datepicker\";\n\nimport { PRESENT } from \"@registry/model/registry\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"date-field\",\n    templateUrl: \"./date-field.component.html\",\n    styleUrls: [\"./date-field.css\"],\n})\n\nexport class DateFieldComponent {\n\n    @ViewChild(BsDatepickerDirective, { static: false }) datepicker: BsDatepickerDirective;\n\n    @Input() allowFutureDates: boolean = true;\n    @Input() allowInfinity: boolean = false;\n    @Input() inputName: string = this.idGenerator();\n    @Input() classNames: string = \"\";\n    @Input() customStyles: string = \"\";\n    @Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n    @Input() label: string = \"\"; // raw string input\n    @Input() disable: boolean = false;\n    @Input() required: boolean = false;\n    @Input() placement: string = \"bottom\";\n    @Input() oldDate: string = null;\n    @Input() title: string = \"\";\n\n    _value: Date;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set value(value) {\n        if (value) {\n            this.setValue(value ? value : null);\n        }\n    }\n\n    @Output() public valueChange = new EventEmitter<string>();\n\n    /* You can pass a function in with (change)='function()' */\n    @Output() public change = new EventEmitter<any>();\n\n    today: Date = new Date();\n    message: string;\n    returnFocusToInput: boolean = false;\n    valueIsPresent: boolean = false;\n\n    @Input() valid: boolean = true;\n    @Output() public validChange = new EventEmitter<boolean>();\n\n    constructor(private localizationService: LocalizationService, private bsDatepickerConfig: BsDatepickerConfig, private changeDetectorRef: ChangeDetectorRef, private dateService: DateService) {\n        this.bsDatepickerConfig.dateInputFormat = \"YYYY-MM-DD\";\n    }\n\n\n    private setValue(value: string | number): void {\n        // @ts-ignore\n        if (!isNaN(value)) {\n            // @ts-ignore\n            value = parseInt(value);\n        }\n\n        if (value && typeof value === \"string\") {\n            let date = new Date(+value.split(\"-\")[0], +value.split(\"-\")[1] - 1, +value.split(\"-\")[2]);\n\n            if (value === PRESENT) {\n                this.valueIsPresent = true;\n            }\n\n            this._value = date;\n        } else if (value && typeof value === \"number\") {\n            // Custom attributes of date type come through as UTC time\n            this._value = new Date(new Date(value).getUTCFullYear(), new Date(value).getUTCMonth(), new Date(value).getUTCDate());\n        } else {\n            this._value = null;\n        }\n    }\n\n    public getValue(): Date {\n        return this._value;\n    }\n\n    public setInvalid(message: string) {\n        this.valid = false;\n        this.message = message;\n    }\n\n    idGenerator() {\n        let S4 = function() {\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n        };\n        return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n    }\n\n    isEqual(date1: Date, date2: Date): boolean {\n        let equal = false;\n\n        if (date1 && date2) {\n            // if(date1.toISOString().substr(0, 10) === PRESENT && date2.toISOString().substr(0, 10) === PRESENT){\n            if (date1.getTime() === date2.getTime()) {\n                return true;\n            }\n        }\n\n        return equal;\n    }\n\n    toggleInfinity(): void {\n        let date = this.getValue();\n\n        if (date && this.isEqual(date, this.dateService.getPresentDate())) {\n            this.setValue(null); // clear the date picker\n            this.valueChange.emit(null);\n            this.valueIsPresent = false;\n        } else {\n            this.setValue(PRESENT);\n            this.valueChange.emit(this.dateService.getDateString(this.getValue()));\n            this.valueIsPresent = true;\n        }\n\n        this.change.emit();\n    }\n\n    toggle(event: Date): void {\n        setTimeout(() => {\n            let validity = this.dateService.validateDate(event, this.required, this.allowFutureDates);\n            this.valid = validity.valid;\n            this.message = validity.message;\n\n            if (this.valid) {\n                // Must adhere to the ISO 8601 format\n                let formattedDate = this.dateService.getDateString(event);\n\n                if (formattedDate === PRESENT) {\n                    this.valueIsPresent = true;\n                } else {\n                    this.valueIsPresent = false;\n                }\n\n                this.valueChange.emit(formattedDate);\n            } else {\n                // hack to avoid ngx-datepicker from putting \"invalid date\" in the input\n                this.setValue(null);\n\n                this.valueChange.emit(null);\n            }\n\n            this.change.emit();\n            this.validChange.emit(this.valid);\n        }, 0)\n    }\n\n}","\n<label for=\"{{inputName}}\" *ngIf=\"label.length > 0\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n<label for=\"{{inputName}}\" *ngIf=\"localizeLabelKey.length > 0\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n\n<!-- <input id=\"date-input\" [class]=\"classNames\" name=\"{{inputName}}\" [(ngModel)]=\"value\" (change)=\"toggle($event)\" type=\"date\" max=\"{{today|date:'yyyy-MM-dd'}}\" [disabled]=\"disable\" [required]=\"required\"/> -->\n\n<div [hidden]=\"valueIsPresent\">\n  <span class=\"wrapper\">\n      <input [class]=\"classNames ? classNames + ' ' + 'date-input-element' : 'date-input-element'\" \n           [style]=\"customStyles ? customStyles : ''\"\n           name=\"{{inputName}}\"\n           type=\"text\"\n           placeholder=\"YYYY-MM-DD\"\n           [bsValue]=\"_value\"\n           [value]=\"_value | date: 'yyyy-MM-dd'\"\n           (bsValueChange)=\"toggle($event)\"\n           [bsConfig]=\"{\n              dateInputFormat: 'YYYY-MM-DD', \n              containerClass: 'theme-default', \n              returnFocusToInput: returnFocusToInput,\n              adaptivePosition: true\n              }\"\n           [outsideClick]=\"true\"\n           placement=\"{{placement}}\"\n           [maxDate]=\"allowFutureDates ? null : today\"\n           [isDisabled]=\"disable\"\n           [disabled]=\"disable\"\n           bsDatepicker\n           #dp=\"bsDatepicker\"\n           title=\"{{title}}\"\n           autocomplete=\"off\"\n           >\n  </span>\n  \n  <div class=\"form-input-validation-error-message-wrapper\">\n    <p *ngIf=\"message\" class=\"error-message\">{{message}}</p>\n  </div>\n</div>\n\n<div *ngIf=\"oldDate\">\n  <p class=\"warning-text display-current-value\">\n    <localize key=\"change.request.changed.value.prefix\"></localize>\n    {{ oldDate }}\n  </p>\n</div>\n\n<p [hidden]=\"!valueIsPresent\" style=\"font-size:14px;margin:0;\"><localize key=\"changeovertime.manageVersions.infinity.endDate.label\"></localize></p>\n\n<div *ngIf=\"allowInfinity\" class=\"text-right\" style=\"padding: 10px 0;\">\n  <button class=\"btn btn-default\" style=\"margin:0;\" *ngIf=\"valueIsPresent\" (click)=\"toggleInfinity()\" [disabled]=\"disable\" title=\"{{title}}\"><localize key=\"manage.versions.enddate.set.date.button\"></localize></button> \n  <button class=\"btn btn-default\" style=\"margin:0;\" *ngIf=\"!valueIsPresent\" (click)=\"toggleInfinity()\" [disabled]=\"disable\" title=\"{{title}}\"><localize key=\"manage.versions.enddate.set.current.button\"></localize></button>\n</div>\n\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\n\nimport { GeoRegistryConfiguration } from \"@core/model/registry\"; declare let registry: GeoRegistryConfiguration;\n\n@Component({\n    selector: \"boolean-field\",\n    templateUrl: \"./boolean-field.component.html\",\n    styleUrls: [\"./boolean-field.css\"]\n})\nexport class BooleanFieldComponent {\n\n    @Input() value: boolean = false;\n    @Output() public valueChange = new EventEmitter<boolean>();\n\n    @Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n    @Input() label: string = \"\"; // raw string input\n\n    @Input() disable: boolean = false;\n\n    /* You can pass a function in with (change)='function()' */\n    @Output() public change = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    toggle(): void {\n        if (!this.disable) {\n            this.value = !this.value;\n\n            this.valueChange.emit(this.value);\n            this.change.emit(this.value);\n        }\n    }\n}","<div (click)=\"toggle()\" class=\"check-block\" [ngClass]=\"{'dizabled': disable}\">\n  <div [ngClass]=\"{'chk-checked' : value}\" ng-style=\"chkstyle\" class=\"chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label && label.length > 0\" class=\"checkbox-label\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey && localizeLabelKey.length > 0\" class=\"checkbox-label\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","import { Directive, ElementRef, HostListener, Input } from \"@angular/core\";\n\n@Directive({\n    selector: \"[OnlyNumber]\"\n})\nexport class OnlyNumber {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private el: ElementRef) { }\n\n    @Input() OnlyNumber: boolean;\n\n    @HostListener(\"keydown\", [\"$event\"]) onKeyDown(event: any) {\n        let e = <KeyboardEvent>event;\n        if (this.OnlyNumber) {\n            if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n                // Allow: Ctrl+A\n                (e.keyCode === 65 && e.ctrlKey === true) ||\n                // Allow: Ctrl+C\n                (e.keyCode === 67 && e.ctrlKey === true) ||\n                // Allow: Ctrl+X\n                (e.keyCode === 88 && e.ctrlKey === true) ||\n                // Allow: home, end, left, right\n                (e.keyCode >= 35 && e.keyCode <= 39)) {\n                // let it happen, don't do anything\n                return;\n            }\n            // Ensure that it is a number and stop the keypress\n            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\n","import { Directive, Input } from \"@angular/core\";\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from \"@angular/forms\";\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        // return null if controls haven't initialised yet\n        if (!control || !matchingControl) {\n            return null;\n        }\n\n        // return null if another validator has already found an error on the matchingControl\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            return null;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    };\n}\n\n@Directive({\n    selector: \"[mustMatch]\",\n    providers: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\n    @Input(\"mustMatch\") mustMatch: string[] = [];\n\n    validate(formGroup: FormGroup): ValidationErrors {\n        return MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n    }\n\n}\n","/* eslint-disable padded-blocks */\nexport class Profile {\n    oid: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    changePassword?: boolean;\n    phoneNumber?: string;\n    altFirstName?: string;\n    altLastName?: string;\n    altPhoneNumber?: string;\n    position?: string;\n    department?: string;\n    externalSystemOid?: string;\n}","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { formatNumber, ParsedNumber } from \"libphonenumber-js\";\n\n@Pipe({\n    name: \"phone\"\n})\nexport class PhonePipe implements PipeTransform {\n\n    transform(value: ParsedNumber, args?: string): any {\n        if (!value) {\n            return value;\n        }\n\n        return formatNumber({ country: \"US\", phone: value.toString() }, \"International\");\n    }\n\n}\n","import { Input, Component, OnInit } from \"@angular/core\";\n\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"localize\",\n    templateUrl: \"./localize.component.html\",\n    styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n\n    @Input() key: string;\n    @Input() params: { [key: string]: string } = null;\n\n    text: string;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.text = this.service.decode(this.key);\n\n        if (this.params != null) {\n            const keys = Object.keys(this.params);\n\n            keys.forEach((key) => {\n                if (this.params[key] != null) {\n                    this.text = this.text.replace(key, this.params[key]);\n                }\n            });\n        }\n    }\n\n}\n","<span [innerHtml]=\"text\"></span>","import { Component, OnInit } from \"@angular/core\";\n\nimport { EventService, IEventListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"loading-bar\",\n    templateUrl: \"./loading-bar.component.html\",\n    styleUrls: [\"./loading-bar.css\"]\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n\n    showIndicator: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.showIndicator = true;\n    }\n\n    complete(): void {\n        this.showIndicator = false;\n    }\n\n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Injectable } from \"@angular/core\";\nimport { CookieService } from \"ngx-cookie-service\";\nimport { User } from \"@shared/model/user\";\nimport { RoleBuilder, RegistryRole, RegistryRoleType, LocaleView } from \"@shared/model/core\";\n\n@Injectable()\nexport class AuthService {\n\n    private user: User = {\n        loggedIn: false,\n        userName: \"\",\n        roles: [],\n        roleDisplayLabels: [],\n        version: \"0\",\n        installedLocales: []\n    };\n\n    constructor(private service: CookieService) {\n        let cookie = service.get(\"user\");\n\n        if (this.service.check(\"user\") && cookie != null && cookie.length > 0) {\n            let cookieData: string = this.service.get(\"user\");\n            let cookieDataJSON: any = JSON.parse(cookieData);\n\n            this.buildFromCookieJson(cookieDataJSON);\n        }\n\n        this.loadLocales();\n    }\n\n    buildFromCookieJson(cookieDataJSON: any) {\n        this.user.userName = cookieDataJSON.userName;\n        this.buildRolesFromCookie(cookieDataJSON);\n        this.user.loggedIn = cookieDataJSON.loggedIn;\n        this.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n        this.user.version = cookieDataJSON.version.replaceAll(\"+\", \" \");\n        // this.user.installedLocales = cookieDataJSON.installedLocales;\n    }\n\n    buildRolesFromCookie(cookieDataJSON: any) {\n        this.user.roles = [];\n        let roles: string[] = cookieDataJSON.roles;\n\n        for (let i = 0; i < roles.length; ++i) {\n            let role: RegistryRole = RoleBuilder.buildFromRoleName(roles[i]);\n\n            if (role != null) {\n                this.user.roles.push(role);\n            }\n        }\n    }\n\n    isLoggedIn(): boolean {\n        return this.user.loggedIn;\n    }\n\n    afterLogIn(logInResponse: any): void {\n        this.buildFromCookieJson(JSON.parse(this.service.get(\"user\")));\n\n        this.setLocales(logInResponse.installedLocales);\n        this.user.installedLocales = logInResponse.installedLocales;\n    }\n\n    afterLogOut(): void {\n        this.user = null;\n        sessionStorage.removeItem(\"locales\");\n    }\n\n    loadLocales() {\n        let storageLocales = window.sessionStorage.getItem(\"locales\");\n\n        if (storageLocales != null) {\n            this.user.installedLocales = JSON.parse(storageLocales);\n        }\n    }\n\n    setLocales(locales: LocaleView[]) {\n        window.sessionStorage.setItem(\"locales\", JSON.stringify(locales));\n    }\n\n    removeUser(): void {\n        this.user = {\n            loggedIn: false,\n            userName: \"\",\n            roles: [],\n            roleDisplayLabels: [],\n            version: \"0\",\n            installedLocales: []\n        };\n    }\n\n    // Legacy Accessors:\n    isAdmin(): boolean {\n        return this.isSRA() || this.isRA();\n    }\n\n    isMaintainer(): boolean {\n        return this.isSRA() || this.isRM();\n    }\n\n    isContributer(): boolean {\n        return this.isSRA() || this.isRC(false);\n    }\n\n    isContributerOnly(): boolean {\n        return this.isRC(true);\n    }\n\n    // Used to exactly identify a role. I.e. if we say we need RC, SRA doesn't count.\n    hasExactRole(roleType: RegistryRoleType) {\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === roleType) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isSRA(): boolean {\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.SRA) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isRA(): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RA) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryAdministrator\") !== -1 || role.roleName.indexOf(\"cgr.RegistryAdministrator\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n    }\n\n    isRM(): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RM) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryMaintainer\") !== -1 || role.roleName.indexOf(\"cgr.RegistryMaintainer\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isOrganizationRA(orgCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.orgCode === orgCode && role.type === RegistryRoleType.RA) {\n                return true;\n            }\n        }\n\n        return false; // this.isSRA();\n    }\n\n    isGeoObjectTypeRM(orgCode: string, gotCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RM && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n                return true;\n            }\n        }\n\n        return this.isOrganizationRA(orgCode);\n    }\n\n    isGeoObjectTypeOrSuperRM(got: { organizationCode: string, superTypeCode?: string, code: string }, allowRoleSuper: boolean = true): boolean {\n        if (this.isGeoObjectTypeRM(got.organizationCode, got.code)) {\n            return true;\n        } else if (got.superTypeCode != null) {\n            return this.isGeoObjectTypeRM(got.organizationCode, got.superTypeCode);\n        }\n    }\n\n    isGeoObjectTypeRC(orgCode: string, gotCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RC && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n                return true;\n            }\n        }\n\n        return this.isGeoObjectTypeRM(orgCode, gotCode);\n    }\n\n    isGeoObjectTypeOrSuperRC(got: { organizationCode: string, superTypeCode?: string, code: string }, allowRoleSuper: boolean = true): boolean {\n        if (this.isGeoObjectTypeRC(got.organizationCode, got.code)) {\n            return true;\n        } else if (got.superTypeCode != null) {\n            return this.isGeoObjectTypeRC(got.organizationCode, got.superTypeCode);\n        }\n    }\n\n    isRC(isRCOnly: boolean): boolean {\n        if (this.isSRA() && !isRCOnly) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RC) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryContributor\") !== -1 || role.roleName.indexOf(\"cgr.RegistryContributor\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // Returns all organization codes that the current user participates in.\n    // If the user is an SRA then this method will return an empty string array.\n    getMyOrganizations(): string[] {\n        let orgCodes: string[] = [];\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.SRA || role.type === RegistryRoleType.RC || role.type === RegistryRoleType.RM || role.type === RegistryRoleType.RA) {\n                orgCodes.push(role.orgCode);\n            }\n        }\n\n        return orgCodes;\n    }\n\n    __getRoleFromRoleName(roleName: string): string {\n        let nameArr = roleName.split(\".\");\n\n        return nameArr[nameArr.length - 1];\n    }\n\n    getUsername(): string {\n        return this.user.userName;\n    }\n\n    getRoles(): any {\n        return this.user.roles;\n    }\n\n    getRoleDisplayLabelsArray(): any {\n        return this.user.roleDisplayLabels;\n    }\n\n    getRoleDisplayLabels(): string {\n        let str = \"\";\n        for (let i = 0; i < this.user.roleDisplayLabels.length; ++i) {\n            let displayLabel = this.user.roleDisplayLabels[i];\n\n            if (displayLabel === \"Administrator\") {\n                continue;\n                // It's OK to hardcode to a display label here because the end user can't change it anyway.\n                // Is it ideal? No. But sometimes it's better to get software out quicker than to spend forever\n                // on something that nobody will ever see.\n            }\n\n            str = str + displayLabel;\n\n            if (i < this.user.roleDisplayLabels.length - 1) {\n                str = str + \",\";\n            }\n        }\n\n        return str;\n    }\n\n    getVersion(): string {\n        return this.user.version;\n    }\n\n    getLocales(): LocaleView[] {\n        return this.user.installedLocales;\n    }\n\n    addLocale(locale: LocaleView): void {\n        let exists: boolean = false;\n\n        for (let i = 0; i < this.user.installedLocales.length; ++i) {\n            if (this.user.installedLocales[i].tag === locale.tag) {\n                exists = true;\n                this.user.installedLocales[i] = locale;\n            }\n        }\n\n        if (!exists) {\n            this.user.installedLocales.push(locale);\n        }\n\n        this.setLocales(this.user.installedLocales);\n    }\n\n    removeLocale(locale: LocaleView): void {\n        for (let i = 0; i < this.user.installedLocales.length; ++i) {\n            if (this.user.installedLocales[i].tag === locale.tag) {\n                this.user.installedLocales.splice(i, 1);\n                this.setLocales(this.user.installedLocales);\n                return;\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(\"Could not remove locale from array because we could not find it.\", locale, this.user.installedLocales);\n    }\n\n}\n","import { Component, OnChanges, Input, SimpleChange } from \"@angular/core\";\n\n@Component({\n    selector: \"password-strength-bar\",\n    templateUrl: \"./password-strength-bar.component.html\",\n    styleUrls: [\"./password-strength-bar.component.css\"]\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n    @Input() passwordToCheck: string;\n    bar0: string;\n    bar1: string;\n    bar2: string;\n    bar3: string;\n    bar4: string;\n\n    private colors = [\"#F00\", \"#F90\", \"#FF0\", \"#9F0\", \"#0F0\"];\n\n    private static measureStrength(pass: string) {\n        let score = 0;\n        // award every unique letter until 5 repetitions\n        let letters = {};\n        for (let i = 0; i < pass.length; i++) {\n            letters[pass[i]] = (letters[pass[i]] || 0) + 1;\n            score += 5.0 / letters[pass[i]];\n        }\n        // bonus points for mixing it up\n        let variations = {\n            digits: /\\d/.test(pass),\n            lower: /[a-z]/.test(pass),\n            upper: /[A-Z]/.test(pass),\n            nonWords: /\\W/.test(pass)\n        };\n\n        let variationCount = 0;\n        for (let check in variations) {\n            variationCount += (variations[check]) ? 1 : 0;\n        }\n        score += (variationCount - 1) * 10;\n        return Math.trunc(score);\n    }\n\n    private getColor(score: number) {\n        let idx = 0;\n        if (score > 90) {\n            idx = 4;\n        } else if (score > 70) {\n            idx = 3;\n        } else if (score >= 40) {\n            idx = 2;\n        } else if (score >= 20) {\n            idx = 1;\n        }\n        return {\n            idx: idx + 1,\n            col: this.colors[idx]\n        };\n    }\n\n    ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n        let password = changes[\"passwordToCheck\"].currentValue;\n        this.setBarColors(5, \"#DDD\");\n        if (password) {\n            let c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n            this.setBarColors(c.idx, c.col);\n        }\n    }\n\n    private setBarColors(count, col) {\n        for (let _n = 0; _n < count; _n++) {\n            this[\"bar\" + _n] = col;\n        }\n    }\n\n}\n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n"],"sourceRoot":""}