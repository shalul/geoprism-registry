{"version":3,"sources":["webpack:///./src/app/shared/component/index.ts","webpack:///./src/app/shared/service/date.service.ts","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.html","webpack:///./src/app/shared/service/external-system.service.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/service/organization.service.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/service/index.ts","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/modals/generic-modal.component.ts","webpack:///./src/app/shared/component/modals/generic-modal.component.html","webpack:///./src/app/registry/model/registry.ts","webpack:///./src/app/registry/model/constants.ts","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/shared/component/error-handler/error-handler.ts","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.html","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/component/form-fields/date-field/date-field.component.ts","webpack:///./src/app/shared/component/form-fields/date-field/date-field.component.html","webpack:///./src/app/registry/model/crtable.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/registry/utility/Utils.ts","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/shared/model/profile.ts","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/pipe/localize.pipe.ts"],"names":["components","ErrorHandler","CgrHeaderComponent","LoadingBarComponent","LocalizeComponent","ErrorMessageComponent","MessageComponent","ConfirmModalComponent","GenericModalComponent","ErrorModalComponent","ModalStepIndicatorComponent","SuccessModalComponent","PasswordStrengthBarComponent","ProfileComponent","ProgressBarComponent","localizationService","overlapMessage","severity","message","this","decode","type","ConflictType","TIME_RANGE","gapMessage","getPresentDate","Date","formatDateForDisplay","date","PRESENT","localize","getDateString","split","getDateFromDateString","value","year","getFullYear","month","getMonth","dt","getDate","checkRanges","vAttributes","hasConflict","forEach","attr","conflictMessage","i","length","splice","filtered","filter","vAttr","summaryKeyData","SummaryKey","DELETE","j","h1","startDate","endDate","s1","e1","dateEndBeforeStart","push","h2","s2","e2","dateRangeOverlaps","getTime","sort","current","next","hasGap","votArr","a","b","DateService","Injectable","locales","parser","Globalize","numberParser","formatter","numberFormatter","registry","locale","addLocale","exists","tag","setLocales","getLocale","getLocales","create","localizedValue","localeValues","toString","remove","console","log","parseNumber","formatNumber","number","Number","bundle","key","com","runwaysdk","Localize","get","index","lastIndexOf","temp","slice","LocalizationService","listeners","registerListener","listener","deregisterListener","indexOfItem","indexOf","start","complete","EventService","modalService","profileService","service","loggedIn","context","acp","isAdmin","isMaintainer","isContributor","isContributer","defaultLocaleView","found","shouldShowMenuItem","item","hasExactRole","RegistryRoleType","SRA","RA","RM","RC","logout","sessionStorage","removeItem","window","location","href","getUsername","setLocale","then","reload","account","profile","bsModalRef","show","backdrop","class","content","Component","selector","templateUrl","styleUrls","Input","router","canActivate","route","state","navigate","AdminGuard","MaintainerGuard","ContributerGuard","isLoggedIn","AuthGuard","authService","_profile","oid","username","password","firstName","lastName","email","changePassword","roles","getRoles","getRolesForUser","onSubmit","apply","hide","onChangePassword","getRolesArray","cancel","unlock","styles","modalStepIndicatorService","stepSubscription","modalStepChange","subscribe","stepConfig","ngOnInit","ngOnDestroy","unsubscribe","showIndicator","prog","total","description","progress","http","eventService","getExternalSystems","pageNumber","pageSize","params","HttpParams","set","pipe","finalize","toPromise","getExternalSystem","applyExternalSystem","system","headers","HttpHeaders","post","JSON","stringify","getSystemCapabilities","removeExternalSystem","ExternalSystemService","modalStepChangedSource","Subject","asObservable","getStepConfig","setStepConfig","config","getStep","step","setStep","ModalStepIndicatorService","getOrganizations","updateOrganization","json","newOrganization","removeOrganization","code","OrganizationService","canDeactivate","component","confirmRet","confirm","afterDeactivate","PendingChangesGuard","services","AuthService","ProfileService","ProgressService","SessionService","userOID","login","logInResponse","afterLogIn","response","afterLogOut","localizeService","submitText","cancelText","ModalTypes","warning","onConfirm","onCancel","data","GenericButton","buttons","init","onClick","button","shouldClose","TreeEntity","label","children","addChild","term","Term","GeoObject","attributes","GeoObjectType","Task","geoObjectType","getVotAtDate","attrCode","lService","retVot","time","isChangeOverTime","values","vot","parse","Array","isArray","GeoObjectOverTime","ConflictMessage","ValueOverTime","AttributeOverTime","isDefault","required","unique","AttributeType","isChange","rootTerm","termOptions","setRootTerm","AttributeTermType","precision","scale","AttributeDecimalType","TreeNode","ChildTreeNode","ParentTreeNode","ManageGeoObjectTypeModalState","PaginationPage","AbstractScheduledJob","ScheduledJob","ScheduledJobOverview","ImportError","ServerException","ServerExceptionAttribute","ImportErrorObject","StepConfig","Step","MasterList","MasterListVersion","HierarchyOverTime","HierarchyOverTimeEntry","HierarchyOverTimeEntryParent","MasterListByOrg","SynchronizationConfig","OrgSyncInfo","ExportScheduledJob","ContextLayer","ContextLayerGroup","ActionTypes","GovernanceStatus","GeoObjectTypeModalStates","ImportStrategy","LocaleValue","isDefaultLocale","language","country","variant","LocaleView","Organization","ExternalSystem","OAuthServer","PageResult","getValue","localeToString","len","lv","LocalizedValue","buildFromRoleName","roleName","RegistryRole","roleSplit","orgCode","roleSuffix","gotCode","AC","RoleBuilder","geoObjectTypeCode","getMessageFromError","err","unspecified","msg","error","localizedMessage","includes","showErrorAsDialog","HttpErrorResponse","status","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors","validate","MustMatchDirective","provide","NG_VALIDATORS","useExisting","multi","Directive","providers","forRoot","ngModule","SharedModule","CookieService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","ModalModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","BsDatepickerModule","ConvertKeyLabel","BooleanFieldComponent","DateFieldComponent","OnlyNumber","LocalizePipe","PhonePipe","NgModule","imports","declarations","exports","entryComponents","text","bsDatepickerConfig","changeDetectorRef","dateService","allowFutureDates","allowInfinity","inputName","idGenerator","classNames","customStyles","localizeLabelKey","disable","placement","oldDate","valueChange","EventEmitter","change","today","returnFocusToInput","valueIsPresent","valid","validChange","dateInputFormat","setValue","isNaN","parseInt","_value","getUTCFullYear","getUTCMonth","getUTCDate","setInvalid","S4","Math","random","substring","isEqual","date1","date2","toggleInfinity","emit","toggle","event","setTimeout","newValue","formattedDate","BsDatepickerDirective","datepicker","ViewChild","static","Output","Document","Geometry","ValueOverTimeDiff","AbstractAction","actionType","CREATEGEOOBJECTACTION","CreateGeoObjectAction","attributeName","UPDATEATTRIBUTETACTION","attributeDiff","valuesOverTime","UpdateAttributeAction","ChangeRequestCurrentObject","UpdateChangeRequestCurrentObject","ChangeRequest","PageEvent","removeStatuses","arr","newArray","formatDateString","dateObj","day","a_start","a_end","b_start","b_end","end","el","onKeyDown","e","keyCode","ctrlKey","shiftKey","preventDefault","HostListener","Profile","transform","args","phone","Pipe","name","Object","keys","replace","colors","measureStrength","pass","score","letters","variations","digits","test","lower","upper","nonWords","variationCount","check","trunc","getColor","idx","col","ngOnChanges","changes","currentValue","setBarColors","c","count","_n","passwordToCheck","onError","onMessage","user","userName","roleDisplayLabels","version","installedLocales","cookie","cookieData","cookieDataJSON","buildFromCookieJson","loadLocales","buildRolesFromCookie","replaceAll","role","storageLocales","getItem","setItem","removeUser","isSRA","isRA","isRM","isRC","isContributerOnly","roleType","isOrganizationRA","isGeoObjectTypeRM","isGeoObjectTypeOrSuperRM","got","allowRoleSuper","organizationCode","superTypeCode","isGeoObjectTypeRC","isGeoObjectTypeOrSuperRC","isRCOnly","getMyOrganizations","orgCodes","__getRoleFromRoleName","nameArr","getRoleDisplayLabelsArray","getRoleDisplayLabels","str","displayLabel","getVersion","removeLocale"],"mappings":"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A,8DAGA,8DAIA,kFAGA,kFAGA,mF,0GA7PrB,0BACE,yBAEA,+BAA+E,kIAC7E,+BACE,4BACE,yBACE,4BACF,iBACF,iBAEA,4BACE,4BACE,6BACE,6BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,8GAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,iHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,mHAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,mCAAmB,0GAAnB,iBACF,iBACA,gCAGF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,+GAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,0BACE,8BACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEA,gCAaA,gCAaA,gCAkCA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BAEE,gCACE,6BACE,0BACI,0BAAI,8BAA4D,iBAChE,0BAAI,8BAAoE,iBACxE,0BAAI,8BAAqE,iBAC7E,iBACF,iBACA,8BACE,iCA+BF,iBACF,iBAIF,iBACF,iBAEA,+BACE,+BACE,+BACE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","file":"0.chunk.js","sourcesContent":["import { ErrorHandler } from \"./error-handler/error-handler\";\nimport { CgrHeaderComponent } from \"./header/header.component\";\nimport { LoadingBarComponent } from \"./loading-bar/loading-bar.component\";\nimport { LocalizeComponent } from \"./localize/localize.component\";\nimport { ErrorMessageComponent } from \"./message/error-message.component\";\nimport { MessageComponent } from \"./message/message.component\";\nimport { ConfirmModalComponent } from \"./modals/confirm-modal.component\";\nimport { ErrorModalComponent } from \"./modals/error-modal.component\";\nimport { ModalStepIndicatorComponent } from \"./modals/modal-step-indicator.component\";\nimport { SuccessModalComponent } from \"./modals/success-modal.component\";\nimport { PasswordStrengthBarComponent } from \"./password-strength-bar/password-strength-bar.component\";\nimport { ProfileComponent } from \"./profile/profile.component\";\nimport { ProgressBarComponent } from \"./progress-bar/progress-bar.component\";\nimport { GenericModalComponent } from \"./modals/generic-modal.component\";\n\nexport const components: any[] = [\n    ErrorHandler,\n    CgrHeaderComponent,\n    LoadingBarComponent,\n    LocalizeComponent,\n    ErrorMessageComponent,\n    MessageComponent,\n    ConfirmModalComponent,\n    GenericModalComponent,\n    ErrorModalComponent,\n    ModalStepIndicatorComponent,\n    SuccessModalComponent,\n    PasswordStrengthBarComponent,\n    ProfileComponent,\n    ProgressBarComponent\n];\n\nexport * from \"./error-handler/error-handler\";\nexport * from \"./header/header.component\";\nexport * from \"./loading-bar/loading-bar.component\";\nexport * from \"./localize/localize.component\";\nexport * from \"./message/error-message.component\";\nexport * from \"./message/message.component\";\nexport * from \"./modals/confirm-modal.component\";\nexport * from \"./modals/generic-modal.component\";\nexport * from \"./modals/error-modal.component\";\nexport * from \"./modals/modal-step-indicator.component\";\nexport * from \"./modals/success-modal.component\";\nexport * from \"./password-strength-bar/password-strength-bar.component\";\nexport * from \"./profile/profile.component\";\nexport * from \"./progress-bar/progress-bar.component\";\n","import { Injectable } from \"@angular/core\";\nimport { LocalizationService } from \"./localization.service\";\nimport Utils from \"../../registry/utility/Utils\";\nimport { PRESENT, ConflictMessage, TimeRangeEntry } from \"@registry/model/registry\";\nimport { SummaryKey } from \"@registry/model/crtable\";\nimport { ConflictType } from \"@registry/model/constants\";\n\n@Injectable()\nexport class DateService {\n\n    overlapMessage: ConflictMessage = {\n        severity: \"ERROR\",\n        message: this.localizationService.decode(\"manage.versions.overlap.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    gapMessage: ConflictMessage = {\n        severity: \"WARNING\",\n        message: this.localizationService.decode(\"manage.versions.gap.message\"),\n        type: ConflictType.TIME_RANGE\n    }\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private localizationService: LocalizationService) { }\n\n    // Get infinity date (called 'present' in the UI)\n    public getPresentDate(): Date {\n        // NOTE: Month is 0 indexed so 11 = December\n        let dt = new Date(5000, 11, 31, 0, 0, 0);\n\n        return dt;\n    }\n\n    public formatDateForDisplay(date: string | Date): string {\n        if (!date) {\n            return \"\";\n        }\n\n        if (date === PRESENT) {\n            return this.localizationService.localize(\"changeovertime\", \"present\");\n        }\n\n        if (date instanceof Date) {\n            return this.getDateString(date);\n        } else {\n            return date.split(\"T\")[0];\n        }\n    }\n\n    // @param value as yyyy-mm-dd\n    getDateFromDateString(value: string) {\n        return new Date(+value.split(\"-\")[0], +value.split(\"-\")[1] - 1, +value.split(\"-\")[2]);\n    }\n\n    getDateString(date: Date): string {\n        if (date instanceof Date) {\n            let year = date.getFullYear();\n            let month: number | string = date.getMonth() + 1;\n            let dt: number | string = date.getDate();\n\n            if (dt < 10) {\n                dt = \"0\" + dt;\n            }\n            if (month < 10) {\n                month = \"0\" + month;\n            }\n\n            return year + \"-\" + month + \"-\" + dt;\n        }\n\n        return null;\n    }\n\n    checkRanges(vAttributes: TimeRangeEntry[]): boolean {\n        let hasConflict = false;\n\n        // clear all messages\n        vAttributes.forEach(attr => {\n            if (!attr.conflictMessage) {\n                attr.conflictMessage = [];\n            }\n\n            for (let i = attr.conflictMessage.length - 1; i >= 0; --i) {\n                if (attr.conflictMessage[i].type === ConflictType.TIME_RANGE) {\n                    attr.conflictMessage.splice(i, 1);\n                }\n            }\n        });\n\n        // Filter DELETE entries from overlap and gap consideration\n        const filtered = vAttributes.filter(vAttr => vAttr.summaryKeyData == null || vAttr.summaryKeyData !== SummaryKey.DELETE);\n\n        // Check for overlaps\n        for (let j = 0; j < filtered.length; j++) {\n            const h1 = filtered[j];\n\n            if (h1.startDate && h1.endDate) {\n                let s1: any = this.getDateFromDateString(h1.startDate);\n                let e1: any = this.getDateFromDateString(h1.endDate);\n\n                if (Utils.dateEndBeforeStart(s1, e1)) {\n                    h1.conflictMessage.push({\n                        severity: \"ERROR\",\n                        message: this.localizationService.decode(\"manage.versions.startdate.later.enddate.message\"),\n                        type: ConflictType.TIME_RANGE\n                    } as ConflictMessage);\n\n                    hasConflict = true;\n                }\n\n                for (let i = 0; i < filtered.length; i++) {\n                    if (j !== i) {\n                        const h2 = filtered[i];\n\n                        // If all dates set\n                        if (h2.startDate && h2.endDate) {\n                            let s2: Date = this.getDateFromDateString(h2.startDate);\n                            let e2: Date = this.getDateFromDateString(h2.endDate);\n\n                            // Determine if there is an overlap\n                            if (Utils.dateRangeOverlaps(s1.getTime(), e1.getTime(), s2.getTime(), e2.getTime())) {\n                                h1.conflictMessage.push(this.overlapMessage);\n\n                                if (s2.getTime() === e2.getTime()) {\n                                    h2.conflictMessage.push(this.overlapMessage);\n                                }\n\n                                hasConflict = true;\n                            }\n                        } else if ((i === j - 1 || i === j + 1) && e1 && h2.startDate) {\n                            // If 1st end date and current start date\n\n                            let s2: Date = this.getDateFromDateString(h2.startDate);\n\n                            if (s2.getTime() <= e1) {\n                                h1.conflictMessage.push(this.overlapMessage);\n                                h2.conflictMessage.push(this.overlapMessage);\n\n                                hasConflict = true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        this.sort(filtered);\n\n        // Check for gaps\n        let current = null;\n        for (let j = 0; j < filtered.length; j++) {\n            let next = filtered[j];\n\n            if (j > 0) {\n                if (current.endDate && next.startDate) {\n                    let e1: any = new Date(current.endDate);\n                    let s2: any = new Date(next.startDate);\n\n                    if (Utils.hasGap(e1.getTime(), s2.getTime())) {\n                        next.conflictMessage.push(this.gapMessage);\n\n                        current.conflictMessage.push(this.gapMessage);\n                    }\n                }\n            }\n\n            current = next;\n        }\n\n        this.sort(vAttributes);\n\n        return hasConflict;\n    }\n\n    sort(votArr: TimeRangeEntry[]): void {\n        // Sort the data by start date\n        votArr.sort(function(a, b) {\n            if (a.startDate == null || a.startDate === \"\") {\n                return 1;\n            } else if (b.startDate == null || b.startDate === \"\") {\n                return -1;\n            }\n\n            let first: any = new Date(a.startDate);\n            let next: any = new Date(b.startDate);\n            return first - next;\n        });\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { LocalizedValue, LocaleView } from \"@shared/model/core\";\n\ndeclare let Globalize: any;\ndeclare let com: any;\ndeclare let registry: any;\n\n@Injectable()\nexport class LocalizationService {\n\n    locales: LocaleView[] = [];\n    locale: string;\n\n    private parser: any = Globalize.numberParser();\n    private formatter: any = Globalize.numberFormatter();\n\n    constructor() {\n        this.locales = registry.locales;\n        this.locale = registry.locale;\n    }\n\n    addLocale(locale: LocaleView): void {\n        let exists: boolean = false;\n\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].tag === locale.tag) {\n                exists = true;\n                this.locales[i] = locale;\n            }\n        }\n\n        if (!exists) {\n            this.locales.push(locale);\n        }\n    }\n\n    setLocales(locales: LocaleView[]): void {\n        this.locales = locales;\n    }\n\n    getLocale(): string {\n        return this.locale;\n    }\n\n    getLocales(): LocaleView[] {\n        return this.locales;\n    }\n\n    create(): LocalizedValue {\n        const value = { localizedValue: \"\", localeValues: [] } as LocalizedValue;\n\n        this.locales.forEach(locale => {\n            //if (!locale.isDefaultLocale)\n            //{\n            value.localeValues.push({ locale: locale.toString, value: \"\" });\n            //}\n        });\n\n        return value;\n    }\n\n    remove(locale: LocaleView): void {\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].tag === locale.tag) {\n                this.locales.splice(i, 1);\n                return;\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(\"Could not remove locale from array because we could not find it.\", locale, this.locales);\n    }\n\n    public parseNumber(value: string): number {\n        if (value != null && value.length > 0) {\n            // convert data from view format to model format\n            let number = this.parser(value);\n\n            return number;\n        }\n\n        return null;\n    }\n\n    public formatNumber(value: any): string {\n        if (value != null) {\n            let number = value;\n\n            if (typeof number === \"string\") {\n                if (number.length > 0 && Number(number)) {\n                    number = Number(value);\n                } else {\n                    return \"\";\n                }\n            }\n\n            // convert data from model format to view format\n            return this.formatter(number);\n        }\n\n        return null;\n    }\n\n    public localize(bundle: string, key: string): string {\n        return com.runwaysdk.Localize.localize(bundle, key);\n    }\n\n    public get(key: string): string {\n        return com.runwaysdk.Localize.get(key);\n    }\n\n    public decode(key: string): string {\n        let index = key.lastIndexOf(\".\");\n\n        if (index !== -1) {\n            let temp = [key.slice(0, index), key.slice(index + 1)];\n\n            return this.localize(temp[0], temp[1]);\n        } else {\n            return this.get(key);\n        }\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpErrorResponse } from \"@angular/common/http\";\n\ndeclare let acp;\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n\n    private listeners: IEventListener[] = [];\n\n    public registerListener(listener: IEventListener): void {\n        this.listeners.push(listener);\n    }\n\n    public deregisterListener(listener: IEventListener): boolean {\n        let indexOfItem = this.listeners.indexOf(listener);\n\n        if (indexOfItem === -1) {\n            return false;\n        }\n\n        this.listeners.splice(indexOfItem, 1);\n\n        return true;\n    }\n\n    public start(): void {\n        for (const listener of this.listeners) {\n            listener.start();\n        }\n    }\n\n    public complete(): void {\n        for (const listener of this.listeners) {\n            listener.complete();\n        }\n    }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { BsModalService, BsModalRef } from \"ngx-bootstrap/modal\";\n\nimport { ProfileComponent } from \"../profile/profile.component\";\n\nimport { AuthService, ProfileService, LocalizationService } from \"@shared/service\";\n\nimport { RegistryRoleType, LocaleView } from \"@shared/model/core\";\n\ndeclare let acp: string;\ndeclare let registry: any;\n\n@Component({\n\n    selector: \"cgr-header\",\n    templateUrl: \"./header.component.html\",\n    styleUrls: []\n})\nexport class CgrHeaderComponent {\n\n    context: string;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    bsModalRef: BsModalRef;\n\n    defaultLocaleView: LocaleView;\n    locales: LocaleView[];\n    locale: string;\n\n    @Input() loggedIn: boolean = true;\n\n    constructor(\n        private modalService: BsModalService,\n        private profileService: ProfileService,\n        private service: AuthService,\n        localizationService: LocalizationService\n    ) {\n        this.context = acp;\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n        if (localizationService.getLocales()) {\n            this.locales = localizationService.getLocales().filter(locale => locale.toString !== \"defaultLocale\");\n            this.defaultLocaleView = localizationService.getLocales().filter(locale => locale.toString === \"defaultLocale\")[0];\n        } else {\n            this.locales = [];\n            this.defaultLocaleView = null;\n        }\n        this.locale = localizationService.getLocale();\n\n        let found: boolean = false;\n\n        for (let i = 0; i < this.locales.length; ++i) {\n            if (this.locales[i].toString === this.locale) {\n                found = true;\n            }\n        }\n\n        if (!found) {\n            this.locale = \"\";\n        }\n    }\n\n    shouldShowMenuItem(item: string): boolean {\n        if (item === \"HIERARCHIES\") {\n            return true;\n        } else if (item === \"LISTS\") {\n            // return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC) || this.service.hasExactRole(RegistryRoleType.AC);\n            return true;\n        } else if (this.service.hasExactRole(RegistryRoleType.SRA)) {\n            return true;\n        } else if (item === \"IMPORT\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"SCHEDULED-JOBS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"NAVIGATOR\") {\n            return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n        } else if (item === \"CHANGE-REQUESTS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n        } else if (item === \"TASKS\") {\n            return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n        } else if (item === \"CONFIGS\") {\n            return this.service.hasExactRole(RegistryRoleType.RA);\n        } else if (item === \"SETTINGS\") {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    logout(): void {\n        sessionStorage.removeItem(\"locales\");\n\n        window.location.href = acp + \"/session/logout\";\n\n        //        this.sessionService.logout().then( response => {\n        //            this.router.navigate( ['/login'] );\n        //        } );\n    }\n\n    getUsername() {\n        let name: string = this.service.getUsername();\n\n        return name;\n    }\n\n    setLocale() {\n        this.profileService.setLocale(this.locale).then(() => {\n            // Refresh the page\n            window.location.reload();\n        });\n    }\n\n    account(): void {\n        this.profileService.get().then(profile => {\n            this.bsModalRef = this.modalService.show(ProfileComponent, { backdrop: \"static\", class: \"gray modal-lg\" });\n            this.bsModalRef.content.profile = profile;\n        });\n    }\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default navbar-fixed-top\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n       <ul *ngIf=\"loggedIn\" class=\"nav navbar-nav navbar-right\"> \n         <li class=\"hidden-xs\">\n            \n           <a (click)=\"account()\" class=\"navbar-username\">\n           <!-- <div>Logged in as</div> -->\n             <div>{{getUsername()}}</div>\n           </a>                      \n         </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"shouldShowMenuItem('HIERARCHIES')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"shouldShowMenuItem('LISTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('IMPORT')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('SCHEDULED-JOBS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/scheduled-jobs\" routerLinkActive=\"active\"><localize key=\"scheduledjobs.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('NAVIGATOR')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/location-manager\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('CHANGE-REQUESTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('TASKS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/tasks\" routerLinkActive=\"active\"><localize key=\"header.tasks\"></localize></a></li>\n                <!-- <li *ngIf=\"shouldShowMenuItem('CONFIGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/synchronization-configs\" routerLinkActive=\"active\"><localize key=\"synchronization.config.manager\"></localize></a></li> -->\n                \n                <hr>\n                <li *ngIf=\"shouldShowMenuItem('SETTINGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/settings\" routerLinkActive=\"active\"><localize key=\"settings.menu\"></localize> </a></li>\n                \n                <div *ngIf=\"locales.length > 0\" style=\"padding: 0 20px;\">\n                  <hr>\n<!--                     <span><localize key=\"userDashboards.setLocale\"></localize></span> -->\n\n                    <label class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"default\" [value]=\"''\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span>{{defaultLocaleView.label.localizedValue}}</span>\n                    </label>\n                    <label *ngFor=\"let l of locales\" class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"{{l.toString}}\" [value]=\"l.toString\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span>{{l.label.localizedValue}}</span>\n                    </label>\n                </div>\n                \n                <!-- <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li> -->\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n         \n        \n       </ul>\n       \n       \n    </div>\n  </nav>\n</header>\n","import { Injectable } from \"@angular/core\";\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from \"@angular/router\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin()) {\n            return true;\n        }\n\n        this.router.navigate([\"/export\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin() || this.service.isMaintainer()) {\n            return true;\n        }\n\n        this.router.navigate([\"/export\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isAdmin() || this.service.isMaintainer() || this.service.isContributer()) {\n            return true;\n        }\n\n        this.router.navigate([\"/export\"]);\n\n        return false;\n    }\n\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n        if (this.service.isLoggedIn()) {\n            return true;\n        }\n\n        this.router.navigate([\"/login\"]);\n\n        return false;\n    }\n\n}\n\n","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Profile } from \"@shared/model/profile\";\nimport { AuthService, ProfileService } from \"@shared/service\";\nimport { Role } from \"../../../admin/model/account\";\n\n@Component({\n    selector: \"profile\",\n    templateUrl: \"./profile.component.html\",\n    styles: [\".modal-form .check-block .chk-area { margin: 10px 0px 0 0;}\"]\n})\nexport class ProfileComponent {\n\n    public _profile: Profile = {\n        oid: \"\",\n        username: \"\",\n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        changePassword: false\n    };\n\n    // eslint-disable-next-line accessor-pairs\n    @Input(\"profile\")\n    set profile(value: Profile) {\n        this._profile = value;\n        this.getRoles();\n    }\n\n    roles: Role[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) { }\n\n    getRoles(): void {\n        this.service.getRolesForUser(this._profile.oid).then(roles => {\n            this.roles = roles;\n        });\n    }\n\n    onSubmit(): void {\n        if (!this._profile.changePassword) {\n            delete this._profile.password;\n        }\n\n        this.service.apply(this._profile).then(profile => {\n            this.bsModalRef.hide();\n        });\n    }\n\n    onChangePassword(): void {\n        this._profile.changePassword = !this._profile.changePassword;\n    }\n\n    // getRoles():string {\n    //   return this.authService.getRoleDisplayLabels();\n    // }\n\n    getRolesArray(): any {\n        return this.authService.getRoles();\n    }\n\n    cancel(): void {\n        this.service.unlock(this._profile.oid).then(profile => {\n            this.bsModalRef.hide();\n        });\n    }\n\n}\n","<div *ngIf=\"_profile\">\n  <message></message>\n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <fieldset>\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"profile.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.firstName\" name=\"firstname\" required>\n          </span>\n        </div>\n      </div>\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.lastName\" name=\"lastname\" required>\n          </span>\n        </div>\n      </div>\n      \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altFirstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altFirstName\" name=\"altFirstname\">\n            </span>\n          </div>\n        </div>        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altLastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altLastName\" name=\"altLastname\">\n            </span>\n          </div>\n        </div>            \n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.phonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.phoneNumber\" name=\"phoneNumber\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altPhonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altPhoneNumber\" name=\"altPhoneNumber\">\n            </span>\n          </div>\n        </div>\n\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n          </span>\n          <div *ngIf=\"aemail.errors?.email\" style=\"float:none;\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.position\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.position\" name=\"position\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.department\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.department\" name=\"department\">\n            </span>\n          </div>\n        </div>\n            \n\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"account.info.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.username\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.username\" name=\"username\" required>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"_profile.externalSystemOid != null && _profile.externalSystemOid !== ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.oauth\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <label>\n            <localize key=\"account.profile.isOauth\"></localize>\n          </label>\n        </div>\n      </div>\n      \n      <div *ngIf=\"_profile.externalSystemOid == null || _profile.externalSystemOid === ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n        </div>\n        <div class=\"holder\">\n          <!-- <boolean-field [(value)]=\"profile.changePassword\"></boolean-field> -->\n          <div style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!_profile.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"_profile.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"_profile.changePassword\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.password\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" [(ngModel)]=\"_profile.password\" name=\"password\" #password=\"ngModel\" required\n                minlength=\"5\" maxlength=\"50\">\n              <password-strength-bar [passwordToCheck]=\"_profile.password\">\n              </password-strength-bar>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.certainPassword\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" />\n            </span>\n            <div *ngIf=\"certainPassword.errors?.mustMatch\" style=\"float:none;\" class=\"inline-error-message\">\n              <localize key=\"account.certainPassword.validation\"></localize>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th><localize key=\"profile.roles.role.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.organization.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.geoobjecttype.table.heading\"></localize></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let role of roles\">\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.geoObjectTypeLabel.localizedValue}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- <ul>\n            <li *ngFor=\"let role of getRolesArray()\">{{role}}</li>\n          </ul> -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\"\n              [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n\n</div>\n","import { Component } from \"@angular/core\";\nimport { ModalStepIndicatorService } from \"@shared/service\";\n\nimport { Step, StepConfig } from \"@shared/model/modal\";\nimport { Subscription } from \"rxjs\";\n\n@Component({\n    selector: \"modal-step-indicator\",\n    templateUrl: \"./modal-step-indicator.component.html\",\n    styleUrls: [\"./modal-step-indicator.css\"]\n})\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor(private modalStepIndicatorService: ModalStepIndicatorService) {\n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe(stepConfig => {\n            this.stepConfig = stepConfig;\n        });\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import { Component, OnInit } from \"@angular/core\";\n\nimport { Progress } from \"@shared/model/progress\";\nimport { ProgressService, IProgressListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"progress-bar\",\n    templateUrl: \"./progress-bar.component.html\",\n    styles: [\n        \".progress-overlay { background-color: #CCCCCC; position: absolute; display: block;opacity: 0.8;z-index: 99999 !important;}\",\n        \".progress-div { width: 100%; margin-left: 0; padding-left: 25%; padding-right: 25%; margin-top: 30% }\"\n    ]\n})\nexport class ProgressBarComponent implements OnInit, IProgressListener {\n\n    public showIndicator: boolean = true;\n\n    public prog: Progress = {\n        current: 0,\n        total: 1,\n        description: \"Initializing\"\n    };\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: ProgressService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.prog = {\n            current: 0,\n            total: 1,\n            description: \"Initializing\"\n        };\n\n        this.showIndicator = true;\n    }\n\n    progress(progress: Progress): void {\n        this.prog = progress;\n    }\n\n    complete(): void {\n        this.showIndicator = false;\n    }\n\n}\n","<div *ngIf=\"showIndicator\" class=\"progress-overlay\" style=\"height: 100%; width: 100%;\">\n  <div class=\"progress-div\">\n    <progressbar class=\"progress-striped active\" [max]=\"prog.total\" [value]=\"prog.current\"><i>{{prog.description}}</i></progressbar>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient, HttpParams } from \"@angular/common/http\";\nimport { finalize } from \"rxjs/operators\";\nimport { EventService } from \"@shared/service\";\nimport { ExternalSystem, PageResult } from \"@shared/model/core\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class ExternalSystemService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getExternalSystems(pageNumber: number, pageSize: number): Promise<PageResult<ExternalSystem>> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"pageNumber\", pageNumber.toString());\n        params = params.set(\"pageSize\", pageSize.toString());\n\n        this.eventService.start();\n\n        return this.http\n            .get<PageResult<ExternalSystem>>(acp + \"/external-system/get-all\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getExternalSystem(oid: string): Promise<ExternalSystem> {\n        let params: HttpParams = new HttpParams();\n        params = params.set(\"oid\", oid);\n\n        this.eventService.start();\n\n        return this.http\n            .get<ExternalSystem>(acp + \"/external-system/get\", { params: params })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    applyExternalSystem(system: ExternalSystem): Promise<ExternalSystem> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<ExternalSystem>(acp + \"/external-system/apply\", JSON.stringify({ system: system }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    getSystemCapabilities(system: ExternalSystem): Promise<{ oauth: boolean }> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<{ oauth: boolean }>(acp + \"/external-system/system-capabilities\", JSON.stringify({ system: system }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeExternalSystem(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/external-system/remove\", JSON.stringify({ oid: oid }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\nimport { Step, StepConfig } from \"@shared/model/modal\";\n\ndeclare let acp: string;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n\n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"@shared/service\";\n\nimport { Organization } from \"@shared/model/core\";\n\ndeclare var acp: any;\n\n@Injectable()\nexport class OrganizationService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient, private eventService: EventService) { }\n\n    getOrganizations(): Promise<Organization[]> {\n        this.eventService.start();\n\n        return this.http\n            .get<Organization[]>(acp + \"/cgr/organizations/get-all\")\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    updateOrganization(json: any): Promise<Organization> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<Organization>(acp + \"/cgr/orgainization/update\", JSON.stringify({ json: json }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    newOrganization(json: any): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/cgr/orgainization/create\", JSON.stringify({ json: json }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n    removeOrganization(code: any): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.eventService.start();\n\n        return this.http\n            .post<any>(acp + \"/cgr/orgainization/delete\", JSON.stringify({ code: code }), { headers: headers })\n            .pipe(finalize(() => {\n                this.eventService.complete();\n            }))\n            .toPromise();\n    }\n\n}\n","import { CanDeactivate } from \"@angular/router\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n    canDeactivate: () => boolean | Observable<boolean>;\n    afterDeactivate: (arg: boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n        if (!component.canDeactivate()) {\n            // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n            // when navigating away from your angular app, the browser will show a generic warning message\n            // see http://stackoverflow.com/a/42207299/7307355\n            let confirmRet = confirm(\"WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.\");\n\n            component.afterDeactivate(confirmRet);\n\n            return confirmRet;\n        }\n\n        return true;\n    }\n}","import { AuthService } from \"./auth.service\";\nimport { EventService } from \"./event.service\";\nimport { ExternalSystemService } from \"./external-system.service\";\nimport { AdminGuard, AuthGuard, ContributerGuard, MaintainerGuard } from \"./guard.service\";\nimport { LocalizationService } from \"./localization.service\";\nimport { ModalStepIndicatorService } from \"./modal-step-indicator.service\";\nimport { OrganizationService } from \"./organization.service\";\nimport { PendingChangesGuard } from \"./pending-changes-guard\";\nimport { ProfileService } from \"./profile.service\";\nimport { ProgressService } from \"./progress.service\";\nimport { SessionService } from \"./session.service\";\nimport { DateService } from \"./date.service\";\n\nexport const services: any[] = [\n    AuthService,\n    EventService,\n    ExternalSystemService,\n    AdminGuard,\n    AuthGuard,\n    ContributerGuard,\n    MaintainerGuard,\n    LocalizationService,\n    ModalStepIndicatorService,\n    OrganizationService,\n    PendingChangesGuard,\n    ProfileService,\n    ProgressService,\n    SessionService,\n    DateService\n];\n\nexport * from \"./auth.service\";\nexport * from \"./event.service\";\nexport * from \"./external-system.service\";\nexport * from \"./guard.service\";\nexport * from \"./localization.service\";\nexport * from \"./modal-step-indicator.service\";\nexport * from \"./organization.service\";\nexport * from \"./pending-changes-guard\";\nexport * from \"./profile.service\";\nexport * from \"./progress.service\";\nexport * from \"./session.service\";\nexport * from \"./date.service\";\n","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\n// import 'rxjs/add/operator/toPromise';\n\nimport { Profile } from \"@shared/model/profile\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private http: HttpClient) { }\n\n    get(): Promise<Profile> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<Profile>(acp + \"/registryaccount/get\", { headers: headers })\n            .toPromise();\n    }\n\n\n    apply(profile: Profile): Promise<Profile> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<Profile>(acp + \"/registryaccount/apply\", JSON.stringify({ account: profile }), { headers: headers })\n            .toPromise();\n    }\n\n    unlock(oid: string): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<void>(acp + \"/registryaccount/unlock\", JSON.stringify({ oid: oid }), { headers: headers })\n            .toPromise()\n    }\n\n    setLocale(locale: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        return this.http\n            .post<any>(acp + \"/localization/set-locale\", JSON.stringify({ locale: locale }), { headers: headers })\n            .toPromise();\n    }\n\n    getRolesForUser(userOID: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n\n        return this.http\n            .post<Profile>(acp + \"/registryaccount/getRolesForUser\", { userOID: userOID }, { headers: headers })\n            .toPromise();\n    }\n\n}\n","import { Injectable } from \"@angular/core\";\nimport { Progress } from \"@shared/model/progress\";\n\nexport interface IProgressListener {\n    start(): void;\n    progress(progress: Progress): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n\n    private listeners: IProgressListener[] = [];\n\n    // eslint-disable-next-line no-useless-constructor\n    public constructor() { }\n\n    public registerListener(listener: IProgressListener): void {\n        this.listeners.push(listener);\n    }\n\n    public deregisterListener(listener: IProgressListener): boolean {\n        let indexOfItem = this.listeners.indexOf(listener);\n\n        if (indexOfItem === -1) {\n            return false;\n        }\n\n        this.listeners.splice(indexOfItem, 1);\n\n        return true;\n    }\n\n    public start(): void {\n        for (const listener of this.listeners) {\n            listener.start();\n        }\n    }\n\n    public progress(progress: Progress): void {\n        for (const listener of this.listeners) {\n            listener.progress(progress);\n        }\n    }\n\n    public complete(): void {\n        for (const listener of this.listeners) {\n            listener.complete();\n        }\n    }\n}","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from \"rxjs/operators\";\n\nimport { EventService } from \"./event.service\";\n\nimport { AuthService } from \"./auth.service\";\nimport { User } from \"@shared/model/user\";\n\ndeclare let acp: any;\n\n@Injectable()\nexport class SessionService {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService, private http: HttpClient, private authService: AuthService) { }\n\n    login(username: string, password: string): Promise<any> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.service.start();\n\n        return this.http\n            .post<User>(acp + \"/cgrsession/login\", JSON.stringify({ username: username, password: password }), { headers: headers })\n            .pipe(finalize(() => {\n                this.service.complete();\n            }))\n            .toPromise()\n            .then((logInResponse: any) => {\n                this.authService.afterLogIn(logInResponse);\n\n                return logInResponse;\n            })\n    }\n\n    logout(): Promise<void> {\n        let headers = new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n        });\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>(acp + \"/session/logout\", { headers: headers })\n            .pipe(finalize(() => {\n                this.service.complete();\n            }))\n            .toPromise()\n            .then((response: any) => {\n                this.authService.afterLogOut();\n\n                return response;\n            })\n    }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"error-message\",\n    templateUrl: \"./error-message.component.html\",\n    styleUrls: [\"./error-message.css\"]\n})\nexport class ErrorMessageComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"error.modal.default.message\");\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private localizeService: LocalizationService) { }\n\n}\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ModalTypes } from \"@shared/model/modal\";\n\n@Component({\n    selector: \"confirm-modal\",\n    templateUrl: \"./confirm-modal.component.html\",\n    styleUrls: [\"./modal.css\"]\n})\nexport class ConfirmModalComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    /*\n     * Called on cancel\n     */\n    public onCancel: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n        this.onCancel = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next(this.data);\n    }\n\n    cancel(): void {\n        this.bsModalRef.hide();\n        this.onCancel.next(this.data);\n    }\n\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>{{cancelText}}</span>\n          </button>\n          <button type=\"button\" (click)=\"confirm()\"\n            [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n            aria-disabled=\"false\">\n            <span>{{submitText}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"error-modal\",\n    templateUrl: \"./error-modal.component.html\",\n    styleUrls: [\"./error-modal.css\"]\n})\nexport class ErrorModalComponent {\n\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"error.modal.default.message\");\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { Subject } from \"rxjs\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n    selector: \"success-modal\",\n    templateUrl: \"./success-modal.component.html\",\n    styleUrls: [\"./success-modal.css\"]\n})\nexport class SuccessModalComponent implements OnInit {\n\n    /*\n     * Message\n     */\n    @Input() message: string;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.close\");\n\n    public onConfirm: Subject<any>;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.message = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next();\n    }\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"confirm()\">\n\t\t\t\t\t\t<span>{{submitText}}</span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\n</div>\n","import { Component } from \"@angular/core\";\nimport { BsModalRef } from \"ngx-bootstrap/modal\";\nimport { LocalizationService } from \"@shared/service\";\n\nexport class GenericButton {\n\n    label: string;\n    onClick: Function;\n    shouldClose: boolean;\n    class: string;\n\n}\n\n@Component({\n    selector: \"generic-modal\",\n    templateUrl: \"./generic-modal.component.html\",\n    styleUrls: [\"./modal.css\"]\n})\nexport class GenericModalComponent {\n\n    /*\n     * Message\n     */\n    message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    buttons: GenericButton[] = [];\n\n    data: any;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) { }\n\n    init(message: string, buttons: GenericButton[]): void {\n        this.message = message;\n        this.buttons = buttons;\n    }\n\n    onClick(button: GenericButton): void {\n        if (button.shouldClose) {\n            this.bsModalRef.hide();\n        }\n\n        button.onClick(this.data);\n    }\n\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button *ngFor=\"let button of buttons\" type=\"button\" (click)=\"onClick(button)\" class=\"btn\" [class]=\"button.class\" role=\"button\" aria-disabled=\"false\">\n            <span>{{button.label}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","/* eslint-disable no-use-before-define */\n/* eslint-disable padded-blocks */\nimport { LocalizedValue } from \"@shared/model/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { ImportConfiguration } from \"./io\";\nimport { GovernanceStatus, ConflictType } from \"./constants\";\nimport { SummaryKey } from \"./crtable\";\n\nexport const PRESENT: string = \"5000-12-31\";\n\nexport class TreeEntity {\n    id: string;\n    name: string;\n    hasChildren: boolean;\n}\n\nexport class Term {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n\n    constructor(code: string, label: LocalizedValue, description: LocalizedValue) {\n        this.code = code;\n        this.label = label;\n        this.description = description;\n    }\n\n    children: Term[] = [];\n\n    addChild(term: Term) {\n        this.children.push(term);\n    }\n}\n\nexport class GeoObject {\n    type: string;\n    geometry: any;\n    properties: {\n        uid: string,\n        code: string,\n        displayLabel: LocalizedValue,\n        type: string,\n        status: string[],\n        sequence: string\n        createDate: string,\n        lastUpdateDate: string,\n        writable?: boolean\n    };\n}\n\nexport class GeoObjectType {\n    code: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    geometryType?: string;\n    isLeaf: boolean;\n    isGeometryEditable: boolean;\n    organizationCode: string;\n    attributes: Array<AttributeType | AttributeTermType | AttributeDecimalType> = [];\n    relatedHierarchies?: string[];\n    superTypeCode?: string;\n    isAbstract?: boolean;\n    isPrivate?: boolean;\n    canDrag?: boolean;\n    permissions?: string[];\n}\n\nexport class Task {\n    id: string;\n    templateKey: string;\n    msg: string;\n    title: string;\n    status: string;\n    createDate: number;\n    completedDate: number;\n}\n\nexport class GeoObjectOverTime {\n\n    geoObjectType: GeoObjectType;\n\n    attributes: any;\n\n    public constructor(geoObjectType: GeoObjectType, attributes: any) {\n        this.geoObjectType = geoObjectType;\n        this.attributes = attributes;\n    }\n\n    public getVotAtDate(date: Date, attrCode: string, lService: LocalizationService) {\n        let retVot = { startDate: date, endDate: null, value: null };\n\n        const time = date.getTime();\n\n        for (let i = 0; i < this.geoObjectType.attributes.length; ++i) {\n            let attr = this.geoObjectType.attributes[i];\n\n            if (attr.code === attrCode) {\n                if (attr.type === \"local\") {\n                    retVot.value = lService.create();\n                }\n\n                if (attr.isChangeOverTime) {\n                    let values = this.attributes[attr.code].values;\n\n                    values.forEach(vot => {\n\n                        const startDate = Date.parse(vot.startDate);\n                        const endDate = Date.parse(vot.endDate);\n\n                        if (time >= startDate && time <= endDate) {\n\n                            if (attr.type === \"local\") {\n                                retVot.value = JSON.parse(JSON.stringify(vot.value));\n                            } else if (attr.type === \"term\" && vot.value != null && Array.isArray(vot.value) && vot.value.length > 0) {\n                                retVot.value = vot.value[0];\n                            } else {\n                                retVot.value = vot.value;\n                            }\n                        }\n                    });\n                } else {\n                    retVot.value = this.attributes[attr.code];\n                }\n\n                break;\n            }\n        }\n\n        return retVot;\n    }\n}\n\nexport class ConflictMessage {\n    message: string;\n    severity: string;\n    type: ConflictType;\n}\n\nexport interface TimeRangeEntry {\n    startDate: string;\n    endDate: string;\n    conflictMessage?: any[];\n    summaryKeyData?: SummaryKey;\n}\n\nexport class ValueOverTime implements TimeRangeEntry {\n    oid: string;\n    startDate: string;\n    endDate: string;\n    value: any;\n    removable?: boolean;\n}\n\nexport class AttributeOverTime {\n    name: string;\n    type: string;\n    values: ValueOverTime[];\n}\n\nexport class AttributeType {\n    code: string; // On the back-end this is referred to as the AttributeType's 'name'. They are the same concept.\n    type: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    isDefault: boolean;\n    required: boolean;\n    unique: boolean;\n    governanceStatus: GovernanceStatus;\n    isChangeOverTime?: boolean;\n    precision?: number;\n    scale?: number;\n    isValid?: boolean;\n\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChangeOverTime: boolean) {\n\n        this.code = code;\n        this.type = type;\n        this.label = label;\n        this.description = description;\n        this.isDefault = isDefault;\n        this.required = false; // Hardcoded to false because this functionality is disabled until later evaluation.\n        this.unique = unique;\n        this.isChangeOverTime = isChangeOverTime;\n    }\n\n}\n\nexport class AttributeTermType extends AttributeType {\n\n    // descendants: Attribute[];\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n        super(code, type, label, description, isDefault, required, unique, isChange);\n    }\n\n    rootTerm: Term = new Term(null, null, null);\n\n    termOptions: Term[] = [];\n\n    setRootTerm(term: Term) {\n        this.rootTerm = term;\n    }\n}\n\nexport class AttributeDecimalType extends AttributeType {\n    constructor(code: string, type: string, label: LocalizedValue, description: LocalizedValue, isDefault: boolean, required: boolean, unique: boolean, isChange: boolean) {\n        super(code, type, label, description, isDefault, required, unique, isChange);\n\n        this.precision = 32;\n        this.scale = 8;\n    }\n}\n\nexport class TreeNode {\n    geoObject: GeoObject;\n    hierarchyType: string;\n}\n\nexport class ChildTreeNode extends TreeNode {\n    children: ChildTreeNode[];\n}\n\nexport class ParentTreeNode extends TreeNode {\n    parents: ParentTreeNode[];\n}\n\nexport class ManageGeoObjectTypeModalState {\n    state: string;\n    attribute: any;\n    termOption: any;\n}\n\nexport class PaginationPage {\n    pageNumber: number;\n    count: number;\n    pageSize: number;\n    results: any[];\n}\n\nexport class AbstractScheduledJob {\n    jobId: string;\n    historyId: string;\n    stage: string;\n    status: string;\n    author: string;\n    createDate: string;\n    lastUpdateDate: string;\n    workProgress: number;\n    workTotal: number;\n    startDate: string;\n    endDate: string;\n}\n\nexport class ScheduledJob extends AbstractScheduledJob {\n    importedRecords: number;\n    exportedRecords: number;\n    configuration: ImportConfiguration;\n    importErrors: PaginationPage;\n    exportErrors: PaginationPage;\n    problems: PaginationPage;\n    fileName: string;\n}\n\nexport class ScheduledJobOverview extends ScheduledJob {\n    stepConfig: StepConfig;\n}\n\n// export class ScheduledJobDetail extends ScheduledJob {\n//     // failedRowCount: number;\n//     importErrors: PaginationPage\n// }\n\nexport class ImportError {\n    exception: ServerException;\n    object: ImportErrorObject;\n    objectType: string;\n    id: string;\n    resolution: string;\n    selected?: boolean;\n}\n\nexport class ServerException {\n    attributes: ServerExceptionAttribute[];\n    type: string;\n    message: string;\n}\n\nexport class ServerExceptionAttribute {\n    value: string;\n    key: string;\n}\n\nexport class ImportErrorObject {\n    geoObject: GeoObjectOverTime;\n    parents: HierarchyOverTime[];\n    isNew: boolean;\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    complete?: boolean;\n    enabled?: boolean;\n    status?: string;\n}\n\nexport class MasterList {\n    oid: string;\n    typeCode: string;\n    typeLabel?: LocalizedValue;\n    displayLabel: LocalizedValue;\n    code: string;\n    representativityDate: Date;\n    publishingStartDate?: Date;\n    publishDate: Date;\n    listAbstract: string;\n    process: string;\n    progress: string;\n    accessConstraints: string;\n    useConstraints: string;\n    acknowledgements: string;\n    disclaimer: string;\n    contactName: string;\n    organization: string;\n    telephoneNumber: string;\n    email: string;\n    hierarchies: { label: string, code: string, parents: { label: string, code: string }[] }[];\n    leaf: boolean;\n    frequency: string;\n    isMaster: boolean;\n    visibility: string;\n    write?: boolean;\n    read?: boolean;\n    exploratory?: boolean;\n    versions?: MasterListVersion[];\n    subtypes?: { label: string, code: string }[];\n}\n\nexport class MasterListVersion {\n    displayLabel: string;\n    oid: string;\n    typeCode: string;\n    orgCode: string;\n    masterlist: string;\n    forDate: string;\n    createDate: string;\n    publishDate: string;\n    attributes: any[];\n    isGeometryEditable: boolean;\n    locales?: string[];\n    shapefile?: boolean;\n    isAbstract?: boolean;\n    superTypeCode?: string;\n    refreshProgress?: any;\n    subtypes?: { label: string, code: string }[];\n}\n\nexport class HierarchyOverTime {\n    code: string;\n    label: string;\n    types: {\n        code: string;\n        label: string;\n    }[];\n\n    entries: HierarchyOverTimeEntry[];\n}\n\nexport class HierarchyOverTimeEntry implements TimeRangeEntry {\n    startDate: string;\n    endDate: string;\n    oid: string;\n    parents: { [k: string]: HierarchyOverTimeEntryParent };\n    loading?: any;\n    conflictType?: string;\n    conflictMessage?: any[];\n}\n\nexport class HierarchyOverTimeEntryParent {\n    text: string;\n    geoObject: GeoObject;\n    goCode?: string;\n}\n\nexport class MasterListByOrg {\n    oid: string;\n    label: string;\n    write: boolean;\n    lists: {\n        label: string,\n        oid: string,\n        createDate: string,\n        lastUpdateDate: string,\n        isMaster: boolean,\n        write: boolean,\n        read: boolean,\n        visibility: string\n    }[];\n}\n\nexport class SynchronizationConfig {\n    oid?: string;\n    type?: string;\n    systemLabel?: string;\n    organization: string;\n    system: string;\n    hierarchy: string;\n    label: LocalizedValue;\n    configuration: any;\n}\n\nexport class OrgSyncInfo {\n    label: string;\n    code: string;\n    hierarchies: { label: string, code: string }[];\n    systems: { label: string, oid: string, type: string }[];\n}\n\nexport class ExportScheduledJob extends AbstractScheduledJob {\n    stepConfig?: StepConfig;\n}\n\nexport class ContextLayer {\n    oid: string;\n    displayLabel: string;\n    active: boolean;\n    enabled: boolean;\n}\n\nexport class ContextLayerGroup {\n    oid: string;\n    displayLabel: string;\n    contextLayers: ContextLayer[];\n}\n","export enum ActionTypes {\n    \"CREATEGEOOBJECTACTION\" = \"CreateGeoObjectAction\",\n    \"UPDATEATTRIBUTETACTION\" = \"UpdateAttributeAction\",\n    \"UPDATEGEOOBJECTACTION\" = \"UpdateGeoObjectAction\" // Deprecated DO NOT USE\n}\n\nexport enum GovernanceStatus {\n    \"PENDING\" = \"PENDING\",\n    \"ACCEPTED\" = \"ACCEPTED\",\n    \"REJECTED\" = \"REJECTED\"\n}\n\nexport enum GeoObjectTypeModalStates {\n    \"manageAttributes\" = \"MANAGE-ATTRIBUTES\",\n    \"editAttribute\" = \"EDIT-ATTRIBUTE\",\n    \"defineAttribute\" = \"DEFINE-ATTRIBUTE\",\n    \"manageTermOption\" = \"MANAGE-TERM-OPTION\",\n    \"editTermOption\" = \"EDIT-TERM-OPTION\",\n    \"manageGeoObjectType\" = \"MANAGE-GEO-OBJECT-TYPE\"\n}\n\nexport enum ImportStrategy {\n    \"NEW_AND_UPDATE\" = \"NEW_AND_UPDATE\",\n    \"NEW_ONLY\" = \"NEW_ONLY\",\n    \"UPDATE_ONLY\" = \"UPDATE_ONLY\"\n}\n\nexport enum ConflictType {\n    MISSING_REFERENCE = \"MISSING_REFERENCE\",\n    TIME_RANGE = \"TIME_RANGE\"\n}\n","/* eslint-disable no-use-before-define */\n/* eslint-disable no-unused-vars */\nimport { LocalizationService } from \"@shared/service/localization.service\";\n\nexport interface MessageContainer {\n    setMessage(message: string);\n}\n\nexport class LocaleValue {\n\n    locale: string;\n    value: string;\n\n    constructor(locale: string, value: string) {\n        this.locale = locale;\n        this.value = value;\n    }\n\n}\n\nexport class LocaleView {\n\n    constructor(lService: LocalizationService) {\n        this.label = lService.create();\n        this.toString = \"\";\n        this.tag = \"\";\n        this.isDefaultLocale = false;\n        this.language = { label: \"\", code: \"\" };\n        this.country = { label: \"\", code: \"\" };\n        this.variant = { label: \"\", code: \"\" };\n    }\n\n    label: LocalizedValue;\n    toString: string;\n    tag: string;\n    isDefaultLocale: boolean;\n    language: { label: string, code: string };\n    country: { label: string, code: string };\n    variant: { label: string, code: string };\n\n}\n\nexport class Organization {\n\n    code: string;\n    label: any;\n    contactInfo: any;\n\n}\n\nexport class ExternalSystem {\n\n    oid?: string;\n    id: string;\n    type: string;\n    organization: string;\n    label: LocalizedValue;\n    description: LocalizedValue;\n    username?: string;\n    password?: string;\n    url?: string;\n    version?: string;\n    oAuthServer?: OAuthServer;\n\n}\n\nexport class OAuthServer {\n\n    keyName?: string;\n    label?: LocalizedValue;\n    url?: string;\n    authorizationLocation: string;\n    tokenLocation: string;\n    profileLocation: string;\n    clientId: string;\n    secretKey: string;\n    serverType: string;\n\n}\n\nexport class PageResult<T> {\n\n    count: number;\n    pageNumber: number;\n    pageSize: number;\n    resultSet: T[];\n    externalSystems?: ExternalSystem[];\n\n}\n\nexport class LocalizedValue {\n\n    localizedValue: string;\n    localeValues: LocaleValue[];\n\n    constructor(localizedValue: string, localeValues: LocaleValue[]) {\n        this.localizedValue = localizedValue;\n        this.localeValues = localeValues;\n    }\n\n    public getValue(localeToString: string): string {\n        let len = this.localeValues.length;\n\n        for (let i = 0; i < len; ++i) {\n            let lv = this.localeValues[i];\n\n            if (lv.locale === localeToString) {\n                return lv.value;\n            }\n        }\n\n        return this.localizedValue;\n    }\n\n}\n\nexport class RoleBuilder {\n\n    static buildFromRoleName(roleName: string): RegistryRole {\n        if (roleName === \"cgr.SRA\") {\n            return new RegistryRole(RegistryRoleType.SRA, \"\", \"\", \"cgr.SRA\");\n        }\n\n        let roleSplit = roleName.split(\".\");\n\n        let orgCode: string = roleSplit[2];\n\n        if (roleSplit.length === 4) {\n            return new RegistryRole(RegistryRoleType.RA, orgCode, \"\", roleName);\n        } else if (roleSplit.length === 5) {\n            let roleSuffix: string = roleSplit[4];\n\n            let gotCode: string = roleSplit[3];\n\n            if (roleSuffix === \"RM\") {\n                return new RegistryRole(RegistryRoleType.RM, orgCode, gotCode, roleName);\n            } else if (roleSuffix === \"RC\") {\n                return new RegistryRole(RegistryRoleType.RC, orgCode, gotCode, roleName);\n            } else if (roleSuffix === \"AC\") {\n                return new RegistryRole(RegistryRoleType.AC, orgCode, gotCode, roleName);\n            }\n        } else {\n            return null;\n        }\n    }\n\n}\n\nexport class RegistryRole {\n\n    type: RegistryRoleType;\n    orgCode: string;\n    geoObjectTypeCode: string;\n    roleName: string;\n    displayLabel: string;\n\n    constructor(type: RegistryRoleType, orgCode: string, geoObjectTypeCode: string, roleName: string) {\n        this.type = type;\n        this.orgCode = orgCode;\n        this.geoObjectTypeCode = geoObjectTypeCode;\n        this.roleName = roleName;\n    }\n\n}\n\nexport enum RegistryRoleType {\n    SRA,\n    RA,\n    RM,\n    RC,\n    AC\n}\n","\nimport { HttpErrorResponse } from \"@angular/common/http\";\nimport { BsModalRef, BsModalService } from \"ngx-bootstrap/modal\";\nimport { ErrorModalComponent } from \"@shared/component\";\n\nexport class ErrorHandler {\n\n    static getMessageFromError(err: any): string {\n        let unspecified = \"An unspecified error has occurred.  Please try your operation again.  If the problem continues, alert your technical support staff.\";\n\n        if (err == null) {\n            return unspecified;\n        } else {\n            console.log(\"An error has occurred: \", err);\n        }\n\n        let msg = null;\n\n        if (err.error != null && (typeof err.error === \"object\")) {\n            msg = err.error.localizedMessage || err.error.message;\n        }\n\n        if (msg == null) {\n            msg = err.message || err.msg || err.localizedMessage;\n        }\n\n        if (msg != null && msg.includes(\"##tferrormsg##\")) {\n            let split = msg.split(\"##tferrormsg##\");\n            return split[2];\n        }\n\n        if (msg == null) {\n            msg = unspecified;\n        }\n\n        return msg;\n    }\n\n    static showErrorAsDialog(err: any, modalService: BsModalService): BsModalRef {\n        if (err instanceof HttpErrorResponse && err.status === 401) {\n            return null;\n        }\n\n        let bsModalRef = modalService.show(ErrorModalComponent, { backdrop: true, class: \"error-white-space-pre\" });\n\n        bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n\n        return bsModalRef;\n    }\n\n}\n","import { Directive, Input } from \"@angular/core\";\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from \"@angular/forms\";\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n        const control = formGroup.controls[controlName];\n        const matchingControl = formGroup.controls[matchingControlName];\n\n        // return null if controls haven't initialised yet\n        if (!control || !matchingControl) {\n            return null;\n        }\n\n        // return null if another validator has already found an error on the matchingControl\n        if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n            return null;\n        }\n\n        // set error on matchingControl if validation fails\n        if (control.value !== matchingControl.value) {\n            matchingControl.setErrors({ mustMatch: true });\n        } else {\n            matchingControl.setErrors(null);\n        }\n    };\n}\n\n@Directive({\n    selector: \"[mustMatch]\",\n    providers: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\n    @Input(\"mustMatch\") mustMatch: string[] = [];\n\n    validate(formGroup: FormGroup): ValidationErrors {\n        return MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n    }\n\n}\n","import { NgModule, ModuleWithProviders } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { TreeModule } from \"@circlon/angular-tree-component\";\nimport { ContextMenuModule } from \"ngx-contextmenu\";\nimport { ModalModule } from \"ngx-bootstrap/modal\";\nimport { BsDropdownModule } from \"ngx-bootstrap/dropdown\";\nimport { ButtonsModule } from \"ngx-bootstrap/buttons\";\nimport { TypeaheadModule } from \"ngx-bootstrap/typeahead\";\nimport { CookieService } from \"ngx-cookie-service\";\nimport { FileUploadModule } from \"ng2-file-upload\";\nimport { NgxPaginationModule } from \"ngx-pagination\";\nimport { ProgressbarModule } from \"ngx-bootstrap/progressbar\";\nimport { CollapseModule } from \"ngx-bootstrap/collapse\";\nimport { BsDatepickerModule } from \"ngx-bootstrap/datepicker\";\n\nimport { ErrorModalComponent } from \"./component/modals/error-modal.component\";\nimport { SuccessModalComponent } from \"./component/modals/success-modal.component\";\nimport { ConfirmModalComponent } from \"./component/modals/confirm-modal.component\";\nimport { GenericModalComponent } from \"./component/modals/generic-modal.component\";\nimport { ErrorMessageComponent } from \"./component/message/error-message.component\";\nimport { MessageComponent } from \"./component/message/message.component\";\nimport { BooleanFieldComponent } from \"./component/form-fields/boolean-field/boolean-field.component\";\nimport { DateFieldComponent } from \"./component/form-fields/date-field/date-field.component\";\nimport { LoadingBarComponent } from \"./component/loading-bar/loading-bar.component\";\nimport { PasswordStrengthBarComponent } from \"./component/password-strength-bar/password-strength-bar.component\";\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from \"./service/guard.service\";\nimport { PendingChangesGuard } from \"./service/pending-changes-guard\";\n\nimport { AuthService } from \"./service/auth.service\";\nimport { ProfileService } from \"./service/profile.service\";\nimport { OrganizationService } from \"./service/organization.service\";\nimport { ExternalSystemService } from \"./service/external-system.service\";\nimport { LocalizationService } from \"./service/localization.service\";\nimport { ProgressService } from \"./service/progress.service\";\nimport { EventService } from \"./service/event.service\";\nimport { ModalStepIndicatorService } from \"./service/modal-step-indicator.service\";\nimport { SessionService } from \"./service/session.service\";\nimport { DateService } from \"./service/date.service\";\n\nimport { LocalizePipe } from \"./pipe/localize.pipe\";\nimport { PhonePipe } from \"./pipe/phone.pipe\";\n\nimport { OnlyNumber } from \"./directive/number-only.directive\";\nimport { MustMatchDirective } from \"./directive/must-match.directive\";\n\nimport { CgrHeaderComponent } from \"./component/header/header.component\";\nimport { ProgressBarComponent } from \"./component/progress-bar/progress-bar.component\";\nimport { LocalizeComponent } from \"./component/localize/localize.component\";\nimport { ConvertKeyLabel } from \"./component/localize/convert-key-label.component\";\nimport { ModalStepIndicatorComponent } from \"./component/modals/modal-step-indicator.component\";\nimport { ProfileComponent } from \"./component/profile/profile.component\";\n\nimport \"../rxjs-extensions\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        ModalModule.forRoot(),\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        CollapseModule,\n        NgxPaginationModule,\n        BsDatepickerModule.forRoot()\n    ],\n    declarations: [\n        LocalizeComponent,\n        ConvertKeyLabel,\n        BooleanFieldComponent,\n        DateFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        PasswordStrengthBarComponent,\n        OnlyNumber,\n        MustMatchDirective,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe\n    ],\n    exports: [\n        LocalizeComponent,\n        ConvertKeyLabel,\n        BooleanFieldComponent,\n        DateFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        PasswordStrengthBarComponent,\n        OnlyNumber,\n        MustMatchDirective,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    entryComponents: [\n        ErrorModalComponent,\n        SuccessModalComponent,\n        ConfirmModalComponent,\n        GenericModalComponent,\n        ModalStepIndicatorComponent,\n        ErrorMessageComponent,\n        LoadingBarComponent,\n        ProfileComponent\n    ]\n})\nexport class SharedModule {\n\n    static forRoot(): ModuleWithProviders<SharedModule> {\n        return {\n            ngModule: SharedModule,\n            providers: [\n                CookieService,\n                AuthService,\n                SessionService,\n                ProfileService,\n                OrganizationService,\n                ExternalSystemService,\n                LocalizationService,\n                DateService,\n                ModalStepIndicatorService,\n                EventService,\n                ProgressService,\n                AdminGuard,\n                MaintainerGuard,\n                ContributerGuard,\n                AuthGuard,\n                PendingChangesGuard\n            ]\n        };\n    }\n\n}\n","import { Input, Component, OnInit } from \"@angular/core\";\n\nimport { LocalizationService, AuthService } from \"@shared/service\";\nimport { LocaleView, LocalizedValue } from \"@shared/model/core\";\n\n@Component({\n\n    selector: \"convert-key-label\",\n    templateUrl: \"./convert-key-label.component.html\",\n    styleUrls: []\n})\nexport class ConvertKeyLabel implements OnInit {\n\n    @Input() key: any;\n    text: string;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService, private authService: AuthService) { }\n\n    ngOnInit(): void {\n        if (this.key != null && this.key.label != null && this.key.label.localizedValue != null) {\n            this.text = this.key.label.localizedValue;\n            return;\n        }\n\n        let locales: LocaleView[] = this.authService.getLocales();\n\n        let len = locales.length;\n        for (let i = 0; i < len; ++i) {\n            let locale: LocaleView = locales[i];\n\n            if (locale.toString === this.key) {\n                this.text = this.getValue(locale.label, this.service.getLocale());\n\n                return;\n            }\n        }\n\n        if (this.key === \"defaultLocale\") {\n            this.text = this.service.decode(\"localization.defaultLocal\");\n        } else {\n            this.text = this.key;\n        }\n    }\n\n    public getValue(lv: LocalizedValue, localeToString: string): string {\n        let len = lv.localeValues.length;\n\n        for (let i = 0; i < len; ++i) {\n            let value = lv.localeValues[i];\n\n            if (value.locale === localeToString) {\n                return value.value;\n            }\n        }\n\n        return lv.localizedValue;\n    }\n\n}\n","{{text}}","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, ViewChild } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\nimport { DateService } from \"@shared/service/date.service\";\n\nimport { BsDatepickerConfig, BsDatepickerDirective } from \"ngx-bootstrap/datepicker\";\n\nimport { PRESENT } from \"@registry/model/registry\";\n\ndeclare let acp: string;\n\n@Component({\n    selector: \"date-field\",\n    templateUrl: \"./date-field.component.html\",\n    styleUrls: [\"./date-field.css\"],\n})\n\nexport class DateFieldComponent {\n\n    @ViewChild(BsDatepickerDirective, { static: false }) datepicker: BsDatepickerDirective;\n\n    @Input() allowFutureDates: boolean = true;\n    @Input() allowInfinity: boolean = false;\n    @Input() inputName: string = this.idGenerator();\n    @Input() classNames: string = \"\";\n    @Input() customStyles: string = \"\";\n    @Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n    @Input() label: string = \"\"; // raw string input\n    @Input() disable: boolean = false;\n    @Input() required: boolean = false;\n    @Input() placement: string = \"bottom\";\n    @Input() oldDate: string = null;\n\n    _value: Date;\n    // eslint-disable-next-line accessor-pairs\n    @Input() set value(value) {\n        if (value) {\n            this.setValue(value ? value : null);\n        }\n    }\n\n    @Output() public valueChange = new EventEmitter<string>();\n\n    /* You can pass a function in with (change)='function()' */\n    @Output() public change = new EventEmitter<any>();\n\n    today: Date = new Date();\n    message: string;\n    returnFocusToInput: boolean = false;\n    valueIsPresent: boolean = false;\n\n    @Input() valid: boolean = true;\n    @Output() public validChange = new EventEmitter<boolean>();\n\n    constructor(private localizationService: LocalizationService, private bsDatepickerConfig: BsDatepickerConfig, private changeDetectorRef: ChangeDetectorRef, private dateService: DateService) {\n        this.bsDatepickerConfig.dateInputFormat = \"YYYY-MM-DD\";\n    }\n\n\n    private setValue(value: string | number): void {\n        // @ts-ignore\n        if (!isNaN(value)) {\n            // @ts-ignore\n            value = parseInt(value);\n        }\n\n        if (value && typeof value === \"string\") {\n            let date = new Date(+value.split(\"-\")[0], +value.split(\"-\")[1] - 1, +value.split(\"-\")[2]);\n\n            if (value === PRESENT) {\n                this.valueIsPresent = true;\n            }\n\n            this._value = date;\n        } else if (value && typeof value === \"number\") {\n            // Custom attributes of date type come through as UTC time\n            this._value = new Date(new Date(value).getUTCFullYear(), new Date(value).getUTCMonth(), new Date(value).getUTCDate());\n        } else {\n            this._value = null;\n        }\n    }\n\n    public getValue(): Date {\n        return this._value;\n    }\n\n    public setInvalid(message: string) {\n        this.valid = false;\n        this.message = message;\n    }\n\n    idGenerator() {\n        let S4 = function() {\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n        };\n        return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n    }\n\n    isEqual(date1: Date, date2: Date): boolean {\n        let equal = false;\n\n        if (date1 && date2) {\n            // if(date1.toISOString().substr(0, 10) === PRESENT && date2.toISOString().substr(0, 10) === PRESENT){\n            if (date1.getTime() === date2.getTime()) {\n                return true;\n            }\n        }\n\n        return equal;\n    }\n\n    toggleInfinity(): void {\n        let date = this.getValue();\n\n        if (date && this.isEqual(date, this.dateService.getPresentDate())) {\n            this.setValue(null); // clear the date picker\n            this.valueChange.emit(null);\n            this.valueIsPresent = false;\n        } else {\n            this.setValue(PRESENT);\n            this.valueChange.emit(this.dateService.getDateString(this.getValue()));\n            this.valueIsPresent = true;\n        }\n\n        this.change.emit();\n    }\n\n    toggle(event: Date): void {\n        setTimeout(() => {\n            let newValue: Date;\n\n            // event can be null if manually clearing the input\n            if (event) {\n                newValue = event;\n\n                this.valid = true;\n                this.message = \"\";\n\n                if (!this.allowFutureDates && newValue > this.today) {\n                    this.valid = false;\n                    this.message = this.localizationService.decode(\"date.inpu.data.in.future.error.message\");\n                } else if (!(newValue instanceof Date)) {\n                    this.valid = false;\n                    this.message = this.localizationService.decode(\"date.inpu.data.invalid.error.message\");\n                } else if (newValue instanceof Date && isNaN(newValue.getTime())) {\n                    this.valid = false;\n                    this.message = this.localizationService.decode(\"date.inpu.data.invalid.error.message\");\n                }\n            } else {\n                // date required\n                if (this.required) {\n                    this.valid = false;\n                    this.message = this.localizationService.decode(\"manage.versions.date.required.message\");\n                }\n            }\n\n\n            if (this.valid) {\n                // Must adhere to the ISO 8601 format\n                let formattedDate = this.dateService.getDateString(newValue);\n\n                if (formattedDate === PRESENT) {\n                    this.valueIsPresent = true;\n                } else {\n                    this.valueIsPresent = false;\n                }\n\n                this.valueChange.emit(formattedDate);\n            } else {\n                // hack to avoid ngx-datepicker from putting \"invalid date\" in the input\n                this.setValue(null);\n\n                this.valueChange.emit(null);\n            }\n\n            this.change.emit();\n            this.validChange.emit(this.valid);\n        }, 0)\n    }\n\n}","\n<label for=\"{{inputName}}\" *ngIf=\"label.length > 0\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n<label for=\"{{inputName}}\" *ngIf=\"localizeLabelKey.length > 0\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n\n<!-- <input id=\"date-input\" [class]=\"classNames\" name=\"{{inputName}}\" [(ngModel)]=\"value\" (change)=\"toggle($event)\" type=\"date\" max=\"{{today|date:'yyyy-MM-dd'}}\" [disabled]=\"disable\" [required]=\"required\"/> -->\n\n<div [hidden]=\"valueIsPresent\">\n  <span class=\"wrapper\">\n      <input [class]=\"classNames ? classNames + ' ' + 'date-input-element' : 'date-input-element'\" \n           [style]=\"customStyles ? customStyles : ''\"\n           name=\"{{inputName}}\"\n           type=\"text\"\n           placeholder=\"YYYY-MM-DD\"\n           [bsValue]=\"_value\"\n           [value]=\"_value | date: 'yyyy-MM-dd'\"\n           (bsValueChange)=\"toggle($event)\"\n           [bsConfig]=\"{\n              dateInputFormat: 'YYYY-MM-DD', \n              containerClass: 'theme-default', \n              returnFocusToInput: returnFocusToInput,\n              adaptivePosition: true\n              }\"\n           [outsideClick]=\"true\"\n           placement=\"{{placement}}\"\n           [maxDate]=\"allowFutureDates ? null : today\"\n           [isDisabled]=\"disable\"\n           [disabled]=\"disable\"\n           bsDatepicker\n           #dp=\"bsDatepicker\"\n           >\n  </span>\n  \n  <div class=\"form-input-validation-error-message-wrapper\">\n    <p *ngIf=\"message\" class=\"error-message\">{{message}}</p>\n  </div>\n</div>\n\n<div *ngIf=\"oldDate\">\n  <p class=\"warning-text display-current-value\">\n    <localize key=\"change.request.changed.value.prefix\"></localize>\n    {{ oldDate }}\n  </p>\n</div>\n\n<p [hidden]=\"!valueIsPresent\" style=\"font-size:14px;margin:0;\"><localize key=\"changeovertime.manageVersions.infinity.endDate.label\"></localize></p>\n\n<div *ngIf=\"allowInfinity && !disable\" class=\"text-right\" style=\"padding: 10px 0;\">\n  <button class=\"btn btn-default\" style=\"margin:0;\" *ngIf=\"valueIsPresent\" (click)=\"toggleInfinity()\"><localize key=\"manage.versions.enddate.set.date.button\"></localize></button> \n  <button class=\"btn btn-default\" style=\"margin:0;\" *ngIf=\"!valueIsPresent\" (click)=\"toggleInfinity()\"><localize key=\"manage.versions.enddate.set.current.button\"></localize></button>\n</div>\n\n","/* eslint-disable no-unused-vars */\n/* eslint-disable padded-blocks */\nimport { GeoObjectOverTime, HierarchyOverTime, GeoObjectType } from \"./registry\";\nimport { ActionTypes } from \"./constants\";\n\nexport enum SummaryKey {\n    NEW = \"NEW\",\n    UNMODIFIED = \"UNMODIFIED\",\n    DELETE = \"DELETE\",\n    UPDATE = \"UPDATE\",\n    TIME_CHANGE = \"TIME_CHANGE\",\n    VALUE_CHANGE = \"VALUE_CHANGE\",\n}\n\nexport class Document {\n    fileName: string;\n    oid: string;\n}\n\nexport class Geometry {\n    type: string;\n    coordinates: number[][] | number[];\n}\n\nexport class ValueOverTimeDiff {\n    oid: string;\n    action: string; // Can be one of DELETE, UPDATE, CREATE\n    oldValue: any;\n    newValue: any;\n    newStartDate: string;\n    newEndDate: string;\n    oldStartDate: string;\n    oldEndDate: string;\n    parents?: any;\n    oldParents?: any;\n}\n\n// export class AbstractAction {\n//    approvalStatus: string;\n//    createActionDate: Date;\n//    label: string;\n//    oid: string;\n//    actionType: string;\n//    actionLabel: string;\n//    decisionMaker?: string;\n//    documents: Document[];\n// }\n\nexport class AbstractAction {\n    oid: string;\n    actionType: ActionTypes;\n    actionLabel: string;\n    createActionDate: string;\n    contributorNotes?: string;\n    maintainerNotes?: string;\n    additionalNotes?: string;\n    approvalStatus: string;\n    statusLabel: string;\n    createdBy: string;\n    documents: any[];\n    permissions: string[];\n}\n\nexport class CreateGeoObjectAction extends AbstractAction {\n    geoObjectJson: GeoObjectOverTime;\n    parentJson: HierarchyOverTime;\n\n    constructor() {\n        super();\n        this.actionType = ActionTypes.CREATEGEOOBJECTACTION;\n    }\n}\n\nexport class UpdateAttributeAction extends AbstractAction {\n    attributeName: string;\n    attributeDiff: { \"valuesOverTime\": ValueOverTimeDiff[], hierarchyCode?: string };\n\n    constructor(attributeName: string) {\n        super();\n        this.actionType = ActionTypes.UPDATEATTRIBUTETACTION;\n        this.attributeName = attributeName;\n        this.attributeDiff = { valuesOverTime: [] };\n    }\n}\n\nexport class ChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n}\n\nexport class UpdateChangeRequestCurrentObject {\n    geoObjectType: GeoObjectType;\n    geoObject: GeoObjectOverTime;\n}\n\nexport class ChangeRequest {\n    oid: string;\n    createdBy: string;\n    createDate: Date;\n    approvalStatus: string;\n    total: number;\n    pending: number;\n    documents: Document[];\n    actions: CreateGeoObjectAction[] & UpdateAttributeAction[];\n    current: ChangeRequestCurrentObject & UpdateChangeRequestCurrentObject;\n    type?: string; // Can be one of [\"CreateGeoObject\", \"UpdateGeoObject\"]\n    statusLabel?: string;\n    phoneNumber?: string;\n    email?: string;\n    permissions?: string[];\n}\n\n// export class UpdateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class CreateGeoObjectAction extends AbstractAction {\n//    geoObjectJson: GeoObjectOverTime;\n// }\n//\n// export class AddChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyTypeCode: string;\n//    contributorNotes: string;\n//    maintainerNotes: string;\n//    createdBy: string;\n// }\n\n// export class RemoveChildAction extends AbstractAction {\n//    childId: string;\n//    childTypeCode: string;\n//    parentId: string;\n//    parentTypeCode: string;\n//    hierarchyCode: string;\n// }\n\n// export class SetParentAction extends AbstractAction {\n//    childCode: string;\n//    childTypeCode: string;\n//    json: HierarchyOverTime[];\n// }\n\nexport class GovernanceStatus {\n    key: string;\n    label: string;\n}\n\nexport class PageEvent {\n    type: string;\n    data: any;\n}\n","import { Component, Input, Output, EventEmitter } from \"@angular/core\";\n\ndeclare let acp: string;\n\n@Component({\n    selector: \"boolean-field\",\n    templateUrl: \"./boolean-field.component.html\",\n    styleUrls: [\"./boolean-field.css\"]\n})\nexport class BooleanFieldComponent {\n\n    @Input() value: boolean = false;\n    @Output() public valueChange = new EventEmitter<boolean>();\n\n    @Input() localizeLabelKey: string = \"\"; // localization key used to localize in the component template\n    @Input() label: string = \"\"; // raw string input\n\n    @Input() disable: boolean = false;\n\n    /* You can pass a function in with (change)='function()' */\n    @Output() public change = new EventEmitter<any>();\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor() { }\n\n    toggle(): void {\n        if (!this.disable) {\n            this.value = !this.value;\n\n            this.valueChange.emit(this.value);\n            this.change.emit(this.value);\n        }\n    }\n}","<div class=\"check-block\">\n  <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value, 'disabled': disable}\" ng-style=\"chkstyle\" class=\"chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","export default class Utils {\n\t\n\t/**\n\t * \n\t * @param arr \n\t */\n\tstatic removeStatuses( arr: any[] ): any[] {\n\t      var newArray = [];\n\t      \n\t      for ( var i = 0; i < arr.length; ++i ) {\n\t        if (! (arr[i].code === \"CGR:Status-New\"\n\t             || arr[i].code === \"CGR:Status-Pending\"))\n\t        {\n\t          newArray.push(arr[i]);\n\t        }\n\t      }\n\t      \n\t      return newArray;\n\t}\n\t\n\n\t/**\n\t * \n\t * @param dateObj \n\t */\n\tstatic formatDateString(dateObj: Date): string {\n        const day = dateObj.getUTCDate();\n        const month = dateObj.getUTCMonth() + 1;\n\n        return dateObj.getUTCFullYear() + \"-\" + ( month < 10 ? \"0\" : \"\" ) + month + \"-\" + ( day < 10 ? \"0\" : \"\" ) + day;\n    }\n\n\tstatic dateRangeOverlaps(a_start: number, a_end: number, b_start: number, b_end: number): boolean {\n\t\tif (a_start <= b_start && b_start <= a_end) return true; // b starts in a\n\t\tif (a_start <= b_end && b_end <= a_end) return true; // b ends in a\n\t\tif (b_start < a_start && a_end < b_end) return true; // a in b\n\t\treturn false;\n\t}\n\t\n\tstatic dateEndBeforeStart(start: number, end: number): boolean {\n\t\tif (end < start) return true; // end date is before start date\n\t\treturn false;\n\t}\n    \n\tstatic hasGap(a_end: number, b_start: number): boolean {\n\t\treturn (b_start - a_end) > (1000 * 60 * 60 * 24);\n\t}\n\t\n}","import { Directive, ElementRef, HostListener, Input } from \"@angular/core\";\n\n@Directive({\n    selector: \"[OnlyNumber]\"\n})\nexport class OnlyNumber {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private el: ElementRef) { }\n\n    @Input() OnlyNumber: boolean;\n\n    @HostListener(\"keydown\", [\"$event\"]) onKeyDown(event: any) {\n        let e = <KeyboardEvent>event;\n        if (this.OnlyNumber) {\n            if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n                // Allow: Ctrl+A\n                (e.keyCode === 65 && e.ctrlKey === true) ||\n                // Allow: Ctrl+C\n                (e.keyCode === 67 && e.ctrlKey === true) ||\n                // Allow: Ctrl+X\n                (e.keyCode === 88 && e.ctrlKey === true) ||\n                // Allow: home, end, left, right\n                (e.keyCode >= 35 && e.keyCode <= 39)) {\n                // let it happen, don't do anything\n                return;\n            }\n            // Ensure that it is a number and stop the keypress\n            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\n","/* eslint-disable padded-blocks */\nexport class Profile {\n    oid: string;\n    username: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n    changePassword?: boolean;\n    phoneNumber?: string;\n    altFirstName?: string;\n    altLastName?: string;\n    altPhoneNumber?: string;\n    position?: string;\n    department?: string;\n    externalSystemOid?: string;\n}","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { formatNumber, ParsedNumber } from \"libphonenumber-js\";\n\n@Pipe({\n    name: \"phone\"\n})\nexport class PhonePipe implements PipeTransform {\n\n    transform(value: ParsedNumber, args?: string): any {\n        if (!value) {\n            return value;\n        }\n\n        return formatNumber({ country: \"US\", phone: value.toString() }, \"International\");\n    }\n\n}\n","import { Input, Component, OnInit } from \"@angular/core\";\n\nimport { LocalizationService } from \"@shared/service\";\n\n@Component({\n\n    selector: \"localize\",\n    templateUrl: \"./localize.component.html\",\n    styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n\n    @Input() key: string;\n    @Input() params: { [key: string]: string } = null;\n\n    text: string;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService) { }\n\n    ngOnInit(): void {\n        this.text = this.service.decode(this.key);\n\n        if (this.params != null) {\n            const keys = Object.keys(this.params);\n\n            keys.forEach((key) => {\n                if (this.params[key] != null) {\n                    this.text = this.text.replace(key, this.params[key]);\n                }\n            });\n        }\n    }\n\n}\n","<span [innerHtml]=\"text\"></span>","import { Component, OnChanges, Input, SimpleChange } from \"@angular/core\";\n\n@Component({\n    selector: \"password-strength-bar\",\n    templateUrl: \"./password-strength-bar.component.html\",\n    styleUrls: [\"./password-strength-bar.component.css\"]\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n    @Input() passwordToCheck: string;\n    bar0: string;\n    bar1: string;\n    bar2: string;\n    bar3: string;\n    bar4: string;\n\n    private colors = [\"#F00\", \"#F90\", \"#FF0\", \"#9F0\", \"#0F0\"];\n\n    private static measureStrength(pass: string) {\n        let score = 0;\n        // award every unique letter until 5 repetitions\n        let letters = {};\n        for (let i = 0; i < pass.length; i++) {\n            letters[pass[i]] = (letters[pass[i]] || 0) + 1;\n            score += 5.0 / letters[pass[i]];\n        }\n        // bonus points for mixing it up\n        let variations = {\n            digits: /\\d/.test(pass),\n            lower: /[a-z]/.test(pass),\n            upper: /[A-Z]/.test(pass),\n            nonWords: /\\W/.test(pass)\n        };\n\n        let variationCount = 0;\n        for (let check in variations) {\n            variationCount += (variations[check]) ? 1 : 0;\n        }\n        score += (variationCount - 1) * 10;\n        return Math.trunc(score);\n    }\n\n    private getColor(score: number) {\n        let idx = 0;\n        if (score > 90) {\n            idx = 4;\n        } else if (score > 70) {\n            idx = 3;\n        } else if (score >= 40) {\n            idx = 2;\n        } else if (score >= 20) {\n            idx = 1;\n        }\n        return {\n            idx: idx + 1,\n            col: this.colors[idx]\n        };\n    }\n\n    ngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n        let password = changes[\"passwordToCheck\"].currentValue;\n        this.setBarColors(5, \"#DDD\");\n        if (password) {\n            let c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n            this.setBarColors(c.idx, c.col);\n        }\n    }\n\n    private setBarColors(count, col) {\n        for (let _n = 0; _n < count; _n++) {\n            this[\"bar\" + _n] = col;\n        }\n    }\n\n}\n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\n\nimport { EventService, IEventListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"loading-bar\",\n    templateUrl: \"./loading-bar.component.html\",\n    styleUrls: [\"./loading-bar.css\"]\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n\n    showIndicator: boolean = false;\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.showIndicator = true;\n    }\n\n    complete(): void {\n        this.showIndicator = false;\n    }\n\n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Component, OnInit } from \"@angular/core\";\n\nimport { EventService, IEventListener } from \"@shared/service\";\n\n@Component({\n\n    selector: \"message\",\n    templateUrl: \"./message.component.html\",\n    styles: [\n        \".error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}\",\n        \".message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }\"\n    ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\n    error: any = null;\n\n    message: string = \"\";\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: EventService) { }\n\n    ngOnInit(): void {\n        this.service.registerListener(this);\n    }\n\n    ngOnDestroy(): void {\n        this.service.deregisterListener(this);\n    }\n\n    start(): void {\n        this.error = null;\n    }\n\n    complete(): void {\n    }\n\n    onError(error: any): void {\n        this.error = error;\n    }\n\n    onMessage(msg: string): void {\n        this.message = msg;\n    }\n\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from \"@angular/core\";\nimport { CookieService } from \"ngx-cookie-service\";\nimport { User } from \"@shared/model/user\";\nimport { RoleBuilder, RegistryRole, RegistryRoleType, LocaleView } from \"@shared/model/core\";\n\n@Injectable()\nexport class AuthService {\n\n    private user: User = {\n        loggedIn: false,\n        userName: \"\",\n        roles: [],\n        roleDisplayLabels: [],\n        version: \"0\",\n        installedLocales: []\n    };\n\n    constructor(private service: CookieService) {\n        let cookie = service.get(\"user\");\n\n        if (this.service.check(\"user\") && cookie != null && cookie.length > 0) {\n            let cookieData: string = this.service.get(\"user\");\n            let cookieDataJSON: any = JSON.parse(cookieData);\n\n            this.buildFromCookieJson(cookieDataJSON);\n        }\n\n        this.loadLocales();\n    }\n\n    buildFromCookieJson(cookieDataJSON: any) {\n        this.user.userName = cookieDataJSON.userName;\n        this.buildRolesFromCookie(cookieDataJSON);\n        this.user.loggedIn = cookieDataJSON.loggedIn;\n        this.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n        this.user.version = cookieDataJSON.version.replaceAll(\"+\", \" \");\n        // this.user.installedLocales = cookieDataJSON.installedLocales;\n    }\n\n    buildRolesFromCookie(cookieDataJSON: any) {\n        this.user.roles = [];\n        let roles: string[] = cookieDataJSON.roles;\n\n        for (let i = 0; i < roles.length; ++i) {\n            let role: RegistryRole = RoleBuilder.buildFromRoleName(roles[i]);\n\n            if (role != null) {\n                this.user.roles.push(role);\n            }\n        }\n    }\n\n    isLoggedIn(): boolean {\n        return this.user.loggedIn;\n    }\n\n    afterLogIn(logInResponse: any): void {\n        this.buildFromCookieJson(JSON.parse(this.service.get(\"user\")));\n\n        this.setLocales(logInResponse.installedLocales);\n        this.user.installedLocales = logInResponse.installedLocales;\n    }\n\n    afterLogOut(): void {\n        this.user = null;\n        sessionStorage.removeItem(\"locales\");\n    }\n\n    loadLocales() {\n        let storageLocales = window.sessionStorage.getItem(\"locales\");\n\n        if (storageLocales != null) {\n            this.user.installedLocales = JSON.parse(storageLocales);\n        }\n    }\n\n    setLocales(locales: LocaleView[]) {\n        window.sessionStorage.setItem(\"locales\", JSON.stringify(locales));\n    }\n\n    removeUser(): void {\n        this.user = {\n            loggedIn: false,\n            userName: \"\",\n            roles: [],\n            roleDisplayLabels: [],\n            version: \"0\",\n            installedLocales: []\n        };\n    }\n\n    // Legacy Accessors:\n    isAdmin(): boolean {\n        return this.isSRA() || this.isRA();\n    }\n\n    isMaintainer(): boolean {\n        return this.isSRA() || this.isRM();\n    }\n\n    isContributer(): boolean {\n        return this.isSRA() || this.isRC(false);\n    }\n\n    isContributerOnly(): boolean {\n        return this.isRC(true);\n    }\n\n    // Used to exactly identify a role. I.e. if we say we need RC, SRA doesn't count.\n    hasExactRole(roleType: RegistryRoleType) {\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === roleType) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isSRA(): boolean {\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.SRA) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isRA(): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RA) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryAdministrator\") !== -1 || role.roleName.indexOf(\"cgr.RegistryAdministrator\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n    }\n\n    isRM(): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RM) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryMaintainer\") !== -1 || role.roleName.indexOf(\"cgr.RegistryMaintainer\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    isOrganizationRA(orgCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.orgCode === orgCode && role.type === RegistryRoleType.RA) {\n                return true;\n            }\n        }\n\n        return false; // this.isSRA();\n    }\n\n    isGeoObjectTypeRM(orgCode: string, gotCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RM && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n                return true;\n            }\n        }\n\n        return this.isOrganizationRA(orgCode);\n    }\n\n    isGeoObjectTypeOrSuperRM(got: { organizationCode: string, superTypeCode?: string, code: string }, allowRoleSuper: boolean = true): boolean {\n        if (this.isGeoObjectTypeRM(got.organizationCode, got.code)) {\n            return true;\n        } else if (got.superTypeCode != null) {\n            return this.isGeoObjectTypeRM(got.organizationCode, got.superTypeCode);\n        }\n    }\n\n    isGeoObjectTypeRC(orgCode: string, gotCode: string): boolean {\n        if (this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RC && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n                return true;\n            }\n        }\n\n        return this.isGeoObjectTypeRM(orgCode, gotCode);\n    }\n\n    isGeoObjectTypeOrSuperRC(got: { organizationCode: string, superTypeCode?: string, code: string }, allowRoleSuper: boolean = true): boolean {\n        if (allowRoleSuper && this.isSRA()) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RC && role.orgCode === got.organizationCode && role.geoObjectTypeCode === got.code) {\n                return true;\n            }\n        }\n\n        return allowRoleSuper && this.isGeoObjectTypeOrSuperRM(got);\n    }\n\n    isRC(isRCOnly: boolean): boolean {\n        if (this.isSRA() && !isRCOnly) {\n            return true;\n        }\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.RC) {\n                return true;\n            } else if (role.roleName.indexOf(\"commongeoregistry.RegistryContributor\") !== -1 || role.roleName.indexOf(\"cgr.RegistryContributor\") !== -1) {\n                // Legacy support\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // Returns all organization codes that the current user participates in.\n    // If the user is an SRA then this method will return an empty string array.\n    getMyOrganizations(): string[] {\n        let orgCodes: string[] = [];\n\n        for (let i = 0; i < this.user.roles.length; ++i) {\n            let role: RegistryRole = this.user.roles[i];\n\n            if (role.type === RegistryRoleType.SRA || role.type === RegistryRoleType.RC || role.type === RegistryRoleType.RM || role.type === RegistryRoleType.RA) {\n                orgCodes.push(role.orgCode);\n            }\n        }\n\n        return orgCodes;\n    }\n\n    __getRoleFromRoleName(roleName: string): string {\n        let nameArr = roleName.split(\".\");\n\n        return nameArr[nameArr.length - 1];\n    }\n\n    getUsername(): string {\n        return this.user.userName;\n    }\n\n    getRoles(): any {\n        return this.user.roles;\n    }\n\n    getRoleDisplayLabelsArray(): any {\n        return this.user.roleDisplayLabels;\n    }\n\n    getRoleDisplayLabels(): string {\n        let str = \"\";\n        for (let i = 0; i < this.user.roleDisplayLabels.length; ++i) {\n            let displayLabel = this.user.roleDisplayLabels[i];\n\n            if (displayLabel === \"Administrator\") {\n                continue;\n                // It's OK to hardcode to a display label here because the end user can't change it anyway.\n                // Is it ideal? No. But sometimes it's better to get software out quicker than to spend forever\n                // on something that nobody will ever see.\n            }\n\n            str = str + displayLabel;\n\n            if (i < this.user.roleDisplayLabels.length - 1) {\n                str = str + \",\";\n            }\n        }\n\n        return str;\n    }\n\n    getVersion(): string {\n        return this.user.version;\n    }\n\n    getLocales(): LocaleView[] {\n        return this.user.installedLocales;\n    }\n\n    addLocale(locale: LocaleView): void {\n        let exists: boolean = false;\n\n        for (let i = 0; i < this.user.installedLocales.length; ++i) {\n            if (this.user.installedLocales[i].tag === locale.tag) {\n                exists = true;\n                this.user.installedLocales[i] = locale;\n            }\n        }\n\n        if (!exists) {\n            this.user.installedLocales.push(locale);\n        }\n\n        this.setLocales(this.user.installedLocales);\n    }\n\n    removeLocale(locale: LocaleView): void {\n        for (let i = 0; i < this.user.installedLocales.length; ++i) {\n            if (this.user.installedLocales[i].tag === locale.tag) {\n                this.user.installedLocales.splice(i, 1);\n                this.setLocales(this.user.installedLocales);\n                return;\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(\"Could not remove locale from array because we could not find it.\", locale, this.user.installedLocales);\n    }\n\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\nimport { LocalizationService } from \"@shared/service\";\n\n@Pipe({ name: \"localize\" })\nexport class LocalizePipe implements PipeTransform {\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(private service: LocalizationService) { }\n\n    transform(value: string): string {\n        return this.service.decode(value);\n    }\n\n}\n"],"sourceRoot":""}