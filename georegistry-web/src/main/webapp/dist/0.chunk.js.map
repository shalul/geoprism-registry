{"version":3,"sources":["webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/service/index.ts","webpack:///./src/app/shared/component/index.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.html","webpack:///./src/app/shared/service/external-system.service.ts","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/service/organization.service.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/shared/component/error-handler/error-handler.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/component/form-fields/base/validation.component.ts","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/model/profile.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/service/event.service.ts"],"names":["service","transform","value","this","decode","LocalizePipe","modalService","profileService","loggedIn","context","acp","isAdmin","isMaintainer","isContributor","isContributer","shouldShowMenuItem","item","hasExactRole","RegistryRoleType","RA","RM","SRA","RC","logout","window","location","href","getUsername","account","get","then","profile","bsModalRef","show","ProfileComponent","backdrop","class","content","CgrHeaderComponent","router","canActivate","route","state","navigate","AdminGuard","MaintainerGuard","ContributerGuard","isLoggedIn","AuthGuard","authService","_profile","oid","username","password","firstName","lastName","email","changePassword","roles","getRoles","getRolesForUser","onSubmit","apply","hide","onChangePassword","getRolesArray","onRoleIdsUpdate","event","console","log","cancel","unlock","services","AuthService","EventService","ExternalSystemService","LocalizationService","ModalStepIndicatorService","OrganizationService","PendingChangesGuard","ProfileService","ProgressService","SessionService","components","ErrorHandler","LoadingBarComponent","LocalizeComponent","ErrorMessageComponent","MessageComponent","ConfirmModalComponent","ErrorModalComponent","ModalStepIndicatorComponent","SuccessModalComponent","PasswordStrengthBarComponent","ProgressBarComponent","colors","measureStrength","pass","score","letters","i","length","variations","digits","test","lower","upper","nonWords","variationCount","check","Math","trunc","getColor","idx","col","ngOnChanges","changes","currentValue","setBarColors","c","count","_n","modalStepIndicatorService","stepSubscription","modalStepChange","subscribe","stepConfig","ngOnInit","ngOnDestroy","unsubscribe","localizeService","message","submitText","cancelText","type","ModalTypes","warning","onConfirm","Subject","confirm","next","data","showIndicator","prog","current","total","description","registerListener","deregisterListener","start","progress","complete","http","eventService","getExternalSystems","pageNumber","pageSize","params","HttpParams","set","toString","pipe","finalize","toPromise","getExternalSystem","applyExternalSystem","system","headers","HttpHeaders","post","JSON","stringify","removeExternalSystem","locales","parser","Globalize","numberParser","formatter","numberFormatter","registry","getLocales","setLocales","addLocale","locale","indexOf","push","create","localizedValue","localeValues","forEach","parseNumber","formatNumber","number","Number","localize","bundle","key","com","runwaysdk","Localize","index","lastIndexOf","temp","slice","modalStepChangedSource","asObservable","getStepConfig","setStepConfig","config","getStep","step","setStep","getOrganizations","updateOrganization","json","newOrganization","removeOrganization","code","canDeactivate","component","confirmRet","afterDeactivate","userOID","listeners","listener","indexOfItem","splice","login","user","setUser","response","LocaleValue","Organization","ExternalSystem","PageResult","LocalizedValue","buildFromRoleName","roleName","RegistryRole","roleSplit","split","orgCode","roleSuffix","gotCode","AC","RoleBuilder","geoObjectTypeCode","getMessageFromError","err","unspecified","error","msg","localizedMessage","includes","forRoot","ngModule","SharedModule","providers","CookieService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","ModalModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","BooleanFieldComponent","OnlyNumber","MustMatchDirective","ValidationComponent","PhonePipe","StepConfig","Step","valueChange","EventEmitter","localizeLabelKey","label","disable","change","toggle","emit","el","onKeyDown","e","keyCode","ctrlKey","shiftKey","preventDefault","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors","validate","provide","NG_VALIDATORS","useExisting","multi","args","country","phone","Profile","text","onError","onMessage","userName","roleDisplayLabels","version","installedLocales","cookie","cookieData","cookieDataJSON","parse","buildFromCookieJson","buildRolesFromCookie","role","removeUser","isSRA","isRA","isRM","isRC","roleType","isOrganizationRA","isGeoObjectTypeRM","isGeoObjectTypeRC","getMyOrganizations","orgCodes","__getRoleFromRoleName","nameArr","getRoleDisplayLabelsArray","getRoleDisplayLabels","str","displayLabel","getVersion"],"mappings":"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,kB,uBA7BM,+DAGA,+DAGA,+DAIA,8DAGA,8DAGA,8DAIA,kFAGA,kFAGA,mF,mDAvNpB,0BACE,yBAEA,+BAA+E,kIAC7E,+BACE,4BACE,yBACE,4BACF,iBACF,iBAEA,4BACE,4BACE,6BACE,6BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,8GAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,iHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBAEF,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,mCAAmB,0GAAnB,iBACF,iBACA,gCAGF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,+GAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,0BACE,8BACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAGA,6BACE,wBAEA,6BAEE,8BACE,kCAEA,kCAEF,iBACF,iBACF,iBACA,gCAkCA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BAEE,gCACE,6BACE,0BACI,0BAAI,8BAA4D,iBAChE,0BAAI,8BAAoE,iBACxE,0BAAI,8BAAqE,iBAC7E,iBACF,iBACA,6BACE,gCA+BF,iBACF,iBAIF,iBACF,iBAEA,8BACE,8BACE,8BACE,gCAAmF,yF,wBAAnF,iBACA,2B,wBAEF,iBACF,iBACF,iBACF,iBACF,iBAEF,iB,uEA5N+B,6DAaA,2DAaE,+DAYA,8DAaF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","file":"0.chunk.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { LocalizationService } from '@shared/service';\n\n@Pipe({name: 'localize'})\nexport class LocalizePipe implements PipeTransform {\n  constructor(private service: LocalizationService) { }\n\t\n  transform(value: string): string {\n    return this.service.decode(value);\n  }\n}\n\n","import { Component, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ProfileComponent } from '../profile/profile.component';\n\nimport { AuthService, ProfileService } from '@shared/service';\n\nimport { RegistryRoleType } from '@shared/model/core';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'cgr-header',\n    templateUrl: './header.component.html',\n    styleUrls: []\n} )\nexport class CgrHeaderComponent {\n    context: string;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    bsModalRef: BsModalRef;\n    \n    @Input() loggedIn: boolean = true;\n\n    constructor(\n        private modalService: BsModalService,\n        private profileService: ProfileService,\n        private service: AuthService\n    ) {\n        this.context = acp;\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n    }\n    \n    shouldShowMenuItem(item: string): boolean {\n      if (item === \"HIERARCHIES\")\n      {\n        return true;\n      }\n      else if (item === \"LISTS\")\n      {\n        //return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC) || this.service.hasExactRole(RegistryRoleType.AC);\n        return true;\n      }\n      else if (item === \"IMPORT\")\n      {\n        return  this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n      }\n      else if (item === \"SCHEDULED-JOBS\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n      }\n      else if (item === \"NAVIGATOR\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n      }\n      else if (item === \"CHANGE-REQUESTS\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n      }\n      else if (item === \"TASKS\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n      }\n      else if (item === \"CONFIGS\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.RA);\n      }\n      else if (item === \"SETTINGS\")\n      {\n        return true;\n      }\n      else\n      {\n        return false;\n      }\n    }\n\n    logout(): void {\n        \n        window.location.href = acp + '/session/logout';\n        \n//        this.sessionService.logout().then( response => {\n//            this.router.navigate( ['/login'] );\n//        } );\n    }\n\n    getUsername() {\n        let name: string = this.service.getUsername();\n\n        return name;\n    }\n\n    account(): void {\n        this.profileService.get().then( profile => {\n            this.bsModalRef = this.modalService.show( ProfileComponent, { backdrop: 'static', class: 'gray modal-lg' } );\n            this.bsModalRef.content.profile = profile;\n        } );\n    }\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default navbar-fixed-top\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n          \n       <ul *ngIf=\"loggedIn\" class=\"nav navbar-nav navbar-right\"> \n         <li>\n           <a (click)=\"account()\" class=\"navbar-username\">\n           <!-- <div>Logged in as</div> -->\n             <div>{{getUsername()}}</div>\n           </a>\n         </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"shouldShowMenuItem('HIERARCHIES')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"shouldShowMenuItem('LISTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('IMPORT')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('SCHEDULED-JOBS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/scheduled-jobs\" routerLinkActive=\"active\"><localize key=\"scheduledjobs.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('NAVIGATOR')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/location-manager\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('CHANGE-REQUESTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('TASKS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/tasks\" routerLinkActive=\"active\"><localize key=\"header.tasks\"></localize></a></li>\n                <!-- <li *ngIf=\"shouldShowMenuItem('CONFIGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/synchronization-configs\" routerLinkActive=\"active\"><localize key=\"synchronization.config.manager\"></localize></a></li> -->\n                \n                <hr>\n                <li *ngIf=\"shouldShowMenuItem('SETTINGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/settings\" routerLinkActive=\"active\"><localize key=\"settings.menu\"></localize> </a></li>\n\n\n                <!-- <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li> -->\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n       </ul> \n    </div>\n  </nav>\n</header>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport { AuthService} from './auth.service';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()  || this.service.isContributer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isLoggedIn()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/login' ]);\n    \n    return false;\n  }\n}\n\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, Input} from '@angular/core';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Profile } from '@shared/model/profile';\nimport { AuthService, ProfileService } from '@shared/service';\nimport { Role } from '../../../admin/model/account';\n\n\n@Component({  \n  selector: 'profile',\n  templateUrl: './profile.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ProfileComponent {\n  public _profile:Profile = {\n    oid: '',\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    changePassword:false\n  };\n  \n  @Input('profile')\n  set profile(value: Profile) {\n    this._profile = value;\n    this.getRoles();\n  }\n  roles: Role[] = [];\n  \n  constructor(private service:ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) {}\n  \n\n  getRoles(): void {\n    this.service.getRolesForUser(this._profile.oid).then(roles => {\n      this.roles = roles;\n    });\n  }\n  \n  onSubmit():void {\n    if(!this._profile.changePassword) {\n      delete this._profile.password;\n    }\n\t  \n    this.service.apply(this._profile).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }\n\n  onChangePassword(): void {\n    this._profile.changePassword = !this._profile.changePassword;\n  }\n  \n  // getRoles():string {\n  //   return this.authService.getRoleDisplayLabels();\n  // }\n\n  getRolesArray(): any {\n    return this.authService.getRoles();\n  }\n\n  onRoleIdsUpdate(event: any): void {\n    console.log(event)\n  }\n  \n  cancel():void {\n    this.service.unlock(this._profile.oid).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n}\n","<div *ngIf=\"_profile\">\n  <message></message>\n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\">\n    <fieldset>\n      <div class=\"heading\">\n        <h3>\n          <localize key=\"profile.heading\"></localize>\n        </h3>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.firstName\" name=\"firstname\" required>\n          </span>\n        </div>\n      </div>\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.lastName\" name=\"lastname\" required>\n          </span>\n        </div>\n      </div>\n      \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altFirstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altFirstName\" name=\"altFirstname\">\n            </span>\n          </div>\n        </div>        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altLastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altLastName\" name=\"altLastname\">\n            </span>\n          </div>\n        </div>            \n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n          </span>\n          <div *ngIf=\"aemail.errors?.email\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.position\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.position\" name=\"position\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.department\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.department\" name=\"department\">\n            </span>\n          </div>\n        </div>\n            \n\n      <div class=\"heading\">\n        <h3>\n          <localize key=\"account.info.heading\"></localize>\n        </h3>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"profilename\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.username\" name=\"username\" required>\n          </span>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n        </div>\n        <div class=\"holder\">\n          <!-- <boolean-field [(value)]=\"profile.changePassword\"></boolean-field> -->\n          <div style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!_profile.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"_profile.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"_profile.changePassword\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.password\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" [(ngModel)]=\"_profile.password\" name=\"password\" #password=\"ngModel\" required\n                minlength=\"5\" maxlength=\"50\">\n              <ng2-password-strength-bar [passwordToCheck]=\"_profile.password\">\n              </ng2-password-strength-bar>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.certainPassword\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" [equalTo]=\"password\" />\n            </span>\n            <div *ngIf=\"certainPassword.errors?.equalTo\" class=\"inline-error-message\">\n              <localize key=\"account.certainPassword.validation\"></localize>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th><localize key=\"profile.roles.role.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.organization.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.geoobjecttype.table.heading\"></localize></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let role of roles\">\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.geoObjectTypeLabel.localizedValue}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- <ul>\n            <li *ngFor=\"let role of getRolesArray()\">{{role}}</li>\n          </ul> -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\"\n              [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n\n</div>\n","import { AuthService } from './auth.service';\nimport { EventService } from './event.service';\nimport { ExternalSystemService } from './external-system.service';\nimport { AdminGuard, AuthGuard, ContributerGuard, MaintainerGuard } from './guard.service';\nimport { LocalizationService } from './localization.service';\nimport { ModalStepIndicatorService } from './modal-step-indicator.service';\nimport { OrganizationService } from './organization.service';\nimport { PendingChangesGuard } from './pending-changes-guard';\nimport { ProfileService } from './profile.service';\nimport { ProgressService } from './progress.service';\nimport { SessionService } from './session.service';\n\nexport const services: any[] = [\n\tAuthService,\n\tEventService,\n\tExternalSystemService,\n\tAdminGuard,\n\tAuthGuard,\n\tContributerGuard,\n\tMaintainerGuard,\n\tLocalizationService,\n\tModalStepIndicatorService,\n\tOrganizationService,\n\tPendingChangesGuard,\n\tProfileService,\n\tProgressService,\n\tSessionService\n];\n\nexport * from './auth.service';\nexport * from './event.service';\nexport * from './external-system.service';\nexport * from './guard.service';\nexport * from './localization.service';\nexport * from './modal-step-indicator.service';\nexport * from './organization.service';\nexport * from './pending-changes-guard';\nexport * from './profile.service';\nexport * from './progress.service';\nexport * from './session.service';\n","import { ErrorHandler } from './error-handler/error-handler';\nimport { CgrHeaderComponent } from './header/header.component';\nimport { LoadingBarComponent } from './loading-bar/loading-bar.component';\nimport { LocalizeComponent } from './localize/localize.component';\nimport { ErrorMessageComponent } from './message/error-message.component';\nimport { MessageComponent } from './message/message.component';\nimport { ConfirmModalComponent } from './modals/confirm-modal.component';\nimport { ErrorModalComponent } from './modals/error-modal.component';\nimport { ModalStepIndicatorComponent } from './modals/modal-step-indicator.component';\nimport { SuccessModalComponent } from './modals/success-modal.component';\nimport { PasswordStrengthBarComponent } from './password-strength-bar/password-strength-bar.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\n\nexport const components: any[] = [\n\tErrorHandler,\n\tCgrHeaderComponent,\n\tLoadingBarComponent,\n\tLocalizeComponent,\n\tErrorMessageComponent,\n\tMessageComponent,\n\tConfirmModalComponent,\n\tErrorModalComponent,\n\tModalStepIndicatorComponent,\n\tSuccessModalComponent,\n\tPasswordStrengthBarComponent,\n\tProfileComponent,\n\tProgressBarComponent\n];\n\nexport * from './error-handler/error-handler';\nexport * from './header/header.component';\nexport * from './loading-bar/loading-bar.component';\nexport * from './localize/localize.component';\nexport * from './message/error-message.component';\nexport * from './message/message.component';\nexport * from './modals/confirm-modal.component';\nexport * from './modals/error-modal.component';\nexport * from './modals/modal-step-indicator.component';\nexport * from './modals/success-modal.component';\nexport * from './password-strength-bar/password-strength-bar.component';\nexport * from './profile/profile.component';\nexport * from './progress-bar/progress-bar.component';\n","\nimport { Component, OnChanges, Input, SimpleChange } from '@angular/core';\n\n@Component({\n\tselector: 'password-strength-bar',\n\ttemplateUrl: './password-strength-bar.component.html',\n\tstyleUrls: ['./password-strength-bar.component.css']\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n\t@Input() passwordToCheck: string;\n\tbar0: string;\n\tbar1: string;\n\tbar2: string;\n\tbar3: string;\n\tbar4: string;\n\n\tprivate colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n\tprivate static measureStrength(pass: string) {\n\t\tlet score = 0;\n\t\t// award every unique letter until 5 repetitions  \n\t\tlet letters = {};\n\t\tfor (let i = 0; i < pass.length; i++) {\n\t\t\tletters[pass[i]] = (letters[pass[i]] || 0) + 1;\n\t\t\tscore += 5.0 / letters[pass[i]];\n\t\t}\n\t\t// bonus points for mixing it up  \n\t\tlet variations = {\n\t\t\tdigits: /\\d/.test(pass),\n\t\t\tlower: /[a-z]/.test(pass),\n\t\t\tupper: /[A-Z]/.test(pass),\n\t\t\tnonWords: /\\W/.test(pass),\n\t\t};\n\n\t\tlet variationCount = 0;\n\t\tfor (let check in variations) {\n\t\t\tvariationCount += (variations[check]) ? 1 : 0;\n\t\t}\n\t\tscore += (variationCount - 1) * 10;\n\t\treturn Math.trunc(score);\n\t}\n\n\tprivate getColor(score: number) {\n\t\tlet idx = 0;\n\t\tif (score > 90) {\n\t\t\tidx = 4;\n\t\t} else if (score > 70) {\n\t\t\tidx = 3;\n\t\t} else if (score >= 40) {\n\t\t\tidx = 2;\n\t\t} else if (score >= 20) {\n\t\t\tidx = 1;\n\t\t}\n\t\treturn {\n\t\t\tidx: idx + 1,\n\t\t\tcol: this.colors[idx]\n\t\t};\n\t}\n\n\tngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n\t\tvar password = changes['passwordToCheck'].currentValue;\n\t\tthis.setBarColors(5, '#DDD');\n\t\tif (password) {\n\t\t\tlet c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n\t\t\tthis.setBarColors(c.idx, c.col);\n\t\t}\n\t}\n\tprivate setBarColors(count, col) {\n\t\tfor (let _n = 0; _n < count; _n++) {\n\t\t\tthis['bar' + _n] = col;\n\t\t}\n\t}\n\n}  \n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n","import { Component } from '@angular/core';\nimport { ModalStepIndicatorService } from '@shared/service';\n\nimport { Step, StepConfig } from '@shared/model/modal';\nimport { Subscription } from 'rxjs';\n\n\n@Component( { \n    selector: 'modal-step-indicator',\n    templateUrl: './modal-step-indicator.component.html',\n    styleUrls: ['./modal-step-indicator.css']\n} )\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor( private modalStepIndicatorService: ModalStepIndicatorService ) { \n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe( stepConfig => {\n            this.stepConfig = stepConfig;\n        })\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'error-message',\n    templateUrl: './error-message.component.html',\n    styleUrls: ['./error-message.css']\n} )\nexport class ErrorMessageComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( private localizeService: LocalizationService ) { }\n}\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LocalizationService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\n\n\n@Component( {\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./modal.css']\n} )\nexport class ConfirmModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>{{cancelText}}</span>\n          </button>\n          <button type=\"button\" (click)=\"confirm()\"\n            [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n            aria-disabled=\"false\">\n            <span>{{submitText}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'error-modal',\n    templateUrl: './error-modal.component.html',\n    styleUrls: ['./error-modal.css']\n} )\nexport class ErrorModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { LocalizationService } from '@shared/service';\n\n@Component({\n\tselector: 'success-modal',\n\ttemplateUrl: './success-modal.component.html',\n\tstyleUrls: ['./success-modal.css']\n})\nexport class SuccessModalComponent implements OnInit {\n    /*\n     * Message\n     */\n\t@Input() message: string;\n\n\tconstructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.message = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n\t}\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { Progress } from '@shared/model/progress';\nimport { ProgressService, IProgressListener } from '@shared/service';\n\n@Component({\n  \n  selector: 'progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styles: [\n    '.progress-overlay { background-color: #CCCCCC; position: absolute; display: block;opacity: 0.8;z-index: 99999 !important;}',\n    '.progress-div { width: 100%; margin-left: 0; padding-left: 25%; padding-right: 25%; margin-top: 30% }'\n  ]\n})\nexport class ProgressBarComponent implements OnInit, IProgressListener {\n  public showIndicator: boolean = true;\n\n  public prog:Progress = {\n    current:0,\n    total:1,\n    description:\"Initializing\"\n  };\n\n  constructor(private service: ProgressService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.prog = {\n      current:0,\n      total:1,\n      description:\"Initializing\"\n    };\n    \n    this.showIndicator = true;\n  }\n  \n  progress(progress:Progress):void {\n    this.prog = progress;\n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"progress-overlay\" style=\"height: 100%; width: 100%;\">\n  <div class=\"progress-div\">\n    <progressbar class=\"progress-striped active\" [max]=\"prog.total\" [value]=\"prog.current\"><i>{{prog.description}}</i></progressbar>\n  </div>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service'\n\nimport { ExternalSystem, PageResult } from '@shared/model/core'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ExternalSystemService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetExternalSystems(pageNumber: number, pageSize:number): Promise<PageResult<ExternalSystem>> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'pageNumber', pageNumber.toString() );\n        params = params.set( 'pageSize', pageSize.toString() );\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<ExternalSystem>>(acp + '/external-system/get-all', {params:params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tgetExternalSystem(oid:string): Promise<ExternalSystem> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'oid', oid );\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<ExternalSystem>(acp + '/external-system/get', {params:params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tapplyExternalSystem(system: ExternalSystem): Promise<ExternalSystem> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<ExternalSystem>(acp + '/external-system/apply', JSON.stringify({ system: system }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\t\n\tremoveExternalSystem(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/external-system/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\t\n\n}\n","import { Injectable } from '@angular/core';\nimport { LocalizedValue } from '@shared/model/core';\n\ndeclare var Globalize: any;\ndeclare var com: any\ndeclare var registry: any\n\n@Injectable()\nexport class LocalizationService {\n\n\tlocales: string[] = ['defaultLocale'];\n\n\tprivate parser: any = Globalize.numberParser();\n\tprivate formatter: any = Globalize.numberFormatter();\n\n\tconstructor() {\n\t\tthis.locales = registry.locales;\n\t}\n\n\tgetLocales(): string[] {\n\t\treturn this.locales;\n\t}\n\n\tsetLocales(locales: string[]): void {\n\t\t// The installed locales are now read from the global registry value on load\n\t\t//\t\tthis.locales = locales;\n\t}\n\n\taddLocale(locale: string): void {\n\n\t\tif (this.locales.indexOf(locale) === -1) {\n\t\t\tthis.locales.push(locale);\n\t\t}\n\t}\n\n\tcreate(): LocalizedValue {\n\t\tconst value = { localizedValue: '', localeValues: [] } as LocalizedValue;\n\n\t\tthis.locales.forEach(locale => {\n\t\t\tvalue.localeValues.push({ locale: locale, value: '' });\n\t\t});\n\n\t\treturn value;\n\t}\n\n\tpublic parseNumber(value: string): number {\n\t\tif (value != null && value.length > 0) {\n\t\t\t//convert data from view format to model format\n\t\t\tvar number = this.parser(value);\n\n\t\t\treturn number;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic formatNumber(value: any): string {\n\t\tif (value != null) {\n\t\t\tvar number = value;\n\n\t\t\tif (typeof number === 'string') {\n\t\t\t\tif (number.length > 0 && Number(number)) {\n\t\t\t\t\tnumber = Number(value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//convert data from model format to view format\n\t\t\treturn this.formatter(number);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic localize(bundle: string, key: string): string {\n\t\treturn com.runwaysdk.Localize.localize(bundle, key);\n\t}\n\n\tpublic get(key: string): string {\n\t\treturn com.runwaysdk.Localize.get(key);\n\t}\n\n\tpublic decode(key: string): string {\n\t\tlet index = key.lastIndexOf('.');\n\n\t\tif (index !== -1) {\n\n\t\t\tlet temp = [key.slice(0, index), key.slice(index + 1)]\n\n\t\t\treturn this.localize(temp[0], temp[1]);\n\t\t}\n\t\telse {\n\t\t\treturn this.get(key);\n\t\t}\n\t}\n}\n","import { Injectable } from '@angular/core';\n// import { Subject } from 'rxjs'\nimport { Subject } from 'rxjs';\n\n\nimport { Step, StepConfig } from '@shared/model/modal';\n\n\ndeclare var acp: string;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    constructor(  ) { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n        \n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service';\n\nimport { Organization, PageResult } from '@shared/model/core';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class OrganizationService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetOrganizations(): Promise<Organization[]> {\n\n    this.eventService.start();\n\n    return this.http\n      .get<Organization[]>(acp + '/cgr/organizations/get-all')\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n  updateOrganization(json: any): Promise<Organization> {\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.eventService.start();\n\n    return this.http\n      .post<Organization>(acp + '/cgr/orgainization/update', JSON.stringify({ json: json }), { headers: headers })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n  newOrganization(json: any): Promise<any> {\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.eventService.start();\n\n    return this.http\n      .post<any>(acp + '/cgr/orgainization/create', JSON.stringify({ json: json }), { headers: headers })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n  removeOrganization(code: any): Promise<void> {\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.eventService.start();\n\n    return this.http\n      .post<any>(acp + '/cgr/orgainization/delete', JSON.stringify({ code: code }), { headers: headers })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n}\n","import { CanDeactivate } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n  canDeactivate: () => boolean | Observable<boolean>;\n  afterDeactivate: (arg:boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n  canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n    if (!component.canDeactivate())\n    {\n      // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n      // when navigating away from your angular app, the browser will show a generic warning message\n      // see http://stackoverflow.com/a/42207299/7307355\n      var confirmRet = confirm('WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.');\n      \n      component.afterDeactivate(confirmRet);\n      \n      return confirmRet;\n    }\n    \n    return true;\n  }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from './event.service';\n\nimport { Profile } from '@shared/model/profile';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n    constructor( service: EventService, private http: HttpClient ) { }\n\n    get(): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/registryaccount/get', { headers: headers } )\n            .toPromise();\n    }\n\n\n    apply( profile: Profile ): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/registryaccount/apply', JSON.stringify( { account: profile } ), { headers: headers } )\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<void>( acp + '/registryaccount/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n            .toPromise()\n    }\n\n    getRolesForUser( userOID: string ): Promise<any> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n\n        return this.http\n            .post<Profile>( acp + '/registryaccount/getRolesForUser', {userOID: userOID}, { headers: headers } )\n            .toPromise();\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { Progress } from '@shared/model/progress';\n\nexport interface IProgressListener {\n  start(): void;\n  progress(progress:Progress):void;  \n  complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n  private listeners: IProgressListener[] = [];\n  \n  public constructor() {}\n  \n  public registerListener(listener: IProgressListener): void {\n   this.listeners.push(listener);\n  }\n  \n  public deregisterListener(listener: IProgressListener): boolean {\n    let indexOfItem = this.listeners.indexOf(listener);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this.listeners.splice(indexOfItem, 1);\n\n    return true;\n  }\n  \n  public start(): void {\n    for (const listener of this.listeners) {\n      listener.start();\n    }\n  }\n  \n  public progress(progress:Progress):void {\n    for (const listener of this.listeners) {\n      listener.progress(progress);\n    }\t  \n  }  \n  \n  public complete(): void {\n    for (const listener of this.listeners) {\n      listener.complete();\n    }\n  }  \n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from './event.service';\n\nimport { AuthService } from './auth.service';\nimport { User } from '@shared/model/user';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionService {\n\n    constructor( private service: EventService, private http: HttpClient, private authService: AuthService ) { }\n\n    login( username: string, password: string ): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n        return this.http\n            .post<User>( acp + '/session/login', JSON.stringify( { username: username, password: password } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.service.complete();\n\t\t\t}))\n            .toPromise()\n            .then(( user: User ) => {\n                this.authService.setUser( user );\n\n                return user;\n            } )\n    }\n\n    logout(): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>( acp + '/session/logout', { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.service.complete();\n\t\t\t}))\n            .toPromise()\n            .then(( response: any ) => {\n                this.authService.setUser( null );\n\n                return response;\n            } )\n    }\n}\n","export interface MessageContainer {\n\tsetMessage(message: string);\n}\n\nexport class LocaleValue {\n\tlocale: string;\n\tvalue: string;\n\n\tconstructor(locale: string, value: string) {\n\t\tthis.locale = locale;\n\t\tthis.value = value;\n\t}\n}\n\nexport class Organization {\n\tcode: string;\n\tlabel: any;\n\tcontactInfo: any;\n}\n\nexport class ExternalSystem {\n\toid?: string;\n\tid: string;\n\ttype: string;\n\torganization: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tusername?: string;\n\tpassword?: string;\n\turl?: string;\n\tversion?: string;\n}\n\nexport class PageResult<T> {\n\tcount: number;\n\tpageNumber: number;\n\tpageSize: number;\n\tresultSet: T[];\n}\n\nexport class LocalizedValue {\n\tlocalizedValue: string;\n\tlocaleValues: LocaleValue[];\n\n\tconstructor(localizedValue: string, localeValues: LocaleValue[]) {\n\t\tthis.localizedValue = localizedValue;\n\t\tthis.localeValues = localeValues;\n\t}\n}\n\nexport class RoleBuilder {\n\tstatic buildFromRoleName(roleName: string): RegistryRole {\n\t\tif (roleName === \"cgr.SRA\") {\n\t\t\treturn new RegistryRole(RegistryRoleType.SRA, \"\", \"\", \"cgr.SRA\");\n\t\t}\n\n\t\tlet roleSplit = roleName.split(\".\");\n\n\t\tlet orgCode: string = roleSplit[2];\n\n\t\tif (roleSplit.length === 4) {\n\t\t\treturn new RegistryRole(RegistryRoleType.RA, orgCode, \"\", roleName);\n\t\t}\n\t\telse if (roleSplit.length === 5) {\n\t\t\tlet roleSuffix: string = roleSplit[4];\n\n\t\t\tlet gotCode: string = roleSplit[3];\n\n\t\t\tif (roleSuffix === \"RM\") {\n\t\t\t\treturn new RegistryRole(RegistryRoleType.RM, orgCode, gotCode, roleName);\n\t\t\t}\n\t\t\telse if (roleSuffix === \"RC\") {\n\t\t\t\treturn new RegistryRole(RegistryRoleType.RC, orgCode, gotCode, roleName);\n\t\t\t}\n\t\t\telse if (roleSuffix === \"AC\") {\n\t\t\t\treturn new RegistryRole(RegistryRoleType.AC, orgCode, gotCode, roleName);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class RegistryRole {\n\ttype: RegistryRoleType;\n\torgCode: string;\n\tgeoObjectTypeCode: string;\n\troleName: string;\n\tdisplayLabel: string;\n\n\tconstructor(type: RegistryRoleType, orgCode: string, geoObjectTypeCode: string, roleName: string) {\n\t\tthis.type = type;\n\t\tthis.orgCode = orgCode;\n\t\tthis.geoObjectTypeCode = geoObjectTypeCode;\n\t\tthis.roleName = roleName;\n\t}\n}\n\nexport enum RegistryRoleType {\n\tSRA,\n\tRA,\n\tRM,\n\tRC,\n\tAC\n}\n","export class ErrorHandler {\n    static getMessageFromError(err: any): string {\n    \n      var unspecified = \"An unspecified error has occurred. Please contact your technical support team.\";\n    \n      if (err == null)\n      {\n        return unspecified;\n      }\n      else\n      {\n        console.log(\"An error has occurred: \", err);\n      }\n    \n      if (err.error != null)\n      {\n        var msg = err.error.localizedMessage || err.error.message;\n        \n        if (msg == null)\n        {\n          return unspecified;\n        }\n        else if (msg.includes(\"##tferrormsg##\"))\n        {\n          var split = msg.split(\"##tferrormsg##\");\n          return split[2];\n        }\n        else\n        {\n          return msg;\n        }\n      }\n     \n      return unspecified;\n    }\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { ErrorModalComponent } from './component/modals/error-modal.component';\nimport { SuccessModalComponent } from './component/modals/success-modal.component';\nimport { ConfirmModalComponent } from './component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from './component/message/error-message.component';\nimport { MessageComponent } from './component/message/message.component';\nimport { ValidationComponent } from './component/form-fields/base/validation.component';\nimport { BooleanFieldComponent } from './component/form-fields/boolean-field/boolean-field.component';\nimport { LoadingBarComponent } from './component/loading-bar/loading-bar.component';\nimport { PasswordStrengthBarComponent } from './component/password-strength-bar/password-strength-bar.component';\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from './service/guard.service';\nimport { PendingChangesGuard } from './service/pending-changes-guard';\n\nimport { AuthService } from './service/auth.service';\nimport { ProfileService } from './service/profile.service';\nimport { OrganizationService } from './service/organization.service';\nimport { ExternalSystemService } from './service/external-system.service';\nimport { LocalizationService } from './service/localization.service';\nimport { ProgressService } from './service/progress.service';\nimport { EventService } from './service/event.service';\nimport { ModalStepIndicatorService } from './service/modal-step-indicator.service';\nimport { SessionService } from './service/session.service';\n\nimport { LocalizePipe } from './pipe/localize.pipe';\nimport { PhonePipe } from './pipe/phone.pipe';\n\nimport { OnlyNumber } from './directive/number-only.directive';\nimport { MustMatchDirective } from './directive/must-match.directive';\n\nimport { CgrHeaderComponent } from './component/header/header.component';\nimport { ProgressBarComponent } from './component/progress-bar/progress-bar.component';\nimport { LocalizeComponent } from './component/localize/localize.component';\nimport { ModalStepIndicatorComponent } from './component/modals/modal-step-indicator.component';\nimport { ProfileComponent } from './component/profile/profile.component';\n\nimport '../rxjs-extensions';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\tModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule\n\t],\n\tdeclarations: [\n\t\tLocalizeComponent,\n\t\tBooleanFieldComponent,\n\t\tLoadingBarComponent,\n\t\tErrorMessageComponent,\n\t\tMessageComponent,\n\t\tConfirmModalComponent,\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tOnlyNumber,\n\t\tMustMatchDirective,\n\t\tValidationComponent,\n\t\tProgressBarComponent,\n\t\tModalStepIndicatorComponent,\n\t\tCgrHeaderComponent,\n\t\tProfileComponent,\n\t\tLocalizePipe,\n\t\tPhonePipe\n\t],\n\texports: [\n\t\tLocalizeComponent,\n\t\tBooleanFieldComponent,\n\t\tLoadingBarComponent,\n\t\tErrorMessageComponent,\n\t\tMessageComponent,\n\t\tConfirmModalComponent,\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tOnlyNumber,\n\t\tMustMatchDirective,\n\t\tValidationComponent,\n\t\tProgressBarComponent,\n\t\tModalStepIndicatorComponent,\n\t\tCgrHeaderComponent,\n\t\tProfileComponent,\n\t\tLocalizePipe,\n\t\tPhonePipe,\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule\n\t],\n\tentryComponents: [\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tConfirmModalComponent,\n\t\tModalStepIndicatorComponent,\n\t\tErrorMessageComponent,\n\t\tLoadingBarComponent,\n\t\tProfileComponent\n\t]\n})\nexport class SharedModule {\n\tstatic forRoot(): ModuleWithProviders<SharedModule> {\n\t\treturn {\n\t\t\tngModule: SharedModule,\n\t\t\tproviders: [\n\t\t\t\tCookieService,\n\t\t\t\tAuthService,\n\t\t\t\tSessionService,\n\t\t\t\tProfileService,\n\t\t\t\tOrganizationService,\n\t\t\t\tExternalSystemService,\n\t\t\t\tLocalizationService,\n\t\t\t\tModalStepIndicatorService,\n\t\t\t\tEventService,\n\t\t\t\tProgressService,\n\t\t\t\tAdminGuard,\n\t\t\t\tMaintainerGuard,\n\t\t\t\tContributerGuard,\n\t\t\t\tAuthGuard,\n\t\t\t\tPendingChangesGuard\n\t\t\t]\n\t\t};\n\t}\n}\n","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","import {Component, Input, Output, EventEmitter} from '@angular/core';\n\ndeclare var acp:string;\n\n@Component({    \n  selector: 'boolean-field',\n  templateUrl: './boolean-field.component.html',\n  styleUrls: ['./boolean-field.css']\n})\nexport class BooleanFieldComponent {\n\n  @Input() value:boolean = false;\n  @Output() public valueChange = new EventEmitter<boolean>();\n\n  @Input() localizeLabelKey:string = \"\"; // localization key used to localize in the component template\n  @Input() label:string = \"\"; // raw string input\n\n  @Input() disable:boolean = false;\n\n  /* You can pass a function in with (change)='function()' */\n  @Output() public change = new EventEmitter<any>();\n\n  constructor(){}\n  \n  toggle():void {\n    if(!this.disable){\n      this.value = !this.value;\n      \n      this.valueChange.emit(this.value);\n      this.change.emit(this.value);\n    }\n  }\n}","<div class=\"check-block\">\n  <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value, 'disabled': disable}\" ng-style=\"chkstyle\" class=\"chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]'\n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","import { Directive, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n\treturn (formGroup: FormGroup) => {\n\t\tconst control = formGroup.controls[controlName];\n\t\tconst matchingControl = formGroup.controls[matchingControlName];\n\n\t\t// return null if controls haven't initialised yet\n\t\tif (!control || !matchingControl) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// return null if another validator has already found an error on the matchingControl\n\t\tif (matchingControl.errors && !matchingControl.errors.mustMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// set error on matchingControl if validation fails\n\t\tif (control.value !== matchingControl.value) {\n\t\t\tmatchingControl.setErrors({ mustMatch: true });\n\t\t} else {\n\t\t\tmatchingControl.setErrors(null);\n\t\t}\n\t}\n}\n\n@Directive({\n\tselector: '[mustMatch]',\n\tproviders: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\t@Input('mustMatch') mustMatch: string[] = [];\n\n\tvalidate(formGroup: FormGroup): ValidationErrors {\n\t\treturn MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n\t}\n}","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'validation',\n  template: `\n    <div class=\"validation\">\n      <div *ngFor=\"let message of messages\">{{message}}</div>\n    </div>\n  `,\n  styles: [`\n    .validation {\n      color: #999;\n      margin: 12px;\n    }`\n  ]\n})\nexport class ValidationComponent {\n  @Input() messages: Array<string>;\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { formatNumber, ParsedNumber } from 'libphonenumber-js';\n\n\n@Pipe({\n  name: 'phone'\n})\nexport class PhonePipe implements PipeTransform {\n\n  transform(value: ParsedNumber, args?: string): any {\n    if (!value) {\n      return value;\n    }\n\n    return formatNumber({ country: 'US', phone: value.toString() }, 'International');\n  }\n\n}\n","import { Role } from \"../../admin/model/account\";\n\n///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\nexport class Profile {\n  oid: string;\n  username: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  changePassword: boolean;\n}","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '@shared/service';\n\n@Component({\n  \n  selector: 'localize',\n  templateUrl: './localize.component.html',\n  styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n  @Input() key: string;\n  text: string;\n    \n  constructor(private service: LocalizationService) { }\n\n  ngOnInit(): void {\n    this.text = this.service.decode(this.key);\n  }\n}\n","{{text}}","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '@shared/service';\n\n@Component({\n  \n  selector: 'loading-bar',\n  templateUrl: './loading-bar.component.html',\n  styleUrls: ['./loading-bar.css']\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n  showIndicator: boolean = false;\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.showIndicator = true;    \n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '@shared/service';\n\n@Component({\n  \n  selector: 'message',\n  templateUrl: './message.component.html',\n  styles: [\n    '.error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}',\n    '.message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }'\n  ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\t\n  error: any = null;\n  \n  message: string = \"\";\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.error = null;\n  }\n  \n  complete(): void {\n  }  \n  \n  onError(error: any): void {\n    this.error = error;\n  }\n  \n  onMessage(msg: string): void {\n    this.message = msg;\n  }\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '@shared/model/user';\nimport { RoleBuilder, RegistryRole, RegistryRoleType } from '@shared/model/core';\n\n@Injectable()\nexport class AuthService {\n\n\tprivate user: User = {\n\t\tloggedIn: false,\n\t\tuserName: '',\n\t\troles: [],\n\t\troleDisplayLabels: [],\n\t\tversion: \"0\",\n\t\tinstalledLocales: []\n\t};\n\n\tconstructor(private service: CookieService) {\n\t\tlet cookie = service.get('user');\n\n\t\tif (this.service.check(\"user\") && cookie != null && cookie.length > 0) {\n\t\t\tlet cookieData: string = this.service.get(\"user\")\n\t\t\tlet cookieDataJSON: any = JSON.parse(cookieData);\n\n\t\t\tthis.buildFromCookieJson(cookieDataJSON);\n\t\t}\n\t}\n\n\tbuildFromCookieJson(cookieDataJSON: any) {\n\t\tthis.user.userName = cookieDataJSON.userName;\n\t\tthis.buildRolesFromCookie(cookieDataJSON);\n\t\tthis.user.loggedIn = cookieDataJSON.loggedIn;\n\t\tthis.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n\t\tthis.user.version = cookieDataJSON.version;\n\t\tthis.user.installedLocales = cookieDataJSON.installedLocales;\n\t}\n\n\tbuildRolesFromCookie(cookieDataJSON: any) {\n\t\tthis.user.roles = [];\n\t\tlet roles: string[] = cookieDataJSON.roles;\n\n\t\tfor (let i = 0; i < roles.length; ++i) {\n\t\t\tlet role: RegistryRole = RoleBuilder.buildFromRoleName(roles[i]);\n\n\t\t\tif (role != null) {\n\t\t\t\tthis.user.roles.push(role);\n\t\t\t}\n\t\t}\n\t}\n\n\tisLoggedIn(): boolean {\n\t\treturn this.user.loggedIn;\n\t}\n\n\tsetUser(cookieDataJSON: any): void {\n\t\tthis.buildFromCookieJson(cookieDataJSON);\n\t}\n\n\tremoveUser(): void {\n\t\tthis.user = {\n\t\t\tloggedIn: false,\n\t\t\tuserName: '',\n\t\t\troles: [],\n\t\t\troleDisplayLabels: [],\n\t\t\tversion: \"0\",\n\t\t\tinstalledLocales: []\n\t\t};\n\t}\n\n\t// Legacy Accessors:\n\tisAdmin(): boolean {\n\t\treturn this.isSRA() || this.isRA();\n\t}\n\n\tisMaintainer(): boolean {\n\t\treturn this.isRM();\n\t}\n\n\tisContributer(): boolean {\n\t\treturn this.isRC();\n\t}\n\n\t// Used to exactly identify a role. I.e. if we say we need RC, SRA doesn't count.\n\thasExactRole(roleType: RegistryRoleType) {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === roleType) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisSRA(): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.SRA) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisRA(): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RA) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (role.roleName.indexOf('commongeoregistry.RegistryAdministrator') !== -1\n\t\t\t\t|| role.roleName.indexOf(\"cgr.RegistryAdministrator\") !== -1) // Legacy support\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisRM(): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RM) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (role.roleName.indexOf('commongeoregistry.RegistryMaintainer') !== -1\n\t\t\t\t|| role.roleName.indexOf(\"cgr.RegistryMaintainer\") !== -1) // Legacy support\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisOrganizationRA(orgCode: string): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.orgCode === orgCode && role.type === RegistryRoleType.RA) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false; // this.isSRA();\n\t}\n\n\tisGeoObjectTypeRM(orgCode: string, gotCode: string): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RM && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn this.isOrganizationRA(orgCode);\n\t}\n\n\tisGeoObjectTypeRC(orgCode: string, gotCode: string): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RC && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn this.isGeoObjectTypeRM(orgCode, gotCode);\n\t}\n\n\tisRC(): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RC) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (role.roleName.indexOf('commongeoregistry.RegistryContributor') !== -1\n\t\t\t\t|| role.roleName.indexOf(\"cgr.RegistryContributor\") !== -1) // Legacy support\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// Returns all organization codes that the current user participates in.\n\t// If the user is an SRA then this method will return an empty string array.\n\tgetMyOrganizations(): string[] {\n\t\tlet orgCodes: string[] = [];\n\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RC || role.type === RegistryRoleType.RM || role.type === RegistryRoleType.RA) {\n\t\t\t\torgCodes.push(role.orgCode);\n\t\t\t}\n\t\t}\n\n\t\treturn orgCodes;\n\t}\n\n\t__getRoleFromRoleName(roleName: string): string {\n\t\tlet nameArr = roleName.split(\".\");\n\n\t\treturn nameArr[nameArr.length - 1];\n\t}\n\n\tgetUsername(): string {\n\t\treturn this.user.userName;\n\t}\n\n\tgetRoles(): any {\n\t\treturn this.user.roles;\n\t}\n\n\tgetRoleDisplayLabelsArray(): any {\n\t\treturn this.user.roleDisplayLabels;\n\t}\n\n\tgetRoleDisplayLabels(): string {\n\t\tlet str = \"\";\n\t\tfor (let i = 0; i < this.user.roleDisplayLabels.length; ++i) {\n\t\t\tlet displayLabel = this.user.roleDisplayLabels[i];\n\n\t\t\tif (displayLabel === \"Administrator\") {\n\t\t\t\tcontinue;\n\t\t\t\t// It's OK to hardcode to a display label here because the end user can't change it anyway.\n\t\t\t\t// Is it ideal? No. But sometimes it's better to get software out quicker than to spend forever\n\t\t\t\t// on something that nobody will ever see.\n\t\t\t}\n\n\t\t\tstr = str + displayLabel;\n\n\t\t\tif (i < this.user.roleDisplayLabels.length - 1) {\n\t\t\t\tstr = str + \",\";\n\t\t\t}\n\t\t}\n\n\t\treturn str;\n\t}\n\n\tgetVersion(): string {\n\t\treturn this.user.version;\n\t}\n\n\tgetLocales(): any[] {\n\t\treturn this.user.installedLocales;\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var acp;\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n    private listeners: IEventListener[] = [];\n\n    public registerListener( listener: IEventListener ): void {\n        this.listeners.push( listener );\n    }\n\n    public deregisterListener( listener: IEventListener ): boolean {\n        let indexOfItem = this.listeners.indexOf( listener );\n\n        if ( indexOfItem === -1 ) {\n            return false;\n        }\n\n        this.listeners.splice( indexOfItem, 1 );\n\n        return true;\n    }\n\n    public start(): void {\n        for ( const listener of this.listeners ) {\n            listener.start();\n        }\n    }\n\n    public complete(): void {\n        for ( const listener of this.listeners ) {\n            listener.complete();\n        }\n    }\n}\n"],"sourceRoot":""}