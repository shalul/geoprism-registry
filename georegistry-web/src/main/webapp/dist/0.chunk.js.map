{"version":3,"sources":["webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/model/profile.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/component/localize/localize.component.html"],"names":["service","http","get","headers","HttpHeaders","this","post","acp","toPromise","apply","profile","JSON","stringify","account","unlock","oid","getRolesForUser","userOID","ProfileService","authService","login","username","password","start","finally","complete","then","user","setUser","logout","response","SessionService","value","valueChange","EventEmitter","localizeLabelKey","label","disable","change","toggle","emit","BooleanFieldComponent","showIndicator","ngOnInit","registerListener","ngOnDestroy","deregisterListener","LoadingBarComponent","transform","decode","LocalizePipe","error","message","onError","onMessage","msg","MessageComponent","modalStepChangedSource","Subject","modalStepChange","asObservable","getStepConfig","stepConfig","setStepConfig","config","next","getStep","step","setStep","ModalStepIndicatorService","router","canActivate","route","state","isAdmin","navigate","AdminGuard","isMaintainer","MaintainerGuard","isContributer","ContributerGuard","isLoggedIn","AuthGuard","eventService","locales","parser","Globalize","numberParser","formatter","numberFormatter","getLocales","setLocales","create","localizedValue","localeValues","forEach","locale","push","parseNumber","length","formatNumber","number","Number","localize","bundle","key","com","runwaysdk","Localize","index","lastIndexOf","temp","slice","LocalizationService","listeners","listener","indexOfItem","indexOf","splice","EventService","bsModalRef","localizeService","ErrorModalComponent","sessionService","modalService","profileService","loggedIn","context","isContributor","window","location","href","getUsername","role","getRoleDisplayLabels","name","show","ProfileComponent","backdrop","class","content","CgrHeaderComponent","progress","ProgressService","_profile","firstName","lastName","email","changePassword","roles","getRoles","onSubmit","hide","onChangePassword","getRolesArray","onRoleIdsUpdate","event","console","log","cancel","canDeactivate","component","confirmRet","confirm","afterDeactivate","PendingChangesGuard","submitText","cancelText","type","ModalTypes","warning","onConfirm","data","ConfirmModalComponent","ErrorMessageComponent","StepConfig","Step","LocaleValue","LocalizedValue","buildFromRoleName","roleName","RegistryRole","RegistryRoleType","SRA","roleSplit","split","orgCode","RA","roleSuffix","gotCode","RM","RC","AC","RoleBuilder","geoObjectTypeCode","SuccessModalComponent","modalStepIndicatorService","stepSubscription","subscribe","unsubscribe","ModalStepIndicatorComponent","forRoot","ngModule","SharedModule","providers","CookieService","AuthService","Profile","text","LocalizeComponent","userName","roleDisplayLabels","version","installedLocales","cookie","check","cookieData","cookieDataJSON","parse","buildFromCookieJson","buildRolesFromCookie","i","removeUser","isSRA","isRA","isRM","isRC","getMyOrganizations","orgCodes","getRoleDisplayLabelsArray","str","displayLabel","getVersion"],"mappings":"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","file":"0.chunk.js","sourcesContent":["///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport { EventService } from './event.service';\n\nimport { Profile } from '../model/profile';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n    constructor( service: EventService, private http: HttpClient ) { }\n\n    get(): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/account/get', { headers: headers } )\n            .toPromise();\n    }\n\n\n    apply( profile: Profile ): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/registryaccount/apply', JSON.stringify( { account: profile } ), { headers: headers } )\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<void>( acp + '/account/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n            .toPromise()\n    }\n\n    getRolesForUser( userOID: string ): Promise<any> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n\n        return this.http\n            .post<Profile>( acp + '/registryaccount/getRolesForUser', {userOID: userOID}, { headers: headers } )\n            .toPromise();\n\n    }\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\n\nimport { EventService } from './event.service';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../model/user';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionService {\n\n    constructor( private service: EventService, private http: HttpClient, private authService: AuthService ) { }\n\n    login( username: string, password: string ): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n        return this.http\n            .post<User>( acp + '/session/login', JSON.stringify( { username: username, password: password } ), { headers: headers } )\n            .finally(() => {\n                this.service.complete();\n            } )\n            .toPromise()\n            .then(( user: User ) => {\n                this.authService.setUser( user );\n\n                return user;\n            } )\n    }\n\n    logout(): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>( acp + '/session/logout', { headers: headers } )\n            .finally(() => {\n                this.service.complete();\n            } )\n            .toPromise()\n            .then(( response: any ) => {\n                this.authService.setUser( null );\n\n                return response;\n            } )\n    }\n}\n","import {Component, Input, Output, EventEmitter} from '@angular/core';\n\ndeclare var acp:string;\n\n@Component({    \n  selector: 'boolean-field',\n  templateUrl: './boolean-field.component.html',\n  styleUrls: ['./boolean-field.css']\n})\nexport class BooleanFieldComponent {\n\n  @Input() value:boolean = false;\n  @Output() public valueChange = new EventEmitter<boolean>();\n\n  @Input() localizeLabelKey:string = \"\"; // localization key used to localize in the component template\n  @Input() label:string = \"\"; // raw string input\n\n  @Input() disable:boolean = false;\n\n  /* You can pass a function in with (change)='function()' */\n  @Output() public change = new EventEmitter<any>();\n\n  constructor(){}\n  \n  toggle():void {\n    if(!this.disable){\n      this.value = !this.value;\n      \n      this.valueChange.emit(this.value);\n      this.change.emit(this.value);\n    }\n  }\n}","<div class=\"check-block\">\n  <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value, 'disabled': disable}\" ng-style=\"chkstyle\" class=\"chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'loading-bar',\n  templateUrl: './loading-bar.component.html',\n  styleUrls: ['./loading-bar.css']\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n  showIndicator: boolean = false;\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.showIndicator = true;    \n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { LocalizationService } from '../service/localization.service';\n\n@Pipe({name: 'localize'})\nexport class LocalizePipe implements PipeTransform {\n  constructor(private service: LocalizationService) { }\n\t\n  transform(value: string): string {\n    return this.service.decode(value);\n  }\n}\n\n","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'message',\n  templateUrl: './message.component.html',\n  styles: [\n    '.error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}',\n    '.message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }'\n  ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\t\n  error: any = null;\n  \n  message: string = \"\";\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.error = null;\n  }\n  \n  complete(): void {\n  }  \n  \n  onError(error: any): void {\n    this.error = error;\n  }\n  \n  onMessage(msg: string): void {\n    this.message = msg;\n  }\n}\n","import { Injectable } from '@angular/core';\n// import { Subject } from 'rxjs'\nimport { Subject } from 'rxjs/Subject';\n\n\nimport { Step, StepConfig } from '../model/modal';\n\n\ndeclare var acp: string;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    constructor(  ) { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n        \n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport { AuthService} from './auth.service';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()  || this.service.isContributer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isLoggedIn()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/login' ]);\n    \n    return false;\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { LocalizedValue } from '../model/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport { EventService } from '../../shared/service/event.service';\n\ndeclare var Globalize: any;\ndeclare var com: any\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    locales: string[] = ['defaultLocale'];\n\n    private parser: any = Globalize.numberParser();\n    private formatter: any = Globalize.numberFormatter();\n\n    getLocales(): string[] {\n        return this.locales;\n    }\n\n    setLocales( locales: string[] ): void {\n        this.locales = locales;\n    }\n\n    create(): LocalizedValue {\n        const value = { localizedValue: '', localeValues: [] } as LocalizedValue;\n\n        this.locales.forEach( locale => {\n            value.localeValues.push( { locale: locale, value: '' } );\n        } );\n\n        return value;\n    }\n\n    public parseNumber( value: string ): number {\n        if ( value != null && value.length > 0 ) {\n            //convert data from view format to model format\n            var number = this.parser( value );\n\n            return number;\n        }\n\n        return null;\n    }\n\n    public formatNumber( value: any ): string {\n        if ( value != null ) {\n            var number = value;\n\n            if ( typeof number === 'string' ) {\n                if ( number.length > 0 && Number( number ) ) {\n                    number = Number( value );\n                }\n                else {\n                    return \"\";\n                }\n            }\n\n            //convert data from model format to view format\n            return this.formatter( number );\n        }\n\n        return null;\n    }\n\n    public localize( bundle: string, key: string ): string {\n        return com.runwaysdk.Localize.localize( bundle, key );\n    }\n\n    public get( key: string ): string {\n        return com.runwaysdk.Localize.get( key );\n    }\n\n    public decode( key: string ): string {\n        let index = key.lastIndexOf( '.' );\n\n        if ( index !== -1 ) {\n\n            let temp = [key.slice( 0, index ), key.slice( index + 1 )]\n\n            return this.localize( temp[0], temp[1] );\n        }\n        else {\n            return this.get( key );\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var acp;\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n    private listeners: IEventListener[] = [];\n\n    public registerListener( listener: IEventListener ): void {\n        this.listeners.push( listener );\n    }\n\n    public deregisterListener( listener: IEventListener ): boolean {\n        let indexOfItem = this.listeners.indexOf( listener );\n\n        if ( indexOfItem === -1 ) {\n            return false;\n        }\n\n        this.listeners.splice( indexOfItem, 1 );\n\n        return true;\n    }\n\n    public start(): void {\n        for ( const listener of this.listeners ) {\n            listener.start();\n        }\n    }\n\n    public complete(): void {\n        for ( const listener of this.listeners ) {\n            listener.complete();\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'error-modal',\n    templateUrl: './error-modal.component.html',\n    styleUrls: ['./error-modal.css']\n} )\nexport class ErrorModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ProfileComponent } from '../profile/profile.component';\n\nimport { AuthService } from '../../service/auth.service';\nimport { SessionService } from '../../service/session.service';\nimport { ProfileService } from '../../service/profile.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'cgr-header',\n    templateUrl: './header.component.html',\n    styleUrls: []\n} )\nexport class CgrHeaderComponent {\n    context: string;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    bsModalRef: BsModalRef;\n    \n    @Input() loggedIn: boolean = true;\n\n    constructor(\n        private sessionService: SessionService,\n        private modalService: BsModalService,\n        private profileService: ProfileService,\n        private router: Router,\n        private service: AuthService\n    ) {\n        this.context = acp;\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n    }\n\n    logout(): void {\n        \n        window.location.href = acp + '/session/logout';\n        \n//        this.sessionService.logout().then( response => {\n//            this.router.navigate( ['/login'] );\n//        } );\n    }\n\n    getUsername() {\n        let role: string = this.service.getRoleDisplayLabels();\n        let name: string = this.service.getUsername();\n\n        name = name + \" (\" + role + \")\";\n        return name;\n    }\n\n    account(): void {\n        this.profileService.get().then( profile => {\n            this.bsModalRef = this.modalService.show( ProfileComponent, { backdrop: 'static', class: 'gray modal-lg' } );\n            this.bsModalRef.content.profile = profile;\n        } );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { Progress } from '../model/progress';\n\nexport interface IProgressListener {\n  start(): void;\n  progress(progress:Progress):void;  \n  complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n  private listeners: IProgressListener[] = [];\n  \n  public constructor() {}\n  \n  public registerListener(listener: IProgressListener): void {\n   this.listeners.push(listener);\n  }\n  \n  public deregisterListener(listener: IProgressListener): boolean {\n    let indexOfItem = this.listeners.indexOf(listener);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this.listeners.splice(indexOfItem, 1);\n\n    return true;\n  }\n  \n  public start(): void {\n    for (const listener of this.listeners) {\n      listener.start();\n    }\n  }\n  \n  public progress(progress:Progress):void {\n    for (const listener of this.listeners) {\n      listener.progress(progress);\n    }\t  \n  }  \n  \n  public complete(): void {\n    for (const listener of this.listeners) {\n      listener.complete();\n    }\n  }  \n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, Input} from '@angular/core';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { Profile } from '../../model/profile';\nimport { ProfileService } from '../../service/profile.service';\nimport { AuthService } from '../../service/auth.service';\nimport { Role } from '../../../admin/model/account';\n\n\n@Component({  \n  selector: 'profile',\n  templateUrl: './profile.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ProfileComponent {\n  public _profile:Profile = {\n    oid: '',\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    changePassword:false\n  };\n  \n  @Input('profile')\n  set profile(value: Profile) {\n    this._profile = value;\n    this.getRoles();\n  }\n  roles: Role[] = [];\n  \n  constructor(private service:ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) {}\n  \n\n  getRoles(): void {\n    this.service.getRolesForUser(this._profile.oid).then(roles => {\n      this.roles = roles;\n    });\n  }\n  \n  onSubmit():void {\n    if(!this._profile.changePassword) {\n      delete this._profile.password;\n    }\n\t  \n    this.service.apply(this._profile).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }\n\n  onChangePassword(): void {\n    this._profile.changePassword = !this._profile.changePassword;\n  }\n  \n  // getRoles():string {\n  //   return this.authService.getRoleDisplayLabels();\n  // }\n\n  getRolesArray(): any {\n    return this.authService.getRoles();\n  }\n\n  onRoleIdsUpdate(event: any): void {\n    console.log(event)\n  }\n  \n  cancel():void {\n    this.service.unlock(this._profile.oid).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n}\n","import { CanDeactivate } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n  canDeactivate: () => boolean | Observable<boolean>;\n  afterDeactivate: (boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n  canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n    if (!component.canDeactivate())\n    {\n      // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n      // when navigating away from your angular app, the browser will show a generic warning message\n      // see http://stackoverflow.com/a/42207299/7307355\n      var confirmRet = confirm('WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.');\n      \n      component.afterDeactivate(confirmRet);\n      \n      return confirmRet;\n    }\n    \n    return true;\n  }\n}","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default navbar-fixed-top\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n          \n       <ul *ngIf=\"loggedIn\" class=\"nav navbar-nav navbar-right\"> \n         <li>\n           <a (click)=\"account()\" class=\"navbar-username\">\n           <!-- <div>Logged in as</div> -->\n             <div>{{getUsername()}}</div>\n           </a>\n         </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"isMaintainer\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"isContributor\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"isMaintainer\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li *ngIf=\"isContributor\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/scheduled-jobs\" routerLinkActive=\"active\"><localize key=\"scheduledjobs.menu\"></localize> </a></li>\n                <li role=\"menuitem\"><a class=\"dropdown-item\" href=\"{{context}}/nav/management#/locations\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"isContributor\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                <li *ngIf=\"isContributor\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/tasks\" routerLinkActive=\"active\"><localize key=\"header.tasks\"></localize></a></li>\n                \n                <hr>\n                <li *ngIf=\"isContributor\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/settings\" routerLinkActive=\"active\"><localize key=\"settings.menu\"></localize> </a></li>\n\n\n                <!-- <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li> -->\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n       </ul> \n    </div>\n  </nav>\n</header>\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { LocalizationService } from '../../service/localization.service';\nimport { ModalTypes } from '../../model/modal';\n\n\n@Component( {\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./modal.css']\n} )\nexport class ConfirmModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'error-message',\n    templateUrl: './error-message.component.html',\n    styleUrls: ['./error-message.css']\n} )\nexport class ErrorMessageComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( private localizeService: LocalizationService ) { }\n}\n","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","export interface MessageContainer {\n  setMessage( message: string );\n}\n\nexport class LocaleValue {\n  locale: string;\n  value: string;\n  \n  constructor( locale: string, value: string ) {\n    this.locale = locale;\n    this.value = value;\n  }\n}\n\nexport class LocalizedValue {\n  localizedValue: string;\n  localeValues: LocaleValue[];\n  \n  constructor( localizedValue: string, localeValues: LocaleValue[] ) {\n    this.localizedValue = localizedValue;\n    this.localeValues = localeValues;\n  }\n}\n\nexport class RoleBuilder {\n  static buildFromRoleName(roleName: string): RegistryRole {\n    if (roleName === \"cgr.SRA\") {\n      return new RegistryRole(RegistryRoleType.SRA, \"\", \"\", \"cgr.SRA\");\n    }\n    \n    let roleSplit = roleName.split(\".\");\n    \n    let orgCode: string = roleSplit[2];\n    \n    if (roleSplit.length === 4) {\n      return new RegistryRole(RegistryRoleType.RA, orgCode, \"\", roleName);\n    }\n    else if (roleSplit.length === 5) {\n      let roleSuffix: string = roleSplit[4];\n      \n      let gotCode: string = roleSplit[3];\n      \n      if (roleSuffix === \"RM\") {\n        return new RegistryRole(RegistryRoleType.RM, orgCode, gotCode, roleName);\n      }\n      else if (roleSuffix === \"RC\") {\n        return new RegistryRole(RegistryRoleType.RC, orgCode, gotCode, roleName);\n      }\n      else if (roleSuffix === \"AC\") {\n        return new RegistryRole(RegistryRoleType.AC, orgCode, gotCode, roleName);\n      }\n    }\n    else\n    {\n      return null;\n    }\n  }\n}\n\nexport class RegistryRole {\n  type: RegistryRoleType;\n  orgCode: string;\n  geoObjectTypeCode: string;\n  roleName: string;\n  displayLabel: string;\n  \n  constructor( type: RegistryRoleType, orgCode: string, geoObjectTypeCode: string, roleName: string ) {\n    this.type = type;\n    this.orgCode = orgCode;\n    this.geoObjectTypeCode = geoObjectTypeCode;\n    this.roleName = roleName;\n  }\n}\n\nexport enum RegistryRoleType {\n  SRA,\n  RA,\n  RM,\n  RC,\n  AC\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\n</div>\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'success-modal',\n    templateUrl: './success-modal.component.html',\n    styleUrls: ['./success-modal.css']\n} )\nexport class SuccessModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>{{cancelText}}</span>\n          </button>\n          <button type=\"button\" (click)=\"confirm()\"\n            [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n            aria-disabled=\"false\">\n            <span>{{submitText}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component } from '@angular/core';\nimport { LocalizationService } from '../../service/localization.service';\nimport { ModalStepIndicatorService} from '../../service/modal-step-indicator.service'\n\nimport { Step, StepConfig } from '../../model/modal';\nimport { Subscription } from 'rxjs';\n\n\n@Component( { \n    selector: 'modal-step-indicator',\n    templateUrl: './modal-step-indicator.component.html',\n    styleUrls: ['./modal-step-indicator.css']\n} )\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor( private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService ) { \n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe( stepConfig => {\n            this.stepConfig = stepConfig;\n        })\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n}\n","<div *ngIf=\"_profile\">\n  <message></message>\n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\">\n    <fieldset>\n      <div class=\"heading\">\n        <h3>\n          <localize key=\"profile.heading\"></localize>\n        </h3>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.firstName\" name=\"firstname\" required>\n          </span>\n        </div>\n      </div>\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.lastName\" name=\"lastname\" required>\n          </span>\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n          </span>\n          <div *ngIf=\"aemail.errors?.email\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"heading\">\n        <h3>\n          <localize key=\"account.info.heading\"></localize>\n        </h3>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"profilename\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.username\" name=\"username\" required>\n          </span>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n        </div>\n        <div class=\"holder\">\n          <!-- <boolean-field [(value)]=\"profile.changePassword\"></boolean-field> -->\n          <div style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!_profile.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"_profile.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"_profile.changePassword\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.password\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" [(ngModel)]=\"_profile.password\" name=\"password\" #password=\"ngModel\" required\n                minlength=\"5\" maxlength=\"50\">\n              <ng2-password-strength-bar [passwordToCheck]=\"_profile.password\">\n              </ng2-password-strength-bar>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.certainPassword\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" [equalTo]=\"password\" />\n            </span>\n            <div *ngIf=\"certainPassword.errors?.equalTo\" class=\"inline-error-message\">\n              <localize key=\"account.certainPassword.validation\"></localize>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th><localize key=\"profile.roles.role.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.organization.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.geoobjecttype.table.heading\"></localize></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let role of roles\">\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.geoObjectTypeLabel.localizedValue}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- <ul>\n            <li *ngFor=\"let role of getRolesArray()\">{{role}}</li>\n          </ul> -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\"\n              [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n\n</div>\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FileUploadModule } from 'ng2-file-upload/ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { PasswordStrengthBarModule } from 'ng2-password-strength-bar';\nimport { CustomFormsModule } from 'ng2-validation'\n\nimport { ErrorModalComponent } from './component/modals/error-modal.component';\nimport { SuccessModalComponent } from './component/modals/success-modal.component';\nimport { ConfirmModalComponent } from './component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from './component/message/error-message.component';\nimport { MessageComponent } from './component/message/message.component';\nimport { ValidationComponent } from './component/form-fields/base/validation.component';\nimport { BooleanFieldComponent } from './component/form-fields/boolean-field/boolean-field.component';\nimport { LoadingBarComponent } from './component/loading-bar/loading-bar.component';\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from './service/guard.service';\nimport { PendingChangesGuard } from './service/pending-changes-guard';\n\nimport { AuthService } from './service/auth.service';\nimport { ProfileService } from './service/profile.service';\nimport { LocalizationService } from './service/localization.service';\nimport { ProgressService } from './service/progress.service';\nimport { EventService } from './service/event.service';\nimport { ModalStepIndicatorService } from './service/modal-step-indicator.service';\nimport { SessionService } from './service/session.service';\n\nimport { LocalizePipe } from './pipe/localize.pipe';\nimport { PhonePipe } from './pipe/phone.pipe';\n\nimport { OnlyNumber } from './directive/number-only.directive';\n\nimport { CgrHeaderComponent } from './component/header/header.component';\nimport { ProgressBarComponent } from './component/progress-bar/progress-bar.component';\nimport { LocalizeComponent } from './component/localize/localize.component';\nimport { ModalStepIndicatorComponent } from './component/modals/modal-step-indicator.component';\nimport { ProfileComponent } from './component/profile/profile.component';\n\nimport '../rxjs-extensions';\n\n@NgModule( {\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        ModalModule.forRoot(),\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        CollapseModule,\n        NgxPaginationModule,\n        PasswordStrengthBarModule,\n        CustomFormsModule\n    ],\n    declarations: [\n        LocalizeComponent,\n        BooleanFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        OnlyNumber,\n        ValidationComponent,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe\n    ],\n    exports: [\n        LocalizeComponent,\n        BooleanFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        OnlyNumber,\n        ValidationComponent,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    entryComponents: [\n        ErrorModalComponent,\n        SuccessModalComponent,\n        ConfirmModalComponent,\n        ModalStepIndicatorComponent,\n        ErrorMessageComponent,\n        LoadingBarComponent,\n        ProfileComponent\n    ]\n} )\nexport class SharedModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SharedModule,\n            providers: [\n                CookieService,\n                AuthService,\n                SessionService,\n                ProfileService,\n                LocalizationService,\n                ModalStepIndicatorService,\n                EventService,\n                ProgressService,\n                AdminGuard,\n                MaintainerGuard,\n                ContributerGuard,\n                AuthGuard,\n                PendingChangesGuard\n            ]\n        };\n    }\n}\n","import { Role } from \"../../admin/model/account\";\n\n///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\nexport class Profile {\n  oid: string;\n  username: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  changePassword: boolean;\n}","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component({\n  \n  selector: 'localize',\n  templateUrl: './localize.component.html',\n  styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n  @Input() key: string;\n  text: string;\n    \n  constructor(private service: LocalizationService) { }\n\n  ngOnInit(): void {\n    this.text = this.service.decode(this.key);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '../model/user';\nimport { Locale } from '../../admin/model/localization-manager';\nimport { RoleBuilder, RegistryRole, RegistryRoleType } from '../model/core';\n\n@Injectable()\nexport class AuthService {\n  private user:User = {\n    loggedIn:false,\n    userName:'',\n    roles:[],\n    roleDisplayLabels:[],\n    version:\"0\",\n    installedLocales: []\n  };\n\n  constructor( private service: CookieService ) {\n    let cookie = service.get( 'user' );\n\n    if ( this.service.check( \"user\" ) && cookie != null && cookie.length > 0 ) {\n      let cookieData: string = this.service.get( \"user\" )\n      let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n      \n      this.buildFromCookieJson(cookieDataJSON);\n    }\n  }\n  \n  buildFromCookieJson(cookieDataJSON: any)\n  {\n    this.user.userName = cookieDataJSON.userName;\n    this.buildRolesFromCookie(cookieDataJSON);\n    this.user.loggedIn = cookieDataJSON.loggedIn;\n    this.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n    this.user.version = cookieDataJSON.version;\n    this.user.installedLocales = cookieDataJSON.installedLocales;\n  }\n  \n  buildRolesFromCookie(cookieDataJSON: any)\n  {\n    this.user.roles = [];\n    let roles: string[] = cookieDataJSON.roles;\n  \n    for (let i = 0; i < roles.length; ++i)\n    {\n      let role: RegistryRole = RoleBuilder.buildFromRoleName(roles[i]);\n    \n      if (role != null)\n      {\n        this.user.roles.push(role);\n      }\n    }\n  }\n  \n  isLoggedIn():boolean {\n    return this.user.loggedIn;\n  }\n  \n  setUser(cookieDataJSON: any):void {\n    this.buildFromCookieJson(cookieDataJSON);    \n  }\n\n  removeUser(): void {\n    this.user = {\n      loggedIn:false,\n      userName:'',\n      roles:[],\n      roleDisplayLabels:[],\n      version:\"0\",\n      installedLocales: []\n    };\n  }\n  \n  // Legacy Accessors:\n  isAdmin(): boolean {\n    return this.isSRA() || this.isRA();\n  }\n  \n  isMaintainer(): boolean {\n    return this.isRM();\n  }\n  \n  isContributer(): boolean {\n    return this.isRC();\n  }\n  \n\n  isSRA(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.SRA) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  isRA(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RA) {\n        return true;\n      }\n      else if (role.roleName.indexOf('commongeoregistry.RegistryAdministrator') !== -1\n               || role.roleName.indexOf( \"cgr.RegistryAdministrator\" ) !== -1) // Legacy support\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  isRM(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RM) {\n        return true;\n      }\n      else if (role.roleName.indexOf('commongeoregistry.RegistryMaintainer') !== -1\n               || role.roleName.indexOf( \"cgr.RegistryMaintainer\" ) !== -1) // Legacy support\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  isRC(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RC) {\n        return true;\n      }\n      else if (role.roleName.indexOf('commongeoregistry.RegistryContributor') !== -1\n               || role.roleName.indexOf( \"cgr.RegistryContributor\" ) !== -1) // Legacy support\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  // Returns all organization codes that the current user participates in.\n  // If the user is an SRA then this method will return an empty string array.\n  getMyOrganizations(): string[] {\n    let orgCodes: string[] = [];\n  \n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RC\n          || role.type === RegistryRoleType.RM\n          || role.type === RegistryRoleType.RA) {\n        orgCodes.push(role.orgCode);\n      }\n    }\n    \n    return orgCodes;\n  }\n  \n  getUsername(): string {\n    return this.user.userName;\n  }\n\n  getRoles(): any {\n    return this.user.roles;\n  }\n\n  getRoleDisplayLabelsArray(): any {\n    return this.user.roleDisplayLabels;\n  }\n  \n  getRoleDisplayLabels(): string {\n    let str = \"\";\n    for (let i = 0; i < this.user.roleDisplayLabels.length; ++i)\n    {\n      let displayLabel = this.user.roleDisplayLabels[i]; \n    \n      if (displayLabel === \"Administrator\")\n      {\n        continue;\n        // It's OK to hardcode to a display label here because the end user can't change it anyway.\n        // Is it ideal? No. But sometimes it's better to get software out quicker than to spend forever\n        // on something that nobody will ever see.\n      }\n    \n      str = str + displayLabel;\n      \n      if (i < this.user.roleDisplayLabels.length-1)\n      {\n        str = str + \",\";\n      }\n    }\n  \n    return str;\n  }\n  \n  getVersion(): string {\n    return this.user.version;\n  }\n\n  getLocales(): any[] {\n    return this.user.installedLocales;\n  }\n}\n","{{text}}"],"sourceRoot":""}