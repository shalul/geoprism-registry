{"version":3,"sources":["webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/component/index.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/service/index.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.html","webpack:///./src/app/shared/service/external-system.service.ts","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/service/organization.service.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/component/error-handler/error-handler.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.ts","webpack:///./src/app/shared/component/localize/convert-key-label.component.html","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/shared/component/form-fields/base/validation.component.ts","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/model/profile.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/service/auth.service.ts"],"names":["service","transform","value","this","decode","LocalizePipe","components","ErrorHandler","CgrHeaderComponent","LoadingBarComponent","LocalizeComponent","ErrorMessageComponent","MessageComponent","ConfirmModalComponent","ErrorModalComponent","ModalStepIndicatorComponent","SuccessModalComponent","PasswordStrengthBarComponent","ProfileComponent","ProgressBarComponent","listeners","registerListener","listener","push","deregisterListener","indexOfItem","indexOf","splice","start","complete","EventService","modalService","profileService","localizationService","loggedIn","context","acp","isAdmin","isMaintainer","isContributor","isContributer","locales","getLocales","filter","locale","getLocale","shouldShowMenuItem","item","hasExactRole","RegistryRoleType","SRA","RA","RM","RC","logout","window","location","href","getUsername","setLocale","then","reload","account","get","profile","bsModalRef","show","backdrop","class","content","colors","measureStrength","pass","score","letters","i","length","variations","digits","test","lower","upper","nonWords","variationCount","check","Math","trunc","getColor","idx","col","ngOnChanges","changes","password","currentValue","setBarColors","c","count","_n","router","canActivate","route","state","navigate","AdminGuard","MaintainerGuard","ContributerGuard","isLoggedIn","AuthGuard","authService","_profile","oid","username","firstName","lastName","email","changePassword","roles","getRoles","getRolesForUser","onSubmit","apply","hide","onChangePassword","getRolesArray","onRoleIdsUpdate","event","console","log","cancel","unlock","services","AuthService","ExternalSystemService","LocalizationService","ModalStepIndicatorService","OrganizationService","PendingChangesGuard","ProfileService","ProgressService","SessionService","modalStepIndicatorService","stepSubscription","modalStepChange","subscribe","stepConfig","ngOnInit","ngOnDestroy","unsubscribe","localizeService","message","submitText","cancelText","type","ModalTypes","warning","onConfirm","Subject","onCancel","confirm","next","data","showIndicator","prog","current","total","description","progress","http","eventService","getExternalSystems","pageNumber","pageSize","params","HttpParams","set","toString","pipe","finalize","toPromise","getExternalSystem","applyExternalSystem","system","headers","HttpHeaders","post","JSON","stringify","removeExternalSystem","parser","Globalize","numberParser","formatter","numberFormatter","registry","setLocales","addLocale","create","localizedValue","localeValues","forEach","parseNumber","formatNumber","number","Number","localize","bundle","key","com","runwaysdk","Localize","index","lastIndexOf","temp","slice","modalStepChangedSource","asObservable","getStepConfig","setStepConfig","config","getStep","step","setStep","getOrganizations","updateOrganization","json","newOrganization","removeOrganization","code","canDeactivate","component","confirmRet","afterDeactivate","userOID","login","user","setUser","response","LocaleValue","Organization","ExternalSystem","OAuthServer","PageResult","LocalizedValue","buildFromRoleName","roleName","RegistryRole","roleSplit","split","orgCode","roleSuffix","gotCode","AC","RoleBuilder","geoObjectTypeCode","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors","validate","MustMatchDirective","provide","NG_VALIDATORS","useExisting","multi","getMessageFromError","err","unspecified","errJson","error","msg","localizedMessage","includes","showErrorAsDialog","HttpErrorResponse","status","forRoot","ngModule","SharedModule","providers","CookieService","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","ModalModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","ConvertKeyLabel","BooleanFieldComponent","OnlyNumber","ValidationComponent","PhonePipe","text","StepConfig","Step","valueChange","EventEmitter","localizeLabelKey","label","disable","change","toggle","emit","el","onKeyDown","e","keyCode","ctrlKey","shiftKey","preventDefault","args","country","phone","Profile","Object","keys","replace","onError","onMessage","userName","roleDisplayLabels","version","installedLocales","cookie","cookieData","cookieDataJSON","parse","buildFromCookieJson","buildRolesFromCookie","role","removeUser","isSRA","isRA","isRM","isRC","roleType","isOrganizationRA","isGeoObjectTypeRM","isGeoObjectTypeRC","getMyOrganizations","orgCodes","__getRoleFromRoleName","nameArr","getRoleDisplayLabelsArray","getRoleDisplayLabels","str","displayLabel","getVersion"],"mappings":"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AGA,6BAGA,6BAIA,6BAGA,6BAGA,6BAGF,kB,uBA7BM,+DAGA,+DAGA,+DAIA,8DAGA,8DAGA,8DAIA,kFAGA,kFAGA,mF,0GA7PpB,0BACE,yBAEA,+BAA+E,kIAC7E,+BACE,4BACE,yBACE,4BACF,iBACF,iBAEA,4BACE,4BACE,6BACE,6BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,8GAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,iHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,gHAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,mHAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,mCAAmB,0GAAnB,iBACF,iBACA,gCAGF,iBACF,iBAEE,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBACA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,+GAAnB,iBACF,iBACF,iBACF,iBAGF,6BACE,0BACE,8BACF,iBACF,iBAEA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BACE,8BACE,gCAAmB,6GAAnB,iBACF,iBACF,iBACF,iBAEA,gCAaA,gCAaA,gCAkCA,6BACE,6BACE,6BACE,8BACF,iBACF,iBACA,6BAEE,gCACE,6BACE,0BACI,0BAAI,8BAA4D,iBAChE,0BAAI,8BAAoE,iBACxE,0BAAI,8BAAqE,iBAC7E,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","file":"0.chunk.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { LocalizationService } from '@shared/service';\n\n@Pipe({name: 'localize'})\nexport class LocalizePipe implements PipeTransform {\n  constructor(private service: LocalizationService) { }\n\t\n  transform(value: string): string {\n    return this.service.decode(value);\n  }\n}\n\n","import { ErrorHandler } from './error-handler/error-handler';\nimport { CgrHeaderComponent } from './header/header.component';\nimport { LoadingBarComponent } from './loading-bar/loading-bar.component';\nimport { LocalizeComponent } from './localize/localize.component';\nimport { ErrorMessageComponent } from './message/error-message.component';\nimport { MessageComponent } from './message/message.component';\nimport { ConfirmModalComponent } from './modals/confirm-modal.component';\nimport { ErrorModalComponent } from './modals/error-modal.component';\nimport { ModalStepIndicatorComponent } from './modals/modal-step-indicator.component';\nimport { SuccessModalComponent } from './modals/success-modal.component';\nimport { PasswordStrengthBarComponent } from './password-strength-bar/password-strength-bar.component';\nimport { ProfileComponent } from './profile/profile.component';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\n\nexport const components: any[] = [\n\tErrorHandler,\n\tCgrHeaderComponent,\n\tLoadingBarComponent,\n\tLocalizeComponent,\n\tErrorMessageComponent,\n\tMessageComponent,\n\tConfirmModalComponent,\n\tErrorModalComponent,\n\tModalStepIndicatorComponent,\n\tSuccessModalComponent,\n\tPasswordStrengthBarComponent,\n\tProfileComponent,\n\tProgressBarComponent\n];\n\nexport * from './error-handler/error-handler';\nexport * from './header/header.component';\nexport * from './loading-bar/loading-bar.component';\nexport * from './localize/localize.component';\nexport * from './message/error-message.component';\nexport * from './message/message.component';\nexport * from './modals/confirm-modal.component';\nexport * from './modals/error-modal.component';\nexport * from './modals/modal-step-indicator.component';\nexport * from './modals/success-modal.component';\nexport * from './password-strength-bar/password-strength-bar.component';\nexport * from './profile/profile.component';\nexport * from './progress-bar/progress-bar.component';\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var acp;\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n    private listeners: IEventListener[] = [];\n\n    public registerListener( listener: IEventListener ): void {\n        this.listeners.push( listener );\n    }\n\n    public deregisterListener( listener: IEventListener ): boolean {\n        let indexOfItem = this.listeners.indexOf( listener );\n\n        if ( indexOfItem === -1 ) {\n            return false;\n        }\n\n        this.listeners.splice( indexOfItem, 1 );\n\n        return true;\n    }\n\n    public start(): void {\n        for ( const listener of this.listeners ) {\n            listener.start();\n        }\n    }\n\n    public complete(): void {\n        for ( const listener of this.listeners ) {\n            listener.complete();\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ProfileComponent } from '../profile/profile.component';\n\nimport { AuthService, ProfileService, LocalizationService } from '@shared/service';\n\nimport { RegistryRoleType } from '@shared/model/core';\n\ndeclare var acp: string;\ndeclare var registry: any\n\n@Component({\n\n\tselector: 'cgr-header',\n\ttemplateUrl: './header.component.html',\n\tstyleUrls: []\n})\nexport class CgrHeaderComponent {\n\tcontext: string;\n\tisAdmin: boolean;\n\tisMaintainer: boolean;\n\tisContributor: boolean;\n\tbsModalRef: BsModalRef;\n\n\tlocales: string[]\n\tlocale: string\n\n\t@Input() loggedIn: boolean = true;\n\n\tconstructor(\n\t\tprivate modalService: BsModalService,\n\t\tprivate profileService: ProfileService,\n\t\tprivate service: AuthService,\n\t\tlocalizationService: LocalizationService\n\t) {\n\t\tthis.context = acp;\n\t\tthis.isAdmin = service.isAdmin();\n\t\tthis.isMaintainer = this.isAdmin || service.isMaintainer();\n\t\tthis.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n\n\t\tthis.locales = localizationService.getLocales().filter(locale => locale !== 'defaultLocale');\n\t\tthis.locale = localizationService.getLocale();\n\t\t\n\t\tif(this.locales.indexOf(this.locale) === -1) {\n\t\t\tthis.locale = '';\n\t\t}\n\t}\n\n\tshouldShowMenuItem(item: string): boolean {\n\t\tif (item === \"HIERARCHIES\") {\n\t\t\treturn true;\n\t\t}\n\t\telse if (item === \"LISTS\") {\n\t\t\t//return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC) || this.service.hasExactRole(RegistryRoleType.AC);\n\t\t\treturn true;\n\t\t}\n\t\telse if (this.service.hasExactRole(RegistryRoleType.SRA)) {\n\t\t\treturn true;\n\t\t}\n\t\telse if (item === \"IMPORT\") {\n\t\t\treturn this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n\t\t}\n\t\telse if (item === \"SCHEDULED-JOBS\") {\n\t\t\treturn this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n\t\t}\n\t\telse if (item === \"NAVIGATOR\") {\n\t\t\treturn this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n\t\t}\n\t\telse if (item === \"CHANGE-REQUESTS\") {\n\t\t\treturn this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n\t\t}\n\t\telse if (item === \"TASKS\") {\n\t\t\treturn this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n\t\t}\n\t\telse if (item === \"CONFIGS\") {\n\t\t\treturn this.service.hasExactRole(RegistryRoleType.RA);\n\t\t}\n\t\telse if (item === \"SETTINGS\") {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tlogout(): void {\n\n\t\twindow.location.href = acp + '/session/logout';\n\n\t\t//        this.sessionService.logout().then( response => {\n\t\t//            this.router.navigate( ['/login'] );\n\t\t//        } );\n\t}\n\n\tgetUsername() {\n\t\tlet name: string = this.service.getUsername();\n\n\t\treturn name;\n\t}\n\n\tsetLocale() {\n\t\tthis.profileService.setLocale(this.locale).then(() => {\n\t\t\t// Refresh the page\t\t\t\n\t\t\twindow.location.reload();\n\t\t});\n\t}\n\n\taccount(): void {\n\t\tthis.profileService.get().then(profile => {\n\t\t\tthis.bsModalRef = this.modalService.show(ProfileComponent, { backdrop: 'static', class: 'gray modal-lg' });\n\t\t\tthis.bsModalRef.content.profile = profile;\n\t\t});\n\t}\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default navbar-fixed-top\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n       <ul *ngIf=\"loggedIn\" class=\"nav navbar-nav navbar-right\"> \n         <li>\n            \n           <a (click)=\"account()\" class=\"navbar-username\">\n           <!-- <div>Logged in as</div> -->\n             <div>{{getUsername()}}</div>\n           </a>                      \n         </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"shouldShowMenuItem('HIERARCHIES')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"shouldShowMenuItem('LISTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('IMPORT')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('SCHEDULED-JOBS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/scheduled-jobs\" routerLinkActive=\"active\"><localize key=\"scheduledjobs.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('NAVIGATOR')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/location-manager\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('CHANGE-REQUESTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('TASKS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/tasks\" routerLinkActive=\"active\"><localize key=\"header.tasks\"></localize></a></li>\n                <!-- <li *ngIf=\"shouldShowMenuItem('CONFIGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/synchronization-configs\" routerLinkActive=\"active\"><localize key=\"synchronization.config.manager\"></localize></a></li> -->\n                \n                <hr>\n                <li *ngIf=\"shouldShowMenuItem('SETTINGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/settings\" routerLinkActive=\"active\"><localize key=\"settings.menu\"></localize> </a></li>\n                \n                <div *ngIf=\"locales.length > 0\" style=\"padding: 0 20px;\">\n                  <hr>\n<!--                     <span><localize key=\"userDashboards.setLocale\"></localize></span> -->\n\n                    <label class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"default\" [value]=\"''\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span><localize key=\"localization.default.label\"></localize></span>\n                    </label>\n                    <label *ngFor=\"let l of locales\" class=\"radio\" style=\"font-weight: inherit;\">\n                      <input class=\"inline-radio-input\" type=\"radio\" name=\"{{l}}\" [value]=\"l\" (change)=\"setLocale()\" [(ngModel)]=\"locale\">\n                      <span>{{l}}</span>\n                    </label>\n                </div>\n                \n                <!-- <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li> -->\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n         \n        \n       </ul>\n       \n       \n    </div>\n  </nav>\n</header>\n","\nimport { Component, OnChanges, Input, SimpleChange } from '@angular/core';\n\n@Component({\n\tselector: 'password-strength-bar',\n\ttemplateUrl: './password-strength-bar.component.html',\n\tstyleUrls: ['./password-strength-bar.component.css']\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n\t@Input() passwordToCheck: string;\n\tbar0: string;\n\tbar1: string;\n\tbar2: string;\n\tbar3: string;\n\tbar4: string;\n\n\tprivate colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n\tprivate static measureStrength(pass: string) {\n\t\tlet score = 0;\n\t\t// award every unique letter until 5 repetitions  \n\t\tlet letters = {};\n\t\tfor (let i = 0; i < pass.length; i++) {\n\t\t\tletters[pass[i]] = (letters[pass[i]] || 0) + 1;\n\t\t\tscore += 5.0 / letters[pass[i]];\n\t\t}\n\t\t// bonus points for mixing it up  \n\t\tlet variations = {\n\t\t\tdigits: /\\d/.test(pass),\n\t\t\tlower: /[a-z]/.test(pass),\n\t\t\tupper: /[A-Z]/.test(pass),\n\t\t\tnonWords: /\\W/.test(pass),\n\t\t};\n\n\t\tlet variationCount = 0;\n\t\tfor (let check in variations) {\n\t\t\tvariationCount += (variations[check]) ? 1 : 0;\n\t\t}\n\t\tscore += (variationCount - 1) * 10;\n\t\treturn Math.trunc(score);\n\t}\n\n\tprivate getColor(score: number) {\n\t\tlet idx = 0;\n\t\tif (score > 90) {\n\t\t\tidx = 4;\n\t\t} else if (score > 70) {\n\t\t\tidx = 3;\n\t\t} else if (score >= 40) {\n\t\t\tidx = 2;\n\t\t} else if (score >= 20) {\n\t\t\tidx = 1;\n\t\t}\n\t\treturn {\n\t\t\tidx: idx + 1,\n\t\t\tcol: this.colors[idx]\n\t\t};\n\t}\n\n\tngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n\t\tvar password = changes['passwordToCheck'].currentValue;\n\t\tthis.setBarColors(5, '#DDD');\n\t\tif (password) {\n\t\t\tlet c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n\t\t\tthis.setBarColors(c.idx, c.col);\n\t\t}\n\t}\n\tprivate setBarColors(count, col) {\n\t\tfor (let _n = 0; _n < count; _n++) {\n\t\t\tthis['bar' + _n] = col;\n\t\t}\n\t}\n\n}  \n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport { AuthService} from './auth.service';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()  || this.service.isContributer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isLoggedIn()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/login' ]);\n    \n    return false;\n  }\n}\n\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, Input} from '@angular/core';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Profile } from '@shared/model/profile';\nimport { AuthService, ProfileService } from '@shared/service';\nimport { Role } from '../../../admin/model/account';\n\n\n@Component({  \n  selector: 'profile',\n  templateUrl: './profile.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ProfileComponent {\n  public _profile:Profile = {\n    oid: '',\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    changePassword:false\n  };\n  \n  @Input('profile')\n  set profile(value: Profile) {\n    this._profile = value;\n    this.getRoles();\n  }\n  roles: Role[] = [];\n  \n  constructor(private service:ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) {}\n  \n\n  getRoles(): void {\n    this.service.getRolesForUser(this._profile.oid).then(roles => {\n      this.roles = roles;\n    });\n  }\n  \n  onSubmit():void {\n    if(!this._profile.changePassword) {\n      delete this._profile.password;\n    }\n\t  \n    this.service.apply(this._profile).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }\n\n  onChangePassword(): void {\n    this._profile.changePassword = !this._profile.changePassword;\n  }\n  \n  // getRoles():string {\n  //   return this.authService.getRoleDisplayLabels();\n  // }\n\n  getRolesArray(): any {\n    return this.authService.getRoles();\n  }\n\n  onRoleIdsUpdate(event: any): void {\n    console.log(event)\n  }\n  \n  cancel():void {\n    this.service.unlock(this._profile.oid).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n}\n","<div *ngIf=\"_profile\">\n  <message></message>\n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\" [mustMatch]=\"['password', 'certainPassword']\">\n    <fieldset>\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"profile.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.firstName\" name=\"firstname\" required>\n          </span>\n        </div>\n      </div>\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.lastName\" name=\"lastname\" required>\n          </span>\n        </div>\n      </div>\n      \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altFirstname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altFirstName\" name=\"altFirstname\">\n            </span>\n          </div>\n        </div>        \n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altLastname\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altLastName\" name=\"altLastname\">\n            </span>\n          </div>\n        </div>            \n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.phonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.phoneNumber\" name=\"phoneNumber\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.altPhonenumber\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.altPhoneNumber\" name=\"altPhoneNumber\">\n            </span>\n          </div>\n        </div>\n\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n          </span>\n          <div *ngIf=\"aemail.errors?.email\" style=\"float:none;\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n      </div>\n\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.position\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.position\" name=\"position\">\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.department\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"text\" [(ngModel)]=\"_profile.department\" name=\"department\">\n            </span>\n          </div>\n        </div>\n            \n\n      <div class=\"heading text-center\">\n        <h1>\n          <localize key=\"account.info.heading\"></localize>\n        </h1>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.username\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.username\" name=\"username\" required>\n          </span>\n        </div>\n      </div>\n\n      <div *ngIf=\"_profile.externalSystemOid != null && _profile.externalSystemOid !== ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.profile.oauth\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <label>\n            <localize key=\"account.profile.isOauth\"></localize>\n          </label>\n        </div>\n      </div>\n      \n      <div *ngIf=\"_profile.externalSystemOid == null || _profile.externalSystemOid === ''\" class=\"row-holder\">\n        <div class=\"label-holder\">\n        </div>\n        <div class=\"holder\">\n          <!-- <boolean-field [(value)]=\"profile.changePassword\"></boolean-field> -->\n          <div style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!_profile.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"_profile.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"_profile.changePassword\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.password\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" [(ngModel)]=\"_profile.password\" name=\"password\" #password=\"ngModel\" required\n                minlength=\"5\" maxlength=\"50\">\n              <password-strength-bar [passwordToCheck]=\"_profile.password\">\n              </password-strength-bar>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.certainPassword\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" />\n            </span>\n            <div *ngIf=\"certainPassword.errors?.mustMatch\" style=\"float:none;\" class=\"inline-error-message\">\n              <localize key=\"account.certainPassword.validation\"></localize>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th><localize key=\"profile.roles.role.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.organization.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.geoobjecttype.table.heading\"></localize></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let role of roles\">\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.geoObjectTypeLabel.localizedValue}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- <ul>\n            <li *ngFor=\"let role of getRolesArray()\">{{role}}</li>\n          </ul> -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\"\n              [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n\n</div>\n","import { AuthService } from './auth.service';\nimport { EventService } from './event.service';\nimport { ExternalSystemService } from './external-system.service';\nimport { AdminGuard, AuthGuard, ContributerGuard, MaintainerGuard } from './guard.service';\nimport { LocalizationService } from './localization.service';\nimport { ModalStepIndicatorService } from './modal-step-indicator.service';\nimport { OrganizationService } from './organization.service';\nimport { PendingChangesGuard } from './pending-changes-guard';\nimport { ProfileService } from './profile.service';\nimport { ProgressService } from './progress.service';\nimport { SessionService } from './session.service';\n\nexport const services: any[] = [\n\tAuthService,\n\tEventService,\n\tExternalSystemService,\n\tAdminGuard,\n\tAuthGuard,\n\tContributerGuard,\n\tMaintainerGuard,\n\tLocalizationService,\n\tModalStepIndicatorService,\n\tOrganizationService,\n\tPendingChangesGuard,\n\tProfileService,\n\tProgressService,\n\tSessionService\n];\n\nexport * from './auth.service';\nexport * from './event.service';\nexport * from './external-system.service';\nexport * from './guard.service';\nexport * from './localization.service';\nexport * from './modal-step-indicator.service';\nexport * from './organization.service';\nexport * from './pending-changes-guard';\nexport * from './profile.service';\nexport * from './progress.service';\nexport * from './session.service';\n","import { Component } from '@angular/core';\nimport { ModalStepIndicatorService } from '@shared/service';\n\nimport { Step, StepConfig } from '@shared/model/modal';\nimport { Subscription } from 'rxjs';\n\n\n@Component( { \n    selector: 'modal-step-indicator',\n    templateUrl: './modal-step-indicator.component.html',\n    styleUrls: ['./modal-step-indicator.css']\n} )\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor( private modalStepIndicatorService: ModalStepIndicatorService ) { \n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe( stepConfig => {\n            this.stepConfig = stepConfig;\n        })\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'error-message',\n    templateUrl: './error-message.component.html',\n    styleUrls: ['./error-message.css']\n} )\nexport class ErrorMessageComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( private localizeService: LocalizationService ) { }\n}\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LocalizationService } from '@shared/service';\nimport { ModalTypes } from '@shared/model/modal';\n\n\n@Component( {\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./modal.css']\n} )\nexport class ConfirmModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n    \n    /*\n     * Called on cancel\n     */\n    public onCancel: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n        this.onCancel = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n    \n    cancel(): void {\n        this.bsModalRef.hide();\n        this.onCancel.next( this.data );\n    }\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"cancel()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>{{cancelText}}</span>\n          </button>\n          <button type=\"button\" (click)=\"confirm()\"\n            [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n            aria-disabled=\"false\">\n            <span>{{submitText}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { LocalizationService } from '@shared/service';\n\n@Component( {\n    selector: 'error-modal',\n    templateUrl: './error-modal.component.html',\n    styleUrls: ['./error-modal.css']\n} )\nexport class ErrorModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { LocalizationService } from '@shared/service';\n\n@Component({\n\tselector: 'success-modal',\n\ttemplateUrl: './success-modal.component.html',\n\tstyleUrls: ['./success-modal.css']\n})\nexport class SuccessModalComponent implements OnInit {\n    /*\n     * Message\n     */\n\t@Input() message: string;\n\n\tconstructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.message = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n\t}\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { Progress } from '@shared/model/progress';\nimport { ProgressService, IProgressListener } from '@shared/service';\n\n@Component({\n  \n  selector: 'progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styles: [\n    '.progress-overlay { background-color: #CCCCCC; position: absolute; display: block;opacity: 0.8;z-index: 99999 !important;}',\n    '.progress-div { width: 100%; margin-left: 0; padding-left: 25%; padding-right: 25%; margin-top: 30% }'\n  ]\n})\nexport class ProgressBarComponent implements OnInit, IProgressListener {\n  public showIndicator: boolean = true;\n\n  public prog:Progress = {\n    current:0,\n    total:1,\n    description:\"Initializing\"\n  };\n\n  constructor(private service: ProgressService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.prog = {\n      current:0,\n      total:1,\n      description:\"Initializing\"\n    };\n    \n    this.showIndicator = true;\n  }\n  \n  progress(progress:Progress):void {\n    this.prog = progress;\n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"progress-overlay\" style=\"height: 100%; width: 100%;\">\n  <div class=\"progress-div\">\n    <progressbar class=\"progress-striped active\" [max]=\"prog.total\" [value]=\"prog.current\"><i>{{prog.description}}</i></progressbar>\n  </div>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service'\n\nimport { ExternalSystem, PageResult } from '@shared/model/core'\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ExternalSystemService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetExternalSystems(pageNumber: number, pageSize:number): Promise<PageResult<ExternalSystem>> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'pageNumber', pageNumber.toString() );\n        params = params.set( 'pageSize', pageSize.toString() );\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<PageResult<ExternalSystem>>(acp + '/external-system/get-all', {params:params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tgetExternalSystem(oid:string): Promise<ExternalSystem> {\n\n        let params: HttpParams = new HttpParams();\n        params = params.set( 'oid', oid );\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.get<ExternalSystem>(acp + '/external-system/get', {params:params })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\tapplyExternalSystem(system: ExternalSystem): Promise<ExternalSystem> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<ExternalSystem>(acp + '/external-system/apply', JSON.stringify({ system: system }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\t\n\tremoveExternalSystem(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\tthis.eventService.start();\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/external-system/remove', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.eventService.complete();\n\t\t\t}))\n\t\t\t.toPromise();\n\t}\n\n\t\n\n}\n","import { Injectable } from '@angular/core';\nimport { LocalizedValue } from '@shared/model/core';\n\ndeclare var Globalize: any;\ndeclare var com: any\ndeclare var registry: any\n\n@Injectable()\nexport class LocalizationService {\n\n\tlocales: string[] = ['defaultLocale'];\n\tlocale: string;\n\n\tprivate parser: any = Globalize.numberParser();\n\tprivate formatter: any = Globalize.numberFormatter();\n\n\tconstructor() {\n\t\tthis.locales = registry.locales;\n\t\tthis.locale = registry.locale;\n\t}\n\n\tgetLocales(): string[] {\n\t\treturn this.locales;\n\t}\n\n\tgetLocale(): string {\n\t\treturn this.locale;\n\t}\n\n\tsetLocales(locales: string[]): void {\n\t\t// The installed locales are now read from the global registry value on load\n\t\t//\t\tthis.locales = locales;\n\t}\n\n\taddLocale(locale: string): void {\n\n\t\tif (this.locales.indexOf(locale) === -1) {\n\t\t\tthis.locales.push(locale);\n\t\t}\n\t}\n\n\tcreate(): LocalizedValue {\n\t\tconst value = { localizedValue: '', localeValues: [] } as LocalizedValue;\n\n\t\tthis.locales.forEach(locale => {\n\t\t\tvalue.localeValues.push({ locale: locale, value: '' });\n\t\t});\n\n\t\treturn value;\n\t}\n\n\tpublic parseNumber(value: string): number {\n\t\tif (value != null && value.length > 0) {\n\t\t\t//convert data from view format to model format\n\t\t\tvar number = this.parser(value);\n\n\t\t\treturn number;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic formatNumber(value: any): string {\n\t\tif (value != null) {\n\t\t\tvar number = value;\n\n\t\t\tif (typeof number === 'string') {\n\t\t\t\tif (number.length > 0 && Number(number)) {\n\t\t\t\t\tnumber = Number(value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//convert data from model format to view format\n\t\t\treturn this.formatter(number);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic localize(bundle: string, key: string): string {\n\t\treturn com.runwaysdk.Localize.localize(bundle, key);\n\t}\n\n\tpublic get(key: string): string {\n\t\treturn com.runwaysdk.Localize.get(key);\n\t}\n\n\tpublic decode(key: string): string {\n\t\tlet index = key.lastIndexOf('.');\n\n\t\tif (index !== -1) {\n\n\t\t\tlet temp = [key.slice(0, index), key.slice(index + 1)]\n\n\t\t\treturn this.localize(temp[0], temp[1]);\n\t\t}\n\t\telse {\n\t\t\treturn this.get(key);\n\t\t}\n\t}\n}\n","import { Injectable } from '@angular/core';\n// import { Subject } from 'rxjs'\nimport { Subject } from 'rxjs';\n\n\nimport { Step, StepConfig } from '@shared/model/modal';\n\n\ndeclare var acp: string;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    constructor(  ) { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n        \n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from '@shared/service';\n\nimport { Organization, PageResult } from '@shared/model/core';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class OrganizationService {\n\n\tconstructor(private http: HttpClient, private eventService: EventService) { }\n\n\tgetOrganizations(): Promise<Organization[]> {\n\n    this.eventService.start();\n\n    return this.http\n      .get<Organization[]>(acp + '/cgr/organizations/get-all')\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n  updateOrganization(json: any): Promise<Organization> {\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.eventService.start();\n\n    return this.http\n      .post<Organization>(acp + '/cgr/orgainization/update', JSON.stringify({ json: json }), { headers: headers })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n  newOrganization(json: any): Promise<any> {\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.eventService.start();\n\n    return this.http\n      .post<any>(acp + '/cgr/orgainization/create', JSON.stringify({ json: json }), { headers: headers })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n\n  removeOrganization(code: any): Promise<void> {\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    this.eventService.start();\n\n    return this.http\n      .post<any>(acp + '/cgr/orgainization/delete', JSON.stringify({ code: code }), { headers: headers })\n      .pipe(finalize(() => {\n        this.eventService.complete();\n      }))\n      .toPromise();\n  }\n}\n","import { CanDeactivate } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n  canDeactivate: () => boolean | Observable<boolean>;\n  afterDeactivate: (arg:boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n  canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n    if (!component.canDeactivate())\n    {\n      // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n      // when navigating away from your angular app, the browser will show a generic warning message\n      // see http://stackoverflow.com/a/42207299/7307355\n      var confirmRet = confirm('WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.');\n      \n      component.afterDeactivate(confirmRet);\n      \n      return confirmRet;\n    }\n    \n    return true;\n  }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\n\nimport { Profile } from '@shared/model/profile';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n\tconstructor(private http: HttpClient) { }\n\n\tget(): Promise<Profile> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\treturn this.http\n\t\t\t.post<Profile>(acp + '/registryaccount/get', { headers: headers })\n\t\t\t.toPromise();\n\t}\n\n\n\tapply(profile: Profile): Promise<Profile> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\treturn this.http\n\t\t\t.post<Profile>(acp + '/registryaccount/apply', JSON.stringify({ account: profile }), { headers: headers })\n\t\t\t.toPromise();\n\t}\n\n\tunlock(oid: string): Promise<void> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\treturn this.http\n\t\t\t.post<void>(acp + '/registryaccount/unlock', JSON.stringify({ oid: oid }), { headers: headers })\n\t\t\t.toPromise()\n\t}\n\n\tsetLocale(locale: string): Promise<any> {\n\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\t\treturn this.http\n\t\t\t.post<any>(acp + '/localization/set-locale', JSON.stringify({ locale: locale }), { headers: headers })\n\t\t\t.toPromise();\n\t}\n\n\tgetRolesForUser(userOID: string): Promise<any> {\n\t\tlet headers = new HttpHeaders({\n\t\t\t'Content-Type': 'application/json'\n\t\t});\n\n\n\t\treturn this.http\n\t\t\t.post<Profile>(acp + '/registryaccount/getRolesForUser', { userOID: userOID }, { headers: headers })\n\t\t\t.toPromise();\n\n\t}\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { Progress } from '@shared/model/progress';\n\nexport interface IProgressListener {\n  start(): void;\n  progress(progress:Progress):void;  \n  complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n  private listeners: IProgressListener[] = [];\n  \n  public constructor() {}\n  \n  public registerListener(listener: IProgressListener): void {\n   this.listeners.push(listener);\n  }\n  \n  public deregisterListener(listener: IProgressListener): boolean {\n    let indexOfItem = this.listeners.indexOf(listener);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this.listeners.splice(indexOfItem, 1);\n\n    return true;\n  }\n  \n  public start(): void {\n    for (const listener of this.listeners) {\n      listener.start();\n    }\n  }\n  \n  public progress(progress:Progress):void {\n    for (const listener of this.listeners) {\n      listener.progress(progress);\n    }\t  \n  }  \n  \n  public complete(): void {\n    for (const listener of this.listeners) {\n      listener.complete();\n    }\n  }  \n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from './event.service';\n\nimport { AuthService } from './auth.service';\nimport { User } from '@shared/model/user';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionService {\n\n    constructor( private service: EventService, private http: HttpClient, private authService: AuthService ) { }\n\n    login( username: string, password: string ): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n        return this.http\n            .post<User>( acp + '/session/login', JSON.stringify( { username: username, password: password } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.service.complete();\n\t\t\t}))\n            .toPromise()\n            .then(( user: User ) => {\n                this.authService.setUser( user );\n\n                return user;\n            } )\n    }\n    \n    logout(): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>( acp + '/session/logout', { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.service.complete();\n\t\t\t}))\n            .toPromise()\n            .then(( response: any ) => {\n                this.authService.setUser( null );\n\n                return response;\n            } )\n    }\n}\n","export interface MessageContainer {\n\tsetMessage(message: string);\n}\n\nexport class LocaleValue {\n\tlocale: string;\n\tvalue: string;\n\n\tconstructor(locale: string, value: string) {\n\t\tthis.locale = locale;\n\t\tthis.value = value;\n\t}\n}\n\nexport class Organization {\n\tcode: string;\n\tlabel: any;\n\tcontactInfo: any;\n}\n\nexport class ExternalSystem {\n\toid?: string;\n\tid: string;\n\ttype: string;\n\torganization: string;\n\tlabel: LocalizedValue;\n\tdescription: LocalizedValue;\n\tusername?: string;\n\tpassword?: string;\n\turl?: string;\n\tversion?: string;\n\toAuthServer?: OAuthServer;\n}\n\nexport class OAuthServer {\n  keyName?: string;\n  label?: LocalizedValue;\n  url?: string;\n  authorizationLocation: string;\n  tokenLocation: string;\n  profileLocation: string;\n  clientId: string;\n  secretKey: string;\n  serverType: string;\n}\n\nexport class PageResult<T> {\n\tcount: number;\n\tpageNumber: number;\n\tpageSize: number;\n\tresultSet: T[];\n\texternalSystems?: ExternalSystem[];\n}\n\nexport class LocalizedValue {\n\tlocalizedValue: string;\n\tlocaleValues: LocaleValue[];\n\n\tconstructor(localizedValue: string, localeValues: LocaleValue[]) {\n\t\tthis.localizedValue = localizedValue;\n\t\tthis.localeValues = localeValues;\n\t}\n}\n\nexport class RoleBuilder {\n\tstatic buildFromRoleName(roleName: string): RegistryRole {\n\t\tif (roleName === \"cgr.SRA\") {\n\t\t\treturn new RegistryRole(RegistryRoleType.SRA, \"\", \"\", \"cgr.SRA\");\n\t\t}\n\n\t\tlet roleSplit = roleName.split(\".\");\n\n\t\tlet orgCode: string = roleSplit[2];\n\n\t\tif (roleSplit.length === 4) {\n\t\t\treturn new RegistryRole(RegistryRoleType.RA, orgCode, \"\", roleName);\n\t\t}\n\t\telse if (roleSplit.length === 5) {\n\t\t\tlet roleSuffix: string = roleSplit[4];\n\n\t\t\tlet gotCode: string = roleSplit[3];\n\n\t\t\tif (roleSuffix === \"RM\") {\n\t\t\t\treturn new RegistryRole(RegistryRoleType.RM, orgCode, gotCode, roleName);\n\t\t\t}\n\t\t\telse if (roleSuffix === \"RC\") {\n\t\t\t\treturn new RegistryRole(RegistryRoleType.RC, orgCode, gotCode, roleName);\n\t\t\t}\n\t\t\telse if (roleSuffix === \"AC\") {\n\t\t\t\treturn new RegistryRole(RegistryRoleType.AC, orgCode, gotCode, roleName);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class RegistryRole {\n\ttype: RegistryRoleType;\n\torgCode: string;\n\tgeoObjectTypeCode: string;\n\troleName: string;\n\tdisplayLabel: string;\n\n\tconstructor(type: RegistryRoleType, orgCode: string, geoObjectTypeCode: string, roleName: string) {\n\t\tthis.type = type;\n\t\tthis.orgCode = orgCode;\n\t\tthis.geoObjectTypeCode = geoObjectTypeCode;\n\t\tthis.roleName = roleName;\n\t}\n}\n\nexport enum RegistryRoleType {\n\tSRA,\n\tRA,\n\tRM,\n\tRC,\n\tAC\n}\n","import { Directive, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n\treturn (formGroup: FormGroup) => {\n\t\tconst control = formGroup.controls[controlName];\n\t\tconst matchingControl = formGroup.controls[matchingControlName];\n\n\t\t// return null if controls haven't initialised yet\n\t\tif (!control || !matchingControl) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// return null if another validator has already found an error on the matchingControl\n\t\tif (matchingControl.errors && !matchingControl.errors.mustMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// set error on matchingControl if validation fails\n\t\tif (control.value !== matchingControl.value) {\n\t\t\tmatchingControl.setErrors({ mustMatch: true });\n\t\t} else {\n\t\t\tmatchingControl.setErrors(null);\n\t\t}\n\t}\n}\n\n@Directive({\n\tselector: '[mustMatch]',\n\tproviders: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\t@Input('mustMatch') mustMatch: string[] = [];\n\n\tvalidate(formGroup: FormGroup): ValidationErrors {\n\t\treturn MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n\t}\n}","\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { ErrorModalComponent } from '@shared/component';\n\nexport class ErrorHandler {\n    static getMessageFromError(err: any): string {\n    \n      var unspecified = \"An unspecified error has occurred. Please contact your technical support team.\";\n    \n      if (err == null)\n      {\n        return unspecified;\n      }\n      else\n      {\n        console.log(\"An error has occurred: \", err);\n      }\n      \n      let errJson = err;\n      \n      if (err.error != null && (typeof err.error === 'object'))\n      {\n        errJson = err.error;\n      }\n    \n      var msg = errJson.localizedMessage || errJson.message;\n      \n      if (msg == null)\n      {\n        return unspecified;\n      }\n      else if (msg.includes(\"##tferrormsg##\"))\n      {\n        var split = msg.split(\"##tferrormsg##\");\n        return split[2];\n      }\n      else\n      {\n        return msg;\n      }\n    }\n    \n    static showErrorAsDialog(err: any, modalService: BsModalService): BsModalRef {\n      \n      if (err instanceof HttpErrorResponse && err.status == 401)\n      {\n        return null;\n      }\n      \n      let bsModalRef = modalService.show(ErrorModalComponent, { backdrop: true });\n      \n      bsModalRef.content.message = ErrorHandler.getMessageFromError(err);\n      \n      return bsModalRef;\n      \n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { ErrorModalComponent } from './component/modals/error-modal.component';\nimport { SuccessModalComponent } from './component/modals/success-modal.component';\nimport { ConfirmModalComponent } from './component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from './component/message/error-message.component';\nimport { MessageComponent } from './component/message/message.component';\nimport { ValidationComponent } from './component/form-fields/base/validation.component';\nimport { BooleanFieldComponent } from './component/form-fields/boolean-field/boolean-field.component';\nimport { LoadingBarComponent } from './component/loading-bar/loading-bar.component';\nimport { PasswordStrengthBarComponent } from './component/password-strength-bar/password-strength-bar.component';\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from './service/guard.service';\nimport { PendingChangesGuard } from './service/pending-changes-guard';\n\nimport { AuthService } from './service/auth.service';\nimport { ProfileService } from './service/profile.service';\nimport { OrganizationService } from './service/organization.service';\nimport { ExternalSystemService } from './service/external-system.service';\nimport { LocalizationService } from './service/localization.service';\nimport { ProgressService } from './service/progress.service';\nimport { EventService } from './service/event.service';\nimport { ModalStepIndicatorService } from './service/modal-step-indicator.service';\nimport { SessionService } from './service/session.service';\n\nimport { LocalizePipe } from './pipe/localize.pipe';\nimport { PhonePipe } from './pipe/phone.pipe';\n\nimport { OnlyNumber } from './directive/number-only.directive';\nimport { MustMatchDirective } from './directive/must-match.directive';\n\nimport { CgrHeaderComponent } from './component/header/header.component';\nimport { ProgressBarComponent } from './component/progress-bar/progress-bar.component';\nimport { LocalizeComponent } from './component/localize/localize.component';\nimport { ConvertKeyLabel } from './component/localize/convert-key-label.component';\nimport { ModalStepIndicatorComponent } from './component/modals/modal-step-indicator.component';\nimport { ProfileComponent } from './component/profile/profile.component';\n\nimport '../rxjs-extensions';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\tModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule\n\t],\n\tdeclarations: [\n\t\tLocalizeComponent,\n\t\tConvertKeyLabel,\n\t\tBooleanFieldComponent,\n\t\tLoadingBarComponent,\n\t\tErrorMessageComponent,\n\t\tMessageComponent,\n\t\tConfirmModalComponent,\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tOnlyNumber,\n\t\tMustMatchDirective,\n\t\tValidationComponent,\n\t\tProgressBarComponent,\n\t\tModalStepIndicatorComponent,\n\t\tCgrHeaderComponent,\n\t\tProfileComponent,\n\t\tLocalizePipe,\n\t\tPhonePipe\n\t],\n\texports: [\n\t\tLocalizeComponent,\n\t\tConvertKeyLabel,\n\t\tBooleanFieldComponent,\n\t\tLoadingBarComponent,\n\t\tErrorMessageComponent,\n\t\tMessageComponent,\n\t\tConfirmModalComponent,\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tOnlyNumber,\n\t\tMustMatchDirective,\n\t\tValidationComponent,\n\t\tProgressBarComponent,\n\t\tModalStepIndicatorComponent,\n\t\tCgrHeaderComponent,\n\t\tProfileComponent,\n\t\tLocalizePipe,\n\t\tPhonePipe,\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule\n\t],\n\tentryComponents: [\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tConfirmModalComponent,\n\t\tModalStepIndicatorComponent,\n\t\tErrorMessageComponent,\n\t\tLoadingBarComponent,\n\t\tProfileComponent\n\t]\n})\nexport class SharedModule {\n\tstatic forRoot(): ModuleWithProviders<SharedModule> {\n\t\treturn {\n\t\t\tngModule: SharedModule,\n\t\t\tproviders: [\n\t\t\t\tCookieService,\n\t\t\t\tAuthService,\n\t\t\t\tSessionService,\n\t\t\t\tProfileService,\n\t\t\t\tOrganizationService,\n\t\t\t\tExternalSystemService,\n\t\t\t\tLocalizationService,\n\t\t\t\tModalStepIndicatorService,\n\t\t\t\tEventService,\n\t\t\t\tProgressService,\n\t\t\t\tAdminGuard,\n\t\t\t\tMaintainerGuard,\n\t\t\t\tContributerGuard,\n\t\t\t\tAuthGuard,\n\t\t\t\tPendingChangesGuard\n\t\t\t]\n\t\t};\n\t}\n}\n","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '@shared/service';\n\n@Component({\n  \n  selector: 'convert-key-label',\n  templateUrl: './convert-key-label.component.html',\n  styleUrls: []\n})\nexport class ConvertKeyLabel implements OnInit {\n  @Input() key: string;\n  text: string;\n    \n  constructor(private service: LocalizationService) { }\n\n  ngOnInit(): void {\n\tif(this.key === \"defaultLocale\"){\n\t\tthis.text = this.service.decode(\"localization.defaultLocal\");\n\t}\n\telse{\n\t\tthis.text = this.key;\n\t}\n  }\n}\n","{{text}}","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","import {Component, Input, Output, EventEmitter} from '@angular/core';\n\ndeclare var acp:string;\n\n@Component({    \n  selector: 'boolean-field',\n  templateUrl: './boolean-field.component.html',\n  styleUrls: ['./boolean-field.css']\n})\nexport class BooleanFieldComponent {\n\n  @Input() value:boolean = false;\n  @Output() public valueChange = new EventEmitter<boolean>();\n\n  @Input() localizeLabelKey:string = \"\"; // localization key used to localize in the component template\n  @Input() label:string = \"\"; // raw string input\n\n  @Input() disable:boolean = false;\n\n  /* You can pass a function in with (change)='function()' */\n  @Output() public change = new EventEmitter<any>();\n\n  constructor(){}\n  \n  toggle():void {\n    if(!this.disable){\n      this.value = !this.value;\n      \n      this.valueChange.emit(this.value);\n      this.change.emit(this.value);\n    }\n  }\n}","<div class=\"check-block\">\n  <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value, 'disabled': disable}\" ng-style=\"chkstyle\" class=\"chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]'\n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'validation',\n  template: `\n    <div class=\"validation\">\n      <div *ngFor=\"let message of messages\">{{message}}</div>\n    </div>\n  `,\n  styles: [`\n    .validation {\n      color: #999;\n      margin: 12px;\n    }`\n  ]\n})\nexport class ValidationComponent {\n  @Input() messages: Array<string>;\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { formatNumber, ParsedNumber } from 'libphonenumber-js';\n\n\n@Pipe({\n  name: 'phone'\n})\nexport class PhonePipe implements PipeTransform {\n\n  transform(value: ParsedNumber, args?: string): any {\n    if (!value) {\n      return value;\n    }\n\n    return formatNumber({ country: 'US', phone: value.toString() }, 'International');\n  }\n\n}\n","import { Role } from \"../../admin/model/account\";\n\n///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\nexport class Profile {\n\toid: string;\n\tusername: string;\n\tpassword: string;\n\tfirstName: string;\n\tlastName: string;\n\temail: string;\n\tchangePassword?: boolean;\n\tphoneNumber?: string;\n\taltFirstName?: string;\n\taltLastName?: string;\n\taltPhoneNumber?: string;\n\tposition?: string;\n\tdepartment?: string;\n  externalSystemOid?: string;\n}","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '@shared/service';\n\n@Component({\n\n\tselector: 'localize',\n\ttemplateUrl: './localize.component.html',\n\tstyleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n\t@Input() key: string;\n\t@Input() params: { [key: string]: string } = null;\n\n\ttext: string;\n\n\tconstructor(private service: LocalizationService) { }\n\n\tngOnInit(): void {\n\t\tthis.text = this.service.decode(this.key);\n\n\t\tif (this.params != null) {\n\t\t\tconst keys = Object.keys(this.params);\n\n\t\t\tkeys.forEach((key) => {\n\t\t\t\tif (this.params[key] != null) {\n\t\t\t\t\tthis.text = this.text.replace(key, this.params[key]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n","<span [innerHtml]=\"text\"></span>","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '@shared/service';\n\n@Component({\n  \n  selector: 'loading-bar',\n  templateUrl: './loading-bar.component.html',\n  styleUrls: ['./loading-bar.css']\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n  showIndicator: boolean = false;\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.showIndicator = true;    \n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '@shared/service';\n\n@Component({\n  \n  selector: 'message',\n  templateUrl: './message.component.html',\n  styles: [\n    '.error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}',\n    '.message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }'\n  ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\t\n  error: any = null;\n  \n  message: string = \"\";\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.error = null;\n  }\n  \n  complete(): void {\n  }  \n  \n  onError(error: any): void {\n    this.error = error;\n  }\n  \n  onMessage(msg: string): void {\n    this.message = msg;\n  }\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '@shared/model/user';\nimport { RoleBuilder, RegistryRole, RegistryRoleType } from '@shared/model/core';\n\n@Injectable()\nexport class AuthService {\n\n\tprivate user: User = {\n\t\tloggedIn: false,\n\t\tuserName: '',\n\t\troles: [],\n\t\troleDisplayLabels: [],\n\t\tversion: \"0\",\n\t\tinstalledLocales: []\n\t};\n\n\tconstructor(private service: CookieService) {\n\t\tlet cookie = service.get('user');\n\n\t\tif (this.service.check(\"user\") && cookie != null && cookie.length > 0) {\n\t\t\tlet cookieData: string = this.service.get(\"user\")\n\t\t\tlet cookieDataJSON: any = JSON.parse(cookieData);\n\n\t\t\tthis.buildFromCookieJson(cookieDataJSON);\n\t\t}\n\t}\n\n\tbuildFromCookieJson(cookieDataJSON: any) {\n\t\tthis.user.userName = cookieDataJSON.userName;\n\t\tthis.buildRolesFromCookie(cookieDataJSON);\n\t\tthis.user.loggedIn = cookieDataJSON.loggedIn;\n\t\tthis.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n\t\tthis.user.version = cookieDataJSON.version;\n\t\tthis.user.installedLocales = cookieDataJSON.installedLocales;\n\t}\n\n\tbuildRolesFromCookie(cookieDataJSON: any) {\n\t\tthis.user.roles = [];\n\t\tlet roles: string[] = cookieDataJSON.roles;\n\n\t\tfor (let i = 0; i < roles.length; ++i) {\n\t\t\tlet role: RegistryRole = RoleBuilder.buildFromRoleName(roles[i]);\n\n\t\t\tif (role != null) {\n\t\t\t\tthis.user.roles.push(role);\n\t\t\t}\n\t\t}\n\t}\n\n\tisLoggedIn(): boolean {\n\t\treturn this.user.loggedIn;\n\t}\n\n\tsetUser(cookieDataJSON: any): void {\n\t\tthis.buildFromCookieJson(cookieDataJSON);\n\t}\n\n\tremoveUser(): void {\n\t\tthis.user = {\n\t\t\tloggedIn: false,\n\t\t\tuserName: '',\n\t\t\troles: [],\n\t\t\troleDisplayLabels: [],\n\t\t\tversion: \"0\",\n\t\t\tinstalledLocales: []\n\t\t};\n\t}\n\n\t// Legacy Accessors:\n\tisAdmin(): boolean {\n\t\treturn this.isSRA() || this.isRA();\n\t}\n\n\tisMaintainer(): boolean {\n\t\treturn this.isSRA() || this.isRM();\n\t}\n\n\tisContributer(): boolean {\n\t\treturn this.isSRA() || this.isRC();\n\t}\n\n\t// Used to exactly identify a role. I.e. if we say we need RC, SRA doesn't count.\n\thasExactRole(roleType: RegistryRoleType) {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === roleType) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisSRA(): boolean {\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.SRA) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisRA(): boolean {\n\t\tif (this.isSRA()) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RA) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (role.roleName.indexOf('commongeoregistry.RegistryAdministrator') !== -1\n\t\t\t\t|| role.roleName.indexOf(\"cgr.RegistryAdministrator\") !== -1) // Legacy support\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisRM(): boolean {\n\t\tif (this.isSRA()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RM) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (role.roleName.indexOf('commongeoregistry.RegistryMaintainer') !== -1\n\t\t\t\t|| role.roleName.indexOf(\"cgr.RegistryMaintainer\") !== -1) // Legacy support\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tisOrganizationRA(orgCode: string): boolean {\n\t\tif (this.isSRA()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.orgCode === orgCode && role.type === RegistryRoleType.RA) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false; // this.isSRA();\n\t}\n\n\tisGeoObjectTypeRM(orgCode: string, gotCode: string): boolean {\n\t\tif (this.isSRA()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RM && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn this.isOrganizationRA(orgCode);\n\t}\n\n\tisGeoObjectTypeRC(orgCode: string, gotCode: string): boolean {\n\t\tif (this.isSRA()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RC && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn this.isGeoObjectTypeRM(orgCode, gotCode);\n\t}\n\n\tisRC(): boolean {\n\t\tif (this.isSRA()) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.RC) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse if (role.roleName.indexOf('commongeoregistry.RegistryContributor') !== -1\n\t\t\t\t|| role.roleName.indexOf(\"cgr.RegistryContributor\") !== -1) // Legacy support\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t// Returns all organization codes that the current user participates in.\n\t// If the user is an SRA then this method will return an empty string array.\n\tgetMyOrganizations(): string[] {\n\t\tlet orgCodes: string[] = [];\n\n\t\tfor (let i = 0; i < this.user.roles.length; ++i) {\n\t\t\tlet role: RegistryRole = this.user.roles[i];\n\n\t\t\tif (role.type === RegistryRoleType.SRA || role.type === RegistryRoleType.RC || role.type === RegistryRoleType.RM || role.type === RegistryRoleType.RA) {\n\t\t\t\torgCodes.push(role.orgCode);\n\t\t\t}\n\t\t}\n\n\t\treturn orgCodes;\n\t}\n\n\t__getRoleFromRoleName(roleName: string): string {\n\t\tlet nameArr = roleName.split(\".\");\n\n\t\treturn nameArr[nameArr.length - 1];\n\t}\n\n\tgetUsername(): string {\n\t\treturn this.user.userName;\n\t}\n\n\tgetRoles(): any {\n\t\treturn this.user.roles;\n\t}\n\n\tgetRoleDisplayLabelsArray(): any {\n\t\treturn this.user.roleDisplayLabels;\n\t}\n\n\tgetRoleDisplayLabels(): string {\n\t\tlet str = \"\";\n\t\tfor (let i = 0; i < this.user.roleDisplayLabels.length; ++i) {\n\t\t\tlet displayLabel = this.user.roleDisplayLabels[i];\n\n\t\t\tif (displayLabel === \"Administrator\") {\n\t\t\t\tcontinue;\n\t\t\t\t// It's OK to hardcode to a display label here because the end user can't change it anyway.\n\t\t\t\t// Is it ideal? No. But sometimes it's better to get software out quicker than to spend forever\n\t\t\t\t// on something that nobody will ever see.\n\t\t\t}\n\n\t\t\tstr = str + displayLabel;\n\n\t\t\tif (i < this.user.roleDisplayLabels.length - 1) {\n\t\t\t\tstr = str + \",\";\n\t\t\t}\n\t\t}\n\n\t\treturn str;\n\t}\n\n\tgetVersion(): string {\n\t\treturn this.user.version;\n\t}\n\n\tgetLocales(): any[] {\n\t\treturn this.user.installedLocales;\n\t}\n}\n"],"sourceRoot":""}