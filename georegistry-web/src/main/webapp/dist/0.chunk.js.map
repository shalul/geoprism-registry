{"version":3,"sources":["webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/model/core.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.ts","webpack:///./src/app/shared/component/password-strength-bar/password-strength-bar.component.html","webpack:///./src/app/shared/pipe/phone.pipe.ts","webpack:///./src/app/shared/directive/number-only.directive.ts","webpack:///./src/app/shared/directive/must-match.directive.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/form-fields/base/validation.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.ts","webpack:///./src/app/shared/component/progress-bar/progress-bar.component.html","webpack:///./src/app/shared/model/profile.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/service/auth.service.ts","webpack:///./src/app/shared/pipe/localize.pipe.ts"],"names":["service","showIndicator","ngOnInit","this","registerListener","ngOnDestroy","deregisterListener","start","complete","LoadingBarComponent","error","message","onError","onMessage","msg","MessageComponent","http","get","headers","HttpHeaders","post","acp","toPromise","apply","profile","JSON","stringify","account","unlock","oid","getRolesForUser","userOID","ProfileService","authService","login","username","password","pipe","finalize","then","user","setUser","logout","response","SessionService","modalStepChangedSource","Subject","modalStepChange","asObservable","getStepConfig","stepConfig","setStepConfig","config","next","getStep","step","setStep","ModalStepIndicatorService","listeners","listener","push","indexOfItem","indexOf","splice","progress","ProgressService","bsModalRef","localizeService","decode","ErrorModalComponent","sessionService","modalService","profileService","router","loggedIn","context","isAdmin","isMaintainer","isContributor","isContributer","shouldShowMenuItem","item","hasExactRole","RegistryRoleType","RA","RM","SRA","RC","window","location","href","getUsername","getRoleDisplayLabels","show","ProfileComponent","backdrop","class","content","CgrHeaderComponent","locale","value","LocaleValue","localizedValue","localeValues","LocalizedValue","buildFromRoleName","roleName","RegistryRole","roleSplit","split","orgCode","length","roleSuffix","gotCode","AC","RoleBuilder","type","geoObjectTypeCode","_profile","firstName","lastName","email","changePassword","roles","getRoles","onSubmit","hide","onChangePassword","getRolesArray","onRoleIdsUpdate","event","console","log","cancel","canActivate","route","state","navigate","AdminGuard","MaintainerGuard","ContributerGuard","isLoggedIn","AuthGuard","forRoot","ngModule","SharedModule","providers","CookieService","AuthService","LocalizationService","EventService","PendingChangesGuard","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","FileUploadModule","ModalModule","TreeModule","ContextMenuModule","BsDropdownModule","ButtonsModule","TypeaheadModule","ProgressbarModule","CollapseModule","NgxPaginationModule","LocalizeComponent","BooleanFieldComponent","ErrorMessageComponent","ConfirmModalComponent","SuccessModalComponent","PasswordStrengthBarComponent","OnlyNumber","MustMatchDirective","ValidationComponent","ProgressBarComponent","ModalStepIndicatorComponent","LocalizePipe","PhonePipe","submitText","cancelText","ModalTypes","warning","onConfirm","confirm","data","eventService","locales","parser","Globalize","numberParser","formatter","numberFormatter","getLocales","setLocales","create","forEach","parseNumber","formatNumber","number","Number","localize","bundle","key","com","runwaysdk","Localize","index","lastIndexOf","temp","slice","StepConfig","Step","valueChange","EventEmitter","localizeLabelKey","label","disable","change","toggle","emit","colors","measureStrength","pass","score","letters","i","variations","digits","test","lower","upper","nonWords","variationCount","check","Math","trunc","getColor","idx","col","ngOnChanges","changes","currentValue","setBarColors","c","count","_n","transform","args","country","phone","toString","el","onKeyDown","e","keyCode","ctrlKey","shiftKey","preventDefault","MustMatch","controlName","matchingControlName","formGroup","control","controls","matchingControl","errors","mustMatch","setErrors","validate","provide","NG_VALIDATORS","useExisting","multi","modalStepIndicatorService","stepSubscription","subscribe","unsubscribe","prog","current","total","description","Profile","canDeactivate","component","confirmRet","afterDeactivate","text","userName","roleDisplayLabels","version","installedLocales","cookie","cookieData","cookieDataJSON","parse","buildFromCookieJson","buildRolesFromCookie","role","removeUser","isSRA","isRA","isRM","isRC","roleType","isOrganizationRA","isGeoObjectTypeRM","isGeoObjectTypeRC","getMyOrganizations","orgCodes","__getRoleFromRoleName","nameArr","getRoleDisplayLabelsArray","str","displayLabel","getVersion"],"mappings":"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","file":"0.chunk.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'loading-bar',\n  templateUrl: './loading-bar.component.html',\n  styleUrls: ['./loading-bar.css']\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n  showIndicator: boolean = false;\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.showIndicator = true;    \n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'message',\n  templateUrl: './message.component.html',\n  styles: [\n    '.error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}',\n    '.message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }'\n  ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\t\n  error: any = null;\n  \n  message: string = \"\";\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.error = null;\n  }\n  \n  complete(): void {\n  }  \n  \n  onError(error: any): void {\n    this.error = error;\n  }\n  \n  onMessage(msg: string): void {\n    this.message = msg;\n  }\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\n\nimport { EventService } from './event.service';\n\nimport { Profile } from '../model/profile';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n    constructor( service: EventService, private http: HttpClient ) { }\n\n    get(): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/account/get', { headers: headers } )\n            .toPromise();\n    }\n\n\n    apply( profile: Profile ): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/registryaccount/apply', JSON.stringify( { account: profile } ), { headers: headers } )\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<void>( acp + '/account/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n            .toPromise()\n    }\n\n    getRolesForUser( userOID: string ): Promise<any> {\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n\n        return this.http\n            .post<Profile>( acp + '/registryaccount/getRolesForUser', {userOID: userOID}, { headers: headers } )\n            .toPromise();\n\n    }\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\n// import 'rxjs/add/operator/toPromise';\nimport { finalize } from 'rxjs/operators';\n\nimport { EventService } from './event.service';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../model/user';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionService {\n\n    constructor( private service: EventService, private http: HttpClient, private authService: AuthService ) { }\n\n    login( username: string, password: string ): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n        return this.http\n            .post<User>( acp + '/session/login', JSON.stringify( { username: username, password: password } ), { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.service.complete();\n\t\t\t}))\n            .toPromise()\n            .then(( user: User ) => {\n                this.authService.setUser( user );\n\n                return user;\n            } )\n    }\n\n    logout(): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>( acp + '/session/logout', { headers: headers } )\n\t\t\t.pipe(finalize(() => {\n\t\t\t\tthis.service.complete();\n\t\t\t}))\n            .toPromise()\n            .then(( response: any ) => {\n                this.authService.setUser( null );\n\n                return response;\n            } )\n    }\n}\n","import { Injectable } from '@angular/core';\n// import { Subject } from 'rxjs'\nimport { Subject } from 'rxjs';\n\n\nimport { Step, StepConfig } from '../model/modal';\n\n\ndeclare var acp: string;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    constructor(  ) { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n        \n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { Progress } from '../model/progress';\n\nexport interface IProgressListener {\n  start(): void;\n  progress(progress:Progress):void;  \n  complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n  private listeners: IProgressListener[] = [];\n  \n  public constructor() {}\n  \n  public registerListener(listener: IProgressListener): void {\n   this.listeners.push(listener);\n  }\n  \n  public deregisterListener(listener: IProgressListener): boolean {\n    let indexOfItem = this.listeners.indexOf(listener);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this.listeners.splice(indexOfItem, 1);\n\n    return true;\n  }\n  \n  public start(): void {\n    for (const listener of this.listeners) {\n      listener.start();\n    }\n  }\n  \n  public progress(progress:Progress):void {\n    for (const listener of this.listeners) {\n      listener.progress(progress);\n    }\t  \n  }  \n  \n  public complete(): void {\n    for (const listener of this.listeners) {\n      listener.complete();\n    }\n  }  \n}","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'error-modal',\n    templateUrl: './error-modal.component.html',\n    styleUrls: ['./error-modal.css']\n} )\nexport class ErrorModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ProfileComponent } from '../profile/profile.component';\n\nimport { AuthService } from '../../service/auth.service';\nimport { SessionService } from '../../service/session.service';\nimport { ProfileService } from '../../service/profile.service';\n\nimport { RegistryRoleType } from '../../model/core';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'cgr-header',\n    templateUrl: './header.component.html',\n    styleUrls: []\n} )\nexport class CgrHeaderComponent {\n    context: string;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    bsModalRef: BsModalRef;\n    \n    @Input() loggedIn: boolean = true;\n\n    constructor(\n        private sessionService: SessionService,\n        private modalService: BsModalService,\n        private profileService: ProfileService,\n        private router: Router,\n        private service: AuthService\n    ) {\n        this.context = acp;\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n    }\n    \n    shouldShowMenuItem(item: string): boolean {\n      if (item === \"HIERARCHIES\")\n      {\n        return true;\n      }\n      else if (item === \"LISTS\")\n      {\n        //return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC) || this.service.hasExactRole(RegistryRoleType.AC);\n        return true;\n      }\n      else if (item === \"IMPORT\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n      }\n      else if (item === \"SCHEDULED-JOBS\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n      }\n      else if (item === \"NAVIGATOR\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.SRA) || this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n      }\n      else if (item === \"CHANGE-REQUESTS\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM) || this.service.hasExactRole(RegistryRoleType.RC);\n      }\n      else if (item === \"TASKS\")\n      {\n        return this.service.hasExactRole(RegistryRoleType.RA) || this.service.hasExactRole(RegistryRoleType.RM);\n      }\n      else if (item === \"SETTINGS\")\n      {\n        return true;\n      }\n      else\n      {\n        return false;\n      }\n    }\n\n    logout(): void {\n        \n        window.location.href = acp + '/session/logout';\n        \n//        this.sessionService.logout().then( response => {\n//            this.router.navigate( ['/login'] );\n//        } );\n    }\n\n    getUsername() {\n        let role: string = this.service.getRoleDisplayLabels();\n        let name: string = this.service.getUsername();\n\n        return name;\n    }\n\n    account(): void {\n        this.profileService.get().then( profile => {\n            this.bsModalRef = this.modalService.show( ProfileComponent, { backdrop: 'static', class: 'gray modal-lg' } );\n            this.bsModalRef.content.profile = profile;\n        } );\n    }\n\n}\n","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default navbar-fixed-top\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n          \n       <ul *ngIf=\"loggedIn\" class=\"nav navbar-nav navbar-right\"> \n         <li>\n           <a (click)=\"account()\" class=\"navbar-username\">\n           <!-- <div>Logged in as</div> -->\n             <div>{{getUsername()}}</div>\n           </a>\n         </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"shouldShowMenuItem('HIERARCHIES')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"shouldShowMenuItem('LISTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('IMPORT')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('SCHEDULED-JOBS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/scheduled-jobs\" routerLinkActive=\"active\"><localize key=\"scheduledjobs.menu\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('NAVIGATOR')\" role=\"menuitem\"><a class=\"dropdown-item\" href=\"{{context}}/nav/management#/locations\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('CHANGE-REQUESTS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                <li *ngIf=\"shouldShowMenuItem('TASKS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/tasks\" routerLinkActive=\"active\"><localize key=\"header.tasks\"></localize></a></li>\n                \n                <hr>\n                <li *ngIf=\"shouldShowMenuItem('SETTINGS')\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/settings\" routerLinkActive=\"active\"><localize key=\"settings.menu\"></localize> </a></li>\n\n\n                <!-- <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li> -->\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n       </ul> \n    </div>\n  </nav>\n</header>\n","export interface MessageContainer {\n  setMessage( message: string );\n}\n\nexport class LocaleValue {\n  locale: string;\n  value: string;\n  \n  constructor( locale: string, value: string ) {\n    this.locale = locale;\n    this.value = value;\n  }\n}\n\nexport class LocalizedValue {\n  localizedValue: string;\n  localeValues: LocaleValue[];\n  \n  constructor( localizedValue: string, localeValues: LocaleValue[] ) {\n    this.localizedValue = localizedValue;\n    this.localeValues = localeValues;\n  }\n}\n\nexport class RoleBuilder {\n  static buildFromRoleName(roleName: string): RegistryRole {\n    if (roleName === \"cgr.SRA\") {\n      return new RegistryRole(RegistryRoleType.SRA, \"\", \"\", \"cgr.SRA\");\n    }\n    \n    let roleSplit = roleName.split(\".\");\n    \n    let orgCode: string = roleSplit[2];\n    \n    if (roleSplit.length === 4) {\n      return new RegistryRole(RegistryRoleType.RA, orgCode, \"\", roleName);\n    }\n    else if (roleSplit.length === 5) {\n      let roleSuffix: string = roleSplit[4];\n      \n      let gotCode: string = roleSplit[3];\n      \n      if (roleSuffix === \"RM\") {\n        return new RegistryRole(RegistryRoleType.RM, orgCode, gotCode, roleName);\n      }\n      else if (roleSuffix === \"RC\") {\n        return new RegistryRole(RegistryRoleType.RC, orgCode, gotCode, roleName);\n      }\n      else if (roleSuffix === \"AC\") {\n        return new RegistryRole(RegistryRoleType.AC, orgCode, gotCode, roleName);\n      }\n    }\n    else\n    {\n      return null;\n    }\n  }\n}\n\nexport class RegistryRole {\n  type: RegistryRoleType;\n  orgCode: string;\n  geoObjectTypeCode: string;\n  roleName: string;\n  displayLabel: string;\n  \n  constructor( type: RegistryRoleType, orgCode: string, geoObjectTypeCode: string, roleName: string ) {\n    this.type = type;\n    this.orgCode = orgCode;\n    this.geoObjectTypeCode = geoObjectTypeCode;\n    this.roleName = roleName;\n  }\n}\n\nexport enum RegistryRoleType {\n  SRA,\n  RA,\n  RM,\n  RC,\n  AC\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component, OnInit, Input} from '@angular/core';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { Profile } from '../../model/profile';\nimport { ProfileService } from '../../service/profile.service';\nimport { AuthService } from '../../service/auth.service';\nimport { Role } from '../../../admin/model/account';\n\n\n@Component({  \n  selector: 'profile',\n  templateUrl: './profile.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ProfileComponent {\n  public _profile:Profile = {\n    oid: '',\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    changePassword:false\n  };\n  \n  @Input('profile')\n  set profile(value: Profile) {\n    this._profile = value;\n    this.getRoles();\n  }\n  roles: Role[] = [];\n  \n  constructor(private service:ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) {}\n  \n\n  getRoles(): void {\n    this.service.getRolesForUser(this._profile.oid).then(roles => {\n      this.roles = roles;\n    });\n  }\n  \n  onSubmit():void {\n    if(!this._profile.changePassword) {\n      delete this._profile.password;\n    }\n\t  \n    this.service.apply(this._profile).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }\n\n  onChangePassword(): void {\n    this._profile.changePassword = !this._profile.changePassword;\n  }\n  \n  // getRoles():string {\n  //   return this.authService.getRoleDisplayLabels();\n  // }\n\n  getRolesArray(): any {\n    return this.authService.getRoles();\n  }\n\n  onRoleIdsUpdate(event: any): void {\n    console.log(event)\n  }\n  \n  cancel():void {\n    this.service.unlock(this._profile.oid).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n}\n","<div *ngIf=\"_profile\">\n  <message></message>\n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\">\n    <fieldset>\n      <div class=\"heading\">\n        <h3>\n          <localize key=\"profile.heading\"></localize>\n        </h3>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.firstname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.firstName\" name=\"firstname\" required>\n          </span>\n        </div>\n      </div>\n      \n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.lastname\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.lastName\" name=\"lastname\" required>\n          </span>\n        </div>\n      </div>\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"account.email\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n          </span>\n          <div *ngIf=\"aemail.errors?.email\" class=\"inline-error-message\">\n            <localize key=\"account.email.validation\"></localize>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"heading\">\n        <h3>\n          <localize key=\"account.info.heading\"></localize>\n        </h3>\n      </div>\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"profilename\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n          <span class=\"text\">\n            <input type=\"text\" [(ngModel)]=\"_profile.username\" name=\"username\" required>\n          </span>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n        </div>\n        <div class=\"holder\">\n          <!-- <boolean-field [(value)]=\"profile.changePassword\"></boolean-field> -->\n          <div style=\"text-align: left;\">\n            <input type=\"button\" *ngIf=\"!_profile.changePassword\" [value]=\"'account.user.change.password.button' | localize\" class=\"btn btn-primary\"\n              (click)=\"onChangePassword()\" />\n            <input type=\"button\" *ngIf=\"_profile.changePassword\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\"\n              (click)=\"onChangePassword()\" />\n          </div>\n        </div>\n      </div>\n      <div *ngIf=\"_profile.changePassword\">\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.password\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" [(ngModel)]=\"_profile.password\" name=\"password\" #password=\"ngModel\" required\n                minlength=\"5\" maxlength=\"50\">\n              <ng2-password-strength-bar [passwordToCheck]=\"_profile.password\">\n              </ng2-password-strength-bar>\n            </span>\n          </div>\n        </div>\n        <div class=\"row-holder\">\n          <div class=\"label-holder\">\n            <label>\n              <localize key=\"account.certainPassword\"></localize>\n            </label>\n          </div>\n          <div class=\"holder\">\n            <span class=\"text\">\n              <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" [equalTo]=\"password\" />\n            </span>\n            <div *ngIf=\"certainPassword.errors?.equalTo\" class=\"inline-error-message\">\n              <localize key=\"account.certainPassword.validation\"></localize>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <div class=\"row-holder\">\n        <div class=\"label-holder\">\n          <label>\n            <localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize>\n          </label>\n        </div>\n        <div class=\"holder\">\n\n          <table class=\"table\">\n            <thead>\n              <tr>\n                  <th><localize key=\"profile.roles.role.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.organization.table.heading\"></localize></th>\n                  <th><localize key=\"profile.roles.geoobjecttype.table.heading\"></localize></th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr *ngFor=\"let role of roles\">\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n                <td *ngIf=\"role.type === 'SRA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type === 'RA' && role.assigned\">\n                  \n                </td>\n\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.label.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.orgLabel.localizedValue}}\n                </td>\n                <td *ngIf=\"role.type !== 'RA' && role.orgCode.length > 0 && role.assigned\">\n                  {{role.geoObjectTypeLabel.localizedValue}}\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- <ul>\n            <li *ngFor=\"let role of getRolesArray()\">{{role}}</li>\n          </ul> -->\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"button-holder\">\n            <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />\n            <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\"\n              [disabled]=\"!(form.valid)\" />\n          </div>\n        </div>\n      </div>\n    </fieldset>\n  </form>\n\n</div>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport { AuthService} from './auth.service';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()  || this.service.isContributer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isLoggedIn()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/login' ]);\n    \n    return false;\n  }\n}\n\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FileUploadModule } from 'ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n\nimport { ErrorModalComponent } from './component/modals/error-modal.component';\nimport { SuccessModalComponent } from './component/modals/success-modal.component';\nimport { ConfirmModalComponent } from './component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from './component/message/error-message.component';\nimport { MessageComponent } from './component/message/message.component';\nimport { ValidationComponent } from './component/form-fields/base/validation.component';\nimport { BooleanFieldComponent } from './component/form-fields/boolean-field/boolean-field.component';\nimport { LoadingBarComponent } from './component/loading-bar/loading-bar.component';\nimport { PasswordStrengthBarComponent } from './component/password-strength-bar/password-strength-bar.component';\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from './service/guard.service';\nimport { PendingChangesGuard } from './service/pending-changes-guard';\n\nimport { AuthService } from './service/auth.service';\nimport { ProfileService } from './service/profile.service';\nimport { LocalizationService } from './service/localization.service';\nimport { ProgressService } from './service/progress.service';\nimport { EventService } from './service/event.service';\nimport { ModalStepIndicatorService } from './service/modal-step-indicator.service';\nimport { SessionService } from './service/session.service';\n\nimport { LocalizePipe } from './pipe/localize.pipe';\nimport { PhonePipe } from './pipe/phone.pipe';\n\nimport { OnlyNumber } from './directive/number-only.directive';\nimport { MustMatchDirective } from './directive/must-match.directive';\n\nimport { CgrHeaderComponent } from './component/header/header.component';\nimport { ProgressBarComponent } from './component/progress-bar/progress-bar.component';\nimport { LocalizeComponent } from './component/localize/localize.component';\nimport { ModalStepIndicatorComponent } from './component/modals/modal-step-indicator.component';\nimport { ProfileComponent } from './component/profile/profile.component';\n\nimport '../rxjs-extensions';\n\n@NgModule({\n\timports: [\n\t\tCommonModule,\n\t\tRouterModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule,\n\t\tFileUploadModule,\n\t\tModalModule.forRoot(),\n\t\tTreeModule,\n\t\tContextMenuModule,\n\t\tBsDropdownModule,\n\t\tButtonsModule,\n\t\tTypeaheadModule,\n\t\tProgressbarModule,\n\t\tCollapseModule,\n\t\tNgxPaginationModule\n\t],\n\tdeclarations: [\n\t\tLocalizeComponent,\n\t\tBooleanFieldComponent,\n\t\tLoadingBarComponent,\n\t\tErrorMessageComponent,\n\t\tMessageComponent,\n\t\tConfirmModalComponent,\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tOnlyNumber,\n\t\tMustMatchDirective,\n\t\tValidationComponent,\n\t\tProgressBarComponent,\n\t\tModalStepIndicatorComponent,\n\t\tCgrHeaderComponent,\n\t\tProfileComponent,\n\t\tLocalizePipe,\n\t\tPhonePipe\n\t],\n\texports: [\n\t\tLocalizeComponent,\n\t\tBooleanFieldComponent,\n\t\tLoadingBarComponent,\n\t\tErrorMessageComponent,\n\t\tMessageComponent,\n\t\tConfirmModalComponent,\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tPasswordStrengthBarComponent,\n\t\tOnlyNumber,\n\t\tMustMatchDirective,\n\t\tValidationComponent,\n\t\tProgressBarComponent,\n\t\tModalStepIndicatorComponent,\n\t\tCgrHeaderComponent,\n\t\tProfileComponent,\n\t\tLocalizePipe,\n\t\tPhonePipe,\n\t\tCommonModule,\n\t\tFormsModule,\n\t\tReactiveFormsModule\n\t],\n\tentryComponents: [\n\t\tErrorModalComponent,\n\t\tSuccessModalComponent,\n\t\tConfirmModalComponent,\n\t\tModalStepIndicatorComponent,\n\t\tErrorMessageComponent,\n\t\tLoadingBarComponent,\n\t\tProfileComponent\n\t]\n})\nexport class SharedModule {\n\tstatic forRoot(): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: SharedModule,\n\t\t\tproviders: [\n\t\t\t\tCookieService,\n\t\t\t\tAuthService,\n\t\t\t\tSessionService,\n\t\t\t\tProfileService,\n\t\t\t\tLocalizationService,\n\t\t\t\tModalStepIndicatorService,\n\t\t\t\tEventService,\n\t\t\t\tProgressService,\n\t\t\t\tAdminGuard,\n\t\t\t\tMaintainerGuard,\n\t\t\t\tContributerGuard,\n\t\t\t\tAuthGuard,\n\t\t\t\tPendingChangesGuard\n\t\t\t]\n\t\t};\n\t}\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { Subject } from 'rxjs';\nimport { LocalizationService } from '../../service/localization.service';\nimport { ModalTypes } from '../../model/modal';\n\n\n@Component( {\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./modal.css']\n} )\nexport class ConfirmModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","<div class=\"modal-body\">\n  <form class=\"modal-form\">\n\n    <div class=\"row\">\n      <div class=\"col-md-12 text-center\">\n        <h3>{{message}}</h3>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-12\">\n        <div class=\"button-holder\">\n          <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\">\n            <span>{{cancelText}}</span>\n          </button>\n          <button type=\"button\" (click)=\"confirm()\"\n            [ngClass]=\"type.toUpperCase() === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\"\n            aria-disabled=\"false\">\n            <span>{{submitText}}</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'error-message',\n    templateUrl: './error-message.component.html',\n    styleUrls: ['./error-message.css']\n} )\nexport class ErrorMessageComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( private localizeService: LocalizationService ) { }\n}\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { LocalizedValue } from '../model/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\nimport { EventService } from '../../shared/service/event.service';\n\ndeclare var Globalize: any;\ndeclare var com: any\ndeclare var acp: any;\n\n@Injectable()\nexport class LocalizationService {\n\n    constructor( private http: HttpClient, private eventService: EventService ) { }\n\n    locales: string[] = ['defaultLocale'];\n\n    private parser: any = Globalize.numberParser();\n    private formatter: any = Globalize.numberFormatter();\n\n    getLocales(): string[] {\n        return this.locales;\n    }\n\n    setLocales( locales: string[] ): void {\n        this.locales = locales;\n    }\n\n    create(): LocalizedValue {\n        const value = { localizedValue: '', localeValues: [] } as LocalizedValue;\n\n        this.locales.forEach( locale => {\n            value.localeValues.push( { locale: locale, value: '' } );\n        } );\n\n        return value;\n    }\n\n    public parseNumber( value: string ): number {\n        if ( value != null && value.length > 0 ) {\n            //convert data from view format to model format\n            var number = this.parser( value );\n\n            return number;\n        }\n\n        return null;\n    }\n\n    public formatNumber( value: any ): string {\n        if ( value != null ) {\n            var number = value;\n\n            if ( typeof number === 'string' ) {\n                if ( number.length > 0 && Number( number ) ) {\n                    number = Number( value );\n                }\n                else {\n                    return \"\";\n                }\n            }\n\n            //convert data from model format to view format\n            return this.formatter( number );\n        }\n\n        return null;\n    }\n\n    public localize( bundle: string, key: string ): string {\n        return com.runwaysdk.Localize.localize( bundle, key );\n    }\n\n    public get( key: string ): string {\n        return com.runwaysdk.Localize.get( key );\n    }\n\n    public decode( key: string ): string {\n        let index = key.lastIndexOf( '.' );\n\n        if ( index !== -1 ) {\n\n            let temp = [key.slice( 0, index ), key.slice( index + 1 )]\n\n            return this.localize( temp[0], temp[1] );\n        }\n        else {\n            return this.get( key );\n        }\n    }\n}\n","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","import {Component, Input, Output, EventEmitter} from '@angular/core';\n\ndeclare var acp:string;\n\n@Component({    \n  selector: 'boolean-field',\n  templateUrl: './boolean-field.component.html',\n  styleUrls: ['./boolean-field.css']\n})\nexport class BooleanFieldComponent {\n\n  @Input() value:boolean = false;\n  @Output() public valueChange = new EventEmitter<boolean>();\n\n  @Input() localizeLabelKey:string = \"\"; // localization key used to localize in the component template\n  @Input() label:string = \"\"; // raw string input\n\n  @Input() disable:boolean = false;\n\n  /* You can pass a function in with (change)='function()' */\n  @Output() public change = new EventEmitter<any>();\n\n  constructor(){}\n  \n  toggle():void {\n    if(!this.disable){\n      this.value = !this.value;\n      \n      this.valueChange.emit(this.value);\n      this.change.emit(this.value);\n    }\n  }\n}","<div class=\"check-block\">\n  <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value, 'disabled': disable}\" ng-style=\"chkstyle\" class=\"chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\" [ngClass]=\"{'disabled': disable}\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component({\n\tselector: 'success-modal',\n\ttemplateUrl: './success-modal.component.html',\n\tstyleUrls: ['./success-modal.css']\n})\nexport class SuccessModalComponent implements OnInit {\n    /*\n     * Message\n     */\n\t@Input() message: string;\n\n\tconstructor(public bsModalRef: BsModalRef, private localizeService: LocalizationService) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis.message = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n\t}\n\n}\n","<div class=\"modal-body\">\n\t<form class=\"modal-form\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12 text-center\">\n\t\t\t\t<h3>{{message}}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"button-holder\">\n\t\t\t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\">\n\t\t\t\t\t\t<localize key=\"modal.button.close\"></localize>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\n</div>\n","\nimport { Component, OnChanges, Input, SimpleChange } from '@angular/core';\n\n@Component({\n\tselector: 'password-strength-bar',\n\ttemplateUrl: './password-strength-bar.component.html',\n\tstyleUrls: ['./password-strength-bar.component.css']\n})\nexport class PasswordStrengthBarComponent implements OnChanges {\n\n\t@Input() passwordToCheck: string;\n\tbar0: string;\n\tbar1: string;\n\tbar2: string;\n\tbar3: string;\n\tbar4: string;\n\n\tprivate colors = ['#F00', '#F90', '#FF0', '#9F0', '#0F0'];\n\n\tprivate static measureStrength(pass: string) {\n\t\tlet score = 0;\n\t\t// award every unique letter until 5 repetitions  \n\t\tlet letters = {};\n\t\tfor (let i = 0; i < pass.length; i++) {\n\t\t\tletters[pass[i]] = (letters[pass[i]] || 0) + 1;\n\t\t\tscore += 5.0 / letters[pass[i]];\n\t\t}\n\t\t// bonus points for mixing it up  \n\t\tlet variations = {\n\t\t\tdigits: /\\d/.test(pass),\n\t\t\tlower: /[a-z]/.test(pass),\n\t\t\tupper: /[A-Z]/.test(pass),\n\t\t\tnonWords: /\\W/.test(pass),\n\t\t};\n\n\t\tlet variationCount = 0;\n\t\tfor (let check in variations) {\n\t\t\tvariationCount += (variations[check]) ? 1 : 0;\n\t\t}\n\t\tscore += (variationCount - 1) * 10;\n\t\treturn Math.trunc(score);\n\t}\n\n\tprivate getColor(score: number) {\n\t\tlet idx = 0;\n\t\tif (score > 90) {\n\t\t\tidx = 4;\n\t\t} else if (score > 70) {\n\t\t\tidx = 3;\n\t\t} else if (score >= 40) {\n\t\t\tidx = 2;\n\t\t} else if (score >= 20) {\n\t\t\tidx = 1;\n\t\t}\n\t\treturn {\n\t\t\tidx: idx + 1,\n\t\t\tcol: this.colors[idx]\n\t\t};\n\t}\n\n\tngOnChanges(changes: { [propName: string]: SimpleChange }): void {\n\t\tvar password = changes['passwordToCheck'].currentValue;\n\t\tthis.setBarColors(5, '#DDD');\n\t\tif (password) {\n\t\t\tlet c = this.getColor(PasswordStrengthBarComponent.measureStrength(password));\n\t\t\tthis.setBarColors(c.idx, c.col);\n\t\t}\n\t}\n\tprivate setBarColors(count, col) {\n\t\tfor (let _n = 0; _n < count; _n++) {\n\t\t\tthis['bar' + _n] = col;\n\t\t}\n\t}\n\n}  \n","<div style=\"margin: 11px;\" id=\"strength\" #strength>\n    <ul id=\"strengthBar\">\n        <li class=\"point\" [style.background-color]=\"bar0\"></li>\n        <li class=\"point\" [style.background-color]=\"bar1\"></li>\n        <li class=\"point\" [style.background-color]=\"bar2\"></li>\n        <li class=\"point\" [style.background-color]=\"bar3\"></li>\n        <li class=\"point\" [style.background-color]=\"bar4\"></li>\n    </ul>\n</div>\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { formatNumber, ParsedNumber } from 'libphonenumber-js';\n\n\n@Pipe({\n  name: 'phone'\n})\nexport class PhonePipe implements PipeTransform {\n\n  transform(value: ParsedNumber, args?: string): any {\n    if (!value) {\n      return value;\n    }\n\n    return formatNumber({ country: 'US', phone: value.toString() }, 'International');\n  }\n\n}\n","\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[OnlyNumber]'\n})\nexport class OnlyNumber {\n\n  constructor(private el: ElementRef) { }\n\n  @Input() OnlyNumber: boolean;\n \n  @HostListener('keydown', ['$event']) onKeyDown(event:any) {\n    let e = <KeyboardEvent> event;\n    if (this.OnlyNumber) {\n      if ([46, 8, 9, 27, 13, 110, 190].indexOf(e.keyCode) !== -1 ||\n        // Allow: Ctrl+A\n        (e.keyCode == 65 && e.ctrlKey === true) ||\n        // Allow: Ctrl+C\n        (e.keyCode == 67 && e.ctrlKey === true) ||\n        // Allow: Ctrl+X\n        (e.keyCode == 88 && e.ctrlKey === true) ||\n        // Allow: home, end, left, right\n        (e.keyCode >= 35 && e.keyCode <= 39)) {\n          // let it happen, don't do anything\n          return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\n            e.preventDefault();\n        }\n      }\n  }\n}\n\n\n","import { Directive, Input } from '@angular/core';\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup } from '@angular/forms';\n\n// custom validator to check that two fields match\nexport function MustMatch(controlName: string, matchingControlName: string) {\n\treturn (formGroup: FormGroup) => {\n\t\tconst control = formGroup.controls[controlName];\n\t\tconst matchingControl = formGroup.controls[matchingControlName];\n\n\t\t// return null if controls haven't initialised yet\n\t\tif (!control || !matchingControl) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// return null if another validator has already found an error on the matchingControl\n\t\tif (matchingControl.errors && !matchingControl.errors.mustMatch) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// set error on matchingControl if validation fails\n\t\tif (control.value !== matchingControl.value) {\n\t\t\tmatchingControl.setErrors({ mustMatch: true });\n\t\t} else {\n\t\t\tmatchingControl.setErrors(null);\n\t\t}\n\t}\n}\n\n@Directive({\n\tselector: '[mustMatch]',\n\tproviders: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\n})\nexport class MustMatchDirective implements Validator {\n\t@Input('mustMatch') mustMatch: string[] = [];\n\n\tvalidate(formGroup: FormGroup): ValidationErrors {\n\t\treturn MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\n\t}\n}","import { Component } from '@angular/core';\nimport { LocalizationService } from '../../service/localization.service';\nimport { ModalStepIndicatorService} from '../../service/modal-step-indicator.service'\n\nimport { Step, StepConfig } from '../../model/modal';\nimport { Subscription } from 'rxjs';\n\n\n@Component( { \n    selector: 'modal-step-indicator',\n    templateUrl: './modal-step-indicator.component.html',\n    styleUrls: ['./modal-step-indicator.css']\n} )\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor( private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService ) { \n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe( stepConfig => {\n            this.stepConfig = stepConfig;\n        })\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'validation',\n  template: `\n    <div class=\"validation\">\n      <div *ngFor=\"let message of messages\">{{message}}</div>\n    </div>\n  `,\n  styles: [`\n    .validation {\n      color: #999;\n      margin: 12px;\n    }`\n  ]\n})\nexport class ValidationComponent {\n  @Input() messages: Array<string>;\n}","import { Component, OnInit } from '@angular/core';\n\nimport { Progress } from '../../model/progress';\nimport { ProgressService, IProgressListener } from '../../service/progress.service';\n\n@Component({\n  \n  selector: 'progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styles: [\n    '.progress-overlay { background-color: #CCCCCC; position: absolute; display: block;opacity: 0.8;z-index: 99999 !important;}',\n    '.progress-div { width: 100%; margin-left: 0; padding-left: 25%; padding-right: 25%; margin-top: 30% }'\n  ]\n})\nexport class ProgressBarComponent implements OnInit, IProgressListener {\n  public showIndicator: boolean = true;\n\n  public prog:Progress = {\n    current:0,\n    total:1,\n    description:\"Initializing\"\n  };\n\n  constructor(private service: ProgressService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.prog = {\n      current:0,\n      total:1,\n      description:\"Initializing\"\n    };\n    \n    this.showIndicator = true;\n  }\n  \n  progress(progress:Progress):void {\n    this.prog = progress;\n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","<div *ngIf=\"showIndicator\" class=\"progress-overlay\" style=\"height: 100%; width: 100%;\">\n  <div class=\"progress-div\">\n    <progressbar class=\"progress-striped active\" [max]=\"prog.total\" [value]=\"prog.current\"><i>{{prog.description}}</i></progressbar>\n  </div>\n</div>\n","import { Role } from \"../../admin/model/account\";\n\n///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\nexport class Profile {\n  oid: string;\n  username: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  changePassword: boolean;\n}","import { CanDeactivate } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n  canDeactivate: () => boolean | Observable<boolean>;\n  afterDeactivate: (arg:boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n  canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n    if (!component.canDeactivate())\n    {\n      // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n      // when navigating away from your angular app, the browser will show a generic warning message\n      // see http://stackoverflow.com/a/42207299/7307355\n      var confirmRet = confirm('WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.');\n      \n      component.afterDeactivate(confirmRet);\n      \n      return confirmRet;\n    }\n    \n    return true;\n  }\n}","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var acp;\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n    private listeners: IEventListener[] = [];\n\n    public registerListener( listener: IEventListener ): void {\n        this.listeners.push( listener );\n    }\n\n    public deregisterListener( listener: IEventListener ): boolean {\n        let indexOfItem = this.listeners.indexOf( listener );\n\n        if ( indexOfItem === -1 ) {\n            return false;\n        }\n\n        this.listeners.splice( indexOfItem, 1 );\n\n        return true;\n    }\n\n    public start(): void {\n        for ( const listener of this.listeners ) {\n            listener.start();\n        }\n    }\n\n    public complete(): void {\n        for ( const listener of this.listeners ) {\n            listener.complete();\n        }\n    }\n}\n","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component({\n  \n  selector: 'localize',\n  templateUrl: './localize.component.html',\n  styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n  @Input() key: string;\n  text: string;\n    \n  constructor(private service: LocalizationService) { }\n\n  ngOnInit(): void {\n    this.text = this.service.decode(this.key);\n  }\n}\n","{{text}}","import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '../model/user';\nimport { RoleBuilder, RegistryRole, RegistryRoleType } from '../model/core';\n\n@Injectable()\nexport class AuthService {\n  private user:User = {\n    loggedIn:false,\n    userName:'',\n    roles:[],\n    roleDisplayLabels:[],\n    version:\"0\",\n    installedLocales: []\n  };\n\n  constructor( private service: CookieService ) {\n    let cookie = service.get( 'user' );\n\n    if ( this.service.check( \"user\" ) && cookie != null && cookie.length > 0 ) {\n      let cookieData: string = this.service.get( \"user\" )\n      let cookieDataJSON: any = JSON.parse( cookieData );\n      \n      this.buildFromCookieJson(cookieDataJSON);\n    }\n  }\n  \n  buildFromCookieJson(cookieDataJSON: any)\n  {\n    this.user.userName = cookieDataJSON.userName;\n    this.buildRolesFromCookie(cookieDataJSON);\n    this.user.loggedIn = cookieDataJSON.loggedIn;\n    this.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n    this.user.version = cookieDataJSON.version;\n    this.user.installedLocales = cookieDataJSON.installedLocales;\n  }\n  \n  buildRolesFromCookie(cookieDataJSON: any)\n  {\n    this.user.roles = [];\n    let roles: string[] = cookieDataJSON.roles;\n  \n    for (let i = 0; i < roles.length; ++i)\n    {\n      let role: RegistryRole = RoleBuilder.buildFromRoleName(roles[i]);\n    \n      if (role != null)\n      {\n        this.user.roles.push(role);\n      }\n    }\n  }\n  \n  isLoggedIn():boolean {\n    return this.user.loggedIn;\n  }\n  \n  setUser(cookieDataJSON: any):void {\n    this.buildFromCookieJson(cookieDataJSON);    \n  }\n\n  removeUser(): void {\n    this.user = {\n      loggedIn:false,\n      userName:'',\n      roles:[],\n      roleDisplayLabels:[],\n      version:\"0\",\n      installedLocales: []\n    };\n  }\n  \n  // Legacy Accessors:\n  isAdmin(): boolean {\n    return this.isSRA() || this.isRA();\n  }\n  \n  isMaintainer(): boolean {\n    return this.isRM();\n  }\n  \n  isContributer(): boolean {\n    return this.isRC();\n  }\n  \n  // Used to exactly identify a role. I.e. if we say we need RC, SRA doesn't count.\n  hasExactRole(roleType: RegistryRoleType)\n  {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === roleType) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  isSRA(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.SRA) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  isRA(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RA) {\n        return true;\n      }\n      else if (role.roleName.indexOf('commongeoregistry.RegistryAdministrator') !== -1\n               || role.roleName.indexOf( \"cgr.RegistryAdministrator\" ) !== -1) // Legacy support\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  isRM(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RM) {\n        return true;\n      }\n      else if (role.roleName.indexOf('commongeoregistry.RegistryMaintainer') !== -1\n               || role.roleName.indexOf( \"cgr.RegistryMaintainer\" ) !== -1) // Legacy support\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  isOrganizationRA(orgCode: string): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.orgCode === orgCode && role.type === RegistryRoleType.RA)\n      {\n        return true;\n      }\n    }\n    \n    return this.isSRA();\n  }\n\n  isGeoObjectTypeRM(orgCode: string, gotCode: string): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RM && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode)\n      {\n        return true;\n      }\n    }\n    \n    return this.isOrganizationRA(orgCode);\n  }\n\n  isGeoObjectTypeRC(orgCode: string, gotCode: string): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RC && role.orgCode === orgCode && role.geoObjectTypeCode === gotCode)\n      {\n        return true;\n      }\n    }\n    \n    return this.isGeoObjectTypeRM(orgCode, gotCode);\n  }\n  \n  isRC(): boolean {\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RC) {\n        return true;\n      }\n      else if (role.roleName.indexOf('commongeoregistry.RegistryContributor') !== -1\n               || role.roleName.indexOf( \"cgr.RegistryContributor\" ) !== -1) // Legacy support\n      {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  // Returns all organization codes that the current user participates in.\n  // If the user is an SRA then this method will return an empty string array.\n  getMyOrganizations(): string[] {\n    let orgCodes: string[] = [];\n  \n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      let role: RegistryRole = this.user.roles[i];\n      \n      if (role.type === RegistryRoleType.RC || role.type === RegistryRoleType.RM || role.type === RegistryRoleType.RA) {\n        orgCodes.push(role.orgCode);\n      }\n    }\n    \n    return orgCodes;\n  }\n\n  __getRoleFromRoleName(roleName: string): string{\n    let nameArr = roleName.split(\".\");\n\n    return nameArr[nameArr.length - 1];\n  }\n  \n  getUsername(): string {\n    return this.user.userName;\n  }\n\n  getRoles(): any {\n    return this.user.roles;\n  }\n\n  getRoleDisplayLabelsArray(): any {\n    return this.user.roleDisplayLabels;\n  }\n  \n  getRoleDisplayLabels(): string {\n    let str = \"\";\n    for (let i = 0; i < this.user.roleDisplayLabels.length; ++i)\n    {\n      let displayLabel = this.user.roleDisplayLabels[i]; \n    \n      if (displayLabel === \"Administrator\")\n      {\n        continue;\n        // It's OK to hardcode to a display label here because the end user can't change it anyway.\n        // Is it ideal? No. But sometimes it's better to get software out quicker than to spend forever\n        // on something that nobody will ever see.\n      }\n    \n      str = str + displayLabel;\n      \n      if (i < this.user.roleDisplayLabels.length-1)\n      {\n        str = str + \",\";\n      }\n    }\n  \n    return str;\n  }\n  \n  getVersion(): string {\n    return this.user.version;\n  }\n\n  getLocales(): any[] {\n    return this.user.installedLocales;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { LocalizationService } from '../service/localization.service';\n\n@Pipe({name: 'localize'})\nexport class LocalizePipe implements PipeTransform {\n  constructor(private service: LocalizationService) { }\n\t\n  transform(value: string): string {\n    return this.service.decode(value);\n  }\n}\n\n"],"sourceRoot":""}